
Anemometr_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eedc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  0800eff0  0800eff0  0001eff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f768  0800f768  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  0800f768  0800f768  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f768  0800f768  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f768  0800f768  0001f768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f76c  0800f76c  0001f76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800f770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001118  20000348  0800fab4  00020348  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001460  0800fab4  00021460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f2e  00000000  00000000  0002036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003844  00000000  00000000  0003929b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003cae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad79  00000000  00000000  0003f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185a4  00000000  00000000  0005a371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c19  00000000  00000000  00072915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010952e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072c4  00000000  00000000  00109584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800efd4 	.word	0x0800efd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800efd4 	.word	0x0800efd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8001120:	2204      	movs	r2, #4
 8001122:	4909      	ldr	r1, [pc, #36]	; (8001148 <default_ip_assign+0x2c>)
 8001124:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001128:	f005 fa6c 	bl	8006604 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 800112c:	2204      	movs	r2, #4
 800112e:	4907      	ldr	r1, [pc, #28]	; (800114c <default_ip_assign+0x30>)
 8001130:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001134:	f005 fa66 	bl	8006604 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8001138:	2204      	movs	r2, #4
 800113a:	4905      	ldr	r1, [pc, #20]	; (8001150 <default_ip_assign+0x34>)
 800113c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001140:	f005 fa60 	bl	8006604 <WIZCHIP_WRITE_BUF>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000368 	.word	0x20000368
 800114c:	20000370 	.word	0x20000370
 8001150:	2000036c 	.word	0x2000036c

08001154 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	2000      	movs	r0, #0
 800115c:	f005 f9a4 	bl	80064a8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001160:	2000      	movs	r0, #0
 8001162:	f005 f955 	bl	8006410 <WIZCHIP_READ>
   default_ip_assign();
 8001166:	f7ff ffd9 	bl	800111c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 800116a:	2206      	movs	r2, #6
 800116c:	4903      	ldr	r1, [pc, #12]	; (800117c <default_ip_update+0x28>)
 800116e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001172:	f005 fa47 	bl	8006604 <WIZCHIP_WRITE_BUF>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000de0 	.word	0x20000de0

08001180 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	2000      	movs	r0, #0
 8001188:	f005 f98e 	bl	80064a8 <WIZCHIP_WRITE>
	getMR(); // for delay
 800118c:	2000      	movs	r0, #0
 800118e:	f005 f93f 	bl	8006410 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8001192:	2206      	movs	r2, #6
 8001194:	4903      	ldr	r1, [pc, #12]	; (80011a4 <default_ip_conflict+0x24>)
 8001196:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800119a:	f005 fa33 	bl	8006604 <WIZCHIP_WRITE_BUF>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000de0 	.word	0x20000de0

080011a8 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <reg_dhcp_cbfunc+0x4c>)
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <reg_dhcp_cbfunc+0x50>)
 80011b8:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <reg_dhcp_cbfunc+0x54>)
 80011bc:	4a10      	ldr	r2, [pc, #64]	; (8001200 <reg_dhcp_cbfunc+0x58>)
 80011be:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <reg_dhcp_cbfunc+0x5c>)
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <reg_dhcp_cbfunc+0x60>)
 80011c4:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <reg_dhcp_cbfunc+0x2a>
 80011cc:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <reg_dhcp_cbfunc+0x4c>)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <reg_dhcp_cbfunc+0x36>
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <reg_dhcp_cbfunc+0x54>)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <reg_dhcp_cbfunc+0x42>
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <reg_dhcp_cbfunc+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000010 	.word	0x20000010
 80011f8:	0800111d 	.word	0x0800111d
 80011fc:	20000014 	.word	0x20000014
 8001200:	08001155 	.word	0x08001155
 8001204:	20000018 	.word	0x20000018
 8001208:	08001181 	.word	0x08001181

0800120c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8001212:	463b      	mov	r3, r7
 8001214:	2206      	movs	r2, #6
 8001216:	4619      	mov	r1, r3
 8001218:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800121c:	f005 f992 	bl	8006544 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001220:	4b72      	ldr	r3, [pc, #456]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001228:	4b70      	ldr	r3, [pc, #448]	; (80013ec <makeDHCPMSG+0x1e0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2201      	movs	r2, #1
 800122e:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001230:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2206      	movs	r2, #6
 8001236:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001238:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <makeDHCPMSG+0x1e0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001240:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3304      	adds	r3, #4
 8001246:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001248:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <makeDHCPMSG+0x1e4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0e1b      	lsrs	r3, r3, #24
 800124e:	b2da      	uxtb	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8001254:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <makeDHCPMSG+0x1e4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0c1a      	lsrs	r2, r3, #16
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	3301      	adds	r3, #1
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8001262:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <makeDHCPMSG+0x1e4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0a1a      	lsrs	r2, r3, #8
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3302      	adds	r3, #2
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8001270:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <makeDHCPMSG+0x1e4>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	3303      	adds	r3, #3
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 800127c:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <makeDHCPMSG+0x1e0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8001284:	4b59      	ldr	r3, [pc, #356]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	330a      	adds	r3, #10
 800128a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3301      	adds	r3, #1
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 800129a:	4b54      	ldr	r3, [pc, #336]	; (80013ec <makeDHCPMSG+0x1e0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80012a2:	4b52      	ldr	r3, [pc, #328]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2200      	movs	r2, #0
 80012a8:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80012aa:	4b50      	ldr	r3, [pc, #320]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2200      	movs	r2, #0
 80012b0:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 80012ba:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 80012ca:	4b48      	ldr	r3, [pc, #288]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2200      	movs	r2, #0
 80012d8:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80012da:	4b44      	ldr	r3, [pc, #272]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2200      	movs	r2, #0
 80012f0:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <makeDHCPMSG+0x1e0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2200      	movs	r2, #0
 8001300:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8001302:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <makeDHCPMSG+0x1e0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2200      	movs	r2, #0
 8001310:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <makeDHCPMSG+0x1e0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <makeDHCPMSG+0x1e8>)
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8001324:	4b31      	ldr	r3, [pc, #196]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a32      	ldr	r2, [pc, #200]	; (80013f4 <makeDHCPMSG+0x1e8>)
 800132a:	7852      	ldrb	r2, [r2, #1]
 800132c:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <makeDHCPMSG+0x1e8>)
 8001334:	7892      	ldrb	r2, [r2, #2]
 8001336:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <makeDHCPMSG+0x1e0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a2d      	ldr	r2, [pc, #180]	; (80013f4 <makeDHCPMSG+0x1e8>)
 800133e:	78d2      	ldrb	r2, [r2, #3]
 8001340:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a2b      	ldr	r2, [pc, #172]	; (80013f4 <makeDHCPMSG+0x1e8>)
 8001348:	7912      	ldrb	r2, [r2, #4]
 800134a:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <makeDHCPMSG+0x1e8>)
 8001354:	7952      	ldrb	r2, [r2, #5]
 8001356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 800135a:	2306      	movs	r3, #6
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e008      	b.n	8001372 <makeDHCPMSG+0x166>
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	4413      	add	r3, r2
 8001368:	2200      	movs	r2, #0
 800136a:	771a      	strb	r2, [r3, #28]
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	3301      	adds	r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d9f3      	bls.n	8001360 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e009      	b.n	8001392 <makeDHCPMSG+0x186>
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <makeDHCPMSG+0x1e0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	4413      	add	r3, r2
 8001386:	2200      	movs	r2, #0
 8001388:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3301      	adds	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b3f      	cmp	r3, #63	; 0x3f
 8001396:	d9f2      	bls.n	800137e <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e009      	b.n	80013b2 <makeDHCPMSG+0x1a6>
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <makeDHCPMSG+0x1e0>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	3301      	adds	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	daf1      	bge.n	800139e <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <makeDHCPMSG+0x1e0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2263      	movs	r2, #99	; 0x63
 80013c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <makeDHCPMSG+0x1e0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2282      	movs	r2, #130	; 0x82
 80013ca:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <makeDHCPMSG+0x1e0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2253      	movs	r2, #83	; 0x53
 80013d4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <makeDHCPMSG+0x1e0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2263      	movs	r2, #99	; 0x63
 80013de:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000df4 	.word	0x20000df4
 80013f0:	20000de8 	.word	0x20000de8
 80013f4:	20000de0 	.word	0x20000de0

080013f8 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8001402:	f7ff ff03 	bl	800120c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <send_DHCP_DISCOVER+0x168>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 800140c:	4b54      	ldr	r3, [pc, #336]	; (8001560 <send_DHCP_DISCOVER+0x168>)
 800140e:	2200      	movs	r2, #0
 8001410:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8001412:	4b53      	ldr	r3, [pc, #332]	; (8001560 <send_DHCP_DISCOVER+0x168>)
 8001414:	2200      	movs	r2, #0
 8001416:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001418:	4b51      	ldr	r3, [pc, #324]	; (8001560 <send_DHCP_DISCOVER+0x168>)
 800141a:	2200      	movs	r2, #0
 800141c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800141e:	4b51      	ldr	r3, [pc, #324]	; (8001564 <send_DHCP_DISCOVER+0x16c>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <send_DHCP_DISCOVER+0x16c>)
 8001426:	2200      	movs	r2, #0
 8001428:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 800142a:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <send_DHCP_DISCOVER+0x16c>)
 800142c:	2200      	movs	r2, #0
 800142e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8001430:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <send_DHCP_DISCOVER+0x16c>)
 8001432:	2200      	movs	r2, #0
 8001434:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001436:	2304      	movs	r3, #4
 8001438:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800143a:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	80b9      	strh	r1, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	2235      	movs	r2, #53	; 0x35
 8001448:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	80b9      	strh	r1, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	2201      	movs	r2, #1
 800145a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 800145e:	4b42      	ldr	r3, [pc, #264]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	1c59      	adds	r1, r3, #1
 8001466:	80b9      	strh	r1, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	2201      	movs	r2, #1
 800146c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	80b9      	strh	r1, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	223d      	movs	r2, #61	; 0x3d
 800147e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	80b9      	strh	r1, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	2207      	movs	r2, #7
 8001490:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001494:	4b34      	ldr	r3, [pc, #208]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	1c59      	adds	r1, r3, #1
 800149c:	80b9      	strh	r1, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	1c59      	adds	r1, r3, #1
 80014ae:	80b9      	strh	r1, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <send_DHCP_DISCOVER+0x174>)
 80014b4:	7819      	ldrb	r1, [r3, #0]
 80014b6:	1813      	adds	r3, r2, r0
 80014b8:	460a      	mov	r2, r1
 80014ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	1c59      	adds	r1, r3, #1
 80014c6:	80b9      	strh	r1, [r7, #4]
 80014c8:	4618      	mov	r0, r3
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <send_DHCP_DISCOVER+0x174>)
 80014cc:	7859      	ldrb	r1, [r3, #1]
 80014ce:	1813      	adds	r3, r2, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	88bb      	ldrh	r3, [r7, #4]
 80014dc:	1c59      	adds	r1, r3, #1
 80014de:	80b9      	strh	r1, [r7, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <send_DHCP_DISCOVER+0x174>)
 80014e4:	7899      	ldrb	r1, [r3, #2]
 80014e6:	1813      	adds	r3, r2, r0
 80014e8:	460a      	mov	r2, r1
 80014ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	80b9      	strh	r1, [r7, #4]
 80014f8:	4618      	mov	r0, r3
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <send_DHCP_DISCOVER+0x174>)
 80014fc:	78d9      	ldrb	r1, [r3, #3]
 80014fe:	1813      	adds	r3, r2, r0
 8001500:	460a      	mov	r2, r1
 8001502:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	1c59      	adds	r1, r3, #1
 800150e:	80b9      	strh	r1, [r7, #4]
 8001510:	4618      	mov	r0, r3
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <send_DHCP_DISCOVER+0x174>)
 8001514:	7919      	ldrb	r1, [r3, #4]
 8001516:	1813      	adds	r3, r2, r0
 8001518:	460a      	mov	r2, r1
 800151a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	88bb      	ldrh	r3, [r7, #4]
 8001524:	1c59      	adds	r1, r3, #1
 8001526:	80b9      	strh	r1, [r7, #4]
 8001528:	4618      	mov	r0, r3
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <send_DHCP_DISCOVER+0x174>)
 800152c:	7959      	ldrb	r1, [r3, #5]
 800152e:	1813      	adds	r3, r2, r0
 8001530:	460a      	mov	r2, r1
 8001532:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	1c59      	adds	r1, r3, #1
 800153e:	80b9      	strh	r1, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	220c      	movs	r2, #12
 8001544:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <send_DHCP_DISCOVER+0x170>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	1c59      	adds	r1, r3, #1
 8001550:	80b9      	strh	r1, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	2200      	movs	r2, #0
 8001556:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800155a:	2300      	movs	r3, #0
 800155c:	80fb      	strh	r3, [r7, #6]
 800155e:	e017      	b.n	8001590 <send_DHCP_DISCOVER+0x198>
 8001560:	20000df0 	.word	0x20000df0
 8001564:	20000dec 	.word	0x20000dec
 8001568:	20000df4 	.word	0x20000df4
 800156c:	20000de0 	.word	0x20000de0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001570:	88f9      	ldrh	r1, [r7, #6]
 8001572:	4b89      	ldr	r3, [pc, #548]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	1c58      	adds	r0, r3, #1
 800157a:	80b8      	strh	r0, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	4b87      	ldr	r3, [pc, #540]	; (800179c <send_DHCP_DISCOVER+0x3a4>)
 8001580:	5c59      	ldrb	r1, [r3, r1]
 8001582:	1813      	adds	r3, r2, r0
 8001584:	460a      	mov	r2, r1
 8001586:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	3301      	adds	r3, #1
 800158e:	80fb      	strh	r3, [r7, #6]
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4a82      	ldr	r2, [pc, #520]	; (800179c <send_DHCP_DISCOVER+0x3a4>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ea      	bne.n	8001570 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <send_DHCP_DISCOVER+0x3a8>)
 800159c:	78db      	ldrb	r3, [r3, #3]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b7d      	ldr	r3, [pc, #500]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 80015a4:	681c      	ldr	r4, [r3, #0]
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	1c59      	adds	r1, r3, #1
 80015aa:	80b9      	strh	r1, [r7, #4]
 80015ac:	461d      	mov	r5, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f001 fa68 	bl	8002a84 <NibbleToHex>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	1963      	adds	r3, r4, r5
 80015ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80015be:	4b78      	ldr	r3, [pc, #480]	; (80017a0 <send_DHCP_DISCOVER+0x3a8>)
 80015c0:	78da      	ldrb	r2, [r3, #3]
 80015c2:	4b75      	ldr	r3, [pc, #468]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 80015c4:	681c      	ldr	r4, [r3, #0]
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	1c59      	adds	r1, r3, #1
 80015ca:	80b9      	strh	r1, [r7, #4]
 80015cc:	461d      	mov	r5, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f001 fa58 	bl	8002a84 <NibbleToHex>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	1963      	adds	r3, r4, r5
 80015da:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80015de:	4b70      	ldr	r3, [pc, #448]	; (80017a0 <send_DHCP_DISCOVER+0x3a8>)
 80015e0:	791b      	ldrb	r3, [r3, #4]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 80015e8:	681c      	ldr	r4, [r3, #0]
 80015ea:	88bb      	ldrh	r3, [r7, #4]
 80015ec:	1c59      	adds	r1, r3, #1
 80015ee:	80b9      	strh	r1, [r7, #4]
 80015f0:	461d      	mov	r5, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f001 fa46 	bl	8002a84 <NibbleToHex>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	1963      	adds	r3, r4, r5
 80015fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001602:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <send_DHCP_DISCOVER+0x3a8>)
 8001604:	791a      	ldrb	r2, [r3, #4]
 8001606:	4b64      	ldr	r3, [pc, #400]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001608:	681c      	ldr	r4, [r3, #0]
 800160a:	88bb      	ldrh	r3, [r7, #4]
 800160c:	1c59      	adds	r1, r3, #1
 800160e:	80b9      	strh	r1, [r7, #4]
 8001610:	461d      	mov	r5, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f001 fa36 	bl	8002a84 <NibbleToHex>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	1963      	adds	r3, r4, r5
 800161e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001622:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <send_DHCP_DISCOVER+0x3a8>)
 8001624:	795b      	ldrb	r3, [r3, #5]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 800162c:	681c      	ldr	r4, [r3, #0]
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	1c59      	adds	r1, r3, #1
 8001632:	80b9      	strh	r1, [r7, #4]
 8001634:	461d      	mov	r5, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f001 fa24 	bl	8002a84 <NibbleToHex>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	1963      	adds	r3, r4, r5
 8001642:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001646:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <send_DHCP_DISCOVER+0x3a8>)
 8001648:	795a      	ldrb	r2, [r3, #5]
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 800164c:	681c      	ldr	r4, [r3, #0]
 800164e:	88bb      	ldrh	r3, [r7, #4]
 8001650:	1c59      	adds	r1, r3, #1
 8001652:	80b9      	strh	r1, [r7, #4]
 8001654:	461d      	mov	r5, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f001 fa14 	bl	8002a84 <NibbleToHex>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	1963      	adds	r3, r4, r5
 8001662:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	b2d9      	uxtb	r1, r3
 800166a:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	88b8      	ldrh	r0, [r7, #4]
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	3307      	adds	r3, #7
 8001674:	1ac3      	subs	r3, r0, r3
 8001676:	3106      	adds	r1, #6
 8001678:	b2c9      	uxtb	r1, r1
 800167a:	4413      	add	r3, r2
 800167c:	460a      	mov	r2, r1
 800167e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001682:	4b45      	ldr	r3, [pc, #276]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	1c59      	adds	r1, r3, #1
 800168a:	80b9      	strh	r1, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	2237      	movs	r2, #55	; 0x37
 8001690:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;	// length of request
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	1c59      	adds	r1, r3, #1
 800169c:	80b9      	strh	r1, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	2208      	movs	r2, #8
 80016a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80016a6:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	88bb      	ldrh	r3, [r7, #4]
 80016ac:	1c59      	adds	r1, r3, #1
 80016ae:	80b9      	strh	r1, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80016b8:	4b37      	ldr	r3, [pc, #220]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	80b9      	strh	r1, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	1c59      	adds	r1, r3, #1
 80016d2:	80b9      	strh	r1, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	2206      	movs	r2, #6
 80016d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	1c59      	adds	r1, r3, #1
 80016e4:	80b9      	strh	r1, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	220f      	movs	r2, #15
 80016ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80016ee:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	88bb      	ldrh	r3, [r7, #4]
 80016f4:	1c59      	adds	r1, r3, #1
 80016f6:	80b9      	strh	r1, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	223a      	movs	r2, #58	; 0x3a
 80016fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	80b9      	strh	r1, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	223b      	movs	r2, #59	; 0x3b
 800170e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpZabbixServerIP;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	1c59      	adds	r1, r3, #1
 800171a:	80b9      	strh	r1, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	22e0      	movs	r2, #224	; 0xe0
 8001720:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpZabbixHostName;
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	1c59      	adds	r1, r3, #1
 800172c:	80b9      	strh	r1, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	22e1      	movs	r2, #225	; 0xe1
 8001732:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	88bb      	ldrh	r3, [r7, #4]
 800173c:	1c59      	adds	r1, r3, #1
 800173e:	80b9      	strh	r1, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	22ff      	movs	r2, #255	; 0xff
 8001744:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001748:	88bb      	ldrh	r3, [r7, #4]
 800174a:	80fb      	strh	r3, [r7, #6]
 800174c:	e009      	b.n	8001762 <send_DHCP_DISCOVER+0x36a>
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	4413      	add	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	3301      	adds	r3, #1
 8001760:	80fb      	strh	r3, [r7, #6]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001768:	d3f1      	bcc.n	800174e <send_DHCP_DISCOVER+0x356>

	// send broadcasting packet
	ip[0] = 255;
 800176a:	23ff      	movs	r3, #255	; 0xff
 800176c:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 800176e:	23ff      	movs	r3, #255	; 0xff
 8001770:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8001772:	23ff      	movs	r3, #255	; 0xff
 8001774:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8001776:	23ff      	movs	r3, #255	; 0xff
 8001778:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <send_DHCP_DISCOVER+0x3ac>)
 800177c:	7818      	ldrb	r0, [r3, #0]
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <send_DHCP_DISCOVER+0x3a0>)
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	463b      	mov	r3, r7
 8001784:	2243      	movs	r2, #67	; 0x43
 8001786:	9200      	str	r2, [sp, #0]
 8001788:	f44f 7209 	mov.w	r2, #548	; 0x224
 800178c:	f003 fbbc 	bl	8004f08 <sendto>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bdb0      	pop	{r4, r5, r7, pc}
 8001798:	20000df4 	.word	0x20000df4
 800179c:	20000008 	.word	0x20000008
 80017a0:	20000de0 	.word	0x20000de0
 80017a4:	20000df8 	.word	0x20000df8

080017a8 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80017b2:	f7ff fd2b 	bl	800120c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <send_DHCP_REQUEST+0x7c>)
 80017b8:	f993 3000 	ldrsb.w	r3, [r3]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d004      	beq.n	80017ca <send_DHCP_REQUEST+0x22>
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <send_DHCP_REQUEST+0x7c>)
 80017c2:	f993 3000 	ldrsb.w	r3, [r3]
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d134      	bne.n	8001834 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <send_DHCP_REQUEST+0x80>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	330a      	adds	r3, #10
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <send_DHCP_REQUEST+0x80>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	330a      	adds	r3, #10
 80017da:	3301      	adds	r3, #1
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <send_DHCP_REQUEST+0x80>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a11      	ldr	r2, [pc, #68]	; (800182c <send_DHCP_REQUEST+0x84>)
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <send_DHCP_REQUEST+0x80>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <send_DHCP_REQUEST+0x84>)
 80017f0:	7852      	ldrb	r2, [r2, #1]
 80017f2:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <send_DHCP_REQUEST+0x80>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0c      	ldr	r2, [pc, #48]	; (800182c <send_DHCP_REQUEST+0x84>)
 80017fa:	7892      	ldrb	r2, [r2, #2]
 80017fc:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <send_DHCP_REQUEST+0x80>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <send_DHCP_REQUEST+0x84>)
 8001804:	78d2      	ldrb	r2, [r2, #3]
 8001806:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <send_DHCP_REQUEST+0x88>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <send_DHCP_REQUEST+0x88>)
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <send_DHCP_REQUEST+0x88>)
 8001816:	789b      	ldrb	r3, [r3, #2]
 8001818:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <send_DHCP_REQUEST+0x88>)
 800181c:	78db      	ldrb	r3, [r3, #3]
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	e010      	b.n	8001844 <send_DHCP_REQUEST+0x9c>
 8001822:	bf00      	nop
 8001824:	2000047c 	.word	0x2000047c
 8001828:	20000df4 	.word	0x20000df4
 800182c:	20000368 	.word	0x20000368
 8001830:	20000df0 	.word	0x20000df0
   }
   else
   {
   	ip[0] = 255;
 8001834:	23ff      	movs	r3, #255	; 0xff
 8001836:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001838:	23ff      	movs	r3, #255	; 0xff
 800183a:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 800183c:	23ff      	movs	r3, #255	; 0xff
 800183e:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001840:	23ff      	movs	r3, #255	; 0xff
 8001842:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001844:	2304      	movs	r3, #4
 8001846:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001848:	4b8d      	ldr	r3, [pc, #564]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	897b      	ldrh	r3, [r7, #10]
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	8179      	strh	r1, [r7, #10]
 8001852:	4413      	add	r3, r2
 8001854:	2235      	movs	r2, #53	; 0x35
 8001856:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800185a:	4b89      	ldr	r3, [pc, #548]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	897b      	ldrh	r3, [r7, #10]
 8001860:	1c59      	adds	r1, r3, #1
 8001862:	8179      	strh	r1, [r7, #10]
 8001864:	4413      	add	r3, r2
 8001866:	2201      	movs	r2, #1
 8001868:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 800186c:	4b84      	ldr	r3, [pc, #528]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	897b      	ldrh	r3, [r7, #10]
 8001872:	1c59      	adds	r1, r3, #1
 8001874:	8179      	strh	r1, [r7, #10]
 8001876:	4413      	add	r3, r2
 8001878:	2203      	movs	r2, #3
 800187a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800187e:	4b80      	ldr	r3, [pc, #512]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	1c59      	adds	r1, r3, #1
 8001886:	8179      	strh	r1, [r7, #10]
 8001888:	4413      	add	r3, r2
 800188a:	223d      	movs	r2, #61	; 0x3d
 800188c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001890:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	1c59      	adds	r1, r3, #1
 8001898:	8179      	strh	r1, [r7, #10]
 800189a:	4413      	add	r3, r2
 800189c:	2207      	movs	r2, #7
 800189e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80018a2:	4b77      	ldr	r3, [pc, #476]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	897b      	ldrh	r3, [r7, #10]
 80018a8:	1c59      	adds	r1, r3, #1
 80018aa:	8179      	strh	r1, [r7, #10]
 80018ac:	4413      	add	r3, r2
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80018b4:	4b72      	ldr	r3, [pc, #456]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	897b      	ldrh	r3, [r7, #10]
 80018ba:	1c59      	adds	r1, r3, #1
 80018bc:	8179      	strh	r1, [r7, #10]
 80018be:	4618      	mov	r0, r3
 80018c0:	4b70      	ldr	r3, [pc, #448]	; (8001a84 <send_DHCP_REQUEST+0x2dc>)
 80018c2:	7819      	ldrb	r1, [r3, #0]
 80018c4:	1813      	adds	r3, r2, r0
 80018c6:	460a      	mov	r2, r1
 80018c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80018cc:	4b6c      	ldr	r3, [pc, #432]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	897b      	ldrh	r3, [r7, #10]
 80018d2:	1c59      	adds	r1, r3, #1
 80018d4:	8179      	strh	r1, [r7, #10]
 80018d6:	4618      	mov	r0, r3
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <send_DHCP_REQUEST+0x2dc>)
 80018da:	7859      	ldrb	r1, [r3, #1]
 80018dc:	1813      	adds	r3, r2, r0
 80018de:	460a      	mov	r2, r1
 80018e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80018e4:	4b66      	ldr	r3, [pc, #408]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	1c59      	adds	r1, r3, #1
 80018ec:	8179      	strh	r1, [r7, #10]
 80018ee:	4618      	mov	r0, r3
 80018f0:	4b64      	ldr	r3, [pc, #400]	; (8001a84 <send_DHCP_REQUEST+0x2dc>)
 80018f2:	7899      	ldrb	r1, [r3, #2]
 80018f4:	1813      	adds	r3, r2, r0
 80018f6:	460a      	mov	r2, r1
 80018f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80018fc:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	897b      	ldrh	r3, [r7, #10]
 8001902:	1c59      	adds	r1, r3, #1
 8001904:	8179      	strh	r1, [r7, #10]
 8001906:	4618      	mov	r0, r3
 8001908:	4b5e      	ldr	r3, [pc, #376]	; (8001a84 <send_DHCP_REQUEST+0x2dc>)
 800190a:	78d9      	ldrb	r1, [r3, #3]
 800190c:	1813      	adds	r3, r2, r0
 800190e:	460a      	mov	r2, r1
 8001910:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001914:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	897b      	ldrh	r3, [r7, #10]
 800191a:	1c59      	adds	r1, r3, #1
 800191c:	8179      	strh	r1, [r7, #10]
 800191e:	4618      	mov	r0, r3
 8001920:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <send_DHCP_REQUEST+0x2dc>)
 8001922:	7919      	ldrb	r1, [r3, #4]
 8001924:	1813      	adds	r3, r2, r0
 8001926:	460a      	mov	r2, r1
 8001928:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800192c:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	897b      	ldrh	r3, [r7, #10]
 8001932:	1c59      	adds	r1, r3, #1
 8001934:	8179      	strh	r1, [r7, #10]
 8001936:	4618      	mov	r0, r3
 8001938:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <send_DHCP_REQUEST+0x2dc>)
 800193a:	7959      	ldrb	r1, [r3, #5]
 800193c:	1813      	adds	r3, r2, r0
 800193e:	460a      	mov	r2, r1
 8001940:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	f040 8084 	bne.w	8001a54 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800194c:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	897b      	ldrh	r3, [r7, #10]
 8001952:	1c59      	adds	r1, r3, #1
 8001954:	8179      	strh	r1, [r7, #10]
 8001956:	4413      	add	r3, r2
 8001958:	2232      	movs	r2, #50	; 0x32
 800195a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800195e:	4b48      	ldr	r3, [pc, #288]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	897b      	ldrh	r3, [r7, #10]
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	8179      	strh	r1, [r7, #10]
 8001968:	4413      	add	r3, r2
 800196a:	2204      	movs	r2, #4
 800196c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001970:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	897b      	ldrh	r3, [r7, #10]
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	8179      	strh	r1, [r7, #10]
 800197a:	4618      	mov	r0, r3
 800197c:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <send_DHCP_REQUEST+0x2e0>)
 800197e:	7819      	ldrb	r1, [r3, #0]
 8001980:	1813      	adds	r3, r2, r0
 8001982:	460a      	mov	r2, r1
 8001984:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001988:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	897b      	ldrh	r3, [r7, #10]
 800198e:	1c59      	adds	r1, r3, #1
 8001990:	8179      	strh	r1, [r7, #10]
 8001992:	4618      	mov	r0, r3
 8001994:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <send_DHCP_REQUEST+0x2e0>)
 8001996:	7859      	ldrb	r1, [r3, #1]
 8001998:	1813      	adds	r3, r2, r0
 800199a:	460a      	mov	r2, r1
 800199c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80019a0:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	897b      	ldrh	r3, [r7, #10]
 80019a6:	1c59      	adds	r1, r3, #1
 80019a8:	8179      	strh	r1, [r7, #10]
 80019aa:	4618      	mov	r0, r3
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <send_DHCP_REQUEST+0x2e0>)
 80019ae:	7899      	ldrb	r1, [r3, #2]
 80019b0:	1813      	adds	r3, r2, r0
 80019b2:	460a      	mov	r2, r1
 80019b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80019b8:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	897b      	ldrh	r3, [r7, #10]
 80019be:	1c59      	adds	r1, r3, #1
 80019c0:	8179      	strh	r1, [r7, #10]
 80019c2:	4618      	mov	r0, r3
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <send_DHCP_REQUEST+0x2e0>)
 80019c6:	78d9      	ldrb	r1, [r3, #3]
 80019c8:	1813      	adds	r3, r2, r0
 80019ca:	460a      	mov	r2, r1
 80019cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80019d0:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	897b      	ldrh	r3, [r7, #10]
 80019d6:	1c59      	adds	r1, r3, #1
 80019d8:	8179      	strh	r1, [r7, #10]
 80019da:	4413      	add	r3, r2
 80019dc:	2236      	movs	r2, #54	; 0x36
 80019de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	897b      	ldrh	r3, [r7, #10]
 80019e8:	1c59      	adds	r1, r3, #1
 80019ea:	8179      	strh	r1, [r7, #10]
 80019ec:	4413      	add	r3, r2
 80019ee:	2204      	movs	r2, #4
 80019f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	897b      	ldrh	r3, [r7, #10]
 80019fa:	1c59      	adds	r1, r3, #1
 80019fc:	8179      	strh	r1, [r7, #10]
 80019fe:	4618      	mov	r0, r3
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <send_DHCP_REQUEST+0x2e4>)
 8001a02:	7819      	ldrb	r1, [r3, #0]
 8001a04:	1813      	adds	r3, r2, r0
 8001a06:	460a      	mov	r2, r1
 8001a08:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	897b      	ldrh	r3, [r7, #10]
 8001a12:	1c59      	adds	r1, r3, #1
 8001a14:	8179      	strh	r1, [r7, #10]
 8001a16:	4618      	mov	r0, r3
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <send_DHCP_REQUEST+0x2e4>)
 8001a1a:	7859      	ldrb	r1, [r3, #1]
 8001a1c:	1813      	adds	r3, r2, r0
 8001a1e:	460a      	mov	r2, r1
 8001a20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	897b      	ldrh	r3, [r7, #10]
 8001a2a:	1c59      	adds	r1, r3, #1
 8001a2c:	8179      	strh	r1, [r7, #10]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <send_DHCP_REQUEST+0x2e4>)
 8001a32:	7899      	ldrb	r1, [r3, #2]
 8001a34:	1813      	adds	r3, r2, r0
 8001a36:	460a      	mov	r2, r1
 8001a38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	897b      	ldrh	r3, [r7, #10]
 8001a42:	1c59      	adds	r1, r3, #1
 8001a44:	8179      	strh	r1, [r7, #10]
 8001a46:	4618      	mov	r0, r3
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <send_DHCP_REQUEST+0x2e4>)
 8001a4a:	78d9      	ldrb	r1, [r3, #3]
 8001a4c:	1813      	adds	r3, r2, r0
 8001a4e:	460a      	mov	r2, r1
 8001a50:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	897b      	ldrh	r3, [r7, #10]
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	8179      	strh	r1, [r7, #10]
 8001a5e:	4413      	add	r3, r2
 8001a60:	220c      	movs	r2, #12
 8001a62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <send_DHCP_REQUEST+0x2d8>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	897b      	ldrh	r3, [r7, #10]
 8001a6c:	1c59      	adds	r1, r3, #1
 8001a6e:	8179      	strh	r1, [r7, #10]
 8001a70:	4413      	add	r3, r2
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e019      	b.n	8001ab2 <send_DHCP_REQUEST+0x30a>
 8001a7e:	bf00      	nop
 8001a80:	20000df4 	.word	0x20000df4
 8001a84:	20000de0 	.word	0x20000de0
 8001a88:	20000368 	.word	0x20000368
 8001a8c:	20000df0 	.word	0x20000df0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	897b      	ldrh	r3, [r7, #10]
 8001a96:	1c59      	adds	r1, r3, #1
 8001a98:	8179      	strh	r1, [r7, #10]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	498d      	ldr	r1, [pc, #564]	; (8001cd4 <send_DHCP_REQUEST+0x52c>)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	440b      	add	r3, r1
 8001aa2:	7819      	ldrb	r1, [r3, #0]
 8001aa4:	1813      	adds	r3, r2, r0
 8001aa6:	460a      	mov	r2, r1
 8001aa8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4a88      	ldr	r2, [pc, #544]	; (8001cd4 <send_DHCP_REQUEST+0x52c>)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1e8      	bne.n	8001a90 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001abe:	4b86      	ldr	r3, [pc, #536]	; (8001cd8 <send_DHCP_REQUEST+0x530>)
 8001ac0:	78db      	ldrb	r3, [r3, #3]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b82      	ldr	r3, [pc, #520]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001ac8:	681c      	ldr	r4, [r3, #0]
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	1c59      	adds	r1, r3, #1
 8001ace:	8179      	strh	r1, [r7, #10]
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f000 ffd6 	bl	8002a84 <NibbleToHex>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	1963      	adds	r3, r4, r5
 8001ade:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <send_DHCP_REQUEST+0x530>)
 8001ae4:	78da      	ldrb	r2, [r3, #3]
 8001ae6:	4b7a      	ldr	r3, [pc, #488]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001ae8:	681c      	ldr	r4, [r3, #0]
 8001aea:	897b      	ldrh	r3, [r7, #10]
 8001aec:	1c59      	adds	r1, r3, #1
 8001aee:	8179      	strh	r1, [r7, #10]
 8001af0:	461d      	mov	r5, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f000 ffc6 	bl	8002a84 <NibbleToHex>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	1963      	adds	r3, r4, r5
 8001afe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001b02:	4b75      	ldr	r3, [pc, #468]	; (8001cd8 <send_DHCP_REQUEST+0x530>)
 8001b04:	791b      	ldrb	r3, [r3, #4]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001b0c:	681c      	ldr	r4, [r3, #0]
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	1c59      	adds	r1, r3, #1
 8001b12:	8179      	strh	r1, [r7, #10]
 8001b14:	461d      	mov	r5, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f000 ffb4 	bl	8002a84 <NibbleToHex>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	1963      	adds	r3, r4, r5
 8001b22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001b26:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <send_DHCP_REQUEST+0x530>)
 8001b28:	791a      	ldrb	r2, [r3, #4]
 8001b2a:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001b2c:	681c      	ldr	r4, [r3, #0]
 8001b2e:	897b      	ldrh	r3, [r7, #10]
 8001b30:	1c59      	adds	r1, r3, #1
 8001b32:	8179      	strh	r1, [r7, #10]
 8001b34:	461d      	mov	r5, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f000 ffa4 	bl	8002a84 <NibbleToHex>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	1963      	adds	r3, r4, r5
 8001b42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001b46:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <send_DHCP_REQUEST+0x530>)
 8001b48:	795b      	ldrb	r3, [r3, #5]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b60      	ldr	r3, [pc, #384]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001b50:	681c      	ldr	r4, [r3, #0]
 8001b52:	897b      	ldrh	r3, [r7, #10]
 8001b54:	1c59      	adds	r1, r3, #1
 8001b56:	8179      	strh	r1, [r7, #10]
 8001b58:	461d      	mov	r5, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f000 ff92 	bl	8002a84 <NibbleToHex>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	1963      	adds	r3, r4, r5
 8001b66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001b6a:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <send_DHCP_REQUEST+0x530>)
 8001b6c:	795a      	ldrb	r2, [r3, #5]
 8001b6e:	4b58      	ldr	r3, [pc, #352]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001b70:	681c      	ldr	r4, [r3, #0]
 8001b72:	897b      	ldrh	r3, [r7, #10]
 8001b74:	1c59      	adds	r1, r3, #1
 8001b76:	8179      	strh	r1, [r7, #10]
 8001b78:	461d      	mov	r5, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f000 ff82 	bl	8002a84 <NibbleToHex>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	1963      	adds	r3, r4, r5
 8001b86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	b2d9      	uxtb	r1, r3
 8001b8e:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	8978      	ldrh	r0, [r7, #10]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3307      	adds	r3, #7
 8001b98:	1ac3      	subs	r3, r0, r3
 8001b9a:	3106      	adds	r1, #6
 8001b9c:	b2c9      	uxtb	r1, r1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	897b      	ldrh	r3, [r7, #10]
 8001bac:	1c59      	adds	r1, r3, #1
 8001bae:	8179      	strh	r1, [r7, #10]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2237      	movs	r2, #55	; 0x37
 8001bb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x0a;
 8001bb8:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	897b      	ldrh	r3, [r7, #10]
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	8179      	strh	r1, [r7, #10]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	897b      	ldrh	r3, [r7, #10]
 8001bd0:	1c59      	adds	r1, r3, #1
 8001bd2:	8179      	strh	r1, [r7, #10]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001bdc:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	897b      	ldrh	r3, [r7, #10]
 8001be2:	1c59      	adds	r1, r3, #1
 8001be4:	8179      	strh	r1, [r7, #10]
 8001be6:	4413      	add	r3, r2
 8001be8:	2203      	movs	r2, #3
 8001bea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001bee:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	1c59      	adds	r1, r3, #1
 8001bf6:	8179      	strh	r1, [r7, #10]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	2206      	movs	r2, #6
 8001bfc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	1c59      	adds	r1, r3, #1
 8001c08:	8179      	strh	r1, [r7, #10]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001c12:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	897b      	ldrh	r3, [r7, #10]
 8001c18:	1c59      	adds	r1, r3, #1
 8001c1a:	8179      	strh	r1, [r7, #10]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	223a      	movs	r2, #58	; 0x3a
 8001c20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	897b      	ldrh	r3, [r7, #10]
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	8179      	strh	r1, [r7, #10]
 8001c2e:	4413      	add	r3, r2
 8001c30:	223b      	movs	r2, #59	; 0x3b
 8001c32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	897b      	ldrh	r3, [r7, #10]
 8001c3c:	1c59      	adds	r1, r3, #1
 8001c3e:	8179      	strh	r1, [r7, #10]
 8001c40:	4413      	add	r3, r2
 8001c42:	221f      	movs	r2, #31
 8001c44:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	897b      	ldrh	r3, [r7, #10]
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	8179      	strh	r1, [r7, #10]
 8001c52:	4413      	add	r3, r2
 8001c54:	2221      	movs	r2, #33	; 0x21
 8001c56:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpZabbixServerIP;
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	1c59      	adds	r1, r3, #1
 8001c62:	8179      	strh	r1, [r7, #10]
 8001c64:	4413      	add	r3, r2
 8001c66:	22e0      	movs	r2, #224	; 0xe0
 8001c68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpZabbixHostName;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	897b      	ldrh	r3, [r7, #10]
 8001c72:	1c59      	adds	r1, r3, #1
 8001c74:	8179      	strh	r1, [r7, #10]
 8001c76:	4413      	add	r3, r2
 8001c78:	22e1      	movs	r2, #225	; 0xe1
 8001c7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	897b      	ldrh	r3, [r7, #10]
 8001c84:	1c59      	adds	r1, r3, #1
 8001c86:	8179      	strh	r1, [r7, #10]
 8001c88:	4413      	add	r3, r2
 8001c8a:	22ff      	movs	r2, #255	; 0xff
 8001c8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001c90:	897b      	ldrh	r3, [r7, #10]
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e009      	b.n	8001caa <send_DHCP_REQUEST+0x502>
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	33ec      	adds	r3, #236	; 0xec
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001cb0:	dbf1      	blt.n	8001c96 <send_DHCP_REQUEST+0x4ee>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <send_DHCP_REQUEST+0x534>)
 8001cb4:	7818      	ldrb	r0, [r3, #0]
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <send_DHCP_REQUEST+0x528>)
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2243      	movs	r2, #67	; 0x43
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001cc4:	f003 f920 	bl	8004f08 <sendto>

}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd0:	20000df4 	.word	0x20000df4
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	20000de0 	.word	0x20000de0
 8001cdc:	20000df8 	.word	0x20000df8

08001ce0 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001cea:	f7ff fa8f 	bl	800120c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001cee:	2304      	movs	r3, #4
 8001cf0:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001cf2:	4b9f      	ldr	r3, [pc, #636]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	330a      	adds	r3, #10
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001cfc:	4b9c      	ldr	r3, [pc, #624]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	330a      	adds	r3, #10
 8001d02:	3301      	adds	r3, #1
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001d08:	4b99      	ldr	r3, [pc, #612]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	897b      	ldrh	r3, [r7, #10]
 8001d0e:	1c59      	adds	r1, r3, #1
 8001d10:	8179      	strh	r1, [r7, #10]
 8001d12:	4413      	add	r3, r2
 8001d14:	2235      	movs	r2, #53	; 0x35
 8001d16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001d1a:	4b95      	ldr	r3, [pc, #596]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	897b      	ldrh	r3, [r7, #10]
 8001d20:	1c59      	adds	r1, r3, #1
 8001d22:	8179      	strh	r1, [r7, #10]
 8001d24:	4413      	add	r3, r2
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001d2c:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	897b      	ldrh	r3, [r7, #10]
 8001d32:	1c59      	adds	r1, r3, #1
 8001d34:	8179      	strh	r1, [r7, #10]
 8001d36:	4413      	add	r3, r2
 8001d38:	2204      	movs	r2, #4
 8001d3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001d3e:	4b8c      	ldr	r3, [pc, #560]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	1c59      	adds	r1, r3, #1
 8001d46:	8179      	strh	r1, [r7, #10]
 8001d48:	4413      	add	r3, r2
 8001d4a:	223d      	movs	r2, #61	; 0x3d
 8001d4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001d50:	4b87      	ldr	r3, [pc, #540]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	897b      	ldrh	r3, [r7, #10]
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	8179      	strh	r1, [r7, #10]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001d62:	4b83      	ldr	r3, [pc, #524]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	897b      	ldrh	r3, [r7, #10]
 8001d68:	1c59      	adds	r1, r3, #1
 8001d6a:	8179      	strh	r1, [r7, #10]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001d74:	4b7e      	ldr	r3, [pc, #504]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	897b      	ldrh	r3, [r7, #10]
 8001d7a:	1c59      	adds	r1, r3, #1
 8001d7c:	8179      	strh	r1, [r7, #10]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	4b7c      	ldr	r3, [pc, #496]	; (8001f74 <send_DHCP_DECLINE+0x294>)
 8001d82:	7819      	ldrb	r1, [r3, #0]
 8001d84:	1813      	adds	r3, r2, r0
 8001d86:	460a      	mov	r2, r1
 8001d88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001d8c:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	897b      	ldrh	r3, [r7, #10]
 8001d92:	1c59      	adds	r1, r3, #1
 8001d94:	8179      	strh	r1, [r7, #10]
 8001d96:	4618      	mov	r0, r3
 8001d98:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <send_DHCP_DECLINE+0x294>)
 8001d9a:	7859      	ldrb	r1, [r3, #1]
 8001d9c:	1813      	adds	r3, r2, r0
 8001d9e:	460a      	mov	r2, r1
 8001da0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001da4:	4b72      	ldr	r3, [pc, #456]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	897b      	ldrh	r3, [r7, #10]
 8001daa:	1c59      	adds	r1, r3, #1
 8001dac:	8179      	strh	r1, [r7, #10]
 8001dae:	4618      	mov	r0, r3
 8001db0:	4b70      	ldr	r3, [pc, #448]	; (8001f74 <send_DHCP_DECLINE+0x294>)
 8001db2:	7899      	ldrb	r1, [r3, #2]
 8001db4:	1813      	adds	r3, r2, r0
 8001db6:	460a      	mov	r2, r1
 8001db8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	897b      	ldrh	r3, [r7, #10]
 8001dc2:	1c59      	adds	r1, r3, #1
 8001dc4:	8179      	strh	r1, [r7, #10]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <send_DHCP_DECLINE+0x294>)
 8001dca:	78d9      	ldrb	r1, [r3, #3]
 8001dcc:	1813      	adds	r3, r2, r0
 8001dce:	460a      	mov	r2, r1
 8001dd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001dd4:	4b66      	ldr	r3, [pc, #408]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	897b      	ldrh	r3, [r7, #10]
 8001dda:	1c59      	adds	r1, r3, #1
 8001ddc:	8179      	strh	r1, [r7, #10]
 8001dde:	4618      	mov	r0, r3
 8001de0:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <send_DHCP_DECLINE+0x294>)
 8001de2:	7919      	ldrb	r1, [r3, #4]
 8001de4:	1813      	adds	r3, r2, r0
 8001de6:	460a      	mov	r2, r1
 8001de8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001dec:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	897b      	ldrh	r3, [r7, #10]
 8001df2:	1c59      	adds	r1, r3, #1
 8001df4:	8179      	strh	r1, [r7, #10]
 8001df6:	4618      	mov	r0, r3
 8001df8:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <send_DHCP_DECLINE+0x294>)
 8001dfa:	7959      	ldrb	r1, [r3, #5]
 8001dfc:	1813      	adds	r3, r2, r0
 8001dfe:	460a      	mov	r2, r1
 8001e00:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001e04:	4b5a      	ldr	r3, [pc, #360]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	897b      	ldrh	r3, [r7, #10]
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	8179      	strh	r1, [r7, #10]
 8001e0e:	4413      	add	r3, r2
 8001e10:	2232      	movs	r2, #50	; 0x32
 8001e12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001e16:	4b56      	ldr	r3, [pc, #344]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	897b      	ldrh	r3, [r7, #10]
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	8179      	strh	r1, [r7, #10]
 8001e20:	4413      	add	r3, r2
 8001e22:	2204      	movs	r2, #4
 8001e24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001e28:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	897b      	ldrh	r3, [r7, #10]
 8001e2e:	1c59      	adds	r1, r3, #1
 8001e30:	8179      	strh	r1, [r7, #10]
 8001e32:	4618      	mov	r0, r3
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <send_DHCP_DECLINE+0x298>)
 8001e36:	7819      	ldrb	r1, [r3, #0]
 8001e38:	1813      	adds	r3, r2, r0
 8001e3a:	460a      	mov	r2, r1
 8001e3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	897b      	ldrh	r3, [r7, #10]
 8001e46:	1c59      	adds	r1, r3, #1
 8001e48:	8179      	strh	r1, [r7, #10]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <send_DHCP_DECLINE+0x298>)
 8001e4e:	7859      	ldrb	r1, [r3, #1]
 8001e50:	1813      	adds	r3, r2, r0
 8001e52:	460a      	mov	r2, r1
 8001e54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001e58:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	897b      	ldrh	r3, [r7, #10]
 8001e5e:	1c59      	adds	r1, r3, #1
 8001e60:	8179      	strh	r1, [r7, #10]
 8001e62:	4618      	mov	r0, r3
 8001e64:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <send_DHCP_DECLINE+0x298>)
 8001e66:	7899      	ldrb	r1, [r3, #2]
 8001e68:	1813      	adds	r3, r2, r0
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001e70:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	1c59      	adds	r1, r3, #1
 8001e78:	8179      	strh	r1, [r7, #10]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4b3e      	ldr	r3, [pc, #248]	; (8001f78 <send_DHCP_DECLINE+0x298>)
 8001e7e:	78d9      	ldrb	r1, [r3, #3]
 8001e80:	1813      	adds	r3, r2, r0
 8001e82:	460a      	mov	r2, r1
 8001e84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	897b      	ldrh	r3, [r7, #10]
 8001e8e:	1c59      	adds	r1, r3, #1
 8001e90:	8179      	strh	r1, [r7, #10]
 8001e92:	4413      	add	r3, r2
 8001e94:	2236      	movs	r2, #54	; 0x36
 8001e96:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	1c59      	adds	r1, r3, #1
 8001ea2:	8179      	strh	r1, [r7, #10]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	897b      	ldrh	r3, [r7, #10]
 8001eb2:	1c59      	adds	r1, r3, #1
 8001eb4:	8179      	strh	r1, [r7, #10]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <send_DHCP_DECLINE+0x29c>)
 8001eba:	7819      	ldrb	r1, [r3, #0]
 8001ebc:	1813      	adds	r3, r2, r0
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	897b      	ldrh	r3, [r7, #10]
 8001eca:	1c59      	adds	r1, r3, #1
 8001ecc:	8179      	strh	r1, [r7, #10]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <send_DHCP_DECLINE+0x29c>)
 8001ed2:	7859      	ldrb	r1, [r3, #1]
 8001ed4:	1813      	adds	r3, r2, r0
 8001ed6:	460a      	mov	r2, r1
 8001ed8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	897b      	ldrh	r3, [r7, #10]
 8001ee2:	1c59      	adds	r1, r3, #1
 8001ee4:	8179      	strh	r1, [r7, #10]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <send_DHCP_DECLINE+0x29c>)
 8001eea:	7899      	ldrb	r1, [r3, #2]
 8001eec:	1813      	adds	r3, r2, r0
 8001eee:	460a      	mov	r2, r1
 8001ef0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	897b      	ldrh	r3, [r7, #10]
 8001efa:	1c59      	adds	r1, r3, #1
 8001efc:	8179      	strh	r1, [r7, #10]
 8001efe:	4618      	mov	r0, r3
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <send_DHCP_DECLINE+0x29c>)
 8001f02:	78d9      	ldrb	r1, [r3, #3]
 8001f04:	1813      	adds	r3, r2, r0
 8001f06:	460a      	mov	r2, r1
 8001f08:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	897b      	ldrh	r3, [r7, #10]
 8001f12:	1c59      	adds	r1, r3, #1
 8001f14:	8179      	strh	r1, [r7, #10]
 8001f16:	4413      	add	r3, r2
 8001f18:	22ff      	movs	r2, #255	; 0xff
 8001f1a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e009      	b.n	8001f38 <send_DHCP_DECLINE+0x258>
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	33ec      	adds	r3, #236	; 0xec
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001f3e:	dbf1      	blt.n	8001f24 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001f40:	23ff      	movs	r3, #255	; 0xff
 8001f42:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001f44:	23ff      	movs	r3, #255	; 0xff
 8001f46:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001f48:	23ff      	movs	r3, #255	; 0xff
 8001f4a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001f4c:	23ff      	movs	r3, #255	; 0xff
 8001f4e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <send_DHCP_DECLINE+0x2a0>)
 8001f52:	7818      	ldrb	r0, [r3, #0]
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <send_DHCP_DECLINE+0x290>)
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	2243      	movs	r2, #67	; 0x43
 8001f5c:	9200      	str	r2, [sp, #0]
 8001f5e:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001f62:	f002 ffd1 	bl	8004f08 <sendto>
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000df4 	.word	0x20000df4
 8001f74:	20000de0 	.word	0x20000de0
 8001f78:	20000368 	.word	0x20000368
 8001f7c:	20000df0 	.word	0x20000df0
 8001f80:	20000df8 	.word	0x20000df8

08001f84 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b08b      	sub	sp, #44	; 0x2c
 8001f88:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	76fb      	strb	r3, [r7, #27]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001f8e:	4ba7      	ldr	r3, [pc, #668]	; (800222c <parseDHCPMSG+0x2a8>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f004 fbe1 	bl	800675a <getSn_RX_RSR>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	827b      	strh	r3, [r7, #18]
 8001f9c:	8a7b      	ldrh	r3, [r7, #18]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d011      	beq.n	8001fc6 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001fa2:	4ba2      	ldr	r3, [pc, #648]	; (800222c <parseDHCPMSG+0x2a8>)
 8001fa4:	7818      	ldrb	r0, [r3, #0]
 8001fa6:	4ba2      	ldr	r3, [pc, #648]	; (8002230 <parseDHCPMSG+0x2ac>)
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	1d3c      	adds	r4, r7, #4
 8001fac:	8a7a      	ldrh	r2, [r7, #18]
 8001fae:	1cbb      	adds	r3, r7, #2
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	4623      	mov	r3, r4
 8001fb4:	f003 f8de 	bl	8005174 <recvfrom>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	827b      	strh	r3, [r7, #18]
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   } else {
	   return 0;
   }
	if (svr_port == DHCP_SERVER_PORT) {
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	2b43      	cmp	r3, #67	; 0x43
 8001fc0:	f040 8240 	bne.w	8002444 <parseDHCPMSG+0x4c0>
 8001fc4:	e001      	b.n	8001fca <parseDHCPMSG+0x46>
	   return 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e23e      	b.n	8002448 <parseDHCPMSG+0x4c4>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001fca:	4b99      	ldr	r3, [pc, #612]	; (8002230 <parseDHCPMSG+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	7f1a      	ldrb	r2, [r3, #28]
 8001fd0:	4b98      	ldr	r3, [pc, #608]	; (8002234 <parseDHCPMSG+0x2b0>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d124      	bne.n	8002022 <parseDHCPMSG+0x9e>
 8001fd8:	4b95      	ldr	r3, [pc, #596]	; (8002230 <parseDHCPMSG+0x2ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	7f5a      	ldrb	r2, [r3, #29]
 8001fde:	4b95      	ldr	r3, [pc, #596]	; (8002234 <parseDHCPMSG+0x2b0>)
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d11d      	bne.n	8002022 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001fe6:	4b92      	ldr	r3, [pc, #584]	; (8002230 <parseDHCPMSG+0x2ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	7f9a      	ldrb	r2, [r3, #30]
 8001fec:	4b91      	ldr	r3, [pc, #580]	; (8002234 <parseDHCPMSG+0x2b0>)
 8001fee:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d116      	bne.n	8002022 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001ff4:	4b8e      	ldr	r3, [pc, #568]	; (8002230 <parseDHCPMSG+0x2ac>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	7fda      	ldrb	r2, [r3, #31]
 8001ffa:	4b8e      	ldr	r3, [pc, #568]	; (8002234 <parseDHCPMSG+0x2b0>)
 8001ffc:	78db      	ldrb	r3, [r3, #3]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d10f      	bne.n	8002022 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002002:	4b8b      	ldr	r3, [pc, #556]	; (8002230 <parseDHCPMSG+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f893 2020 	ldrb.w	r2, [r3, #32]
 800200a:	4b8a      	ldr	r3, [pc, #552]	; (8002234 <parseDHCPMSG+0x2b0>)
 800200c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d107      	bne.n	8002022 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8002012:	4b87      	ldr	r3, [pc, #540]	; (8002230 <parseDHCPMSG+0x2ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800201a:	4b86      	ldr	r3, [pc, #536]	; (8002234 <parseDHCPMSG+0x2b0>)
 800201c:	795b      	ldrb	r3, [r3, #5]
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8002022:	2300      	movs	r3, #0
 8002024:	e210      	b.n	8002448 <parseDHCPMSG+0x4c4>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8002026:	4b84      	ldr	r3, [pc, #528]	; (8002238 <parseDHCPMSG+0x2b4>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10b      	bne.n	8002046 <parseDHCPMSG+0xc2>
 800202e:	4b82      	ldr	r3, [pc, #520]	; (8002238 <parseDHCPMSG+0x2b4>)
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d107      	bne.n	8002046 <parseDHCPMSG+0xc2>
 8002036:	4b80      	ldr	r3, [pc, #512]	; (8002238 <parseDHCPMSG+0x2b4>)
 8002038:	789b      	ldrb	r3, [r3, #2]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d103      	bne.n	8002046 <parseDHCPMSG+0xc2>
 800203e:	4b7e      	ldr	r3, [pc, #504]	; (8002238 <parseDHCPMSG+0x2b4>)
 8002040:	78db      	ldrb	r3, [r3, #3]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d029      	beq.n	800209a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002046:	793a      	ldrb	r2, [r7, #4]
 8002048:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <parseDHCPMSG+0x2b4>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d10e      	bne.n	800206e <parseDHCPMSG+0xea>
 8002050:	797a      	ldrb	r2, [r7, #5]
 8002052:	4b79      	ldr	r3, [pc, #484]	; (8002238 <parseDHCPMSG+0x2b4>)
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	429a      	cmp	r2, r3
 8002058:	d109      	bne.n	800206e <parseDHCPMSG+0xea>
 800205a:	79ba      	ldrb	r2, [r7, #6]
 800205c:	4b76      	ldr	r3, [pc, #472]	; (8002238 <parseDHCPMSG+0x2b4>)
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	429a      	cmp	r2, r3
 8002062:	d104      	bne.n	800206e <parseDHCPMSG+0xea>
 8002064:	79fa      	ldrb	r2, [r7, #7]
 8002066:	4b74      	ldr	r3, [pc, #464]	; (8002238 <parseDHCPMSG+0x2b4>)
 8002068:	78db      	ldrb	r3, [r3, #3]
 800206a:	429a      	cmp	r2, r3
 800206c:	d015      	beq.n	800209a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800206e:	793a      	ldrb	r2, [r7, #4]
 8002070:	4b72      	ldr	r3, [pc, #456]	; (800223c <parseDHCPMSG+0x2b8>)
 8002072:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002074:	429a      	cmp	r2, r3
 8002076:	d10e      	bne.n	8002096 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002078:	797a      	ldrb	r2, [r7, #5]
 800207a:	4b70      	ldr	r3, [pc, #448]	; (800223c <parseDHCPMSG+0x2b8>)
 800207c:	785b      	ldrb	r3, [r3, #1]
 800207e:	429a      	cmp	r2, r3
 8002080:	d109      	bne.n	8002096 <parseDHCPMSG+0x112>
 8002082:	79ba      	ldrb	r2, [r7, #6]
 8002084:	4b6d      	ldr	r3, [pc, #436]	; (800223c <parseDHCPMSG+0x2b8>)
 8002086:	789b      	ldrb	r3, [r3, #2]
 8002088:	429a      	cmp	r2, r3
 800208a:	d104      	bne.n	8002096 <parseDHCPMSG+0x112>
 800208c:	79fa      	ldrb	r2, [r7, #7]
 800208e:	4b6b      	ldr	r3, [pc, #428]	; (800223c <parseDHCPMSG+0x2b8>)
 8002090:	78db      	ldrb	r3, [r3, #3]
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8002096:	2300      	movs	r3, #0
 8002098:	e1d6      	b.n	8002448 <parseDHCPMSG+0x4c4>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 800209a:	4b65      	ldr	r3, [pc, #404]	; (8002230 <parseDHCPMSG+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61fb      	str	r3, [r7, #28]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	33f0      	adds	r3, #240	; 0xf0
 80020a4:	61fb      	str	r3, [r7, #28]
		e = p + (len - 240);
 80020a6:	8a7b      	ldrh	r3, [r7, #18]
 80020a8:	3bf0      	subs	r3, #240	; 0xf0
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80020b0:	e1c3      	b.n	800243a <parseDHCPMSG+0x4b6>

			switch ( *p ) {
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	f000 8085 	beq.w	80021c6 <parseDHCPMSG+0x242>
 80020bc:	2bff      	cmp	r3, #255	; 0xff
 80020be:	f300 81af 	bgt.w	8002420 <parseDHCPMSG+0x49c>
 80020c2:	2be1      	cmp	r3, #225	; 0xe1
 80020c4:	f000 818b 	beq.w	80023de <parseDHCPMSG+0x45a>
 80020c8:	2be1      	cmp	r3, #225	; 0xe1
 80020ca:	f300 81a9 	bgt.w	8002420 <parseDHCPMSG+0x49c>
 80020ce:	2b36      	cmp	r3, #54	; 0x36
 80020d0:	dc76      	bgt.n	80021c0 <parseDHCPMSG+0x23c>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f2c0 81a4 	blt.w	8002420 <parseDHCPMSG+0x49c>
 80020d8:	2b36      	cmp	r3, #54	; 0x36
 80020da:	f200 81a1 	bhi.w	8002420 <parseDHCPMSG+0x49c>
 80020de:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <parseDHCPMSG+0x160>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	080021cd 	.word	0x080021cd
 80020e8:	080021ed 	.word	0x080021ed
 80020ec:	08002421 	.word	0x08002421
 80020f0:	08002245 	.word	0x08002245
 80020f4:	08002421 	.word	0x08002421
 80020f8:	08002421 	.word	0x08002421
 80020fc:	080022dd 	.word	0x080022dd
 8002100:	08002421 	.word	0x08002421
 8002104:	08002421 	.word	0x08002421
 8002108:	08002421 	.word	0x08002421
 800210c:	08002421 	.word	0x08002421
 8002110:	08002421 	.word	0x08002421
 8002114:	08002421 	.word	0x08002421
 8002118:	08002421 	.word	0x08002421
 800211c:	08002421 	.word	0x08002421
 8002120:	08002421 	.word	0x08002421
 8002124:	08002421 	.word	0x08002421
 8002128:	08002421 	.word	0x08002421
 800212c:	08002421 	.word	0x08002421
 8002130:	08002421 	.word	0x08002421
 8002134:	08002421 	.word	0x08002421
 8002138:	08002421 	.word	0x08002421
 800213c:	08002421 	.word	0x08002421
 8002140:	08002421 	.word	0x08002421
 8002144:	08002421 	.word	0x08002421
 8002148:	08002421 	.word	0x08002421
 800214c:	08002421 	.word	0x08002421
 8002150:	08002421 	.word	0x08002421
 8002154:	08002421 	.word	0x08002421
 8002158:	08002421 	.word	0x08002421
 800215c:	08002421 	.word	0x08002421
 8002160:	08002421 	.word	0x08002421
 8002164:	08002421 	.word	0x08002421
 8002168:	08002421 	.word	0x08002421
 800216c:	08002421 	.word	0x08002421
 8002170:	08002421 	.word	0x08002421
 8002174:	08002421 	.word	0x08002421
 8002178:	08002421 	.word	0x08002421
 800217c:	08002421 	.word	0x08002421
 8002180:	08002421 	.word	0x08002421
 8002184:	08002421 	.word	0x08002421
 8002188:	08002421 	.word	0x08002421
 800218c:	08002421 	.word	0x08002421
 8002190:	08002421 	.word	0x08002421
 8002194:	08002421 	.word	0x08002421
 8002198:	08002421 	.word	0x08002421
 800219c:	08002421 	.word	0x08002421
 80021a0:	08002421 	.word	0x08002421
 80021a4:	08002421 	.word	0x08002421
 80021a8:	08002421 	.word	0x08002421
 80021ac:	08002421 	.word	0x08002421
 80021b0:	08002329 	.word	0x08002329
 80021b4:	08002421 	.word	0x08002421
 80021b8:	080021d5 	.word	0x080021d5
 80021bc:	08002385 	.word	0x08002385
 80021c0:	2be0      	cmp	r3, #224	; 0xe0
 80021c2:	d065      	beq.n	8002290 <parseDHCPMSG+0x30c>
 80021c4:	e12c      	b.n	8002420 <parseDHCPMSG+0x49c>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	61fb      	str	r3, [r7, #28]
   				break;
 80021ca:	e136      	b.n	800243a <parseDHCPMSG+0x4b6>
            case padOption :
   				p++;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	3301      	adds	r3, #1
 80021d0:	61fb      	str	r3, [r7, #28]
   				break;
 80021d2:	e132      	b.n	800243a <parseDHCPMSG+0x4b6>
   			case dhcpMessageType :
   				p++;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	3301      	adds	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
   				p++;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
   				type = *p++;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	61fa      	str	r2, [r7, #28]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	76fb      	strb	r3, [r7, #27]
   				break;
 80021ea:	e126      	b.n	800243a <parseDHCPMSG+0x4b6>
   			case subnetMask :
   				p++;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	3301      	adds	r3, #1
 80021f0:	61fb      	str	r3, [r7, #28]
   				p++;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
   				DHCP_allocated_sn[0] = *p++;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	61fa      	str	r2, [r7, #28]
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <parseDHCPMSG+0x2bc>)
 8002202:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	61fa      	str	r2, [r7, #28]
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <parseDHCPMSG+0x2bc>)
 800220e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	61fa      	str	r2, [r7, #28]
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <parseDHCPMSG+0x2bc>)
 800221a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	61fa      	str	r2, [r7, #28]
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <parseDHCPMSG+0x2bc>)
 8002226:	70da      	strb	r2, [r3, #3]
   				break;
 8002228:	e107      	b.n	800243a <parseDHCPMSG+0x4b6>
 800222a:	bf00      	nop
 800222c:	20000df8 	.word	0x20000df8
 8002230:	20000df4 	.word	0x20000df4
 8002234:	20000de0 	.word	0x20000de0
 8002238:	20000df0 	.word	0x20000df0
 800223c:	20000dec 	.word	0x20000dec
 8002240:	20000370 	.word	0x20000370
   			case routersOnSubnet :
   				p++;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;       
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	61fa      	str	r2, [r7, #28]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	61fa      	str	r2, [r7, #28]
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	4b7c      	ldr	r3, [pc, #496]	; (8002450 <parseDHCPMSG+0x4cc>)
 800225e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	61fa      	str	r2, [r7, #28]
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	4b79      	ldr	r3, [pc, #484]	; (8002450 <parseDHCPMSG+0x4cc>)
 800226a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	61fa      	str	r2, [r7, #28]
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	4b76      	ldr	r3, [pc, #472]	; (8002450 <parseDHCPMSG+0x4cc>)
 8002276:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	61fa      	str	r2, [r7, #28]
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	4b73      	ldr	r3, [pc, #460]	; (8002450 <parseDHCPMSG+0x4cc>)
 8002282:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	3b04      	subs	r3, #4
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	61fb      	str	r3, [r7, #28]
   				break;
 800228e:	e0d4      	b.n	800243a <parseDHCPMSG+0x4b6>
   			case dhcpZabbixServerIP :
   				p++;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3301      	adds	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	61fa      	str	r2, [r7, #28]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_zabbix[0] = *p++;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	61fa      	str	r2, [r7, #28]
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b6a      	ldr	r3, [pc, #424]	; (8002454 <parseDHCPMSG+0x4d0>)
 80022aa:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_zabbix[1] = *p++;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	61fa      	str	r2, [r7, #28]
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b67      	ldr	r3, [pc, #412]	; (8002454 <parseDHCPMSG+0x4d0>)
 80022b6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_zabbix[2] = *p++;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	61fa      	str	r2, [r7, #28]
 80022be:	781a      	ldrb	r2, [r3, #0]
 80022c0:	4b64      	ldr	r3, [pc, #400]	; (8002454 <parseDHCPMSG+0x4d0>)
 80022c2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_zabbix[3] = *p++;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	61fa      	str	r2, [r7, #28]
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	4b61      	ldr	r3, [pc, #388]	; (8002454 <parseDHCPMSG+0x4d0>)
 80022ce:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	3b04      	subs	r3, #4
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	4413      	add	r3, r2
 80022d8:	61fb      	str	r3, [r7, #28]
   				break;
 80022da:	e0ae      	b.n	800243a <parseDHCPMSG+0x4b6>
   			case dns :
   				p++;                  
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	3301      	adds	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;       
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	61fa      	str	r2, [r7, #28]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	61fa      	str	r2, [r7, #28]
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b58      	ldr	r3, [pc, #352]	; (8002458 <parseDHCPMSG+0x4d4>)
 80022f6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	61fa      	str	r2, [r7, #28]
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	4b55      	ldr	r3, [pc, #340]	; (8002458 <parseDHCPMSG+0x4d4>)
 8002302:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	61fa      	str	r2, [r7, #28]
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	4b52      	ldr	r3, [pc, #328]	; (8002458 <parseDHCPMSG+0x4d4>)
 800230e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	61fa      	str	r2, [r7, #28]
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	4b4f      	ldr	r3, [pc, #316]	; (8002458 <parseDHCPMSG+0x4d4>)
 800231a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	3b04      	subs	r3, #4
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	61fb      	str	r3, [r7, #28]
   				break;
 8002326:	e088      	b.n	800243a <parseDHCPMSG+0x4b6>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3301      	adds	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	61fa      	str	r2, [r7, #28]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	61fa      	str	r2, [r7, #28]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b46      	ldr	r3, [pc, #280]	; (800245c <parseDHCPMSG+0x4d8>)
 8002344:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8002346:	4b45      	ldr	r3, [pc, #276]	; (800245c <parseDHCPMSG+0x4d8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	021a      	lsls	r2, r3, #8
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	1c59      	adds	r1, r3, #1
 8002350:	61f9      	str	r1, [r7, #28]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4413      	add	r3, r2
 8002356:	4a41      	ldr	r2, [pc, #260]	; (800245c <parseDHCPMSG+0x4d8>)
 8002358:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800235a:	4b40      	ldr	r3, [pc, #256]	; (800245c <parseDHCPMSG+0x4d8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	021a      	lsls	r2, r3, #8
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	1c59      	adds	r1, r3, #1
 8002364:	61f9      	str	r1, [r7, #28]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4413      	add	r3, r2
 800236a:	4a3c      	ldr	r2, [pc, #240]	; (800245c <parseDHCPMSG+0x4d8>)
 800236c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800236e:	4b3b      	ldr	r3, [pc, #236]	; (800245c <parseDHCPMSG+0x4d8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	021a      	lsls	r2, r3, #8
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	1c59      	adds	r1, r3, #1
 8002378:	61f9      	str	r1, [r7, #28]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4413      	add	r3, r2
 800237e:	4a37      	ldr	r2, [pc, #220]	; (800245c <parseDHCPMSG+0x4d8>)
 8002380:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8002382:	e05a      	b.n	800243a <parseDHCPMSG+0x4b6>
   			case dhcpServerIdentifier :
   				p++;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	3301      	adds	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	61fa      	str	r2, [r7, #28]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	61fa      	str	r2, [r7, #28]
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <parseDHCPMSG+0x4dc>)
 800239e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	61fa      	str	r2, [r7, #28]
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <parseDHCPMSG+0x4dc>)
 80023aa:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	61fa      	str	r2, [r7, #28]
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <parseDHCPMSG+0x4dc>)
 80023b6:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	61fa      	str	r2, [r7, #28]
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <parseDHCPMSG+0x4dc>)
 80023c2:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80023c4:	793a      	ldrb	r2, [r7, #4]
 80023c6:	4b27      	ldr	r3, [pc, #156]	; (8002464 <parseDHCPMSG+0x4e0>)
 80023c8:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 80023ca:	797a      	ldrb	r2, [r7, #5]
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <parseDHCPMSG+0x4e0>)
 80023ce:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 80023d0:	79ba      	ldrb	r2, [r7, #6]
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <parseDHCPMSG+0x4e0>)
 80023d4:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80023d6:	79fa      	ldrb	r2, [r7, #7]
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <parseDHCPMSG+0x4e0>)
 80023da:	70da      	strb	r2, [r3, #3]
   				break;
 80023dc:	e02d      	b.n	800243a <parseDHCPMSG+0x4b6>
   			case dhcpZabbixHostName :
   				p++;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	61fa      	str	r2, [r7, #28]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	72fb      	strb	r3, [r7, #11]
   				int iii;
   				for (iii = 0; iii < opt_len; iii++) {
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e00b      	b.n	800240c <parseDHCPMSG+0x488>
   					DHCP_allocated_hostname[iii] = *p++;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	61fa      	str	r2, [r7, #28]
 80023fa:	7819      	ldrb	r1, [r3, #0]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <parseDHCPMSG+0x4e4>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	4413      	add	r3, r2
 8002402:	460a      	mov	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
   				for (iii = 0; iii < opt_len; iii++) {
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	7afb      	ldrb	r3, [r7, #11]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	429a      	cmp	r2, r3
 8002412:	dbef      	blt.n	80023f4 <parseDHCPMSG+0x470>
   				}
   				DHCP_allocated_hostname[iii] = '\0';
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <parseDHCPMSG+0x4e4>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	4413      	add	r3, r2
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
   				break;
 800241e:	e00c      	b.n	800243a <parseDHCPMSG+0x4b6>
   			default :
   				p++;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	3301      	adds	r3, #1
 8002424:	61fb      	str	r3, [r7, #28]
   				opt_len = *p++;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	61fa      	str	r2, [r7, #28]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8002430:	7afb      	ldrb	r3, [r7, #11]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	61fb      	str	r3, [r7, #28]
   				break;
 8002438:	bf00      	nop
		while ( p < e ) {
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	429a      	cmp	r2, r3
 8002440:	f4ff ae37 	bcc.w	80020b2 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8002444:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3724      	adds	r7, #36	; 0x24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd90      	pop	{r4, r7, pc}
 8002450:	2000036c 	.word	0x2000036c
 8002454:	20000378 	.word	0x20000378
 8002458:	20000374 	.word	0x20000374
 800245c:	20000000 	.word	0x20000000
 8002460:	20000df0 	.word	0x20000df0
 8002464:	20000dec 	.word	0x20000dec
 8002468:	2000037c 	.word	0x2000037c

0800246c <DHCP_run>:

uint8_t DHCP_run(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8002472:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <DHCP_run+0x204>)
 8002474:	f993 3000 	ldrsb.w	r3, [r3]
 8002478:	2b06      	cmp	r3, #6
 800247a:	d101      	bne.n	8002480 <DHCP_run+0x14>
 800247c:	2305      	movs	r3, #5
 800247e:	e0f3      	b.n	8002668 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8002480:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <DHCP_run+0x208>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	3301      	adds	r3, #1
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800248e:	4618      	mov	r0, r3
 8002490:	f003 ffbe 	bl	8006410 <WIZCHIP_READ>
 8002494:	4603      	mov	r3, r0
 8002496:	2b22      	cmp	r3, #34	; 0x22
 8002498:	d006      	beq.n	80024a8 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800249a:	4b76      	ldr	r3, [pc, #472]	; (8002674 <DHCP_run+0x208>)
 800249c:	7818      	ldrb	r0, [r3, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	2244      	movs	r2, #68	; 0x44
 80024a2:	2102      	movs	r1, #2
 80024a4:	f002 f9d6 	bl	8004854 <socket>

	ret = DHCP_RUNNING;
 80024a8:	2301      	movs	r3, #1
 80024aa:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80024ac:	f7ff fd6a 	bl	8001f84 <parseDHCPMSG>
 80024b0:	4603      	mov	r3, r0
 80024b2:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80024b4:	4b6e      	ldr	r3, [pc, #440]	; (8002670 <DHCP_run+0x204>)
 80024b6:	f993 3000 	ldrsb.w	r3, [r3]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	f200 80d0 	bhi.w	8002660 <DHCP_run+0x1f4>
 80024c0:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <DHCP_run+0x5c>)
 80024c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c6:	bf00      	nop
 80024c8:	080024dd 	.word	0x080024dd
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002545 	.word	0x08002545
 80024d4:	08002595 	.word	0x08002595
 80024d8:	080025ef 	.word	0x080025ef
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 80024dc:	4b66      	ldr	r3, [pc, #408]	; (8002678 <DHCP_run+0x20c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 80024e2:	4b65      	ldr	r3, [pc, #404]	; (8002678 <DHCP_run+0x20c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 80024e8:	4b63      	ldr	r3, [pc, #396]	; (8002678 <DHCP_run+0x20c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 80024ee:	4b62      	ldr	r3, [pc, #392]	; (8002678 <DHCP_run+0x20c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 80024f4:	f7fe ff80 	bl	80013f8 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 80024f8:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <DHCP_run+0x204>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
   		break;
 80024fe:	e0b2      	b.n	8002666 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002500:	79bb      	ldrb	r3, [r7, #6]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d119      	bne.n	800253a <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8002506:	4b5d      	ldr	r3, [pc, #372]	; (800267c <DHCP_run+0x210>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	7c1a      	ldrb	r2, [r3, #16]
 800250c:	4b5a      	ldr	r3, [pc, #360]	; (8002678 <DHCP_run+0x20c>)
 800250e:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002510:	4b5a      	ldr	r3, [pc, #360]	; (800267c <DHCP_run+0x210>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	7c5a      	ldrb	r2, [r3, #17]
 8002516:	4b58      	ldr	r3, [pc, #352]	; (8002678 <DHCP_run+0x20c>)
 8002518:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800251a:	4b58      	ldr	r3, [pc, #352]	; (800267c <DHCP_run+0x210>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	7c9a      	ldrb	r2, [r3, #18]
 8002520:	4b55      	ldr	r3, [pc, #340]	; (8002678 <DHCP_run+0x20c>)
 8002522:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002524:	4b55      	ldr	r3, [pc, #340]	; (800267c <DHCP_run+0x210>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	7cda      	ldrb	r2, [r3, #19]
 800252a:	4b53      	ldr	r3, [pc, #332]	; (8002678 <DHCP_run+0x20c>)
 800252c:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800252e:	f7ff f93b 	bl	80017a8 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8002532:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <DHCP_run+0x204>)
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002538:	e095      	b.n	8002666 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800253a:	f000 f8b1 	bl	80026a0 <check_DHCP_timeout>
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
         break;
 8002542:	e090      	b.n	8002666 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8002544:	79bb      	ldrb	r3, [r7, #6]
 8002546:	2b05      	cmp	r3, #5
 8002548:	d116      	bne.n	8002578 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800254a:	f000 f909 	bl	8002760 <check_DHCP_leasedIP>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8002554:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <DHCP_run+0x214>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4798      	blx	r3
					reset_DHCP_timeout();
 800255a:	f000 f9d3 	bl	8002904 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800255e:	4b44      	ldr	r3, [pc, #272]	; (8002670 <DHCP_run+0x204>)
 8002560:	2203      	movs	r2, #3
 8002562:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8002564:	e07f      	b.n	8002666 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 8002566:	f000 f9cd 	bl	8002904 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800256a:	4b46      	ldr	r3, [pc, #280]	; (8002684 <DHCP_run+0x218>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8002570:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <DHCP_run+0x204>)
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
		break;
 8002576:	e076      	b.n	8002666 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002578:	79bb      	ldrb	r3, [r7, #6]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d105      	bne.n	800258a <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800257e:	f000 f9c1 	bl	8002904 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <DHCP_run+0x204>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
		break;
 8002588:	e06d      	b.n	8002666 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800258a:	f000 f889 	bl	80026a0 <check_DHCP_timeout>
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
		break;
 8002592:	e068      	b.n	8002666 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8002594:	2304      	movs	r3, #4
 8002596:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <DHCP_run+0x21c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a0:	d060      	beq.n	8002664 <DHCP_run+0x1f8>
 80025a2:	4b39      	ldr	r3, [pc, #228]	; (8002688 <DHCP_run+0x21c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	085a      	lsrs	r2, r3, #1
 80025a8:	4b38      	ldr	r3, [pc, #224]	; (800268c <DHCP_run+0x220>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d259      	bcs.n	8002664 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80025b4:	4b30      	ldr	r3, [pc, #192]	; (8002678 <DHCP_run+0x20c>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <DHCP_run+0x224>)
 80025ba:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <DHCP_run+0x20c>)
 80025be:	785a      	ldrb	r2, [r3, #1]
 80025c0:	4b33      	ldr	r3, [pc, #204]	; (8002690 <DHCP_run+0x224>)
 80025c2:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <DHCP_run+0x20c>)
 80025c6:	789a      	ldrb	r2, [r3, #2]
 80025c8:	4b31      	ldr	r3, [pc, #196]	; (8002690 <DHCP_run+0x224>)
 80025ca:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <DHCP_run+0x20c>)
 80025ce:	78da      	ldrb	r2, [r3, #3]
 80025d0:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <DHCP_run+0x224>)
 80025d2:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <DHCP_run+0x228>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <DHCP_run+0x228>)
 80025dc:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 80025de:	f7ff f8e3 	bl	80017a8 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 80025e2:	f000 f98f 	bl	8002904 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 80025e6:	4b22      	ldr	r3, [pc, #136]	; (8002670 <DHCP_run+0x204>)
 80025e8:	2204      	movs	r2, #4
 80025ea:	701a      	strb	r2, [r3, #0]
			}
		break;
 80025ec:	e03a      	b.n	8002664 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 80025ee:	2304      	movs	r3, #4
 80025f0:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80025f2:	79bb      	ldrb	r3, [r7, #6]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d125      	bne.n	8002644 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <DHCP_run+0x22c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <DHCP_run+0x224>)
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <DHCP_run+0x20c>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d111      	bne.n	800262e <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <DHCP_run+0x224>)
 800260c:	785a      	ldrb	r2, [r3, #1]
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <DHCP_run+0x20c>)
 8002610:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002612:	429a      	cmp	r2, r3
 8002614:	d10b      	bne.n	800262e <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <DHCP_run+0x224>)
 8002618:	789a      	ldrb	r2, [r3, #2]
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <DHCP_run+0x20c>)
 800261c:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d105      	bne.n	800262e <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8002622:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <DHCP_run+0x224>)
 8002624:	78da      	ldrb	r2, [r3, #3]
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <DHCP_run+0x20c>)
 8002628:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d004      	beq.n	8002638 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800262e:	2303      	movs	r3, #3
 8002630:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <DHCP_run+0x230>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8002638:	f000 f964 	bl	8002904 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <DHCP_run+0x204>)
 800263e:	2203      	movs	r2, #3
 8002640:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8002642:	e010      	b.n	8002666 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002644:	79bb      	ldrb	r3, [r7, #6]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d105      	bne.n	8002656 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800264a:	f000 f95b 	bl	8002904 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <DHCP_run+0x204>)
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
	   	break;
 8002654:	e007      	b.n	8002666 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8002656:	f000 f823 	bl	80026a0 <check_DHCP_timeout>
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
	   	break;
 800265e:	e002      	b.n	8002666 <DHCP_run+0x1fa>
		default :
   		break;
 8002660:	bf00      	nop
 8002662:	e000      	b.n	8002666 <DHCP_run+0x1fa>
		break;
 8002664:	bf00      	nop
	}

	return ret;
 8002666:	79fb      	ldrb	r3, [r7, #7]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000047c 	.word	0x2000047c
 8002674:	20000df8 	.word	0x20000df8
 8002678:	20000368 	.word	0x20000368
 800267c:	20000df4 	.word	0x20000df4
 8002680:	20000010 	.word	0x20000010
 8002684:	20000018 	.word	0x20000018
 8002688:	20000000 	.word	0x20000000
 800268c:	20000480 	.word	0x20000480
 8002690:	20000364 	.word	0x20000364
 8002694:	20000de8 	.word	0x20000de8
 8002698:	2000047d 	.word	0x2000047d
 800269c:	20000014 	.word	0x20000014

080026a0 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80026a6:	2301      	movs	r3, #1
 80026a8:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <check_DHCP_timeout+0xb0>)
 80026ac:	f993 3000 	ldrsb.w	r3, [r3]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	dc2d      	bgt.n	8002710 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <check_DHCP_timeout+0xb4>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <check_DHCP_timeout+0xb8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d242      	bcs.n	8002746 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80026c0:	4b26      	ldr	r3, [pc, #152]	; (800275c <check_DHCP_timeout+0xbc>)
 80026c2:	f993 3000 	ldrsb.w	r3, [r3]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d00c      	beq.n	80026e4 <check_DHCP_timeout+0x44>
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	dc0d      	bgt.n	80026ea <check_DHCP_timeout+0x4a>
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d002      	beq.n	80026d8 <check_DHCP_timeout+0x38>
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d003      	beq.n	80026de <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80026d6:	e008      	b.n	80026ea <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80026d8:	f7fe fe8e 	bl	80013f8 <send_DHCP_DISCOVER>
				break;
 80026dc:	e006      	b.n	80026ec <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80026de:	f7ff f863 	bl	80017a8 <send_DHCP_REQUEST>
				break;
 80026e2:	e003      	b.n	80026ec <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80026e4:	f7ff f860 	bl	80017a8 <send_DHCP_REQUEST>
				break;
 80026e8:	e000      	b.n	80026ec <check_DHCP_timeout+0x4c>
				break;
 80026ea:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <check_DHCP_timeout+0xb8>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <check_DHCP_timeout+0xb8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	330a      	adds	r3, #10
 80026f8:	4a16      	ldr	r2, [pc, #88]	; (8002754 <check_DHCP_timeout+0xb4>)
 80026fa:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <check_DHCP_timeout+0xb0>)
 80026fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	b25a      	sxtb	r2, r3
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <check_DHCP_timeout+0xb0>)
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e01a      	b.n	8002746 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <check_DHCP_timeout+0xbc>)
 8002712:	f993 3000 	ldrsb.w	r3, [r3]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d00c      	beq.n	8002734 <check_DHCP_timeout+0x94>
 800271a:	2b04      	cmp	r3, #4
 800271c:	dc10      	bgt.n	8002740 <check_DHCP_timeout+0xa0>
 800271e:	2b01      	cmp	r3, #1
 8002720:	d002      	beq.n	8002728 <check_DHCP_timeout+0x88>
 8002722:	2b02      	cmp	r3, #2
 8002724:	d006      	beq.n	8002734 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8002726:	e00b      	b.n	8002740 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <check_DHCP_timeout+0xbc>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800272e:	2300      	movs	r3, #0
 8002730:	71fb      	strb	r3, [r7, #7]
				break;
 8002732:	e006      	b.n	8002742 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002734:	f7fe fe60 	bl	80013f8 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <check_DHCP_timeout+0xbc>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
				break;
 800273e:	e000      	b.n	8002742 <check_DHCP_timeout+0xa2>
				break;
 8002740:	bf00      	nop
		}
		reset_DHCP_timeout();
 8002742:	f000 f8df 	bl	8002904 <reset_DHCP_timeout>
	}
	return ret;
 8002746:	79fb      	ldrb	r3, [r7, #7]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	2000047d 	.word	0x2000047d
 8002754:	20000004 	.word	0x20000004
 8002758:	20000480 	.word	0x20000480
 800275c:	2000047c 	.word	0x2000047c

08002760 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8002766:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800276a:	f003 fe51 	bl	8006410 <WIZCHIP_READ>
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8002772:	2103      	movs	r1, #3
 8002774:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002778:	f003 fe96 	bl	80064a8 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800277c:	4b13      	ldr	r3, [pc, #76]	; (80027cc <check_DHCP_leasedIP+0x6c>)
 800277e:	7818      	ldrb	r0, [r3, #0]
 8002780:	f241 3388 	movw	r3, #5000	; 0x1388
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <check_DHCP_leasedIP+0x70>)
 8002788:	2211      	movs	r2, #17
 800278a:	4912      	ldr	r1, [pc, #72]	; (80027d4 <check_DHCP_leasedIP+0x74>)
 800278c:	f002 fbbc 	bl	8004f08 <sendto>
 8002790:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4619      	mov	r1, r3
 8002796:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800279a:	f003 fe85 	bl	80064a8 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f113 0f0d 	cmn.w	r3, #13
 80027a4:	d101      	bne.n	80027aa <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00c      	b.n	80027c4 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80027aa:	f7ff fa99 	bl	8001ce0 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <check_DHCP_leasedIP+0x78>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80027b4:	bf00      	nop
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <check_DHCP_leasedIP+0x78>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d9f9      	bls.n	80027b6 <check_DHCP_leasedIP+0x56>

		return 0;
 80027c2:	2300      	movs	r3, #0
	}
}	
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000df8 	.word	0x20000df8
 80027d0:	20000368 	.word	0x20000368
 80027d4:	0800eff0 	.word	0x0800eff0
 80027d8:	20000480 	.word	0x20000480

080027dc <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80027ec:	2206      	movs	r2, #6
 80027ee:	493f      	ldr	r1, [pc, #252]	; (80028ec <DHCP_init+0x110>)
 80027f0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80027f4:	f003 fea6 	bl	8006544 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80027f8:	4b3c      	ldr	r3, [pc, #240]	; (80028ec <DHCP_init+0x110>)
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <DHCP_init+0x110>)
 80027fe:	785b      	ldrb	r3, [r3, #1]
 8002800:	4313      	orrs	r3, r2
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b39      	ldr	r3, [pc, #228]	; (80028ec <DHCP_init+0x110>)
 8002806:	789b      	ldrb	r3, [r3, #2]
 8002808:	4313      	orrs	r3, r2
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b37      	ldr	r3, [pc, #220]	; (80028ec <DHCP_init+0x110>)
 800280e:	78db      	ldrb	r3, [r3, #3]
 8002810:	4313      	orrs	r3, r2
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b35      	ldr	r3, [pc, #212]	; (80028ec <DHCP_init+0x110>)
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	4313      	orrs	r3, r2
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b33      	ldr	r3, [pc, #204]	; (80028ec <DHCP_init+0x110>)
 800281e:	795b      	ldrb	r3, [r3, #5]
 8002820:	4313      	orrs	r3, r2
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d117      	bne.n	8002858 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002828:	4b30      	ldr	r3, [pc, #192]	; (80028ec <DHCP_init+0x110>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <DHCP_init+0x110>)
 8002830:	2208      	movs	r2, #8
 8002832:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002834:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <DHCP_init+0x110>)
 8002836:	22dc      	movs	r2, #220	; 0xdc
 8002838:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <DHCP_init+0x110>)
 800283c:	2200      	movs	r2, #0
 800283e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <DHCP_init+0x110>)
 8002842:	2200      	movs	r2, #0
 8002844:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <DHCP_init+0x110>)
 8002848:	2200      	movs	r2, #0
 800284a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800284c:	2206      	movs	r2, #6
 800284e:	4927      	ldr	r1, [pc, #156]	; (80028ec <DHCP_init+0x110>)
 8002850:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002854:	f003 fed6 	bl	8006604 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002858:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <DHCP_init+0x114>)
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800285e:	4a25      	ldr	r2, [pc, #148]	; (80028f4 <DHCP_init+0x118>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <DHCP_init+0x11c>)
 8002866:	4a25      	ldr	r2, [pc, #148]	; (80028fc <DHCP_init+0x120>)
 8002868:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <DHCP_init+0x110>)
 800286c:	78db      	ldrb	r3, [r3, #3]
 800286e:	461a      	mov	r2, r3
 8002870:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <DHCP_init+0x11c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4413      	add	r3, r2
 8002876:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <DHCP_init+0x11c>)
 8002878:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <DHCP_init+0x110>)
 800287c:	791b      	ldrb	r3, [r3, #4]
 800287e:	461a      	mov	r2, r3
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <DHCP_init+0x11c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4413      	add	r3, r2
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <DHCP_init+0x11c>)
 8002888:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <DHCP_init+0x110>)
 800288c:	795b      	ldrb	r3, [r3, #5]
 800288e:	461a      	mov	r2, r3
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <DHCP_init+0x11c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4413      	add	r3, r2
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <DHCP_init+0x11c>)
 8002898:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800289a:	4b14      	ldr	r3, [pc, #80]	; (80028ec <DHCP_init+0x110>)
 800289c:	78da      	ldrb	r2, [r3, #3]
 800289e:	4b13      	ldr	r3, [pc, #76]	; (80028ec <DHCP_init+0x110>)
 80028a0:	791b      	ldrb	r3, [r3, #4]
 80028a2:	4053      	eors	r3, r2
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <DHCP_init+0x110>)
 80028a8:	795b      	ldrb	r3, [r3, #5]
 80028aa:	4053      	eors	r3, r2
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <DHCP_init+0x11c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <DHCP_init+0x11c>)
 80028b8:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80028ba:	f107 030c 	add.w	r3, r7, #12
 80028be:	2204      	movs	r2, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80028c6:	f003 fe9d 	bl	8006604 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	2204      	movs	r2, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028d6:	f003 fe95 	bl	8006604 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80028da:	f000 f813 	bl	8002904 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <DHCP_init+0x124>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000de0 	.word	0x20000de0
 80028f0:	20000df8 	.word	0x20000df8
 80028f4:	20000df4 	.word	0x20000df4
 80028f8:	20000de8 	.word	0x20000de8
 80028fc:	12345678 	.word	0x12345678
 8002900:	2000047c 	.word	0x2000047c

08002904 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <reset_DHCP_timeout+0x20>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <reset_DHCP_timeout+0x24>)
 8002910:	220a      	movs	r2, #10
 8002912:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <reset_DHCP_timeout+0x28>)
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000480 	.word	0x20000480
 8002928:	20000004 	.word	0x20000004
 800292c:	2000047d 	.word	0x2000047d

08002930 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <DHCP_time_handler+0x18>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	4a03      	ldr	r2, [pc, #12]	; (8002948 <DHCP_time_handler+0x18>)
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000480 	.word	0x20000480

0800294c <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <getIPfromDHCP+0x38>)
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3301      	adds	r3, #1
 8002960:	4a08      	ldr	r2, [pc, #32]	; (8002984 <getIPfromDHCP+0x38>)
 8002962:	7852      	ldrb	r2, [r2, #1]
 8002964:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3302      	adds	r3, #2
 800296a:	4a06      	ldr	r2, [pc, #24]	; (8002984 <getIPfromDHCP+0x38>)
 800296c:	7892      	ldrb	r2, [r2, #2]
 800296e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3303      	adds	r3, #3
 8002974:	4a03      	ldr	r2, [pc, #12]	; (8002984 <getIPfromDHCP+0x38>)
 8002976:	78d2      	ldrb	r2, [r2, #3]
 8002978:	701a      	strb	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20000368 	.word	0x20000368

08002988 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <getGWfromDHCP+0x38>)
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3301      	adds	r3, #1
 800299c:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <getGWfromDHCP+0x38>)
 800299e:	7852      	ldrb	r2, [r2, #1]
 80029a0:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3302      	adds	r3, #2
 80029a6:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <getGWfromDHCP+0x38>)
 80029a8:	7892      	ldrb	r2, [r2, #2]
 80029aa:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3303      	adds	r3, #3
 80029b0:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <getGWfromDHCP+0x38>)
 80029b2:	78d2      	ldrb	r2, [r2, #3]
 80029b4:	701a      	strb	r2, [r3, #0]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	2000036c 	.word	0x2000036c

080029c4 <getZABBIXfromDHCP>:

void getZABBIXfromDHCP(uint8_t* ip)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_zabbix[0];
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <getZABBIXfromDHCP+0x38>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_zabbix[1];
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3301      	adds	r3, #1
 80029d8:	4a08      	ldr	r2, [pc, #32]	; (80029fc <getZABBIXfromDHCP+0x38>)
 80029da:	7852      	ldrb	r2, [r2, #1]
 80029dc:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_zabbix[2];
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3302      	adds	r3, #2
 80029e2:	4a06      	ldr	r2, [pc, #24]	; (80029fc <getZABBIXfromDHCP+0x38>)
 80029e4:	7892      	ldrb	r2, [r2, #2]
 80029e6:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_zabbix[3];
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3303      	adds	r3, #3
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <getZABBIXfromDHCP+0x38>)
 80029ee:	78d2      	ldrb	r2, [r2, #3]
 80029f0:	701a      	strb	r2, [r3, #0]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000378 	.word	0x20000378

08002a00 <getHostNamefromDHCP>:

void getHostNamefromDHCP(uint8_t * host)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	int iii;
	for (iii = 0; iii < 255; iii++) {
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e010      	b.n	8002a30 <getHostNamefromDHCP+0x30>
		host[iii] = DHCP_allocated_hostname[iii];
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	490b      	ldr	r1, [pc, #44]	; (8002a44 <getHostNamefromDHCP+0x44>)
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	440a      	add	r2, r1
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	701a      	strb	r2, [r3, #0]
		if (DHCP_allocated_hostname[iii] == '\0') {
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <getHostNamefromDHCP+0x44>)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4413      	add	r3, r2
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <getHostNamefromDHCP+0x38>
	for (iii = 0; iii < 255; iii++) {
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2bfe      	cmp	r3, #254	; 0xfe
 8002a34:	ddeb      	ble.n	8002a0e <getHostNamefromDHCP+0xe>
			break;
		}
	}
	//host[0] = 'A';
	//host[1] = '\0';
}
 8002a36:	e000      	b.n	8002a3a <getHostNamefromDHCP+0x3a>
			break;
 8002a38:	bf00      	nop
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	2000037c 	.word	0x2000037c

08002a48 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <getSNfromDHCP+0x38>)
 8002a52:	781a      	ldrb	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <getSNfromDHCP+0x38>)
 8002a5e:	7852      	ldrb	r2, [r2, #1]
 8002a60:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3302      	adds	r3, #2
 8002a66:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <getSNfromDHCP+0x38>)
 8002a68:	7892      	ldrb	r2, [r2, #2]
 8002a6a:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3303      	adds	r3, #3
 8002a70:	4a03      	ldr	r2, [pc, #12]	; (8002a80 <getSNfromDHCP+0x38>)
 8002a72:	78d2      	ldrb	r2, [r2, #3]
 8002a74:	701a      	strb	r2, [r3, #0]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	20000370 	.word	0x20000370

08002a84 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d803      	bhi.n	8002aa4 <NibbleToHex+0x20>
    return nibble + '0';
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	3330      	adds	r3, #48	; 0x30
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e002      	b.n	8002aaa <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	3337      	adds	r3, #55	; 0x37
 8002aa8:	b2db      	uxtb	r3, r3
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ab8:	f3bf 8f4f 	dsb	sy
}
 8002abc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <__NVIC_SystemReset+0x24>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ac6:	4904      	ldr	r1, [pc, #16]	; (8002ad8 <__NVIC_SystemReset+0x24>)
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <__NVIC_SystemReset+0x28>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ace:	f3bf 8f4f 	dsb	sy
}
 8002ad2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <__NVIC_SystemReset+0x20>
 8002ad8:	e000ed00 	.word	0xe000ed00
 8002adc:	05fa0004 	.word	0x05fa0004

08002ae0 <rwFlash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void rwFlash(uint8_t rwFlag) {
 8002ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae4:	b090      	sub	sp, #64	; 0x40
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	4603      	mov	r3, r0
 8002aea:	73fb      	strb	r3, [r7, #15]
	uint32_t pageAdr = 0x800FC00; //.
 8002aec:	4ba9      	ldr	r3, [pc, #676]	; (8002d94 <rwFlash+0x2b4>)
 8002aee:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	4aa7      	ldr	r2, [pc, #668]	; (8002d98 <rwFlash+0x2b8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d103      	bne.n	8002b06 <rwFlash+0x26>
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	f040 80dd 	bne.w	8002cc0 <rwFlash+0x1e0>
		magicKey = 0x12349876;
 8002b06:	4ba4      	ldr	r3, [pc, #656]	; (8002d98 <rwFlash+0x2b8>)
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
		if (rwFlag == 0) { // For first initial
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d117      	bne.n	8002b40 <rwFlash+0x60>
			C_1 = CALIBRATE_START;
 8002b10:	4ba2      	ldr	r3, [pc, #648]	; (8002d9c <rwFlash+0x2bc>)
 8002b12:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002b16:	801a      	strh	r2, [r3, #0]
			C_3 = CALIBRATE_START;
 8002b18:	4ba1      	ldr	r3, [pc, #644]	; (8002da0 <rwFlash+0x2c0>)
 8002b1a:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002b1e:	801a      	strh	r2, [r3, #0]
			C_2 = CALIBRATE_START;
 8002b20:	4ba0      	ldr	r3, [pc, #640]	; (8002da4 <rwFlash+0x2c4>)
 8002b22:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002b26:	801a      	strh	r2, [r3, #0]
			C_4 = CALIBRATE_START;
 8002b28:	4b9f      	ldr	r3, [pc, #636]	; (8002da8 <rwFlash+0x2c8>)
 8002b2a:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002b2e:	801a      	strh	r2, [r3, #0]
			DX1.f = 1;
 8002b30:	4b9e      	ldr	r3, [pc, #632]	; (8002dac <rwFlash+0x2cc>)
 8002b32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b36:	601a      	str	r2, [r3, #0]
			//DX2.f = 1;
			DY1.f = 1;
 8002b38:	4b9d      	ldr	r3, [pc, #628]	; (8002db0 <rwFlash+0x2d0>)
 8002b3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b3e:	601a      	str	r2, [r3, #0]
			//DY2.f = 1;
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.PageAddress = pageAdr; //
 8002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4a:	623b      	str	r3, [r7, #32]
		EraseInitStruct.NbPages     = 1;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24

		flash_ok = HAL_ERROR;
 8002b50:	4b98      	ldr	r3, [pc, #608]	; (8002db4 <rwFlash+0x2d4>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 8002b56:	e005      	b.n	8002b64 <rwFlash+0x84>
		  flash_ok = HAL_FLASH_Unlock();
 8002b58:	f004 fb7c 	bl	8007254 <HAL_FLASH_Unlock>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b94      	ldr	r3, [pc, #592]	; (8002db4 <rwFlash+0x2d4>)
 8002b62:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 8002b64:	4b93      	ldr	r3, [pc, #588]	; (8002db4 <rwFlash+0x2d4>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f5      	bne.n	8002b58 <rwFlash+0x78>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 8002b6c:	f107 0214 	add.w	r2, r7, #20
 8002b70:	f107 0318 	add.w	r3, r7, #24
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f004 fc54 	bl	8007424 <HAL_FLASHEx_Erase>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 808f 	bne.w	8002ca2 <rwFlash+0x1c2>
			dataForSave = (uint64_t) magicKey;
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	461a      	mov	r2, r3
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 8002b90:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <rwFlash+0x2d4>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8002b96:	e009      	b.n	8002bac <rwFlash+0xcc>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key
 8002b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b9e:	2003      	movs	r0, #3
 8002ba0:	f004 fae8 	bl	8007174 <HAL_FLASH_Program>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b82      	ldr	r3, [pc, #520]	; (8002db4 <rwFlash+0x2d4>)
 8002baa:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8002bac:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <rwFlash+0x2d4>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f1      	bne.n	8002b98 <rwFlash+0xb8>
			}
			dataForSave = (uint64_t) (C_1 | ((uint64_t) C_2 << 16) | ((uint64_t) C_3 << 32) | ((uint64_t) C_4 << 48));
 8002bb4:	4b79      	ldr	r3, [pc, #484]	; (8002d9c <rwFlash+0x2bc>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	4979      	ldr	r1, [pc, #484]	; (8002da4 <rwFlash+0x2c4>)
 8002bc0:	8809      	ldrh	r1, [r1, #0]
 8002bc2:	b288      	uxth	r0, r1
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	ea4f 4b10 	mov.w	fp, r0, lsr #16
 8002bcc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8002bd0:	ea42 080a 	orr.w	r8, r2, sl
 8002bd4:	ea43 090b 	orr.w	r9, r3, fp
 8002bd8:	4b71      	ldr	r3, [pc, #452]	; (8002da0 <rwFlash+0x2c0>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	b298      	uxth	r0, r3
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	0003      	movs	r3, r0
 8002bec:	2200      	movs	r2, #0
 8002bee:	ea48 0402 	orr.w	r4, r8, r2
 8002bf2:	ea49 0503 	orr.w	r5, r9, r3
 8002bf6:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <rwFlash+0x2c8>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	b298      	uxth	r0, r3
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	0403      	lsls	r3, r0, #16
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	ea44 0102 	orr.w	r1, r4, r2
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	432b      	orrs	r3, r5
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c1a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 8002c1e:	4b65      	ldr	r3, [pc, #404]	; (8002db4 <rwFlash+0x2d4>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8002c24:	e00b      	b.n	8002c3e <rwFlash+0x15e>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 16, dataForSave); // Write C_12 C_34 C_14 C_23
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	f103 0110 	add.w	r1, r3, #16
 8002c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c30:	2003      	movs	r0, #3
 8002c32:	f004 fa9f 	bl	8007174 <HAL_FLASH_Program>
 8002c36:	4603      	mov	r3, r0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b5e      	ldr	r3, [pc, #376]	; (8002db4 <rwFlash+0x2d4>)
 8002c3c:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <rwFlash+0x2d4>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ef      	bne.n	8002c26 <rwFlash+0x146>
			}
			flash_ok = HAL_ERROR;
 8002c46:	4b5b      	ldr	r3, [pc, #364]	; (8002db4 <rwFlash+0x2d4>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8002c4c:	e00e      	b.n	8002c6c <rwFlash+0x18c>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 24, DX1.u); // Write DX1
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c50:	f103 0118 	add.w	r1, r3, #24
 8002c54:	4b55      	ldr	r3, [pc, #340]	; (8002dac <rwFlash+0x2cc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	2002      	movs	r0, #2
 8002c60:	f004 fa88 	bl	8007174 <HAL_FLASH_Program>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b52      	ldr	r3, [pc, #328]	; (8002db4 <rwFlash+0x2d4>)
 8002c6a:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8002c6c:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <rwFlash+0x2d4>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ec      	bne.n	8002c4e <rwFlash+0x16e>
			}
			//flash_ok = HAL_ERROR;
			//while(flash_ok != HAL_OK){
			//	flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 28, DX2.u); // Write DX2
			//}
			flash_ok = HAL_ERROR;
 8002c74:	4b4f      	ldr	r3, [pc, #316]	; (8002db4 <rwFlash+0x2d4>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8002c7a:	e00e      	b.n	8002c9a <rwFlash+0x1ba>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 32, DY1.u); // Write DY1
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7e:	f103 0120 	add.w	r1, r3, #32
 8002c82:	4b4b      	ldr	r3, [pc, #300]	; (8002db0 <rwFlash+0x2d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f004 fa71 	bl	8007174 <HAL_FLASH_Program>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <rwFlash+0x2d4>)
 8002c98:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8002c9a:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <rwFlash+0x2d4>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ec      	bne.n	8002c7c <rwFlash+0x19c>
			//while(flash_ok != HAL_OK){
			//	flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 36, DY2.u); // Write DY2
			//}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 8002ca2:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <rwFlash+0x2d4>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8002ca8:	e005      	b.n	8002cb6 <rwFlash+0x1d6>
			flash_ok = HAL_FLASH_Lock();
 8002caa:	f004 faf9 	bl	80072a0 <HAL_FLASH_Lock>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <rwFlash+0x2d4>)
 8002cb4:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <rwFlash+0x2d4>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f5      	bne.n	8002caa <rwFlash+0x1ca>
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 8002cbe:	e063      	b.n	8002d88 <rwFlash+0x2a8>
		}
	} else {
		/* Задержки измерения в каналах */
		C_1 = *(__IO uint16_t*) (pageAdr + 16);
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc2:	3310      	adds	r3, #16
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <rwFlash+0x2bc>)
 8002cca:	801a      	strh	r2, [r3, #0]
		C_2 = *(__IO uint16_t*) (pageAdr + 18);
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	3312      	adds	r3, #18
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	4b33      	ldr	r3, [pc, #204]	; (8002da4 <rwFlash+0x2c4>)
 8002cd6:	801a      	strh	r2, [r3, #0]
		C_3 = *(__IO uint16_t*) (pageAdr + 20);
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cda:	3314      	adds	r3, #20
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <rwFlash+0x2c0>)
 8002ce2:	801a      	strh	r2, [r3, #0]
		C_4 = *(__IO uint16_t*) (pageAdr + 22);
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	3316      	adds	r3, #22
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <rwFlash+0x2c8>)
 8002cee:	801a      	strh	r2, [r3, #0]
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8002cf0:	22c8      	movs	r2, #200	; 0xc8
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4830      	ldr	r0, [pc, #192]	; (8002db8 <rwFlash+0x2d8>)
 8002cf6:	f008 f88f 	bl	800ae18 <memset>
		sprintf(SndBuffer, "C_1: %5d, C_2: %5d, C_3: %5d, C_4: %5d  \r\n", C_1, C_2, C_3, C_4);
 8002cfa:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <rwFlash+0x2bc>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <rwFlash+0x2c4>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <rwFlash+0x2c0>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <rwFlash+0x2c8>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	9200      	str	r2, [sp, #0]
 8002d14:	4603      	mov	r3, r0
 8002d16:	460a      	mov	r2, r1
 8002d18:	4928      	ldr	r1, [pc, #160]	; (8002dbc <rwFlash+0x2dc>)
 8002d1a:	4827      	ldr	r0, [pc, #156]	; (8002db8 <rwFlash+0x2d8>)
 8002d1c:	f008 fce4 	bl	800b6e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8002d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d24:	22c8      	movs	r2, #200	; 0xc8
 8002d26:	4924      	ldr	r1, [pc, #144]	; (8002db8 <rwFlash+0x2d8>)
 8002d28:	4825      	ldr	r0, [pc, #148]	; (8002dc0 <rwFlash+0x2e0>)
 8002d2a:	f007 fe3f 	bl	800a9ac <HAL_UART_Transmit>

		/* Поправочные коэффициенты */
		DX1.u = *(__IO uint32_t*) (pageAdr + 24);
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d30:	3318      	adds	r3, #24
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <rwFlash+0x2cc>)
 8002d36:	6013      	str	r3, [r2, #0]
		//DX2.u = *(__IO uint32_t*) (pageAdr + 28);
		DY1.u = *(__IO uint32_t*) (pageAdr + 32);
 8002d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <rwFlash+0x2d0>)
 8002d40:	6013      	str	r3, [r2, #0]
		//DY2.u = *(__IO uint32_t*) (pageAdr + 36);
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8002d42:	22c8      	movs	r2, #200	; 0xc8
 8002d44:	2100      	movs	r1, #0
 8002d46:	481c      	ldr	r0, [pc, #112]	; (8002db8 <rwFlash+0x2d8>)
 8002d48:	f008 f866 	bl	800ae18 <memset>
		sprintf(SndBuffer, "DX1: %7.6f, DY1: %7.6f \r\n", DX1.f, DY1.f);
 8002d4c:	4b17      	ldr	r3, [pc, #92]	; (8002dac <rwFlash+0x2cc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fb69 	bl	8000428 <__aeabi_f2d>
 8002d56:	4604      	mov	r4, r0
 8002d58:	460d      	mov	r5, r1
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <rwFlash+0x2d0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fb62 	bl	8000428 <__aeabi_f2d>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	e9cd 2300 	strd	r2, r3, [sp]
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	462b      	mov	r3, r5
 8002d70:	4914      	ldr	r1, [pc, #80]	; (8002dc4 <rwFlash+0x2e4>)
 8002d72:	4811      	ldr	r0, [pc, #68]	; (8002db8 <rwFlash+0x2d8>)
 8002d74:	f008 fcb8 	bl	800b6e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8002d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7c:	22c8      	movs	r2, #200	; 0xc8
 8002d7e:	490e      	ldr	r1, [pc, #56]	; (8002db8 <rwFlash+0x2d8>)
 8002d80:	480f      	ldr	r0, [pc, #60]	; (8002dc0 <rwFlash+0x2e0>)
 8002d82:	f007 fe13 	bl	800a9ac <HAL_UART_Transmit>
	}
}
 8002d86:	bf00      	nop
 8002d88:	bf00      	nop
 8002d8a:	3738      	adds	r7, #56	; 0x38
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d92:	bf00      	nop
 8002d94:	0800fc00 	.word	0x0800fc00
 8002d98:	12349876 	.word	0x12349876
 8002d9c:	200005ec 	.word	0x200005ec
 8002da0:	2000098c 	.word	0x2000098c
 8002da4:	200005b4 	.word	0x200005b4
 8002da8:	200005b8 	.word	0x200005b8
 8002dac:	20000590 	.word	0x20000590
 8002db0:	200005a0 	.word	0x200005a0
 8002db4:	20001428 	.word	0x20001428
 8002db8:	20000490 	.word	0x20000490
 8002dbc:	0800f004 	.word	0x0800f004
 8002dc0:	2000134c 	.word	0x2000134c
 8002dc4:	0800f030 	.word	0x0800f030

08002dc8 <W5500_Select>:
	va_end(args);
}
#endif


void W5500_Select(void) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCSN_GPIO_Port, SCSN_Pin, GPIO_PIN_RESET);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dd2:	4802      	ldr	r0, [pc, #8]	; (8002ddc <W5500_Select+0x14>)
 8002dd4:	f004 fd52 	bl	800787c <HAL_GPIO_WritePin>
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40010c00 	.word	0x40010c00

08002de0 <W5500_Unselect>:

void W5500_Unselect(void) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCSN_GPIO_Port, SCSN_Pin, GPIO_PIN_SET);
 8002de4:	2201      	movs	r2, #1
 8002de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dea:	4802      	ldr	r0, [pc, #8]	; (8002df4 <W5500_Unselect+0x14>)
 8002dec:	f004 fd46 	bl	800787c <HAL_GPIO_WritePin>
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40010c00 	.word	0x40010c00

08002df8 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 8002e04:	887a      	ldrh	r2, [r7, #2]
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4803      	ldr	r0, [pc, #12]	; (8002e1c <W5500_ReadBuff+0x24>)
 8002e0e:	f005 fce3 	bl	80087d8 <HAL_SPI_Receive>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200011fc 	.word	0x200011fc

08002e20 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 8002e2c:	887a      	ldrh	r2, [r7, #2]
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4803      	ldr	r0, [pc, #12]	; (8002e44 <W5500_WriteBuff+0x24>)
 8002e36:	f005 fb93 	bl	8008560 <HAL_SPI_Transmit>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200011fc 	.word	0x200011fc

08002e48 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 8002e4e:	1dfb      	adds	r3, r7, #7
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ffd0 	bl	8002df8 <W5500_ReadBuff>
	return byte;
 8002e58:	79fb      	ldrb	r3, [r7, #7]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ffd5 	bl	8002e20 <W5500_WriteBuff>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <Callback_IPAssigned>:

volatile bool ip_assigned = false;

void Callback_IPAssigned(void) {
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
#ifdef ZABBIX_DEBUG
	UART_Printf("Callback: IP assigned! Leased time: %d sec\r\n", getDHCPLeasetime());
#endif
    ip_assigned = true;
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <Callback_IPAssigned+0x14>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000558 	.word	0x20000558

08002e98 <Callback_IPConflict>:

void Callback_IPConflict(void) {
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
#ifdef ZABBIX_DEBUG
    UART_Printf("Callback: IP conflict!\r\n");
#endif
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <sendToZabbix>:
 *
 * key -- Zabbix key: {ALTIM_DIRECT, ALTIM_SPEED}
 *
 * value -- Float value of key.
*/
uint8_t sendToZabbix(uint8_t * addr, char * host, char * key, float value) {
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b0c7      	sub	sp, #284	; 0x11c
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	f107 040c 	add.w	r4, r7, #12
 8002eae:	6020      	str	r0, [r4, #0]
 8002eb0:	f107 0008 	add.w	r0, r7, #8
 8002eb4:	6001      	str	r1, [r0, #0]
 8002eb6:	1d39      	adds	r1, r7, #4
 8002eb8:	600a      	str	r2, [r1, #0]
 8002eba:	463a      	mov	r2, r7
 8002ebc:	6013      	str	r3, [r2, #0]
#ifdef ZABBIX_DEBUG
    UART_Printf("Creating socket...\r\n");
#endif
    uint8_t tcp_socket = TCP_SOCKET;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
    uint8_t code = socket(tcp_socket, Sn_MR_TCP, 10888, 0);
 8002ec4:	f897 010e 	ldrb.w	r0, [r7, #270]	; 0x10e
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f642 2288 	movw	r2, #10888	; 0x2a88
 8002ece:	2101      	movs	r1, #1
 8002ed0:	f001 fcc0 	bl	8004854 <socket>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
    if(code != tcp_socket) {
 8002eda:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002ede:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d001      	beq.n	8002eea <sendToZabbix+0x46>
	#ifdef ZABBIX_DEBUG
        UART_Printf("socket() failed, code = %d\r\n", code);
	#endif
        return(-1);
 8002ee6:	23ff      	movs	r3, #255	; 0xff
 8002ee8:	e092      	b.n	8003010 <sendToZabbix+0x16c>
    }
#ifdef ZABBIX_DEBUG
    UART_Printf("Socket created, connecting...\r\n");
#endif
    code = connect(tcp_socket, addr, ZABBIXPORT);
 8002eea:	f107 030c 	add.w	r3, r7, #12
 8002eee:	f897 010e 	ldrb.w	r0, [r7, #270]	; 0x10e
 8002ef2:	f242 7243 	movw	r2, #10051	; 0x2743
 8002ef6:	6819      	ldr	r1, [r3, #0]
 8002ef8:	f001 fe30 	bl	8004b5c <connect>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
    if(code != SOCK_OK) {
 8002f02:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d006      	beq.n	8002f18 <sendToZabbix+0x74>
	#ifdef ZABBIX_DEBUG
        UART_Printf("connect() failed, code = %d\r\n", code);
	#endif
        close(tcp_socket);
 8002f0a:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f001 fdb6 	bl	8004a80 <close>
        return(-2);
 8002f14:	23fe      	movs	r3, #254	; 0xfe
 8002f16:	e07b      	b.n	8003010 <sendToZabbix+0x16c>
    UART_Printf("Connected, sending ZABBIX request...\r\n");
#endif
    {
    	char req[ZABBIXMAXLEN];
    	char str[ZABBIXMAXLEN - 13];
    	sprintf(str, "{\"request\":\"sender data\",\"data\":[{\"host\":\"%.20s\",\"key\":\"%s\",\"value\":\"%f\"}]}", host, key, value);
 8002f18:	463b      	mov	r3, r7
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	f7fd fa84 	bl	8000428 <__aeabi_f2d>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	1d38      	adds	r0, r7, #4
 8002f26:	f107 0108 	add.w	r1, r7, #8
 8002f2a:	f107 0410 	add.w	r4, r7, #16
 8002f2e:	e9cd 2300 	strd	r2, r3, [sp]
 8002f32:	6803      	ldr	r3, [r0, #0]
 8002f34:	680a      	ldr	r2, [r1, #0]
 8002f36:	4939      	ldr	r1, [pc, #228]	; (800301c <sendToZabbix+0x178>)
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f008 fbd5 	bl	800b6e8 <siprintf>
    	req[0] = 'Z';
 8002f3e:	235a      	movs	r3, #90	; 0x5a
 8002f40:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
    	req[1] = 'B';
 8002f44:	2342      	movs	r3, #66	; 0x42
 8002f46:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		req[2] = 'X';
 8002f4a:	2358      	movs	r3, #88	; 0x58
 8002f4c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		req[3] = 'D';
 8002f50:	2344      	movs	r3, #68	; 0x44
 8002f52:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		req[4] = 0x01;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		req[5] = strlen(str);
 8002f5c:	f107 0310 	add.w	r3, r7, #16
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd f8f5 	bl	8000150 <strlen>
 8002f66:	4603      	mov	r3, r0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
		req[6] = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
		req[7] = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		req[8] = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
		req[9] = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		req[10] = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		req[11] = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		req[12] = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
		strcpy(req + 13, str);
 8002f98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002f9c:	330d      	adds	r3, #13
 8002f9e:	f107 0210 	add.w	r2, r7, #16
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f008 fbbf 	bl	800b728 <strcpy>
        //char req[] = "ZBXD\1\0\0\0\0\0\0\0\0{\"request\":\"sender data\",\"data\":[{\"host\":\"Ed\",\"key\":\"ALTIM_DIRECT\",\"value\":\"10\"}]}";
        uint8_t len = req[5] + 13;
 8002faa:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8002fae:	330d      	adds	r3, #13
 8002fb0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
        uint8_t* buff = (uint8_t*)&req;
 8002fb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002fb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        while(len > 0) {
 8002fbc:	e01e      	b.n	8002ffc <sendToZabbix+0x158>
		#ifdef ZABBIX_DEBUG
            UART_Printf("Sending %d bytes, data length %d bytes...\r\n", len, req[5]);
		#endif
            int32_t nbytes = send(tcp_socket, buff, len);
 8002fbe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002fc8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 fea1 	bl	8004d14 <send>
 8002fd2:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
            if(nbytes <= 0) {
 8002fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	dc06      	bgt.n	8002fec <sendToZabbix+0x148>
			#ifdef ZABBIX_DEBUG
                UART_Printf("send() failed, %d returned\r\n", nbytes);
			#endif
                close(tcp_socket);
 8002fde:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 fd4c 	bl	8004a80 <close>
                return(-3);
 8002fe8:	23fd      	movs	r3, #253	; 0xfd
 8002fea:	e011      	b.n	8003010 <sendToZabbix+0x16c>
            }
			#ifdef ZABBIX_DEBUG
            UART_Printf("%d b sent!\r\n", nbytes);
			#endif
            len -= nbytes;
 8002fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
        while(len > 0) {
 8002ffc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1dc      	bne.n	8002fbe <sendToZabbix+0x11a>
			}
		}

		UART_Printf("Closing socket.\r\n");
	#endif
    close(tcp_socket);
 8003004:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8003008:	4618      	mov	r0, r3
 800300a:	f001 fd39 	bl	8004a80 <close>
    return(0);
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}
 800301a:	bf00      	nop
 800301c:	0800f04c 	.word	0x0800f04c

08003020 <init_w5500>:



void init_w5500() {
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
	#ifdef ZABBIX_DEBUG
    UART_Printf("\r\ninit() called!\r\n");
    UART_Printf("Registering W5500 callbacks...\r\n");
	#endif
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8003026:	4937      	ldr	r1, [pc, #220]	; (8003104 <init_w5500+0xe4>)
 8003028:	4837      	ldr	r0, [pc, #220]	; (8003108 <init_w5500+0xe8>)
 800302a:	f003 fd3b 	bl	8006aa4 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800302e:	4937      	ldr	r1, [pc, #220]	; (800310c <init_w5500+0xec>)
 8003030:	4837      	ldr	r0, [pc, #220]	; (8003110 <init_w5500+0xf0>)
 8003032:	f003 fd5b 	bl	8006aec <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8003036:	4937      	ldr	r1, [pc, #220]	; (8003114 <init_w5500+0xf4>)
 8003038:	4837      	ldr	r0, [pc, #220]	; (8003118 <init_w5500+0xf8>)
 800303a:	f003 fd83 	bl	8006b44 <reg_wizchip_spiburst_cbfunc>
	#ifdef ZABBIX_DEBUG
    UART_Printf("Calling wizchip_init()...\r\n");
	#endif
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 800303e:	4a37      	ldr	r2, [pc, #220]	; (800311c <init_w5500+0xfc>)
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003046:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800304a:	1d3a      	adds	r2, r7, #4
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f003 fdef 	bl	8006c34 <wizchip_init>
	#ifdef ZABBIX_DEBUG
    UART_Printf("Calling DHCP_init()...\r\n");
	#endif

    // set MAC address before using DHCP
    setSHAR(net_info.mac);
 8003056:	2206      	movs	r2, #6
 8003058:	4931      	ldr	r1, [pc, #196]	; (8003120 <init_w5500+0x100>)
 800305a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800305e:	f003 fad1 	bl	8006604 <WIZCHIP_WRITE_BUF>
    DHCP_init(DHCP_SOCKET, dhcp_buffer);
 8003062:	4930      	ldr	r1, [pc, #192]	; (8003124 <init_w5500+0x104>)
 8003064:	2000      	movs	r0, #0
 8003066:	f7ff fbb9 	bl	80027dc <DHCP_init>
	#ifdef ZABBIX_DEBUG
    UART_Printf("Registering DHCP callbacks...\r\n");
	#endif
    reg_dhcp_cbfunc(
 800306a:	4a2f      	ldr	r2, [pc, #188]	; (8003128 <init_w5500+0x108>)
 800306c:	492f      	ldr	r1, [pc, #188]	; (800312c <init_w5500+0x10c>)
 800306e:	482f      	ldr	r0, [pc, #188]	; (800312c <init_w5500+0x10c>)
 8003070:	f7fe f89a 	bl	80011a8 <reg_dhcp_cbfunc>
    );
	#ifdef ZABBIX_DEBUG
    UART_Printf("Calling DHCP_run()...\r\n");
	#endif
    // actually should be called in a loop, e.g. by timer
    uint32_t ctr = DHCP_TRY_CNT;
 8003074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003078:	60fb      	str	r3, [r7, #12]
    while((!ip_assigned) && (ctr > 0)) {
 800307a:	e00a      	b.n	8003092 <init_w5500+0x72>
        DHCP_run();
 800307c:	f7ff f9f6 	bl	800246c <DHCP_run>
        ctr--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3b01      	subs	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
        HAL_Delay(100);
 8003086:	2064      	movs	r0, #100	; 0x64
 8003088:	f003 ff28 	bl	8006edc <HAL_Delay>
        HAL_IWDG_Refresh(&hiwdg);
 800308c:	4828      	ldr	r0, [pc, #160]	; (8003130 <init_w5500+0x110>)
 800308e:	f004 fd93 	bl	8007bb8 <HAL_IWDG_Refresh>
    while((!ip_assigned) && (ctr > 0)) {
 8003092:	4b28      	ldr	r3, [pc, #160]	; (8003134 <init_w5500+0x114>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f083 0301 	eor.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <init_w5500+0x88>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e9      	bne.n	800307c <init_w5500+0x5c>
    }
    if(!ip_assigned) {
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <init_w5500+0x114>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <init_w5500+0x9c>
		#ifdef ZABBIX_DEBUG
        UART_Printf(DHCP_ERROR_ASSIGN);
		#endif
        NVIC_SystemReset();
 80030b8:	f7ff fcfc 	bl	8002ab4 <__NVIC_SystemReset>
        return;
    }

    getIPfromDHCP(net_info.ip);
 80030bc:	481e      	ldr	r0, [pc, #120]	; (8003138 <init_w5500+0x118>)
 80030be:	f7ff fc45 	bl	800294c <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 80030c2:	481e      	ldr	r0, [pc, #120]	; (800313c <init_w5500+0x11c>)
 80030c4:	f7ff fc60 	bl	8002988 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 80030c8:	481d      	ldr	r0, [pc, #116]	; (8003140 <init_w5500+0x120>)
 80030ca:	f7ff fcbd 	bl	8002a48 <getSNfromDHCP>
    getZABBIXfromDHCP(net_info.zabbix);
 80030ce:	481d      	ldr	r0, [pc, #116]	; (8003144 <init_w5500+0x124>)
 80030d0:	f7ff fc78 	bl	80029c4 <getZABBIXfromDHCP>
    getHostNamefromDHCP(net_info.hostname);
 80030d4:	481c      	ldr	r0, [pc, #112]	; (8003148 <init_w5500+0x128>)
 80030d6:	f7ff fc93 	bl	8002a00 <getHostNamefromDHCP>
    if (net_info.hostname[0] == '\0') {
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <init_w5500+0x100>)
 80030dc:	7e9b      	ldrb	r3, [r3, #26]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <init_w5500+0xce>
    	sprintf(ZabbixHostName, "%s", ZABBIXAGHOST);
 80030e2:	4a1a      	ldr	r2, [pc, #104]	; (800314c <init_w5500+0x12c>)
 80030e4:	491a      	ldr	r1, [pc, #104]	; (8003150 <init_w5500+0x130>)
 80030e6:	481b      	ldr	r0, [pc, #108]	; (8003154 <init_w5500+0x134>)
 80030e8:	f008 fafe 	bl	800b6e8 <siprintf>
 80030ec:	e004      	b.n	80030f8 <init_w5500+0xd8>
    } else {
    	sprintf(ZabbixHostName, "%s", net_info.hostname);
 80030ee:	4a16      	ldr	r2, [pc, #88]	; (8003148 <init_w5500+0x128>)
 80030f0:	4917      	ldr	r1, [pc, #92]	; (8003150 <init_w5500+0x130>)
 80030f2:	4818      	ldr	r0, [pc, #96]	; (8003154 <init_w5500+0x134>)
 80030f4:	f008 faf8 	bl	800b6e8 <siprintf>
        net_info.zabbix[0], net_info.zabbix[1], net_info.zabbix[2], net_info.zabbix[3],
		ZabbixHostName
    );
    UART_Printf("Calling wizchip_setnetinfo()...\r\n");
	#endif
    wizchip_setnetinfo(&net_info);
 80030f8:	4809      	ldr	r0, [pc, #36]	; (8003120 <init_w5500+0x100>)
 80030fa:	f003 fe27 	bl	8006d4c <wizchip_setnetinfo>

}
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	08002de1 	.word	0x08002de1
 8003108:	08002dc9 	.word	0x08002dc9
 800310c:	08002e63 	.word	0x08002e63
 8003110:	08002e49 	.word	0x08002e49
 8003114:	08002e21 	.word	0x08002e21
 8003118:	08002df9 	.word	0x08002df9
 800311c:	0800f0a8 	.word	0x0800f0a8
 8003120:	2000001c 	.word	0x2000001c
 8003124:	20000dfc 	.word	0x20000dfc
 8003128:	08002e99 	.word	0x08002e99
 800312c:	08002e81 	.word	0x08002e81
 8003130:	200012f0 	.word	0x200012f0
 8003134:	20000558 	.word	0x20000558
 8003138:	20000022 	.word	0x20000022
 800313c:	2000002a 	.word	0x2000002a
 8003140:	20000026 	.word	0x20000026
 8003144:	20000032 	.word	0x20000032
 8003148:	20000036 	.word	0x20000036
 800314c:	0800f098 	.word	0x0800f098
 8003150:	0800f0a4 	.word	0x0800f0a4
 8003154:	20000cc8 	.word	0x20000cc8

08003158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315c:	b0a1      	sub	sp, #132	; 0x84
 800315e:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003160:	f003 fe5a 	bl	8006e18 <HAL_Init>

  /* USER CODE BEGIN Init */
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
			(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) ? "Yes" : "No",
 8003164:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <main+0x1cc>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8003168:	2b00      	cmp	r3, #0
 800316a:	da01      	bge.n	8003170 <main+0x18>
 800316c:	4c6e      	ldr	r4, [pc, #440]	; (8003328 <main+0x1d0>)
 800316e:	e000      	b.n	8003172 <main+0x1a>
 8003170:	4c6e      	ldr	r4, [pc, #440]	; (800332c <main+0x1d4>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) ? "Yes" : "No",
 8003172:	4b6c      	ldr	r3, [pc, #432]	; (8003324 <main+0x1cc>)
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <main+0x2a>
 800317e:	4d6a      	ldr	r5, [pc, #424]	; (8003328 <main+0x1d0>)
 8003180:	e000      	b.n	8003184 <main+0x2c>
 8003182:	4d6a      	ldr	r5, [pc, #424]	; (800332c <main+0x1d4>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) ? "Yes" : "No",
 8003184:	4b67      	ldr	r3, [pc, #412]	; (8003324 <main+0x1cc>)
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <main+0x3c>
 8003190:	4b65      	ldr	r3, [pc, #404]	; (8003328 <main+0x1d0>)
 8003192:	e000      	b.n	8003196 <main+0x3e>
 8003194:	4b65      	ldr	r3, [pc, #404]	; (800332c <main+0x1d4>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) ? "Yes" : "No",
 8003196:	4a63      	ldr	r2, [pc, #396]	; (8003324 <main+0x1cc>)
 8003198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800319a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800319e:	2a00      	cmp	r2, #0
 80031a0:	d001      	beq.n	80031a6 <main+0x4e>
 80031a2:	4a61      	ldr	r2, [pc, #388]	; (8003328 <main+0x1d0>)
 80031a4:	e000      	b.n	80031a8 <main+0x50>
 80031a6:	4a61      	ldr	r2, [pc, #388]	; (800332c <main+0x1d4>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) ? "Yes" : "No",
 80031a8:	495e      	ldr	r1, [pc, #376]	; (8003324 <main+0x1cc>)
 80031aa:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80031ac:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 80031b0:	2900      	cmp	r1, #0
 80031b2:	d001      	beq.n	80031b8 <main+0x60>
 80031b4:	495c      	ldr	r1, [pc, #368]	; (8003328 <main+0x1d0>)
 80031b6:	e000      	b.n	80031ba <main+0x62>
 80031b8:	495c      	ldr	r1, [pc, #368]	; (800332c <main+0x1d4>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) ? "Yes" : "No");
 80031ba:	485a      	ldr	r0, [pc, #360]	; (8003324 <main+0x1cc>)
 80031bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80031be:	f000 6000 	and.w	r0, r0, #134217728	; 0x8000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d001      	beq.n	80031ca <main+0x72>
 80031c6:	4858      	ldr	r0, [pc, #352]	; (8003328 <main+0x1d0>)
 80031c8:	e000      	b.n	80031cc <main+0x74>
 80031ca:	4858      	ldr	r0, [pc, #352]	; (800332c <main+0x1d4>)
 80031cc:	9003      	str	r0, [sp, #12]
 80031ce:	9102      	str	r1, [sp, #8]
 80031d0:	9201      	str	r2, [sp, #4]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	462b      	mov	r3, r5
 80031d6:	4622      	mov	r2, r4
 80031d8:	4955      	ldr	r1, [pc, #340]	; (8003330 <main+0x1d8>)
 80031da:	4856      	ldr	r0, [pc, #344]	; (8003334 <main+0x1dc>)
 80031dc:	f008 fa84 	bl	800b6e8 <siprintf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031e0:	f000 feb8 	bl	8003f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031e4:	f001 fa06 	bl	80045f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80031e8:	f001 f9da 	bl	80045a0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80031ec:	f000 ff7a 	bl	80040e4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80031f0:	f001 f988 	bl	8004504 <MX_TIM4_Init>
  MX_TIM3_Init();
 80031f4:	f001 f8f2 	bl	80043dc <MX_TIM3_Init>
  MX_TIM2_Init();
 80031f8:	f001 f85a 	bl	80042b0 <MX_TIM2_Init>
  MX_I2C1_Init();
 80031fc:	f000 fef4 	bl	8003fe8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8003200:	f000 ff3a 	bl	8004078 <MX_SPI2_Init>
  MX_IWDG_Init();
 8003204:	f000 ff1e 	bl	8004044 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003208:	2201      	movs	r2, #1
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	484a      	ldr	r0, [pc, #296]	; (8003338 <main+0x1e0>)
 800320e:	f004 fb35 	bl	800787c <HAL_GPIO_WritePin>
  readyFlag = TRUE;
 8003212:	4b4a      	ldr	r3, [pc, #296]	; (800333c <main+0x1e4>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
  //sumCounter2 = 0;
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), HAL_MAX_DELAY);
 8003218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800321c:	22c8      	movs	r2, #200	; 0xc8
 800321e:	4945      	ldr	r1, [pc, #276]	; (8003334 <main+0x1dc>)
 8003220:	4847      	ldr	r0, [pc, #284]	; (8003340 <main+0x1e8>)
 8003222:	f007 fbc3 	bl	800a9ac <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_START_TEXT, sizeof(INIT_START_TEXT), HAL_MAX_DELAY);
 8003226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800322a:	2212      	movs	r2, #18
 800322c:	4945      	ldr	r1, [pc, #276]	; (8003344 <main+0x1ec>)
 800322e:	4844      	ldr	r0, [pc, #272]	; (8003340 <main+0x1e8>)
 8003230:	f007 fbbc 	bl	800a9ac <HAL_UART_Transmit>
#ifdef ZABBIX_ENABLE
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_RESET);	// Reset W5500
 8003234:	2200      	movs	r2, #0
 8003236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800323a:	483f      	ldr	r0, [pc, #252]	; (8003338 <main+0x1e0>)
 800323c:	f004 fb1e 	bl	800787c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_SET);
 8003240:	2201      	movs	r2, #1
 8003242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003246:	483c      	ldr	r0, [pc, #240]	; (8003338 <main+0x1e0>)
 8003248:	f004 fb18 	bl	800787c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SCSN_GPIO_Port, SCSN_Pin, GPIO_PIN_SET);
 800324c:	2201      	movs	r2, #1
 800324e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003252:	483d      	ldr	r0, [pc, #244]	; (8003348 <main+0x1f0>)
 8003254:	f004 fb12 	bl	800787c <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8003258:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800325c:	f003 fe3e 	bl	8006edc <HAL_Delay>
  init_w5500();
 8003260:	f7ff fede 	bl	8003020 <init_w5500>
#else
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_RESET);	// Reset W5500
#endif
  rwFlash(0);		// Чтение параметров калибровки из Flash.
 8003264:	2000      	movs	r0, #0
 8003266:	f7ff fc3b 	bl	8002ae0 <rwFlash>

  /* Таймер задержки запуска измерения */
  receiversOff
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <main+0x1f0>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4a36      	ldr	r2, [pc, #216]	; (8003348 <main+0x1f0>)
 8003270:	f043 031e 	orr.w	r3, r3, #30
 8003274:	60d3      	str	r3, [r2, #12]
  //C_13 = CALIBRATE_START;
  if (C_1 == 0) {
 8003276:	4b35      	ldr	r3, [pc, #212]	; (800334c <main+0x1f4>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <main+0x12e>
	  C_1 = CALIBRATE_START;
 800327e:	4b33      	ldr	r3, [pc, #204]	; (800334c <main+0x1f4>)
 8003280:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003284:	801a      	strh	r2, [r3, #0]
  }
  if (C_2 == 0) {
 8003286:	4b32      	ldr	r3, [pc, #200]	; (8003350 <main+0x1f8>)
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <main+0x13e>
	  C_2 = CALIBRATE_START;
 800328e:	4b30      	ldr	r3, [pc, #192]	; (8003350 <main+0x1f8>)
 8003290:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003294:	801a      	strh	r2, [r3, #0]
  }
  if (C_3 == 0) {
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <main+0x1fc>)
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <main+0x14e>
	  C_3 = CALIBRATE_START;
 800329e:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <main+0x1fc>)
 80032a0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80032a4:	801a      	strh	r2, [r3, #0]
  }
  if (C_4 == 0) {
 80032a6:	4b2c      	ldr	r3, [pc, #176]	; (8003358 <main+0x200>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <main+0x15e>
	  C_4 = CALIBRATE_START;
 80032ae:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <main+0x200>)
 80032b0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80032b4:	801a      	strh	r2, [r3, #0]
  }
  TIM3->ARR = C_3; 		// Коррекция для таймера запуска измерения Z13
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <main+0x1fc>)
 80032b8:	881a      	ldrh	r2, [r3, #0]
 80032ba:	4b28      	ldr	r3, [pc, #160]	; (800335c <main+0x204>)
 80032bc:	62da      	str	r2, [r3, #44]	; 0x2c
  /*
   * calibrateMode == 0 -- Нормальный режим
   * calibrateMode > 0 -- Режим калибровки
   */
  calibrateMode = 0;
 80032be:	4b28      	ldr	r3, [pc, #160]	; (8003360 <main+0x208>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	801a      	strh	r2, [r3, #0]
  test_flag = FALSE;
 80032c4:	4b27      	ldr	r3, [pc, #156]	; (8003364 <main+0x20c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
  Xsum = 0;
 80032ca:	4927      	ldr	r1, [pc, #156]	; (8003368 <main+0x210>)
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 80032d8:	4924      	ldr	r1, [pc, #144]	; (800336c <main+0x214>)
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9c1 2300 	strd	r2, r3, [r1]
  Vmax = 0;
 80032e6:	4922      	ldr	r1, [pc, #136]	; (8003370 <main+0x218>)
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9c1 2300 	strd	r2, r3, [r1]
  firstTime = TRUE;
 80032f4:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <main+0x21c>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
  currentMode = 0;
 80032fa:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <main+0x220>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	801a      	strh	r2, [r3, #0]
  STOP_CAPTURE
 8003300:	2100      	movs	r1, #0
 8003302:	481e      	ldr	r0, [pc, #120]	; (800337c <main+0x224>)
 8003304:	f006 f9a0 	bl	8009648 <HAL_TIM_IC_Stop_IT>
 8003308:	2104      	movs	r1, #4
 800330a:	481c      	ldr	r0, [pc, #112]	; (800337c <main+0x224>)
 800330c:	f006 f99c 	bl	8009648 <HAL_TIM_IC_Stop_IT>
  TIM1->ARR = TIM1_PERIOD;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <main+0x228>)
 8003312:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c
  measCount = 0;
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <main+0x22c>)
 800331a:	2200      	movs	r2, #0
 800331c:	801a      	strh	r2, [r3, #0]
  /*
   *	Очистка массива результатов.
   */
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 800331e:	2300      	movs	r3, #0
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
 8003322:	e04c      	b.n	80033be <main+0x266>
 8003324:	40021000 	.word	0x40021000
 8003328:	0800f0b0 	.word	0x0800f0b0
 800332c:	0800f0b4 	.word	0x0800f0b4
 8003330:	0800f0b8 	.word	0x0800f0b8
 8003334:	20000490 	.word	0x20000490
 8003338:	40010800 	.word	0x40010800
 800333c:	20000594 	.word	0x20000594
 8003340:	2000134c 	.word	0x2000134c
 8003344:	0800f0fc 	.word	0x0800f0fc
 8003348:	40010c00 	.word	0x40010c00
 800334c:	200005ec 	.word	0x200005ec
 8003350:	200005b4 	.word	0x200005b4
 8003354:	2000098c 	.word	0x2000098c
 8003358:	200005b8 	.word	0x200005b8
 800335c:	40000400 	.word	0x40000400
 8003360:	20000b2c 	.word	0x20000b2c
 8003364:	20000658 	.word	0x20000658
 8003368:	20000650 	.word	0x20000650
 800336c:	20000598 	.word	0x20000598
 8003370:	200005c0 	.word	0x200005c0
 8003374:	20000dd4 	.word	0x20000dd4
 8003378:	2000098e 	.word	0x2000098e
 800337c:	200013dc 	.word	0x200013dc
 8003380:	40012c00 	.word	0x40012c00
 8003384:	200005c8 	.word	0x200005c8
	  resul_arrayX1[ii] = 0;
 8003388:	4a7a      	ldr	r2, [pc, #488]	; (8003574 <main+0x41c>)
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  resul_arrayY1[ii] = 0;
 8003394:	4a78      	ldr	r2, [pc, #480]	; (8003578 <main+0x420>)
 8003396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  resul_arrayX2[ii] = 0;
 80033a0:	4a76      	ldr	r2, [pc, #472]	; (800357c <main+0x424>)
 80033a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  resul_arrayY2[ii] = 0;
 80033ac:	4a74      	ldr	r2, [pc, #464]	; (8003580 <main+0x428>)
 80033ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	3301      	adds	r3, #1
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
 80033be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c0:	2b63      	cmp	r3, #99	; 0x63
 80033c2:	dde1      	ble.n	8003388 <main+0x230>
  }
  calibrate1 = FALSE;
 80033c4:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <main+0x42c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
  calibrate3 = FALSE;
 80033ca:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <main+0x430>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
  calibrate2 = FALSE;
 80033d0:	4b6e      	ldr	r3, [pc, #440]	; (800358c <main+0x434>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
  calibrate4 = FALSE;
 80033d6:	4b6e      	ldr	r3, [pc, #440]	; (8003590 <main+0x438>)
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_FINISH_TEXT, sizeof(INIT_FINISH_TEXT), HAL_MAX_DELAY);
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033e0:	2213      	movs	r2, #19
 80033e2:	496c      	ldr	r1, [pc, #432]	; (8003594 <main+0x43c>)
 80033e4:	486c      	ldr	r0, [pc, #432]	; (8003598 <main+0x440>)
 80033e6:	f007 fae1 	bl	800a9ac <HAL_UART_Transmit>


  HAL_TIM_Base_Start_IT(&htim3);
 80033ea:	486c      	ldr	r0, [pc, #432]	; (800359c <main+0x444>)
 80033ec:	f005 fdf0 	bl	8008fd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80033f0:	486b      	ldr	r0, [pc, #428]	; (80035a0 <main+0x448>)
 80033f2:	f005 fded 	bl	8008fd0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  V = 0;
 80033f6:	496b      	ldr	r1, [pc, #428]	; (80035a4 <main+0x44c>)
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9c1 2300 	strd	r2, r3, [r1]
  Xsum = 0;
 8003404:	4968      	ldr	r1, [pc, #416]	; (80035a8 <main+0x450>)
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 8003412:	4966      	ldr	r1, [pc, #408]	; (80035ac <main+0x454>)
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9c1 2300 	strd	r2, r3, [r1]
  Vmaxfin = 0;
 8003420:	4963      	ldr	r1, [pc, #396]	; (80035b0 <main+0x458>)
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9c1 2300 	strd	r2, r3, [r1]
  Xmaxfin = 0;
 800342e:	4961      	ldr	r1, [pc, #388]	; (80035b4 <main+0x45c>)
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9c1 2300 	strd	r2, r3, [r1]
  Ymaxfin = 0;
 800343c:	495e      	ldr	r1, [pc, #376]	; (80035b8 <main+0x460>)
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9c1 2300 	strd	r2, r3, [r1]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800344a:	2200      	movs	r2, #0
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	485b      	ldr	r0, [pc, #364]	; (80035bc <main+0x464>)
 8003450:	f004 fa14 	bl	800787c <HAL_GPIO_WritePin>
  while (1)
  {
	  if (readyFlag) {
 8003454:	4b5a      	ldr	r3, [pc, #360]	; (80035c0 <main+0x468>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 842a 	beq.w	8003cb2 <main+0xb5a>
		  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 800345e:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <main+0x46c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <main+0x46c>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6013      	str	r3, [r2, #0]
		  HAL_IWDG_Refresh(&hiwdg);
 800346a:	4857      	ldr	r0, [pc, #348]	; (80035c8 <main+0x470>)
 800346c:	f004 fba4 	bl	8007bb8 <HAL_IWDG_Refresh>
		  readyFlag = FALSE;
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <main+0x468>)
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
		  if (calibrateMode > 0) {
 8003476:	4b55      	ldr	r3, [pc, #340]	; (80035cc <main+0x474>)
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 82e8 	beq.w	8003a50 <main+0x8f8>
			  /* Процедура калибровки */
			  if (( calibrate1 || calibrate3 || calibrate2 || calibrate4 ) && (calibrateCount < CALIBRATE_MAX_COUNT)) {
 8003480:	4b40      	ldr	r3, [pc, #256]	; (8003584 <main+0x42c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10c      	bne.n	80034a2 <main+0x34a>
 8003488:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <main+0x430>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d108      	bne.n	80034a2 <main+0x34a>
 8003490:	4b3e      	ldr	r3, [pc, #248]	; (800358c <main+0x434>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <main+0x34a>
 8003498:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <main+0x438>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 81f3 	beq.w	8003888 <main+0x730>
 80034a2:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <main+0x478>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80034aa:	f080 81ed 	bcs.w	8003888 <main+0x730>
				  memset(SndBuffer, 0, sizeof(SndBuffer));
 80034ae:	22c8      	movs	r2, #200	; 0xc8
 80034b0:	2100      	movs	r1, #0
 80034b2:	4848      	ldr	r0, [pc, #288]	; (80035d4 <main+0x47c>)
 80034b4:	f007 fcb0 	bl	800ae18 <memset>
				  if (test_flag) {
 80034b8:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <main+0x480>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8093 	beq.w	80035e8 <main+0x490>
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80034c2:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <main+0x420>)
 80034c4:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fc ffae 	bl	8000428 <__aeabi_f2d>
 80034cc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80034d0:	4b2b      	ldr	r3, [pc, #172]	; (8003580 <main+0x428>)
 80034d2:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fc ffa7 	bl	8000428 <__aeabi_f2d>
 80034da:	4680      	mov	r8, r0
 80034dc:	4689      	mov	r9, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80034de:	4b26      	ldr	r3, [pc, #152]	; (8003578 <main+0x420>)
 80034e0:	681c      	ldr	r4, [r3, #0]
 80034e2:	4b27      	ldr	r3, [pc, #156]	; (8003580 <main+0x428>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a3d      	ldr	r2, [pc, #244]	; (80035dc <main+0x484>)
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fc29 	bl	8000d44 <__aeabi_fmul>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4619      	mov	r1, r3
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7fd fb1a 	bl	8000b30 <__aeabi_fsub>
 80034fc:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fc ff92 	bl	8000428 <__aeabi_f2d>
 8003504:	4604      	mov	r4, r0
 8003506:	460d      	mov	r5, r1
							  resul_arrayX1[0], resul_arrayX2[0], resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <main+0x41c>)
 800350a:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 800350c:	4618      	mov	r0, r3
 800350e:	f7fc ff8b 	bl	8000428 <__aeabi_f2d>
 8003512:	4682      	mov	sl, r0
 8003514:	468b      	mov	fp, r1
							  resul_arrayX1[0], resul_arrayX2[0], resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <main+0x424>)
 8003518:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 800351a:	4618      	mov	r0, r3
 800351c:	f7fc ff84 	bl	8000428 <__aeabi_f2d>
 8003520:	e9c7 0108 	strd	r0, r1, [r7, #32]
							  resul_arrayX1[0], resul_arrayX2[0], resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <main+0x41c>)
 8003526:	681e      	ldr	r6, [r3, #0]
 8003528:	4b14      	ldr	r3, [pc, #80]	; (800357c <main+0x424>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <main+0x488>)
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fc06 	bl	8000d44 <__aeabi_fmul>
 8003538:	4603      	mov	r3, r0
 800353a:	4619      	mov	r1, r3
 800353c:	4630      	mov	r0, r6
 800353e:	f7fd faf7 	bl	8000b30 <__aeabi_fsub>
 8003542:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 8003544:	4618      	mov	r0, r3
 8003546:	f7fc ff6f 	bl	8000428 <__aeabi_f2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003552:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003556:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800355a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800355e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003562:	e9cd 8900 	strd	r8, r9, [sp]
 8003566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800356a:	491e      	ldr	r1, [pc, #120]	; (80035e4 <main+0x48c>)
 800356c:	4819      	ldr	r0, [pc, #100]	; (80035d4 <main+0x47c>)
 800356e:	f008 f8bb 	bl	800b6e8 <siprintf>
 8003572:	e061      	b.n	8003638 <main+0x4e0>
 8003574:	200007fc 	.word	0x200007fc
 8003578:	2000065c 	.word	0x2000065c
 800357c:	20000998 	.word	0x20000998
 8003580:	20000b38 	.word	0x20000b38
 8003584:	200005fc 	.word	0x200005fc
 8003588:	20000630 	.word	0x20000630
 800358c:	20000dc7 	.word	0x20000dc7
 8003590:	200005b6 	.word	0x200005b6
 8003594:	0800f110 	.word	0x0800f110
 8003598:	2000134c 	.word	0x2000134c
 800359c:	20001304 	.word	0x20001304
 80035a0:	20001254 	.word	0x20001254
 80035a4:	20000640 	.word	0x20000640
 80035a8:	20000650 	.word	0x20000650
 80035ac:	20000598 	.word	0x20000598
 80035b0:	200005a8 	.word	0x200005a8
 80035b4:	20000b30 	.word	0x20000b30
 80035b8:	200007f0 	.word	0x200007f0
 80035bc:	40010800 	.word	0x40010800
 80035c0:	20000594 	.word	0x20000594
 80035c4:	e000e010 	.word	0xe000e010
 80035c8:	200012f0 	.word	0x200012f0
 80035cc:	20000b2c 	.word	0x20000b2c
 80035d0:	20000b2e 	.word	0x20000b2e
 80035d4:	20000490 	.word	0x20000490
 80035d8:	20000658 	.word	0x20000658
 80035dc:	200005a0 	.word	0x200005a0
 80035e0:	20000590 	.word	0x20000590
 80035e4:	0800f124 	.word	0x0800f124
				  } else {
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 80035e8:	4b93      	ldr	r3, [pc, #588]	; (8003838 <main+0x6e0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fc ff1b 	bl	8000428 <__aeabi_f2d>
 80035f2:	4682      	mov	sl, r0
 80035f4:	468b      	mov	fp, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 80035f6:	4b91      	ldr	r3, [pc, #580]	; (800383c <main+0x6e4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ff14 	bl	8000428 <__aeabi_f2d>
 8003600:	4604      	mov	r4, r0
 8003602:	460d      	mov	r5, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8003604:	4b8e      	ldr	r3, [pc, #568]	; (8003840 <main+0x6e8>)
 8003606:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
 8003608:	4618      	mov	r0, r3
 800360a:	f7fc ff0d 	bl	8000428 <__aeabi_f2d>
 800360e:	4680      	mov	r8, r0
 8003610:	4689      	mov	r9, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8003612:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <main+0x6ec>)
 8003614:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc ff06 	bl	8000428 <__aeabi_f2d>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003624:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003628:	e9cd 4500 	strd	r4, r5, [sp]
 800362c:	4652      	mov	r2, sl
 800362e:	465b      	mov	r3, fp
 8003630:	4985      	ldr	r1, [pc, #532]	; (8003848 <main+0x6f0>)
 8003632:	4886      	ldr	r0, [pc, #536]	; (800384c <main+0x6f4>)
 8003634:	f008 f858 	bl	800b6e8 <siprintf>
				  }
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8003638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800363c:	22c8      	movs	r2, #200	; 0xc8
 800363e:	4983      	ldr	r1, [pc, #524]	; (800384c <main+0x6f4>)
 8003640:	4883      	ldr	r0, [pc, #524]	; (8003850 <main+0x6f8>)
 8003642:	f007 f9b3 	bl	800a9ac <HAL_UART_Transmit>
				  if (! test_flag) {
 8003646:	4b83      	ldr	r3, [pc, #524]	; (8003854 <main+0x6fc>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	f083 0301 	eor.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80e6 	beq.w	8003822 <main+0x6ca>
					  /* Y1 */
					  if ( calibrate1 && (abs(resul_arrayY1[0] - (float) TIM1_PERIOD) > CALIBRATE_ACURACY) ) {
 8003656:	4b80      	ldr	r3, [pc, #512]	; (8003858 <main+0x700>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d030      	beq.n	80036c0 <main+0x568>
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <main+0x6e0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	497e      	ldr	r1, [pc, #504]	; (800385c <main+0x704>)
 8003664:	4618      	mov	r0, r3
 8003666:	f7fd fa63 	bl	8000b30 <__aeabi_fsub>
 800366a:	4603      	mov	r3, r0
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd fd2f 	bl	80010d0 <__aeabi_f2iz>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	bfb8      	it	lt
 8003678:	425b      	neglt	r3, r3
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fb0e 	bl	8000c9c <__aeabi_i2f>
 8003680:	4603      	mov	r3, r0
 8003682:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd fd18 	bl	80010bc <__aeabi_fcmpgt>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d016      	beq.n	80036c0 <main+0x568>
						  if (resul_arrayY1[0] > (float) TIM1_PERIOD) {
 8003692:	4b69      	ldr	r3, [pc, #420]	; (8003838 <main+0x6e0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4971      	ldr	r1, [pc, #452]	; (800385c <main+0x704>)
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd fd0f 	bl	80010bc <__aeabi_fcmpgt>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <main+0x55a>
							  C_3++;
 80036a4:	4b6e      	ldr	r3, [pc, #440]	; (8003860 <main+0x708>)
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <main+0x708>)
 80036ae:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] > (float) TIM1_PERIOD) {
 80036b0:	e009      	b.n	80036c6 <main+0x56e>
						  } else {
							  C_3--;
 80036b2:	4b6b      	ldr	r3, [pc, #428]	; (8003860 <main+0x708>)
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	4b69      	ldr	r3, [pc, #420]	; (8003860 <main+0x708>)
 80036bc:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] > (float) TIM1_PERIOD) {
 80036be:	e002      	b.n	80036c6 <main+0x56e>
						  }
					  } else {
						  calibrate1 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y1
 80036c0:	4b65      	ldr	r3, [pc, #404]	; (8003858 <main+0x700>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
					  }
					  /* Y2 */
					  if ( calibrate3 && (abs(resul_arrayY2[0] - (float) TIM1_PERIOD) > CALIBRATE_ACURACY) ) {
 80036c6:	4b67      	ldr	r3, [pc, #412]	; (8003864 <main+0x70c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d030      	beq.n	8003730 <main+0x5d8>
 80036ce:	4b5b      	ldr	r3, [pc, #364]	; (800383c <main+0x6e4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4962      	ldr	r1, [pc, #392]	; (800385c <main+0x704>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd fa2b 	bl	8000b30 <__aeabi_fsub>
 80036da:	4603      	mov	r3, r0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd fcf7 	bl	80010d0 <__aeabi_f2iz>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bfb8      	it	lt
 80036e8:	425b      	neglt	r3, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd fad6 	bl	8000c9c <__aeabi_i2f>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fce0 	bl	80010bc <__aeabi_fcmpgt>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <main+0x5d8>
						  if (resul_arrayY2[0] > (float) TIM1_PERIOD) {
 8003702:	4b4e      	ldr	r3, [pc, #312]	; (800383c <main+0x6e4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4955      	ldr	r1, [pc, #340]	; (800385c <main+0x704>)
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fcd7 	bl	80010bc <__aeabi_fcmpgt>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d006      	beq.n	8003722 <main+0x5ca>
							  C_1++;
 8003714:	4b54      	ldr	r3, [pc, #336]	; (8003868 <main+0x710>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	4b52      	ldr	r3, [pc, #328]	; (8003868 <main+0x710>)
 800371e:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY2[0] > (float) TIM1_PERIOD) {
 8003720:	e009      	b.n	8003736 <main+0x5de>
						  } else {
							  C_1--;
 8003722:	4b51      	ldr	r3, [pc, #324]	; (8003868 <main+0x710>)
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	4b4f      	ldr	r3, [pc, #316]	; (8003868 <main+0x710>)
 800372c:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY2[0] > (float) TIM1_PERIOD) {
 800372e:	e002      	b.n	8003736 <main+0x5de>
						  }
					  } else {
						  calibrate3 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y1
 8003730:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <main+0x70c>)
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
					  }
					  /* X1 */
					  if ( calibrate2 && (abs(resul_arrayX1[0] - (float) TIM1_PERIOD) > CALIBRATE_ACURACY) ) {
 8003736:	4b4d      	ldr	r3, [pc, #308]	; (800386c <main+0x714>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d030      	beq.n	80037a0 <main+0x648>
 800373e:	4b40      	ldr	r3, [pc, #256]	; (8003840 <main+0x6e8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4946      	ldr	r1, [pc, #280]	; (800385c <main+0x704>)
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd f9f3 	bl	8000b30 <__aeabi_fsub>
 800374a:	4603      	mov	r3, r0
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fcbf 	bl	80010d0 <__aeabi_f2iz>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	bfb8      	it	lt
 8003758:	425b      	neglt	r3, r3
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fa9e 	bl	8000c9c <__aeabi_i2f>
 8003760:	4603      	mov	r3, r0
 8003762:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fca8 	bl	80010bc <__aeabi_fcmpgt>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <main+0x648>
						  if (resul_arrayX1[0] > (float) TIM1_PERIOD) {
 8003772:	4b33      	ldr	r3, [pc, #204]	; (8003840 <main+0x6e8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4939      	ldr	r1, [pc, #228]	; (800385c <main+0x704>)
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fc9f 	bl	80010bc <__aeabi_fcmpgt>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <main+0x63a>
							  C_4++;
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <main+0x718>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	4b38      	ldr	r3, [pc, #224]	; (8003870 <main+0x718>)
 800378e:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] > (float) TIM1_PERIOD) {
 8003790:	e009      	b.n	80037a6 <main+0x64e>
						  } else {
							  C_4--;
 8003792:	4b37      	ldr	r3, [pc, #220]	; (8003870 <main+0x718>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	4b35      	ldr	r3, [pc, #212]	; (8003870 <main+0x718>)
 800379c:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] > (float) TIM1_PERIOD) {
 800379e:	e002      	b.n	80037a6 <main+0x64e>
						  }
					  } else {
						  calibrate2 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y2
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <main+0x714>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
					  }
					  /* X2 */
					  if ( calibrate4 && (abs(resul_arrayX2[0] - (float) TIM1_PERIOD) > CALIBRATE_ACURACY) ) {
 80037a6:	4b33      	ldr	r3, [pc, #204]	; (8003874 <main+0x71c>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d030      	beq.n	8003810 <main+0x6b8>
 80037ae:	4b25      	ldr	r3, [pc, #148]	; (8003844 <main+0x6ec>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	492a      	ldr	r1, [pc, #168]	; (800385c <main+0x704>)
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd f9bb 	bl	8000b30 <__aeabi_fsub>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fc87 	bl	80010d0 <__aeabi_f2iz>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bfb8      	it	lt
 80037c8:	425b      	neglt	r3, r3
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd fa66 	bl	8000c9c <__aeabi_i2f>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fc70 	bl	80010bc <__aeabi_fcmpgt>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <main+0x6b8>
						  if (resul_arrayX2[0] > (float) TIM1_PERIOD) {
 80037e2:	4b18      	ldr	r3, [pc, #96]	; (8003844 <main+0x6ec>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	491d      	ldr	r1, [pc, #116]	; (800385c <main+0x704>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd fc67 	bl	80010bc <__aeabi_fcmpgt>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d006      	beq.n	8003802 <main+0x6aa>
							  C_2++;
 80037f4:	4b20      	ldr	r3, [pc, #128]	; (8003878 <main+0x720>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <main+0x720>)
 80037fe:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX2[0] > (float) TIM1_PERIOD) {
 8003800:	e009      	b.n	8003816 <main+0x6be>
						  } else {
							  C_2--;
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <main+0x720>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <main+0x720>)
 800380c:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX2[0] > (float) TIM1_PERIOD) {
 800380e:	e002      	b.n	8003816 <main+0x6be>
						  }
					  } else {
						  calibrate4 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y2
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <main+0x71c>)
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
					  }
					  calibrateCount++;
 8003816:	4b19      	ldr	r3, [pc, #100]	; (800387c <main+0x724>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	3301      	adds	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <main+0x724>)
 8003820:	801a      	strh	r2, [r3, #0]
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8003822:	4b17      	ldr	r3, [pc, #92]	; (8003880 <main+0x728>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a16      	ldr	r2, [pc, #88]	; (8003880 <main+0x728>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 800382e:	4815      	ldr	r0, [pc, #84]	; (8003884 <main+0x72c>)
 8003830:	f005 fbce 	bl	8008fd0 <HAL_TIM_Base_Start_IT>
 8003834:	e23d      	b.n	8003cb2 <main+0xb5a>
 8003836:	bf00      	nop
 8003838:	2000065c 	.word	0x2000065c
 800383c:	20000b38 	.word	0x20000b38
 8003840:	200007fc 	.word	0x200007fc
 8003844:	20000998 	.word	0x20000998
 8003848:	0800f164 	.word	0x0800f164
 800384c:	20000490 	.word	0x20000490
 8003850:	2000134c 	.word	0x2000134c
 8003854:	20000658 	.word	0x20000658
 8003858:	200005fc 	.word	0x200005fc
 800385c:	44480000 	.word	0x44480000
 8003860:	2000098c 	.word	0x2000098c
 8003864:	20000630 	.word	0x20000630
 8003868:	200005ec 	.word	0x200005ec
 800386c:	20000dc7 	.word	0x20000dc7
 8003870:	200005b8 	.word	0x200005b8
 8003874:	200005b6 	.word	0x200005b6
 8003878:	200005b4 	.word	0x200005b4
 800387c:	20000b2e 	.word	0x20000b2e
 8003880:	e000e010 	.word	0xe000e010
 8003884:	20001254 	.word	0x20001254
			  } else {
				  if (calibrateCount >= CALIBRATE_MAX_COUNT) {
 8003888:	4b9c      	ldr	r3, [pc, #624]	; (8003afc <main+0x9a4>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003890:	d308      	bcc.n	80038a4 <main+0x74c>
					  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_TOUT, sizeof(CALIBRATE_ERROR_TOUT), 1000);
 8003892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003896:	221f      	movs	r2, #31
 8003898:	4999      	ldr	r1, [pc, #612]	; (8003b00 <main+0x9a8>)
 800389a:	489a      	ldr	r0, [pc, #616]	; (8003b04 <main+0x9ac>)
 800389c:	f007 f886 	bl	800a9ac <HAL_UART_Transmit>
					  /* System restart if calibrate error. */
					  HAL_NVIC_SystemReset();
 80038a0:	f003 fc57 	bl	8007152 <HAL_NVIC_SystemReset>
				  }
				  if (calibrateMode > 0) {
 80038a4:	4b98      	ldr	r3, [pc, #608]	; (8003b08 <main+0x9b0>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80c7 	beq.w	8003a3c <main+0x8e4>
					  ZX1 = ZX1 + (float) resul_arrayX1[0];
 80038ae:	4b97      	ldr	r3, [pc, #604]	; (8003b0c <main+0x9b4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a97      	ldr	r2, [pc, #604]	; (8003b10 <main+0x9b8>)
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd f93b 	bl	8000b34 <__addsf3>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b93      	ldr	r3, [pc, #588]	; (8003b10 <main+0x9b8>)
 80038c4:	601a      	str	r2, [r3, #0]
					  ZX2 = ZX2 + (float) resul_arrayX2[0];
 80038c6:	4b93      	ldr	r3, [pc, #588]	; (8003b14 <main+0x9bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a93      	ldr	r2, [pc, #588]	; (8003b18 <main+0x9c0>)
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd f92f 	bl	8000b34 <__addsf3>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461a      	mov	r2, r3
 80038da:	4b8f      	ldr	r3, [pc, #572]	; (8003b18 <main+0x9c0>)
 80038dc:	601a      	str	r2, [r3, #0]
					  ZY1 = ZY1 + (float) resul_arrayY1[0];
 80038de:	4b8f      	ldr	r3, [pc, #572]	; (8003b1c <main+0x9c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a8f      	ldr	r2, [pc, #572]	; (8003b20 <main+0x9c8>)
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd f923 	bl	8000b34 <__addsf3>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b8b      	ldr	r3, [pc, #556]	; (8003b20 <main+0x9c8>)
 80038f4:	601a      	str	r2, [r3, #0]
					  ZY2 = ZY2 + (float) resul_arrayY2[0];
 80038f6:	4b8b      	ldr	r3, [pc, #556]	; (8003b24 <main+0x9cc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a8b      	ldr	r2, [pc, #556]	; (8003b28 <main+0x9d0>)
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd f917 	bl	8000b34 <__addsf3>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	4b87      	ldr	r3, [pc, #540]	; (8003b28 <main+0x9d0>)
 800390c:	601a      	str	r2, [r3, #0]
					  calibrateMode--;
 800390e:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <main+0x9b0>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	4b7c      	ldr	r3, [pc, #496]	; (8003b08 <main+0x9b0>)
 8003918:	801a      	strh	r2, [r3, #0]
					  if (calibrateMode == 0) {
 800391a:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <main+0x9b0>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 808c 	bne.w	8003a3c <main+0x8e4>
						  /* Вычисление поправок */
						  DX1.f = ZX1 / ZX2;
 8003924:	4b7a      	ldr	r3, [pc, #488]	; (8003b10 <main+0x9b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7b      	ldr	r2, [pc, #492]	; (8003b18 <main+0x9c0>)
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fabc 	bl	8000eac <__aeabi_fdiv>
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	4b7c      	ldr	r3, [pc, #496]	; (8003b2c <main+0x9d4>)
 800393a:	601a      	str	r2, [r3, #0]
						  DY1.f = ZY1 / ZY2;
 800393c:	4b78      	ldr	r3, [pc, #480]	; (8003b20 <main+0x9c8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a79      	ldr	r2, [pc, #484]	; (8003b28 <main+0x9d0>)
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f7fd fab0 	bl	8000eac <__aeabi_fdiv>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	4b77      	ldr	r3, [pc, #476]	; (8003b30 <main+0x9d8>)
 8003952:	601a      	str	r2, [r3, #0]
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 8003954:	22c8      	movs	r2, #200	; 0xc8
 8003956:	2100      	movs	r1, #0
 8003958:	4876      	ldr	r0, [pc, #472]	; (8003b34 <main+0x9dc>)
 800395a:	f007 fa5d 	bl	800ae18 <memset>
						  sprintf(SndBuffer, "\r\nCalibrate complite.\r\nC_1:%5d, C_3:%5d, C_2:%5d, C_4:%5d\r\n", C_1, C_3, C_2, C_4);
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <main+0x9e0>)
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	4b75      	ldr	r3, [pc, #468]	; (8003b3c <main+0x9e4>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <main+0x9e8>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	4b74      	ldr	r3, [pc, #464]	; (8003b44 <main+0x9ec>)
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	9200      	str	r2, [sp, #0]
 8003978:	4603      	mov	r3, r0
 800397a:	460a      	mov	r2, r1
 800397c:	4972      	ldr	r1, [pc, #456]	; (8003b48 <main+0x9f0>)
 800397e:	486d      	ldr	r0, [pc, #436]	; (8003b34 <main+0x9dc>)
 8003980:	f007 feb2 	bl	800b6e8 <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8003984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003988:	22c8      	movs	r2, #200	; 0xc8
 800398a:	496a      	ldr	r1, [pc, #424]	; (8003b34 <main+0x9dc>)
 800398c:	485d      	ldr	r0, [pc, #372]	; (8003b04 <main+0x9ac>)
 800398e:	f007 f80d 	bl	800a9ac <HAL_UART_Transmit>
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 8003992:	22c8      	movs	r2, #200	; 0xc8
 8003994:	2100      	movs	r1, #0
 8003996:	4867      	ldr	r0, [pc, #412]	; (8003b34 <main+0x9dc>)
 8003998:	f007 fa3e 	bl	800ae18 <memset>
						  sprintf(SndBuffer, "DY1:%5.4f, DX1:%5.4f\r\n\r\n", DY1.f, DX1.f);
 800399c:	4b64      	ldr	r3, [pc, #400]	; (8003b30 <main+0x9d8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fd41 	bl	8000428 <__aeabi_f2d>
 80039a6:	4604      	mov	r4, r0
 80039a8:	460d      	mov	r5, r1
 80039aa:	4b60      	ldr	r3, [pc, #384]	; (8003b2c <main+0x9d4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fc fd3a 	bl	8000428 <__aeabi_f2d>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	e9cd 2300 	strd	r2, r3, [sp]
 80039bc:	4622      	mov	r2, r4
 80039be:	462b      	mov	r3, r5
 80039c0:	4962      	ldr	r1, [pc, #392]	; (8003b4c <main+0x9f4>)
 80039c2:	485c      	ldr	r0, [pc, #368]	; (8003b34 <main+0x9dc>)
 80039c4:	f007 fe90 	bl	800b6e8 <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80039c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039cc:	22c8      	movs	r2, #200	; 0xc8
 80039ce:	4959      	ldr	r1, [pc, #356]	; (8003b34 <main+0x9dc>)
 80039d0:	484c      	ldr	r0, [pc, #304]	; (8003b04 <main+0x9ac>)
 80039d2:	f006 ffeb 	bl	800a9ac <HAL_UART_Transmit>
						  if (abs(DX1.f) < 2 && abs(DY1.f) < 2) {
 80039d6:	4b55      	ldr	r3, [pc, #340]	; (8003b2c <main+0x9d4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd fb78 	bl	80010d0 <__aeabi_f2iz>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e6:	db1c      	blt.n	8003a22 <main+0x8ca>
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <main+0x9d4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fd fb6f 	bl	80010d0 <__aeabi_f2iz>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	dc14      	bgt.n	8003a22 <main+0x8ca>
 80039f8:	4b4d      	ldr	r3, [pc, #308]	; (8003b30 <main+0x9d8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fd fb67 	bl	80010d0 <__aeabi_f2iz>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a08:	db0b      	blt.n	8003a22 <main+0x8ca>
 8003a0a:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <main+0x9d8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd fb5e 	bl	80010d0 <__aeabi_f2iz>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	dc03      	bgt.n	8003a22 <main+0x8ca>
							  rwFlash(1);  // Запись данных калибровки во Flash.
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f7ff f860 	bl	8002ae0 <rwFlash>
 8003a20:	e006      	b.n	8003a30 <main+0x8d8>
						  } else {
							  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_RANGE, sizeof(CALIBRATE_ERROR_RANGE), 1000);
 8003a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a26:	222a      	movs	r2, #42	; 0x2a
 8003a28:	4949      	ldr	r1, [pc, #292]	; (8003b50 <main+0x9f8>)
 8003a2a:	4836      	ldr	r0, [pc, #216]	; (8003b04 <main+0x9ac>)
 8003a2c:	f006 ffbe 	bl	800a9ac <HAL_UART_Transmit>
						  }
						  calibrateCount = 0;
 8003a30:	4b32      	ldr	r3, [pc, #200]	; (8003afc <main+0x9a4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	801a      	strh	r2, [r3, #0]
						  firstTime = TRUE;
 8003a36:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <main+0x9fc>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
					  }
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8003a3c:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <main+0xa00>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a45      	ldr	r2, [pc, #276]	; (8003b58 <main+0xa00>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8003a48:	4844      	ldr	r0, [pc, #272]	; (8003b5c <main+0xa04>)
 8003a4a:	f005 fac1 	bl	8008fd0 <HAL_TIM_Base_Start_IT>
 8003a4e:	e130      	b.n	8003cb2 <main+0xb5a>
			  		MX_I2C1_Init();
			  		BME280_Init();  // Сбой датчика bme280, пробуем исправить.
					#endif
			  	  }
				#endif
			  if ( V != 0 ) {
 8003a50:	4b43      	ldr	r3, [pc, #268]	; (8003b60 <main+0xa08>)
 8003a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	f7fc ffa3 	bl	80009a8 <__aeabi_dcmpeq>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 808d 	bne.w	8003b84 <main+0xa2c>
				  if ( (! firstTime) && (V < MAX_SPD) && (Vmaxfin < MAX_SPD) ) {  // Первый раз пропускаем для инициализации переменных.
 8003a6a:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <main+0x9fc>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	f083 0301 	eor.w	r3, r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80ab 	beq.w	8003bd0 <main+0xa78>
 8003a7a:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <main+0xa08>)
 8003a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <main+0xa0c>)
 8003a86:	f7fc ff99 	bl	80009bc <__aeabi_dcmplt>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 809f 	beq.w	8003bd0 <main+0xa78>
 8003a92:	4b35      	ldr	r3, [pc, #212]	; (8003b68 <main+0xa10>)
 8003a94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <main+0xa0c>)
 8003a9e:	f7fc ff8d 	bl	80009bc <__aeabi_dcmplt>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8093 	beq.w	8003bd0 <main+0xa78>
					  sendToZabbix(net_info.zabbix, ZabbixHostName, "ALTIM_SPEED", V);
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <main+0xa08>)
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f7fc ffe8 	bl	8000a88 <__aeabi_d2f>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <main+0xa14>)
 8003abc:	492c      	ldr	r1, [pc, #176]	; (8003b70 <main+0xa18>)
 8003abe:	482d      	ldr	r0, [pc, #180]	; (8003b74 <main+0xa1c>)
 8003ac0:	f7ff f9f0 	bl	8002ea4 <sendToZabbix>
					  sendToZabbix(net_info.zabbix, ZabbixHostName, "ALTIM_DIRECT", A);
 8003ac4:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <main+0xa20>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	f7fc ffdb 	bl	8000a88 <__aeabi_d2f>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <main+0xa24>)
 8003ad6:	4926      	ldr	r1, [pc, #152]	; (8003b70 <main+0xa18>)
 8003ad8:	4826      	ldr	r0, [pc, #152]	; (8003b74 <main+0xa1c>)
 8003ada:	f7ff f9e3 	bl	8002ea4 <sendToZabbix>
					  sendToZabbix(net_info.zabbix, ZabbixHostName, "ALTIM_MAXSPEED", Vmaxfin);
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <main+0xa10>)
 8003ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fc ffce 	bl	8000a88 <__aeabi_d2f>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <main+0xa28>)
 8003af0:	491f      	ldr	r1, [pc, #124]	; (8003b70 <main+0xa18>)
 8003af2:	4820      	ldr	r0, [pc, #128]	; (8003b74 <main+0xa1c>)
 8003af4:	f7ff f9d6 	bl	8002ea4 <sendToZabbix>
 8003af8:	e06a      	b.n	8003bd0 <main+0xa78>
 8003afa:	bf00      	nop
 8003afc:	20000b2e 	.word	0x20000b2e
 8003b00:	0800f194 	.word	0x0800f194
 8003b04:	2000134c 	.word	0x2000134c
 8003b08:	20000b2c 	.word	0x20000b2c
 8003b0c:	200007fc 	.word	0x200007fc
 8003b10:	200005e8 	.word	0x200005e8
 8003b14:	20000998 	.word	0x20000998
 8003b18:	200007f8 	.word	0x200007f8
 8003b1c:	2000065c 	.word	0x2000065c
 8003b20:	20000b28 	.word	0x20000b28
 8003b24:	20000b38 	.word	0x20000b38
 8003b28:	20000dc8 	.word	0x20000dc8
 8003b2c:	20000590 	.word	0x20000590
 8003b30:	200005a0 	.word	0x200005a0
 8003b34:	20000490 	.word	0x20000490
 8003b38:	200005ec 	.word	0x200005ec
 8003b3c:	2000098c 	.word	0x2000098c
 8003b40:	200005b4 	.word	0x200005b4
 8003b44:	200005b8 	.word	0x200005b8
 8003b48:	0800f1b4 	.word	0x0800f1b4
 8003b4c:	0800f1f0 	.word	0x0800f1f0
 8003b50:	0800f20c 	.word	0x0800f20c
 8003b54:	20000dd4 	.word	0x20000dd4
 8003b58:	e000e010 	.word	0xe000e010
 8003b5c:	20001254 	.word	0x20001254
 8003b60:	20000640 	.word	0x20000640
 8003b64:	40440000 	.word	0x40440000
 8003b68:	200005a8 	.word	0x200005a8
 8003b6c:	0800f238 	.word	0x0800f238
 8003b70:	20000cc8 	.word	0x20000cc8
 8003b74:	20000032 	.word	0x20000032
 8003b78:	200005d0 	.word	0x200005d0
 8003b7c:	0800f244 	.word	0x0800f244
 8003b80:	0800f254 	.word	0x0800f254
				  }
			  } else {
				  if ( (! firstTime) && (Vmaxfin < MAX_SPD) ) {
 8003b84:	4b9c      	ldr	r3, [pc, #624]	; (8003df8 <main+0xca0>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	f083 0301 	eor.w	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01e      	beq.n	8003bd0 <main+0xa78>
 8003b92:	4b9a      	ldr	r3, [pc, #616]	; (8003dfc <main+0xca4>)
 8003b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	4b98      	ldr	r3, [pc, #608]	; (8003e00 <main+0xca8>)
 8003b9e:	f7fc ff0d 	bl	80009bc <__aeabi_dcmplt>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <main+0xa78>
					  sendToZabbix(net_info.zabbix, ZabbixHostName, "ALTIM_SPEED", 0);
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	4a95      	ldr	r2, [pc, #596]	; (8003e04 <main+0xcac>)
 8003bae:	4996      	ldr	r1, [pc, #600]	; (8003e08 <main+0xcb0>)
 8003bb0:	4896      	ldr	r0, [pc, #600]	; (8003e0c <main+0xcb4>)
 8003bb2:	f7ff f977 	bl	8002ea4 <sendToZabbix>
					  sendToZabbix(net_info.zabbix, ZabbixHostName, "ALTIM_MAXSPEED", Vmaxfin);
 8003bb6:	4b91      	ldr	r3, [pc, #580]	; (8003dfc <main+0xca4>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f7fc ff62 	bl	8000a88 <__aeabi_d2f>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4a92      	ldr	r2, [pc, #584]	; (8003e10 <main+0xcb8>)
 8003bc8:	498f      	ldr	r1, [pc, #572]	; (8003e08 <main+0xcb0>)
 8003bca:	4890      	ldr	r0, [pc, #576]	; (8003e0c <main+0xcb4>)
 8003bcc:	f7ff f96a 	bl	8002ea4 <sendToZabbix>
				  }
			  }
			#endif
			  //HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
			  if ( ! firstTime ) {
 8003bd0:	4b89      	ldr	r3, [pc, #548]	; (8003df8 <main+0xca0>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	f083 0301 	eor.w	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d05d      	beq.n	8003c9a <main+0xb42>
				  sprintf(SndBuffer, "V:%5.2f, X:%5.2f, Y:%5.2f, Vmax:%5.2f, Xmax:%5.2f, Ymax:%5.2f, A:%3.0f, T:%5.2f, P:%8.3f, H:%5.2f   \r",
 8003bde:	4b8d      	ldr	r3, [pc, #564]	; (8003e14 <main+0xcbc>)
 8003be0:	cb18      	ldmia	r3, {r3, r4}
 8003be2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8003be6:	4b8c      	ldr	r3, [pc, #560]	; (8003e18 <main+0xcc0>)
 8003be8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8003bec:	4b8b      	ldr	r3, [pc, #556]	; (8003e1c <main+0xcc4>)
 8003bee:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003bf2:	e9c7 1208 	strd	r1, r2, [r7, #32]
 8003bf6:	4b81      	ldr	r3, [pc, #516]	; (8003dfc <main+0xca4>)
 8003bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bfc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003c00:	4b87      	ldr	r3, [pc, #540]	; (8003e20 <main+0xcc8>)
 8003c02:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c06:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8003c0a:	4b86      	ldr	r3, [pc, #536]	; (8003e24 <main+0xccc>)
 8003c0c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8003c10:	e9c7 5602 	strd	r5, r6, [r7, #8]
 8003c14:	4b84      	ldr	r3, [pc, #528]	; (8003e28 <main+0xcd0>)
 8003c16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c1a:	e9c7 8900 	strd	r8, r9, [r7]
 8003c1e:	4b83      	ldr	r3, [pc, #524]	; (8003e2c <main+0xcd4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fc fc00 	bl	8000428 <__aeabi_f2d>
 8003c28:	4680      	mov	r8, r0
 8003c2a:	4689      	mov	r9, r1
 8003c2c:	4b80      	ldr	r3, [pc, #512]	; (8003e30 <main+0xcd8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fc fbf9 	bl	8000428 <__aeabi_f2d>
 8003c36:	4604      	mov	r4, r0
 8003c38:	460d      	mov	r5, r1
 8003c3a:	4b7e      	ldr	r3, [pc, #504]	; (8003e34 <main+0xcdc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fc fbf2 	bl	8000428 <__aeabi_f2d>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003c4c:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003c50:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003c54:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003c58:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003c5c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8003c60:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8003c64:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c68:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003c6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c78:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8003c7c:	e9cd ab00 	strd	sl, fp, [sp]
 8003c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c84:	496c      	ldr	r1, [pc, #432]	; (8003e38 <main+0xce0>)
 8003c86:	486d      	ldr	r0, [pc, #436]	; (8003e3c <main+0xce4>)
 8003c88:	f007 fd2e 	bl	800b6e8 <siprintf>
						  V, Xsum, Ysum, Vmaxfin, Xmaxfin, Ymaxfin, A, temperature, pressure, humidity);
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8003c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c90:	22c8      	movs	r2, #200	; 0xc8
 8003c92:	496a      	ldr	r1, [pc, #424]	; (8003e3c <main+0xce4>)
 8003c94:	486a      	ldr	r0, [pc, #424]	; (8003e40 <main+0xce8>)
 8003c96:	f006 fe89 	bl	800a9ac <HAL_UART_Transmit>
			  }
			  firstTime = FALSE;
 8003c9a:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <main+0xca0>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8003ca0:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <main+0xcec>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a67      	ldr	r2, [pc, #412]	; (8003e44 <main+0xcec>)
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6013      	str	r3, [r2, #0]
				#endif
			  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8003cac:	4866      	ldr	r0, [pc, #408]	; (8003e48 <main+0xcf0>)
 8003cae:	f005 f98f 	bl	8008fd0 <HAL_TIM_Base_Start_IT>


	  /*
	   * Подготовка запуска процедуры калибровки
	   */
	  if(HAL_UART_Receive(&huart1, (uint8_t *) uart_buffer, 1, 10) ) {
 8003cb2:	230a      	movs	r3, #10
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4965      	ldr	r1, [pc, #404]	; (8003e4c <main+0xcf4>)
 8003cb8:	4861      	ldr	r0, [pc, #388]	; (8003e40 <main+0xce8>)
 8003cba:	f006 ff09 	bl	800aad0 <HAL_UART_Receive>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f43f abc7 	beq.w	8003454 <main+0x2fc>
		  if (uart_buffer[0] == 'c' ) {  // Клавиша c нажата ?
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <main+0xcf4>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b63      	cmp	r3, #99	; 0x63
 8003ccc:	d161      	bne.n	8003d92 <main+0xc3a>
			  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_TEXT, sizeof(CALIBRATE_TEXT), 1000);
 8003cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cd2:	2216      	movs	r2, #22
 8003cd4:	495e      	ldr	r1, [pc, #376]	; (8003e50 <main+0xcf8>)
 8003cd6:	485a      	ldr	r0, [pc, #360]	; (8003e40 <main+0xce8>)
 8003cd8:	f006 fe68 	bl	800a9ac <HAL_UART_Transmit>
			  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8003cdc:	485a      	ldr	r0, [pc, #360]	; (8003e48 <main+0xcf0>)
 8003cde:	f005 f9c9 	bl	8009074 <HAL_TIM_Base_Stop_IT>
			  STOP_CAPTURE
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	485b      	ldr	r0, [pc, #364]	; (8003e54 <main+0xcfc>)
 8003ce6:	f005 fcaf 	bl	8009648 <HAL_TIM_IC_Stop_IT>
 8003cea:	2104      	movs	r1, #4
 8003cec:	4859      	ldr	r0, [pc, #356]	; (8003e54 <main+0xcfc>)
 8003cee:	f005 fcab 	bl	8009648 <HAL_TIM_IC_Stop_IT>
			  memset(SndBuffer, 0, sizeof(SndBuffer));
 8003cf2:	22c8      	movs	r2, #200	; 0xc8
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4851      	ldr	r0, [pc, #324]	; (8003e3c <main+0xce4>)
 8003cf8:	f007 f88e 	bl	800ae18 <memset>
			  calibrate1 = TRUE;
 8003cfc:	4b56      	ldr	r3, [pc, #344]	; (8003e58 <main+0xd00>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
			  calibrate3 = TRUE;
 8003d02:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <main+0xd04>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
			  calibrate2 = TRUE;
 8003d08:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <main+0xd08>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
			  calibrate4 = TRUE;
 8003d0e:	4b55      	ldr	r3, [pc, #340]	; (8003e64 <main+0xd0c>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
			  test_flag = FALSE;
 8003d14:	4b54      	ldr	r3, [pc, #336]	; (8003e68 <main+0xd10>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
			  calibrateCount = 0;
 8003d1a:	4b54      	ldr	r3, [pc, #336]	; (8003e6c <main+0xd14>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	801a      	strh	r2, [r3, #0]
			  C_1 = CALIBRATE_START;
 8003d20:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <main+0xd18>)
 8003d22:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003d26:	801a      	strh	r2, [r3, #0]
			  C_3 = CALIBRATE_START;
 8003d28:	4b52      	ldr	r3, [pc, #328]	; (8003e74 <main+0xd1c>)
 8003d2a:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003d2e:	801a      	strh	r2, [r3, #0]
			  C_2 = CALIBRATE_START;
 8003d30:	4b51      	ldr	r3, [pc, #324]	; (8003e78 <main+0xd20>)
 8003d32:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003d36:	801a      	strh	r2, [r3, #0]
			  C_4 = CALIBRATE_START;
 8003d38:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <main+0xd24>)
 8003d3a:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003d3e:	801a      	strh	r2, [r3, #0]
			  ZX1 = 0;
 8003d40:	4b4f      	ldr	r3, [pc, #316]	; (8003e80 <main+0xd28>)
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
			  ZX2 = 0;
 8003d48:	4b4e      	ldr	r3, [pc, #312]	; (8003e84 <main+0xd2c>)
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
			  ZY1 = 0;
 8003d50:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <main+0xd30>)
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
			  ZY2 = 0;
 8003d58:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <main+0xd34>)
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
			  DX1.f = 0;
 8003d60:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <main+0xd38>)
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
			  DY1.f = 0;
 8003d68:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <main+0xd3c>)
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
			  test_cnt = 0;
 8003d70:	4b49      	ldr	r3, [pc, #292]	; (8003e98 <main+0xd40>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	801a      	strh	r2, [r3, #0]
			  calibrateMode = MEASSURE_COUNT * CALIBRATE_TIMES;
 8003d76:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <main+0xd44>)
 8003d78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d7c:	801a      	strh	r2, [r3, #0]
			  currentMode = 0;
 8003d7e:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <main+0xd48>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	801a      	strh	r2, [r3, #0]
			  measCount = 0;
 8003d84:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <main+0xd4c>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	801a      	strh	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8003d8a:	482f      	ldr	r0, [pc, #188]	; (8003e48 <main+0xcf0>)
 8003d8c:	f005 f920 	bl	8008fd0 <HAL_TIM_Base_Start_IT>
 8003d90:	e0c0      	b.n	8003f14 <main+0xdbc>
		  } else {
			  if (uart_buffer[0] == 't' ) {		// Test
 8003d92:	4b2e      	ldr	r3, [pc, #184]	; (8003e4c <main+0xcf4>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b74      	cmp	r3, #116	; 0x74
 8003d98:	f040 8088 	bne.w	8003eac <main+0xd54>
				  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8003d9c:	482a      	ldr	r0, [pc, #168]	; (8003e48 <main+0xcf0>)
 8003d9e:	f005 f969 	bl	8009074 <HAL_TIM_Base_Stop_IT>
				  STOP_CAPTURE
 8003da2:	2100      	movs	r1, #0
 8003da4:	482b      	ldr	r0, [pc, #172]	; (8003e54 <main+0xcfc>)
 8003da6:	f005 fc4f 	bl	8009648 <HAL_TIM_IC_Stop_IT>
 8003daa:	2104      	movs	r1, #4
 8003dac:	4829      	ldr	r0, [pc, #164]	; (8003e54 <main+0xcfc>)
 8003dae:	f005 fc4b 	bl	8009648 <HAL_TIM_IC_Stop_IT>
				  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TEXT, sizeof(TEST_TEXT), 1000);
 8003db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003db6:	2210      	movs	r2, #16
 8003db8:	493b      	ldr	r1, [pc, #236]	; (8003ea8 <main+0xd50>)
 8003dba:	4821      	ldr	r0, [pc, #132]	; (8003e40 <main+0xce8>)
 8003dbc:	f006 fdf6 	bl	800a9ac <HAL_UART_Transmit>
				  calibrateMode = 1;
 8003dc0:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <main+0xd44>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	801a      	strh	r2, [r3, #0]
				  calibrateCount = 0;
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <main+0xd14>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	801a      	strh	r2, [r3, #0]
				  test_flag = TRUE;
 8003dcc:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <main+0xd10>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
				  calibrate1 = TRUE;
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <main+0xd00>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
				  calibrate3 = TRUE;
 8003dd8:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <main+0xd04>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
				  calibrate2 = TRUE;
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <main+0xd08>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
				  calibrate4 = TRUE;
 8003de4:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <main+0xd0c>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
				  measCount = 0;
 8003dea:	4b2e      	ldr	r3, [pc, #184]	; (8003ea4 <main+0xd4c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	801a      	strh	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8003df0:	4815      	ldr	r0, [pc, #84]	; (8003e48 <main+0xcf0>)
 8003df2:	f005 f8ed 	bl	8008fd0 <HAL_TIM_Base_Start_IT>
 8003df6:	e08d      	b.n	8003f14 <main+0xdbc>
 8003df8:	20000dd4 	.word	0x20000dd4
 8003dfc:	200005a8 	.word	0x200005a8
 8003e00:	40440000 	.word	0x40440000
 8003e04:	0800f238 	.word	0x0800f238
 8003e08:	20000cc8 	.word	0x20000cc8
 8003e0c:	20000032 	.word	0x20000032
 8003e10:	0800f254 	.word	0x0800f254
 8003e14:	20000640 	.word	0x20000640
 8003e18:	20000650 	.word	0x20000650
 8003e1c:	20000598 	.word	0x20000598
 8003e20:	20000b30 	.word	0x20000b30
 8003e24:	200007f0 	.word	0x200007f0
 8003e28:	200005d0 	.word	0x200005d0
 8003e2c:	200005f8 	.word	0x200005f8
 8003e30:	20000608 	.word	0x20000608
 8003e34:	20000638 	.word	0x20000638
 8003e38:	0800f264 	.word	0x0800f264
 8003e3c:	20000490 	.word	0x20000490
 8003e40:	2000134c 	.word	0x2000134c
 8003e44:	e000e010 	.word	0xe000e010
 8003e48:	20001254 	.word	0x20001254
 8003e4c:	20000484 	.word	0x20000484
 8003e50:	0800f2cc 	.word	0x0800f2cc
 8003e54:	200013dc 	.word	0x200013dc
 8003e58:	200005fc 	.word	0x200005fc
 8003e5c:	20000630 	.word	0x20000630
 8003e60:	20000dc7 	.word	0x20000dc7
 8003e64:	200005b6 	.word	0x200005b6
 8003e68:	20000658 	.word	0x20000658
 8003e6c:	20000b2e 	.word	0x20000b2e
 8003e70:	200005ec 	.word	0x200005ec
 8003e74:	2000098c 	.word	0x2000098c
 8003e78:	200005b4 	.word	0x200005b4
 8003e7c:	200005b8 	.word	0x200005b8
 8003e80:	200005e8 	.word	0x200005e8
 8003e84:	200007f8 	.word	0x200007f8
 8003e88:	20000b28 	.word	0x20000b28
 8003e8c:	20000dc8 	.word	0x20000dc8
 8003e90:	20000590 	.word	0x20000590
 8003e94:	200005a0 	.word	0x200005a0
 8003e98:	20000dcc 	.word	0x20000dcc
 8003e9c:	20000b2c 	.word	0x20000b2c
 8003ea0:	2000098e 	.word	0x2000098e
 8003ea4:	200005c8 	.word	0x200005c8
 8003ea8:	0800f2e4 	.word	0x0800f2e4
			  } else {
				  if (uart_buffer[0] == 'r' ) {		// Terminate calibration && test
 8003eac:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <main+0xdc8>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b72      	cmp	r3, #114	; 0x72
 8003eb2:	d12f      	bne.n	8003f14 <main+0xdbc>
					  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8003eb4:	481b      	ldr	r0, [pc, #108]	; (8003f24 <main+0xdcc>)
 8003eb6:	f005 f8dd 	bl	8009074 <HAL_TIM_Base_Stop_IT>
					  STOP_CAPTURE
 8003eba:	2100      	movs	r1, #0
 8003ebc:	481a      	ldr	r0, [pc, #104]	; (8003f28 <main+0xdd0>)
 8003ebe:	f005 fbc3 	bl	8009648 <HAL_TIM_IC_Stop_IT>
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	4818      	ldr	r0, [pc, #96]	; (8003f28 <main+0xdd0>)
 8003ec6:	f005 fbbf 	bl	8009648 <HAL_TIM_IC_Stop_IT>
					  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TERMINATE, sizeof(TEST_TERMINATE), 1000);
 8003eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ece:	2221      	movs	r2, #33	; 0x21
 8003ed0:	4916      	ldr	r1, [pc, #88]	; (8003f2c <main+0xdd4>)
 8003ed2:	4817      	ldr	r0, [pc, #92]	; (8003f30 <main+0xdd8>)
 8003ed4:	f006 fd6a 	bl	800a9ac <HAL_UART_Transmit>
					  test_flag = 0;
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <main+0xddc>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
					  calibrate1 = TRUE;
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <main+0xde0>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
					  calibrate3 = TRUE;
 8003ee4:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <main+0xde4>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
					  calibrate2 = TRUE;
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <main+0xde8>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
					  calibrate4 = TRUE;
 8003ef0:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <main+0xdec>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
					  calibrateMode = 0;
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <main+0xdf0>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	801a      	strh	r2, [r3, #0]
					  calibrateCount = 0;
 8003efc:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <main+0xdf4>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	801a      	strh	r2, [r3, #0]
					  measCount = 0;
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <main+0xdf8>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	801a      	strh	r2, [r3, #0]
					  rwFlash(0);		// Чтение параметров калибровки из Flash.
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f7fe fde9 	bl	8002ae0 <rwFlash>
					  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8003f0e:	4805      	ldr	r0, [pc, #20]	; (8003f24 <main+0xdcc>)
 8003f10:	f005 f85e 	bl	8008fd0 <HAL_TIM_Base_Start_IT>
				  }
			  }
		  }
		  uart_buffer[0] = 0x00;
 8003f14:	4b02      	ldr	r3, [pc, #8]	; (8003f20 <main+0xdc8>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
	  if (readyFlag) {
 8003f1a:	f7ff ba9b 	b.w	8003454 <main+0x2fc>
 8003f1e:	bf00      	nop
 8003f20:	20000484 	.word	0x20000484
 8003f24:	20001254 	.word	0x20001254
 8003f28:	200013dc 	.word	0x200013dc
 8003f2c:	0800f2f4 	.word	0x0800f2f4
 8003f30:	2000134c 	.word	0x2000134c
 8003f34:	20000658 	.word	0x20000658
 8003f38:	200005fc 	.word	0x200005fc
 8003f3c:	20000630 	.word	0x20000630
 8003f40:	20000dc7 	.word	0x20000dc7
 8003f44:	200005b6 	.word	0x200005b6
 8003f48:	20000b2c 	.word	0x20000b2c
 8003f4c:	20000b2e 	.word	0x20000b2e
 8003f50:	200005c8 	.word	0x200005c8

08003f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b090      	sub	sp, #64	; 0x40
 8003f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f5a:	f107 0318 	add.w	r3, r7, #24
 8003f5e:	2228      	movs	r2, #40	; 0x28
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f006 ff58 	bl	800ae18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003f76:	2309      	movs	r3, #9
 8003f78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f86:	2301      	movs	r3, #1
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003f98:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f9e:	f107 0318 	add.w	r3, r7, #24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 fe18 	bl	8007bd8 <HAL_RCC_OscConfig>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003fae:	f000 fc4b 	bl	8004848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fb2:	230f      	movs	r3, #15
 8003fb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fc8:	1d3b      	adds	r3, r7, #4
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f004 f883 	bl	80080d8 <HAL_RCC_ClockConfig>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003fd8:	f000 fc36 	bl	8004848 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003fdc:	f004 f966 	bl	80082ac <HAL_RCC_EnableCSS>
}
 8003fe0:	bf00      	nop
 8003fe2:	3740      	adds	r7, #64	; 0x40
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fec:	4b12      	ldr	r3, [pc, #72]	; (8004038 <MX_I2C1_Init+0x50>)
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <MX_I2C1_Init+0x54>)
 8003ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <MX_I2C1_Init+0x50>)
 8003ff4:	4a12      	ldr	r2, [pc, #72]	; (8004040 <MX_I2C1_Init+0x58>)
 8003ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <MX_I2C1_Init+0x50>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <MX_I2C1_Init+0x50>)
 8004000:	2200      	movs	r2, #0
 8004002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <MX_I2C1_Init+0x50>)
 8004006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800400a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <MX_I2C1_Init+0x50>)
 800400e:	2200      	movs	r2, #0
 8004010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <MX_I2C1_Init+0x50>)
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004018:	4b07      	ldr	r3, [pc, #28]	; (8004038 <MX_I2C1_Init+0x50>)
 800401a:	2200      	movs	r2, #0
 800401c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <MX_I2C1_Init+0x50>)
 8004020:	2200      	movs	r2, #0
 8004022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004024:	4804      	ldr	r0, [pc, #16]	; (8004038 <MX_I2C1_Init+0x50>)
 8004026:	f003 fc41 	bl	80078ac <HAL_I2C_Init>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004030:	f000 fc0a 	bl	8004848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004034:	bf00      	nop
 8004036:	bd80      	pop	{r7, pc}
 8004038:	2000129c 	.word	0x2000129c
 800403c:	40005400 	.word	0x40005400
 8004040:	000186a0 	.word	0x000186a0

08004044 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <MX_IWDG_Init+0x2c>)
 800404a:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <MX_IWDG_Init+0x30>)
 800404c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <MX_IWDG_Init+0x2c>)
 8004050:	2206      	movs	r2, #6
 8004052:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <MX_IWDG_Init+0x2c>)
 8004056:	f640 72ff 	movw	r2, #4095	; 0xfff
 800405a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800405c:	4804      	ldr	r0, [pc, #16]	; (8004070 <MX_IWDG_Init+0x2c>)
 800405e:	f003 fd69 	bl	8007b34 <HAL_IWDG_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8004068:	f000 fbee 	bl	8004848 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200012f0 	.word	0x200012f0
 8004074:	40003000 	.word	0x40003000

08004078 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <MX_SPI2_Init+0x64>)
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <MX_SPI2_Init+0x68>)
 8004080:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004082:	4b16      	ldr	r3, [pc, #88]	; (80040dc <MX_SPI2_Init+0x64>)
 8004084:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004088:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <MX_SPI2_Init+0x64>)
 800408c:	2200      	movs	r2, #0
 800408e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <MX_SPI2_Init+0x64>)
 8004092:	2200      	movs	r2, #0
 8004094:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <MX_SPI2_Init+0x64>)
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800409c:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <MX_SPI2_Init+0x64>)
 800409e:	2200      	movs	r2, #0
 80040a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <MX_SPI2_Init+0x64>)
 80040a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040aa:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <MX_SPI2_Init+0x64>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <MX_SPI2_Init+0x64>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <MX_SPI2_Init+0x64>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040bc:	4b07      	ldr	r3, [pc, #28]	; (80040dc <MX_SPI2_Init+0x64>)
 80040be:	2200      	movs	r2, #0
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <MX_SPI2_Init+0x64>)
 80040c4:	220a      	movs	r2, #10
 80040c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040c8:	4804      	ldr	r0, [pc, #16]	; (80040dc <MX_SPI2_Init+0x64>)
 80040ca:	f004 f9c5 	bl	8008458 <HAL_SPI_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80040d4:	f000 fbb8 	bl	8004848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	200011fc 	.word	0x200011fc
 80040e0:	40003800 	.word	0x40003800

080040e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b096      	sub	sp, #88	; 0x58
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	611a      	str	r2, [r3, #16]
 8004112:	615a      	str	r2, [r3, #20]
 8004114:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	2220      	movs	r2, #32
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f006 fe7b 	bl	800ae18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004122:	4b61      	ldr	r3, [pc, #388]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004124:	4a61      	ldr	r2, [pc, #388]	; (80042ac <MX_TIM1_Init+0x1c8>)
 8004126:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004128:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800412e:	4b5e      	ldr	r3, [pc, #376]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004130:	2200      	movs	r2, #0
 8004132:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 8004134:	4b5c      	ldr	r3, [pc, #368]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004136:	f240 321f 	movw	r2, #799	; 0x31f
 800413a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800413c:	4b5a      	ldr	r3, [pc, #360]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 91;
 8004142:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004144:	225b      	movs	r2, #91	; 0x5b
 8004146:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004148:	4b57      	ldr	r3, [pc, #348]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800414a:	2280      	movs	r2, #128	; 0x80
 800414c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800414e:	4856      	ldr	r0, [pc, #344]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004150:	f004 feee 	bl	8008f30 <HAL_TIM_Base_Init>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800415a:	f000 fb75 	bl	8004848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800415e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004162:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004164:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004168:	4619      	mov	r1, r3
 800416a:	484f      	ldr	r0, [pc, #316]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800416c:	f005 fd62 	bl	8009c34 <HAL_TIM_ConfigClockSource>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004176:	f000 fb67 	bl	8004848 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800417a:	484b      	ldr	r0, [pc, #300]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800417c:	f004 ffa8 	bl	80090d0 <HAL_TIM_OC_Init>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004186:	f000 fb5f 	bl	8004848 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800418a:	2108      	movs	r1, #8
 800418c:	4846      	ldr	r0, [pc, #280]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800418e:	f005 fb03 	bl	8009798 <HAL_TIM_OnePulse_Init>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8004198:	f000 fb56 	bl	8004848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800419c:	2320      	movs	r3, #32
 800419e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041a8:	4619      	mov	r1, r3
 80041aa:	483f      	ldr	r0, [pc, #252]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 80041ac:	f006 faf0 	bl	800a790 <HAL_TIMEx_MasterConfigSynchronization>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80041b6:	f000 fb47 	bl	8004848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80041ba:	2330      	movs	r3, #48	; 0x30
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041c2:	2300      	movs	r3, #0
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041c6:	2300      	movs	r3, #0
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041da:	2200      	movs	r2, #0
 80041dc:	4619      	mov	r1, r3
 80041de:	4832      	ldr	r0, [pc, #200]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 80041e0:	f005 fc3c 	bl	8009a5c <HAL_TIM_OC_ConfigChannel>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80041ea:	f000 fb2d 	bl	8004848 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0208 	orr.w	r2, r2, #8
 80041fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004202:	2204      	movs	r2, #4
 8004204:	4619      	mov	r1, r3
 8004206:	4828      	ldr	r0, [pc, #160]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004208:	f005 fc28 	bl	8009a5c <HAL_TIM_OC_ConfigChannel>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8004212:	f000 fb19 	bl	8004848 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800422a:	2208      	movs	r2, #8
 800422c:	4619      	mov	r1, r3
 800422e:	481e      	ldr	r0, [pc, #120]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004230:	f005 fc14 	bl	8009a5c <HAL_TIM_OC_ConfigChannel>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800423a:	f000 fb05 	bl	8004848 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800423e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004242:	220c      	movs	r2, #12
 8004244:	4619      	mov	r1, r3
 8004246:	4818      	ldr	r0, [pc, #96]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004248:	f005 fc08 	bl	8009a5c <HAL_TIM_OC_ConfigChannel>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004252:	f000 faf9 	bl	8004848 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004264:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800427a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800427e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004280:	2300      	movs	r3, #0
 8004282:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	4619      	mov	r1, r3
 8004288:	4807      	ldr	r0, [pc, #28]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800428a:	f006 fadf 	bl	800a84c <HAL_TIMEx_ConfigBreakDeadTime>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8004294:	f000 fad8 	bl	8004848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004298:	4803      	ldr	r0, [pc, #12]	; (80042a8 <MX_TIM1_Init+0x1c4>)
 800429a:	f001 fab7 	bl	800580c <HAL_TIM_MspPostInit>

}
 800429e:	bf00      	nop
 80042a0:	3758      	adds	r7, #88	; 0x58
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20001394 	.word	0x20001394
 80042ac:	40012c00 	.word	0x40012c00

080042b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b090      	sub	sp, #64	; 0x40
 80042b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	609a      	str	r2, [r3, #8]
 80042c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80042c4:	f107 031c 	add.w	r3, r7, #28
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	60da      	str	r2, [r3, #12]
 80042d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80042de:	1d3b      	adds	r3, r7, #4
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042ea:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <MX_TIM2_Init+0x128>)
 80042ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80042f2:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <MX_TIM2_Init+0x128>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f8:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <MX_TIM2_Init+0x128>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <MX_TIM2_Init+0x128>)
 8004300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <MX_TIM2_Init+0x128>)
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800430c:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <MX_TIM2_Init+0x128>)
 800430e:	2280      	movs	r2, #128	; 0x80
 8004310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004312:	4831      	ldr	r0, [pc, #196]	; (80043d8 <MX_TIM2_Init+0x128>)
 8004314:	f004 fe0c 	bl	8008f30 <HAL_TIM_Base_Init>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800431e:	f000 fa93 	bl	8004848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004326:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800432c:	4619      	mov	r1, r3
 800432e:	482a      	ldr	r0, [pc, #168]	; (80043d8 <MX_TIM2_Init+0x128>)
 8004330:	f005 fc80 	bl	8009c34 <HAL_TIM_ConfigClockSource>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800433a:	f000 fa85 	bl	8004848 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800433e:	4826      	ldr	r0, [pc, #152]	; (80043d8 <MX_TIM2_Init+0x128>)
 8004340:	f005 f824 	bl	800938c <HAL_TIM_IC_Init>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800434a:	f000 fa7d 	bl	8004848 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800434e:	2304      	movs	r3, #4
 8004350:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8004352:	2320      	movs	r3, #32
 8004354:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8004356:	f107 031c 	add.w	r3, r7, #28
 800435a:	4619      	mov	r1, r3
 800435c:	481e      	ldr	r0, [pc, #120]	; (80043d8 <MX_TIM2_Init+0x128>)
 800435e:	f005 fd2d 	bl	8009dbc <HAL_TIM_SlaveConfigSynchro>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8004368:	f000 fa6e 	bl	8004848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004374:	f107 0314 	add.w	r3, r7, #20
 8004378:	4619      	mov	r1, r3
 800437a:	4817      	ldr	r0, [pc, #92]	; (80043d8 <MX_TIM2_Init+0x128>)
 800437c:	f006 fa08 	bl	800a790 <HAL_TIMEx_MasterConfigSynchronization>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004386:	f000 fa5f 	bl	8004848 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800438e:	2301      	movs	r3, #1
 8004390:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800439a:	1d3b      	adds	r3, r7, #4
 800439c:	2200      	movs	r2, #0
 800439e:	4619      	mov	r1, r3
 80043a0:	480d      	ldr	r0, [pc, #52]	; (80043d8 <MX_TIM2_Init+0x128>)
 80043a2:	f005 fbb3 	bl	8009b0c <HAL_TIM_IC_ConfigChannel>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80043ac:	f000 fa4c 	bl	8004848 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80043b0:	2302      	movs	r3, #2
 80043b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80043b4:	2302      	movs	r3, #2
 80043b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80043b8:	1d3b      	adds	r3, r7, #4
 80043ba:	2204      	movs	r2, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4806      	ldr	r0, [pc, #24]	; (80043d8 <MX_TIM2_Init+0x128>)
 80043c0:	f005 fba4 	bl	8009b0c <HAL_TIM_IC_ConfigChannel>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80043ca:	f000 fa3d 	bl	8004848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80043ce:	bf00      	nop
 80043d0:	3740      	adds	r7, #64	; 0x40
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	200013dc 	.word	0x200013dc

080043dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b092      	sub	sp, #72	; 0x48
 80043e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80043f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	609a      	str	r2, [r3, #8]
 80043fc:	60da      	str	r2, [r3, #12]
 80043fe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004400:	f107 031c 	add.w	r3, r7, #28
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800440a:	463b      	mov	r3, r7
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	611a      	str	r2, [r3, #16]
 8004418:	615a      	str	r2, [r3, #20]
 800441a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800441c:	4b37      	ldr	r3, [pc, #220]	; (80044fc <MX_TIM3_Init+0x120>)
 800441e:	4a38      	ldr	r2, [pc, #224]	; (8004500 <MX_TIM3_Init+0x124>)
 8004420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004422:	4b36      	ldr	r3, [pc, #216]	; (80044fc <MX_TIM3_Init+0x120>)
 8004424:	2200      	movs	r2, #0
 8004426:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004428:	4b34      	ldr	r3, [pc, #208]	; (80044fc <MX_TIM3_Init+0x120>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 800442e:	4b33      	ldr	r3, [pc, #204]	; (80044fc <MX_TIM3_Init+0x120>)
 8004430:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004436:	4b31      	ldr	r3, [pc, #196]	; (80044fc <MX_TIM3_Init+0x120>)
 8004438:	2200      	movs	r2, #0
 800443a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800443c:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <MX_TIM3_Init+0x120>)
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004442:	482e      	ldr	r0, [pc, #184]	; (80044fc <MX_TIM3_Init+0x120>)
 8004444:	f004 fd74 	bl	8008f30 <HAL_TIM_Base_Init>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800444e:	f000 f9fb 	bl	8004848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004458:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800445c:	4619      	mov	r1, r3
 800445e:	4827      	ldr	r0, [pc, #156]	; (80044fc <MX_TIM3_Init+0x120>)
 8004460:	f005 fbe8 	bl	8009c34 <HAL_TIM_ConfigClockSource>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800446a:	f000 f9ed 	bl	8004848 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800446e:	4823      	ldr	r0, [pc, #140]	; (80044fc <MX_TIM3_Init+0x120>)
 8004470:	f004 fe2e 	bl	80090d0 <HAL_TIM_OC_Init>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800447a:	f000 f9e5 	bl	8004848 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800447e:	2108      	movs	r1, #8
 8004480:	481e      	ldr	r0, [pc, #120]	; (80044fc <MX_TIM3_Init+0x120>)
 8004482:	f005 f989 	bl	8009798 <HAL_TIM_OnePulse_Init>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800448c:	f000 f9dc 	bl	8004848 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004490:	2306      	movs	r3, #6
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004494:	2300      	movs	r3, #0
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800449c:	4619      	mov	r1, r3
 800449e:	4817      	ldr	r0, [pc, #92]	; (80044fc <MX_TIM3_Init+0x120>)
 80044a0:	f005 fc8c 	bl	8009dbc <HAL_TIM_SlaveConfigSynchro>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80044aa:	f000 f9cd 	bl	8004848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80044ae:	2330      	movs	r3, #48	; 0x30
 80044b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044b6:	f107 031c 	add.w	r3, r7, #28
 80044ba:	4619      	mov	r1, r3
 80044bc:	480f      	ldr	r0, [pc, #60]	; (80044fc <MX_TIM3_Init+0x120>)
 80044be:	f006 f967 	bl	800a790 <HAL_TIMEx_MasterConfigSynchronization>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80044c8:	f000 f9be 	bl	8004848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80044cc:	2310      	movs	r3, #16
 80044ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044dc:	463b      	mov	r3, r7
 80044de:	2200      	movs	r2, #0
 80044e0:	4619      	mov	r1, r3
 80044e2:	4806      	ldr	r0, [pc, #24]	; (80044fc <MX_TIM3_Init+0x120>)
 80044e4:	f005 faba 	bl	8009a5c <HAL_TIM_OC_ConfigChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80044ee:	f000 f9ab 	bl	8004848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80044f2:	bf00      	nop
 80044f4:	3748      	adds	r7, #72	; 0x48
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20001304 	.word	0x20001304
 8004500:	40000400 	.word	0x40000400

08004504 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800450a:	f107 0308 	add.w	r3, r7, #8
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	605a      	str	r2, [r3, #4]
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004518:	463b      	mov	r3, r7
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004520:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <MX_TIM4_Init+0x94>)
 8004522:	4a1e      	ldr	r2, [pc, #120]	; (800459c <MX_TIM4_Init+0x98>)
 8004524:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 8004526:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <MX_TIM4_Init+0x94>)
 8004528:	2206      	movs	r2, #6
 800452a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800452c:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <MX_TIM4_Init+0x94>)
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004532:	4b19      	ldr	r3, [pc, #100]	; (8004598 <MX_TIM4_Init+0x94>)
 8004534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004538:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800453a:	4b17      	ldr	r3, [pc, #92]	; (8004598 <MX_TIM4_Init+0x94>)
 800453c:	2200      	movs	r2, #0
 800453e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004540:	4b15      	ldr	r3, [pc, #84]	; (8004598 <MX_TIM4_Init+0x94>)
 8004542:	2280      	movs	r2, #128	; 0x80
 8004544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004546:	4814      	ldr	r0, [pc, #80]	; (8004598 <MX_TIM4_Init+0x94>)
 8004548:	f004 fcf2 	bl	8008f30 <HAL_TIM_Base_Init>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004552:	f000 f979 	bl	8004848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800455a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800455c:	f107 0308 	add.w	r3, r7, #8
 8004560:	4619      	mov	r1, r3
 8004562:	480d      	ldr	r0, [pc, #52]	; (8004598 <MX_TIM4_Init+0x94>)
 8004564:	f005 fb66 	bl	8009c34 <HAL_TIM_ConfigClockSource>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800456e:	f000 f96b 	bl	8004848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004572:	2320      	movs	r3, #32
 8004574:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800457a:	463b      	mov	r3, r7
 800457c:	4619      	mov	r1, r3
 800457e:	4806      	ldr	r0, [pc, #24]	; (8004598 <MX_TIM4_Init+0x94>)
 8004580:	f006 f906 	bl	800a790 <HAL_TIMEx_MasterConfigSynchronization>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800458a:	f000 f95d 	bl	8004848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800458e:	bf00      	nop
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20001254 	.word	0x20001254
 800459c:	40000800 	.word	0x40000800

080045a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <MX_USART1_UART_Init+0x50>)
 80045a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045c6:	220c      	movs	r2, #12
 80045c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045d6:	4805      	ldr	r0, [pc, #20]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045d8:	f006 f99b 	bl	800a912 <HAL_UART_Init>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045e2:	f000 f931 	bl	8004848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2000134c 	.word	0x2000134c
 80045f0:	40013800 	.word	0x40013800

080045f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fa:	f107 0310 	add.w	r3, r7, #16
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <MX_GPIO_Init+0xb8>)
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	4a27      	ldr	r2, [pc, #156]	; (80046ac <MX_GPIO_Init+0xb8>)
 800460e:	f043 0320 	orr.w	r3, r3, #32
 8004612:	6193      	str	r3, [r2, #24]
 8004614:	4b25      	ldr	r3, [pc, #148]	; (80046ac <MX_GPIO_Init+0xb8>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004620:	4b22      	ldr	r3, [pc, #136]	; (80046ac <MX_GPIO_Init+0xb8>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	4a21      	ldr	r2, [pc, #132]	; (80046ac <MX_GPIO_Init+0xb8>)
 8004626:	f043 0304 	orr.w	r3, r3, #4
 800462a:	6193      	str	r3, [r2, #24]
 800462c:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <MX_GPIO_Init+0xb8>)
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004638:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <MX_GPIO_Init+0xb8>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <MX_GPIO_Init+0xb8>)
 800463e:	f043 0308 	orr.w	r3, r3, #8
 8004642:	6193      	str	r3, [r2, #24]
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <MX_GPIO_Init+0xb8>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP_Pin|LED_Pin|nRst_Pin, GPIO_PIN_RESET);
 8004650:	2200      	movs	r2, #0
 8004652:	f241 0184 	movw	r1, #4228	; 0x1084
 8004656:	4816      	ldr	r0, [pc, #88]	; (80046b0 <MX_GPIO_Init+0xbc>)
 8004658:	f003 f910 	bl	800787c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 800465c:	2200      	movs	r2, #0
 800465e:	f241 011e 	movw	r1, #4126	; 0x101e
 8004662:	4814      	ldr	r0, [pc, #80]	; (80046b4 <MX_GPIO_Init+0xc0>)
 8004664:	f003 f90a 	bl	800787c <HAL_GPIO_WritePin>
                          |Z4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TP_Pin LED_Pin nRst_Pin */
  GPIO_InitStruct.Pin = TP_Pin|LED_Pin|nRst_Pin;
 8004668:	f241 0384 	movw	r3, #4228	; 0x1084
 800466c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800466e:	2301      	movs	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004676:	2302      	movs	r3, #2
 8004678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467a:	f107 0310 	add.w	r3, r7, #16
 800467e:	4619      	mov	r1, r3
 8004680:	480b      	ldr	r0, [pc, #44]	; (80046b0 <MX_GPIO_Init+0xbc>)
 8004682:	f002 ff77 	bl	8007574 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z1_Pin Z2_Pin SCSN_Pin Z3_Pin
                           Z4_Pin */
  GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 8004686:	f241 031e 	movw	r3, #4126	; 0x101e
 800468a:	613b      	str	r3, [r7, #16]
                          |Z4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800468c:	2301      	movs	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004694:	2302      	movs	r3, #2
 8004696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	4619      	mov	r1, r3
 800469e:	4805      	ldr	r0, [pc, #20]	; (80046b4 <MX_GPIO_Init+0xc0>)
 80046a0:	f002 ff68 	bl	8007574 <HAL_GPIO_Init>

}
 80046a4:	bf00      	nop
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40010800 	.word	0x40010800
 80046b4:	40010c00 	.word	0x40010c00

080046b8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim) {
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	if (runFlag > 0) {								// Разрешено измерение ?
 80046c0:	4b56      	ldr	r3, [pc, #344]	; (800481c <HAL_TIM_IC_CaptureCallback+0x164>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80a3 	beq.w	8004810 <HAL_TIM_IC_CaptureCallback+0x158>
		if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	f040 809d 	bne.w	8004810 <HAL_TIM_IC_CaptureCallback+0x158>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7f1b      	ldrb	r3, [r3, #28]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_IC_CaptureCallback+0x30>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	7f1b      	ldrb	r3, [r3, #28]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	f040 8094 	bne.w	8004810 <HAL_TIM_IC_CaptureCallback+0x158>
			if ((runFlag < COUNT_FRONT) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) ) {  // Ждем фронт первого импульса, дальше обрабатываем все импульсы.
 80046e8:	4b4c      	ldr	r3, [pc, #304]	; (800481c <HAL_TIM_IC_CaptureCallback+0x164>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b1b      	cmp	r3, #27
 80046ee:	d904      	bls.n	80046fa <HAL_TIM_IC_CaptureCallback+0x42>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	7f1b      	ldrb	r3, [r3, #28]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f040 808b 	bne.w	8004810 <HAL_TIM_IC_CaptureCallback+0x158>
				//LED_PULSE
				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ) {  // Активен фронт
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	7f1b      	ldrb	r3, [r3, #28]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d10b      	bne.n	800471a <HAL_TIM_IC_CaptureCallback+0x62>
					front_sum = front_sum + (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1) & 0x0FFFF);
 8004702:	2100      	movs	r1, #0
 8004704:	4846      	ldr	r0, [pc, #280]	; (8004820 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004706:	f005 fb9b 	bl	8009e40 <HAL_TIM_ReadCapturedValue>
 800470a:	4603      	mov	r3, r0
 800470c:	b29a      	uxth	r2, r3
 800470e:	4b45      	ldr	r3, [pc, #276]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4413      	add	r3, r2
 8004714:	4a43      	ldr	r2, [pc, #268]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e00a      	b.n	8004730 <HAL_TIM_IC_CaptureCallback+0x78>
				} else {   // Активен спад
					front_sum = front_sum + (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2) & 0x0FFFF);
 800471a:	2104      	movs	r1, #4
 800471c:	4840      	ldr	r0, [pc, #256]	; (8004820 <HAL_TIM_IC_CaptureCallback+0x168>)
 800471e:	f005 fb8f 	bl	8009e40 <HAL_TIM_ReadCapturedValue>
 8004722:	4603      	mov	r3, r0
 8004724:	b29a      	uxth	r2, r3
 8004726:	4b3f      	ldr	r3, [pc, #252]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4413      	add	r3, r2
 800472c:	4a3d      	ldr	r2, [pc, #244]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800472e:	6013      	str	r3, [r2, #0]
				}
				runFlag--;
 8004730:	4b3a      	ldr	r3, [pc, #232]	; (800481c <HAL_TIM_IC_CaptureCallback+0x164>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3b01      	subs	r3, #1
 8004736:	4a39      	ldr	r2, [pc, #228]	; (800481c <HAL_TIM_IC_CaptureCallback+0x164>)
 8004738:	6013      	str	r3, [r2, #0]
				if (runFlag == 0) {  // Измерения закончены ?
 800473a:	4b38      	ldr	r3, [pc, #224]	; (800481c <HAL_TIM_IC_CaptureCallback+0x164>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d166      	bne.n	8004810 <HAL_TIM_IC_CaptureCallback+0x158>
					//LED_PULSE
					STOP_CAPTURE  // Таймер больше не нужен, выключаем
 8004742:	2100      	movs	r1, #0
 8004744:	4836      	ldr	r0, [pc, #216]	; (8004820 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004746:	f004 ff7f 	bl	8009648 <HAL_TIM_IC_Stop_IT>
 800474a:	2104      	movs	r1, #4
 800474c:	4834      	ldr	r0, [pc, #208]	; (8004820 <HAL_TIM_IC_CaptureCallback+0x168>)
 800474e:	f004 ff7b 	bl	8009648 <HAL_TIM_IC_Stop_IT>
					front_sum = front_sum / COUNT_FRONT - (TIM1_PERIOD * (COUNT_FRONT - 1) / 2);  // Расчитываем задержку от средины импульсов
 8004752:	4b34      	ldr	r3, [pc, #208]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	4a33      	ldr	r2, [pc, #204]	; (8004828 <HAL_TIM_IC_CaptureCallback+0x170>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 8004762:	3b30      	subs	r3, #48	; 0x30
 8004764:	4a2f      	ldr	r2, [pc, #188]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004766:	6013      	str	r3, [r2, #0]
					if (front_sum > 1600) {		// Ошибка измерения.
 8004768:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004770:	d903      	bls.n	800477a <HAL_TIM_IC_CaptureCallback+0xc2>
						front_sum = 1600;		// Значение необходимое для калибровки.
 8004772:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004774:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004778:	601a      	str	r2, [r3, #0]
					}
					/* Turn off all multiplexer */
					GPIOB->ODR |= ((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 800477a:	4b2c      	ldr	r3, [pc, #176]	; (800482c <HAL_TIM_IC_CaptureCallback+0x174>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4a2b      	ldr	r2, [pc, #172]	; (800482c <HAL_TIM_IC_CaptureCallback+0x174>)
 8004780:	f043 031e 	orr.w	r3, r3, #30
 8004784:	60d3      	str	r3, [r2, #12]
					switch (currentMode) {
 8004786:	4b2a      	ldr	r3, [pc, #168]	; (8004830 <HAL_TIM_IC_CaptureCallback+0x178>)
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	3b01      	subs	r3, #1
 800478c:	2b03      	cmp	r3, #3
 800478e:	d840      	bhi.n	8004812 <HAL_TIM_IC_CaptureCallback+0x15a>
 8004790:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047a9 	.word	0x080047a9
 800479c:	080047c3 	.word	0x080047c3
 80047a0:	080047dd 	.word	0x080047dd
 80047a4:	080047f7 	.word	0x080047f7
						case 1: { // Z1 > Z3, Z13
							resul_arrayY1[measCount] = front_sum;
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a21      	ldr	r2, [pc, #132]	; (8004834 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80047ae:	8812      	ldrh	r2, [r2, #0]
 80047b0:	4614      	mov	r4, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fc fa6e 	bl	8000c94 <__aeabi_ui2f>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <HAL_TIM_IC_CaptureCallback+0x180>)
 80047bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80047c0:	e027      	b.n	8004812 <HAL_TIM_IC_CaptureCallback+0x15a>
						}
						case 2: { // Z3 > Z1, Z31
							resul_arrayY2[measCount] = front_sum;
 80047c2:	4b18      	ldr	r3, [pc, #96]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80047c8:	8812      	ldrh	r2, [r2, #0]
 80047ca:	4614      	mov	r4, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fc fa61 	bl	8000c94 <__aeabi_ui2f>
 80047d2:	4603      	mov	r3, r0
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_TIM_IC_CaptureCallback+0x184>)
 80047d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80047da:	e01a      	b.n	8004812 <HAL_TIM_IC_CaptureCallback+0x15a>
						}
						case 3: { // Z2 > Z4 Z24
							resul_arrayX1[measCount] = front_sum;
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a14      	ldr	r2, [pc, #80]	; (8004834 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80047e2:	8812      	ldrh	r2, [r2, #0]
 80047e4:	4614      	mov	r4, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fc fa54 	bl	8000c94 <__aeabi_ui2f>
 80047ec:	4603      	mov	r3, r0
 80047ee:	4a14      	ldr	r2, [pc, #80]	; (8004840 <HAL_TIM_IC_CaptureCallback+0x188>)
 80047f0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80047f4:	e00d      	b.n	8004812 <HAL_TIM_IC_CaptureCallback+0x15a>
						}
						case 4: { // Z4 > Z2 Z42
							resul_arrayX2[measCount] = front_sum;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a0e      	ldr	r2, [pc, #56]	; (8004834 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80047fc:	8812      	ldrh	r2, [r2, #0]
 80047fe:	4614      	mov	r4, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f7fc fa47 	bl	8000c94 <__aeabi_ui2f>
 8004806:	4603      	mov	r3, r0
 8004808:	4a0e      	ldr	r2, [pc, #56]	; (8004844 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800480a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 800480e:	e000      	b.n	8004812 <HAL_TIM_IC_CaptureCallback+0x15a>
						}
					}
				}
 8004810:	bf00      	nop
			}
		}
	}
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bd90      	pop	{r4, r7, pc}
 800481a:	bf00      	nop
 800481c:	20000648 	.word	0x20000648
 8004820:	200013dc 	.word	0x200013dc
 8004824:	20000634 	.word	0x20000634
 8004828:	24924925 	.word	0x24924925
 800482c:	40010c00 	.word	0x40010c00
 8004830:	2000098e 	.word	0x2000098e
 8004834:	200005c8 	.word	0x200005c8
 8004838:	2000065c 	.word	0x2000065c
 800483c:	20000b38 	.word	0x20000b38
 8004840:	200007fc 	.word	0x200007fc
 8004844:	20000998 	.word	0x20000998

08004848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800484c:	b672      	cpsid	i
}
 800484e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004850:	e7fe      	b.n	8004850 <Error_Handler+0x8>
	...

08004854 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	461a      	mov	r2, r3
 8004862:	4623      	mov	r3, r4
 8004864:	71fb      	strb	r3, [r7, #7]
 8004866:	4603      	mov	r3, r0
 8004868:	71bb      	strb	r3, [r7, #6]
 800486a:	460b      	mov	r3, r1
 800486c:	80bb      	strh	r3, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d902      	bls.n	800487e <socket+0x2a>
 8004878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800487c:	e0f2      	b.n	8004a64 <socket+0x210>
	switch(protocol)
 800487e:	79bb      	ldrb	r3, [r7, #6]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d005      	beq.n	8004890 <socket+0x3c>
 8004884:	2b00      	cmp	r3, #0
 8004886:	dd11      	ble.n	80048ac <socket+0x58>
 8004888:	3b02      	subs	r3, #2
 800488a:	2b02      	cmp	r3, #2
 800488c:	d80e      	bhi.n	80048ac <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800488e:	e011      	b.n	80048b4 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8004890:	f107 030c 	add.w	r3, r7, #12
 8004894:	2204      	movs	r2, #4
 8004896:	4619      	mov	r1, r3
 8004898:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800489c:	f001 fe52 	bl	8006544 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d105      	bne.n	80048b2 <socket+0x5e>
 80048a6:	f06f 0302 	mvn.w	r3, #2
 80048aa:	e0db      	b.n	8004a64 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80048ac:	f06f 0304 	mvn.w	r3, #4
 80048b0:	e0d8      	b.n	8004a64 <socket+0x210>
	    break;
 80048b2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <socket+0x70>
 80048be:	f06f 0305 	mvn.w	r3, #5
 80048c2:	e0cf      	b.n	8004a64 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d025      	beq.n	8004916 <socket+0xc2>
	{
   	switch(protocol)
 80048ca:	79bb      	ldrb	r3, [r7, #6]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d002      	beq.n	80048d6 <socket+0x82>
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d008      	beq.n	80048e6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80048d4:	e024      	b.n	8004920 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d11c      	bne.n	800491a <socket+0xc6>
 80048e0:	f06f 0305 	mvn.w	r3, #5
 80048e4:	e0be      	b.n	8004a64 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80048f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	db02      	blt.n	80048fe <socket+0xaa>
 80048f8:	f06f 0305 	mvn.w	r3, #5
 80048fc:	e0b2      	b.n	8004a64 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8004908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800490c:	2b00      	cmp	r3, #0
 800490e:	db06      	blt.n	800491e <socket+0xca>
 8004910:	f06f 0305 	mvn.w	r3, #5
 8004914:	e0a6      	b.n	8004a64 <socket+0x210>
   	}
   }
 8004916:	bf00      	nop
 8004918:	e002      	b.n	8004920 <socket+0xcc>
   	      break;
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <socket+0xcc>
   	      break;
 800491e:	bf00      	nop
	close(sn);
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f8ac 	bl	8004a80 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	3301      	adds	r3, #1
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4618      	mov	r0, r3
 8004932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004936:	f023 030f 	bic.w	r3, r3, #15
 800493a:	b25a      	sxtb	r2, r3
 800493c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004940:	4313      	orrs	r3, r2
 8004942:	b25b      	sxtb	r3, r3
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4619      	mov	r1, r3
 8004948:	f001 fdae 	bl	80064a8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800494c:	88bb      	ldrh	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d110      	bne.n	8004974 <socket+0x120>
	{
	   port = sock_any_port++;
 8004952:	4b46      	ldr	r3, [pc, #280]	; (8004a6c <socket+0x218>)
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	b291      	uxth	r1, r2
 800495a:	4a44      	ldr	r2, [pc, #272]	; (8004a6c <socket+0x218>)
 800495c:	8011      	strh	r1, [r2, #0]
 800495e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004960:	4b42      	ldr	r3, [pc, #264]	; (8004a6c <socket+0x218>)
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004968:	4293      	cmp	r3, r2
 800496a:	d103      	bne.n	8004974 <socket+0x120>
 800496c:	4b3f      	ldr	r3, [pc, #252]	; (8004a6c <socket+0x218>)
 800496e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004972:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3301      	adds	r3, #1
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004980:	461a      	mov	r2, r3
 8004982:	88bb      	ldrh	r3, [r7, #4]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	b29b      	uxth	r3, r3
 8004988:	b2db      	uxtb	r3, r3
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f001 fd8b 	bl	80064a8 <WIZCHIP_WRITE>
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	3301      	adds	r3, #1
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499e:	461a      	mov	r2, r3
 80049a0:	88bb      	ldrh	r3, [r7, #4]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f001 fd7e 	bl	80064a8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	3301      	adds	r3, #1
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80049b8:	2101      	movs	r1, #1
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 fd74 	bl	80064a8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80049c0:	bf00      	nop
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	3301      	adds	r3, #1
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 fd1e 	bl	8006410 <WIZCHIP_READ>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f3      	bne.n	80049c2 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	2201      	movs	r2, #1
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	b21b      	sxth	r3, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	b21a      	sxth	r2, r3
 80049e8:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <socket+0x21c>)
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b21b      	sxth	r3, r3
 80049ee:	4013      	ands	r3, r2
 80049f0:	b21b      	sxth	r3, r3
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <socket+0x21c>)
 80049f6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 0201 	and.w	r2, r3, #1
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	b21a      	sxth	r2, r3
 8004a06:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <socket+0x21c>)
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b21b      	sxth	r3, r3
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	b21b      	sxth	r3, r3
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <socket+0x21c>)
 8004a14:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	b21b      	sxth	r3, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	b21a      	sxth	r2, r3
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <socket+0x220>)
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b21b      	sxth	r3, r3
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	b21b      	sxth	r3, r3
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <socket+0x220>)
 8004a32:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <socket+0x224>)
 8004a38:	2100      	movs	r1, #0
 8004a3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	4a0e      	ldr	r2, [pc, #56]	; (8004a7c <socket+0x228>)
 8004a42:	2100      	movs	r1, #0
 8004a44:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004a46:	bf00      	nop
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 fcdb 	bl	8006410 <WIZCHIP_READ>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f3      	beq.n	8004a48 <socket+0x1f4>
   return (int8_t)sn;
 8004a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}
 8004a6c:	20000136 	.word	0x20000136
 8004a70:	2000055a 	.word	0x2000055a
 8004a74:	2000055c 	.word	0x2000055c
 8004a78:	20000560 	.word	0x20000560
 8004a7c:	20000570 	.word	0x20000570

08004a80 <close>:

int8_t close(uint8_t sn)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d902      	bls.n	8004a96 <close+0x16>
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a94:	e055      	b.n	8004b42 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 fcff 	bl	80064a8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004aaa:	bf00      	nop
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 fca9 	bl	8006410 <WIZCHIP_READ>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f3      	bne.n	8004aac <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	3301      	adds	r3, #1
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004ad0:	211f      	movs	r1, #31
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fce8 	bl	80064a8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	2201      	movs	r2, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	b21b      	sxth	r3, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	b21a      	sxth	r2, r3
 8004ae6:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <close+0xcc>)
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b21b      	sxth	r3, r3
 8004aec:	4013      	ands	r3, r2
 8004aee:	b21b      	sxth	r3, r3
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <close+0xcc>)
 8004af4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2201      	movs	r2, #1
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	b21b      	sxth	r3, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	b21a      	sxth	r2, r3
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <close+0xd0>)
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b21b      	sxth	r3, r3
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b21b      	sxth	r3, r3
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <close+0xd0>)
 8004b12:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <close+0xd4>)
 8004b18:	2100      	movs	r1, #0
 8004b1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <close+0xd8>)
 8004b22:	2100      	movs	r1, #0
 8004b24:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004b26:	bf00      	nop
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 fc6b 	bl	8006410 <WIZCHIP_READ>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f3      	bne.n	8004b28 <close+0xa8>
	return SOCK_OK;
 8004b40:	2301      	movs	r3, #1
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2000055a 	.word	0x2000055a
 8004b50:	2000055c 	.word	0x2000055c
 8004b54:	20000560 	.word	0x20000560
 8004b58:	20000570 	.word	0x20000570

08004b5c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	71fb      	strb	r3, [r7, #7]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d902      	bls.n	8004b78 <connect+0x1c>
 8004b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b76:	e0c6      	b.n	8004d06 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 fc45 	bl	8006410 <WIZCHIP_READ>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d002      	beq.n	8004b96 <connect+0x3a>
 8004b90:	f06f 0304 	mvn.w	r3, #4
 8004b94:	e0b7      	b.n	8004d06 <connect+0x1aa>
   CHECK_SOCKINIT();
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 fc34 	bl	8006410 <WIZCHIP_READ>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b13      	cmp	r3, #19
 8004bac:	d002      	beq.n	8004bb4 <connect+0x58>
 8004bae:	f06f 0302 	mvn.w	r3, #2
 8004bb2:	e0a8      	b.n	8004d06 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	3201      	adds	r2, #1
 8004bc2:	7812      	ldrb	r2, [r2, #0]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	3202      	adds	r2, #2
 8004bd0:	7812      	ldrb	r2, [r2, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	3203      	adds	r2, #3
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	4413      	add	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bea:	d002      	beq.n	8004bf2 <connect+0x96>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <connect+0x9c>
 8004bf2:	f06f 030b 	mvn.w	r3, #11
 8004bf6:	e086      	b.n	8004d06 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004bf8:	88bb      	ldrh	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <connect+0xa8>
 8004bfe:	f06f 030a 	mvn.w	r3, #10
 8004c02:	e080      	b.n	8004d06 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	3301      	adds	r3, #1
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004c10:	2204      	movs	r2, #4
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 fcf5 	bl	8006604 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	3301      	adds	r3, #1
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c26:	461a      	mov	r2, r3
 8004c28:	88bb      	ldrh	r3, [r7, #4]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f001 fc38 	bl	80064a8 <WIZCHIP_WRITE>
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004c44:	461a      	mov	r2, r3
 8004c46:	88bb      	ldrh	r3, [r7, #4]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f001 fc2b 	bl	80064a8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	3301      	adds	r3, #1
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c5e:	2104      	movs	r1, #4
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 fc21 	bl	80064a8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004c66:	bf00      	nop
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fbcb 	bl	8006410 <WIZCHIP_READ>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f3      	bne.n	8004c68 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8004c80:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <connect+0x1b4>)
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	fa42 f303 	asr.w	r3, r2, r3
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02b      	beq.n	8004cec <connect+0x190>
 8004c94:	2300      	movs	r3, #0
 8004c96:	e036      	b.n	8004d06 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f001 fbb3 	bl	8006410 <WIZCHIP_READ>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00c      	beq.n	8004cce <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	3301      	adds	r3, #1
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004cc0:	2108      	movs	r1, #8
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f001 fbf0 	bl	80064a8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8004cc8:	f06f 030c 	mvn.w	r3, #12
 8004ccc:	e01b      	b.n	8004d06 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 fb98 	bl	8006410 <WIZCHIP_READ>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8004ce6:	f06f 0303 	mvn.w	r3, #3
 8004cea:	e00c      	b.n	8004d06 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 fb89 	bl	8006410 <WIZCHIP_READ>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b17      	cmp	r3, #23
 8004d02:	d1c9      	bne.n	8004c98 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8004d04:	2301      	movs	r3, #1
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	2000055a 	.word	0x2000055a

08004d14 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	71fb      	strb	r3, [r7, #7]
 8004d20:	4613      	mov	r3, r2
 8004d22:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d902      	bls.n	8004d38 <send+0x24>
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d36:	e0de      	b.n	8004ef6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4618      	mov	r0, r3
 8004d42:	f001 fb65 	bl	8006410 <WIZCHIP_READ>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d002      	beq.n	8004d56 <send+0x42>
 8004d50:	f06f 0304 	mvn.w	r3, #4
 8004d54:	e0cf      	b.n	8004ef6 <send+0x1e2>
   CHECK_SOCKDATA();
 8004d56:	88bb      	ldrh	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <send+0x4e>
 8004d5c:	f06f 030d 	mvn.w	r3, #13
 8004d60:	e0c9      	b.n	8004ef6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	3301      	adds	r3, #1
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f001 fb4e 	bl	8006410 <WIZCHIP_READ>
 8004d74:	4603      	mov	r3, r0
 8004d76:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b17      	cmp	r3, #23
 8004d7c:	d005      	beq.n	8004d8a <send+0x76>
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b1c      	cmp	r3, #28
 8004d82:	d002      	beq.n	8004d8a <send+0x76>
 8004d84:	f06f 0306 	mvn.w	r3, #6
 8004d88:	e0b5      	b.n	8004ef6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8004d8a:	4b5d      	ldr	r3, [pc, #372]	; (8004f00 <send+0x1ec>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	fa42 f303 	asr.w	r3, r2, r3
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d039      	beq.n	8004e12 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	3301      	adds	r3, #1
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004daa:	4618      	mov	r0, r3
 8004dac:	f001 fb30 	bl	8006410 <WIZCHIP_READ>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d019      	beq.n	8004df6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004dce:	2110      	movs	r1, #16
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 fb69 	bl	80064a8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	b21b      	sxth	r3, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	b21a      	sxth	r2, r3
 8004de4:	4b46      	ldr	r3, [pc, #280]	; (8004f00 <send+0x1ec>)
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b21b      	sxth	r3, r3
 8004dea:	4013      	ands	r3, r2
 8004dec:	b21b      	sxth	r3, r3
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	4b43      	ldr	r3, [pc, #268]	; (8004f00 <send+0x1ec>)
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	e00d      	b.n	8004e12 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d006      	beq.n	8004e0e <send+0xfa>
      {
         close(sn);
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fe3c 	bl	8004a80 <close>
         return SOCKERR_TIMEOUT;
 8004e08:	f06f 030c 	mvn.w	r3, #12
 8004e0c:	e073      	b.n	8004ef6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e071      	b.n	8004ef6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	3301      	adds	r3, #1
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 faf6 	bl	8006410 <WIZCHIP_READ>
 8004e24:	4603      	mov	r3, r0
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	029b      	lsls	r3, r3, #10
 8004e2a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004e2c:	88ba      	ldrh	r2, [r7, #4]
 8004e2e:	89bb      	ldrh	r3, [r7, #12]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d901      	bls.n	8004e38 <send+0x124>
 8004e34:	89bb      	ldrh	r3, [r7, #12]
 8004e36:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 fc42 	bl	80066c4 <getSn_TX_FSR>
 8004e40:	4603      	mov	r3, r0
 8004e42:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	3301      	adds	r3, #1
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 fadd 	bl	8006410 <WIZCHIP_READ>
 8004e56:	4603      	mov	r3, r0
 8004e58:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b17      	cmp	r3, #23
 8004e5e:	d009      	beq.n	8004e74 <send+0x160>
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b1c      	cmp	r3, #28
 8004e64:	d006      	beq.n	8004e74 <send+0x160>
      {
         close(sn);
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fe09 	bl	8004a80 <close>
         return SOCKERR_SOCKSTATUS;
 8004e6e:	f06f 0306 	mvn.w	r3, #6
 8004e72:	e040      	b.n	8004ef6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004e74:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <send+0x1f0>)
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	fa42 f303 	asr.w	r3, r2, r3
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <send+0x180>
 8004e88:	88ba      	ldrh	r2, [r7, #4]
 8004e8a:	89bb      	ldrh	r3, [r7, #12]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d901      	bls.n	8004e94 <send+0x180>
 8004e90:	2300      	movs	r3, #0
 8004e92:	e030      	b.n	8004ef6 <send+0x1e2>
      if(len <= freesize) break;
 8004e94:	88ba      	ldrh	r2, [r7, #4]
 8004e96:	89bb      	ldrh	r3, [r7, #12]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d900      	bls.n	8004e9e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8004e9c:	e7cc      	b.n	8004e38 <send+0x124>
      if(len <= freesize) break;
 8004e9e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004ea0:	88ba      	ldrh	r2, [r7, #4]
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 fca2 	bl	80067f0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004eb8:	2120      	movs	r1, #32
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 faf4 	bl	80064a8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004ec0:	bf00      	nop
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 fa9e 	bl	8006410 <WIZCHIP_READ>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f3      	bne.n	8004ec2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	2201      	movs	r2, #1
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	b21a      	sxth	r2, r3
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <send+0x1ec>)
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b21b      	sxth	r3, r3
 8004eea:	4313      	orrs	r3, r2
 8004eec:	b21b      	sxth	r3, r3
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <send+0x1ec>)
 8004ef2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004ef4:	88bb      	ldrh	r3, [r7, #4]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	2000055c 	.word	0x2000055c
 8004f04:	2000055a 	.word	0x2000055a

08004f08 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	4603      	mov	r3, r0
 8004f14:	73fb      	strb	r3, [r7, #15]
 8004f16:	4613      	mov	r3, r2
 8004f18:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d902      	bls.n	8004f2e <sendto+0x26>
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f2c:	e11b      	b.n	8005166 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	3301      	adds	r3, #1
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 fa6a 	bl	8006410 <WIZCHIP_READ>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	3b02      	subs	r3, #2
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d902      	bls.n	8004f4e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004f48:	f06f 0304 	mvn.w	r3, #4
 8004f4c:	e10b      	b.n	8005166 <sendto+0x25e>
         break;
 8004f4e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004f50:	89bb      	ldrh	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <sendto+0x54>
 8004f56:	f06f 030d 	mvn.w	r3, #13
 8004f5a:	e104      	b.n	8005166 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	3201      	adds	r2, #1
 8004f6a:	7812      	ldrb	r2, [r2, #0]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	3202      	adds	r2, #2
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	3203      	adds	r2, #3
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	4413      	add	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10e      	bne.n	8004fb0 <sendto+0xa8>
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	3301      	adds	r3, #1
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 fa38 	bl	8006410 <WIZCHIP_READ>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d002      	beq.n	8004fb0 <sendto+0xa8>
 8004faa:	f06f 030b 	mvn.w	r3, #11
 8004fae:	e0da      	b.n	8005166 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8004fb0:	8c3b      	ldrh	r3, [r7, #32]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10e      	bne.n	8004fd4 <sendto+0xcc>
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	3301      	adds	r3, #1
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 fa26 	bl	8006410 <WIZCHIP_READ>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d002      	beq.n	8004fd4 <sendto+0xcc>
 8004fce:	f06f 030a 	mvn.w	r3, #10
 8004fd2:	e0c8      	b.n	8005166 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	3301      	adds	r3, #1
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 fa15 	bl	8006410 <WIZCHIP_READ>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	2b42      	cmp	r3, #66	; 0x42
 8004fee:	d008      	beq.n	8005002 <sendto+0xfa>
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b22      	cmp	r3, #34	; 0x22
 8004ff4:	d005      	beq.n	8005002 <sendto+0xfa>
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	2b32      	cmp	r3, #50	; 0x32
 8004ffa:	d002      	beq.n	8005002 <sendto+0xfa>
 8004ffc:	f06f 0306 	mvn.w	r3, #6
 8005000:	e0b1      	b.n	8005166 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	3301      	adds	r3, #1
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800500e:	2204      	movs	r2, #4
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	f001 faf6 	bl	8006604 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	3301      	adds	r3, #1
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005024:	461a      	mov	r2, r3
 8005026:	8c3b      	ldrh	r3, [r7, #32]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	b29b      	uxth	r3, r3
 800502c:	b2db      	uxtb	r3, r3
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f001 fa39 	bl	80064a8 <WIZCHIP_WRITE>
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	3301      	adds	r3, #1
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005042:	461a      	mov	r2, r3
 8005044:	8c3b      	ldrh	r3, [r7, #32]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f001 fa2c 	bl	80064a8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	3301      	adds	r3, #1
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800505c:	4618      	mov	r0, r3
 800505e:	f001 f9d7 	bl	8006410 <WIZCHIP_READ>
 8005062:	4603      	mov	r3, r0
 8005064:	b29b      	uxth	r3, r3
 8005066:	029b      	lsls	r3, r3, #10
 8005068:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800506a:	89ba      	ldrh	r2, [r7, #12]
 800506c:	8abb      	ldrh	r3, [r7, #20]
 800506e:	429a      	cmp	r2, r3
 8005070:	d901      	bls.n	8005076 <sendto+0x16e>
 8005072:	8abb      	ldrh	r3, [r7, #20]
 8005074:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	4618      	mov	r0, r3
 800507a:	f001 fb23 	bl	80066c4 <getSn_TX_FSR>
 800507e:	4603      	mov	r3, r0
 8005080:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	3301      	adds	r3, #1
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800508e:	4618      	mov	r0, r3
 8005090:	f001 f9be 	bl	8006410 <WIZCHIP_READ>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <sendto+0x198>
 800509a:	f06f 0303 	mvn.w	r3, #3
 800509e:	e062      	b.n	8005166 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80050a0:	4b33      	ldr	r3, [pc, #204]	; (8005170 <sendto+0x268>)
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	fa42 f303 	asr.w	r3, r2, r3
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <sendto+0x1b8>
 80050b4:	89ba      	ldrh	r2, [r7, #12]
 80050b6:	8abb      	ldrh	r3, [r7, #20]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d901      	bls.n	80050c0 <sendto+0x1b8>
 80050bc:	2300      	movs	r3, #0
 80050be:	e052      	b.n	8005166 <sendto+0x25e>
      if(len <= freesize) break;
 80050c0:	89ba      	ldrh	r2, [r7, #12]
 80050c2:	8abb      	ldrh	r3, [r7, #20]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d900      	bls.n	80050ca <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80050c8:	e7d5      	b.n	8005076 <sendto+0x16e>
      if(len <= freesize) break;
 80050ca:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80050cc:	89ba      	ldrh	r2, [r7, #12]
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 fb8c 	bl	80067f0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	3301      	adds	r3, #1
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050e4:	2120      	movs	r1, #32
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 f9de 	bl	80064a8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80050ec:	bf00      	nop
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	3301      	adds	r3, #1
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 f988 	bl	8006410 <WIZCHIP_READ>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f3      	bne.n	80050ee <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	3301      	adds	r3, #1
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005112:	4618      	mov	r0, r3
 8005114:	f001 f97c 	bl	8006410 <WIZCHIP_READ>
 8005118:	4603      	mov	r3, r0
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00c      	beq.n	8005144 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	3301      	adds	r3, #1
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005136:	2110      	movs	r1, #16
 8005138:	4618      	mov	r0, r3
 800513a:	f001 f9b5 	bl	80064a8 <WIZCHIP_WRITE>
         break;
 800513e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005140:	89bb      	ldrh	r3, [r7, #12]
 8005142:	e010      	b.n	8005166 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8005144:	7dfb      	ldrb	r3, [r7, #23]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0db      	beq.n	8005106 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	3301      	adds	r3, #1
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800515a:	2108      	movs	r1, #8
 800515c:	4618      	mov	r0, r3
 800515e:	f001 f9a3 	bl	80064a8 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8005162:	f06f 030c 	mvn.w	r3, #12
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2000055a 	.word	0x2000055a

08005174 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607b      	str	r3, [r7, #4]
 800517e:	4603      	mov	r3, r0
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	4613      	mov	r3, r2
 8005184:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8005186:	2300      	movs	r3, #0
 8005188:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d902      	bls.n	8005196 <recvfrom+0x22>
 8005190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005194:	e1d4      	b.n	8005540 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	3301      	adds	r3, #1
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 f936 	bl	8006410 <WIZCHIP_READ>
 80051a4:	4603      	mov	r3, r0
 80051a6:	777b      	strb	r3, [r7, #29]
 80051a8:	7f7b      	ldrb	r3, [r7, #29]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	3b02      	subs	r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d902      	bls.n	80051ba <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80051b4:	f06f 0304 	mvn.w	r3, #4
 80051b8:	e1c2      	b.n	8005540 <recvfrom+0x3cc>
         break;
 80051ba:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80051bc:	89bb      	ldrh	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d102      	bne.n	80051c8 <recvfrom+0x54>
 80051c2:	f06f 030d 	mvn.w	r3, #13
 80051c6:	e1bb      	b.n	8005540 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	4a88      	ldr	r2, [pc, #544]	; (80053ec <recvfrom+0x278>)
 80051cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d128      	bne.n	8005226 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 fabf 	bl	800675a <getSn_RX_RSR>
 80051dc:	4603      	mov	r3, r0
 80051de:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	3301      	adds	r3, #1
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 f90f 	bl	8006410 <WIZCHIP_READ>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d102      	bne.n	80051fe <recvfrom+0x8a>
 80051f8:	f06f 0303 	mvn.w	r3, #3
 80051fc:	e1a0      	b.n	8005540 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80051fe:	4b7c      	ldr	r3, [pc, #496]	; (80053f0 <recvfrom+0x27c>)
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	fa42 f303 	asr.w	r3, r2, r3
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <recvfrom+0xa8>
 8005212:	8bfb      	ldrh	r3, [r7, #30]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <recvfrom+0xa8>
 8005218:	2300      	movs	r3, #0
 800521a:	e191      	b.n	8005540 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800521c:	8bfb      	ldrh	r3, [r7, #30]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d100      	bne.n	8005224 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8005222:	e7d7      	b.n	80051d4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8005224:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8005226:	7f7b      	ldrb	r3, [r7, #29]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	2b04      	cmp	r3, #4
 800522e:	d079      	beq.n	8005324 <recvfrom+0x1b0>
 8005230:	2b04      	cmp	r3, #4
 8005232:	f300 8142 	bgt.w	80054ba <recvfrom+0x346>
 8005236:	2b02      	cmp	r3, #2
 8005238:	d003      	beq.n	8005242 <recvfrom+0xce>
 800523a:	2b03      	cmp	r3, #3
 800523c:	f000 80dc 	beq.w	80053f8 <recvfrom+0x284>
 8005240:	e13b      	b.n	80054ba <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	4a69      	ldr	r2, [pc, #420]	; (80053ec <recvfrom+0x278>)
 8005246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d152      	bne.n	80052f4 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800524e:	f107 0114 	add.w	r1, r7, #20
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2208      	movs	r2, #8
 8005256:	4618      	mov	r0, r3
 8005258:	f001 fb26 	bl	80068a8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	3301      	adds	r3, #1
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005268:	2140      	movs	r1, #64	; 0x40
 800526a:	4618      	mov	r0, r3
 800526c:	f001 f91c 	bl	80064a8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005270:	bf00      	nop
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	3301      	adds	r3, #1
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800527e:	4618      	mov	r0, r3
 8005280:	f001 f8c6 	bl	8006410 <WIZCHIP_READ>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f3      	bne.n	8005272 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800528a:	7d3a      	ldrb	r2, [r7, #20]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3301      	adds	r3, #1
 8005294:	7d7a      	ldrb	r2, [r7, #21]
 8005296:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3302      	adds	r3, #2
 800529c:	7dba      	ldrb	r2, [r7, #22]
 800529e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3303      	adds	r3, #3
 80052a4:	7dfa      	ldrb	r2, [r7, #23]
 80052a6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80052a8:	7e3b      	ldrb	r3, [r7, #24]
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	7e7b      	ldrb	r3, [r7, #25]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4413      	add	r3, r2
 80052be:	b29a      	uxth	r2, r3
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80052c4:	7eba      	ldrb	r2, [r7, #26]
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	b291      	uxth	r1, r2
 80052ca:	4a48      	ldr	r2, [pc, #288]	; (80053ec <recvfrom+0x278>)
 80052cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	4a46      	ldr	r2, [pc, #280]	; (80053ec <recvfrom+0x278>)
 80052d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	b299      	uxth	r1, r3
 80052dc:	7efb      	ldrb	r3, [r7, #27]
 80052de:	b29a      	uxth	r2, r3
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	440a      	add	r2, r1
 80052e4:	b291      	uxth	r1, r2
 80052e6:	4a41      	ldr	r2, [pc, #260]	; (80053ec <recvfrom+0x278>)
 80052e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	4a41      	ldr	r2, [pc, #260]	; (80053f4 <recvfrom+0x280>)
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	4a3d      	ldr	r2, [pc, #244]	; (80053ec <recvfrom+0x278>)
 80052f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052fc:	89ba      	ldrh	r2, [r7, #12]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d202      	bcs.n	8005308 <recvfrom+0x194>
 8005302:	89bb      	ldrh	r3, [r7, #12]
 8005304:	83fb      	strh	r3, [r7, #30]
 8005306:	e004      	b.n	8005312 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	4a38      	ldr	r2, [pc, #224]	; (80053ec <recvfrom+0x278>)
 800530c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005310:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8005312:	8bfb      	ldrh	r3, [r7, #30]
 8005314:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005316:	8bfa      	ldrh	r2, [r7, #30]
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fac3 	bl	80068a8 <wiz_recv_data>
			break;
 8005322:	e0d6      	b.n	80054d2 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	4a31      	ldr	r2, [pc, #196]	; (80053ec <recvfrom+0x278>)
 8005328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d146      	bne.n	80053be <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8005330:	f107 0114 	add.w	r1, r7, #20
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2202      	movs	r2, #2
 8005338:	4618      	mov	r0, r3
 800533a:	f001 fab5 	bl	80068a8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	3301      	adds	r3, #1
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800534a:	2140      	movs	r1, #64	; 0x40
 800534c:	4618      	mov	r0, r3
 800534e:	f001 f8ab 	bl	80064a8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005352:	bf00      	nop
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	3301      	adds	r3, #1
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005360:	4618      	mov	r0, r3
 8005362:	f001 f855 	bl	8006410 <WIZCHIP_READ>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f3      	bne.n	8005354 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800536c:	7d3a      	ldrb	r2, [r7, #20]
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	b291      	uxth	r1, r2
 8005372:	4a1e      	ldr	r2, [pc, #120]	; (80053ec <recvfrom+0x278>)
 8005374:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <recvfrom+0x278>)
 800537c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	b29a      	uxth	r2, r3
 8005384:	7d7b      	ldrb	r3, [r7, #21]
 8005386:	b29b      	uxth	r3, r3
 8005388:	4413      	add	r3, r2
 800538a:	b29a      	uxth	r2, r3
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	3a02      	subs	r2, #2
 8005390:	b291      	uxth	r1, r2
 8005392:	4a16      	ldr	r2, [pc, #88]	; (80053ec <recvfrom+0x278>)
 8005394:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <recvfrom+0x278>)
 800539c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053a0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d906      	bls.n	80053b6 <recvfrom+0x242>
   			{
   			   close(sn);
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fb68 	bl	8004a80 <close>
   			   return SOCKFATAL_PACKLEN;
 80053b0:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80053b4:	e0c4      	b.n	8005540 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	4a0e      	ldr	r2, [pc, #56]	; (80053f4 <recvfrom+0x280>)
 80053ba:	2180      	movs	r1, #128	; 0x80
 80053bc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <recvfrom+0x278>)
 80053c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053c6:	89ba      	ldrh	r2, [r7, #12]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d202      	bcs.n	80053d2 <recvfrom+0x25e>
 80053cc:	89bb      	ldrh	r3, [r7, #12]
 80053ce:	83fb      	strh	r3, [r7, #30]
 80053d0:	e004      	b.n	80053dc <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	4a05      	ldr	r2, [pc, #20]	; (80053ec <recvfrom+0x278>)
 80053d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053da:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80053dc:	8bfa      	ldrh	r2, [r7, #30]
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fa60 	bl	80068a8 <wiz_recv_data>
		   break;
 80053e8:	e073      	b.n	80054d2 <recvfrom+0x35e>
 80053ea:	bf00      	nop
 80053ec:	20000560 	.word	0x20000560
 80053f0:	2000055a 	.word	0x2000055a
 80053f4:	20000570 	.word	0x20000570
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	4a53      	ldr	r2, [pc, #332]	; (8005548 <recvfrom+0x3d4>)
 80053fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d144      	bne.n	800548e <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8005404:	f107 0114 	add.w	r1, r7, #20
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	2206      	movs	r2, #6
 800540c:	4618      	mov	r0, r3
 800540e:	f001 fa4b 	bl	80068a8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	3301      	adds	r3, #1
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800541e:	2140      	movs	r1, #64	; 0x40
 8005420:	4618      	mov	r0, r3
 8005422:	f001 f841 	bl	80064a8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005426:	bf00      	nop
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	3301      	adds	r3, #1
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005434:	4618      	mov	r0, r3
 8005436:	f000 ffeb 	bl	8006410 <WIZCHIP_READ>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f3      	bne.n	8005428 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8005440:	7d3a      	ldrb	r2, [r7, #20]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3301      	adds	r3, #1
 800544a:	7d7a      	ldrb	r2, [r7, #21]
 800544c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3302      	adds	r3, #2
 8005452:	7dba      	ldrb	r2, [r7, #22]
 8005454:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3303      	adds	r3, #3
 800545a:	7dfa      	ldrb	r2, [r7, #23]
 800545c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800545e:	7e3a      	ldrb	r2, [r7, #24]
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	b291      	uxth	r1, r2
 8005464:	4a38      	ldr	r2, [pc, #224]	; (8005548 <recvfrom+0x3d4>)
 8005466:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	4a36      	ldr	r2, [pc, #216]	; (8005548 <recvfrom+0x3d4>)
 800546e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	b299      	uxth	r1, r3
 8005476:	7e7b      	ldrb	r3, [r7, #25]
 8005478:	b29a      	uxth	r2, r3
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	440a      	add	r2, r1
 800547e:	b291      	uxth	r1, r2
 8005480:	4a31      	ldr	r2, [pc, #196]	; (8005548 <recvfrom+0x3d4>)
 8005482:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	4a30      	ldr	r2, [pc, #192]	; (800554c <recvfrom+0x3d8>)
 800548a:	2180      	movs	r1, #128	; 0x80
 800548c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	4a2d      	ldr	r2, [pc, #180]	; (8005548 <recvfrom+0x3d4>)
 8005492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005496:	89ba      	ldrh	r2, [r7, #12]
 8005498:	429a      	cmp	r2, r3
 800549a:	d202      	bcs.n	80054a2 <recvfrom+0x32e>
 800549c:	89bb      	ldrh	r3, [r7, #12]
 800549e:	83fb      	strh	r3, [r7, #30]
 80054a0:	e004      	b.n	80054ac <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	4a28      	ldr	r2, [pc, #160]	; (8005548 <recvfrom+0x3d4>)
 80054a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054aa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80054ac:	8bfa      	ldrh	r2, [r7, #30]
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f001 f9f8 	bl	80068a8 <wiz_recv_data>
			break;
 80054b8:	e00b      	b.n	80054d2 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80054ba:	8bfa      	ldrh	r2, [r7, #30]
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 fa4d 	bl	8006960 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	491f      	ldr	r1, [pc, #124]	; (8005548 <recvfrom+0x3d4>)
 80054ca:	8bfa      	ldrh	r2, [r7, #30]
 80054cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80054d0:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	3301      	adds	r3, #1
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80054de:	2140      	movs	r1, #64	; 0x40
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 ffe1 	bl	80064a8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80054e6:	bf00      	nop
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	3301      	adds	r3, #1
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 ff8b 	bl	8006410 <WIZCHIP_READ>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1f3      	bne.n	80054e8 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	4a11      	ldr	r2, [pc, #68]	; (8005548 <recvfrom+0x3d4>)
 8005504:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	8bfa      	ldrh	r2, [r7, #30]
 800550c:	1a8a      	subs	r2, r1, r2
 800550e:	b291      	uxth	r1, r2
 8005510:	4a0d      	ldr	r2, [pc, #52]	; (8005548 <recvfrom+0x3d4>)
 8005512:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	4a0b      	ldr	r2, [pc, #44]	; (8005548 <recvfrom+0x3d4>)
 800551a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	4a09      	ldr	r2, [pc, #36]	; (800554c <recvfrom+0x3d8>)
 8005526:	5cd2      	ldrb	r2, [r2, r3]
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	b2d1      	uxtb	r1, r2
 8005530:	4a06      	ldr	r2, [pc, #24]	; (800554c <recvfrom+0x3d8>)
 8005532:	54d1      	strb	r1, [r2, r3]
 8005534:	e003      	b.n	800553e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <recvfrom+0x3d8>)
 800553a:	2100      	movs	r1, #0
 800553c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800553e:	8bfb      	ldrh	r3, [r7, #30]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000560 	.word	0x20000560
 800554c:	20000570 	.word	0x20000570

08005550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <HAL_MspInit+0x5c>)
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	4a14      	ldr	r2, [pc, #80]	; (80055ac <HAL_MspInit+0x5c>)
 800555c:	f043 0301 	orr.w	r3, r3, #1
 8005560:	6193      	str	r3, [r2, #24]
 8005562:	4b12      	ldr	r3, [pc, #72]	; (80055ac <HAL_MspInit+0x5c>)
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <HAL_MspInit+0x5c>)
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <HAL_MspInit+0x5c>)
 8005574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005578:	61d3      	str	r3, [r2, #28]
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <HAL_MspInit+0x5c>)
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <HAL_MspInit+0x60>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	4a04      	ldr	r2, [pc, #16]	; (80055b0 <HAL_MspInit+0x60>)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40010000 	.word	0x40010000

080055b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055bc:	f107 0314 	add.w	r3, r7, #20
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <HAL_I2C_MspInit+0x90>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d132      	bne.n	800563a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d4:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <HAL_I2C_MspInit+0x94>)
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	4a1b      	ldr	r2, [pc, #108]	; (8005648 <HAL_I2C_MspInit+0x94>)
 80055da:	f043 0308 	orr.w	r3, r3, #8
 80055de:	6193      	str	r3, [r2, #24]
 80055e0:	4b19      	ldr	r3, [pc, #100]	; (8005648 <HAL_I2C_MspInit+0x94>)
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80055ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80055f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055f2:	2312      	movs	r3, #18
 80055f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055f6:	2303      	movs	r3, #3
 80055f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055fa:	f107 0314 	add.w	r3, r7, #20
 80055fe:	4619      	mov	r1, r3
 8005600:	4812      	ldr	r0, [pc, #72]	; (800564c <HAL_I2C_MspInit+0x98>)
 8005602:	f001 ffb7 	bl	8007574 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005606:	4b12      	ldr	r3, [pc, #72]	; (8005650 <HAL_I2C_MspInit+0x9c>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	f043 0302 	orr.w	r3, r3, #2
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
 800561c:	4a0c      	ldr	r2, [pc, #48]	; (8005650 <HAL_I2C_MspInit+0x9c>)
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <HAL_I2C_MspInit+0x94>)
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	4a08      	ldr	r2, [pc, #32]	; (8005648 <HAL_I2C_MspInit+0x94>)
 8005628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800562c:	61d3      	str	r3, [r2, #28]
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <HAL_I2C_MspInit+0x94>)
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800563a:	bf00      	nop
 800563c:	3728      	adds	r7, #40	; 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40005400 	.word	0x40005400
 8005648:	40021000 	.word	0x40021000
 800564c:	40010c00 	.word	0x40010c00
 8005650:	40010000 	.word	0x40010000

08005654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800565c:	f107 0310 	add.w	r3, r7, #16
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <HAL_SPI_MspInit+0x8c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d131      	bne.n	80056d8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005674:	4b1b      	ldr	r3, [pc, #108]	; (80056e4 <HAL_SPI_MspInit+0x90>)
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	4a1a      	ldr	r2, [pc, #104]	; (80056e4 <HAL_SPI_MspInit+0x90>)
 800567a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800567e:	61d3      	str	r3, [r2, #28]
 8005680:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <HAL_SPI_MspInit+0x90>)
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800568c:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <HAL_SPI_MspInit+0x90>)
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <HAL_SPI_MspInit+0x90>)
 8005692:	f043 0308 	orr.w	r3, r3, #8
 8005696:	6193      	str	r3, [r2, #24]
 8005698:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <HAL_SPI_MspInit+0x90>)
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80056a4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80056a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056aa:	2302      	movs	r3, #2
 80056ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056ae:	2303      	movs	r3, #3
 80056b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b2:	f107 0310 	add.w	r3, r7, #16
 80056b6:	4619      	mov	r1, r3
 80056b8:	480b      	ldr	r0, [pc, #44]	; (80056e8 <HAL_SPI_MspInit+0x94>)
 80056ba:	f001 ff5b 	bl	8007574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80056be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056cc:	f107 0310 	add.w	r3, r7, #16
 80056d0:	4619      	mov	r1, r3
 80056d2:	4805      	ldr	r0, [pc, #20]	; (80056e8 <HAL_SPI_MspInit+0x94>)
 80056d4:	f001 ff4e 	bl	8007574 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80056d8:	bf00      	nop
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40003800 	.word	0x40003800
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40010c00 	.word	0x40010c00

080056ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	; 0x30
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f4:	f107 0320 	add.w	r3, r7, #32
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	605a      	str	r2, [r3, #4]
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a3c      	ldr	r2, [pc, #240]	; (80057f8 <HAL_TIM_Base_MspInit+0x10c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800570c:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	4a3a      	ldr	r2, [pc, #232]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 8005712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005716:	6193      	str	r3, [r2, #24]
 8005718:	4b38      	ldr	r3, [pc, #224]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005724:	e064      	b.n	80057f0 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572e:	d12c      	bne.n	800578a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005730:	4b32      	ldr	r3, [pc, #200]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	4a31      	ldr	r2, [pc, #196]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	61d3      	str	r3, [r2, #28]
 800573c:	4b2f      	ldr	r3, [pc, #188]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005748:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 800574e:	f043 0304 	orr.w	r3, r3, #4
 8005752:	6193      	str	r3, [r2, #24]
 8005754:	4b29      	ldr	r3, [pc, #164]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005760:	2301      	movs	r3, #1
 8005762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005764:	2300      	movs	r3, #0
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005768:	2300      	movs	r3, #0
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800576c:	f107 0320 	add.w	r3, r7, #32
 8005770:	4619      	mov	r1, r3
 8005772:	4823      	ldr	r0, [pc, #140]	; (8005800 <HAL_TIM_Base_MspInit+0x114>)
 8005774:	f001 fefe 	bl	8007574 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005778:	2200      	movs	r2, #0
 800577a:	2100      	movs	r1, #0
 800577c:	201c      	movs	r0, #28
 800577e:	f001 fcbe 	bl	80070fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005782:	201c      	movs	r0, #28
 8005784:	f001 fcd7 	bl	8007136 <HAL_NVIC_EnableIRQ>
}
 8005788:	e032      	b.n	80057f0 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM3)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <HAL_TIM_Base_MspInit+0x118>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d114      	bne.n	80057be <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005794:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	4a18      	ldr	r2, [pc, #96]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 800579a:	f043 0302 	orr.w	r3, r3, #2
 800579e:	61d3      	str	r3, [r2, #28]
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80057ac:	2200      	movs	r2, #0
 80057ae:	2100      	movs	r1, #0
 80057b0:	201d      	movs	r0, #29
 80057b2:	f001 fca4 	bl	80070fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80057b6:	201d      	movs	r0, #29
 80057b8:	f001 fcbd 	bl	8007136 <HAL_NVIC_EnableIRQ>
}
 80057bc:	e018      	b.n	80057f0 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a11      	ldr	r2, [pc, #68]	; (8005808 <HAL_TIM_Base_MspInit+0x11c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d113      	bne.n	80057f0 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4a0b      	ldr	r2, [pc, #44]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	61d3      	str	r3, [r2, #28]
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_TIM_Base_MspInit+0x110>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80057e0:	2200      	movs	r2, #0
 80057e2:	2100      	movs	r1, #0
 80057e4:	201e      	movs	r0, #30
 80057e6:	f001 fc8a 	bl	80070fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80057ea:	201e      	movs	r0, #30
 80057ec:	f001 fca3 	bl	8007136 <HAL_NVIC_EnableIRQ>
}
 80057f0:	bf00      	nop
 80057f2:	3730      	adds	r7, #48	; 0x30
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40021000 	.word	0x40021000
 8005800:	40010800 	.word	0x40010800
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800

0800580c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005814:	f107 0310 	add.w	r3, r7, #16
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	605a      	str	r2, [r3, #4]
 800581e:	609a      	str	r2, [r3, #8]
 8005820:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a10      	ldr	r2, [pc, #64]	; (8005868 <HAL_TIM_MspPostInit+0x5c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d118      	bne.n	800585e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582c:	4b0f      	ldr	r3, [pc, #60]	; (800586c <HAL_TIM_MspPostInit+0x60>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	4a0e      	ldr	r2, [pc, #56]	; (800586c <HAL_TIM_MspPostInit+0x60>)
 8005832:	f043 0304 	orr.w	r3, r3, #4
 8005836:	6193      	str	r3, [r2, #24]
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <HAL_TIM_MspPostInit+0x60>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTZ1_Pin|OUTZ2_Pin|OUTZ3_Pin|OUTZ4_Pin;
 8005844:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005848:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584a:	2302      	movs	r3, #2
 800584c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800584e:	2303      	movs	r3, #3
 8005850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005852:	f107 0310 	add.w	r3, r7, #16
 8005856:	4619      	mov	r1, r3
 8005858:	4805      	ldr	r0, [pc, #20]	; (8005870 <HAL_TIM_MspPostInit+0x64>)
 800585a:	f001 fe8b 	bl	8007574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800585e:	bf00      	nop
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40021000 	.word	0x40021000
 8005870:	40010800 	.word	0x40010800

08005874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800587c:	f107 0314 	add.w	r3, r7, #20
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	609a      	str	r2, [r3, #8]
 8005888:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a22      	ldr	r2, [pc, #136]	; (8005918 <HAL_UART_MspInit+0xa4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d13d      	bne.n	8005910 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005894:	4b21      	ldr	r3, [pc, #132]	; (800591c <HAL_UART_MspInit+0xa8>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	4a20      	ldr	r2, [pc, #128]	; (800591c <HAL_UART_MspInit+0xa8>)
 800589a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800589e:	6193      	str	r3, [r2, #24]
 80058a0:	4b1e      	ldr	r3, [pc, #120]	; (800591c <HAL_UART_MspInit+0xa8>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <HAL_UART_MspInit+0xa8>)
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	4a1a      	ldr	r2, [pc, #104]	; (800591c <HAL_UART_MspInit+0xa8>)
 80058b2:	f043 0308 	orr.w	r3, r3, #8
 80058b6:	6193      	str	r3, [r2, #24]
 80058b8:	4b18      	ldr	r3, [pc, #96]	; (800591c <HAL_UART_MspInit+0xa8>)
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80058c4:	2340      	movs	r3, #64	; 0x40
 80058c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c8:	2302      	movs	r3, #2
 80058ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058cc:	2303      	movs	r3, #3
 80058ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058d0:	f107 0314 	add.w	r3, r7, #20
 80058d4:	4619      	mov	r1, r3
 80058d6:	4812      	ldr	r0, [pc, #72]	; (8005920 <HAL_UART_MspInit+0xac>)
 80058d8:	f001 fe4c 	bl	8007574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058e8:	f107 0314 	add.w	r3, r7, #20
 80058ec:	4619      	mov	r1, r3
 80058ee:	480c      	ldr	r0, [pc, #48]	; (8005920 <HAL_UART_MspInit+0xac>)
 80058f0:	f001 fe40 	bl	8007574 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_UART_MspInit+0xb0>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	f043 0304 	orr.w	r3, r3, #4
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
 800590a:	4a06      	ldr	r2, [pc, #24]	; (8005924 <HAL_UART_MspInit+0xb0>)
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005910:	bf00      	nop
 8005912:	3728      	adds	r7, #40	; 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40013800 	.word	0x40013800
 800591c:	40021000 	.word	0x40021000
 8005920:	40010c00 	.word	0x40010c00
 8005924:	40010000 	.word	0x40010000

08005928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800592c:	f002 fd5c 	bl	80083e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005930:	e7fe      	b.n	8005930 <NMI_Handler+0x8>

08005932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005936:	e7fe      	b.n	8005936 <HardFault_Handler+0x4>

08005938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800593c:	e7fe      	b.n	800593c <MemManage_Handler+0x4>

0800593e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800593e:	b480      	push	{r7}
 8005940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005942:	e7fe      	b.n	8005942 <BusFault_Handler+0x4>

08005944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005948:	e7fe      	b.n	8005948 <UsageFault_Handler+0x4>

0800594a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800594a:	b480      	push	{r7}
 800594c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800594e:	bf00      	nop
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005956:	b480      	push	{r7}
 8005958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800595a:	bf00      	nop
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005962:	b480      	push	{r7}
 8005964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005966:	bf00      	nop
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr
	...

08005970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <SysTick_Handler+0x2c>)
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	4b07      	ldr	r3, [pc, #28]	; (800599c <SysTick_Handler+0x2c>)
 800597e:	801a      	strh	r2, [r3, #0]
	if(ticks >= 1000) {
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <SysTick_Handler+0x2c>)
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005988:	d304      	bcc.n	8005994 <SysTick_Handler+0x24>
		DHCP_time_handler();
 800598a:	f7fc ffd1 	bl	8002930 <DHCP_time_handler>
		ticks = 0;
 800598e:	4b03      	ldr	r3, [pc, #12]	; (800599c <SysTick_Handler+0x2c>)
 8005990:	2200      	movs	r2, #0
 8005992:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005994:	f001 fa86 	bl	8006ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005998:	bf00      	nop
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20000578 	.word	0x20000578

080059a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80059a4:	4802      	ldr	r0, [pc, #8]	; (80059b0 <TIM2_IRQHandler+0x10>)
 80059a6:	f003 ff50 	bl	800984a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80059aa:	bf00      	nop
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	200013dc 	.word	0x200013dc

080059b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_TIM_Base_Stop_IT(&htim3);
	runFlag = COUNT_FRONT;		// Сработал таймер сброса таймера захвата, начинаем измерение.
 80059b8:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <TIM3_IRQHandler+0x14>)
 80059ba:	221c      	movs	r2, #28
 80059bc:	601a      	str	r2, [r3, #0]
	//LED_PULSE
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80059be:	4803      	ldr	r0, [pc, #12]	; (80059cc <TIM3_IRQHandler+0x18>)
 80059c0:	f003 ff43 	bl	800984a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20000648 	.word	0x20000648
 80059cc:	20001304 	.word	0x20001304

080059d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80059d0:	b5b0      	push	{r4, r5, r7, lr}
 80059d2:	b092      	sub	sp, #72	; 0x48
 80059d4:	af00      	add	r7, sp, #0
	#else
	double Vm[3];
	uint8_t countV;
	#endif
	#ifdef SYSTICK_DISABLE
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 80059d6:	4b88      	ldr	r3, [pc, #544]	; (8005bf8 <TIM4_IRQHandler+0x228>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a87      	ldr	r2, [pc, #540]	; (8005bf8 <TIM4_IRQHandler+0x228>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	6013      	str	r3, [r2, #0]
	#endif

		front_sum = 0;
 80059e2:	4b86      	ldr	r3, [pc, #536]	; (8005bfc <TIM4_IRQHandler+0x22c>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]
		runFlag = 0;
 80059e8:	4b85      	ldr	r3, [pc, #532]	; (8005c00 <TIM4_IRQHandler+0x230>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 80059ee:	2100      	movs	r1, #0
 80059f0:	4884      	ldr	r0, [pc, #528]	; (8005c04 <TIM4_IRQHandler+0x234>)
 80059f2:	f003 fc67 	bl	80092c4 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 80059f6:	2104      	movs	r1, #4
 80059f8:	4882      	ldr	r0, [pc, #520]	; (8005c04 <TIM4_IRQHandler+0x234>)
 80059fa:	f003 fc63 	bl	80092c4 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 80059fe:	2108      	movs	r1, #8
 8005a00:	4880      	ldr	r0, [pc, #512]	; (8005c04 <TIM4_IRQHandler+0x234>)
 8005a02:	f003 fc5f 	bl	80092c4 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8005a06:	210c      	movs	r1, #12
 8005a08:	487e      	ldr	r0, [pc, #504]	; (8005c04 <TIM4_IRQHandler+0x234>)
 8005a0a:	f003 fc5b 	bl	80092c4 <HAL_TIM_OC_Stop>

		/* Отключим все мультиплексоры */
		receiversOff
 8005a0e:	4b7e      	ldr	r3, [pc, #504]	; (8005c08 <TIM4_IRQHandler+0x238>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	4a7d      	ldr	r2, [pc, #500]	; (8005c08 <TIM4_IRQHandler+0x238>)
 8005a14:	f043 031e 	orr.w	r3, r3, #30
 8005a18:	60d3      	str	r3, [r2, #12]
		STOP_CAPTURE	// If not stop in callback.
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	487b      	ldr	r0, [pc, #492]	; (8005c0c <TIM4_IRQHandler+0x23c>)
 8005a1e:	f003 fe13 	bl	8009648 <HAL_TIM_IC_Stop_IT>
 8005a22:	2104      	movs	r1, #4
 8005a24:	4879      	ldr	r0, [pc, #484]	; (8005c0c <TIM4_IRQHandler+0x23c>)
 8005a26:	f003 fe0f 	bl	8009648 <HAL_TIM_IC_Stop_IT>
		/* Set all timer channels for output mode */
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8005a2a:	4b79      	ldr	r3, [pc, #484]	; (8005c10 <TIM4_IRQHandler+0x240>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8005a2e:	f423 436e 	bic.w	r3, r3, #60928	; 0xee00
 8005a32:	f023 03ee 	bic.w	r3, r3, #238	; 0xee
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8005a36:	4a76      	ldr	r2, [pc, #472]	; (8005c10 <TIM4_IRQHandler+0x240>)
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8005a38:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8005a3c:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8005a40:	6053      	str	r3, [r2, #4]

		/* Управление циклом опроса */
		if (currentMode >= CHANNELS) {
 8005a42:	4b74      	ldr	r3, [pc, #464]	; (8005c14 <TIM4_IRQHandler+0x244>)
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d908      	bls.n	8005a5c <TIM4_IRQHandler+0x8c>
			currentMode = 0;
 8005a4a:	4b72      	ldr	r3, [pc, #456]	; (8005c14 <TIM4_IRQHandler+0x244>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	801a      	strh	r2, [r3, #0]
			measCount++;  // Следующее измерение.
 8005a50:	4b71      	ldr	r3, [pc, #452]	; (8005c18 <TIM4_IRQHandler+0x248>)
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	4b6f      	ldr	r3, [pc, #444]	; (8005c18 <TIM4_IRQHandler+0x248>)
 8005a5a:	801a      	strh	r2, [r3, #0]
		}
		//LED_PULSE
		if ((measCount == MEASSURE_COUNT) && (calibrateMode == 0)) {
 8005a5c:	4b6e      	ldr	r3, [pc, #440]	; (8005c18 <TIM4_IRQHandler+0x248>)
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	2b64      	cmp	r3, #100	; 0x64
 8005a62:	f040 833f 	bne.w	80060e4 <TIM4_IRQHandler+0x714>
 8005a66:	4b6d      	ldr	r3, [pc, #436]	; (8005c1c <TIM4_IRQHandler+0x24c>)
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 833a 	bne.w	80060e4 <TIM4_IRQHandler+0x714>
			//LED_PULSE
			#ifdef SYSTICK_DISABLE
			SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8005a70:	4b61      	ldr	r3, [pc, #388]	; (8005bf8 <TIM4_IRQHandler+0x228>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a60      	ldr	r2, [pc, #384]	; (8005bf8 <TIM4_IRQHandler+0x228>)
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	6013      	str	r3, [r2, #0]
			#endif
			HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 8005a7c:	4868      	ldr	r0, [pc, #416]	; (8005c20 <TIM4_IRQHandler+0x250>)
 8005a7e:	f003 faf9 	bl	8009074 <HAL_TIM_Base_Stop_IT>
			Vmax = 0;
 8005a82:	4968      	ldr	r1, [pc, #416]	; (8005c24 <TIM4_IRQHandler+0x254>)
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9c1 2300 	strd	r2, r3, [r1]
			Xmax = 0;
 8005a90:	4965      	ldr	r1, [pc, #404]	; (8005c28 <TIM4_IRQHandler+0x258>)
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	e9c1 2300 	strd	r2, r3, [r1]
			Ymax = 0;
 8005a9e:	4963      	ldr	r1, [pc, #396]	; (8005c2c <TIM4_IRQHandler+0x25c>)
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum1 = 0;
 8005aac:	4960      	ldr	r1, [pc, #384]	; (8005c30 <TIM4_IRQHandler+0x260>)
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum1 = 0;
 8005aba:	495e      	ldr	r1, [pc, #376]	; (8005c34 <TIM4_IRQHandler+0x264>)
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9c1 2300 	strd	r2, r3, [r1]
			#ifdef MEDIAN_FILTER_ENABLE
			/* Фильтр для всех значений */
			X1m[0] = 0; X1m[1] = 0; X1m[2] = 0; countX1 = 0;
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			Y1m[0] = 0; Y1m[1] = 0; Y1m[2] = 0; countY1 = 0;
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	e9c7 2300 	strd	r2, r3, [r7]
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			#else
			/* Фильтр только для максимальной скорости */
			Vm[0] = 0; Vm[1] = 0; Vm[2] = 0; countV = 0;
			#endif
			//LED_PULSE
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b20:	e1cf      	b.n	8005ec2 <TIM4_IRQHandler+0x4f2>
				// Медианный фильтр для X
				#ifdef MEDIAN_FILTER_ENABLE
				X1m[countX1] = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
 8005b22:	4a45      	ldr	r2, [pc, #276]	; (8005c38 <TIM4_IRQHandler+0x268>)
 8005b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005b2a:	4a44      	ldr	r2, [pc, #272]	; (8005c3c <TIM4_IRQHandler+0x26c>)
 8005b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b32:	4a43      	ldr	r2, [pc, #268]	; (8005c40 <TIM4_IRQHandler+0x270>)
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	4611      	mov	r1, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fb f903 	bl	8000d44 <__aeabi_fmul>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4619      	mov	r1, r3
 8005b42:	4620      	mov	r0, r4
 8005b44:	f7fa fff4 	bl	8000b30 <__aeabi_fsub>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fa fc6a 	bl	8000428 <__aeabi_f2d>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	00e1      	lsls	r1, r4, #3
 8005b5a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005b5e:	4401      	add	r1, r0
 8005b60:	3930      	subs	r1, #48	; 0x30
 8005b62:	e9c1 2300 	strd	r2, r3, [r1]
				if (++countX1 >= 3) countX1 = 0;
 8005b66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d902      	bls.n	8005b7e <TIM4_IRQHandler+0x1ae>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				XX1 = (X1m[0] < X1m[1]) ? ((X1m[1] < X1m[2]) ? X1m[1] : ((X1m[2] < X1m[0]) ? X1m[0] : X1m[2])) : ((X1m[0] < X1m[2]) ? X1m[0] : ((X1m[2] < X1m[1]) ? X1m[1] : X1m[2]));
 8005b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b86:	f7fa ff19 	bl	80009bc <__aeabi_dcmplt>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01a      	beq.n	8005bc6 <TIM4_IRQHandler+0x1f6>
 8005b90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b98:	f7fa ff10 	bl	80009bc <__aeabi_dcmplt>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <TIM4_IRQHandler+0x1d8>
 8005ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ba6:	e04f      	b.n	8005c48 <TIM4_IRQHandler+0x278>
 8005ba8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb0:	f7fa ff04 	bl	80009bc <__aeabi_dcmplt>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <TIM4_IRQHandler+0x1f0>
 8005bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bbe:	e043      	b.n	8005c48 <TIM4_IRQHandler+0x278>
 8005bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bc4:	e040      	b.n	8005c48 <TIM4_IRQHandler+0x278>
 8005bc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bce:	f7fa fef5 	bl	80009bc <__aeabi_dcmplt>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <TIM4_IRQHandler+0x20e>
 8005bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bdc:	e034      	b.n	8005c48 <TIM4_IRQHandler+0x278>
 8005bde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005be2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005be6:	f7fa fee9 	bl	80009bc <__aeabi_dcmplt>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d029      	beq.n	8005c44 <TIM4_IRQHandler+0x274>
 8005bf0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bf4:	e028      	b.n	8005c48 <TIM4_IRQHandler+0x278>
 8005bf6:	bf00      	nop
 8005bf8:	e000e010 	.word	0xe000e010
 8005bfc:	20000634 	.word	0x20000634
 8005c00:	20000648 	.word	0x20000648
 8005c04:	20001394 	.word	0x20001394
 8005c08:	40010c00 	.word	0x40010c00
 8005c0c:	200013dc 	.word	0x200013dc
 8005c10:	40010800 	.word	0x40010800
 8005c14:	2000098e 	.word	0x2000098e
 8005c18:	200005c8 	.word	0x200005c8
 8005c1c:	20000b2c 	.word	0x20000b2c
 8005c20:	20001254 	.word	0x20001254
 8005c24:	200005c0 	.word	0x200005c0
 8005c28:	200005d8 	.word	0x200005d8
 8005c2c:	20000990 	.word	0x20000990
 8005c30:	200005e0 	.word	0x200005e0
 8005c34:	20000600 	.word	0x20000600
 8005c38:	200007fc 	.word	0x200007fc
 8005c3c:	20000998 	.word	0x20000998
 8005c40:	20000590 	.word	0x20000590
 8005c44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				#else
				XX1 = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
				#endif
				Xsum1 = Xsum1 + XX1;
 8005c4c:	4b3a      	ldr	r3, [pc, #232]	; (8005d38 <TIM4_IRQHandler+0x368>)
 8005c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c56:	f7fa fa89 	bl	800016c <__adddf3>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4936      	ldr	r1, [pc, #216]	; (8005d38 <TIM4_IRQHandler+0x368>)
 8005c60:	e9c1 2300 	strd	r2, r3, [r1]

				// Медианный фильтр для Y
				#ifdef MEDIAN_FILTER_ENABLE
				Y1m[countY1] = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
 8005c64:	4a35      	ldr	r2, [pc, #212]	; (8005d3c <TIM4_IRQHandler+0x36c>)
 8005c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005c6c:	4a34      	ldr	r2, [pc, #208]	; (8005d40 <TIM4_IRQHandler+0x370>)
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c74:	4a33      	ldr	r2, [pc, #204]	; (8005d44 <TIM4_IRQHandler+0x374>)
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fb f862 	bl	8000d44 <__aeabi_fmul>
 8005c80:	4603      	mov	r3, r0
 8005c82:	4619      	mov	r1, r3
 8005c84:	4620      	mov	r0, r4
 8005c86:	f7fa ff53 	bl	8000b30 <__aeabi_fsub>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fa fbc9 	bl	8000428 <__aeabi_f2d>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	00e1      	lsls	r1, r4, #3
 8005c9c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005ca0:	4401      	add	r1, r0
 8005ca2:	3948      	subs	r1, #72	; 0x48
 8005ca4:	e9c1 2300 	strd	r2, r3, [r1]
				if (++countY1 >= 3) countY1 = 0;
 8005ca8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005cac:	3301      	adds	r3, #1
 8005cae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005cb2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d902      	bls.n	8005cc0 <TIM4_IRQHandler+0x2f0>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				YY1 = (Y1m[0] < Y1m[1]) ? ((Y1m[1] < Y1m[2]) ? Y1m[1] : ((Y1m[2] < Y1m[0]) ? Y1m[0] : Y1m[2])) : ((Y1m[0] < Y1m[2]) ? Y1m[0] : ((Y1m[2] < Y1m[1]) ? Y1m[1] : Y1m[2]));
 8005cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cc8:	f7fa fe78 	bl	80009bc <__aeabi_dcmplt>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01a      	beq.n	8005d08 <TIM4_IRQHandler+0x338>
 8005cd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cda:	f7fa fe6f 	bl	80009bc <__aeabi_dcmplt>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <TIM4_IRQHandler+0x31a>
 8005ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce8:	e030      	b.n	8005d4c <TIM4_IRQHandler+0x37c>
 8005cea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf2:	f7fa fe63 	bl	80009bc <__aeabi_dcmplt>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <TIM4_IRQHandler+0x332>
 8005cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d00:	e024      	b.n	8005d4c <TIM4_IRQHandler+0x37c>
 8005d02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d06:	e021      	b.n	8005d4c <TIM4_IRQHandler+0x37c>
 8005d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d10:	f7fa fe54 	bl	80009bc <__aeabi_dcmplt>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <TIM4_IRQHandler+0x350>
 8005d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d1e:	e015      	b.n	8005d4c <TIM4_IRQHandler+0x37c>
 8005d20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d28:	f7fa fe48 	bl	80009bc <__aeabi_dcmplt>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <TIM4_IRQHandler+0x378>
 8005d32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d36:	e009      	b.n	8005d4c <TIM4_IRQHandler+0x37c>
 8005d38:	200005e0 	.word	0x200005e0
 8005d3c:	2000065c 	.word	0x2000065c
 8005d40:	20000b38 	.word	0x20000b38
 8005d44:	200005a0 	.word	0x200005a0
 8005d48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d4c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				#else
				YY1 = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
				#endif
				Ysum1 = Ysum1 + YY1;
 8005d50:	4baf      	ldr	r3, [pc, #700]	; (8006010 <TIM4_IRQHandler+0x640>)
 8005d52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d5a:	f7fa fa07 	bl	800016c <__adddf3>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	49ab      	ldr	r1, [pc, #684]	; (8006010 <TIM4_IRQHandler+0x640>)
 8005d64:	e9c1 2300 	strd	r2, r3, [r1]

				X = XX1;
 8005d68:	49aa      	ldr	r1, [pc, #680]	; (8006014 <TIM4_IRQHandler+0x644>)
 8005d6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d6e:	e9c1 2300 	strd	r2, r3, [r1]
				Y = YY1;
 8005d72:	49a9      	ldr	r1, [pc, #676]	; (8006018 <TIM4_IRQHandler+0x648>)
 8005d74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d78:	e9c1 2300 	strd	r2, r3, [r1]
				V = sqrt(pow(X, 2) + pow(Y, 2));
 8005d7c:	4ba5      	ldr	r3, [pc, #660]	; (8006014 <TIM4_IRQHandler+0x644>)
 8005d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d8a:	f007 ff1d 	bl	800dbc8 <pow>
 8005d8e:	4604      	mov	r4, r0
 8005d90:	460d      	mov	r5, r1
 8005d92:	4ba1      	ldr	r3, [pc, #644]	; (8006018 <TIM4_IRQHandler+0x648>)
 8005d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005da0:	f007 ff12 	bl	800dbc8 <pow>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4620      	mov	r0, r4
 8005daa:	4629      	mov	r1, r5
 8005dac:	f7fa f9de 	bl	800016c <__adddf3>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4610      	mov	r0, r2
 8005db6:	4619      	mov	r1, r3
 8005db8:	f007 ffb2 	bl	800dd20 <sqrt>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4996      	ldr	r1, [pc, #600]	; (800601c <TIM4_IRQHandler+0x64c>)
 8005dc2:	e9c1 2300 	strd	r2, r3, [r1]
				Vm[countV] = V;
				if (++countV >= 3) countV = 0;
				V = (Vm[0] < Vm[1]) ? ((Vm[1] < Vm[2]) ? Vm[1] : ((Vm[2] < Vm[0]) ? Vm[0] : Vm[2])) : ((Vm[0] < Vm[2]) ? Vm[0] : ((Vm[2] < Vm[1]) ? Vm[1] : Vm[2]));
				#endif

				if ( V > Vmax) {
 8005dc6:	4b95      	ldr	r3, [pc, #596]	; (800601c <TIM4_IRQHandler+0x64c>)
 8005dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dcc:	4b94      	ldr	r3, [pc, #592]	; (8006020 <TIM4_IRQHandler+0x650>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fe11 	bl	80009f8 <__aeabi_dcmpgt>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <TIM4_IRQHandler+0x418>
					Vmax = V;
 8005ddc:	4b8f      	ldr	r3, [pc, #572]	; (800601c <TIM4_IRQHandler+0x64c>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	498f      	ldr	r1, [pc, #572]	; (8006020 <TIM4_IRQHandler+0x650>)
 8005de4:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(X) > Xmax) {
 8005de8:	4b8a      	ldr	r3, [pc, #552]	; (8006014 <TIM4_IRQHandler+0x644>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	4610      	mov	r0, r2
 8005df0:	4619      	mov	r1, r3
 8005df2:	f7fa fe21 	bl	8000a38 <__aeabi_d2iz>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bfb8      	it	lt
 8005dfc:	425b      	neglt	r3, r3
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fa fb00 	bl	8000404 <__aeabi_i2d>
 8005e04:	4b87      	ldr	r3, [pc, #540]	; (8006024 <TIM4_IRQHandler+0x654>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f7fa fdf5 	bl	80009f8 <__aeabi_dcmpgt>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d012      	beq.n	8005e3a <TIM4_IRQHandler+0x46a>
					Xmax = abs(X);
 8005e14:	4b7f      	ldr	r3, [pc, #508]	; (8006014 <TIM4_IRQHandler+0x644>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f7fa fe0b 	bl	8000a38 <__aeabi_d2iz>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bfb8      	it	lt
 8005e28:	425b      	neglt	r3, r3
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fa faea 	bl	8000404 <__aeabi_i2d>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	497b      	ldr	r1, [pc, #492]	; (8006024 <TIM4_IRQHandler+0x654>)
 8005e36:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(Y) > Ymax) {
 8005e3a:	4b77      	ldr	r3, [pc, #476]	; (8006018 <TIM4_IRQHandler+0x648>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	4610      	mov	r0, r2
 8005e42:	4619      	mov	r1, r3
 8005e44:	f7fa fdf8 	bl	8000a38 <__aeabi_d2iz>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bfb8      	it	lt
 8005e4e:	425b      	neglt	r3, r3
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fa fad7 	bl	8000404 <__aeabi_i2d>
 8005e56:	4b74      	ldr	r3, [pc, #464]	; (8006028 <TIM4_IRQHandler+0x658>)
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f7fa fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d012      	beq.n	8005e8c <TIM4_IRQHandler+0x4bc>
					Ymax = abs(Y);
 8005e66:	4b6c      	ldr	r3, [pc, #432]	; (8006018 <TIM4_IRQHandler+0x648>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	f7fa fde2 	bl	8000a38 <__aeabi_d2iz>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bfb8      	it	lt
 8005e7a:	425b      	neglt	r3, r3
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fa fac1 	bl	8000404 <__aeabi_i2d>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4968      	ldr	r1, [pc, #416]	; (8006028 <TIM4_IRQHandler+0x658>)
 8005e88:	e9c1 2300 	strd	r2, r3, [r1]
				}
				resul_arrayX1[ii] = 0;
 8005e8c:	4a67      	ldr	r2, [pc, #412]	; (800602c <TIM4_IRQHandler+0x65c>)
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayX2[ii] = 0;
 8005e98:	4a65      	ldr	r2, [pc, #404]	; (8006030 <TIM4_IRQHandler+0x660>)
 8005e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9c:	f04f 0100 	mov.w	r1, #0
 8005ea0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY1[ii] = 0;
 8005ea4:	4a63      	ldr	r2, [pc, #396]	; (8006034 <TIM4_IRQHandler+0x664>)
 8005ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea8:	f04f 0100 	mov.w	r1, #0
 8005eac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY2[ii] = 0;
 8005eb0:	4a61      	ldr	r2, [pc, #388]	; (8006038 <TIM4_IRQHandler+0x668>)
 8005eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb4:	f04f 0100 	mov.w	r1, #0
 8005eb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec4:	2b63      	cmp	r3, #99	; 0x63
 8005ec6:	f77f ae2c 	ble.w	8005b22 <TIM4_IRQHandler+0x152>
			}
			Xsum = Xsum1;
 8005eca:	4b5c      	ldr	r3, [pc, #368]	; (800603c <TIM4_IRQHandler+0x66c>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	495b      	ldr	r1, [pc, #364]	; (8006040 <TIM4_IRQHandler+0x670>)
 8005ed2:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по X
 8005ed6:	4b5a      	ldr	r3, [pc, #360]	; (8006040 <TIM4_IRQHandler+0x670>)
 8005ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	4b58      	ldr	r3, [pc, #352]	; (8006044 <TIM4_IRQHandler+0x674>)
 8005ee2:	f7fa fc23 	bl	800072c <__aeabi_ddiv>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4955      	ldr	r1, [pc, #340]	; (8006040 <TIM4_IRQHandler+0x670>)
 8005eec:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / SPEED_CALIBRATE;	// Скорость по X
 8005ef0:	4b53      	ldr	r3, [pc, #332]	; (8006040 <TIM4_IRQHandler+0x670>)
 8005ef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ef6:	a344      	add	r3, pc, #272	; (adr r3, 8006008 <TIM4_IRQHandler+0x638>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa fc16 	bl	800072c <__aeabi_ddiv>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	494e      	ldr	r1, [pc, #312]	; (8006040 <TIM4_IRQHandler+0x670>)
 8005f06:	e9c1 2300 	strd	r2, r3, [r1]

			Ysum = Ysum1;
 8005f0a:	4b41      	ldr	r3, [pc, #260]	; (8006010 <TIM4_IRQHandler+0x640>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	494d      	ldr	r1, [pc, #308]	; (8006048 <TIM4_IRQHandler+0x678>)
 8005f12:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по Y
 8005f16:	4b4c      	ldr	r3, [pc, #304]	; (8006048 <TIM4_IRQHandler+0x678>)
 8005f18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	4b48      	ldr	r3, [pc, #288]	; (8006044 <TIM4_IRQHandler+0x674>)
 8005f22:	f7fa fc03 	bl	800072c <__aeabi_ddiv>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4947      	ldr	r1, [pc, #284]	; (8006048 <TIM4_IRQHandler+0x678>)
 8005f2c:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / SPEED_CALIBRATE;	// Скорость по Y
 8005f30:	4b45      	ldr	r3, [pc, #276]	; (8006048 <TIM4_IRQHandler+0x678>)
 8005f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f36:	a334      	add	r3, pc, #208	; (adr r3, 8006008 <TIM4_IRQHandler+0x638>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f7fa fbf6 	bl	800072c <__aeabi_ddiv>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4940      	ldr	r1, [pc, #256]	; (8006048 <TIM4_IRQHandler+0x678>)
 8005f46:	e9c1 2300 	strd	r2, r3, [r1]

			Vmaxfin = Vmax / SPEED_CALIBRATE;	// Максимальная скорость за время MEASSURE_COUNT
 8005f4a:	4b35      	ldr	r3, [pc, #212]	; (8006020 <TIM4_IRQHandler+0x650>)
 8005f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f50:	a32d      	add	r3, pc, #180	; (adr r3, 8006008 <TIM4_IRQHandler+0x638>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f7fa fbe9 	bl	800072c <__aeabi_ddiv>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	493b      	ldr	r1, [pc, #236]	; (800604c <TIM4_IRQHandler+0x67c>)
 8005f60:	e9c1 2300 	strd	r2, r3, [r1]
			Xmaxfin = Xmax / SPEED_CALIBRATE;
 8005f64:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <TIM4_IRQHandler+0x654>)
 8005f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f6a:	a327      	add	r3, pc, #156	; (adr r3, 8006008 <TIM4_IRQHandler+0x638>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa fbdc 	bl	800072c <__aeabi_ddiv>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4935      	ldr	r1, [pc, #212]	; (8006050 <TIM4_IRQHandler+0x680>)
 8005f7a:	e9c1 2300 	strd	r2, r3, [r1]
			Ymaxfin = Ymax / SPEED_CALIBRATE;
 8005f7e:	4b2a      	ldr	r3, [pc, #168]	; (8006028 <TIM4_IRQHandler+0x658>)
 8005f80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f84:	a320      	add	r3, pc, #128	; (adr r3, 8006008 <TIM4_IRQHandler+0x638>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fa fbcf 	bl	800072c <__aeabi_ddiv>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4930      	ldr	r1, [pc, #192]	; (8006054 <TIM4_IRQHandler+0x684>)
 8005f94:	e9c1 2300 	strd	r2, r3, [r1]
			V = sqrt(pow(Xsum, 2) + pow(Ysum, 2));  // Скалярное значение скорости
 8005f98:	4b29      	ldr	r3, [pc, #164]	; (8006040 <TIM4_IRQHandler+0x670>)
 8005f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fa6:	f007 fe0f 	bl	800dbc8 <pow>
 8005faa:	4604      	mov	r4, r0
 8005fac:	460d      	mov	r5, r1
 8005fae:	4b26      	ldr	r3, [pc, #152]	; (8006048 <TIM4_IRQHandler+0x678>)
 8005fb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fbc:	f007 fe04 	bl	800dbc8 <pow>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa f8d0 	bl	800016c <__adddf3>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f007 fea4 	bl	800dd20 <sqrt>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	490f      	ldr	r1, [pc, #60]	; (800601c <TIM4_IRQHandler+0x64c>)
 8005fde:	e9c1 2300 	strd	r2, r3, [r1]
			if ( V == 0) {
 8005fe2:	4b0e      	ldr	r3, [pc, #56]	; (800601c <TIM4_IRQHandler+0x64c>)
 8005fe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	f7fa fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d033      	beq.n	8006062 <TIM4_IRQHandler+0x692>
			  A = 0;
 8005ffa:	4917      	ldr	r1, [pc, #92]	; (8006058 <TIM4_IRQHandler+0x688>)
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	e02a      	b.n	800605c <TIM4_IRQHandler+0x68c>
 8006006:	bf00      	nop
 8006008:	20000000 	.word	0x20000000
 800600c:	40476f5c 	.word	0x40476f5c
 8006010:	20000600 	.word	0x20000600
 8006014:	20000dd8 	.word	0x20000dd8
 8006018:	200005f0 	.word	0x200005f0
 800601c:	20000640 	.word	0x20000640
 8006020:	200005c0 	.word	0x200005c0
 8006024:	200005d8 	.word	0x200005d8
 8006028:	20000990 	.word	0x20000990
 800602c:	200007fc 	.word	0x200007fc
 8006030:	20000998 	.word	0x20000998
 8006034:	2000065c 	.word	0x2000065c
 8006038:	20000b38 	.word	0x20000b38
 800603c:	200005e0 	.word	0x200005e0
 8006040:	20000650 	.word	0x20000650
 8006044:	40590000 	.word	0x40590000
 8006048:	20000598 	.word	0x20000598
 800604c:	200005a8 	.word	0x200005a8
 8006050:	20000b30 	.word	0x20000b30
 8006054:	200007f0 	.word	0x200007f0
 8006058:	200005d0 	.word	0x200005d0
 800605c:	e9c1 2300 	strd	r2, r3, [r1]
 8006060:	e039      	b.n	80060d6 <TIM4_IRQHandler+0x706>
			} else {
				A = acos( Ysum / V ) * 180 / 3.1415926; // Угол
 8006062:	4b73      	ldr	r3, [pc, #460]	; (8006230 <TIM4_IRQHandler+0x860>)
 8006064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006068:	4b72      	ldr	r3, [pc, #456]	; (8006234 <TIM4_IRQHandler+0x864>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa fb5d 	bl	800072c <__aeabi_ddiv>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4610      	mov	r0, r2
 8006078:	4619      	mov	r1, r3
 800607a:	f007 fd77 	bl	800db6c <acos>
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	4b6d      	ldr	r3, [pc, #436]	; (8006238 <TIM4_IRQHandler+0x868>)
 8006084:	f7fa fa28 	bl	80004d8 <__aeabi_dmul>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4610      	mov	r0, r2
 800608e:	4619      	mov	r1, r3
 8006090:	a365      	add	r3, pc, #404	; (adr r3, 8006228 <TIM4_IRQHandler+0x858>)
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f7fa fb49 	bl	800072c <__aeabi_ddiv>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4967      	ldr	r1, [pc, #412]	; (800623c <TIM4_IRQHandler+0x86c>)
 80060a0:	e9c1 2300 	strd	r2, r3, [r1]
				if (Xsum < 0) {
 80060a4:	4b66      	ldr	r3, [pc, #408]	; (8006240 <TIM4_IRQHandler+0x870>)
 80060a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	f7fa fc83 	bl	80009bc <__aeabi_dcmplt>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00c      	beq.n	80060d6 <TIM4_IRQHandler+0x706>
					A = 360 - A; // III, IV квадранты
 80060bc:	4b5f      	ldr	r3, [pc, #380]	; (800623c <TIM4_IRQHandler+0x86c>)
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	495f      	ldr	r1, [pc, #380]	; (8006244 <TIM4_IRQHandler+0x874>)
 80060c8:	f7fa f84e 	bl	8000168 <__aeabi_dsub>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	495a      	ldr	r1, [pc, #360]	; (800623c <TIM4_IRQHandler+0x86c>)
 80060d2:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			measCount = 0;
 80060d6:	4b5c      	ldr	r3, [pc, #368]	; (8006248 <TIM4_IRQHandler+0x878>)
 80060d8:	2200      	movs	r2, #0
 80060da:	801a      	strh	r2, [r3, #0]
			readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 80060dc:	4b5b      	ldr	r3, [pc, #364]	; (800624c <TIM4_IRQHandler+0x87c>)
 80060de:	2201      	movs	r2, #1
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	e099      	b.n	8006218 <TIM4_IRQHandler+0x848>
		} else {
			if ((calibrateMode > 0) && (measCount == 1)) {  // Режим калибровки/тестирования
 80060e4:	4b5a      	ldr	r3, [pc, #360]	; (8006250 <TIM4_IRQHandler+0x880>)
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d013      	beq.n	8006114 <TIM4_IRQHandler+0x744>
 80060ec:	4b56      	ldr	r3, [pc, #344]	; (8006248 <TIM4_IRQHandler+0x878>)
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d10f      	bne.n	8006114 <TIM4_IRQHandler+0x744>
				HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 80060f4:	4857      	ldr	r0, [pc, #348]	; (8006254 <TIM4_IRQHandler+0x884>)
 80060f6:	f002 ffbd 	bl	8009074 <HAL_TIM_Base_Stop_IT>
				measCount = 0;
 80060fa:	4b53      	ldr	r3, [pc, #332]	; (8006248 <TIM4_IRQHandler+0x878>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	801a      	strh	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
					SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8006100:	4b55      	ldr	r3, [pc, #340]	; (8006258 <TIM4_IRQHandler+0x888>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a54      	ldr	r2, [pc, #336]	; (8006258 <TIM4_IRQHandler+0x888>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	6013      	str	r3, [r2, #0]
				#endif
				readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 800610c:	4b4f      	ldr	r3, [pc, #316]	; (800624c <TIM4_IRQHandler+0x87c>)
 800610e:	2201      	movs	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e081      	b.n	8006218 <TIM4_IRQHandler+0x848>
			} else {
				switch (currentMode++) {
 8006114:	4b51      	ldr	r3, [pc, #324]	; (800625c <TIM4_IRQHandler+0x88c>)
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	b291      	uxth	r1, r2
 800611c:	4a4f      	ldr	r2, [pc, #316]	; (800625c <TIM4_IRQHandler+0x88c>)
 800611e:	8011      	strh	r1, [r2, #0]
 8006120:	2b03      	cmp	r3, #3
 8006122:	d871      	bhi.n	8006208 <TIM4_IRQHandler+0x838>
 8006124:	a201      	add	r2, pc, #4	; (adr r2, 800612c <TIM4_IRQHandler+0x75c>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	0800613d 	.word	0x0800613d
 8006130:	0800617f 	.word	0x0800617f
 8006134:	080061ad 	.word	0x080061ad
 8006138:	080061db 	.word	0x080061db
					case 0: { 					// Z1 (transmit) > Z3 (receive) Y1
						TP_PULSE
 800613c:	2201      	movs	r2, #1
 800613e:	2104      	movs	r1, #4
 8006140:	4847      	ldr	r0, [pc, #284]	; (8006260 <TIM4_IRQHandler+0x890>)
 8006142:	f001 fb9b 	bl	800787c <HAL_GPIO_WritePin>
 8006146:	2200      	movs	r2, #0
 8006148:	2104      	movs	r1, #4
 800614a:	4845      	ldr	r0, [pc, #276]	; (8006260 <TIM4_IRQHandler+0x890>)
 800614c:	f001 fb96 	bl	800787c <HAL_GPIO_WritePin>
						TIM3->ARR = C_1; 		// Коррекция для таймера запуска измерения Z13
 8006150:	4b44      	ldr	r3, [pc, #272]	; (8006264 <TIM4_IRQHandler+0x894>)
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	4b44      	ldr	r3, [pc, #272]	; (8006268 <TIM4_IRQHandler+0x898>)
 8006156:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ3receive 			// Turn on multiplexer for input Z2 channel.
 8006158:	4b44      	ldr	r3, [pc, #272]	; (800626c <TIM4_IRQHandler+0x89c>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4a43      	ldr	r2, [pc, #268]	; (800626c <TIM4_IRQHandler+0x89c>)
 800615e:	f023 0308 	bic.w	r3, r3, #8
 8006162:	60d3      	str	r3, [r2, #12]
 8006164:	4b3e      	ldr	r3, [pc, #248]	; (8006260 <TIM4_IRQHandler+0x890>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800616c:	4a3c      	ldr	r2, [pc, #240]	; (8006260 <TIM4_IRQHandler+0x890>)
 800616e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006172:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1); // Генерация для пьезокристалла в 1 канале
 8006174:	2100      	movs	r1, #0
 8006176:	483e      	ldr	r0, [pc, #248]	; (8006270 <TIM4_IRQHandler+0x8a0>)
 8006178:	f003 f802 	bl	8009180 <HAL_TIM_OC_Start>
						break;
 800617c:	e044      	b.n	8006208 <TIM4_IRQHandler+0x838>
					}
					case 1: { 					// Z3 (transmit) > Z1 (receive) Y2
						//TP_PULSE
						TIM3->ARR = C_4; 		// Коррекция для таймера запуска измерения Z31
 800617e:	4b3d      	ldr	r3, [pc, #244]	; (8006274 <TIM4_IRQHandler+0x8a4>)
 8006180:	881a      	ldrh	r2, [r3, #0]
 8006182:	4b39      	ldr	r3, [pc, #228]	; (8006268 <TIM4_IRQHandler+0x898>)
 8006184:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ1receive 			// Turn on multiplexer for input Z1 channel.
 8006186:	4b39      	ldr	r3, [pc, #228]	; (800626c <TIM4_IRQHandler+0x89c>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	4a38      	ldr	r2, [pc, #224]	; (800626c <TIM4_IRQHandler+0x89c>)
 800618c:	f023 0302 	bic.w	r3, r3, #2
 8006190:	60d3      	str	r3, [r2, #12]
 8006192:	4b33      	ldr	r3, [pc, #204]	; (8006260 <TIM4_IRQHandler+0x890>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f023 030f 	bic.w	r3, r3, #15
 800619a:	4a31      	ldr	r2, [pc, #196]	; (8006260 <TIM4_IRQHandler+0x890>)
 800619c:	f043 0304 	orr.w	r3, r3, #4
 80061a0:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // Генерация для пьезокристалла в 3 канале
 80061a2:	2108      	movs	r1, #8
 80061a4:	4832      	ldr	r0, [pc, #200]	; (8006270 <TIM4_IRQHandler+0x8a0>)
 80061a6:	f002 ffeb 	bl	8009180 <HAL_TIM_OC_Start>
						break;
 80061aa:	e02d      	b.n	8006208 <TIM4_IRQHandler+0x838>
					}
					case 2: { 					// Z2 (transmit) > Z4 (receive) X1
						//LED_PULSE
						TIM3->ARR = C_2; 		// Коррекция для таймера запуска измерения Z24
 80061ac:	4b32      	ldr	r3, [pc, #200]	; (8006278 <TIM4_IRQHandler+0x8a8>)
 80061ae:	881a      	ldrh	r2, [r3, #0]
 80061b0:	4b2d      	ldr	r3, [pc, #180]	; (8006268 <TIM4_IRQHandler+0x898>)
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ4receive 			// Turn on multiplexer for input Z4 channel.
 80061b4:	4b2d      	ldr	r3, [pc, #180]	; (800626c <TIM4_IRQHandler+0x89c>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	4a2c      	ldr	r2, [pc, #176]	; (800626c <TIM4_IRQHandler+0x89c>)
 80061ba:	f023 0310 	bic.w	r3, r3, #16
 80061be:	60d3      	str	r3, [r2, #12]
 80061c0:	4b27      	ldr	r3, [pc, #156]	; (8006260 <TIM4_IRQHandler+0x890>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061c8:	4a25      	ldr	r2, [pc, #148]	; (8006260 <TIM4_IRQHandler+0x890>)
 80061ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ce:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);	// Генерация для пьезокристалла в 2 канале
 80061d0:	2104      	movs	r1, #4
 80061d2:	4827      	ldr	r0, [pc, #156]	; (8006270 <TIM4_IRQHandler+0x8a0>)
 80061d4:	f002 ffd4 	bl	8009180 <HAL_TIM_OC_Start>
						break;
 80061d8:	e016      	b.n	8006208 <TIM4_IRQHandler+0x838>
					}
					case 3: { 					// Z4 (transmit) > Z3 (receive) X2
						//LED_PULSE
						TIM3->ARR = C_3; 		// Коррекция для таймера запуска измерения Z42
 80061da:	4b28      	ldr	r3, [pc, #160]	; (800627c <TIM4_IRQHandler+0x8ac>)
 80061dc:	881a      	ldrh	r2, [r3, #0]
 80061de:	4b22      	ldr	r3, [pc, #136]	; (8006268 <TIM4_IRQHandler+0x898>)
 80061e0:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ2receive 			// Turn on multiplexer for input Z3 channel.
 80061e2:	4b22      	ldr	r3, [pc, #136]	; (800626c <TIM4_IRQHandler+0x89c>)
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	4a21      	ldr	r2, [pc, #132]	; (800626c <TIM4_IRQHandler+0x89c>)
 80061e8:	f023 0304 	bic.w	r3, r3, #4
 80061ec:	60d3      	str	r3, [r2, #12]
 80061ee:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <TIM4_IRQHandler+0x890>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f6:	4a1a      	ldr	r2, [pc, #104]	; (8006260 <TIM4_IRQHandler+0x890>)
 80061f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061fc:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);	// Генерация для пьезокристалла в 4 канале
 80061fe:	210c      	movs	r1, #12
 8006200:	481b      	ldr	r0, [pc, #108]	; (8006270 <TIM4_IRQHandler+0x8a0>)
 8006202:	f002 ffbd 	bl	8009180 <HAL_TIM_OC_Start>
						break;
 8006206:	bf00      	nop
					}
				}
				/* Запускаем таймер захвата */
				START_CAPTURE
 8006208:	2100      	movs	r1, #0
 800620a:	481d      	ldr	r0, [pc, #116]	; (8006280 <TIM4_IRQHandler+0x8b0>)
 800620c:	f003 f916 	bl	800943c <HAL_TIM_IC_Start_IT>
 8006210:	2104      	movs	r1, #4
 8006212:	481b      	ldr	r0, [pc, #108]	; (8006280 <TIM4_IRQHandler+0x8b0>)
 8006214:	f003 f912 	bl	800943c <HAL_TIM_IC_Start_IT>
			}
		}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006218:	480e      	ldr	r0, [pc, #56]	; (8006254 <TIM4_IRQHandler+0x884>)
 800621a:	f003 fb16 	bl	800984a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800621e:	bf00      	nop
 8006220:	3748      	adds	r7, #72	; 0x48
 8006222:	46bd      	mov	sp, r7
 8006224:	bdb0      	pop	{r4, r5, r7, pc}
 8006226:	bf00      	nop
 8006228:	4d12d84a 	.word	0x4d12d84a
 800622c:	400921fb 	.word	0x400921fb
 8006230:	20000598 	.word	0x20000598
 8006234:	20000640 	.word	0x20000640
 8006238:	40668000 	.word	0x40668000
 800623c:	200005d0 	.word	0x200005d0
 8006240:	20000650 	.word	0x20000650
 8006244:	40768000 	.word	0x40768000
 8006248:	200005c8 	.word	0x200005c8
 800624c:	20000594 	.word	0x20000594
 8006250:	20000b2c 	.word	0x20000b2c
 8006254:	20001254 	.word	0x20001254
 8006258:	e000e010 	.word	0xe000e010
 800625c:	2000098e 	.word	0x2000098e
 8006260:	40010800 	.word	0x40010800
 8006264:	200005ec 	.word	0x200005ec
 8006268:	40000400 	.word	0x40000400
 800626c:	40010c00 	.word	0x40010c00
 8006270:	20001394 	.word	0x20001394
 8006274:	200005b8 	.word	0x200005b8
 8006278:	200005b4 	.word	0x200005b4
 800627c:	2000098c 	.word	0x2000098c
 8006280:	200013dc 	.word	0x200013dc

08006284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
	return 1;
 8006288:	2301      	movs	r3, #1
}
 800628a:	4618      	mov	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr

08006292 <_kill>:

int _kill(int pid, int sig)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800629c:	f004 fd92 	bl	800adc4 <__errno>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2216      	movs	r2, #22
 80062a4:	601a      	str	r2, [r3, #0]
	return -1;
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <_exit>:

void _exit (int status)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80062ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff ffe7 	bl	8006292 <_kill>
	while (1) {}		/* Make sure we hang here */
 80062c4:	e7fe      	b.n	80062c4 <_exit+0x12>

080062c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	e00a      	b.n	80062ee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80062d8:	f3af 8000 	nop.w
 80062dc:	4601      	mov	r1, r0
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	60ba      	str	r2, [r7, #8]
 80062e4:	b2ca      	uxtb	r2, r1
 80062e6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3301      	adds	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	dbf0      	blt.n	80062d8 <_read+0x12>
	}

return len;
 80062f6:	687b      	ldr	r3, [r7, #4]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	e009      	b.n	8006326 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	60ba      	str	r2, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	3301      	adds	r3, #1
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	dbf1      	blt.n	8006312 <_write+0x12>
	}
	return len;
 800632e:	687b      	ldr	r3, [r7, #4]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <_close>:

int _close(int file)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
	return -1;
 8006340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr

0800634e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800635e:	605a      	str	r2, [r3, #4]
	return 0;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <_isatty>:

int _isatty(int file)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
	return 1;
 8006374:	2301      	movs	r3, #1
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr

08006380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
	return 0;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063a0:	4a14      	ldr	r2, [pc, #80]	; (80063f4 <_sbrk+0x5c>)
 80063a2:	4b15      	ldr	r3, [pc, #84]	; (80063f8 <_sbrk+0x60>)
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80063ac:	4b13      	ldr	r3, [pc, #76]	; (80063fc <_sbrk+0x64>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80063b4:	4b11      	ldr	r3, [pc, #68]	; (80063fc <_sbrk+0x64>)
 80063b6:	4a12      	ldr	r2, [pc, #72]	; (8006400 <_sbrk+0x68>)
 80063b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80063ba:	4b10      	ldr	r3, [pc, #64]	; (80063fc <_sbrk+0x64>)
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4413      	add	r3, r2
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d207      	bcs.n	80063d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80063c8:	f004 fcfc 	bl	800adc4 <__errno>
 80063cc:	4603      	mov	r3, r0
 80063ce:	220c      	movs	r2, #12
 80063d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80063d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d6:	e009      	b.n	80063ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80063d8:	4b08      	ldr	r3, [pc, #32]	; (80063fc <_sbrk+0x64>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80063de:	4b07      	ldr	r3, [pc, #28]	; (80063fc <_sbrk+0x64>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4413      	add	r3, r2
 80063e6:	4a05      	ldr	r2, [pc, #20]	; (80063fc <_sbrk+0x64>)
 80063e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80063ea:	68fb      	ldr	r3, [r7, #12]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20005000 	.word	0x20005000
 80063f8:	00000400 	.word	0x00000400
 80063fc:	2000057c 	.word	0x2000057c
 8006400:	20001460 	.word	0x20001460

08006404 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006408:	bf00      	nop
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8006418:	4b22      	ldr	r3, [pc, #136]	; (80064a4 <WIZCHIP_READ+0x94>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800641e:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <WIZCHIP_READ+0x94>)
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006424:	4b1f      	ldr	r3, [pc, #124]	; (80064a4 <WIZCHIP_READ+0x94>)
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <WIZCHIP_READ+0x24>
 800642c:	4b1d      	ldr	r3, [pc, #116]	; (80064a4 <WIZCHIP_READ+0x94>)
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	2b00      	cmp	r3, #0
 8006432:	d114      	bne.n	800645e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006434:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <WIZCHIP_READ+0x94>)
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	0c12      	lsrs	r2, r2, #16
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	4610      	mov	r0, r2
 8006440:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006442:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <WIZCHIP_READ+0x94>)
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	0a12      	lsrs	r2, r2, #8
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	4610      	mov	r0, r2
 800644e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006450:	4b14      	ldr	r3, [pc, #80]	; (80064a4 <WIZCHIP_READ+0x94>)
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
 800645c:	e011      	b.n	8006482 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	b2db      	uxtb	r3, r3
 8006464:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	0a1b      	lsrs	r3, r3, #8
 800646a:	b2db      	uxtb	r3, r3
 800646c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006474:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <WIZCHIP_READ+0x94>)
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	f107 020c 	add.w	r2, r7, #12
 800647c:	2103      	movs	r1, #3
 800647e:	4610      	mov	r0, r2
 8006480:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <WIZCHIP_READ+0x94>)
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	4798      	blx	r3
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <WIZCHIP_READ+0x94>)
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006492:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <WIZCHIP_READ+0x94>)
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	4798      	blx	r3
   return ret;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	2000013c 	.word	0x2000013c

080064a8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80064b4:	4b22      	ldr	r3, [pc, #136]	; (8006540 <WIZCHIP_WRITE+0x98>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80064ba:	4b21      	ldr	r3, [pc, #132]	; (8006540 <WIZCHIP_WRITE+0x98>)
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f043 0304 	orr.w	r3, r3, #4
 80064c6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <WIZCHIP_WRITE+0x98>)
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d119      	bne.n	8006504 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80064d0:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <WIZCHIP_WRITE+0x98>)
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	0c12      	lsrs	r2, r2, #16
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	4610      	mov	r0, r2
 80064dc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80064de:	4b18      	ldr	r3, [pc, #96]	; (8006540 <WIZCHIP_WRITE+0x98>)
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	0a12      	lsrs	r2, r2, #8
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	4610      	mov	r0, r2
 80064ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80064ec:	4b14      	ldr	r3, [pc, #80]	; (8006540 <WIZCHIP_WRITE+0x98>)
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80064f8:	4b11      	ldr	r3, [pc, #68]	; (8006540 <WIZCHIP_WRITE+0x98>)
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	78fa      	ldrb	r2, [r7, #3]
 80064fe:	4610      	mov	r0, r2
 8006500:	4798      	blx	r3
 8006502:	e013      	b.n	800652c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	b2db      	uxtb	r3, r3
 800650a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	b2db      	uxtb	r3, r3
 8006512:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800651e:	4b08      	ldr	r3, [pc, #32]	; (8006540 <WIZCHIP_WRITE+0x98>)
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	f107 020c 	add.w	r2, r7, #12
 8006526:	2104      	movs	r1, #4
 8006528:	4610      	mov	r0, r2
 800652a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800652c:	4b04      	ldr	r3, [pc, #16]	; (8006540 <WIZCHIP_WRITE+0x98>)
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006532:	4b03      	ldr	r3, [pc, #12]	; (8006540 <WIZCHIP_WRITE+0x98>)
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	4798      	blx	r3
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	2000013c 	.word	0x2000013c

08006544 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8006552:	4b2b      	ldr	r3, [pc, #172]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006558:	4b29      	ldr	r3, [pc, #164]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800655e:	4b28      	ldr	r3, [pc, #160]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <WIZCHIP_READ_BUF+0x2a>
 8006566:	4b26      	ldr	r3, [pc, #152]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	2b00      	cmp	r3, #0
 800656c:	d126      	bne.n	80065bc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800656e:	4b24      	ldr	r3, [pc, #144]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	0c12      	lsrs	r2, r2, #16
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	4610      	mov	r0, r2
 800657a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800657c:	4b20      	ldr	r3, [pc, #128]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	0a12      	lsrs	r2, r2, #8
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	4610      	mov	r0, r2
 8006588:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800658a:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	4610      	mov	r0, r2
 8006594:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006596:	2300      	movs	r3, #0
 8006598:	82fb      	strh	r3, [r7, #22]
 800659a:	e00a      	b.n	80065b2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800659c:	4b18      	ldr	r3, [pc, #96]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	8afa      	ldrh	r2, [r7, #22]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	188c      	adds	r4, r1, r2
 80065a6:	4798      	blx	r3
 80065a8:	4603      	mov	r3, r0
 80065aa:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80065ac:	8afb      	ldrh	r3, [r7, #22]
 80065ae:	3301      	adds	r3, #1
 80065b0:	82fb      	strh	r3, [r7, #22]
 80065b2:	8afa      	ldrh	r2, [r7, #22]
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d3f0      	bcc.n	800659c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80065ba:	e017      	b.n	80065ec <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	0c1b      	lsrs	r3, r3, #16
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	0a1b      	lsrs	r3, r3, #8
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80065d2:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	f107 0210 	add.w	r2, r7, #16
 80065da:	2103      	movs	r1, #3
 80065dc:	4610      	mov	r0, r2
 80065de:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	88fa      	ldrh	r2, [r7, #6]
 80065e6:	4611      	mov	r1, r2
 80065e8:	68b8      	ldr	r0, [r7, #8]
 80065ea:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80065f2:	4b03      	ldr	r3, [pc, #12]	; (8006600 <WIZCHIP_READ_BUF+0xbc>)
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	4798      	blx	r3
}
 80065f8:	bf00      	nop
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd90      	pop	{r4, r7, pc}
 8006600:	2000013c 	.word	0x2000013c

08006604 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	4613      	mov	r3, r2
 8006610:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8006612:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006618:	4b29      	ldr	r3, [pc, #164]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f043 0304 	orr.w	r3, r3, #4
 8006624:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006626:	4b26      	ldr	r3, [pc, #152]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d126      	bne.n	800667c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800662e:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	0c12      	lsrs	r2, r2, #16
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	4610      	mov	r0, r2
 800663a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800663c:	4b20      	ldr	r3, [pc, #128]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	0a12      	lsrs	r2, r2, #8
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	4610      	mov	r0, r2
 8006648:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	4610      	mov	r0, r2
 8006654:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006656:	2300      	movs	r3, #0
 8006658:	82fb      	strh	r3, [r7, #22]
 800665a:	e00a      	b.n	8006672 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800665c:	4b18      	ldr	r3, [pc, #96]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	8afa      	ldrh	r2, [r7, #22]
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	440a      	add	r2, r1
 8006666:	7812      	ldrb	r2, [r2, #0]
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800666c:	8afb      	ldrh	r3, [r7, #22]
 800666e:	3301      	adds	r3, #1
 8006670:	82fb      	strh	r3, [r7, #22]
 8006672:	8afa      	ldrh	r2, [r7, #22]
 8006674:	88fb      	ldrh	r3, [r7, #6]
 8006676:	429a      	cmp	r2, r3
 8006678:	d3f0      	bcc.n	800665c <WIZCHIP_WRITE_BUF+0x58>
 800667a:	e017      	b.n	80066ac <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	0c1b      	lsrs	r3, r3, #16
 8006680:	b2db      	uxtb	r3, r3
 8006682:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	b2db      	uxtb	r3, r3
 800668a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	f107 0210 	add.w	r2, r7, #16
 800669a:	2103      	movs	r1, #3
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80066a0:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	88fa      	ldrh	r2, [r7, #6]
 80066a6:	4611      	mov	r1, r2
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80066ac:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80066b2:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <WIZCHIP_WRITE_BUF+0xbc>)
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	4798      	blx	r3
}
 80066b8:	bf00      	nop
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	2000013c 	.word	0x2000013c

080066c4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	81fb      	strh	r3, [r7, #14]
 80066d2:	2300      	movs	r3, #0
 80066d4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	3301      	adds	r3, #1
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fe94 	bl	8006410 <WIZCHIP_READ>
 80066e8:	4603      	mov	r3, r0
 80066ea:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80066ec:	89bb      	ldrh	r3, [r7, #12]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	b29c      	uxth	r4, r3
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	3301      	adds	r3, #1
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fe86 	bl	8006410 <WIZCHIP_READ>
 8006704:	4603      	mov	r3, r0
 8006706:	b29b      	uxth	r3, r3
 8006708:	4423      	add	r3, r4
 800670a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800670c:	89bb      	ldrh	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01a      	beq.n	8006748 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	3301      	adds	r3, #1
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fe76 	bl	8006410 <WIZCHIP_READ>
 8006724:	4603      	mov	r3, r0
 8006726:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8006728:	89fb      	ldrh	r3, [r7, #14]
 800672a:	021b      	lsls	r3, r3, #8
 800672c:	b29c      	uxth	r4, r3
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	3301      	adds	r3, #1
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff fe68 	bl	8006410 <WIZCHIP_READ>
 8006740:	4603      	mov	r3, r0
 8006742:	b29b      	uxth	r3, r3
 8006744:	4423      	add	r3, r4
 8006746:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8006748:	89fa      	ldrh	r2, [r7, #14]
 800674a:	89bb      	ldrh	r3, [r7, #12]
 800674c:	429a      	cmp	r2, r3
 800674e:	d1c2      	bne.n	80066d6 <getSn_TX_FSR+0x12>
   return val;
 8006750:	89fb      	ldrh	r3, [r7, #14]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}

0800675a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800675a:	b590      	push	{r4, r7, lr}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	4603      	mov	r3, r0
 8006762:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8006764:	2300      	movs	r3, #0
 8006766:	81fb      	strh	r3, [r7, #14]
 8006768:	2300      	movs	r3, #0
 800676a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	3301      	adds	r3, #1
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff fe49 	bl	8006410 <WIZCHIP_READ>
 800677e:	4603      	mov	r3, r0
 8006780:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8006782:	89bb      	ldrh	r3, [r7, #12]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	b29c      	uxth	r4, r3
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	3301      	adds	r3, #1
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fe3b 	bl	8006410 <WIZCHIP_READ>
 800679a:	4603      	mov	r3, r0
 800679c:	b29b      	uxth	r3, r3
 800679e:	4423      	add	r3, r4
 80067a0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80067a2:	89bb      	ldrh	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01a      	beq.n	80067de <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	3301      	adds	r3, #1
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fe2b 	bl	8006410 <WIZCHIP_READ>
 80067ba:	4603      	mov	r3, r0
 80067bc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80067be:	89fb      	ldrh	r3, [r7, #14]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	b29c      	uxth	r4, r3
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	3301      	adds	r3, #1
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fe1d 	bl	8006410 <WIZCHIP_READ>
 80067d6:	4603      	mov	r3, r0
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4423      	add	r3, r4
 80067dc:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80067de:	89fa      	ldrh	r2, [r7, #14]
 80067e0:	89bb      	ldrh	r3, [r7, #12]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d1c2      	bne.n	800676c <getSn_RX_RSR+0x12>
   return val;
 80067e6:	89fb      	ldrh	r3, [r7, #14]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd90      	pop	{r4, r7, pc}

080067f0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80067f0:	b590      	push	{r4, r7, lr}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	6039      	str	r1, [r7, #0]
 80067fa:	71fb      	strb	r3, [r7, #7]
 80067fc:	4613      	mov	r3, r2
 80067fe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8006808:	88bb      	ldrh	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d048      	beq.n	80068a0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	3301      	adds	r3, #1
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fdf8 	bl	8006410 <WIZCHIP_READ>
 8006820:	4603      	mov	r3, r0
 8006822:	b29b      	uxth	r3, r3
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	b29c      	uxth	r4, r3
 8006828:	79fb      	ldrb	r3, [r7, #7]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	3301      	adds	r3, #1
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff fdeb 	bl	8006410 <WIZCHIP_READ>
 800683a:	4603      	mov	r3, r0
 800683c:	b29b      	uxth	r3, r3
 800683e:	4423      	add	r3, r4
 8006840:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8006842:	89fb      	ldrh	r3, [r7, #14]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	79fa      	ldrb	r2, [r7, #7]
 8006848:	0092      	lsls	r2, r2, #2
 800684a:	3202      	adds	r2, #2
 800684c:	00d2      	lsls	r2, r2, #3
 800684e:	4413      	add	r3, r2
 8006850:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8006852:	88bb      	ldrh	r3, [r7, #4]
 8006854:	461a      	mov	r2, r3
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	f7ff fed3 	bl	8006604 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800685e:	89fa      	ldrh	r2, [r7, #14]
 8006860:	88bb      	ldrh	r3, [r7, #4]
 8006862:	4413      	add	r3, r2
 8006864:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	3301      	adds	r3, #1
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006872:	461a      	mov	r2, r3
 8006874:	89fb      	ldrh	r3, [r7, #14]
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	b29b      	uxth	r3, r3
 800687a:	b2db      	uxtb	r3, r3
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f7ff fe12 	bl	80064a8 <WIZCHIP_WRITE>
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	3301      	adds	r3, #1
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8006890:	461a      	mov	r2, r3
 8006892:	89fb      	ldrh	r3, [r7, #14]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f7ff fe05 	bl	80064a8 <WIZCHIP_WRITE>
 800689e:	e000      	b.n	80068a2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80068a0:	bf00      	nop
}
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd90      	pop	{r4, r7, pc}

080068a8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	6039      	str	r1, [r7, #0]
 80068b2:	71fb      	strb	r3, [r7, #7]
 80068b4:	4613      	mov	r3, r2
 80068b6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80068c0:	88bb      	ldrh	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d048      	beq.n	8006958 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	3301      	adds	r3, #1
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff fd9c 	bl	8006410 <WIZCHIP_READ>
 80068d8:	4603      	mov	r3, r0
 80068da:	b29b      	uxth	r3, r3
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	b29c      	uxth	r4, r3
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	3301      	adds	r3, #1
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fd8f 	bl	8006410 <WIZCHIP_READ>
 80068f2:	4603      	mov	r3, r0
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	4423      	add	r3, r4
 80068f8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80068fa:	89fb      	ldrh	r3, [r7, #14]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	79fa      	ldrb	r2, [r7, #7]
 8006900:	0092      	lsls	r2, r2, #2
 8006902:	3203      	adds	r2, #3
 8006904:	00d2      	lsls	r2, r2, #3
 8006906:	4413      	add	r3, r2
 8006908:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800690a:	88bb      	ldrh	r3, [r7, #4]
 800690c:	461a      	mov	r2, r3
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	68b8      	ldr	r0, [r7, #8]
 8006912:	f7ff fe17 	bl	8006544 <WIZCHIP_READ_BUF>
   ptr += len;
 8006916:	89fa      	ldrh	r2, [r7, #14]
 8006918:	88bb      	ldrh	r3, [r7, #4]
 800691a:	4413      	add	r3, r2
 800691c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	3301      	adds	r3, #1
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800692a:	461a      	mov	r2, r3
 800692c:	89fb      	ldrh	r3, [r7, #14]
 800692e:	0a1b      	lsrs	r3, r3, #8
 8006930:	b29b      	uxth	r3, r3
 8006932:	b2db      	uxtb	r3, r3
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f7ff fdb6 	bl	80064a8 <WIZCHIP_WRITE>
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	3301      	adds	r3, #1
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8006948:	461a      	mov	r2, r3
 800694a:	89fb      	ldrh	r3, [r7, #14]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	4619      	mov	r1, r3
 8006950:	4610      	mov	r0, r2
 8006952:	f7ff fda9 	bl	80064a8 <WIZCHIP_WRITE>
 8006956:	e000      	b.n	800695a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8006958:	bf00      	nop
}
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}

08006960 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	460a      	mov	r2, r1
 800696a:	71fb      	strb	r3, [r7, #7]
 800696c:	4613      	mov	r3, r2
 800696e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	3301      	adds	r3, #1
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff fd45 	bl	8006410 <WIZCHIP_READ>
 8006986:	4603      	mov	r3, r0
 8006988:	b29b      	uxth	r3, r3
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	b29c      	uxth	r4, r3
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	3301      	adds	r3, #1
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fd38 	bl	8006410 <WIZCHIP_READ>
 80069a0:	4603      	mov	r3, r0
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	4423      	add	r3, r4
 80069a6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80069a8:	89fa      	ldrh	r2, [r7, #14]
 80069aa:	88bb      	ldrh	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	3301      	adds	r3, #1
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80069bc:	461a      	mov	r2, r3
 80069be:	89fb      	ldrh	r3, [r7, #14]
 80069c0:	0a1b      	lsrs	r3, r3, #8
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	4619      	mov	r1, r3
 80069c8:	4610      	mov	r0, r2
 80069ca:	f7ff fd6d 	bl	80064a8 <WIZCHIP_WRITE>
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	3301      	adds	r3, #1
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80069da:	461a      	mov	r2, r3
 80069dc:	89fb      	ldrh	r3, [r7, #14]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	4619      	mov	r1, r3
 80069e2:	4610      	mov	r0, r2
 80069e4:	f7ff fd60 	bl	80064a8 <WIZCHIP_WRITE>
}
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd90      	pop	{r4, r7, pc}

080069f0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	bf00      	nop
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	bf00      	nop
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr

08006a14 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	bf00      	nop
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bc80      	pop	{r7}
 8006a1e:	4770      	bx	lr

08006a20 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr

08006a54 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bc80      	pop	{r7}
 8006a60:	4770      	bx	lr

08006a62 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	4603      	mov	r3, r0
 8006a6a:	71fb      	strb	r3, [r7, #7]
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	807b      	strh	r3, [r7, #2]
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	807b      	strh	r3, [r7, #2]
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
	...

08006aa4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <reg_wizchip_cs_cbfunc+0x16>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <reg_wizchip_cs_cbfunc+0x3c>)
 8006abc:	4a09      	ldr	r2, [pc, #36]	; (8006ae4 <reg_wizchip_cs_cbfunc+0x40>)
 8006abe:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <reg_wizchip_cs_cbfunc+0x3c>)
 8006ac2:	4a09      	ldr	r2, [pc, #36]	; (8006ae8 <reg_wizchip_cs_cbfunc+0x44>)
 8006ac4:	619a      	str	r2, [r3, #24]
 8006ac6:	e006      	b.n	8006ad6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8006ac8:	4a05      	ldr	r2, [pc, #20]	; (8006ae0 <reg_wizchip_cs_cbfunc+0x3c>)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8006ace:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <reg_wizchip_cs_cbfunc+0x3c>)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	6193      	str	r3, [r2, #24]
   }
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr
 8006ae0:	2000013c 	.word	0x2000013c
 8006ae4:	08006a09 	.word	0x08006a09
 8006ae8:	08006a15 	.word	0x08006a15

08006aec <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8006af6:	bf00      	nop
 8006af8:	4b0f      	ldr	r3, [pc, #60]	; (8006b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d0f9      	beq.n	8006af8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <reg_wizchip_spi_cbfunc+0x24>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8006b12:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <reg_wizchip_spi_cbfunc+0x50>)
 8006b14:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8006b16:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <reg_wizchip_spi_cbfunc+0x54>)
 8006b1a:	621a      	str	r2, [r3, #32]
 8006b1c:	e006      	b.n	8006b2c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8006b1e:	4a06      	ldr	r2, [pc, #24]	; (8006b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8006b24:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <reg_wizchip_spi_cbfunc+0x4c>)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	6213      	str	r3, [r2, #32]
   }
}
 8006b2a:	bf00      	nop
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	2000013c 	.word	0x2000013c
 8006b3c:	08006a55 	.word	0x08006a55
 8006b40:	08006a63 	.word	0x08006a63

08006b44 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8006b4e:	bf00      	nop
 8006b50:	4b0f      	ldr	r3, [pc, #60]	; (8006b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f9      	beq.n	8006b50 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <reg_wizchip_spiburst_cbfunc+0x24>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8006b68:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006b6a:	4a0a      	ldr	r2, [pc, #40]	; (8006b94 <reg_wizchip_spiburst_cbfunc+0x50>)
 8006b6c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8006b6e:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006b70:	4a09      	ldr	r2, [pc, #36]	; (8006b98 <reg_wizchip_spiburst_cbfunc+0x54>)
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28
 8006b74:	e006      	b.n	8006b84 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8006b76:	4a06      	ldr	r2, [pc, #24]	; (8006b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8006b7c:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8006b82:	bf00      	nop
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	2000013c 	.word	0x2000013c
 8006b94:	08006a77 	.word	0x08006a77
 8006b98:	08006a8d 	.word	0x08006a8d

08006b9c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8006ba2:	1d3b      	adds	r3, r7, #4
 8006ba4:	2206      	movs	r2, #6
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006bac:	f7ff fcca 	bl	8006544 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8006bb0:	f107 0314 	add.w	r3, r7, #20
 8006bb4:	2204      	movs	r2, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006bbc:	f7ff fcc2 	bl	8006544 <WIZCHIP_READ_BUF>
 8006bc0:	f107 0310 	add.w	r3, r7, #16
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006bcc:	f7ff fcba 	bl	8006544 <WIZCHIP_READ_BUF>
 8006bd0:	f107 030c 	add.w	r3, r7, #12
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006bdc:	f7ff fcb2 	bl	8006544 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8006be0:	2180      	movs	r1, #128	; 0x80
 8006be2:	2000      	movs	r0, #0
 8006be4:	f7ff fc60 	bl	80064a8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8006be8:	2000      	movs	r0, #0
 8006bea:	f7ff fc11 	bl	8006410 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8006bee:	1d3b      	adds	r3, r7, #4
 8006bf0:	2206      	movs	r2, #6
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006bf8:	f7ff fd04 	bl	8006604 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8006bfc:	f107 0314 	add.w	r3, r7, #20
 8006c00:	2204      	movs	r2, #4
 8006c02:	4619      	mov	r1, r3
 8006c04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006c08:	f7ff fcfc 	bl	8006604 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8006c0c:	f107 0310 	add.w	r3, r7, #16
 8006c10:	2204      	movs	r2, #4
 8006c12:	4619      	mov	r1, r3
 8006c14:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006c18:	f7ff fcf4 	bl	8006604 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8006c1c:	f107 030c 	add.w	r3, r7, #12
 8006c20:	2204      	movs	r2, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006c28:	f7ff fcec 	bl	8006604 <WIZCHIP_WRITE_BUF>
}
 8006c2c:	bf00      	nop
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8006c42:	f7ff ffab 	bl	8006b9c <wizchip_sw_reset>
   if(txsize)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d03b      	beq.n	8006cc4 <wizchip_init+0x90>
   {
      tmp = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006c50:	2300      	movs	r3, #0
 8006c52:	73fb      	strb	r3, [r7, #15]
 8006c54:	e015      	b.n	8006c82 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8006c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	4413      	add	r3, r2
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8006c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	dd02      	ble.n	8006c76 <wizchip_init+0x42>
 8006c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c74:	e066      	b.n	8006d44 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	73fb      	strb	r3, [r7, #15]
 8006c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c86:	2b07      	cmp	r3, #7
 8006c88:	dde5      	ble.n	8006c56 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
 8006c8e:	e015      	b.n	8006cbc <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	3301      	adds	r3, #1
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	f7ff fbfc 	bl	80064a8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	73fb      	strb	r3, [r7, #15]
 8006cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc0:	2b07      	cmp	r3, #7
 8006cc2:	dde5      	ble.n	8006c90 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d03b      	beq.n	8006d42 <wizchip_init+0x10e>
   {
      tmp = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
 8006cd2:	e015      	b.n	8006d00 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8006cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	4413      	add	r3, r2
 8006cdc:	781a      	ldrb	r2, [r3, #0]
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8006ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cea:	2b10      	cmp	r3, #16
 8006cec:	dd02      	ble.n	8006cf4 <wizchip_init+0xc0>
 8006cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cf2:	e027      	b.n	8006d44 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	73fb      	strb	r3, [r7, #15]
 8006d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d04:	2b07      	cmp	r3, #7
 8006d06:	dde5      	ble.n	8006cd4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
 8006d0c:	e015      	b.n	8006d3a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8006d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	3301      	adds	r3, #1
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f7ff fbbd 	bl	80064a8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	3301      	adds	r3, #1
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	73fb      	strb	r3, [r7, #15]
 8006d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d3e:	2b07      	cmp	r3, #7
 8006d40:	dde5      	ble.n	8006d0e <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2206      	movs	r2, #6
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006d5e:	f7ff fc51 	bl	8006604 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	330e      	adds	r3, #14
 8006d66:	2204      	movs	r2, #4
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006d6e:	f7ff fc49 	bl	8006604 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	330a      	adds	r3, #10
 8006d76:	2204      	movs	r2, #4
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006d7e:	f7ff fc41 	bl	8006604 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3306      	adds	r3, #6
 8006d86:	2204      	movs	r2, #4
 8006d88:	4619      	mov	r1, r3
 8006d8a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006d8e:	f7ff fc39 	bl	8006604 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7c9a      	ldrb	r2, [r3, #18]
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <wizchip_setnetinfo+0x78>)
 8006d98:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	7cda      	ldrb	r2, [r3, #19]
 8006d9e:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <wizchip_setnetinfo+0x78>)
 8006da0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7d1a      	ldrb	r2, [r3, #20]
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <wizchip_setnetinfo+0x78>)
 8006da8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	7d5a      	ldrb	r2, [r3, #21]
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <wizchip_setnetinfo+0x78>)
 8006db0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8006db8:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <wizchip_setnetinfo+0x7c>)
 8006dba:	701a      	strb	r2, [r3, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000580 	.word	0x20000580
 8006dc8:	20000584 	.word	0x20000584

08006dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006dcc:	480c      	ldr	r0, [pc, #48]	; (8006e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006dce:	490d      	ldr	r1, [pc, #52]	; (8006e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006dd0:	4a0d      	ldr	r2, [pc, #52]	; (8006e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006dd4:	e002      	b.n	8006ddc <LoopCopyDataInit>

08006dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dda:	3304      	adds	r3, #4

08006ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006de0:	d3f9      	bcc.n	8006dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006de2:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006de4:	4c0a      	ldr	r4, [pc, #40]	; (8006e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006de8:	e001      	b.n	8006dee <LoopFillZerobss>

08006dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006dec:	3204      	adds	r2, #4

08006dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006df0:	d3fb      	bcc.n	8006dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006df2:	f7ff fb07 	bl	8006404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006df6:	f003 ffeb 	bl	800add0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006dfa:	f7fc f9ad 	bl	8003158 <main>
  bx lr
 8006dfe:	4770      	bx	lr
  ldr r0, =_sdata
 8006e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e04:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8006e08:	0800f770 	.word	0x0800f770
  ldr r2, =_sbss
 8006e0c:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8006e10:	20001460 	.word	0x20001460

08006e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e14:	e7fe      	b.n	8006e14 <ADC1_2_IRQHandler>
	...

08006e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e1c:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <HAL_Init+0x28>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a07      	ldr	r2, [pc, #28]	; (8006e40 <HAL_Init+0x28>)
 8006e22:	f043 0310 	orr.w	r3, r3, #16
 8006e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e28:	2003      	movs	r0, #3
 8006e2a:	f000 f95d 	bl	80070e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e2e:	2000      	movs	r0, #0
 8006e30:	f000 f808 	bl	8006e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e34:	f7fe fb8c 	bl	8005550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40022000 	.word	0x40022000

08006e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e4c:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <HAL_InitTick+0x54>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <HAL_InitTick+0x58>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	4619      	mov	r1, r3
 8006e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f979 	bl	800715a <HAL_SYSTICK_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e00e      	b.n	8006e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b0f      	cmp	r3, #15
 8006e76:	d80a      	bhi.n	8006e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e78:	2200      	movs	r2, #0
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e80:	f000 f93d 	bl	80070fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e84:	4a06      	ldr	r2, [pc, #24]	; (8006ea0 <HAL_InitTick+0x5c>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e000      	b.n	8006e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000138 	.word	0x20000138
 8006e9c:	2000016c 	.word	0x2000016c
 8006ea0:	20000168 	.word	0x20000168

08006ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_IncTick+0x1c>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <HAL_IncTick+0x20>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	4a03      	ldr	r2, [pc, #12]	; (8006ec4 <HAL_IncTick+0x20>)
 8006eb6:	6013      	str	r3, [r2, #0]
}
 8006eb8:	bf00      	nop
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr
 8006ec0:	2000016c 	.word	0x2000016c
 8006ec4:	2000142c 	.word	0x2000142c

08006ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  return uwTick;
 8006ecc:	4b02      	ldr	r3, [pc, #8]	; (8006ed8 <HAL_GetTick+0x10>)
 8006ece:	681b      	ldr	r3, [r3, #0]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr
 8006ed8:	2000142c 	.word	0x2000142c

08006edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ee4:	f7ff fff0 	bl	8006ec8 <HAL_GetTick>
 8006ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef4:	d005      	beq.n	8006f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <HAL_Delay+0x44>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f02:	bf00      	nop
 8006f04:	f7ff ffe0 	bl	8006ec8 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d8f7      	bhi.n	8006f04 <HAL_Delay+0x28>
  {
  }
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	2000016c 	.word	0x2000016c

08006f24 <__NVIC_SetPriorityGrouping>:
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <__NVIC_SetPriorityGrouping+0x44>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f40:	4013      	ands	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f56:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <__NVIC_SetPriorityGrouping+0x44>)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	60d3      	str	r3, [r2, #12]
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	e000ed00 	.word	0xe000ed00

08006f6c <__NVIC_GetPriorityGrouping>:
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f70:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <__NVIC_GetPriorityGrouping+0x18>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	f003 0307 	and.w	r3, r3, #7
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	e000ed00 	.word	0xe000ed00

08006f88 <__NVIC_EnableIRQ>:
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	db0b      	blt.n	8006fb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	f003 021f 	and.w	r2, r3, #31
 8006fa0:	4906      	ldr	r1, [pc, #24]	; (8006fbc <__NVIC_EnableIRQ+0x34>)
 8006fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	2001      	movs	r0, #1
 8006faa:	fa00 f202 	lsl.w	r2, r0, r2
 8006fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr
 8006fbc:	e000e100 	.word	0xe000e100

08006fc0 <__NVIC_SetPriority>:
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6039      	str	r1, [r7, #0]
 8006fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	db0a      	blt.n	8006fea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	490c      	ldr	r1, [pc, #48]	; (800700c <__NVIC_SetPriority+0x4c>)
 8006fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fde:	0112      	lsls	r2, r2, #4
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006fe8:	e00a      	b.n	8007000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	4908      	ldr	r1, [pc, #32]	; (8007010 <__NVIC_SetPriority+0x50>)
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	3b04      	subs	r3, #4
 8006ff8:	0112      	lsls	r2, r2, #4
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	761a      	strb	r2, [r3, #24]
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	e000e100 	.word	0xe000e100
 8007010:	e000ed00 	.word	0xe000ed00

08007014 <NVIC_EncodePriority>:
{
 8007014:	b480      	push	{r7}
 8007016:	b089      	sub	sp, #36	; 0x24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f1c3 0307 	rsb	r3, r3, #7
 800702e:	2b04      	cmp	r3, #4
 8007030:	bf28      	it	cs
 8007032:	2304      	movcs	r3, #4
 8007034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3304      	adds	r3, #4
 800703a:	2b06      	cmp	r3, #6
 800703c:	d902      	bls.n	8007044 <NVIC_EncodePriority+0x30>
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3b03      	subs	r3, #3
 8007042:	e000      	b.n	8007046 <NVIC_EncodePriority+0x32>
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	43da      	mvns	r2, r3
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	401a      	ands	r2, r3
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800705c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	fa01 f303 	lsl.w	r3, r1, r3
 8007066:	43d9      	mvns	r1, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800706c:	4313      	orrs	r3, r2
}
 800706e:	4618      	mov	r0, r3
 8007070:	3724      	adds	r7, #36	; 0x24
 8007072:	46bd      	mov	sp, r7
 8007074:	bc80      	pop	{r7}
 8007076:	4770      	bx	lr

08007078 <__NVIC_SystemReset>:
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800707c:	f3bf 8f4f 	dsb	sy
}
 8007080:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007082:	4b06      	ldr	r3, [pc, #24]	; (800709c <__NVIC_SystemReset+0x24>)
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800708a:	4904      	ldr	r1, [pc, #16]	; (800709c <__NVIC_SystemReset+0x24>)
 800708c:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <__NVIC_SystemReset+0x28>)
 800708e:	4313      	orrs	r3, r2
 8007090:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007092:	f3bf 8f4f 	dsb	sy
}
 8007096:	bf00      	nop
    __NOP();
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <__NVIC_SystemReset+0x20>
 800709c:	e000ed00 	.word	0xe000ed00
 80070a0:	05fa0004 	.word	0x05fa0004

080070a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070b4:	d301      	bcc.n	80070ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070b6:	2301      	movs	r3, #1
 80070b8:	e00f      	b.n	80070da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070ba:	4a0a      	ldr	r2, [pc, #40]	; (80070e4 <SysTick_Config+0x40>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3b01      	subs	r3, #1
 80070c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070c2:	210f      	movs	r1, #15
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070c8:	f7ff ff7a 	bl	8006fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <SysTick_Config+0x40>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070d2:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <SysTick_Config+0x40>)
 80070d4:	2207      	movs	r2, #7
 80070d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	e000e010 	.word	0xe000e010

080070e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff ff17 	bl	8006f24 <__NVIC_SetPriorityGrouping>
}
 80070f6:	bf00      	nop
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80070fe:	b580      	push	{r7, lr}
 8007100:	b086      	sub	sp, #24
 8007102:	af00      	add	r7, sp, #0
 8007104:	4603      	mov	r3, r0
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
 800710a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007110:	f7ff ff2c 	bl	8006f6c <__NVIC_GetPriorityGrouping>
 8007114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	6978      	ldr	r0, [r7, #20]
 800711c:	f7ff ff7a 	bl	8007014 <NVIC_EncodePriority>
 8007120:	4602      	mov	r2, r0
 8007122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007126:	4611      	mov	r1, r2
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff ff49 	bl	8006fc0 <__NVIC_SetPriority>
}
 800712e:	bf00      	nop
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	4603      	mov	r3, r0
 800713e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff ff1f 	bl	8006f88 <__NVIC_EnableIRQ>
}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007156:	f7ff ff8f 	bl	8007078 <__NVIC_SystemReset>

0800715a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7ff ff9e 	bl	80070a4 <SysTick_Config>
 8007168:	4603      	mov	r3, r0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800718e:	4b2f      	ldr	r3, [pc, #188]	; (800724c <HAL_FLASH_Program+0xd8>)
 8007190:	7e1b      	ldrb	r3, [r3, #24]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_FLASH_Program+0x26>
 8007196:	2302      	movs	r3, #2
 8007198:	e054      	b.n	8007244 <HAL_FLASH_Program+0xd0>
 800719a:	4b2c      	ldr	r3, [pc, #176]	; (800724c <HAL_FLASH_Program+0xd8>)
 800719c:	2201      	movs	r2, #1
 800719e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80071a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80071a4:	f000 f8a8 	bl	80072f8 <FLASH_WaitForLastOperation>
 80071a8:	4603      	mov	r3, r0
 80071aa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d144      	bne.n	800723c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d102      	bne.n	80071be <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80071b8:	2301      	movs	r3, #1
 80071ba:	757b      	strb	r3, [r7, #21]
 80071bc:	e007      	b.n	80071ce <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d102      	bne.n	80071ca <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80071c4:	2302      	movs	r3, #2
 80071c6:	757b      	strb	r3, [r7, #21]
 80071c8:	e001      	b.n	80071ce <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80071ca:	2304      	movs	r3, #4
 80071cc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80071ce:	2300      	movs	r3, #0
 80071d0:	75bb      	strb	r3, [r7, #22]
 80071d2:	e02d      	b.n	8007230 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80071d4:	7dbb      	ldrb	r3, [r7, #22]
 80071d6:	005a      	lsls	r2, r3, #1
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	eb02 0c03 	add.w	ip, r2, r3
 80071de:	7dbb      	ldrb	r3, [r7, #22]
 80071e0:	0119      	lsls	r1, r3, #4
 80071e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e6:	f1c1 0620 	rsb	r6, r1, #32
 80071ea:	f1a1 0020 	sub.w	r0, r1, #32
 80071ee:	fa22 f401 	lsr.w	r4, r2, r1
 80071f2:	fa03 f606 	lsl.w	r6, r3, r6
 80071f6:	4334      	orrs	r4, r6
 80071f8:	fa23 f000 	lsr.w	r0, r3, r0
 80071fc:	4304      	orrs	r4, r0
 80071fe:	fa23 f501 	lsr.w	r5, r3, r1
 8007202:	b2a3      	uxth	r3, r4
 8007204:	4619      	mov	r1, r3
 8007206:	4660      	mov	r0, ip
 8007208:	f000 f85a 	bl	80072c0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800720c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007210:	f000 f872 	bl	80072f8 <FLASH_WaitForLastOperation>
 8007214:	4603      	mov	r3, r0
 8007216:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007218:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <HAL_FLASH_Program+0xdc>)
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	4a0c      	ldr	r2, [pc, #48]	; (8007250 <HAL_FLASH_Program+0xdc>)
 800721e:	f023 0301 	bic.w	r3, r3, #1
 8007222:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d107      	bne.n	800723a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800722a:	7dbb      	ldrb	r3, [r7, #22]
 800722c:	3301      	adds	r3, #1
 800722e:	75bb      	strb	r3, [r7, #22]
 8007230:	7dba      	ldrb	r2, [r7, #22]
 8007232:	7d7b      	ldrb	r3, [r7, #21]
 8007234:	429a      	cmp	r2, r3
 8007236:	d3cd      	bcc.n	80071d4 <HAL_FLASH_Program+0x60>
 8007238:	e000      	b.n	800723c <HAL_FLASH_Program+0xc8>
      {
        break;
 800723a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800723c:	4b03      	ldr	r3, [pc, #12]	; (800724c <HAL_FLASH_Program+0xd8>)
 800723e:	2200      	movs	r2, #0
 8007240:	761a      	strb	r2, [r3, #24]

  return status;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
}
 8007244:	4618      	mov	r0, r3
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800724c:	20001430 	.word	0x20001430
 8007250:	40022000 	.word	0x40022000

08007254 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <HAL_FLASH_Unlock+0x40>)
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00d      	beq.n	8007286 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800726a:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <HAL_FLASH_Unlock+0x40>)
 800726c:	4a0a      	ldr	r2, [pc, #40]	; (8007298 <HAL_FLASH_Unlock+0x44>)
 800726e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007270:	4b08      	ldr	r3, [pc, #32]	; (8007294 <HAL_FLASH_Unlock+0x40>)
 8007272:	4a0a      	ldr	r2, [pc, #40]	; (800729c <HAL_FLASH_Unlock+0x48>)
 8007274:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <HAL_FLASH_Unlock+0x40>)
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8007286:	79fb      	ldrb	r3, [r7, #7]
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	40022000 	.word	0x40022000
 8007298:	45670123 	.word	0x45670123
 800729c:	cdef89ab 	.word	0xcdef89ab

080072a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80072a4:	4b05      	ldr	r3, [pc, #20]	; (80072bc <HAL_FLASH_Lock+0x1c>)
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	4a04      	ldr	r2, [pc, #16]	; (80072bc <HAL_FLASH_Lock+0x1c>)
 80072aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40022000 	.word	0x40022000

080072c0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80072cc:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <FLASH_Program_HalfWord+0x30>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <FLASH_Program_HalfWord+0x34>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	4a07      	ldr	r2, [pc, #28]	; (80072f4 <FLASH_Program_HalfWord+0x34>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	887a      	ldrh	r2, [r7, #2]
 80072e2:	801a      	strh	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bc80      	pop	{r7}
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20001430 	.word	0x20001430
 80072f4:	40022000 	.word	0x40022000

080072f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007300:	f7ff fde2 	bl	8006ec8 <HAL_GetTick>
 8007304:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007306:	e010      	b.n	800732a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800730e:	d00c      	beq.n	800732a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <FLASH_WaitForLastOperation+0x2e>
 8007316:	f7ff fdd7 	bl	8006ec8 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d201      	bcs.n	800732a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e025      	b.n	8007376 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800732a:	4b15      	ldr	r3, [pc, #84]	; (8007380 <FLASH_WaitForLastOperation+0x88>)
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e8      	bne.n	8007308 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007336:	4b12      	ldr	r3, [pc, #72]	; (8007380 <FLASH_WaitForLastOperation+0x88>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007342:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <FLASH_WaitForLastOperation+0x88>)
 8007344:	2220      	movs	r2, #32
 8007346:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007348:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <FLASH_WaitForLastOperation+0x88>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10b      	bne.n	800736c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007354:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <FLASH_WaitForLastOperation+0x88>)
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800735c:	2b00      	cmp	r3, #0
 800735e:	d105      	bne.n	800736c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <FLASH_WaitForLastOperation+0x88>)
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800736c:	f000 f80a 	bl	8007384 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40022000 	.word	0x40022000

08007384 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800738e:	4b23      	ldr	r3, [pc, #140]	; (800741c <FLASH_SetErrorCode+0x98>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800739a:	4b21      	ldr	r3, [pc, #132]	; (8007420 <FLASH_SetErrorCode+0x9c>)
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f043 0302 	orr.w	r3, r3, #2
 80073a2:	4a1f      	ldr	r2, [pc, #124]	; (8007420 <FLASH_SetErrorCode+0x9c>)
 80073a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f043 0310 	orr.w	r3, r3, #16
 80073ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80073ae:	4b1b      	ldr	r3, [pc, #108]	; (800741c <FLASH_SetErrorCode+0x98>)
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80073ba:	4b19      	ldr	r3, [pc, #100]	; (8007420 <FLASH_SetErrorCode+0x9c>)
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	4a17      	ldr	r2, [pc, #92]	; (8007420 <FLASH_SetErrorCode+0x9c>)
 80073c4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f043 0304 	orr.w	r3, r3, #4
 80073cc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80073ce:	4b13      	ldr	r3, [pc, #76]	; (800741c <FLASH_SetErrorCode+0x98>)
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80073da:	4b11      	ldr	r3, [pc, #68]	; (8007420 <FLASH_SetErrorCode+0x9c>)
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f043 0304 	orr.w	r3, r3, #4
 80073e2:	4a0f      	ldr	r2, [pc, #60]	; (8007420 <FLASH_SetErrorCode+0x9c>)
 80073e4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80073e6:	4b0d      	ldr	r3, [pc, #52]	; (800741c <FLASH_SetErrorCode+0x98>)
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	4a0c      	ldr	r2, [pc, #48]	; (800741c <FLASH_SetErrorCode+0x98>)
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f240 1201 	movw	r2, #257	; 0x101
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d106      	bne.n	800740a <FLASH_SetErrorCode+0x86>
 80073fc:	4b07      	ldr	r3, [pc, #28]	; (800741c <FLASH_SetErrorCode+0x98>)
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	4a06      	ldr	r2, [pc, #24]	; (800741c <FLASH_SetErrorCode+0x98>)
 8007402:	f023 0301 	bic.w	r3, r3, #1
 8007406:	61d3      	str	r3, [r2, #28]
}  
 8007408:	e002      	b.n	8007410 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800740a:	4a04      	ldr	r2, [pc, #16]	; (800741c <FLASH_SetErrorCode+0x98>)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	60d3      	str	r3, [r2, #12]
}  
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40022000 	.word	0x40022000
 8007420:	20001430 	.word	0x20001430

08007424 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007436:	4b2f      	ldr	r3, [pc, #188]	; (80074f4 <HAL_FLASHEx_Erase+0xd0>)
 8007438:	7e1b      	ldrb	r3, [r3, #24]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <HAL_FLASHEx_Erase+0x1e>
 800743e:	2302      	movs	r3, #2
 8007440:	e053      	b.n	80074ea <HAL_FLASHEx_Erase+0xc6>
 8007442:	4b2c      	ldr	r3, [pc, #176]	; (80074f4 <HAL_FLASHEx_Erase+0xd0>)
 8007444:	2201      	movs	r2, #1
 8007446:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b02      	cmp	r3, #2
 800744e:	d116      	bne.n	800747e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007450:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007454:	f7ff ff50 	bl	80072f8 <FLASH_WaitForLastOperation>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d141      	bne.n	80074e2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800745e:	2001      	movs	r0, #1
 8007460:	f000 f84c 	bl	80074fc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007464:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007468:	f7ff ff46 	bl	80072f8 <FLASH_WaitForLastOperation>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007470:	4b21      	ldr	r3, [pc, #132]	; (80074f8 <HAL_FLASHEx_Erase+0xd4>)
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	4a20      	ldr	r2, [pc, #128]	; (80074f8 <HAL_FLASHEx_Erase+0xd4>)
 8007476:	f023 0304 	bic.w	r3, r3, #4
 800747a:	6113      	str	r3, [r2, #16]
 800747c:	e031      	b.n	80074e2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800747e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007482:	f7ff ff39 	bl	80072f8 <FLASH_WaitForLastOperation>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d12a      	bne.n	80074e2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007492:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	e019      	b.n	80074d0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800749c:	68b8      	ldr	r0, [r7, #8]
 800749e:	f000 f849 	bl	8007534 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80074a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80074a6:	f7ff ff27 	bl	80072f8 <FLASH_WaitForLastOperation>
 80074aa:	4603      	mov	r3, r0
 80074ac:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80074ae:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <HAL_FLASHEx_Erase+0xd4>)
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	4a11      	ldr	r2, [pc, #68]	; (80074f8 <HAL_FLASHEx_Erase+0xd4>)
 80074b4:	f023 0302 	bic.w	r3, r3, #2
 80074b8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	601a      	str	r2, [r3, #0]
            break;
 80074c6:	e00c      	b.n	80074e2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ce:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	029a      	lsls	r2, r3, #10
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d3dc      	bcc.n	800749c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80074e2:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <HAL_FLASHEx_Erase+0xd0>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	761a      	strb	r2, [r3, #24]

  return status;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20001430 	.word	0x20001430
 80074f8:	40022000 	.word	0x40022000

080074fc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007504:	4b09      	ldr	r3, [pc, #36]	; (800752c <FLASH_MassErase+0x30>)
 8007506:	2200      	movs	r2, #0
 8007508:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800750a:	4b09      	ldr	r3, [pc, #36]	; (8007530 <FLASH_MassErase+0x34>)
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	4a08      	ldr	r2, [pc, #32]	; (8007530 <FLASH_MassErase+0x34>)
 8007510:	f043 0304 	orr.w	r3, r3, #4
 8007514:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007516:	4b06      	ldr	r3, [pc, #24]	; (8007530 <FLASH_MassErase+0x34>)
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	4a05      	ldr	r2, [pc, #20]	; (8007530 <FLASH_MassErase+0x34>)
 800751c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007520:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	bc80      	pop	{r7}
 800752a:	4770      	bx	lr
 800752c:	20001430 	.word	0x20001430
 8007530:	40022000 	.word	0x40022000

08007534 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800753c:	4b0b      	ldr	r3, [pc, #44]	; (800756c <FLASH_PageErase+0x38>)
 800753e:	2200      	movs	r2, #0
 8007540:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007542:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <FLASH_PageErase+0x3c>)
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	4a0a      	ldr	r2, [pc, #40]	; (8007570 <FLASH_PageErase+0x3c>)
 8007548:	f043 0302 	orr.w	r3, r3, #2
 800754c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800754e:	4a08      	ldr	r2, [pc, #32]	; (8007570 <FLASH_PageErase+0x3c>)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007554:	4b06      	ldr	r3, [pc, #24]	; (8007570 <FLASH_PageErase+0x3c>)
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	4a05      	ldr	r2, [pc, #20]	; (8007570 <FLASH_PageErase+0x3c>)
 800755a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800755e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	20001430 	.word	0x20001430
 8007570:	40022000 	.word	0x40022000

08007574 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007574:	b480      	push	{r7}
 8007576:	b08b      	sub	sp, #44	; 0x2c
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800757e:	2300      	movs	r3, #0
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007582:	2300      	movs	r3, #0
 8007584:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007586:	e169      	b.n	800785c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007588:	2201      	movs	r2, #1
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	fa02 f303 	lsl.w	r3, r2, r3
 8007590:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	4013      	ands	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	f040 8158 	bne.w	8007856 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	4a9a      	ldr	r2, [pc, #616]	; (8007814 <HAL_GPIO_Init+0x2a0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d05e      	beq.n	800766e <HAL_GPIO_Init+0xfa>
 80075b0:	4a98      	ldr	r2, [pc, #608]	; (8007814 <HAL_GPIO_Init+0x2a0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d875      	bhi.n	80076a2 <HAL_GPIO_Init+0x12e>
 80075b6:	4a98      	ldr	r2, [pc, #608]	; (8007818 <HAL_GPIO_Init+0x2a4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d058      	beq.n	800766e <HAL_GPIO_Init+0xfa>
 80075bc:	4a96      	ldr	r2, [pc, #600]	; (8007818 <HAL_GPIO_Init+0x2a4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d86f      	bhi.n	80076a2 <HAL_GPIO_Init+0x12e>
 80075c2:	4a96      	ldr	r2, [pc, #600]	; (800781c <HAL_GPIO_Init+0x2a8>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d052      	beq.n	800766e <HAL_GPIO_Init+0xfa>
 80075c8:	4a94      	ldr	r2, [pc, #592]	; (800781c <HAL_GPIO_Init+0x2a8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d869      	bhi.n	80076a2 <HAL_GPIO_Init+0x12e>
 80075ce:	4a94      	ldr	r2, [pc, #592]	; (8007820 <HAL_GPIO_Init+0x2ac>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d04c      	beq.n	800766e <HAL_GPIO_Init+0xfa>
 80075d4:	4a92      	ldr	r2, [pc, #584]	; (8007820 <HAL_GPIO_Init+0x2ac>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d863      	bhi.n	80076a2 <HAL_GPIO_Init+0x12e>
 80075da:	4a92      	ldr	r2, [pc, #584]	; (8007824 <HAL_GPIO_Init+0x2b0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d046      	beq.n	800766e <HAL_GPIO_Init+0xfa>
 80075e0:	4a90      	ldr	r2, [pc, #576]	; (8007824 <HAL_GPIO_Init+0x2b0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d85d      	bhi.n	80076a2 <HAL_GPIO_Init+0x12e>
 80075e6:	2b12      	cmp	r3, #18
 80075e8:	d82a      	bhi.n	8007640 <HAL_GPIO_Init+0xcc>
 80075ea:	2b12      	cmp	r3, #18
 80075ec:	d859      	bhi.n	80076a2 <HAL_GPIO_Init+0x12e>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <HAL_GPIO_Init+0x80>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	0800766f 	.word	0x0800766f
 80075f8:	08007649 	.word	0x08007649
 80075fc:	0800765b 	.word	0x0800765b
 8007600:	0800769d 	.word	0x0800769d
 8007604:	080076a3 	.word	0x080076a3
 8007608:	080076a3 	.word	0x080076a3
 800760c:	080076a3 	.word	0x080076a3
 8007610:	080076a3 	.word	0x080076a3
 8007614:	080076a3 	.word	0x080076a3
 8007618:	080076a3 	.word	0x080076a3
 800761c:	080076a3 	.word	0x080076a3
 8007620:	080076a3 	.word	0x080076a3
 8007624:	080076a3 	.word	0x080076a3
 8007628:	080076a3 	.word	0x080076a3
 800762c:	080076a3 	.word	0x080076a3
 8007630:	080076a3 	.word	0x080076a3
 8007634:	080076a3 	.word	0x080076a3
 8007638:	08007651 	.word	0x08007651
 800763c:	08007665 	.word	0x08007665
 8007640:	4a79      	ldr	r2, [pc, #484]	; (8007828 <HAL_GPIO_Init+0x2b4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007646:	e02c      	b.n	80076a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	623b      	str	r3, [r7, #32]
          break;
 800764e:	e029      	b.n	80076a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	3304      	adds	r3, #4
 8007656:	623b      	str	r3, [r7, #32]
          break;
 8007658:	e024      	b.n	80076a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	3308      	adds	r3, #8
 8007660:	623b      	str	r3, [r7, #32]
          break;
 8007662:	e01f      	b.n	80076a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	330c      	adds	r3, #12
 800766a:	623b      	str	r3, [r7, #32]
          break;
 800766c:	e01a      	b.n	80076a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d102      	bne.n	800767c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007676:	2304      	movs	r3, #4
 8007678:	623b      	str	r3, [r7, #32]
          break;
 800767a:	e013      	b.n	80076a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d105      	bne.n	8007690 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007684:	2308      	movs	r3, #8
 8007686:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	611a      	str	r2, [r3, #16]
          break;
 800768e:	e009      	b.n	80076a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007690:	2308      	movs	r3, #8
 8007692:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	615a      	str	r2, [r3, #20]
          break;
 800769a:	e003      	b.n	80076a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800769c:	2300      	movs	r3, #0
 800769e:	623b      	str	r3, [r7, #32]
          break;
 80076a0:	e000      	b.n	80076a4 <HAL_GPIO_Init+0x130>
          break;
 80076a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2bff      	cmp	r3, #255	; 0xff
 80076a8:	d801      	bhi.n	80076ae <HAL_GPIO_Init+0x13a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	e001      	b.n	80076b2 <HAL_GPIO_Init+0x13e>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3304      	adds	r3, #4
 80076b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2bff      	cmp	r3, #255	; 0xff
 80076b8:	d802      	bhi.n	80076c0 <HAL_GPIO_Init+0x14c>
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	e002      	b.n	80076c6 <HAL_GPIO_Init+0x152>
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	3b08      	subs	r3, #8
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	210f      	movs	r1, #15
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	fa01 f303 	lsl.w	r3, r1, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	401a      	ands	r2, r3
 80076d8:	6a39      	ldr	r1, [r7, #32]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	fa01 f303 	lsl.w	r3, r1, r3
 80076e0:	431a      	orrs	r2, r3
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 80b1 	beq.w	8007856 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80076f4:	4b4d      	ldr	r3, [pc, #308]	; (800782c <HAL_GPIO_Init+0x2b8>)
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	4a4c      	ldr	r2, [pc, #304]	; (800782c <HAL_GPIO_Init+0x2b8>)
 80076fa:	f043 0301 	orr.w	r3, r3, #1
 80076fe:	6193      	str	r3, [r2, #24]
 8007700:	4b4a      	ldr	r3, [pc, #296]	; (800782c <HAL_GPIO_Init+0x2b8>)
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800770c:	4a48      	ldr	r2, [pc, #288]	; (8007830 <HAL_GPIO_Init+0x2bc>)
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	089b      	lsrs	r3, r3, #2
 8007712:	3302      	adds	r3, #2
 8007714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007718:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	f003 0303 	and.w	r3, r3, #3
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	220f      	movs	r2, #15
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	43db      	mvns	r3, r3
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a40      	ldr	r2, [pc, #256]	; (8007834 <HAL_GPIO_Init+0x2c0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <HAL_GPIO_Init+0x1ec>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a3f      	ldr	r2, [pc, #252]	; (8007838 <HAL_GPIO_Init+0x2c4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00d      	beq.n	800775c <HAL_GPIO_Init+0x1e8>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a3e      	ldr	r2, [pc, #248]	; (800783c <HAL_GPIO_Init+0x2c8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d007      	beq.n	8007758 <HAL_GPIO_Init+0x1e4>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a3d      	ldr	r2, [pc, #244]	; (8007840 <HAL_GPIO_Init+0x2cc>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d101      	bne.n	8007754 <HAL_GPIO_Init+0x1e0>
 8007750:	2303      	movs	r3, #3
 8007752:	e006      	b.n	8007762 <HAL_GPIO_Init+0x1ee>
 8007754:	2304      	movs	r3, #4
 8007756:	e004      	b.n	8007762 <HAL_GPIO_Init+0x1ee>
 8007758:	2302      	movs	r3, #2
 800775a:	e002      	b.n	8007762 <HAL_GPIO_Init+0x1ee>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <HAL_GPIO_Init+0x1ee>
 8007760:	2300      	movs	r3, #0
 8007762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007764:	f002 0203 	and.w	r2, r2, #3
 8007768:	0092      	lsls	r2, r2, #2
 800776a:	4093      	lsls	r3, r2
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007772:	492f      	ldr	r1, [pc, #188]	; (8007830 <HAL_GPIO_Init+0x2bc>)
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	089b      	lsrs	r3, r3, #2
 8007778:	3302      	adds	r3, #2
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d006      	beq.n	800779a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800778c:	4b2d      	ldr	r3, [pc, #180]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	492c      	ldr	r1, [pc, #176]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	4313      	orrs	r3, r2
 8007796:	600b      	str	r3, [r1, #0]
 8007798:	e006      	b.n	80077a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800779a:	4b2a      	ldr	r3, [pc, #168]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	43db      	mvns	r3, r3
 80077a2:	4928      	ldr	r1, [pc, #160]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d006      	beq.n	80077c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80077b4:	4b23      	ldr	r3, [pc, #140]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	4922      	ldr	r1, [pc, #136]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	4313      	orrs	r3, r2
 80077be:	604b      	str	r3, [r1, #4]
 80077c0:	e006      	b.n	80077d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80077c2:	4b20      	ldr	r3, [pc, #128]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	43db      	mvns	r3, r3
 80077ca:	491e      	ldr	r1, [pc, #120]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 80077cc:	4013      	ands	r3, r2
 80077ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d006      	beq.n	80077ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80077dc:	4b19      	ldr	r3, [pc, #100]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	4918      	ldr	r1, [pc, #96]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	608b      	str	r3, [r1, #8]
 80077e8:	e006      	b.n	80077f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80077ea:	4b16      	ldr	r3, [pc, #88]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	43db      	mvns	r3, r3
 80077f2:	4914      	ldr	r1, [pc, #80]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d021      	beq.n	8007848 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007804:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	490e      	ldr	r1, [pc, #56]	; (8007844 <HAL_GPIO_Init+0x2d0>)
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	4313      	orrs	r3, r2
 800780e:	60cb      	str	r3, [r1, #12]
 8007810:	e021      	b.n	8007856 <HAL_GPIO_Init+0x2e2>
 8007812:	bf00      	nop
 8007814:	10320000 	.word	0x10320000
 8007818:	10310000 	.word	0x10310000
 800781c:	10220000 	.word	0x10220000
 8007820:	10210000 	.word	0x10210000
 8007824:	10120000 	.word	0x10120000
 8007828:	10110000 	.word	0x10110000
 800782c:	40021000 	.word	0x40021000
 8007830:	40010000 	.word	0x40010000
 8007834:	40010800 	.word	0x40010800
 8007838:	40010c00 	.word	0x40010c00
 800783c:	40011000 	.word	0x40011000
 8007840:	40011400 	.word	0x40011400
 8007844:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007848:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <HAL_GPIO_Init+0x304>)
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	43db      	mvns	r3, r3
 8007850:	4909      	ldr	r1, [pc, #36]	; (8007878 <HAL_GPIO_Init+0x304>)
 8007852:	4013      	ands	r3, r2
 8007854:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	3301      	adds	r3, #1
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	fa22 f303 	lsr.w	r3, r2, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	f47f ae8e 	bne.w	8007588 <HAL_GPIO_Init+0x14>
  }
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	372c      	adds	r7, #44	; 0x2c
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr
 8007878:	40010400 	.word	0x40010400

0800787c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	807b      	strh	r3, [r7, #2]
 8007888:	4613      	mov	r3, r2
 800788a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800788c:	787b      	ldrb	r3, [r7, #1]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007892:	887a      	ldrh	r2, [r7, #2]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007898:	e003      	b.n	80078a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800789a:	887b      	ldrh	r3, [r7, #2]
 800789c:	041a      	lsls	r2, r3, #16
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	611a      	str	r2, [r3, #16]
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bc80      	pop	{r7}
 80078aa:	4770      	bx	lr

080078ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e12b      	b.n	8007b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7fd fe6e 	bl	80055b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2224      	movs	r2, #36	; 0x24
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0201 	bic.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800790e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007910:	f000 fd42 	bl	8008398 <HAL_RCC_GetPCLK1Freq>
 8007914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	4a81      	ldr	r2, [pc, #516]	; (8007b20 <HAL_I2C_Init+0x274>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d807      	bhi.n	8007930 <HAL_I2C_Init+0x84>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4a80      	ldr	r2, [pc, #512]	; (8007b24 <HAL_I2C_Init+0x278>)
 8007924:	4293      	cmp	r3, r2
 8007926:	bf94      	ite	ls
 8007928:	2301      	movls	r3, #1
 800792a:	2300      	movhi	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	e006      	b.n	800793e <HAL_I2C_Init+0x92>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4a7d      	ldr	r2, [pc, #500]	; (8007b28 <HAL_I2C_Init+0x27c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	bf94      	ite	ls
 8007938:	2301      	movls	r3, #1
 800793a:	2300      	movhi	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e0e7      	b.n	8007b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4a78      	ldr	r2, [pc, #480]	; (8007b2c <HAL_I2C_Init+0x280>)
 800794a:	fba2 2303 	umull	r2, r3, r2, r3
 800794e:	0c9b      	lsrs	r3, r3, #18
 8007950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4a6a      	ldr	r2, [pc, #424]	; (8007b20 <HAL_I2C_Init+0x274>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d802      	bhi.n	8007980 <HAL_I2C_Init+0xd4>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	3301      	adds	r3, #1
 800797e:	e009      	b.n	8007994 <HAL_I2C_Init+0xe8>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007986:	fb02 f303 	mul.w	r3, r2, r3
 800798a:	4a69      	ldr	r2, [pc, #420]	; (8007b30 <HAL_I2C_Init+0x284>)
 800798c:	fba2 2303 	umull	r2, r3, r2, r3
 8007990:	099b      	lsrs	r3, r3, #6
 8007992:	3301      	adds	r3, #1
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6812      	ldr	r2, [r2, #0]
 8007998:	430b      	orrs	r3, r1
 800799a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80079a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	495c      	ldr	r1, [pc, #368]	; (8007b20 <HAL_I2C_Init+0x274>)
 80079b0:	428b      	cmp	r3, r1
 80079b2:	d819      	bhi.n	80079e8 <HAL_I2C_Init+0x13c>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	1e59      	subs	r1, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	fbb1 f3f3 	udiv	r3, r1, r3
 80079c2:	1c59      	adds	r1, r3, #1
 80079c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80079c8:	400b      	ands	r3, r1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <HAL_I2C_Init+0x138>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1e59      	subs	r1, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80079dc:	3301      	adds	r3, #1
 80079de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079e2:	e051      	b.n	8007a88 <HAL_I2C_Init+0x1dc>
 80079e4:	2304      	movs	r3, #4
 80079e6:	e04f      	b.n	8007a88 <HAL_I2C_Init+0x1dc>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d111      	bne.n	8007a14 <HAL_I2C_Init+0x168>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	1e58      	subs	r0, r3, #1
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6859      	ldr	r1, [r3, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	440b      	add	r3, r1
 80079fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a02:	3301      	adds	r3, #1
 8007a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	bf0c      	ite	eq
 8007a0c:	2301      	moveq	r3, #1
 8007a0e:	2300      	movne	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	e012      	b.n	8007a3a <HAL_I2C_Init+0x18e>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	1e58      	subs	r0, r3, #1
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6859      	ldr	r1, [r3, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	0099      	lsls	r1, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bf0c      	ite	eq
 8007a34:	2301      	moveq	r3, #1
 8007a36:	2300      	movne	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <HAL_I2C_Init+0x196>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e022      	b.n	8007a88 <HAL_I2C_Init+0x1dc>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10e      	bne.n	8007a68 <HAL_I2C_Init+0x1bc>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	1e58      	subs	r0, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6859      	ldr	r1, [r3, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	440b      	add	r3, r1
 8007a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a66:	e00f      	b.n	8007a88 <HAL_I2C_Init+0x1dc>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	1e58      	subs	r0, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6859      	ldr	r1, [r3, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	0099      	lsls	r1, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a7e:	3301      	adds	r3, #1
 8007a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	6809      	ldr	r1, [r1, #0]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69da      	ldr	r2, [r3, #28]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6911      	ldr	r1, [r2, #16]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	68d2      	ldr	r2, [r2, #12]
 8007ac2:	4311      	orrs	r1, r2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695a      	ldr	r2, [r3, #20]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	000186a0 	.word	0x000186a0
 8007b24:	001e847f 	.word	0x001e847f
 8007b28:	003d08ff 	.word	0x003d08ff
 8007b2c:	431bde83 	.word	0x431bde83
 8007b30:	10624dd3 	.word	0x10624dd3

08007b34 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e034      	b.n	8007bb0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007b4e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f245 5255 	movw	r2, #21845	; 0x5555
 8007b58:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6852      	ldr	r2, [r2, #4]
 8007b62:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6892      	ldr	r2, [r2, #8]
 8007b6c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007b6e:	f7ff f9ab 	bl	8006ec8 <HAL_GetTick>
 8007b72:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007b74:	e00f      	b.n	8007b96 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007b76:	f7ff f9a7 	bl	8006ec8 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b27      	cmp	r3, #39	; 0x27
 8007b82:	d908      	bls.n	8007b96 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e00c      	b.n	8007bb0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0303 	and.w	r3, r3, #3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e8      	bne.n	8007b76 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007bac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007bc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr
	...

08007bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e26c      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8087 	beq.w	8007d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007bf8:	4b92      	ldr	r3, [pc, #584]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f003 030c 	and.w	r3, r3, #12
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d00c      	beq.n	8007c1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007c04:	4b8f      	ldr	r3, [pc, #572]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f003 030c 	and.w	r3, r3, #12
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d112      	bne.n	8007c36 <HAL_RCC_OscConfig+0x5e>
 8007c10:	4b8c      	ldr	r3, [pc, #560]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c1c:	d10b      	bne.n	8007c36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c1e:	4b89      	ldr	r3, [pc, #548]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d06c      	beq.n	8007d04 <HAL_RCC_OscConfig+0x12c>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d168      	bne.n	8007d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e246      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCC_OscConfig+0x76>
 8007c40:	4b80      	ldr	r3, [pc, #512]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a7f      	ldr	r2, [pc, #508]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	e02e      	b.n	8007cac <HAL_RCC_OscConfig+0xd4>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10c      	bne.n	8007c70 <HAL_RCC_OscConfig+0x98>
 8007c56:	4b7b      	ldr	r3, [pc, #492]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a7a      	ldr	r2, [pc, #488]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	4b78      	ldr	r3, [pc, #480]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a77      	ldr	r2, [pc, #476]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	e01d      	b.n	8007cac <HAL_RCC_OscConfig+0xd4>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c78:	d10c      	bne.n	8007c94 <HAL_RCC_OscConfig+0xbc>
 8007c7a:	4b72      	ldr	r3, [pc, #456]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a71      	ldr	r2, [pc, #452]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	4b6f      	ldr	r3, [pc, #444]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a6e      	ldr	r2, [pc, #440]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	e00b      	b.n	8007cac <HAL_RCC_OscConfig+0xd4>
 8007c94:	4b6b      	ldr	r3, [pc, #428]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a6a      	ldr	r2, [pc, #424]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	4b68      	ldr	r3, [pc, #416]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a67      	ldr	r2, [pc, #412]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007caa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d013      	beq.n	8007cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb4:	f7ff f908 	bl	8006ec8 <HAL_GetTick>
 8007cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cbc:	f7ff f904 	bl	8006ec8 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b64      	cmp	r3, #100	; 0x64
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e1fa      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cce:	4b5d      	ldr	r3, [pc, #372]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0f0      	beq.n	8007cbc <HAL_RCC_OscConfig+0xe4>
 8007cda:	e014      	b.n	8007d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cdc:	f7ff f8f4 	bl	8006ec8 <HAL_GetTick>
 8007ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ce2:	e008      	b.n	8007cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ce4:	f7ff f8f0 	bl	8006ec8 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	2b64      	cmp	r3, #100	; 0x64
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e1e6      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cf6:	4b53      	ldr	r3, [pc, #332]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f0      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x10c>
 8007d02:	e000      	b.n	8007d06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d063      	beq.n	8007dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d12:	4b4c      	ldr	r3, [pc, #304]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f003 030c 	and.w	r3, r3, #12
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00b      	beq.n	8007d36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007d1e:	4b49      	ldr	r3, [pc, #292]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f003 030c 	and.w	r3, r3, #12
 8007d26:	2b08      	cmp	r3, #8
 8007d28:	d11c      	bne.n	8007d64 <HAL_RCC_OscConfig+0x18c>
 8007d2a:	4b46      	ldr	r3, [pc, #280]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d116      	bne.n	8007d64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d36:	4b43      	ldr	r3, [pc, #268]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <HAL_RCC_OscConfig+0x176>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d001      	beq.n	8007d4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e1ba      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d4e:	4b3d      	ldr	r3, [pc, #244]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	4939      	ldr	r1, [pc, #228]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d62:	e03a      	b.n	8007dda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d020      	beq.n	8007dae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d6c:	4b36      	ldr	r3, [pc, #216]	; (8007e48 <HAL_RCC_OscConfig+0x270>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d72:	f7ff f8a9 	bl	8006ec8 <HAL_GetTick>
 8007d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d78:	e008      	b.n	8007d8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d7a:	f7ff f8a5 	bl	8006ec8 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d901      	bls.n	8007d8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e19b      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d8c:	4b2d      	ldr	r3, [pc, #180]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0f0      	beq.n	8007d7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d98:	4b2a      	ldr	r3, [pc, #168]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	4927      	ldr	r1, [pc, #156]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	600b      	str	r3, [r1, #0]
 8007dac:	e015      	b.n	8007dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dae:	4b26      	ldr	r3, [pc, #152]	; (8007e48 <HAL_RCC_OscConfig+0x270>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db4:	f7ff f888 	bl	8006ec8 <HAL_GetTick>
 8007db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dbc:	f7ff f884 	bl	8006ec8 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e17a      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dce:	4b1d      	ldr	r3, [pc, #116]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f0      	bne.n	8007dbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0308 	and.w	r3, r3, #8
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d03a      	beq.n	8007e5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d019      	beq.n	8007e22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dee:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <HAL_RCC_OscConfig+0x274>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007df4:	f7ff f868 	bl	8006ec8 <HAL_GetTick>
 8007df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dfa:	e008      	b.n	8007e0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dfc:	f7ff f864 	bl	8006ec8 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e15a      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <HAL_RCC_OscConfig+0x26c>)
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0f0      	beq.n	8007dfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007e1a:	2001      	movs	r0, #1
 8007e1c:	f000 faf8 	bl	8008410 <RCC_Delay>
 8007e20:	e01c      	b.n	8007e5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e22:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <HAL_RCC_OscConfig+0x274>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e28:	f7ff f84e 	bl	8006ec8 <HAL_GetTick>
 8007e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e2e:	e00f      	b.n	8007e50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e30:	f7ff f84a 	bl	8006ec8 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d908      	bls.n	8007e50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e140      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
 8007e42:	bf00      	nop
 8007e44:	40021000 	.word	0x40021000
 8007e48:	42420000 	.word	0x42420000
 8007e4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e50:	4b9e      	ldr	r3, [pc, #632]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e9      	bne.n	8007e30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 80a6 	beq.w	8007fb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e6e:	4b97      	ldr	r3, [pc, #604]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10d      	bne.n	8007e96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e7a:	4b94      	ldr	r3, [pc, #592]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	4a93      	ldr	r2, [pc, #588]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e84:	61d3      	str	r3, [r2, #28]
 8007e86:	4b91      	ldr	r3, [pc, #580]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e8e:	60bb      	str	r3, [r7, #8]
 8007e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e92:	2301      	movs	r3, #1
 8007e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e96:	4b8e      	ldr	r3, [pc, #568]	; (80080d0 <HAL_RCC_OscConfig+0x4f8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d118      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ea2:	4b8b      	ldr	r3, [pc, #556]	; (80080d0 <HAL_RCC_OscConfig+0x4f8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a8a      	ldr	r2, [pc, #552]	; (80080d0 <HAL_RCC_OscConfig+0x4f8>)
 8007ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eae:	f7ff f80b 	bl	8006ec8 <HAL_GetTick>
 8007eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb4:	e008      	b.n	8007ec8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eb6:	f7ff f807 	bl	8006ec8 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b64      	cmp	r3, #100	; 0x64
 8007ec2:	d901      	bls.n	8007ec8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e0fd      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ec8:	4b81      	ldr	r3, [pc, #516]	; (80080d0 <HAL_RCC_OscConfig+0x4f8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0f0      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d106      	bne.n	8007eea <HAL_RCC_OscConfig+0x312>
 8007edc:	4b7b      	ldr	r3, [pc, #492]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	4a7a      	ldr	r2, [pc, #488]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007ee2:	f043 0301 	orr.w	r3, r3, #1
 8007ee6:	6213      	str	r3, [r2, #32]
 8007ee8:	e02d      	b.n	8007f46 <HAL_RCC_OscConfig+0x36e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10c      	bne.n	8007f0c <HAL_RCC_OscConfig+0x334>
 8007ef2:	4b76      	ldr	r3, [pc, #472]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	4a75      	ldr	r2, [pc, #468]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007ef8:	f023 0301 	bic.w	r3, r3, #1
 8007efc:	6213      	str	r3, [r2, #32]
 8007efe:	4b73      	ldr	r3, [pc, #460]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	4a72      	ldr	r2, [pc, #456]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f04:	f023 0304 	bic.w	r3, r3, #4
 8007f08:	6213      	str	r3, [r2, #32]
 8007f0a:	e01c      	b.n	8007f46 <HAL_RCC_OscConfig+0x36e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	2b05      	cmp	r3, #5
 8007f12:	d10c      	bne.n	8007f2e <HAL_RCC_OscConfig+0x356>
 8007f14:	4b6d      	ldr	r3, [pc, #436]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	4a6c      	ldr	r2, [pc, #432]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f1a:	f043 0304 	orr.w	r3, r3, #4
 8007f1e:	6213      	str	r3, [r2, #32]
 8007f20:	4b6a      	ldr	r3, [pc, #424]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	4a69      	ldr	r2, [pc, #420]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	6213      	str	r3, [r2, #32]
 8007f2c:	e00b      	b.n	8007f46 <HAL_RCC_OscConfig+0x36e>
 8007f2e:	4b67      	ldr	r3, [pc, #412]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	4a66      	ldr	r2, [pc, #408]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f34:	f023 0301 	bic.w	r3, r3, #1
 8007f38:	6213      	str	r3, [r2, #32]
 8007f3a:	4b64      	ldr	r3, [pc, #400]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	4a63      	ldr	r2, [pc, #396]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f40:	f023 0304 	bic.w	r3, r3, #4
 8007f44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d015      	beq.n	8007f7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f4e:	f7fe ffbb 	bl	8006ec8 <HAL_GetTick>
 8007f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f54:	e00a      	b.n	8007f6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f56:	f7fe ffb7 	bl	8006ec8 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e0ab      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f6c:	4b57      	ldr	r3, [pc, #348]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0ee      	beq.n	8007f56 <HAL_RCC_OscConfig+0x37e>
 8007f78:	e014      	b.n	8007fa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f7a:	f7fe ffa5 	bl	8006ec8 <HAL_GetTick>
 8007f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f80:	e00a      	b.n	8007f98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f82:	f7fe ffa1 	bl	8006ec8 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d901      	bls.n	8007f98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e095      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f98:	4b4c      	ldr	r3, [pc, #304]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1ee      	bne.n	8007f82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d105      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007faa:	4b48      	ldr	r3, [pc, #288]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	4a47      	ldr	r2, [pc, #284]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69db      	ldr	r3, [r3, #28]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 8081 	beq.w	80080c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fc0:	4b42      	ldr	r3, [pc, #264]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f003 030c 	and.w	r3, r3, #12
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d061      	beq.n	8008090 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d146      	bne.n	8008062 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fd4:	4b3f      	ldr	r3, [pc, #252]	; (80080d4 <HAL_RCC_OscConfig+0x4fc>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fda:	f7fe ff75 	bl	8006ec8 <HAL_GetTick>
 8007fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007fe0:	e008      	b.n	8007ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fe2:	f7fe ff71 	bl	8006ec8 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d901      	bls.n	8007ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e067      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ff4:	4b35      	ldr	r3, [pc, #212]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1f0      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008008:	d108      	bne.n	800801c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800800a:	4b30      	ldr	r3, [pc, #192]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	492d      	ldr	r1, [pc, #180]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8008018:	4313      	orrs	r3, r2
 800801a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800801c:	4b2b      	ldr	r3, [pc, #172]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a19      	ldr	r1, [r3, #32]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	430b      	orrs	r3, r1
 800802e:	4927      	ldr	r1, [pc, #156]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8008030:	4313      	orrs	r3, r2
 8008032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008034:	4b27      	ldr	r3, [pc, #156]	; (80080d4 <HAL_RCC_OscConfig+0x4fc>)
 8008036:	2201      	movs	r2, #1
 8008038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800803a:	f7fe ff45 	bl	8006ec8 <HAL_GetTick>
 800803e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008040:	e008      	b.n	8008054 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008042:	f7fe ff41 	bl	8006ec8 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	2b02      	cmp	r3, #2
 800804e:	d901      	bls.n	8008054 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e037      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008054:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0f0      	beq.n	8008042 <HAL_RCC_OscConfig+0x46a>
 8008060:	e02f      	b.n	80080c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <HAL_RCC_OscConfig+0x4fc>)
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008068:	f7fe ff2e 	bl	8006ec8 <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008070:	f7fe ff2a 	bl	8006ec8 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e020      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0x498>
 800808e:	e018      	b.n	80080c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e013      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <HAL_RCC_OscConfig+0x4f4>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d106      	bne.n	80080be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d001      	beq.n	80080c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	40021000 	.word	0x40021000
 80080d0:	40007000 	.word	0x40007000
 80080d4:	42420060 	.word	0x42420060

080080d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e0d0      	b.n	800828e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080ec:	4b6a      	ldr	r3, [pc, #424]	; (8008298 <HAL_RCC_ClockConfig+0x1c0>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d910      	bls.n	800811c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080fa:	4b67      	ldr	r3, [pc, #412]	; (8008298 <HAL_RCC_ClockConfig+0x1c0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f023 0207 	bic.w	r2, r3, #7
 8008102:	4965      	ldr	r1, [pc, #404]	; (8008298 <HAL_RCC_ClockConfig+0x1c0>)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	4313      	orrs	r3, r2
 8008108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800810a:	4b63      	ldr	r3, [pc, #396]	; (8008298 <HAL_RCC_ClockConfig+0x1c0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d001      	beq.n	800811c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e0b8      	b.n	800828e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d020      	beq.n	800816a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008134:	4b59      	ldr	r3, [pc, #356]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	4a58      	ldr	r2, [pc, #352]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 800813a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800813e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0308 	and.w	r3, r3, #8
 8008148:	2b00      	cmp	r3, #0
 800814a:	d005      	beq.n	8008158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800814c:	4b53      	ldr	r3, [pc, #332]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	4a52      	ldr	r2, [pc, #328]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008152:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008158:	4b50      	ldr	r3, [pc, #320]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	494d      	ldr	r1, [pc, #308]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008166:	4313      	orrs	r3, r2
 8008168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d040      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d107      	bne.n	800818e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800817e:	4b47      	ldr	r3, [pc, #284]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d115      	bne.n	80081b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e07f      	b.n	800828e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d107      	bne.n	80081a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008196:	4b41      	ldr	r3, [pc, #260]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d109      	bne.n	80081b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e073      	b.n	800828e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081a6:	4b3d      	ldr	r3, [pc, #244]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e06b      	b.n	800828e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081b6:	4b39      	ldr	r3, [pc, #228]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f023 0203 	bic.w	r2, r3, #3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4936      	ldr	r1, [pc, #216]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081c8:	f7fe fe7e 	bl	8006ec8 <HAL_GetTick>
 80081cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ce:	e00a      	b.n	80081e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081d0:	f7fe fe7a 	bl	8006ec8 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	f241 3288 	movw	r2, #5000	; 0x1388
 80081de:	4293      	cmp	r3, r2
 80081e0:	d901      	bls.n	80081e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e053      	b.n	800828e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081e6:	4b2d      	ldr	r3, [pc, #180]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f003 020c 	and.w	r2, r3, #12
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d1eb      	bne.n	80081d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081f8:	4b27      	ldr	r3, [pc, #156]	; (8008298 <HAL_RCC_ClockConfig+0x1c0>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d210      	bcs.n	8008228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008206:	4b24      	ldr	r3, [pc, #144]	; (8008298 <HAL_RCC_ClockConfig+0x1c0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f023 0207 	bic.w	r2, r3, #7
 800820e:	4922      	ldr	r1, [pc, #136]	; (8008298 <HAL_RCC_ClockConfig+0x1c0>)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	4313      	orrs	r3, r2
 8008214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008216:	4b20      	ldr	r3, [pc, #128]	; (8008298 <HAL_RCC_ClockConfig+0x1c0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0307 	and.w	r3, r3, #7
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d001      	beq.n	8008228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e032      	b.n	800828e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d008      	beq.n	8008246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008234:	4b19      	ldr	r3, [pc, #100]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	4916      	ldr	r1, [pc, #88]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008242:	4313      	orrs	r3, r2
 8008244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	490e      	ldr	r1, [pc, #56]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 8008262:	4313      	orrs	r3, r2
 8008264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008266:	f000 f82d 	bl	80082c4 <HAL_RCC_GetSysClockFreq>
 800826a:	4602      	mov	r2, r0
 800826c:	4b0b      	ldr	r3, [pc, #44]	; (800829c <HAL_RCC_ClockConfig+0x1c4>)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	091b      	lsrs	r3, r3, #4
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	490a      	ldr	r1, [pc, #40]	; (80082a0 <HAL_RCC_ClockConfig+0x1c8>)
 8008278:	5ccb      	ldrb	r3, [r1, r3]
 800827a:	fa22 f303 	lsr.w	r3, r2, r3
 800827e:	4a09      	ldr	r2, [pc, #36]	; (80082a4 <HAL_RCC_ClockConfig+0x1cc>)
 8008280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008282:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <HAL_RCC_ClockConfig+0x1d0>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fddc 	bl	8006e44 <HAL_InitTick>

  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	40022000 	.word	0x40022000
 800829c:	40021000 	.word	0x40021000
 80082a0:	0800f328 	.word	0x0800f328
 80082a4:	20000138 	.word	0x20000138
 80082a8:	20000168 	.word	0x20000168

080082ac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80082b0:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <HAL_RCC_EnableCSS+0x14>)
 80082b2:	2201      	movs	r2, #1
 80082b4:	601a      	str	r2, [r3, #0]
}
 80082b6:	bf00      	nop
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	4242004c 	.word	0x4242004c

080082c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082c4:	b490      	push	{r4, r7}
 80082c6:	b08a      	sub	sp, #40	; 0x28
 80082c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80082ca:	4b2a      	ldr	r3, [pc, #168]	; (8008374 <HAL_RCC_GetSysClockFreq+0xb0>)
 80082cc:	1d3c      	adds	r4, r7, #4
 80082ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80082d4:	f240 2301 	movw	r3, #513	; 0x201
 80082d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	2300      	movs	r3, #0
 80082e0:	61bb      	str	r3, [r7, #24]
 80082e2:	2300      	movs	r3, #0
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
 80082e6:	2300      	movs	r3, #0
 80082e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80082ee:	4b22      	ldr	r3, [pc, #136]	; (8008378 <HAL_RCC_GetSysClockFreq+0xb4>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	f003 030c 	and.w	r3, r3, #12
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	d002      	beq.n	8008304 <HAL_RCC_GetSysClockFreq+0x40>
 80082fe:	2b08      	cmp	r3, #8
 8008300:	d003      	beq.n	800830a <HAL_RCC_GetSysClockFreq+0x46>
 8008302:	e02d      	b.n	8008360 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008304:	4b1d      	ldr	r3, [pc, #116]	; (800837c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008306:	623b      	str	r3, [r7, #32]
      break;
 8008308:	e02d      	b.n	8008366 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	0c9b      	lsrs	r3, r3, #18
 800830e:	f003 030f 	and.w	r3, r3, #15
 8008312:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008316:	4413      	add	r3, r2
 8008318:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800831c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d013      	beq.n	8008350 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008328:	4b13      	ldr	r3, [pc, #76]	; (8008378 <HAL_RCC_GetSysClockFreq+0xb4>)
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	0c5b      	lsrs	r3, r3, #17
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008336:	4413      	add	r3, r2
 8008338:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800833c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	4a0e      	ldr	r2, [pc, #56]	; (800837c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008342:	fb02 f203 	mul.w	r2, r2, r3
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	fbb2 f3f3 	udiv	r3, r2, r3
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
 800834e:	e004      	b.n	800835a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	4a0b      	ldr	r2, [pc, #44]	; (8008380 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008354:	fb02 f303 	mul.w	r3, r2, r3
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	623b      	str	r3, [r7, #32]
      break;
 800835e:	e002      	b.n	8008366 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008360:	4b06      	ldr	r3, [pc, #24]	; (800837c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008362:	623b      	str	r3, [r7, #32]
      break;
 8008364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008366:	6a3b      	ldr	r3, [r7, #32]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3728      	adds	r7, #40	; 0x28
 800836c:	46bd      	mov	sp, r7
 800836e:	bc90      	pop	{r4, r7}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	0800f318 	.word	0x0800f318
 8008378:	40021000 	.word	0x40021000
 800837c:	007a1200 	.word	0x007a1200
 8008380:	003d0900 	.word	0x003d0900

08008384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008388:	4b02      	ldr	r3, [pc, #8]	; (8008394 <HAL_RCC_GetHCLKFreq+0x10>)
 800838a:	681b      	ldr	r3, [r3, #0]
}
 800838c:	4618      	mov	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	bc80      	pop	{r7}
 8008392:	4770      	bx	lr
 8008394:	20000138 	.word	0x20000138

08008398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800839c:	f7ff fff2 	bl	8008384 <HAL_RCC_GetHCLKFreq>
 80083a0:	4602      	mov	r2, r0
 80083a2:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	0a1b      	lsrs	r3, r3, #8
 80083a8:	f003 0307 	and.w	r3, r3, #7
 80083ac:	4903      	ldr	r1, [pc, #12]	; (80083bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80083ae:	5ccb      	ldrb	r3, [r1, r3]
 80083b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	40021000 	.word	0x40021000
 80083bc:	0800f338 	.word	0x0800f338

080083c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083c4:	f7ff ffde 	bl	8008384 <HAL_RCC_GetHCLKFreq>
 80083c8:	4602      	mov	r2, r0
 80083ca:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	0adb      	lsrs	r3, r3, #11
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	4903      	ldr	r1, [pc, #12]	; (80083e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083d6:	5ccb      	ldrb	r3, [r1, r3]
 80083d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083dc:	4618      	mov	r0, r3
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40021000 	.word	0x40021000
 80083e4:	0800f338 	.word	0x0800f338

080083e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80083ec:	4b06      	ldr	r3, [pc, #24]	; (8008408 <HAL_RCC_NMI_IRQHandler+0x20>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f4:	2b80      	cmp	r3, #128	; 0x80
 80083f6:	d104      	bne.n	8008402 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80083f8:	f000 f828 	bl	800844c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80083fc:	4b03      	ldr	r3, [pc, #12]	; (800840c <HAL_RCC_NMI_IRQHandler+0x24>)
 80083fe:	2280      	movs	r2, #128	; 0x80
 8008400:	701a      	strb	r2, [r3, #0]
  }
}
 8008402:	bf00      	nop
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	40021000 	.word	0x40021000
 800840c:	4002100a 	.word	0x4002100a

08008410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008418:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <RCC_Delay+0x34>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a0a      	ldr	r2, [pc, #40]	; (8008448 <RCC_Delay+0x38>)
 800841e:	fba2 2303 	umull	r2, r3, r2, r3
 8008422:	0a5b      	lsrs	r3, r3, #9
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	fb02 f303 	mul.w	r3, r2, r3
 800842a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800842c:	bf00      	nop
  }
  while (Delay --);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	60fa      	str	r2, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1f9      	bne.n	800842c <RCC_Delay+0x1c>
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr
 8008444:	20000138 	.word	0x20000138
 8008448:	10624dd3 	.word	0x10624dd3

0800844c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8008450:	bf00      	nop
 8008452:	46bd      	mov	sp, r7
 8008454:	bc80      	pop	{r7}
 8008456:	4770      	bx	lr

08008458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e076      	b.n	8008558 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	2b00      	cmp	r3, #0
 8008470:	d108      	bne.n	8008484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800847a:	d009      	beq.n	8008490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	61da      	str	r2, [r3, #28]
 8008482:	e005      	b.n	8008490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fd f8d2 	bl	8005654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008514:	ea42 0103 	orr.w	r1, r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	0c1a      	lsrs	r2, r3, #16
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f002 0204 	and.w	r2, r2, #4
 8008536:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69da      	ldr	r2, [r3, #28]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008546:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_SPI_Transmit+0x22>
 800857e:	2302      	movs	r3, #2
 8008580:	e126      	b.n	80087d0 <HAL_SPI_Transmit+0x270>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800858a:	f7fe fc9d 	bl	8006ec8 <HAL_GetTick>
 800858e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008590:	88fb      	ldrh	r3, [r7, #6]
 8008592:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b01      	cmp	r3, #1
 800859e:	d002      	beq.n	80085a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80085a0:	2302      	movs	r3, #2
 80085a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085a4:	e10b      	b.n	80087be <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_SPI_Transmit+0x52>
 80085ac:	88fb      	ldrh	r3, [r7, #6]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d102      	bne.n	80085b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085b6:	e102      	b.n	80087be <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2203      	movs	r2, #3
 80085bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	88fa      	ldrh	r2, [r7, #6]
 80085d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	88fa      	ldrh	r2, [r7, #6]
 80085d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085fe:	d10f      	bne.n	8008620 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800860e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800861e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b40      	cmp	r3, #64	; 0x40
 800862c:	d007      	beq.n	800863e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800863c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008646:	d14b      	bne.n	80086e0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <HAL_SPI_Transmit+0xf6>
 8008650:	8afb      	ldrh	r3, [r7, #22]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d13e      	bne.n	80086d4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	881a      	ldrh	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	1c9a      	adds	r2, r3, #2
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800867a:	e02b      	b.n	80086d4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b02      	cmp	r3, #2
 8008688:	d112      	bne.n	80086b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	881a      	ldrh	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	1c9a      	adds	r2, r3, #2
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80086ae:	e011      	b.n	80086d4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086b0:	f7fe fc0a 	bl	8006ec8 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d803      	bhi.n	80086c8 <HAL_SPI_Transmit+0x168>
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086c6:	d102      	bne.n	80086ce <HAL_SPI_Transmit+0x16e>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086d2:	e074      	b.n	80087be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1ce      	bne.n	800867c <HAL_SPI_Transmit+0x11c>
 80086de:	e04c      	b.n	800877a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <HAL_SPI_Transmit+0x18e>
 80086e8:	8afb      	ldrh	r3, [r7, #22]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d140      	bne.n	8008770 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	330c      	adds	r3, #12
 80086f8:	7812      	ldrb	r2, [r2, #0]
 80086fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008714:	e02c      	b.n	8008770 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b02      	cmp	r3, #2
 8008722:	d113      	bne.n	800874c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	330c      	adds	r3, #12
 800872e:	7812      	ldrb	r2, [r2, #0]
 8008730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	b29a      	uxth	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	86da      	strh	r2, [r3, #54]	; 0x36
 800874a:	e011      	b.n	8008770 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800874c:	f7fe fbbc 	bl	8006ec8 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d803      	bhi.n	8008764 <HAL_SPI_Transmit+0x204>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008762:	d102      	bne.n	800876a <HAL_SPI_Transmit+0x20a>
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800876e:	e026      	b.n	80087be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008774:	b29b      	uxth	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1cd      	bne.n	8008716 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 fbb8 	bl	8008ef4 <SPI_EndRxTxTransaction>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2220      	movs	r2, #32
 800878e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008798:	2300      	movs	r3, #0
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	613b      	str	r3, [r7, #16]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	77fb      	strb	r3, [r7, #31]
 80087ba:	e000      	b.n	80087be <HAL_SPI_Transmit+0x25e>
  }

error:
 80087bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3720      	adds	r7, #32
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af02      	add	r7, sp, #8
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	4613      	mov	r3, r2
 80087e6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087f4:	d112      	bne.n	800881c <HAL_SPI_Receive+0x44>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10e      	bne.n	800881c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2204      	movs	r2, #4
 8008802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008806:	88fa      	ldrh	r2, [r7, #6]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	4613      	mov	r3, r2
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f000 f8f1 	bl	80089fa <HAL_SPI_TransmitReceive>
 8008818:	4603      	mov	r3, r0
 800881a:	e0ea      	b.n	80089f2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008822:	2b01      	cmp	r3, #1
 8008824:	d101      	bne.n	800882a <HAL_SPI_Receive+0x52>
 8008826:	2302      	movs	r3, #2
 8008828:	e0e3      	b.n	80089f2 <HAL_SPI_Receive+0x21a>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008832:	f7fe fb49 	bl	8006ec8 <HAL_GetTick>
 8008836:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b01      	cmp	r3, #1
 8008842:	d002      	beq.n	800884a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008844:	2302      	movs	r3, #2
 8008846:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008848:	e0ca      	b.n	80089e0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <HAL_SPI_Receive+0x7e>
 8008850:	88fb      	ldrh	r3, [r7, #6]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d102      	bne.n	800885c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	75fb      	strb	r3, [r7, #23]
    goto error;
 800885a:	e0c1      	b.n	80089e0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2204      	movs	r2, #4
 8008860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	88fa      	ldrh	r2, [r7, #6]
 8008874:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	88fa      	ldrh	r2, [r7, #6]
 800887a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088a2:	d10f      	bne.n	80088c4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80088c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d007      	beq.n	80088e2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d162      	bne.n	80089b0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80088ea:	e02e      	b.n	800894a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d115      	bne.n	8008926 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f103 020c 	add.w	r2, r3, #12
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	1c5a      	adds	r2, r3, #1
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008924:	e011      	b.n	800894a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008926:	f7fe facf 	bl	8006ec8 <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d803      	bhi.n	800893e <HAL_SPI_Receive+0x166>
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800893c:	d102      	bne.n	8008944 <HAL_SPI_Receive+0x16c>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008948:	e04a      	b.n	80089e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1cb      	bne.n	80088ec <HAL_SPI_Receive+0x114>
 8008954:	e031      	b.n	80089ba <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b01      	cmp	r3, #1
 8008962:	d113      	bne.n	800898c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896e:	b292      	uxth	r2, r2
 8008970:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008976:	1c9a      	adds	r2, r3, #2
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	87da      	strh	r2, [r3, #62]	; 0x3e
 800898a:	e011      	b.n	80089b0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800898c:	f7fe fa9c 	bl	8006ec8 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	d803      	bhi.n	80089a4 <HAL_SPI_Receive+0x1cc>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089a2:	d102      	bne.n	80089aa <HAL_SPI_Receive+0x1d2>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d102      	bne.n	80089b0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089ae:	e017      	b.n	80089e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1cd      	bne.n	8008956 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fa46 	bl	8008e50 <SPI_EndRxTransaction>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	75fb      	strb	r3, [r7, #23]
 80089dc:	e000      	b.n	80089e0 <HAL_SPI_Receive+0x208>
  }

error :
 80089de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b08c      	sub	sp, #48	; 0x30
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_SPI_TransmitReceive+0x26>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e18a      	b.n	8008d36 <HAL_SPI_TransmitReceive+0x33c>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a28:	f7fe fa4e 	bl	8006ec8 <HAL_GetTick>
 8008a2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008a3e:	887b      	ldrh	r3, [r7, #2]
 8008a40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d00f      	beq.n	8008a6a <HAL_SPI_TransmitReceive+0x70>
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a50:	d107      	bne.n	8008a62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d103      	bne.n	8008a62 <HAL_SPI_TransmitReceive+0x68>
 8008a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d003      	beq.n	8008a6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008a62:	2302      	movs	r3, #2
 8008a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a68:	e15b      	b.n	8008d22 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <HAL_SPI_TransmitReceive+0x82>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <HAL_SPI_TransmitReceive+0x82>
 8008a76:	887b      	ldrh	r3, [r7, #2]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d103      	bne.n	8008a84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a82:	e14e      	b.n	8008d22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d003      	beq.n	8008a98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2205      	movs	r2, #5
 8008a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	887a      	ldrh	r2, [r7, #2]
 8008aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	887a      	ldrh	r2, [r7, #2]
 8008aae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	887a      	ldrh	r2, [r7, #2]
 8008aba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	887a      	ldrh	r2, [r7, #2]
 8008ac0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad8:	2b40      	cmp	r3, #64	; 0x40
 8008ada:	d007      	beq.n	8008aec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008af4:	d178      	bne.n	8008be8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <HAL_SPI_TransmitReceive+0x10a>
 8008afe:	8b7b      	ldrh	r3, [r7, #26]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d166      	bne.n	8008bd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b08:	881a      	ldrh	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	1c9a      	adds	r2, r3, #2
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3b01      	subs	r3, #1
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b28:	e053      	b.n	8008bd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d11b      	bne.n	8008b70 <HAL_SPI_TransmitReceive+0x176>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d016      	beq.n	8008b70 <HAL_SPI_TransmitReceive+0x176>
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d113      	bne.n	8008b70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4c:	881a      	ldrh	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b58:	1c9a      	adds	r2, r3, #2
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d119      	bne.n	8008bb2 <HAL_SPI_TransmitReceive+0x1b8>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d014      	beq.n	8008bb2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	b292      	uxth	r2, r2
 8008b94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	1c9a      	adds	r2, r3, #2
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008bb2:	f7fe f989 	bl	8006ec8 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d807      	bhi.n	8008bd2 <HAL_SPI_TransmitReceive+0x1d8>
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bc8:	d003      	beq.n	8008bd2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008bd0:	e0a7      	b.n	8008d22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1a6      	bne.n	8008b2a <HAL_SPI_TransmitReceive+0x130>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1a1      	bne.n	8008b2a <HAL_SPI_TransmitReceive+0x130>
 8008be6:	e07c      	b.n	8008ce2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <HAL_SPI_TransmitReceive+0x1fc>
 8008bf0:	8b7b      	ldrh	r3, [r7, #26]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d16b      	bne.n	8008cce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	330c      	adds	r3, #12
 8008c00:	7812      	ldrb	r2, [r2, #0]
 8008c02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c1c:	e057      	b.n	8008cce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f003 0302 	and.w	r3, r3, #2
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d11c      	bne.n	8008c66 <HAL_SPI_TransmitReceive+0x26c>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d017      	beq.n	8008c66 <HAL_SPI_TransmitReceive+0x26c>
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d114      	bne.n	8008c66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	330c      	adds	r3, #12
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d119      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x2ae>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d014      	beq.n	8008ca8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ca8:	f7fe f90e 	bl	8006ec8 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d803      	bhi.n	8008cc0 <HAL_SPI_TransmitReceive+0x2c6>
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cbe:	d102      	bne.n	8008cc6 <HAL_SPI_TransmitReceive+0x2cc>
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d103      	bne.n	8008cce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ccc:	e029      	b.n	8008d22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1a2      	bne.n	8008c1e <HAL_SPI_TransmitReceive+0x224>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d19d      	bne.n	8008c1e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 f904 	bl	8008ef4 <SPI_EndRxTxTransaction>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d006      	beq.n	8008d00 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008cfe:	e010      	b.n	8008d22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10b      	bne.n	8008d20 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d08:	2300      	movs	r3, #0
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	e000      	b.n	8008d22 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008d20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3730      	adds	r7, #48	; 0x30
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d50:	f7fe f8ba 	bl	8006ec8 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d60:	f7fe f8b2 	bl	8006ec8 <HAL_GetTick>
 8008d64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d66:	4b39      	ldr	r3, [pc, #228]	; (8008e4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	015b      	lsls	r3, r3, #5
 8008d6c:	0d1b      	lsrs	r3, r3, #20
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	fb02 f303 	mul.w	r3, r2, r3
 8008d74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d76:	e054      	b.n	8008e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d7e:	d050      	beq.n	8008e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d80:	f7fe f8a2 	bl	8006ec8 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d902      	bls.n	8008d96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d13d      	bne.n	8008e12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008da4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dae:	d111      	bne.n	8008dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db8:	d004      	beq.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc2:	d107      	bne.n	8008dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ddc:	d10f      	bne.n	8008dfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e017      	b.n	8008e42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	bf0c      	ite	eq
 8008e32:	2301      	moveq	r3, #1
 8008e34:	2300      	movne	r3, #0
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d19b      	bne.n	8008d78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000138 	.word	0x20000138

08008e50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af02      	add	r7, sp, #8
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e64:	d111      	bne.n	8008e8a <SPI_EndRxTransaction+0x3a>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e6e:	d004      	beq.n	8008e7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e78:	d107      	bne.n	8008e8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e88:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e92:	d117      	bne.n	8008ec4 <SPI_EndRxTransaction+0x74>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e9c:	d112      	bne.n	8008ec4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f7ff ff49 	bl	8008d40 <SPI_WaitFlagStateUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01a      	beq.n	8008eea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb8:	f043 0220 	orr.w	r2, r3, #32
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e013      	b.n	8008eec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2180      	movs	r1, #128	; 0x80
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff ff36 	bl	8008d40 <SPI_WaitFlagStateUntilTimeout>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d007      	beq.n	8008eea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ede:	f043 0220 	orr.w	r2, r3, #32
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e000      	b.n	8008eec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	2180      	movs	r1, #128	; 0x80
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f7ff ff18 	bl	8008d40 <SPI_WaitFlagStateUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d007      	beq.n	8008f26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1a:	f043 0220 	orr.w	r2, r3, #32
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e000      	b.n	8008f28 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e041      	b.n	8008fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d106      	bne.n	8008f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fc fbc8 	bl	80056ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f000 ffce 	bl	8009f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d001      	beq.n	8008fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e03a      	b.n	800905e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a18      	ldr	r2, [pc, #96]	; (8009068 <HAL_TIM_Base_Start_IT+0x98>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d00e      	beq.n	8009028 <HAL_TIM_Base_Start_IT+0x58>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009012:	d009      	beq.n	8009028 <HAL_TIM_Base_Start_IT+0x58>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a14      	ldr	r2, [pc, #80]	; (800906c <HAL_TIM_Base_Start_IT+0x9c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d004      	beq.n	8009028 <HAL_TIM_Base_Start_IT+0x58>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a13      	ldr	r2, [pc, #76]	; (8009070 <HAL_TIM_Base_Start_IT+0xa0>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d111      	bne.n	800904c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b06      	cmp	r3, #6
 8009038:	d010      	beq.n	800905c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f042 0201 	orr.w	r2, r2, #1
 8009048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800904a:	e007      	b.n	800905c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 0201 	orr.w	r2, r2, #1
 800905a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	bc80      	pop	{r7}
 8009066:	4770      	bx	lr
 8009068:	40012c00 	.word	0x40012c00
 800906c:	40000400 	.word	0x40000400
 8009070:	40000800 	.word	0x40000800

08009074 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6a1a      	ldr	r2, [r3, #32]
 8009092:	f241 1311 	movw	r3, #4369	; 0x1111
 8009096:	4013      	ands	r3, r2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10f      	bne.n	80090bc <HAL_TIM_Base_Stop_IT+0x48>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6a1a      	ldr	r2, [r3, #32]
 80090a2:	f240 4344 	movw	r3, #1092	; 0x444
 80090a6:	4013      	ands	r3, r2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d107      	bne.n	80090bc <HAL_TIM_Base_Stop_IT+0x48>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0201 	bic.w	r2, r2, #1
 80090ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e041      	b.n	8009166 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f839 	bl	800916e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f000 fefe 	bl	8009f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr

08009180 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d109      	bne.n	80091a4 <HAL_TIM_OC_Start+0x24>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b01      	cmp	r3, #1
 800919a:	bf14      	ite	ne
 800919c:	2301      	movne	r3, #1
 800919e:	2300      	moveq	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	e022      	b.n	80091ea <HAL_TIM_OC_Start+0x6a>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d109      	bne.n	80091be <HAL_TIM_OC_Start+0x3e>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	bf14      	ite	ne
 80091b6:	2301      	movne	r3, #1
 80091b8:	2300      	moveq	r3, #0
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	e015      	b.n	80091ea <HAL_TIM_OC_Start+0x6a>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d109      	bne.n	80091d8 <HAL_TIM_OC_Start+0x58>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	bf14      	ite	ne
 80091d0:	2301      	movne	r3, #1
 80091d2:	2300      	moveq	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	e008      	b.n	80091ea <HAL_TIM_OC_Start+0x6a>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	bf14      	ite	ne
 80091e4:	2301      	movne	r3, #1
 80091e6:	2300      	moveq	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e05e      	b.n	80092b0 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d104      	bne.n	8009202 <HAL_TIM_OC_Start+0x82>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009200:	e013      	b.n	800922a <HAL_TIM_OC_Start+0xaa>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b04      	cmp	r3, #4
 8009206:	d104      	bne.n	8009212 <HAL_TIM_OC_Start+0x92>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009210:	e00b      	b.n	800922a <HAL_TIM_OC_Start+0xaa>
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2b08      	cmp	r3, #8
 8009216:	d104      	bne.n	8009222 <HAL_TIM_OC_Start+0xa2>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009220:	e003      	b.n	800922a <HAL_TIM_OC_Start+0xaa>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2202      	movs	r2, #2
 8009226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2201      	movs	r2, #1
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	4618      	mov	r0, r3
 8009234:	f001 fa87 	bl	800a746 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1e      	ldr	r2, [pc, #120]	; (80092b8 <HAL_TIM_OC_Start+0x138>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d107      	bne.n	8009252 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a18      	ldr	r2, [pc, #96]	; (80092b8 <HAL_TIM_OC_Start+0x138>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00e      	beq.n	800927a <HAL_TIM_OC_Start+0xfa>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009264:	d009      	beq.n	800927a <HAL_TIM_OC_Start+0xfa>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a14      	ldr	r2, [pc, #80]	; (80092bc <HAL_TIM_OC_Start+0x13c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d004      	beq.n	800927a <HAL_TIM_OC_Start+0xfa>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a12      	ldr	r2, [pc, #72]	; (80092c0 <HAL_TIM_OC_Start+0x140>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d111      	bne.n	800929e <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b06      	cmp	r3, #6
 800928a:	d010      	beq.n	80092ae <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0201 	orr.w	r2, r2, #1
 800929a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800929c:	e007      	b.n	80092ae <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f042 0201 	orr.w	r2, r2, #1
 80092ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	40012c00 	.word	0x40012c00
 80092bc:	40000400 	.word	0x40000400
 80092c0:	40000800 	.word	0x40000800

080092c4 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2200      	movs	r2, #0
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 fa35 	bl	800a746 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a29      	ldr	r2, [pc, #164]	; (8009388 <HAL_TIM_OC_Stop+0xc4>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d117      	bne.n	8009316 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6a1a      	ldr	r2, [r3, #32]
 80092ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80092f0:	4013      	ands	r3, r2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10f      	bne.n	8009316 <HAL_TIM_OC_Stop+0x52>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6a1a      	ldr	r2, [r3, #32]
 80092fc:	f240 4344 	movw	r3, #1092	; 0x444
 8009300:	4013      	ands	r3, r2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d107      	bne.n	8009316 <HAL_TIM_OC_Stop+0x52>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6a1a      	ldr	r2, [r3, #32]
 800931c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009320:	4013      	ands	r3, r2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10f      	bne.n	8009346 <HAL_TIM_OC_Stop+0x82>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6a1a      	ldr	r2, [r3, #32]
 800932c:	f240 4344 	movw	r3, #1092	; 0x444
 8009330:	4013      	ands	r3, r2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d107      	bne.n	8009346 <HAL_TIM_OC_Stop+0x82>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0201 	bic.w	r2, r2, #1
 8009344:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <HAL_TIM_OC_Stop+0x92>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009354:	e013      	b.n	800937e <HAL_TIM_OC_Stop+0xba>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b04      	cmp	r3, #4
 800935a:	d104      	bne.n	8009366 <HAL_TIM_OC_Stop+0xa2>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009364:	e00b      	b.n	800937e <HAL_TIM_OC_Stop+0xba>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b08      	cmp	r3, #8
 800936a:	d104      	bne.n	8009376 <HAL_TIM_OC_Stop+0xb2>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009374:	e003      	b.n	800937e <HAL_TIM_OC_Stop+0xba>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	40012c00 	.word	0x40012c00

0800938c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e041      	b.n	8009422 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f839 	bl	800942a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f000 fda0 	bl	8009f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	bc80      	pop	{r7}
 800943a:	4770      	bx	lr

0800943c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d104      	bne.n	8009456 <HAL_TIM_IC_Start_IT+0x1a>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009452:	b2db      	uxtb	r3, r3
 8009454:	e013      	b.n	800947e <HAL_TIM_IC_Start_IT+0x42>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b04      	cmp	r3, #4
 800945a:	d104      	bne.n	8009466 <HAL_TIM_IC_Start_IT+0x2a>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009462:	b2db      	uxtb	r3, r3
 8009464:	e00b      	b.n	800947e <HAL_TIM_IC_Start_IT+0x42>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b08      	cmp	r3, #8
 800946a:	d104      	bne.n	8009476 <HAL_TIM_IC_Start_IT+0x3a>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009472:	b2db      	uxtb	r3, r3
 8009474:	e003      	b.n	800947e <HAL_TIM_IC_Start_IT+0x42>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800947c:	b2db      	uxtb	r3, r3
 800947e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d104      	bne.n	8009490 <HAL_TIM_IC_Start_IT+0x54>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800948c:	b2db      	uxtb	r3, r3
 800948e:	e013      	b.n	80094b8 <HAL_TIM_IC_Start_IT+0x7c>
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b04      	cmp	r3, #4
 8009494:	d104      	bne.n	80094a0 <HAL_TIM_IC_Start_IT+0x64>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800949c:	b2db      	uxtb	r3, r3
 800949e:	e00b      	b.n	80094b8 <HAL_TIM_IC_Start_IT+0x7c>
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2b08      	cmp	r3, #8
 80094a4:	d104      	bne.n	80094b0 <HAL_TIM_IC_Start_IT+0x74>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	e003      	b.n	80094b8 <HAL_TIM_IC_Start_IT+0x7c>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d102      	bne.n	80094c6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d001      	beq.n	80094ca <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e0b3      	b.n	8009632 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d104      	bne.n	80094da <HAL_TIM_IC_Start_IT+0x9e>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094d8:	e013      	b.n	8009502 <HAL_TIM_IC_Start_IT+0xc6>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d104      	bne.n	80094ea <HAL_TIM_IC_Start_IT+0xae>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094e8:	e00b      	b.n	8009502 <HAL_TIM_IC_Start_IT+0xc6>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	d104      	bne.n	80094fa <HAL_TIM_IC_Start_IT+0xbe>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094f8:	e003      	b.n	8009502 <HAL_TIM_IC_Start_IT+0xc6>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2202      	movs	r2, #2
 80094fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d104      	bne.n	8009512 <HAL_TIM_IC_Start_IT+0xd6>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009510:	e013      	b.n	800953a <HAL_TIM_IC_Start_IT+0xfe>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b04      	cmp	r3, #4
 8009516:	d104      	bne.n	8009522 <HAL_TIM_IC_Start_IT+0xe6>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2202      	movs	r2, #2
 800951c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009520:	e00b      	b.n	800953a <HAL_TIM_IC_Start_IT+0xfe>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b08      	cmp	r3, #8
 8009526:	d104      	bne.n	8009532 <HAL_TIM_IC_Start_IT+0xf6>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009530:	e003      	b.n	800953a <HAL_TIM_IC_Start_IT+0xfe>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2202      	movs	r2, #2
 8009536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b0c      	cmp	r3, #12
 800953e:	d841      	bhi.n	80095c4 <HAL_TIM_IC_Start_IT+0x188>
 8009540:	a201      	add	r2, pc, #4	; (adr r2, 8009548 <HAL_TIM_IC_Start_IT+0x10c>)
 8009542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009546:	bf00      	nop
 8009548:	0800957d 	.word	0x0800957d
 800954c:	080095c5 	.word	0x080095c5
 8009550:	080095c5 	.word	0x080095c5
 8009554:	080095c5 	.word	0x080095c5
 8009558:	0800958f 	.word	0x0800958f
 800955c:	080095c5 	.word	0x080095c5
 8009560:	080095c5 	.word	0x080095c5
 8009564:	080095c5 	.word	0x080095c5
 8009568:	080095a1 	.word	0x080095a1
 800956c:	080095c5 	.word	0x080095c5
 8009570:	080095c5 	.word	0x080095c5
 8009574:	080095c5 	.word	0x080095c5
 8009578:	080095b3 	.word	0x080095b3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f042 0202 	orr.w	r2, r2, #2
 800958a:	60da      	str	r2, [r3, #12]
      break;
 800958c:	e01b      	b.n	80095c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68da      	ldr	r2, [r3, #12]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f042 0204 	orr.w	r2, r2, #4
 800959c:	60da      	str	r2, [r3, #12]
      break;
 800959e:	e012      	b.n	80095c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68da      	ldr	r2, [r3, #12]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f042 0208 	orr.w	r2, r2, #8
 80095ae:	60da      	str	r2, [r3, #12]
      break;
 80095b0:	e009      	b.n	80095c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0210 	orr.w	r2, r2, #16
 80095c0:	60da      	str	r2, [r3, #12]
      break;
 80095c2:	e000      	b.n	80095c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80095c4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2201      	movs	r2, #1
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f001 f8b9 	bl	800a746 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a18      	ldr	r2, [pc, #96]	; (800963c <HAL_TIM_IC_Start_IT+0x200>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d00e      	beq.n	80095fc <HAL_TIM_IC_Start_IT+0x1c0>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e6:	d009      	beq.n	80095fc <HAL_TIM_IC_Start_IT+0x1c0>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a14      	ldr	r2, [pc, #80]	; (8009640 <HAL_TIM_IC_Start_IT+0x204>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d004      	beq.n	80095fc <HAL_TIM_IC_Start_IT+0x1c0>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a13      	ldr	r2, [pc, #76]	; (8009644 <HAL_TIM_IC_Start_IT+0x208>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d111      	bne.n	8009620 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b06      	cmp	r3, #6
 800960c:	d010      	beq.n	8009630 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f042 0201 	orr.w	r2, r2, #1
 800961c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800961e:	e007      	b.n	8009630 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0201 	orr.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	40012c00 	.word	0x40012c00
 8009640:	40000400 	.word	0x40000400
 8009644:	40000800 	.word	0x40000800

08009648 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b0c      	cmp	r3, #12
 8009656:	d841      	bhi.n	80096dc <HAL_TIM_IC_Stop_IT+0x94>
 8009658:	a201      	add	r2, pc, #4	; (adr r2, 8009660 <HAL_TIM_IC_Stop_IT+0x18>)
 800965a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965e:	bf00      	nop
 8009660:	08009695 	.word	0x08009695
 8009664:	080096dd 	.word	0x080096dd
 8009668:	080096dd 	.word	0x080096dd
 800966c:	080096dd 	.word	0x080096dd
 8009670:	080096a7 	.word	0x080096a7
 8009674:	080096dd 	.word	0x080096dd
 8009678:	080096dd 	.word	0x080096dd
 800967c:	080096dd 	.word	0x080096dd
 8009680:	080096b9 	.word	0x080096b9
 8009684:	080096dd 	.word	0x080096dd
 8009688:	080096dd 	.word	0x080096dd
 800968c:	080096dd 	.word	0x080096dd
 8009690:	080096cb 	.word	0x080096cb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0202 	bic.w	r2, r2, #2
 80096a2:	60da      	str	r2, [r3, #12]
      break;
 80096a4:	e01b      	b.n	80096de <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68da      	ldr	r2, [r3, #12]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0204 	bic.w	r2, r2, #4
 80096b4:	60da      	str	r2, [r3, #12]
      break;
 80096b6:	e012      	b.n	80096de <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0208 	bic.w	r2, r2, #8
 80096c6:	60da      	str	r2, [r3, #12]
      break;
 80096c8:	e009      	b.n	80096de <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0210 	bic.w	r2, r2, #16
 80096d8:	60da      	str	r2, [r3, #12]
      break;
 80096da:	e000      	b.n	80096de <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 80096dc:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2200      	movs	r2, #0
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 f82d 	bl	800a746 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6a1a      	ldr	r2, [r3, #32]
 80096f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80096f6:	4013      	ands	r3, r2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10f      	bne.n	800971c <HAL_TIM_IC_Stop_IT+0xd4>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6a1a      	ldr	r2, [r3, #32]
 8009702:	f240 4344 	movw	r3, #1092	; 0x444
 8009706:	4013      	ands	r3, r2
 8009708:	2b00      	cmp	r3, #0
 800970a:	d107      	bne.n	800971c <HAL_TIM_IC_Stop_IT+0xd4>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 0201 	bic.w	r2, r2, #1
 800971a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d104      	bne.n	800972c <HAL_TIM_IC_Stop_IT+0xe4>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800972a:	e013      	b.n	8009754 <HAL_TIM_IC_Stop_IT+0x10c>
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b04      	cmp	r3, #4
 8009730:	d104      	bne.n	800973c <HAL_TIM_IC_Stop_IT+0xf4>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800973a:	e00b      	b.n	8009754 <HAL_TIM_IC_Stop_IT+0x10c>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b08      	cmp	r3, #8
 8009740:	d104      	bne.n	800974c <HAL_TIM_IC_Stop_IT+0x104>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800974a:	e003      	b.n	8009754 <HAL_TIM_IC_Stop_IT+0x10c>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d104      	bne.n	8009764 <HAL_TIM_IC_Stop_IT+0x11c>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009762:	e013      	b.n	800978c <HAL_TIM_IC_Stop_IT+0x144>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b04      	cmp	r3, #4
 8009768:	d104      	bne.n	8009774 <HAL_TIM_IC_Stop_IT+0x12c>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009772:	e00b      	b.n	800978c <HAL_TIM_IC_Stop_IT+0x144>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2b08      	cmp	r3, #8
 8009778:	d104      	bne.n	8009784 <HAL_TIM_IC_Stop_IT+0x13c>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009782:	e003      	b.n	800978c <HAL_TIM_IC_Stop_IT+0x144>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop

08009798 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e041      	b.n	8009830 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d106      	bne.n	80097c6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f839 	bl	8009838 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f000 fb99 	bl	8009f10 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f022 0208 	bic.w	r2, r2, #8
 80097ec:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	bc80      	pop	{r7}
 8009848:	4770      	bx	lr

0800984a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b02      	cmp	r3, #2
 800985e:	d122      	bne.n	80098a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b02      	cmp	r3, #2
 800986c:	d11b      	bne.n	80098a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f06f 0202 	mvn.w	r2, #2
 8009876:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	f003 0303 	and.w	r3, r3, #3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7fa ff13 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 8009892:	e005      	b.n	80098a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fb20 	bl	8009eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fb26 	bl	8009eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d122      	bne.n	80098fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d11b      	bne.n	80098fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f06f 0204 	mvn.w	r2, #4
 80098ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fa fee9 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 80098e6:	e005      	b.n	80098f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 faf6 	bl	8009eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fafc 	bl	8009eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b08      	cmp	r3, #8
 8009906:	d122      	bne.n	800994e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f003 0308 	and.w	r3, r3, #8
 8009912:	2b08      	cmp	r3, #8
 8009914:	d11b      	bne.n	800994e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f06f 0208 	mvn.w	r2, #8
 800991e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2204      	movs	r2, #4
 8009924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	f003 0303 	and.w	r3, r3, #3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7fa febf 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 800993a:	e005      	b.n	8009948 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 facc 	bl	8009eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fad2 	bl	8009eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b10      	cmp	r3, #16
 800995a:	d122      	bne.n	80099a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f003 0310 	and.w	r3, r3, #16
 8009966:	2b10      	cmp	r3, #16
 8009968:	d11b      	bne.n	80099a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f06f 0210 	mvn.w	r2, #16
 8009972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2208      	movs	r2, #8
 8009978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69db      	ldr	r3, [r3, #28]
 8009980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009984:	2b00      	cmp	r3, #0
 8009986:	d003      	beq.n	8009990 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7fa fe95 	bl	80046b8 <HAL_TIM_IC_CaptureCallback>
 800998e:	e005      	b.n	800999c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 faa2 	bl	8009eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 faa8 	bl	8009eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d10e      	bne.n	80099ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d107      	bne.n	80099ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f06f 0201 	mvn.w	r2, #1
 80099c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa7d 	bl	8009ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d8:	2b80      	cmp	r3, #128	; 0x80
 80099da:	d10e      	bne.n	80099fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e6:	2b80      	cmp	r3, #128	; 0x80
 80099e8:	d107      	bne.n	80099fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 ff83 	bl	800a900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b40      	cmp	r3, #64	; 0x40
 8009a06:	d10e      	bne.n	8009a26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a12:	2b40      	cmp	r3, #64	; 0x40
 8009a14:	d107      	bne.n	8009a26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fa6c 	bl	8009efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	f003 0320 	and.w	r3, r3, #32
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	d10e      	bne.n	8009a52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d107      	bne.n	8009a52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f06f 0220 	mvn.w	r2, #32
 8009a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 ff4e 	bl	800a8ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d101      	bne.n	8009a76 <HAL_TIM_OC_ConfigChannel+0x1a>
 8009a72:	2302      	movs	r3, #2
 8009a74:	e046      	b.n	8009b04 <HAL_TIM_OC_ConfigChannel+0xa8>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b0c      	cmp	r3, #12
 8009a82:	d839      	bhi.n	8009af8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8009a84:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <HAL_TIM_OC_ConfigChannel+0x30>)
 8009a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8a:	bf00      	nop
 8009a8c:	08009ac1 	.word	0x08009ac1
 8009a90:	08009af9 	.word	0x08009af9
 8009a94:	08009af9 	.word	0x08009af9
 8009a98:	08009af9 	.word	0x08009af9
 8009a9c:	08009acf 	.word	0x08009acf
 8009aa0:	08009af9 	.word	0x08009af9
 8009aa4:	08009af9 	.word	0x08009af9
 8009aa8:	08009af9 	.word	0x08009af9
 8009aac:	08009add 	.word	0x08009add
 8009ab0:	08009af9 	.word	0x08009af9
 8009ab4:	08009af9 	.word	0x08009af9
 8009ab8:	08009af9 	.word	0x08009af9
 8009abc:	08009aeb 	.word	0x08009aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68b9      	ldr	r1, [r7, #8]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fa84 	bl	8009fd4 <TIM_OC1_SetConfig>
      break;
 8009acc:	e015      	b.n	8009afa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68b9      	ldr	r1, [r7, #8]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fae3 	bl	800a0a0 <TIM_OC2_SetConfig>
      break;
 8009ada:	e00e      	b.n	8009afa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68b9      	ldr	r1, [r7, #8]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fb46 	bl	800a174 <TIM_OC3_SetConfig>
      break;
 8009ae8:	e007      	b.n	8009afa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fba9 	bl	800a248 <TIM_OC4_SetConfig>
      break;
 8009af6:	e000      	b.n	8009afa <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8009af8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d101      	bne.n	8009b26 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009b22:	2302      	movs	r3, #2
 8009b24:	e082      	b.n	8009c2c <HAL_TIM_IC_ConfigChannel+0x120>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d11b      	bne.n	8009b6c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6818      	ldr	r0, [r3, #0]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	6819      	ldr	r1, [r3, #0]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f000 fc5c 	bl	800a400 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	699a      	ldr	r2, [r3, #24]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 020c 	bic.w	r2, r2, #12
 8009b56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6999      	ldr	r1, [r3, #24]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	619a      	str	r2, [r3, #24]
 8009b6a:	e05a      	b.n	8009c22 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d11c      	bne.n	8009bac <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6819      	ldr	r1, [r3, #0]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f000 fcc5 	bl	800a510 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	699a      	ldr	r2, [r3, #24]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6999      	ldr	r1, [r3, #24]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	021a      	lsls	r2, r3, #8
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	619a      	str	r2, [r3, #24]
 8009baa:	e03a      	b.n	8009c22 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d11b      	bne.n	8009bea <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	6819      	ldr	r1, [r3, #0]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f000 fd10 	bl	800a5e6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 020c 	bic.w	r2, r2, #12
 8009bd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	69d9      	ldr	r1, [r3, #28]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	689a      	ldr	r2, [r3, #8]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	61da      	str	r2, [r3, #28]
 8009be8:	e01b      	b.n	8009c22 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	6819      	ldr	r1, [r3, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f000 fd2f 	bl	800a65c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69da      	ldr	r2, [r3, #28]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69d9      	ldr	r1, [r3, #28]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	021a      	lsls	r2, r3, #8
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_TIM_ConfigClockSource+0x18>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e0b3      	b.n	8009db4 <HAL_TIM_ConfigClockSource+0x180>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c84:	d03e      	beq.n	8009d04 <HAL_TIM_ConfigClockSource+0xd0>
 8009c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c8a:	f200 8087 	bhi.w	8009d9c <HAL_TIM_ConfigClockSource+0x168>
 8009c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c92:	f000 8085 	beq.w	8009da0 <HAL_TIM_ConfigClockSource+0x16c>
 8009c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c9a:	d87f      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x168>
 8009c9c:	2b70      	cmp	r3, #112	; 0x70
 8009c9e:	d01a      	beq.n	8009cd6 <HAL_TIM_ConfigClockSource+0xa2>
 8009ca0:	2b70      	cmp	r3, #112	; 0x70
 8009ca2:	d87b      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x168>
 8009ca4:	2b60      	cmp	r3, #96	; 0x60
 8009ca6:	d050      	beq.n	8009d4a <HAL_TIM_ConfigClockSource+0x116>
 8009ca8:	2b60      	cmp	r3, #96	; 0x60
 8009caa:	d877      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x168>
 8009cac:	2b50      	cmp	r3, #80	; 0x50
 8009cae:	d03c      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0xf6>
 8009cb0:	2b50      	cmp	r3, #80	; 0x50
 8009cb2:	d873      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x168>
 8009cb4:	2b40      	cmp	r3, #64	; 0x40
 8009cb6:	d058      	beq.n	8009d6a <HAL_TIM_ConfigClockSource+0x136>
 8009cb8:	2b40      	cmp	r3, #64	; 0x40
 8009cba:	d86f      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x168>
 8009cbc:	2b30      	cmp	r3, #48	; 0x30
 8009cbe:	d064      	beq.n	8009d8a <HAL_TIM_ConfigClockSource+0x156>
 8009cc0:	2b30      	cmp	r3, #48	; 0x30
 8009cc2:	d86b      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x168>
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d060      	beq.n	8009d8a <HAL_TIM_ConfigClockSource+0x156>
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	d867      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x168>
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d05c      	beq.n	8009d8a <HAL_TIM_ConfigClockSource+0x156>
 8009cd0:	2b10      	cmp	r3, #16
 8009cd2:	d05a      	beq.n	8009d8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009cd4:	e062      	b.n	8009d9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6899      	ldr	r1, [r3, #8]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f000 fd0f 	bl	800a708 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	609a      	str	r2, [r3, #8]
      break;
 8009d02:	e04e      	b.n	8009da2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	6899      	ldr	r1, [r3, #8]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f000 fcf8 	bl	800a708 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689a      	ldr	r2, [r3, #8]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d26:	609a      	str	r2, [r3, #8]
      break;
 8009d28:	e03b      	b.n	8009da2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	6859      	ldr	r1, [r3, #4]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f000 fbbc 	bl	800a4b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2150      	movs	r1, #80	; 0x50
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fcc6 	bl	800a6d4 <TIM_ITRx_SetConfig>
      break;
 8009d48:	e02b      	b.n	8009da2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	6859      	ldr	r1, [r3, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f000 fc16 	bl	800a588 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2160      	movs	r1, #96	; 0x60
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 fcb6 	bl	800a6d4 <TIM_ITRx_SetConfig>
      break;
 8009d68:	e01b      	b.n	8009da2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	6859      	ldr	r1, [r3, #4]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	461a      	mov	r2, r3
 8009d78:	f000 fb9c 	bl	800a4b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2140      	movs	r1, #64	; 0x40
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 fca6 	bl	800a6d4 <TIM_ITRx_SetConfig>
      break;
 8009d88:	e00b      	b.n	8009da2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4619      	mov	r1, r3
 8009d94:	4610      	mov	r0, r2
 8009d96:	f000 fc9d 	bl	800a6d4 <TIM_ITRx_SetConfig>
        break;
 8009d9a:	e002      	b.n	8009da2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009d9c:	bf00      	nop
 8009d9e:	e000      	b.n	8009da2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009da0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d101      	bne.n	8009dd4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	e031      	b.n	8009e38 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fa7c 	bl	800a2e4 <TIM_SlaveTimer_SetConfig>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d009      	beq.n	8009e06 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e018      	b.n	8009e38 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68da      	ldr	r2, [r3, #12]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e14:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68da      	ldr	r2, [r3, #12]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e24:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b0c      	cmp	r3, #12
 8009e52:	d831      	bhi.n	8009eb8 <HAL_TIM_ReadCapturedValue+0x78>
 8009e54:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e91 	.word	0x08009e91
 8009e60:	08009eb9 	.word	0x08009eb9
 8009e64:	08009eb9 	.word	0x08009eb9
 8009e68:	08009eb9 	.word	0x08009eb9
 8009e6c:	08009e9b 	.word	0x08009e9b
 8009e70:	08009eb9 	.word	0x08009eb9
 8009e74:	08009eb9 	.word	0x08009eb9
 8009e78:	08009eb9 	.word	0x08009eb9
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009eb9 	.word	0x08009eb9
 8009e84:	08009eb9 	.word	0x08009eb9
 8009e88:	08009eb9 	.word	0x08009eb9
 8009e8c:	08009eaf 	.word	0x08009eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e96:	60fb      	str	r3, [r7, #12]

      break;
 8009e98:	e00f      	b.n	8009eba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea0:	60fb      	str	r3, [r7, #12]

      break;
 8009ea2:	e00a      	b.n	8009eba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eaa:	60fb      	str	r3, [r7, #12]

      break;
 8009eac:	e005      	b.n	8009eba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb4:	60fb      	str	r3, [r7, #12]

      break;
 8009eb6:	e000      	b.n	8009eba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009eb8:	bf00      	nop
  }

  return tmpreg;
 8009eba:	68fb      	ldr	r3, [r7, #12]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bc80      	pop	{r7}
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop

08009ec8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bc80      	pop	{r7}
 8009ed8:	4770      	bx	lr

08009eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b083      	sub	sp, #12
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ee2:	bf00      	nop
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bc80      	pop	{r7}
 8009eea:	4770      	bx	lr

08009eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bc80      	pop	{r7}
 8009efc:	4770      	bx	lr

08009efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bc80      	pop	{r7}
 8009f0e:	4770      	bx	lr

08009f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a29      	ldr	r2, [pc, #164]	; (8009fc8 <TIM_Base_SetConfig+0xb8>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d00b      	beq.n	8009f40 <TIM_Base_SetConfig+0x30>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2e:	d007      	beq.n	8009f40 <TIM_Base_SetConfig+0x30>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a26      	ldr	r2, [pc, #152]	; (8009fcc <TIM_Base_SetConfig+0xbc>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d003      	beq.n	8009f40 <TIM_Base_SetConfig+0x30>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a25      	ldr	r2, [pc, #148]	; (8009fd0 <TIM_Base_SetConfig+0xc0>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d108      	bne.n	8009f52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a1c      	ldr	r2, [pc, #112]	; (8009fc8 <TIM_Base_SetConfig+0xb8>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d00b      	beq.n	8009f72 <TIM_Base_SetConfig+0x62>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f60:	d007      	beq.n	8009f72 <TIM_Base_SetConfig+0x62>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a19      	ldr	r2, [pc, #100]	; (8009fcc <TIM_Base_SetConfig+0xbc>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <TIM_Base_SetConfig+0x62>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a18      	ldr	r2, [pc, #96]	; (8009fd0 <TIM_Base_SetConfig+0xc0>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d108      	bne.n	8009f84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a07      	ldr	r2, [pc, #28]	; (8009fc8 <TIM_Base_SetConfig+0xb8>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d103      	bne.n	8009fb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	691a      	ldr	r2, [r3, #16]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	615a      	str	r2, [r3, #20]
}
 8009fbe:	bf00      	nop
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bc80      	pop	{r7}
 8009fc6:	4770      	bx	lr
 8009fc8:	40012c00 	.word	0x40012c00
 8009fcc:	40000400 	.word	0x40000400
 8009fd0:	40000800 	.word	0x40000800

08009fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	f023 0201 	bic.w	r2, r3, #1
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
 8009fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0303 	bic.w	r3, r3, #3
 800a00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f023 0302 	bic.w	r3, r3, #2
 800a01c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	4313      	orrs	r3, r2
 800a026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a1c      	ldr	r2, [pc, #112]	; (800a09c <TIM_OC1_SetConfig+0xc8>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10c      	bne.n	800a04a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f023 0308 	bic.w	r3, r3, #8
 800a036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	4313      	orrs	r3, r2
 800a040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f023 0304 	bic.w	r3, r3, #4
 800a048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a13      	ldr	r2, [pc, #76]	; (800a09c <TIM_OC1_SetConfig+0xc8>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d111      	bne.n	800a076 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	4313      	orrs	r3, r2
 800a06a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	621a      	str	r2, [r3, #32]
}
 800a090:	bf00      	nop
 800a092:	371c      	adds	r7, #28
 800a094:	46bd      	mov	sp, r7
 800a096:	bc80      	pop	{r7}
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	40012c00 	.word	0x40012c00

0800a0a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	f023 0210 	bic.w	r2, r3, #16
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	021b      	lsls	r3, r3, #8
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	f023 0320 	bic.w	r3, r3, #32
 800a0ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	011b      	lsls	r3, r3, #4
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a1d      	ldr	r2, [pc, #116]	; (800a170 <TIM_OC2_SetConfig+0xd0>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d10d      	bne.n	800a11c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	011b      	lsls	r3, r3, #4
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	4313      	orrs	r3, r2
 800a112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a11a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a14      	ldr	r2, [pc, #80]	; (800a170 <TIM_OC2_SetConfig+0xd0>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d113      	bne.n	800a14c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a12a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	621a      	str	r2, [r3, #32]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bc80      	pop	{r7}
 800a16e:	4770      	bx	lr
 800a170:	40012c00 	.word	0x40012c00

0800a174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a174:	b480      	push	{r7}
 800a176:	b087      	sub	sp, #28
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a1b      	ldr	r3, [r3, #32]
 800a182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	69db      	ldr	r3, [r3, #28]
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f023 0303 	bic.w	r3, r3, #3
 800a1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a1d      	ldr	r2, [pc, #116]	; (800a244 <TIM_OC3_SetConfig+0xd0>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d10d      	bne.n	800a1ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	021b      	lsls	r3, r3, #8
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a14      	ldr	r2, [pc, #80]	; (800a244 <TIM_OC3_SetConfig+0xd0>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d113      	bne.n	800a21e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	011b      	lsls	r3, r3, #4
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	4313      	orrs	r3, r2
 800a210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	011b      	lsls	r3, r3, #4
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	621a      	str	r2, [r3, #32]
}
 800a238:	bf00      	nop
 800a23a:	371c      	adds	r7, #28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bc80      	pop	{r7}
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	40012c00 	.word	0x40012c00

0800a248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a248:	b480      	push	{r7}
 800a24a:	b087      	sub	sp, #28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	021b      	lsls	r3, r3, #8
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	4313      	orrs	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	031b      	lsls	r3, r3, #12
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a0f      	ldr	r2, [pc, #60]	; (800a2e0 <TIM_OC4_SetConfig+0x98>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d109      	bne.n	800a2bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	695b      	ldr	r3, [r3, #20]
 800a2b4:	019b      	lsls	r3, r3, #6
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	621a      	str	r2, [r3, #32]
}
 800a2d6:	bf00      	nop
 800a2d8:	371c      	adds	r7, #28
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bc80      	pop	{r7}
 800a2de:	4770      	bx	lr
 800a2e0:	40012c00 	.word	0x40012c00

0800a2e4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	697a      	ldr	r2, [r7, #20]
 800a304:	4313      	orrs	r3, r2
 800a306:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f023 0307 	bic.w	r3, r3, #7
 800a30e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	2b70      	cmp	r3, #112	; 0x70
 800a328:	d01a      	beq.n	800a360 <TIM_SlaveTimer_SetConfig+0x7c>
 800a32a:	2b70      	cmp	r3, #112	; 0x70
 800a32c:	d860      	bhi.n	800a3f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a32e:	2b60      	cmp	r3, #96	; 0x60
 800a330:	d054      	beq.n	800a3dc <TIM_SlaveTimer_SetConfig+0xf8>
 800a332:	2b60      	cmp	r3, #96	; 0x60
 800a334:	d85c      	bhi.n	800a3f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a336:	2b50      	cmp	r3, #80	; 0x50
 800a338:	d046      	beq.n	800a3c8 <TIM_SlaveTimer_SetConfig+0xe4>
 800a33a:	2b50      	cmp	r3, #80	; 0x50
 800a33c:	d858      	bhi.n	800a3f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a33e:	2b40      	cmp	r3, #64	; 0x40
 800a340:	d019      	beq.n	800a376 <TIM_SlaveTimer_SetConfig+0x92>
 800a342:	2b40      	cmp	r3, #64	; 0x40
 800a344:	d854      	bhi.n	800a3f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a346:	2b30      	cmp	r3, #48	; 0x30
 800a348:	d054      	beq.n	800a3f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a34a:	2b30      	cmp	r3, #48	; 0x30
 800a34c:	d850      	bhi.n	800a3f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a34e:	2b20      	cmp	r3, #32
 800a350:	d050      	beq.n	800a3f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a352:	2b20      	cmp	r3, #32
 800a354:	d84c      	bhi.n	800a3f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d04c      	beq.n	800a3f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a35a:	2b10      	cmp	r3, #16
 800a35c:	d04a      	beq.n	800a3f4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800a35e:	e047      	b.n	800a3f0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	68d9      	ldr	r1, [r3, #12]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	689a      	ldr	r2, [r3, #8]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	f000 f9ca 	bl	800a708 <TIM_ETR_SetConfig>
      break;
 800a374:	e03f      	b.n	800a3f6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b05      	cmp	r3, #5
 800a37c:	d101      	bne.n	800a382 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e03a      	b.n	800a3f8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6a1a      	ldr	r2, [r3, #32]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f022 0201 	bic.w	r2, r2, #1
 800a398:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	011b      	lsls	r3, r3, #4
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	621a      	str	r2, [r3, #32]
      break;
 800a3c6:	e016      	b.n	800a3f6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	6899      	ldr	r1, [r3, #8]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	f000 f86d 	bl	800a4b4 <TIM_TI1_ConfigInputStage>
      break;
 800a3da:	e00c      	b.n	800a3f6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6818      	ldr	r0, [r3, #0]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	6899      	ldr	r1, [r3, #8]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	f000 f8cd 	bl	800a588 <TIM_TI2_ConfigInputStage>
      break;
 800a3ee:	e002      	b.n	800a3f6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800a3f0:	bf00      	nop
 800a3f2:	e000      	b.n	800a3f6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800a3f4:	bf00      	nop
  }
  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a1b      	ldr	r3, [r3, #32]
 800a412:	f023 0201 	bic.w	r2, r3, #1
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a1b      	ldr	r3, [r3, #32]
 800a424:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	4a1f      	ldr	r2, [pc, #124]	; (800a4a8 <TIM_TI1_SetConfig+0xa8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00b      	beq.n	800a446 <TIM_TI1_SetConfig+0x46>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a434:	d007      	beq.n	800a446 <TIM_TI1_SetConfig+0x46>
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4a1c      	ldr	r2, [pc, #112]	; (800a4ac <TIM_TI1_SetConfig+0xac>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d003      	beq.n	800a446 <TIM_TI1_SetConfig+0x46>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4a1b      	ldr	r2, [pc, #108]	; (800a4b0 <TIM_TI1_SetConfig+0xb0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d101      	bne.n	800a44a <TIM_TI1_SetConfig+0x4a>
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <TIM_TI1_SetConfig+0x4c>
 800a44a:	2300      	movs	r3, #0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d008      	beq.n	800a462 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f023 0303 	bic.w	r3, r3, #3
 800a456:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	e003      	b.n	800a46a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f043 0301 	orr.w	r3, r3, #1
 800a468:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	011b      	lsls	r3, r3, #4
 800a476:	b2db      	uxtb	r3, r3
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f023 030a 	bic.w	r3, r3, #10
 800a484:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	f003 030a 	and.w	r3, r3, #10
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4313      	orrs	r3, r2
 800a490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	621a      	str	r2, [r3, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bc80      	pop	{r7}
 800a4a6:	4770      	bx	lr
 800a4a8:	40012c00 	.word	0x40012c00
 800a4ac:	40000400 	.word	0x40000400
 800a4b0:	40000800 	.word	0x40000800

0800a4b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6a1b      	ldr	r3, [r3, #32]
 800a4c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	f023 0201 	bic.w	r2, r3, #1
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	011b      	lsls	r3, r3, #4
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f023 030a 	bic.w	r3, r3, #10
 800a4f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	621a      	str	r2, [r3, #32]
}
 800a506:	bf00      	nop
 800a508:	371c      	adds	r7, #28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr

0800a510 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	f023 0210 	bic.w	r2, r3, #16
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6a1b      	ldr	r3, [r3, #32]
 800a534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a53c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	021b      	lsls	r3, r3, #8
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	4313      	orrs	r3, r2
 800a546:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a54e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	031b      	lsls	r3, r3, #12
 800a554:	b29b      	uxth	r3, r3
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4313      	orrs	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a562:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	4313      	orrs	r3, r2
 800a570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	621a      	str	r2, [r3, #32]
}
 800a57e:	bf00      	nop
 800a580:	371c      	adds	r7, #28
 800a582:	46bd      	mov	sp, r7
 800a584:	bc80      	pop	{r7}
 800a586:	4770      	bx	lr

0800a588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a588:	b480      	push	{r7}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a1b      	ldr	r3, [r3, #32]
 800a598:	f023 0210 	bic.w	r2, r3, #16
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	031b      	lsls	r3, r3, #12
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	011b      	lsls	r3, r3, #4
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	621a      	str	r2, [r3, #32]
}
 800a5dc:	bf00      	nop
 800a5de:	371c      	adds	r7, #28
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bc80      	pop	{r7}
 800a5e4:	4770      	bx	lr

0800a5e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b087      	sub	sp, #28
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	60b9      	str	r1, [r7, #8]
 800a5f0:	607a      	str	r2, [r7, #4]
 800a5f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f023 0303 	bic.w	r3, r3, #3
 800a612:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4313      	orrs	r3, r2
 800a61a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a622:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	011b      	lsls	r3, r3, #4
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a636:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	021b      	lsls	r3, r3, #8
 800a63c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	4313      	orrs	r3, r2
 800a644:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	621a      	str	r2, [r3, #32]
}
 800a652:	bf00      	nop
 800a654:	371c      	adds	r7, #28
 800a656:	46bd      	mov	sp, r7
 800a658:	bc80      	pop	{r7}
 800a65a:	4770      	bx	lr

0800a65c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a688:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	021b      	lsls	r3, r3, #8
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	4313      	orrs	r3, r2
 800a692:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a69a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	031b      	lsls	r3, r3, #12
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	031b      	lsls	r3, r3, #12
 800a6b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	621a      	str	r2, [r3, #32]
}
 800a6ca:	bf00      	nop
 800a6cc:	371c      	adds	r7, #28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bc80      	pop	{r7}
 800a6d2:	4770      	bx	lr

0800a6d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	f043 0307 	orr.w	r3, r3, #7
 800a6f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	609a      	str	r2, [r3, #8]
}
 800a6fe:	bf00      	nop
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	bc80      	pop	{r7}
 800a706:	4770      	bx	lr

0800a708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	021a      	lsls	r2, r3, #8
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	431a      	orrs	r2, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4313      	orrs	r3, r2
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	4313      	orrs	r3, r2
 800a734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	609a      	str	r2, [r3, #8]
}
 800a73c:	bf00      	nop
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	bc80      	pop	{r7}
 800a744:	4770      	bx	lr

0800a746 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a746:	b480      	push	{r7}
 800a748:	b087      	sub	sp, #28
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f003 031f 	and.w	r3, r3, #31
 800a758:	2201      	movs	r2, #1
 800a75a:	fa02 f303 	lsl.w	r3, r2, r3
 800a75e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6a1a      	ldr	r2, [r3, #32]
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	43db      	mvns	r3, r3
 800a768:	401a      	ands	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6a1a      	ldr	r2, [r3, #32]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	f003 031f 	and.w	r3, r3, #31
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	fa01 f303 	lsl.w	r3, r1, r3
 800a77e:	431a      	orrs	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	621a      	str	r2, [r3, #32]
}
 800a784:	bf00      	nop
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	bc80      	pop	{r7}
 800a78c:	4770      	bx	lr
	...

0800a790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d101      	bne.n	800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	e046      	b.n	800a836 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a16      	ldr	r2, [pc, #88]	; (800a840 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d00e      	beq.n	800a80a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f4:	d009      	beq.n	800a80a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a12      	ldr	r2, [pc, #72]	; (800a844 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d004      	beq.n	800a80a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a10      	ldr	r2, [pc, #64]	; (800a848 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d10c      	bne.n	800a824 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bc80      	pop	{r7}
 800a83e:	4770      	bx	lr
 800a840:	40012c00 	.word	0x40012c00
 800a844:	40000400 	.word	0x40000400
 800a848:	40000800 	.word	0x40000800

0800a84c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a856:	2300      	movs	r3, #0
 800a858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a860:	2b01      	cmp	r3, #1
 800a862:	d101      	bne.n	800a868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a864:	2302      	movs	r3, #2
 800a866:	e03d      	b.n	800a8e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	4313      	orrs	r3, r2
 800a88a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bc80      	pop	{r7}
 800a8ec:	4770      	bx	lr

0800a8ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8f6:	bf00      	nop
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr

0800a900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bc80      	pop	{r7}
 800a910:	4770      	bx	lr

0800a912 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	e03f      	b.n	800a9a4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d106      	bne.n	800a93e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7fa ff9b 	bl	8005874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2224      	movs	r2, #36	; 0x24
 800a942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a954:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f9a6 	bl	800aca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	691a      	ldr	r2, [r3, #16]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a96a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	695a      	ldr	r2, [r3, #20]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a97a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a98a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2220      	movs	r2, #32
 800a996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2220      	movs	r2, #32
 800a99e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af02      	add	r7, sp, #8
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b20      	cmp	r3, #32
 800a9ca:	d17c      	bne.n	800aac6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d002      	beq.n	800a9d8 <HAL_UART_Transmit+0x2c>
 800a9d2:	88fb      	ldrh	r3, [r7, #6]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e075      	b.n	800aac8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d101      	bne.n	800a9ea <HAL_UART_Transmit+0x3e>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e06e      	b.n	800aac8 <HAL_UART_Transmit+0x11c>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2221      	movs	r2, #33	; 0x21
 800a9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa00:	f7fc fa62 	bl	8006ec8 <HAL_GetTick>
 800aa04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	88fa      	ldrh	r2, [r7, #6]
 800aa0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	88fa      	ldrh	r2, [r7, #6]
 800aa10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1a:	d108      	bne.n	800aa2e <HAL_UART_Transmit+0x82>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d104      	bne.n	800aa2e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	61bb      	str	r3, [r7, #24]
 800aa2c:	e003      	b.n	800aa36 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800aa3e:	e02a      	b.n	800aa96 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	2200      	movs	r2, #0
 800aa48:	2180      	movs	r1, #128	; 0x80
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 f8e2 	bl	800ac14 <UART_WaitOnFlagUntilTimeout>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e036      	b.n	800aac8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10b      	bne.n	800aa78 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	461a      	mov	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa6e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	3302      	adds	r3, #2
 800aa74:	61bb      	str	r3, [r7, #24]
 800aa76:	e007      	b.n	800aa88 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	781a      	ldrb	r2, [r3, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	3301      	adds	r3, #1
 800aa86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1cf      	bne.n	800aa40 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2140      	movs	r1, #64	; 0x40
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f000 f8b2 	bl	800ac14 <UART_WaitOnFlagUntilTimeout>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d001      	beq.n	800aaba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e006      	b.n	800aac8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2220      	movs	r2, #32
 800aabe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e000      	b.n	800aac8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aac6:	2302      	movs	r3, #2
  }
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08a      	sub	sp, #40	; 0x28
 800aad4:	af02      	add	r7, sp, #8
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	4613      	mov	r3, r2
 800aade:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aae0:	2300      	movs	r3, #0
 800aae2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b20      	cmp	r3, #32
 800aaee:	f040 808c 	bne.w	800ac0a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <HAL_UART_Receive+0x2e>
 800aaf8:	88fb      	ldrh	r3, [r7, #6]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d101      	bne.n	800ab02 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e084      	b.n	800ac0c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d101      	bne.n	800ab10 <HAL_UART_Receive+0x40>
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	e07d      	b.n	800ac0c <HAL_UART_Receive+0x13c>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2222      	movs	r2, #34	; 0x22
 800ab22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab2c:	f7fc f9cc 	bl	8006ec8 <HAL_GetTick>
 800ab30:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	88fa      	ldrh	r2, [r7, #6]
 800ab36:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	88fa      	ldrh	r2, [r7, #6]
 800ab3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab46:	d108      	bne.n	800ab5a <HAL_UART_Receive+0x8a>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d104      	bne.n	800ab5a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800ab50:	2300      	movs	r3, #0
 800ab52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	61bb      	str	r3, [r7, #24]
 800ab58:	e003      	b.n	800ab62 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ab6a:	e043      	b.n	800abf4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2200      	movs	r2, #0
 800ab74:	2120      	movs	r1, #32
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 f84c 	bl	800ac14 <UART_WaitOnFlagUntilTimeout>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e042      	b.n	800ac0c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10c      	bne.n	800aba6 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	3302      	adds	r3, #2
 800aba2:	61bb      	str	r3, [r7, #24]
 800aba4:	e01f      	b.n	800abe6 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abae:	d007      	beq.n	800abc0 <HAL_UART_Receive+0xf0>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10a      	bne.n	800abce <HAL_UART_Receive+0xfe>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d106      	bne.n	800abce <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	701a      	strb	r2, [r3, #0]
 800abcc:	e008      	b.n	800abe0 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	3301      	adds	r3, #1
 800abe4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abea:	b29b      	uxth	r3, r3
 800abec:	3b01      	subs	r3, #1
 800abee:	b29a      	uxth	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1b6      	bne.n	800ab6c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	e000      	b.n	800ac0c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800ac0a:	2302      	movs	r3, #2
  }
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3720      	adds	r7, #32
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	4613      	mov	r3, r2
 800ac22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac24:	e02c      	b.n	800ac80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac2c:	d028      	beq.n	800ac80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d007      	beq.n	800ac44 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac34:	f7fc f948 	bl	8006ec8 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	69ba      	ldr	r2, [r7, #24]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d21d      	bcs.n	800ac80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68da      	ldr	r2, [r3, #12]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	695a      	ldr	r2, [r3, #20]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f022 0201 	bic.w	r2, r2, #1
 800ac62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2220      	movs	r2, #32
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2220      	movs	r2, #32
 800ac70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e00f      	b.n	800aca0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	4013      	ands	r3, r2
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	bf0c      	ite	eq
 800ac90:	2301      	moveq	r3, #1
 800ac92:	2300      	movne	r3, #0
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	461a      	mov	r2, r3
 800ac98:	79fb      	ldrb	r3, [r7, #7]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d0c3      	beq.n	800ac26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	430a      	orrs	r2, r1
 800acc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	689a      	ldr	r2, [r3, #8]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	431a      	orrs	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ace2:	f023 030c 	bic.w	r3, r3, #12
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	6812      	ldr	r2, [r2, #0]
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	430b      	orrs	r3, r1
 800acee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	699a      	ldr	r2, [r3, #24]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	430a      	orrs	r2, r1
 800ad04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a2c      	ldr	r2, [pc, #176]	; (800adbc <UART_SetConfig+0x114>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d103      	bne.n	800ad18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ad10:	f7fd fb56 	bl	80083c0 <HAL_RCC_GetPCLK2Freq>
 800ad14:	60f8      	str	r0, [r7, #12]
 800ad16:	e002      	b.n	800ad1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ad18:	f7fd fb3e 	bl	8008398 <HAL_RCC_GetPCLK1Freq>
 800ad1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009a      	lsls	r2, r3, #2
 800ad28:	441a      	add	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad34:	4a22      	ldr	r2, [pc, #136]	; (800adc0 <UART_SetConfig+0x118>)
 800ad36:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3a:	095b      	lsrs	r3, r3, #5
 800ad3c:	0119      	lsls	r1, r3, #4
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	009a      	lsls	r2, r3, #2
 800ad48:	441a      	add	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	fbb2 f2f3 	udiv	r2, r2, r3
 800ad54:	4b1a      	ldr	r3, [pc, #104]	; (800adc0 <UART_SetConfig+0x118>)
 800ad56:	fba3 0302 	umull	r0, r3, r3, r2
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	2064      	movs	r0, #100	; 0x64
 800ad5e:	fb00 f303 	mul.w	r3, r0, r3
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	011b      	lsls	r3, r3, #4
 800ad66:	3332      	adds	r3, #50	; 0x32
 800ad68:	4a15      	ldr	r2, [pc, #84]	; (800adc0 <UART_SetConfig+0x118>)
 800ad6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad6e:	095b      	lsrs	r3, r3, #5
 800ad70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad74:	4419      	add	r1, r3
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	009a      	lsls	r2, r3, #2
 800ad80:	441a      	add	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	fbb2 f2f3 	udiv	r2, r2, r3
 800ad8c:	4b0c      	ldr	r3, [pc, #48]	; (800adc0 <UART_SetConfig+0x118>)
 800ad8e:	fba3 0302 	umull	r0, r3, r3, r2
 800ad92:	095b      	lsrs	r3, r3, #5
 800ad94:	2064      	movs	r0, #100	; 0x64
 800ad96:	fb00 f303 	mul.w	r3, r0, r3
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	011b      	lsls	r3, r3, #4
 800ad9e:	3332      	adds	r3, #50	; 0x32
 800ada0:	4a07      	ldr	r2, [pc, #28]	; (800adc0 <UART_SetConfig+0x118>)
 800ada2:	fba2 2303 	umull	r2, r3, r2, r3
 800ada6:	095b      	lsrs	r3, r3, #5
 800ada8:	f003 020f 	and.w	r2, r3, #15
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	440a      	add	r2, r1
 800adb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800adb4:	bf00      	nop
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	40013800 	.word	0x40013800
 800adc0:	51eb851f 	.word	0x51eb851f

0800adc4 <__errno>:
 800adc4:	4b01      	ldr	r3, [pc, #4]	; (800adcc <__errno+0x8>)
 800adc6:	6818      	ldr	r0, [r3, #0]
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	20000170 	.word	0x20000170

0800add0 <__libc_init_array>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	2600      	movs	r6, #0
 800add4:	4d0c      	ldr	r5, [pc, #48]	; (800ae08 <__libc_init_array+0x38>)
 800add6:	4c0d      	ldr	r4, [pc, #52]	; (800ae0c <__libc_init_array+0x3c>)
 800add8:	1b64      	subs	r4, r4, r5
 800adda:	10a4      	asrs	r4, r4, #2
 800addc:	42a6      	cmp	r6, r4
 800adde:	d109      	bne.n	800adf4 <__libc_init_array+0x24>
 800ade0:	f004 f8f8 	bl	800efd4 <_init>
 800ade4:	2600      	movs	r6, #0
 800ade6:	4d0a      	ldr	r5, [pc, #40]	; (800ae10 <__libc_init_array+0x40>)
 800ade8:	4c0a      	ldr	r4, [pc, #40]	; (800ae14 <__libc_init_array+0x44>)
 800adea:	1b64      	subs	r4, r4, r5
 800adec:	10a4      	asrs	r4, r4, #2
 800adee:	42a6      	cmp	r6, r4
 800adf0:	d105      	bne.n	800adfe <__libc_init_array+0x2e>
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800adf8:	4798      	blx	r3
 800adfa:	3601      	adds	r6, #1
 800adfc:	e7ee      	b.n	800addc <__libc_init_array+0xc>
 800adfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae02:	4798      	blx	r3
 800ae04:	3601      	adds	r6, #1
 800ae06:	e7f2      	b.n	800adee <__libc_init_array+0x1e>
 800ae08:	0800f768 	.word	0x0800f768
 800ae0c:	0800f768 	.word	0x0800f768
 800ae10:	0800f768 	.word	0x0800f768
 800ae14:	0800f76c 	.word	0x0800f76c

0800ae18 <memset>:
 800ae18:	4603      	mov	r3, r0
 800ae1a:	4402      	add	r2, r0
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d100      	bne.n	800ae22 <memset+0xa>
 800ae20:	4770      	bx	lr
 800ae22:	f803 1b01 	strb.w	r1, [r3], #1
 800ae26:	e7f9      	b.n	800ae1c <memset+0x4>

0800ae28 <__cvt>:
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2e:	461f      	mov	r7, r3
 800ae30:	bfbb      	ittet	lt
 800ae32:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ae36:	461f      	movlt	r7, r3
 800ae38:	2300      	movge	r3, #0
 800ae3a:	232d      	movlt	r3, #45	; 0x2d
 800ae3c:	b088      	sub	sp, #32
 800ae3e:	4614      	mov	r4, r2
 800ae40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ae44:	7013      	strb	r3, [r2, #0]
 800ae46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae48:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ae4c:	f023 0820 	bic.w	r8, r3, #32
 800ae50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae54:	d005      	beq.n	800ae62 <__cvt+0x3a>
 800ae56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae5a:	d100      	bne.n	800ae5e <__cvt+0x36>
 800ae5c:	3501      	adds	r5, #1
 800ae5e:	2302      	movs	r3, #2
 800ae60:	e000      	b.n	800ae64 <__cvt+0x3c>
 800ae62:	2303      	movs	r3, #3
 800ae64:	aa07      	add	r2, sp, #28
 800ae66:	9204      	str	r2, [sp, #16]
 800ae68:	aa06      	add	r2, sp, #24
 800ae6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ae6e:	e9cd 3500 	strd	r3, r5, [sp]
 800ae72:	4622      	mov	r2, r4
 800ae74:	463b      	mov	r3, r7
 800ae76:	f000 fcef 	bl	800b858 <_dtoa_r>
 800ae7a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae7e:	4606      	mov	r6, r0
 800ae80:	d102      	bne.n	800ae88 <__cvt+0x60>
 800ae82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae84:	07db      	lsls	r3, r3, #31
 800ae86:	d522      	bpl.n	800aece <__cvt+0xa6>
 800ae88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae8c:	eb06 0905 	add.w	r9, r6, r5
 800ae90:	d110      	bne.n	800aeb4 <__cvt+0x8c>
 800ae92:	7833      	ldrb	r3, [r6, #0]
 800ae94:	2b30      	cmp	r3, #48	; 0x30
 800ae96:	d10a      	bne.n	800aeae <__cvt+0x86>
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4639      	mov	r1, r7
 800aea0:	f7f5 fd82 	bl	80009a8 <__aeabi_dcmpeq>
 800aea4:	b918      	cbnz	r0, 800aeae <__cvt+0x86>
 800aea6:	f1c5 0501 	rsb	r5, r5, #1
 800aeaa:	f8ca 5000 	str.w	r5, [sl]
 800aeae:	f8da 3000 	ldr.w	r3, [sl]
 800aeb2:	4499      	add	r9, r3
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 fd74 	bl	80009a8 <__aeabi_dcmpeq>
 800aec0:	b108      	cbz	r0, 800aec6 <__cvt+0x9e>
 800aec2:	f8cd 901c 	str.w	r9, [sp, #28]
 800aec6:	2230      	movs	r2, #48	; 0x30
 800aec8:	9b07      	ldr	r3, [sp, #28]
 800aeca:	454b      	cmp	r3, r9
 800aecc:	d307      	bcc.n	800aede <__cvt+0xb6>
 800aece:	4630      	mov	r0, r6
 800aed0:	9b07      	ldr	r3, [sp, #28]
 800aed2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aed4:	1b9b      	subs	r3, r3, r6
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	b008      	add	sp, #32
 800aeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aede:	1c59      	adds	r1, r3, #1
 800aee0:	9107      	str	r1, [sp, #28]
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	e7f0      	b.n	800aec8 <__cvt+0xa0>

0800aee6 <__exponent>:
 800aee6:	4603      	mov	r3, r0
 800aee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeea:	2900      	cmp	r1, #0
 800aeec:	f803 2b02 	strb.w	r2, [r3], #2
 800aef0:	bfb6      	itet	lt
 800aef2:	222d      	movlt	r2, #45	; 0x2d
 800aef4:	222b      	movge	r2, #43	; 0x2b
 800aef6:	4249      	neglt	r1, r1
 800aef8:	2909      	cmp	r1, #9
 800aefa:	7042      	strb	r2, [r0, #1]
 800aefc:	dd2b      	ble.n	800af56 <__exponent+0x70>
 800aefe:	f10d 0407 	add.w	r4, sp, #7
 800af02:	46a4      	mov	ip, r4
 800af04:	270a      	movs	r7, #10
 800af06:	fb91 f6f7 	sdiv	r6, r1, r7
 800af0a:	460a      	mov	r2, r1
 800af0c:	46a6      	mov	lr, r4
 800af0e:	fb07 1516 	mls	r5, r7, r6, r1
 800af12:	2a63      	cmp	r2, #99	; 0x63
 800af14:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800af18:	4631      	mov	r1, r6
 800af1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800af1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af22:	dcf0      	bgt.n	800af06 <__exponent+0x20>
 800af24:	3130      	adds	r1, #48	; 0x30
 800af26:	f1ae 0502 	sub.w	r5, lr, #2
 800af2a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af2e:	4629      	mov	r1, r5
 800af30:	1c44      	adds	r4, r0, #1
 800af32:	4561      	cmp	r1, ip
 800af34:	d30a      	bcc.n	800af4c <__exponent+0x66>
 800af36:	f10d 0209 	add.w	r2, sp, #9
 800af3a:	eba2 020e 	sub.w	r2, r2, lr
 800af3e:	4565      	cmp	r5, ip
 800af40:	bf88      	it	hi
 800af42:	2200      	movhi	r2, #0
 800af44:	4413      	add	r3, r2
 800af46:	1a18      	subs	r0, r3, r0
 800af48:	b003      	add	sp, #12
 800af4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af50:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af54:	e7ed      	b.n	800af32 <__exponent+0x4c>
 800af56:	2330      	movs	r3, #48	; 0x30
 800af58:	3130      	adds	r1, #48	; 0x30
 800af5a:	7083      	strb	r3, [r0, #2]
 800af5c:	70c1      	strb	r1, [r0, #3]
 800af5e:	1d03      	adds	r3, r0, #4
 800af60:	e7f1      	b.n	800af46 <__exponent+0x60>
	...

0800af64 <_printf_float>:
 800af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af68:	b091      	sub	sp, #68	; 0x44
 800af6a:	460c      	mov	r4, r1
 800af6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800af70:	4616      	mov	r6, r2
 800af72:	461f      	mov	r7, r3
 800af74:	4605      	mov	r5, r0
 800af76:	f001 fa5d 	bl	800c434 <_localeconv_r>
 800af7a:	6803      	ldr	r3, [r0, #0]
 800af7c:	4618      	mov	r0, r3
 800af7e:	9309      	str	r3, [sp, #36]	; 0x24
 800af80:	f7f5 f8e6 	bl	8000150 <strlen>
 800af84:	2300      	movs	r3, #0
 800af86:	930e      	str	r3, [sp, #56]	; 0x38
 800af88:	f8d8 3000 	ldr.w	r3, [r8]
 800af8c:	900a      	str	r0, [sp, #40]	; 0x28
 800af8e:	3307      	adds	r3, #7
 800af90:	f023 0307 	bic.w	r3, r3, #7
 800af94:	f103 0208 	add.w	r2, r3, #8
 800af98:	f894 9018 	ldrb.w	r9, [r4, #24]
 800af9c:	f8d4 b000 	ldr.w	fp, [r4]
 800afa0:	f8c8 2000 	str.w	r2, [r8]
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800afac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800afb0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800afb4:	930b      	str	r3, [sp, #44]	; 0x2c
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afba:	4640      	mov	r0, r8
 800afbc:	4b9c      	ldr	r3, [pc, #624]	; (800b230 <_printf_float+0x2cc>)
 800afbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afc0:	f7f5 fd24 	bl	8000a0c <__aeabi_dcmpun>
 800afc4:	bb70      	cbnz	r0, 800b024 <_printf_float+0xc0>
 800afc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afca:	4640      	mov	r0, r8
 800afcc:	4b98      	ldr	r3, [pc, #608]	; (800b230 <_printf_float+0x2cc>)
 800afce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afd0:	f7f5 fcfe 	bl	80009d0 <__aeabi_dcmple>
 800afd4:	bb30      	cbnz	r0, 800b024 <_printf_float+0xc0>
 800afd6:	2200      	movs	r2, #0
 800afd8:	2300      	movs	r3, #0
 800afda:	4640      	mov	r0, r8
 800afdc:	4651      	mov	r1, sl
 800afde:	f7f5 fced 	bl	80009bc <__aeabi_dcmplt>
 800afe2:	b110      	cbz	r0, 800afea <_printf_float+0x86>
 800afe4:	232d      	movs	r3, #45	; 0x2d
 800afe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afea:	4b92      	ldr	r3, [pc, #584]	; (800b234 <_printf_float+0x2d0>)
 800afec:	4892      	ldr	r0, [pc, #584]	; (800b238 <_printf_float+0x2d4>)
 800afee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800aff2:	bf94      	ite	ls
 800aff4:	4698      	movls	r8, r3
 800aff6:	4680      	movhi	r8, r0
 800aff8:	2303      	movs	r3, #3
 800affa:	f04f 0a00 	mov.w	sl, #0
 800affe:	6123      	str	r3, [r4, #16]
 800b000:	f02b 0304 	bic.w	r3, fp, #4
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	4633      	mov	r3, r6
 800b008:	4621      	mov	r1, r4
 800b00a:	4628      	mov	r0, r5
 800b00c:	9700      	str	r7, [sp, #0]
 800b00e:	aa0f      	add	r2, sp, #60	; 0x3c
 800b010:	f000 f9d4 	bl	800b3bc <_printf_common>
 800b014:	3001      	adds	r0, #1
 800b016:	f040 8090 	bne.w	800b13a <_printf_float+0x1d6>
 800b01a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b01e:	b011      	add	sp, #68	; 0x44
 800b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b024:	4642      	mov	r2, r8
 800b026:	4653      	mov	r3, sl
 800b028:	4640      	mov	r0, r8
 800b02a:	4651      	mov	r1, sl
 800b02c:	f7f5 fcee 	bl	8000a0c <__aeabi_dcmpun>
 800b030:	b148      	cbz	r0, 800b046 <_printf_float+0xe2>
 800b032:	f1ba 0f00 	cmp.w	sl, #0
 800b036:	bfb8      	it	lt
 800b038:	232d      	movlt	r3, #45	; 0x2d
 800b03a:	4880      	ldr	r0, [pc, #512]	; (800b23c <_printf_float+0x2d8>)
 800b03c:	bfb8      	it	lt
 800b03e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b042:	4b7f      	ldr	r3, [pc, #508]	; (800b240 <_printf_float+0x2dc>)
 800b044:	e7d3      	b.n	800afee <_printf_float+0x8a>
 800b046:	6863      	ldr	r3, [r4, #4]
 800b048:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	d142      	bne.n	800b0d6 <_printf_float+0x172>
 800b050:	2306      	movs	r3, #6
 800b052:	6063      	str	r3, [r4, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	9206      	str	r2, [sp, #24]
 800b058:	aa0e      	add	r2, sp, #56	; 0x38
 800b05a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b05e:	aa0d      	add	r2, sp, #52	; 0x34
 800b060:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b064:	9203      	str	r2, [sp, #12]
 800b066:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b06a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b06e:	6023      	str	r3, [r4, #0]
 800b070:	6863      	ldr	r3, [r4, #4]
 800b072:	4642      	mov	r2, r8
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	4628      	mov	r0, r5
 800b078:	4653      	mov	r3, sl
 800b07a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b07c:	f7ff fed4 	bl	800ae28 <__cvt>
 800b080:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b082:	4680      	mov	r8, r0
 800b084:	2947      	cmp	r1, #71	; 0x47
 800b086:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b088:	d108      	bne.n	800b09c <_printf_float+0x138>
 800b08a:	1cc8      	adds	r0, r1, #3
 800b08c:	db02      	blt.n	800b094 <_printf_float+0x130>
 800b08e:	6863      	ldr	r3, [r4, #4]
 800b090:	4299      	cmp	r1, r3
 800b092:	dd40      	ble.n	800b116 <_printf_float+0x1b2>
 800b094:	f1a9 0902 	sub.w	r9, r9, #2
 800b098:	fa5f f989 	uxtb.w	r9, r9
 800b09c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b0a0:	d81f      	bhi.n	800b0e2 <_printf_float+0x17e>
 800b0a2:	464a      	mov	r2, r9
 800b0a4:	3901      	subs	r1, #1
 800b0a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0aa:	910d      	str	r1, [sp, #52]	; 0x34
 800b0ac:	f7ff ff1b 	bl	800aee6 <__exponent>
 800b0b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0b2:	4682      	mov	sl, r0
 800b0b4:	1813      	adds	r3, r2, r0
 800b0b6:	2a01      	cmp	r2, #1
 800b0b8:	6123      	str	r3, [r4, #16]
 800b0ba:	dc02      	bgt.n	800b0c2 <_printf_float+0x15e>
 800b0bc:	6822      	ldr	r2, [r4, #0]
 800b0be:	07d2      	lsls	r2, r2, #31
 800b0c0:	d501      	bpl.n	800b0c6 <_printf_float+0x162>
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	6123      	str	r3, [r4, #16]
 800b0c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d09b      	beq.n	800b006 <_printf_float+0xa2>
 800b0ce:	232d      	movs	r3, #45	; 0x2d
 800b0d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0d4:	e797      	b.n	800b006 <_printf_float+0xa2>
 800b0d6:	2947      	cmp	r1, #71	; 0x47
 800b0d8:	d1bc      	bne.n	800b054 <_printf_float+0xf0>
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1ba      	bne.n	800b054 <_printf_float+0xf0>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e7b7      	b.n	800b052 <_printf_float+0xee>
 800b0e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b0e6:	d118      	bne.n	800b11a <_printf_float+0x1b6>
 800b0e8:	2900      	cmp	r1, #0
 800b0ea:	6863      	ldr	r3, [r4, #4]
 800b0ec:	dd0b      	ble.n	800b106 <_printf_float+0x1a2>
 800b0ee:	6121      	str	r1, [r4, #16]
 800b0f0:	b913      	cbnz	r3, 800b0f8 <_printf_float+0x194>
 800b0f2:	6822      	ldr	r2, [r4, #0]
 800b0f4:	07d0      	lsls	r0, r2, #31
 800b0f6:	d502      	bpl.n	800b0fe <_printf_float+0x19a>
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	440b      	add	r3, r1
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	f04f 0a00 	mov.w	sl, #0
 800b102:	65a1      	str	r1, [r4, #88]	; 0x58
 800b104:	e7df      	b.n	800b0c6 <_printf_float+0x162>
 800b106:	b913      	cbnz	r3, 800b10e <_printf_float+0x1aa>
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	07d2      	lsls	r2, r2, #31
 800b10c:	d501      	bpl.n	800b112 <_printf_float+0x1ae>
 800b10e:	3302      	adds	r3, #2
 800b110:	e7f4      	b.n	800b0fc <_printf_float+0x198>
 800b112:	2301      	movs	r3, #1
 800b114:	e7f2      	b.n	800b0fc <_printf_float+0x198>
 800b116:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b11a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b11c:	4299      	cmp	r1, r3
 800b11e:	db05      	blt.n	800b12c <_printf_float+0x1c8>
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	6121      	str	r1, [r4, #16]
 800b124:	07d8      	lsls	r0, r3, #31
 800b126:	d5ea      	bpl.n	800b0fe <_printf_float+0x19a>
 800b128:	1c4b      	adds	r3, r1, #1
 800b12a:	e7e7      	b.n	800b0fc <_printf_float+0x198>
 800b12c:	2900      	cmp	r1, #0
 800b12e:	bfcc      	ite	gt
 800b130:	2201      	movgt	r2, #1
 800b132:	f1c1 0202 	rsble	r2, r1, #2
 800b136:	4413      	add	r3, r2
 800b138:	e7e0      	b.n	800b0fc <_printf_float+0x198>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	055a      	lsls	r2, r3, #21
 800b13e:	d407      	bmi.n	800b150 <_printf_float+0x1ec>
 800b140:	6923      	ldr	r3, [r4, #16]
 800b142:	4642      	mov	r2, r8
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47b8      	blx	r7
 800b14a:	3001      	adds	r0, #1
 800b14c:	d12b      	bne.n	800b1a6 <_printf_float+0x242>
 800b14e:	e764      	b.n	800b01a <_printf_float+0xb6>
 800b150:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b154:	f240 80dd 	bls.w	800b312 <_printf_float+0x3ae>
 800b158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b15c:	2200      	movs	r2, #0
 800b15e:	2300      	movs	r3, #0
 800b160:	f7f5 fc22 	bl	80009a8 <__aeabi_dcmpeq>
 800b164:	2800      	cmp	r0, #0
 800b166:	d033      	beq.n	800b1d0 <_printf_float+0x26c>
 800b168:	2301      	movs	r3, #1
 800b16a:	4631      	mov	r1, r6
 800b16c:	4628      	mov	r0, r5
 800b16e:	4a35      	ldr	r2, [pc, #212]	; (800b244 <_printf_float+0x2e0>)
 800b170:	47b8      	blx	r7
 800b172:	3001      	adds	r0, #1
 800b174:	f43f af51 	beq.w	800b01a <_printf_float+0xb6>
 800b178:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b17c:	429a      	cmp	r2, r3
 800b17e:	db02      	blt.n	800b186 <_printf_float+0x222>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	07d8      	lsls	r0, r3, #31
 800b184:	d50f      	bpl.n	800b1a6 <_printf_float+0x242>
 800b186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b18a:	4631      	mov	r1, r6
 800b18c:	4628      	mov	r0, r5
 800b18e:	47b8      	blx	r7
 800b190:	3001      	adds	r0, #1
 800b192:	f43f af42 	beq.w	800b01a <_printf_float+0xb6>
 800b196:	f04f 0800 	mov.w	r8, #0
 800b19a:	f104 091a 	add.w	r9, r4, #26
 800b19e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	4543      	cmp	r3, r8
 800b1a4:	dc09      	bgt.n	800b1ba <_printf_float+0x256>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	079b      	lsls	r3, r3, #30
 800b1aa:	f100 8102 	bmi.w	800b3b2 <_printf_float+0x44e>
 800b1ae:	68e0      	ldr	r0, [r4, #12]
 800b1b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1b2:	4298      	cmp	r0, r3
 800b1b4:	bfb8      	it	lt
 800b1b6:	4618      	movlt	r0, r3
 800b1b8:	e731      	b.n	800b01e <_printf_float+0xba>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	464a      	mov	r2, r9
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b8      	blx	r7
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	f43f af28 	beq.w	800b01a <_printf_float+0xb6>
 800b1ca:	f108 0801 	add.w	r8, r8, #1
 800b1ce:	e7e6      	b.n	800b19e <_printf_float+0x23a>
 800b1d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	dc38      	bgt.n	800b248 <_printf_float+0x2e4>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4628      	mov	r0, r5
 800b1dc:	4a19      	ldr	r2, [pc, #100]	; (800b244 <_printf_float+0x2e0>)
 800b1de:	47b8      	blx	r7
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	f43f af1a 	beq.w	800b01a <_printf_float+0xb6>
 800b1e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	d102      	bne.n	800b1f4 <_printf_float+0x290>
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	07d9      	lsls	r1, r3, #31
 800b1f2:	d5d8      	bpl.n	800b1a6 <_printf_float+0x242>
 800b1f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	47b8      	blx	r7
 800b1fe:	3001      	adds	r0, #1
 800b200:	f43f af0b 	beq.w	800b01a <_printf_float+0xb6>
 800b204:	f04f 0900 	mov.w	r9, #0
 800b208:	f104 0a1a 	add.w	sl, r4, #26
 800b20c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b20e:	425b      	negs	r3, r3
 800b210:	454b      	cmp	r3, r9
 800b212:	dc01      	bgt.n	800b218 <_printf_float+0x2b4>
 800b214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b216:	e794      	b.n	800b142 <_printf_float+0x1de>
 800b218:	2301      	movs	r3, #1
 800b21a:	4652      	mov	r2, sl
 800b21c:	4631      	mov	r1, r6
 800b21e:	4628      	mov	r0, r5
 800b220:	47b8      	blx	r7
 800b222:	3001      	adds	r0, #1
 800b224:	f43f aef9 	beq.w	800b01a <_printf_float+0xb6>
 800b228:	f109 0901 	add.w	r9, r9, #1
 800b22c:	e7ee      	b.n	800b20c <_printf_float+0x2a8>
 800b22e:	bf00      	nop
 800b230:	7fefffff 	.word	0x7fefffff
 800b234:	0800f344 	.word	0x0800f344
 800b238:	0800f348 	.word	0x0800f348
 800b23c:	0800f350 	.word	0x0800f350
 800b240:	0800f34c 	.word	0x0800f34c
 800b244:	0800f354 	.word	0x0800f354
 800b248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b24a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b24c:	429a      	cmp	r2, r3
 800b24e:	bfa8      	it	ge
 800b250:	461a      	movge	r2, r3
 800b252:	2a00      	cmp	r2, #0
 800b254:	4691      	mov	r9, r2
 800b256:	dc37      	bgt.n	800b2c8 <_printf_float+0x364>
 800b258:	f04f 0b00 	mov.w	fp, #0
 800b25c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b260:	f104 021a 	add.w	r2, r4, #26
 800b264:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b268:	ebaa 0309 	sub.w	r3, sl, r9
 800b26c:	455b      	cmp	r3, fp
 800b26e:	dc33      	bgt.n	800b2d8 <_printf_float+0x374>
 800b270:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b274:	429a      	cmp	r2, r3
 800b276:	db3b      	blt.n	800b2f0 <_printf_float+0x38c>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	07da      	lsls	r2, r3, #31
 800b27c:	d438      	bmi.n	800b2f0 <_printf_float+0x38c>
 800b27e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b280:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b282:	eba2 030a 	sub.w	r3, r2, sl
 800b286:	eba2 0901 	sub.w	r9, r2, r1
 800b28a:	4599      	cmp	r9, r3
 800b28c:	bfa8      	it	ge
 800b28e:	4699      	movge	r9, r3
 800b290:	f1b9 0f00 	cmp.w	r9, #0
 800b294:	dc34      	bgt.n	800b300 <_printf_float+0x39c>
 800b296:	f04f 0800 	mov.w	r8, #0
 800b29a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b29e:	f104 0a1a 	add.w	sl, r4, #26
 800b2a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b2a6:	1a9b      	subs	r3, r3, r2
 800b2a8:	eba3 0309 	sub.w	r3, r3, r9
 800b2ac:	4543      	cmp	r3, r8
 800b2ae:	f77f af7a 	ble.w	800b1a6 <_printf_float+0x242>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	4631      	mov	r1, r6
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	47b8      	blx	r7
 800b2bc:	3001      	adds	r0, #1
 800b2be:	f43f aeac 	beq.w	800b01a <_printf_float+0xb6>
 800b2c2:	f108 0801 	add.w	r8, r8, #1
 800b2c6:	e7ec      	b.n	800b2a2 <_printf_float+0x33e>
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	4642      	mov	r2, r8
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	47b8      	blx	r7
 800b2d2:	3001      	adds	r0, #1
 800b2d4:	d1c0      	bne.n	800b258 <_printf_float+0x2f4>
 800b2d6:	e6a0      	b.n	800b01a <_printf_float+0xb6>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4628      	mov	r0, r5
 800b2de:	920b      	str	r2, [sp, #44]	; 0x2c
 800b2e0:	47b8      	blx	r7
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	f43f ae99 	beq.w	800b01a <_printf_float+0xb6>
 800b2e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2ea:	f10b 0b01 	add.w	fp, fp, #1
 800b2ee:	e7b9      	b.n	800b264 <_printf_float+0x300>
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b8      	blx	r7
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	d1bf      	bne.n	800b27e <_printf_float+0x31a>
 800b2fe:	e68c      	b.n	800b01a <_printf_float+0xb6>
 800b300:	464b      	mov	r3, r9
 800b302:	4631      	mov	r1, r6
 800b304:	4628      	mov	r0, r5
 800b306:	eb08 020a 	add.w	r2, r8, sl
 800b30a:	47b8      	blx	r7
 800b30c:	3001      	adds	r0, #1
 800b30e:	d1c2      	bne.n	800b296 <_printf_float+0x332>
 800b310:	e683      	b.n	800b01a <_printf_float+0xb6>
 800b312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b314:	2a01      	cmp	r2, #1
 800b316:	dc01      	bgt.n	800b31c <_printf_float+0x3b8>
 800b318:	07db      	lsls	r3, r3, #31
 800b31a:	d537      	bpl.n	800b38c <_printf_float+0x428>
 800b31c:	2301      	movs	r3, #1
 800b31e:	4642      	mov	r2, r8
 800b320:	4631      	mov	r1, r6
 800b322:	4628      	mov	r0, r5
 800b324:	47b8      	blx	r7
 800b326:	3001      	adds	r0, #1
 800b328:	f43f ae77 	beq.w	800b01a <_printf_float+0xb6>
 800b32c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b330:	4631      	mov	r1, r6
 800b332:	4628      	mov	r0, r5
 800b334:	47b8      	blx	r7
 800b336:	3001      	adds	r0, #1
 800b338:	f43f ae6f 	beq.w	800b01a <_printf_float+0xb6>
 800b33c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b340:	2200      	movs	r2, #0
 800b342:	2300      	movs	r3, #0
 800b344:	f7f5 fb30 	bl	80009a8 <__aeabi_dcmpeq>
 800b348:	b9d8      	cbnz	r0, 800b382 <_printf_float+0x41e>
 800b34a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b34c:	f108 0201 	add.w	r2, r8, #1
 800b350:	3b01      	subs	r3, #1
 800b352:	4631      	mov	r1, r6
 800b354:	4628      	mov	r0, r5
 800b356:	47b8      	blx	r7
 800b358:	3001      	adds	r0, #1
 800b35a:	d10e      	bne.n	800b37a <_printf_float+0x416>
 800b35c:	e65d      	b.n	800b01a <_printf_float+0xb6>
 800b35e:	2301      	movs	r3, #1
 800b360:	464a      	mov	r2, r9
 800b362:	4631      	mov	r1, r6
 800b364:	4628      	mov	r0, r5
 800b366:	47b8      	blx	r7
 800b368:	3001      	adds	r0, #1
 800b36a:	f43f ae56 	beq.w	800b01a <_printf_float+0xb6>
 800b36e:	f108 0801 	add.w	r8, r8, #1
 800b372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b374:	3b01      	subs	r3, #1
 800b376:	4543      	cmp	r3, r8
 800b378:	dcf1      	bgt.n	800b35e <_printf_float+0x3fa>
 800b37a:	4653      	mov	r3, sl
 800b37c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b380:	e6e0      	b.n	800b144 <_printf_float+0x1e0>
 800b382:	f04f 0800 	mov.w	r8, #0
 800b386:	f104 091a 	add.w	r9, r4, #26
 800b38a:	e7f2      	b.n	800b372 <_printf_float+0x40e>
 800b38c:	2301      	movs	r3, #1
 800b38e:	4642      	mov	r2, r8
 800b390:	e7df      	b.n	800b352 <_printf_float+0x3ee>
 800b392:	2301      	movs	r3, #1
 800b394:	464a      	mov	r2, r9
 800b396:	4631      	mov	r1, r6
 800b398:	4628      	mov	r0, r5
 800b39a:	47b8      	blx	r7
 800b39c:	3001      	adds	r0, #1
 800b39e:	f43f ae3c 	beq.w	800b01a <_printf_float+0xb6>
 800b3a2:	f108 0801 	add.w	r8, r8, #1
 800b3a6:	68e3      	ldr	r3, [r4, #12]
 800b3a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b3aa:	1a5b      	subs	r3, r3, r1
 800b3ac:	4543      	cmp	r3, r8
 800b3ae:	dcf0      	bgt.n	800b392 <_printf_float+0x42e>
 800b3b0:	e6fd      	b.n	800b1ae <_printf_float+0x24a>
 800b3b2:	f04f 0800 	mov.w	r8, #0
 800b3b6:	f104 0919 	add.w	r9, r4, #25
 800b3ba:	e7f4      	b.n	800b3a6 <_printf_float+0x442>

0800b3bc <_printf_common>:
 800b3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c0:	4616      	mov	r6, r2
 800b3c2:	4699      	mov	r9, r3
 800b3c4:	688a      	ldr	r2, [r1, #8]
 800b3c6:	690b      	ldr	r3, [r1, #16]
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	bfb8      	it	lt
 800b3ce:	4613      	movlt	r3, r2
 800b3d0:	6033      	str	r3, [r6, #0]
 800b3d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3dc:	b10a      	cbz	r2, 800b3e2 <_printf_common+0x26>
 800b3de:	3301      	adds	r3, #1
 800b3e0:	6033      	str	r3, [r6, #0]
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	0699      	lsls	r1, r3, #26
 800b3e6:	bf42      	ittt	mi
 800b3e8:	6833      	ldrmi	r3, [r6, #0]
 800b3ea:	3302      	addmi	r3, #2
 800b3ec:	6033      	strmi	r3, [r6, #0]
 800b3ee:	6825      	ldr	r5, [r4, #0]
 800b3f0:	f015 0506 	ands.w	r5, r5, #6
 800b3f4:	d106      	bne.n	800b404 <_printf_common+0x48>
 800b3f6:	f104 0a19 	add.w	sl, r4, #25
 800b3fa:	68e3      	ldr	r3, [r4, #12]
 800b3fc:	6832      	ldr	r2, [r6, #0]
 800b3fe:	1a9b      	subs	r3, r3, r2
 800b400:	42ab      	cmp	r3, r5
 800b402:	dc28      	bgt.n	800b456 <_printf_common+0x9a>
 800b404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b408:	1e13      	subs	r3, r2, #0
 800b40a:	6822      	ldr	r2, [r4, #0]
 800b40c:	bf18      	it	ne
 800b40e:	2301      	movne	r3, #1
 800b410:	0692      	lsls	r2, r2, #26
 800b412:	d42d      	bmi.n	800b470 <_printf_common+0xb4>
 800b414:	4649      	mov	r1, r9
 800b416:	4638      	mov	r0, r7
 800b418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b41c:	47c0      	blx	r8
 800b41e:	3001      	adds	r0, #1
 800b420:	d020      	beq.n	800b464 <_printf_common+0xa8>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	68e5      	ldr	r5, [r4, #12]
 800b426:	f003 0306 	and.w	r3, r3, #6
 800b42a:	2b04      	cmp	r3, #4
 800b42c:	bf18      	it	ne
 800b42e:	2500      	movne	r5, #0
 800b430:	6832      	ldr	r2, [r6, #0]
 800b432:	f04f 0600 	mov.w	r6, #0
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	bf08      	it	eq
 800b43a:	1aad      	subeq	r5, r5, r2
 800b43c:	6922      	ldr	r2, [r4, #16]
 800b43e:	bf08      	it	eq
 800b440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b444:	4293      	cmp	r3, r2
 800b446:	bfc4      	itt	gt
 800b448:	1a9b      	subgt	r3, r3, r2
 800b44a:	18ed      	addgt	r5, r5, r3
 800b44c:	341a      	adds	r4, #26
 800b44e:	42b5      	cmp	r5, r6
 800b450:	d11a      	bne.n	800b488 <_printf_common+0xcc>
 800b452:	2000      	movs	r0, #0
 800b454:	e008      	b.n	800b468 <_printf_common+0xac>
 800b456:	2301      	movs	r3, #1
 800b458:	4652      	mov	r2, sl
 800b45a:	4649      	mov	r1, r9
 800b45c:	4638      	mov	r0, r7
 800b45e:	47c0      	blx	r8
 800b460:	3001      	adds	r0, #1
 800b462:	d103      	bne.n	800b46c <_printf_common+0xb0>
 800b464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46c:	3501      	adds	r5, #1
 800b46e:	e7c4      	b.n	800b3fa <_printf_common+0x3e>
 800b470:	2030      	movs	r0, #48	; 0x30
 800b472:	18e1      	adds	r1, r4, r3
 800b474:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b478:	1c5a      	adds	r2, r3, #1
 800b47a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b47e:	4422      	add	r2, r4
 800b480:	3302      	adds	r3, #2
 800b482:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b486:	e7c5      	b.n	800b414 <_printf_common+0x58>
 800b488:	2301      	movs	r3, #1
 800b48a:	4622      	mov	r2, r4
 800b48c:	4649      	mov	r1, r9
 800b48e:	4638      	mov	r0, r7
 800b490:	47c0      	blx	r8
 800b492:	3001      	adds	r0, #1
 800b494:	d0e6      	beq.n	800b464 <_printf_common+0xa8>
 800b496:	3601      	adds	r6, #1
 800b498:	e7d9      	b.n	800b44e <_printf_common+0x92>
	...

0800b49c <_printf_i>:
 800b49c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	7e27      	ldrb	r7, [r4, #24]
 800b4a4:	4691      	mov	r9, r2
 800b4a6:	2f78      	cmp	r7, #120	; 0x78
 800b4a8:	4680      	mov	r8, r0
 800b4aa:	469a      	mov	sl, r3
 800b4ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4b2:	d807      	bhi.n	800b4c4 <_printf_i+0x28>
 800b4b4:	2f62      	cmp	r7, #98	; 0x62
 800b4b6:	d80a      	bhi.n	800b4ce <_printf_i+0x32>
 800b4b8:	2f00      	cmp	r7, #0
 800b4ba:	f000 80d9 	beq.w	800b670 <_printf_i+0x1d4>
 800b4be:	2f58      	cmp	r7, #88	; 0x58
 800b4c0:	f000 80a4 	beq.w	800b60c <_printf_i+0x170>
 800b4c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4cc:	e03a      	b.n	800b544 <_printf_i+0xa8>
 800b4ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4d2:	2b15      	cmp	r3, #21
 800b4d4:	d8f6      	bhi.n	800b4c4 <_printf_i+0x28>
 800b4d6:	a001      	add	r0, pc, #4	; (adr r0, 800b4dc <_printf_i+0x40>)
 800b4d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b4dc:	0800b535 	.word	0x0800b535
 800b4e0:	0800b549 	.word	0x0800b549
 800b4e4:	0800b4c5 	.word	0x0800b4c5
 800b4e8:	0800b4c5 	.word	0x0800b4c5
 800b4ec:	0800b4c5 	.word	0x0800b4c5
 800b4f0:	0800b4c5 	.word	0x0800b4c5
 800b4f4:	0800b549 	.word	0x0800b549
 800b4f8:	0800b4c5 	.word	0x0800b4c5
 800b4fc:	0800b4c5 	.word	0x0800b4c5
 800b500:	0800b4c5 	.word	0x0800b4c5
 800b504:	0800b4c5 	.word	0x0800b4c5
 800b508:	0800b657 	.word	0x0800b657
 800b50c:	0800b579 	.word	0x0800b579
 800b510:	0800b639 	.word	0x0800b639
 800b514:	0800b4c5 	.word	0x0800b4c5
 800b518:	0800b4c5 	.word	0x0800b4c5
 800b51c:	0800b679 	.word	0x0800b679
 800b520:	0800b4c5 	.word	0x0800b4c5
 800b524:	0800b579 	.word	0x0800b579
 800b528:	0800b4c5 	.word	0x0800b4c5
 800b52c:	0800b4c5 	.word	0x0800b4c5
 800b530:	0800b641 	.word	0x0800b641
 800b534:	680b      	ldr	r3, [r1, #0]
 800b536:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b53a:	1d1a      	adds	r2, r3, #4
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	600a      	str	r2, [r1, #0]
 800b540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b544:	2301      	movs	r3, #1
 800b546:	e0a4      	b.n	800b692 <_printf_i+0x1f6>
 800b548:	6825      	ldr	r5, [r4, #0]
 800b54a:	6808      	ldr	r0, [r1, #0]
 800b54c:	062e      	lsls	r6, r5, #24
 800b54e:	f100 0304 	add.w	r3, r0, #4
 800b552:	d50a      	bpl.n	800b56a <_printf_i+0xce>
 800b554:	6805      	ldr	r5, [r0, #0]
 800b556:	600b      	str	r3, [r1, #0]
 800b558:	2d00      	cmp	r5, #0
 800b55a:	da03      	bge.n	800b564 <_printf_i+0xc8>
 800b55c:	232d      	movs	r3, #45	; 0x2d
 800b55e:	426d      	negs	r5, r5
 800b560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b564:	230a      	movs	r3, #10
 800b566:	485e      	ldr	r0, [pc, #376]	; (800b6e0 <_printf_i+0x244>)
 800b568:	e019      	b.n	800b59e <_printf_i+0x102>
 800b56a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b56e:	6805      	ldr	r5, [r0, #0]
 800b570:	600b      	str	r3, [r1, #0]
 800b572:	bf18      	it	ne
 800b574:	b22d      	sxthne	r5, r5
 800b576:	e7ef      	b.n	800b558 <_printf_i+0xbc>
 800b578:	680b      	ldr	r3, [r1, #0]
 800b57a:	6825      	ldr	r5, [r4, #0]
 800b57c:	1d18      	adds	r0, r3, #4
 800b57e:	6008      	str	r0, [r1, #0]
 800b580:	0628      	lsls	r0, r5, #24
 800b582:	d501      	bpl.n	800b588 <_printf_i+0xec>
 800b584:	681d      	ldr	r5, [r3, #0]
 800b586:	e002      	b.n	800b58e <_printf_i+0xf2>
 800b588:	0669      	lsls	r1, r5, #25
 800b58a:	d5fb      	bpl.n	800b584 <_printf_i+0xe8>
 800b58c:	881d      	ldrh	r5, [r3, #0]
 800b58e:	2f6f      	cmp	r7, #111	; 0x6f
 800b590:	bf0c      	ite	eq
 800b592:	2308      	moveq	r3, #8
 800b594:	230a      	movne	r3, #10
 800b596:	4852      	ldr	r0, [pc, #328]	; (800b6e0 <_printf_i+0x244>)
 800b598:	2100      	movs	r1, #0
 800b59a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b59e:	6866      	ldr	r6, [r4, #4]
 800b5a0:	2e00      	cmp	r6, #0
 800b5a2:	bfa8      	it	ge
 800b5a4:	6821      	ldrge	r1, [r4, #0]
 800b5a6:	60a6      	str	r6, [r4, #8]
 800b5a8:	bfa4      	itt	ge
 800b5aa:	f021 0104 	bicge.w	r1, r1, #4
 800b5ae:	6021      	strge	r1, [r4, #0]
 800b5b0:	b90d      	cbnz	r5, 800b5b6 <_printf_i+0x11a>
 800b5b2:	2e00      	cmp	r6, #0
 800b5b4:	d04d      	beq.n	800b652 <_printf_i+0x1b6>
 800b5b6:	4616      	mov	r6, r2
 800b5b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5bc:	fb03 5711 	mls	r7, r3, r1, r5
 800b5c0:	5dc7      	ldrb	r7, [r0, r7]
 800b5c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5c6:	462f      	mov	r7, r5
 800b5c8:	42bb      	cmp	r3, r7
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	d9f4      	bls.n	800b5b8 <_printf_i+0x11c>
 800b5ce:	2b08      	cmp	r3, #8
 800b5d0:	d10b      	bne.n	800b5ea <_printf_i+0x14e>
 800b5d2:	6823      	ldr	r3, [r4, #0]
 800b5d4:	07df      	lsls	r7, r3, #31
 800b5d6:	d508      	bpl.n	800b5ea <_printf_i+0x14e>
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	6861      	ldr	r1, [r4, #4]
 800b5dc:	4299      	cmp	r1, r3
 800b5de:	bfde      	ittt	le
 800b5e0:	2330      	movle	r3, #48	; 0x30
 800b5e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5e6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b5ea:	1b92      	subs	r2, r2, r6
 800b5ec:	6122      	str	r2, [r4, #16]
 800b5ee:	464b      	mov	r3, r9
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	f8cd a000 	str.w	sl, [sp]
 800b5f8:	aa03      	add	r2, sp, #12
 800b5fa:	f7ff fedf 	bl	800b3bc <_printf_common>
 800b5fe:	3001      	adds	r0, #1
 800b600:	d14c      	bne.n	800b69c <_printf_i+0x200>
 800b602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b606:	b004      	add	sp, #16
 800b608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60c:	4834      	ldr	r0, [pc, #208]	; (800b6e0 <_printf_i+0x244>)
 800b60e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b612:	680e      	ldr	r6, [r1, #0]
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	f856 5b04 	ldr.w	r5, [r6], #4
 800b61a:	061f      	lsls	r7, r3, #24
 800b61c:	600e      	str	r6, [r1, #0]
 800b61e:	d514      	bpl.n	800b64a <_printf_i+0x1ae>
 800b620:	07d9      	lsls	r1, r3, #31
 800b622:	bf44      	itt	mi
 800b624:	f043 0320 	orrmi.w	r3, r3, #32
 800b628:	6023      	strmi	r3, [r4, #0]
 800b62a:	b91d      	cbnz	r5, 800b634 <_printf_i+0x198>
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	f023 0320 	bic.w	r3, r3, #32
 800b632:	6023      	str	r3, [r4, #0]
 800b634:	2310      	movs	r3, #16
 800b636:	e7af      	b.n	800b598 <_printf_i+0xfc>
 800b638:	6823      	ldr	r3, [r4, #0]
 800b63a:	f043 0320 	orr.w	r3, r3, #32
 800b63e:	6023      	str	r3, [r4, #0]
 800b640:	2378      	movs	r3, #120	; 0x78
 800b642:	4828      	ldr	r0, [pc, #160]	; (800b6e4 <_printf_i+0x248>)
 800b644:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b648:	e7e3      	b.n	800b612 <_printf_i+0x176>
 800b64a:	065e      	lsls	r6, r3, #25
 800b64c:	bf48      	it	mi
 800b64e:	b2ad      	uxthmi	r5, r5
 800b650:	e7e6      	b.n	800b620 <_printf_i+0x184>
 800b652:	4616      	mov	r6, r2
 800b654:	e7bb      	b.n	800b5ce <_printf_i+0x132>
 800b656:	680b      	ldr	r3, [r1, #0]
 800b658:	6826      	ldr	r6, [r4, #0]
 800b65a:	1d1d      	adds	r5, r3, #4
 800b65c:	6960      	ldr	r0, [r4, #20]
 800b65e:	600d      	str	r5, [r1, #0]
 800b660:	0635      	lsls	r5, r6, #24
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	d501      	bpl.n	800b66a <_printf_i+0x1ce>
 800b666:	6018      	str	r0, [r3, #0]
 800b668:	e002      	b.n	800b670 <_printf_i+0x1d4>
 800b66a:	0671      	lsls	r1, r6, #25
 800b66c:	d5fb      	bpl.n	800b666 <_printf_i+0x1ca>
 800b66e:	8018      	strh	r0, [r3, #0]
 800b670:	2300      	movs	r3, #0
 800b672:	4616      	mov	r6, r2
 800b674:	6123      	str	r3, [r4, #16]
 800b676:	e7ba      	b.n	800b5ee <_printf_i+0x152>
 800b678:	680b      	ldr	r3, [r1, #0]
 800b67a:	1d1a      	adds	r2, r3, #4
 800b67c:	600a      	str	r2, [r1, #0]
 800b67e:	681e      	ldr	r6, [r3, #0]
 800b680:	2100      	movs	r1, #0
 800b682:	4630      	mov	r0, r6
 800b684:	6862      	ldr	r2, [r4, #4]
 800b686:	f000 fee1 	bl	800c44c <memchr>
 800b68a:	b108      	cbz	r0, 800b690 <_printf_i+0x1f4>
 800b68c:	1b80      	subs	r0, r0, r6
 800b68e:	6060      	str	r0, [r4, #4]
 800b690:	6863      	ldr	r3, [r4, #4]
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	2300      	movs	r3, #0
 800b696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b69a:	e7a8      	b.n	800b5ee <_printf_i+0x152>
 800b69c:	4632      	mov	r2, r6
 800b69e:	4649      	mov	r1, r9
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	47d0      	blx	sl
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	d0ab      	beq.n	800b602 <_printf_i+0x166>
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	079b      	lsls	r3, r3, #30
 800b6ae:	d413      	bmi.n	800b6d8 <_printf_i+0x23c>
 800b6b0:	68e0      	ldr	r0, [r4, #12]
 800b6b2:	9b03      	ldr	r3, [sp, #12]
 800b6b4:	4298      	cmp	r0, r3
 800b6b6:	bfb8      	it	lt
 800b6b8:	4618      	movlt	r0, r3
 800b6ba:	e7a4      	b.n	800b606 <_printf_i+0x16a>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	4632      	mov	r2, r6
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	47d0      	blx	sl
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	d09b      	beq.n	800b602 <_printf_i+0x166>
 800b6ca:	3501      	adds	r5, #1
 800b6cc:	68e3      	ldr	r3, [r4, #12]
 800b6ce:	9903      	ldr	r1, [sp, #12]
 800b6d0:	1a5b      	subs	r3, r3, r1
 800b6d2:	42ab      	cmp	r3, r5
 800b6d4:	dcf2      	bgt.n	800b6bc <_printf_i+0x220>
 800b6d6:	e7eb      	b.n	800b6b0 <_printf_i+0x214>
 800b6d8:	2500      	movs	r5, #0
 800b6da:	f104 0619 	add.w	r6, r4, #25
 800b6de:	e7f5      	b.n	800b6cc <_printf_i+0x230>
 800b6e0:	0800f356 	.word	0x0800f356
 800b6e4:	0800f367 	.word	0x0800f367

0800b6e8 <siprintf>:
 800b6e8:	b40e      	push	{r1, r2, r3}
 800b6ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6ee:	b500      	push	{lr}
 800b6f0:	b09c      	sub	sp, #112	; 0x70
 800b6f2:	ab1d      	add	r3, sp, #116	; 0x74
 800b6f4:	9002      	str	r0, [sp, #8]
 800b6f6:	9006      	str	r0, [sp, #24]
 800b6f8:	9107      	str	r1, [sp, #28]
 800b6fa:	9104      	str	r1, [sp, #16]
 800b6fc:	4808      	ldr	r0, [pc, #32]	; (800b720 <siprintf+0x38>)
 800b6fe:	4909      	ldr	r1, [pc, #36]	; (800b724 <siprintf+0x3c>)
 800b700:	f853 2b04 	ldr.w	r2, [r3], #4
 800b704:	9105      	str	r1, [sp, #20]
 800b706:	6800      	ldr	r0, [r0, #0]
 800b708:	a902      	add	r1, sp, #8
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	f001 fb4c 	bl	800cda8 <_svfiprintf_r>
 800b710:	2200      	movs	r2, #0
 800b712:	9b02      	ldr	r3, [sp, #8]
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	b01c      	add	sp, #112	; 0x70
 800b718:	f85d eb04 	ldr.w	lr, [sp], #4
 800b71c:	b003      	add	sp, #12
 800b71e:	4770      	bx	lr
 800b720:	20000170 	.word	0x20000170
 800b724:	ffff0208 	.word	0xffff0208

0800b728 <strcpy>:
 800b728:	4603      	mov	r3, r0
 800b72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b72e:	f803 2b01 	strb.w	r2, [r3], #1
 800b732:	2a00      	cmp	r2, #0
 800b734:	d1f9      	bne.n	800b72a <strcpy+0x2>
 800b736:	4770      	bx	lr

0800b738 <quorem>:
 800b738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73c:	6903      	ldr	r3, [r0, #16]
 800b73e:	690c      	ldr	r4, [r1, #16]
 800b740:	4607      	mov	r7, r0
 800b742:	42a3      	cmp	r3, r4
 800b744:	f2c0 8083 	blt.w	800b84e <quorem+0x116>
 800b748:	3c01      	subs	r4, #1
 800b74a:	f100 0514 	add.w	r5, r0, #20
 800b74e:	f101 0814 	add.w	r8, r1, #20
 800b752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b756:	9301      	str	r3, [sp, #4]
 800b758:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b75c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b760:	3301      	adds	r3, #1
 800b762:	429a      	cmp	r2, r3
 800b764:	fbb2 f6f3 	udiv	r6, r2, r3
 800b768:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b76c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b770:	d332      	bcc.n	800b7d8 <quorem+0xa0>
 800b772:	f04f 0e00 	mov.w	lr, #0
 800b776:	4640      	mov	r0, r8
 800b778:	46ac      	mov	ip, r5
 800b77a:	46f2      	mov	sl, lr
 800b77c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b780:	b293      	uxth	r3, r2
 800b782:	fb06 e303 	mla	r3, r6, r3, lr
 800b786:	0c12      	lsrs	r2, r2, #16
 800b788:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b78c:	fb06 e202 	mla	r2, r6, r2, lr
 800b790:	b29b      	uxth	r3, r3
 800b792:	ebaa 0303 	sub.w	r3, sl, r3
 800b796:	f8dc a000 	ldr.w	sl, [ip]
 800b79a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b79e:	fa1f fa8a 	uxth.w	sl, sl
 800b7a2:	4453      	add	r3, sl
 800b7a4:	fa1f fa82 	uxth.w	sl, r2
 800b7a8:	f8dc 2000 	ldr.w	r2, [ip]
 800b7ac:	4581      	cmp	r9, r0
 800b7ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b7b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7c0:	f84c 3b04 	str.w	r3, [ip], #4
 800b7c4:	d2da      	bcs.n	800b77c <quorem+0x44>
 800b7c6:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7ca:	b92b      	cbnz	r3, 800b7d8 <quorem+0xa0>
 800b7cc:	9b01      	ldr	r3, [sp, #4]
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	429d      	cmp	r5, r3
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	d32f      	bcc.n	800b836 <quorem+0xfe>
 800b7d6:	613c      	str	r4, [r7, #16]
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f001 f8cd 	bl	800c978 <__mcmp>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	db25      	blt.n	800b82e <quorem+0xf6>
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	f04f 0c00 	mov.w	ip, #0
 800b7e8:	3601      	adds	r6, #1
 800b7ea:	f858 1b04 	ldr.w	r1, [r8], #4
 800b7ee:	f8d0 e000 	ldr.w	lr, [r0]
 800b7f2:	b28b      	uxth	r3, r1
 800b7f4:	ebac 0303 	sub.w	r3, ip, r3
 800b7f8:	fa1f f28e 	uxth.w	r2, lr
 800b7fc:	4413      	add	r3, r2
 800b7fe:	0c0a      	lsrs	r2, r1, #16
 800b800:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b808:	b29b      	uxth	r3, r3
 800b80a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b80e:	45c1      	cmp	r9, r8
 800b810:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b814:	f840 3b04 	str.w	r3, [r0], #4
 800b818:	d2e7      	bcs.n	800b7ea <quorem+0xb2>
 800b81a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b81e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b822:	b922      	cbnz	r2, 800b82e <quorem+0xf6>
 800b824:	3b04      	subs	r3, #4
 800b826:	429d      	cmp	r5, r3
 800b828:	461a      	mov	r2, r3
 800b82a:	d30a      	bcc.n	800b842 <quorem+0x10a>
 800b82c:	613c      	str	r4, [r7, #16]
 800b82e:	4630      	mov	r0, r6
 800b830:	b003      	add	sp, #12
 800b832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b836:	6812      	ldr	r2, [r2, #0]
 800b838:	3b04      	subs	r3, #4
 800b83a:	2a00      	cmp	r2, #0
 800b83c:	d1cb      	bne.n	800b7d6 <quorem+0x9e>
 800b83e:	3c01      	subs	r4, #1
 800b840:	e7c6      	b.n	800b7d0 <quorem+0x98>
 800b842:	6812      	ldr	r2, [r2, #0]
 800b844:	3b04      	subs	r3, #4
 800b846:	2a00      	cmp	r2, #0
 800b848:	d1f0      	bne.n	800b82c <quorem+0xf4>
 800b84a:	3c01      	subs	r4, #1
 800b84c:	e7eb      	b.n	800b826 <quorem+0xee>
 800b84e:	2000      	movs	r0, #0
 800b850:	e7ee      	b.n	800b830 <quorem+0xf8>
 800b852:	0000      	movs	r0, r0
 800b854:	0000      	movs	r0, r0
	...

0800b858 <_dtoa_r>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	4616      	mov	r6, r2
 800b85e:	461f      	mov	r7, r3
 800b860:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b862:	b099      	sub	sp, #100	; 0x64
 800b864:	4605      	mov	r5, r0
 800b866:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b86a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b86e:	b974      	cbnz	r4, 800b88e <_dtoa_r+0x36>
 800b870:	2010      	movs	r0, #16
 800b872:	f000 fde3 	bl	800c43c <malloc>
 800b876:	4602      	mov	r2, r0
 800b878:	6268      	str	r0, [r5, #36]	; 0x24
 800b87a:	b920      	cbnz	r0, 800b886 <_dtoa_r+0x2e>
 800b87c:	21ea      	movs	r1, #234	; 0xea
 800b87e:	4bae      	ldr	r3, [pc, #696]	; (800bb38 <_dtoa_r+0x2e0>)
 800b880:	48ae      	ldr	r0, [pc, #696]	; (800bb3c <_dtoa_r+0x2e4>)
 800b882:	f001 fba1 	bl	800cfc8 <__assert_func>
 800b886:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b88a:	6004      	str	r4, [r0, #0]
 800b88c:	60c4      	str	r4, [r0, #12]
 800b88e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b890:	6819      	ldr	r1, [r3, #0]
 800b892:	b151      	cbz	r1, 800b8aa <_dtoa_r+0x52>
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	2301      	movs	r3, #1
 800b898:	4093      	lsls	r3, r2
 800b89a:	604a      	str	r2, [r1, #4]
 800b89c:	608b      	str	r3, [r1, #8]
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f000 fe30 	bl	800c504 <_Bfree>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	1e3b      	subs	r3, r7, #0
 800b8ac:	bfaf      	iteee	ge
 800b8ae:	2300      	movge	r3, #0
 800b8b0:	2201      	movlt	r2, #1
 800b8b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b8b6:	9305      	strlt	r3, [sp, #20]
 800b8b8:	bfa8      	it	ge
 800b8ba:	f8c8 3000 	strge.w	r3, [r8]
 800b8be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b8c2:	4b9f      	ldr	r3, [pc, #636]	; (800bb40 <_dtoa_r+0x2e8>)
 800b8c4:	bfb8      	it	lt
 800b8c6:	f8c8 2000 	strlt.w	r2, [r8]
 800b8ca:	ea33 0309 	bics.w	r3, r3, r9
 800b8ce:	d119      	bne.n	800b904 <_dtoa_r+0xac>
 800b8d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8dc:	4333      	orrs	r3, r6
 800b8de:	f000 8580 	beq.w	800c3e2 <_dtoa_r+0xb8a>
 800b8e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b8e4:	b953      	cbnz	r3, 800b8fc <_dtoa_r+0xa4>
 800b8e6:	4b97      	ldr	r3, [pc, #604]	; (800bb44 <_dtoa_r+0x2ec>)
 800b8e8:	e022      	b.n	800b930 <_dtoa_r+0xd8>
 800b8ea:	4b97      	ldr	r3, [pc, #604]	; (800bb48 <_dtoa_r+0x2f0>)
 800b8ec:	9308      	str	r3, [sp, #32]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b8f2:	6013      	str	r3, [r2, #0]
 800b8f4:	9808      	ldr	r0, [sp, #32]
 800b8f6:	b019      	add	sp, #100	; 0x64
 800b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fc:	4b91      	ldr	r3, [pc, #580]	; (800bb44 <_dtoa_r+0x2ec>)
 800b8fe:	9308      	str	r3, [sp, #32]
 800b900:	3303      	adds	r3, #3
 800b902:	e7f5      	b.n	800b8f0 <_dtoa_r+0x98>
 800b904:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b908:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b90c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b910:	2200      	movs	r2, #0
 800b912:	2300      	movs	r3, #0
 800b914:	f7f5 f848 	bl	80009a8 <__aeabi_dcmpeq>
 800b918:	4680      	mov	r8, r0
 800b91a:	b158      	cbz	r0, 800b934 <_dtoa_r+0xdc>
 800b91c:	2301      	movs	r3, #1
 800b91e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b920:	6013      	str	r3, [r2, #0]
 800b922:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 8559 	beq.w	800c3dc <_dtoa_r+0xb84>
 800b92a:	4888      	ldr	r0, [pc, #544]	; (800bb4c <_dtoa_r+0x2f4>)
 800b92c:	6018      	str	r0, [r3, #0]
 800b92e:	1e43      	subs	r3, r0, #1
 800b930:	9308      	str	r3, [sp, #32]
 800b932:	e7df      	b.n	800b8f4 <_dtoa_r+0x9c>
 800b934:	ab16      	add	r3, sp, #88	; 0x58
 800b936:	9301      	str	r3, [sp, #4]
 800b938:	ab17      	add	r3, sp, #92	; 0x5c
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	4628      	mov	r0, r5
 800b93e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b942:	f001 f8c5 	bl	800cad0 <__d2b>
 800b946:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b94a:	4682      	mov	sl, r0
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	d07e      	beq.n	800ba4e <_dtoa_r+0x1f6>
 800b950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b956:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b95a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b95e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b962:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b966:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b96a:	2200      	movs	r2, #0
 800b96c:	4b78      	ldr	r3, [pc, #480]	; (800bb50 <_dtoa_r+0x2f8>)
 800b96e:	f7f4 fbfb 	bl	8000168 <__aeabi_dsub>
 800b972:	a36b      	add	r3, pc, #428	; (adr r3, 800bb20 <_dtoa_r+0x2c8>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fdae 	bl	80004d8 <__aeabi_dmul>
 800b97c:	a36a      	add	r3, pc, #424	; (adr r3, 800bb28 <_dtoa_r+0x2d0>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fbf3 	bl	800016c <__adddf3>
 800b986:	4606      	mov	r6, r0
 800b988:	4620      	mov	r0, r4
 800b98a:	460f      	mov	r7, r1
 800b98c:	f7f4 fd3a 	bl	8000404 <__aeabi_i2d>
 800b990:	a367      	add	r3, pc, #412	; (adr r3, 800bb30 <_dtoa_r+0x2d8>)
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f7f4 fd9f 	bl	80004d8 <__aeabi_dmul>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	f7f4 fbe3 	bl	800016c <__adddf3>
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	460f      	mov	r7, r1
 800b9aa:	f7f5 f845 	bl	8000a38 <__aeabi_d2iz>
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	4681      	mov	r9, r0
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	4639      	mov	r1, r7
 800b9b8:	f7f5 f800 	bl	80009bc <__aeabi_dcmplt>
 800b9bc:	b148      	cbz	r0, 800b9d2 <_dtoa_r+0x17a>
 800b9be:	4648      	mov	r0, r9
 800b9c0:	f7f4 fd20 	bl	8000404 <__aeabi_i2d>
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	f7f4 ffee 	bl	80009a8 <__aeabi_dcmpeq>
 800b9cc:	b908      	cbnz	r0, 800b9d2 <_dtoa_r+0x17a>
 800b9ce:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b9d2:	f1b9 0f16 	cmp.w	r9, #22
 800b9d6:	d857      	bhi.n	800ba88 <_dtoa_r+0x230>
 800b9d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9dc:	4b5d      	ldr	r3, [pc, #372]	; (800bb54 <_dtoa_r+0x2fc>)
 800b9de:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	f7f4 ffe9 	bl	80009bc <__aeabi_dcmplt>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d04e      	beq.n	800ba8c <_dtoa_r+0x234>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b9f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b9f8:	1b1c      	subs	r4, r3, r4
 800b9fa:	1e63      	subs	r3, r4, #1
 800b9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9fe:	bf49      	itett	mi
 800ba00:	f1c4 0301 	rsbmi	r3, r4, #1
 800ba04:	2300      	movpl	r3, #0
 800ba06:	9306      	strmi	r3, [sp, #24]
 800ba08:	2300      	movmi	r3, #0
 800ba0a:	bf54      	ite	pl
 800ba0c:	9306      	strpl	r3, [sp, #24]
 800ba0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ba10:	f1b9 0f00 	cmp.w	r9, #0
 800ba14:	db3c      	blt.n	800ba90 <_dtoa_r+0x238>
 800ba16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba18:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba1c:	444b      	add	r3, r9
 800ba1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba20:	2300      	movs	r3, #0
 800ba22:	930a      	str	r3, [sp, #40]	; 0x28
 800ba24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba26:	2b09      	cmp	r3, #9
 800ba28:	d86c      	bhi.n	800bb04 <_dtoa_r+0x2ac>
 800ba2a:	2b05      	cmp	r3, #5
 800ba2c:	bfc4      	itt	gt
 800ba2e:	3b04      	subgt	r3, #4
 800ba30:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ba32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba34:	bfc8      	it	gt
 800ba36:	2400      	movgt	r4, #0
 800ba38:	f1a3 0302 	sub.w	r3, r3, #2
 800ba3c:	bfd8      	it	le
 800ba3e:	2401      	movle	r4, #1
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	f200 808b 	bhi.w	800bb5c <_dtoa_r+0x304>
 800ba46:	e8df f003 	tbb	[pc, r3]
 800ba4a:	4f2d      	.short	0x4f2d
 800ba4c:	5b4d      	.short	0x5b4d
 800ba4e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ba52:	441c      	add	r4, r3
 800ba54:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ba58:	2b20      	cmp	r3, #32
 800ba5a:	bfc3      	ittte	gt
 800ba5c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba60:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ba64:	fa09 f303 	lslgt.w	r3, r9, r3
 800ba68:	f1c3 0320 	rsble	r3, r3, #32
 800ba6c:	bfc6      	itte	gt
 800ba6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba72:	4318      	orrgt	r0, r3
 800ba74:	fa06 f003 	lslle.w	r0, r6, r3
 800ba78:	f7f4 fcb4 	bl	80003e4 <__aeabi_ui2d>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ba82:	3c01      	subs	r4, #1
 800ba84:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba86:	e770      	b.n	800b96a <_dtoa_r+0x112>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e7b3      	b.n	800b9f4 <_dtoa_r+0x19c>
 800ba8c:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba8e:	e7b2      	b.n	800b9f6 <_dtoa_r+0x19e>
 800ba90:	9b06      	ldr	r3, [sp, #24]
 800ba92:	eba3 0309 	sub.w	r3, r3, r9
 800ba96:	9306      	str	r3, [sp, #24]
 800ba98:	f1c9 0300 	rsb	r3, r9, #0
 800ba9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ba9e:	2300      	movs	r3, #0
 800baa0:	930e      	str	r3, [sp, #56]	; 0x38
 800baa2:	e7bf      	b.n	800ba24 <_dtoa_r+0x1cc>
 800baa4:	2300      	movs	r3, #0
 800baa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800baa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800baaa:	2b00      	cmp	r3, #0
 800baac:	dc59      	bgt.n	800bb62 <_dtoa_r+0x30a>
 800baae:	f04f 0b01 	mov.w	fp, #1
 800bab2:	465b      	mov	r3, fp
 800bab4:	f8cd b008 	str.w	fp, [sp, #8]
 800bab8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800babc:	2200      	movs	r2, #0
 800babe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bac0:	6042      	str	r2, [r0, #4]
 800bac2:	2204      	movs	r2, #4
 800bac4:	f102 0614 	add.w	r6, r2, #20
 800bac8:	429e      	cmp	r6, r3
 800baca:	6841      	ldr	r1, [r0, #4]
 800bacc:	d94f      	bls.n	800bb6e <_dtoa_r+0x316>
 800bace:	4628      	mov	r0, r5
 800bad0:	f000 fcd8 	bl	800c484 <_Balloc>
 800bad4:	9008      	str	r0, [sp, #32]
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d14d      	bne.n	800bb76 <_dtoa_r+0x31e>
 800bada:	4602      	mov	r2, r0
 800badc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bae0:	4b1d      	ldr	r3, [pc, #116]	; (800bb58 <_dtoa_r+0x300>)
 800bae2:	e6cd      	b.n	800b880 <_dtoa_r+0x28>
 800bae4:	2301      	movs	r3, #1
 800bae6:	e7de      	b.n	800baa6 <_dtoa_r+0x24e>
 800bae8:	2300      	movs	r3, #0
 800baea:	930b      	str	r3, [sp, #44]	; 0x2c
 800baec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800baee:	eb09 0b03 	add.w	fp, r9, r3
 800baf2:	f10b 0301 	add.w	r3, fp, #1
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	9302      	str	r3, [sp, #8]
 800bafa:	bfb8      	it	lt
 800bafc:	2301      	movlt	r3, #1
 800bafe:	e7dd      	b.n	800babc <_dtoa_r+0x264>
 800bb00:	2301      	movs	r3, #1
 800bb02:	e7f2      	b.n	800baea <_dtoa_r+0x292>
 800bb04:	2401      	movs	r4, #1
 800bb06:	2300      	movs	r3, #0
 800bb08:	940b      	str	r4, [sp, #44]	; 0x2c
 800bb0a:	9322      	str	r3, [sp, #136]	; 0x88
 800bb0c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800bb10:	2200      	movs	r2, #0
 800bb12:	2312      	movs	r3, #18
 800bb14:	f8cd b008 	str.w	fp, [sp, #8]
 800bb18:	9223      	str	r2, [sp, #140]	; 0x8c
 800bb1a:	e7cf      	b.n	800babc <_dtoa_r+0x264>
 800bb1c:	f3af 8000 	nop.w
 800bb20:	636f4361 	.word	0x636f4361
 800bb24:	3fd287a7 	.word	0x3fd287a7
 800bb28:	8b60c8b3 	.word	0x8b60c8b3
 800bb2c:	3fc68a28 	.word	0x3fc68a28
 800bb30:	509f79fb 	.word	0x509f79fb
 800bb34:	3fd34413 	.word	0x3fd34413
 800bb38:	0800f385 	.word	0x0800f385
 800bb3c:	0800f39c 	.word	0x0800f39c
 800bb40:	7ff00000 	.word	0x7ff00000
 800bb44:	0800f381 	.word	0x0800f381
 800bb48:	0800f378 	.word	0x0800f378
 800bb4c:	0800f355 	.word	0x0800f355
 800bb50:	3ff80000 	.word	0x3ff80000
 800bb54:	0800f498 	.word	0x0800f498
 800bb58:	0800f3fb 	.word	0x0800f3fb
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb60:	e7d4      	b.n	800bb0c <_dtoa_r+0x2b4>
 800bb62:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800bb66:	465b      	mov	r3, fp
 800bb68:	f8cd b008 	str.w	fp, [sp, #8]
 800bb6c:	e7a6      	b.n	800babc <_dtoa_r+0x264>
 800bb6e:	3101      	adds	r1, #1
 800bb70:	6041      	str	r1, [r0, #4]
 800bb72:	0052      	lsls	r2, r2, #1
 800bb74:	e7a6      	b.n	800bac4 <_dtoa_r+0x26c>
 800bb76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb78:	9a08      	ldr	r2, [sp, #32]
 800bb7a:	601a      	str	r2, [r3, #0]
 800bb7c:	9b02      	ldr	r3, [sp, #8]
 800bb7e:	2b0e      	cmp	r3, #14
 800bb80:	f200 80a8 	bhi.w	800bcd4 <_dtoa_r+0x47c>
 800bb84:	2c00      	cmp	r4, #0
 800bb86:	f000 80a5 	beq.w	800bcd4 <_dtoa_r+0x47c>
 800bb8a:	f1b9 0f00 	cmp.w	r9, #0
 800bb8e:	dd34      	ble.n	800bbfa <_dtoa_r+0x3a2>
 800bb90:	4a9a      	ldr	r2, [pc, #616]	; (800bdfc <_dtoa_r+0x5a4>)
 800bb92:	f009 030f 	and.w	r3, r9, #15
 800bb96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb9a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800bb9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bba2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bba6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800bbaa:	d016      	beq.n	800bbda <_dtoa_r+0x382>
 800bbac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbb0:	4b93      	ldr	r3, [pc, #588]	; (800be00 <_dtoa_r+0x5a8>)
 800bbb2:	2703      	movs	r7, #3
 800bbb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbb8:	f7f4 fdb8 	bl	800072c <__aeabi_ddiv>
 800bbbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbc0:	f004 040f 	and.w	r4, r4, #15
 800bbc4:	4e8e      	ldr	r6, [pc, #568]	; (800be00 <_dtoa_r+0x5a8>)
 800bbc6:	b954      	cbnz	r4, 800bbde <_dtoa_r+0x386>
 800bbc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbd0:	f7f4 fdac 	bl	800072c <__aeabi_ddiv>
 800bbd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbd8:	e029      	b.n	800bc2e <_dtoa_r+0x3d6>
 800bbda:	2702      	movs	r7, #2
 800bbdc:	e7f2      	b.n	800bbc4 <_dtoa_r+0x36c>
 800bbde:	07e1      	lsls	r1, r4, #31
 800bbe0:	d508      	bpl.n	800bbf4 <_dtoa_r+0x39c>
 800bbe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbe6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbea:	f7f4 fc75 	bl	80004d8 <__aeabi_dmul>
 800bbee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bbf2:	3701      	adds	r7, #1
 800bbf4:	1064      	asrs	r4, r4, #1
 800bbf6:	3608      	adds	r6, #8
 800bbf8:	e7e5      	b.n	800bbc6 <_dtoa_r+0x36e>
 800bbfa:	f000 80a5 	beq.w	800bd48 <_dtoa_r+0x4f0>
 800bbfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc02:	f1c9 0400 	rsb	r4, r9, #0
 800bc06:	4b7d      	ldr	r3, [pc, #500]	; (800bdfc <_dtoa_r+0x5a4>)
 800bc08:	f004 020f 	and.w	r2, r4, #15
 800bc0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	f7f4 fc60 	bl	80004d8 <__aeabi_dmul>
 800bc18:	2702      	movs	r7, #2
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc20:	4e77      	ldr	r6, [pc, #476]	; (800be00 <_dtoa_r+0x5a8>)
 800bc22:	1124      	asrs	r4, r4, #4
 800bc24:	2c00      	cmp	r4, #0
 800bc26:	f040 8084 	bne.w	800bd32 <_dtoa_r+0x4da>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1d2      	bne.n	800bbd4 <_dtoa_r+0x37c>
 800bc2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f000 808b 	beq.w	800bd4c <_dtoa_r+0x4f4>
 800bc36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bc3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bc3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc42:	2200      	movs	r2, #0
 800bc44:	4b6f      	ldr	r3, [pc, #444]	; (800be04 <_dtoa_r+0x5ac>)
 800bc46:	f7f4 feb9 	bl	80009bc <__aeabi_dcmplt>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d07e      	beq.n	800bd4c <_dtoa_r+0x4f4>
 800bc4e:	9b02      	ldr	r3, [sp, #8]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d07b      	beq.n	800bd4c <_dtoa_r+0x4f4>
 800bc54:	f1bb 0f00 	cmp.w	fp, #0
 800bc58:	dd38      	ble.n	800bccc <_dtoa_r+0x474>
 800bc5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc5e:	2200      	movs	r2, #0
 800bc60:	4b69      	ldr	r3, [pc, #420]	; (800be08 <_dtoa_r+0x5b0>)
 800bc62:	f7f4 fc39 	bl	80004d8 <__aeabi_dmul>
 800bc66:	465c      	mov	r4, fp
 800bc68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc6c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 800bc70:	3701      	adds	r7, #1
 800bc72:	4638      	mov	r0, r7
 800bc74:	f7f4 fbc6 	bl	8000404 <__aeabi_i2d>
 800bc78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc7c:	f7f4 fc2c 	bl	80004d8 <__aeabi_dmul>
 800bc80:	2200      	movs	r2, #0
 800bc82:	4b62      	ldr	r3, [pc, #392]	; (800be0c <_dtoa_r+0x5b4>)
 800bc84:	f7f4 fa72 	bl	800016c <__adddf3>
 800bc88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bc8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc90:	9611      	str	r6, [sp, #68]	; 0x44
 800bc92:	2c00      	cmp	r4, #0
 800bc94:	d15d      	bne.n	800bd52 <_dtoa_r+0x4fa>
 800bc96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	4b5c      	ldr	r3, [pc, #368]	; (800be10 <_dtoa_r+0x5b8>)
 800bc9e:	f7f4 fa63 	bl	8000168 <__aeabi_dsub>
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcaa:	4633      	mov	r3, r6
 800bcac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcae:	f7f4 fea3 	bl	80009f8 <__aeabi_dcmpgt>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	f040 829e 	bne.w	800c1f4 <_dtoa_r+0x99c>
 800bcb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcbe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bcc2:	f7f4 fe7b 	bl	80009bc <__aeabi_dcmplt>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	f040 8292 	bne.w	800c1f0 <_dtoa_r+0x998>
 800bccc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bcd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bcd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f2c0 8153 	blt.w	800bf82 <_dtoa_r+0x72a>
 800bcdc:	f1b9 0f0e 	cmp.w	r9, #14
 800bce0:	f300 814f 	bgt.w	800bf82 <_dtoa_r+0x72a>
 800bce4:	4b45      	ldr	r3, [pc, #276]	; (800bdfc <_dtoa_r+0x5a4>)
 800bce6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bcea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bcf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f280 80db 	bge.w	800beb0 <_dtoa_r+0x658>
 800bcfa:	9b02      	ldr	r3, [sp, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f300 80d7 	bgt.w	800beb0 <_dtoa_r+0x658>
 800bd02:	f040 8274 	bne.w	800c1ee <_dtoa_r+0x996>
 800bd06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	4b40      	ldr	r3, [pc, #256]	; (800be10 <_dtoa_r+0x5b8>)
 800bd0e:	f7f4 fbe3 	bl	80004d8 <__aeabi_dmul>
 800bd12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd16:	f7f4 fe65 	bl	80009e4 <__aeabi_dcmpge>
 800bd1a:	9c02      	ldr	r4, [sp, #8]
 800bd1c:	4626      	mov	r6, r4
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f040 824a 	bne.w	800c1b8 <_dtoa_r+0x960>
 800bd24:	2331      	movs	r3, #49	; 0x31
 800bd26:	9f08      	ldr	r7, [sp, #32]
 800bd28:	f109 0901 	add.w	r9, r9, #1
 800bd2c:	f807 3b01 	strb.w	r3, [r7], #1
 800bd30:	e246      	b.n	800c1c0 <_dtoa_r+0x968>
 800bd32:	07e2      	lsls	r2, r4, #31
 800bd34:	d505      	bpl.n	800bd42 <_dtoa_r+0x4ea>
 800bd36:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd3a:	f7f4 fbcd 	bl	80004d8 <__aeabi_dmul>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	3701      	adds	r7, #1
 800bd42:	1064      	asrs	r4, r4, #1
 800bd44:	3608      	adds	r6, #8
 800bd46:	e76d      	b.n	800bc24 <_dtoa_r+0x3cc>
 800bd48:	2702      	movs	r7, #2
 800bd4a:	e770      	b.n	800bc2e <_dtoa_r+0x3d6>
 800bd4c:	46c8      	mov	r8, r9
 800bd4e:	9c02      	ldr	r4, [sp, #8]
 800bd50:	e78f      	b.n	800bc72 <_dtoa_r+0x41a>
 800bd52:	9908      	ldr	r1, [sp, #32]
 800bd54:	4b29      	ldr	r3, [pc, #164]	; (800bdfc <_dtoa_r+0x5a4>)
 800bd56:	4421      	add	r1, r4
 800bd58:	9112      	str	r1, [sp, #72]	; 0x48
 800bd5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bd64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd68:	2900      	cmp	r1, #0
 800bd6a:	d055      	beq.n	800be18 <_dtoa_r+0x5c0>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	4929      	ldr	r1, [pc, #164]	; (800be14 <_dtoa_r+0x5bc>)
 800bd70:	f7f4 fcdc 	bl	800072c <__aeabi_ddiv>
 800bd74:	463b      	mov	r3, r7
 800bd76:	4632      	mov	r2, r6
 800bd78:	f7f4 f9f6 	bl	8000168 <__aeabi_dsub>
 800bd7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd80:	9f08      	ldr	r7, [sp, #32]
 800bd82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd86:	f7f4 fe57 	bl	8000a38 <__aeabi_d2iz>
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	f7f4 fb3a 	bl	8000404 <__aeabi_i2d>
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd98:	f7f4 f9e6 	bl	8000168 <__aeabi_dsub>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	3430      	adds	r4, #48	; 0x30
 800bda2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bda6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bdaa:	f807 4b01 	strb.w	r4, [r7], #1
 800bdae:	f7f4 fe05 	bl	80009bc <__aeabi_dcmplt>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d174      	bne.n	800bea0 <_dtoa_r+0x648>
 800bdb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdba:	2000      	movs	r0, #0
 800bdbc:	4911      	ldr	r1, [pc, #68]	; (800be04 <_dtoa_r+0x5ac>)
 800bdbe:	f7f4 f9d3 	bl	8000168 <__aeabi_dsub>
 800bdc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bdc6:	f7f4 fdf9 	bl	80009bc <__aeabi_dcmplt>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	f040 80b6 	bne.w	800bf3c <_dtoa_r+0x6e4>
 800bdd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdd2:	429f      	cmp	r7, r3
 800bdd4:	f43f af7a 	beq.w	800bccc <_dtoa_r+0x474>
 800bdd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bddc:	2200      	movs	r2, #0
 800bdde:	4b0a      	ldr	r3, [pc, #40]	; (800be08 <_dtoa_r+0x5b0>)
 800bde0:	f7f4 fb7a 	bl	80004d8 <__aeabi_dmul>
 800bde4:	2200      	movs	r2, #0
 800bde6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bdea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdee:	4b06      	ldr	r3, [pc, #24]	; (800be08 <_dtoa_r+0x5b0>)
 800bdf0:	f7f4 fb72 	bl	80004d8 <__aeabi_dmul>
 800bdf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdf8:	e7c3      	b.n	800bd82 <_dtoa_r+0x52a>
 800bdfa:	bf00      	nop
 800bdfc:	0800f498 	.word	0x0800f498
 800be00:	0800f470 	.word	0x0800f470
 800be04:	3ff00000 	.word	0x3ff00000
 800be08:	40240000 	.word	0x40240000
 800be0c:	401c0000 	.word	0x401c0000
 800be10:	40140000 	.word	0x40140000
 800be14:	3fe00000 	.word	0x3fe00000
 800be18:	4630      	mov	r0, r6
 800be1a:	4639      	mov	r1, r7
 800be1c:	f7f4 fb5c 	bl	80004d8 <__aeabi_dmul>
 800be20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be26:	9c08      	ldr	r4, [sp, #32]
 800be28:	9314      	str	r3, [sp, #80]	; 0x50
 800be2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be2e:	f7f4 fe03 	bl	8000a38 <__aeabi_d2iz>
 800be32:	9015      	str	r0, [sp, #84]	; 0x54
 800be34:	f7f4 fae6 	bl	8000404 <__aeabi_i2d>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be40:	f7f4 f992 	bl	8000168 <__aeabi_dsub>
 800be44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be46:	4606      	mov	r6, r0
 800be48:	3330      	adds	r3, #48	; 0x30
 800be4a:	f804 3b01 	strb.w	r3, [r4], #1
 800be4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be50:	460f      	mov	r7, r1
 800be52:	429c      	cmp	r4, r3
 800be54:	f04f 0200 	mov.w	r2, #0
 800be58:	d124      	bne.n	800bea4 <_dtoa_r+0x64c>
 800be5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be5e:	4bb3      	ldr	r3, [pc, #716]	; (800c12c <_dtoa_r+0x8d4>)
 800be60:	f7f4 f984 	bl	800016c <__adddf3>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4630      	mov	r0, r6
 800be6a:	4639      	mov	r1, r7
 800be6c:	f7f4 fdc4 	bl	80009f8 <__aeabi_dcmpgt>
 800be70:	2800      	cmp	r0, #0
 800be72:	d162      	bne.n	800bf3a <_dtoa_r+0x6e2>
 800be74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be78:	2000      	movs	r0, #0
 800be7a:	49ac      	ldr	r1, [pc, #688]	; (800c12c <_dtoa_r+0x8d4>)
 800be7c:	f7f4 f974 	bl	8000168 <__aeabi_dsub>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4630      	mov	r0, r6
 800be86:	4639      	mov	r1, r7
 800be88:	f7f4 fd98 	bl	80009bc <__aeabi_dcmplt>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	f43f af1d 	beq.w	800bccc <_dtoa_r+0x474>
 800be92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800be94:	1e7b      	subs	r3, r7, #1
 800be96:	9314      	str	r3, [sp, #80]	; 0x50
 800be98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800be9c:	2b30      	cmp	r3, #48	; 0x30
 800be9e:	d0f8      	beq.n	800be92 <_dtoa_r+0x63a>
 800bea0:	46c1      	mov	r9, r8
 800bea2:	e03a      	b.n	800bf1a <_dtoa_r+0x6c2>
 800bea4:	4ba2      	ldr	r3, [pc, #648]	; (800c130 <_dtoa_r+0x8d8>)
 800bea6:	f7f4 fb17 	bl	80004d8 <__aeabi_dmul>
 800beaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beae:	e7bc      	b.n	800be2a <_dtoa_r+0x5d2>
 800beb0:	9f08      	ldr	r7, [sp, #32]
 800beb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800beb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beba:	f7f4 fc37 	bl	800072c <__aeabi_ddiv>
 800bebe:	f7f4 fdbb 	bl	8000a38 <__aeabi_d2iz>
 800bec2:	4604      	mov	r4, r0
 800bec4:	f7f4 fa9e 	bl	8000404 <__aeabi_i2d>
 800bec8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800becc:	f7f4 fb04 	bl	80004d8 <__aeabi_dmul>
 800bed0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bed4:	460b      	mov	r3, r1
 800bed6:	4602      	mov	r2, r0
 800bed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bedc:	f7f4 f944 	bl	8000168 <__aeabi_dsub>
 800bee0:	f807 6b01 	strb.w	r6, [r7], #1
 800bee4:	9e08      	ldr	r6, [sp, #32]
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	1bbe      	subs	r6, r7, r6
 800beea:	42b3      	cmp	r3, r6
 800beec:	d13a      	bne.n	800bf64 <_dtoa_r+0x70c>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	f7f4 f93b 	bl	800016c <__adddf3>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800befe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf02:	f7f4 fd79 	bl	80009f8 <__aeabi_dcmpgt>
 800bf06:	bb58      	cbnz	r0, 800bf60 <_dtoa_r+0x708>
 800bf08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf10:	f7f4 fd4a 	bl	80009a8 <__aeabi_dcmpeq>
 800bf14:	b108      	cbz	r0, 800bf1a <_dtoa_r+0x6c2>
 800bf16:	07e1      	lsls	r1, r4, #31
 800bf18:	d422      	bmi.n	800bf60 <_dtoa_r+0x708>
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	4651      	mov	r1, sl
 800bf1e:	f000 faf1 	bl	800c504 <_Bfree>
 800bf22:	2300      	movs	r3, #0
 800bf24:	703b      	strb	r3, [r7, #0]
 800bf26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf28:	f109 0001 	add.w	r0, r9, #1
 800bf2c:	6018      	str	r0, [r3, #0]
 800bf2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f43f acdf 	beq.w	800b8f4 <_dtoa_r+0x9c>
 800bf36:	601f      	str	r7, [r3, #0]
 800bf38:	e4dc      	b.n	800b8f4 <_dtoa_r+0x9c>
 800bf3a:	4627      	mov	r7, r4
 800bf3c:	463b      	mov	r3, r7
 800bf3e:	461f      	mov	r7, r3
 800bf40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf44:	2a39      	cmp	r2, #57	; 0x39
 800bf46:	d107      	bne.n	800bf58 <_dtoa_r+0x700>
 800bf48:	9a08      	ldr	r2, [sp, #32]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d1f7      	bne.n	800bf3e <_dtoa_r+0x6e6>
 800bf4e:	2230      	movs	r2, #48	; 0x30
 800bf50:	9908      	ldr	r1, [sp, #32]
 800bf52:	f108 0801 	add.w	r8, r8, #1
 800bf56:	700a      	strb	r2, [r1, #0]
 800bf58:	781a      	ldrb	r2, [r3, #0]
 800bf5a:	3201      	adds	r2, #1
 800bf5c:	701a      	strb	r2, [r3, #0]
 800bf5e:	e79f      	b.n	800bea0 <_dtoa_r+0x648>
 800bf60:	46c8      	mov	r8, r9
 800bf62:	e7eb      	b.n	800bf3c <_dtoa_r+0x6e4>
 800bf64:	2200      	movs	r2, #0
 800bf66:	4b72      	ldr	r3, [pc, #456]	; (800c130 <_dtoa_r+0x8d8>)
 800bf68:	f7f4 fab6 	bl	80004d8 <__aeabi_dmul>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf74:	2200      	movs	r2, #0
 800bf76:	2300      	movs	r3, #0
 800bf78:	f7f4 fd16 	bl	80009a8 <__aeabi_dcmpeq>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d098      	beq.n	800beb2 <_dtoa_r+0x65a>
 800bf80:	e7cb      	b.n	800bf1a <_dtoa_r+0x6c2>
 800bf82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf84:	2a00      	cmp	r2, #0
 800bf86:	f000 80cd 	beq.w	800c124 <_dtoa_r+0x8cc>
 800bf8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bf8c:	2a01      	cmp	r2, #1
 800bf8e:	f300 80af 	bgt.w	800c0f0 <_dtoa_r+0x898>
 800bf92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf94:	2a00      	cmp	r2, #0
 800bf96:	f000 80a7 	beq.w	800c0e8 <_dtoa_r+0x890>
 800bf9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bfa0:	9f06      	ldr	r7, [sp, #24]
 800bfa2:	9a06      	ldr	r2, [sp, #24]
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	441a      	add	r2, r3
 800bfa8:	9206      	str	r2, [sp, #24]
 800bfaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfac:	4628      	mov	r0, r5
 800bfae:	441a      	add	r2, r3
 800bfb0:	9209      	str	r2, [sp, #36]	; 0x24
 800bfb2:	f000 fb61 	bl	800c678 <__i2b>
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	2f00      	cmp	r7, #0
 800bfba:	dd0c      	ble.n	800bfd6 <_dtoa_r+0x77e>
 800bfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dd09      	ble.n	800bfd6 <_dtoa_r+0x77e>
 800bfc2:	42bb      	cmp	r3, r7
 800bfc4:	bfa8      	it	ge
 800bfc6:	463b      	movge	r3, r7
 800bfc8:	9a06      	ldr	r2, [sp, #24]
 800bfca:	1aff      	subs	r7, r7, r3
 800bfcc:	1ad2      	subs	r2, r2, r3
 800bfce:	9206      	str	r2, [sp, #24]
 800bfd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd8:	b1f3      	cbz	r3, 800c018 <_dtoa_r+0x7c0>
 800bfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 80a9 	beq.w	800c134 <_dtoa_r+0x8dc>
 800bfe2:	2c00      	cmp	r4, #0
 800bfe4:	dd10      	ble.n	800c008 <_dtoa_r+0x7b0>
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	4622      	mov	r2, r4
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 fbfe 	bl	800c7ec <__pow5mult>
 800bff0:	4652      	mov	r2, sl
 800bff2:	4601      	mov	r1, r0
 800bff4:	4606      	mov	r6, r0
 800bff6:	4628      	mov	r0, r5
 800bff8:	f000 fb54 	bl	800c6a4 <__multiply>
 800bffc:	4680      	mov	r8, r0
 800bffe:	4651      	mov	r1, sl
 800c000:	4628      	mov	r0, r5
 800c002:	f000 fa7f 	bl	800c504 <_Bfree>
 800c006:	46c2      	mov	sl, r8
 800c008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c00a:	1b1a      	subs	r2, r3, r4
 800c00c:	d004      	beq.n	800c018 <_dtoa_r+0x7c0>
 800c00e:	4651      	mov	r1, sl
 800c010:	4628      	mov	r0, r5
 800c012:	f000 fbeb 	bl	800c7ec <__pow5mult>
 800c016:	4682      	mov	sl, r0
 800c018:	2101      	movs	r1, #1
 800c01a:	4628      	mov	r0, r5
 800c01c:	f000 fb2c 	bl	800c678 <__i2b>
 800c020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c022:	4604      	mov	r4, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	f340 8087 	ble.w	800c138 <_dtoa_r+0x8e0>
 800c02a:	461a      	mov	r2, r3
 800c02c:	4601      	mov	r1, r0
 800c02e:	4628      	mov	r0, r5
 800c030:	f000 fbdc 	bl	800c7ec <__pow5mult>
 800c034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c036:	4604      	mov	r4, r0
 800c038:	2b01      	cmp	r3, #1
 800c03a:	f340 8080 	ble.w	800c13e <_dtoa_r+0x8e6>
 800c03e:	f04f 0800 	mov.w	r8, #0
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c048:	6918      	ldr	r0, [r3, #16]
 800c04a:	f000 fac7 	bl	800c5dc <__hi0bits>
 800c04e:	f1c0 0020 	rsb	r0, r0, #32
 800c052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c054:	4418      	add	r0, r3
 800c056:	f010 001f 	ands.w	r0, r0, #31
 800c05a:	f000 8092 	beq.w	800c182 <_dtoa_r+0x92a>
 800c05e:	f1c0 0320 	rsb	r3, r0, #32
 800c062:	2b04      	cmp	r3, #4
 800c064:	f340 808a 	ble.w	800c17c <_dtoa_r+0x924>
 800c068:	f1c0 001c 	rsb	r0, r0, #28
 800c06c:	9b06      	ldr	r3, [sp, #24]
 800c06e:	4407      	add	r7, r0
 800c070:	4403      	add	r3, r0
 800c072:	9306      	str	r3, [sp, #24]
 800c074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c076:	4403      	add	r3, r0
 800c078:	9309      	str	r3, [sp, #36]	; 0x24
 800c07a:	9b06      	ldr	r3, [sp, #24]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	dd05      	ble.n	800c08c <_dtoa_r+0x834>
 800c080:	4651      	mov	r1, sl
 800c082:	461a      	mov	r2, r3
 800c084:	4628      	mov	r0, r5
 800c086:	f000 fc0b 	bl	800c8a0 <__lshift>
 800c08a:	4682      	mov	sl, r0
 800c08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c08e:	2b00      	cmp	r3, #0
 800c090:	dd05      	ble.n	800c09e <_dtoa_r+0x846>
 800c092:	4621      	mov	r1, r4
 800c094:	461a      	mov	r2, r3
 800c096:	4628      	mov	r0, r5
 800c098:	f000 fc02 	bl	800c8a0 <__lshift>
 800c09c:	4604      	mov	r4, r0
 800c09e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d070      	beq.n	800c186 <_dtoa_r+0x92e>
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	4650      	mov	r0, sl
 800c0a8:	f000 fc66 	bl	800c978 <__mcmp>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	da6a      	bge.n	800c186 <_dtoa_r+0x92e>
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	4651      	mov	r1, sl
 800c0b4:	220a      	movs	r2, #10
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f000 fa46 	bl	800c548 <__multadd>
 800c0bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0be:	4682      	mov	sl, r0
 800c0c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 8193 	beq.w	800c3f0 <_dtoa_r+0xb98>
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	220a      	movs	r2, #10
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	f000 fa39 	bl	800c548 <__multadd>
 800c0d6:	f1bb 0f00 	cmp.w	fp, #0
 800c0da:	4606      	mov	r6, r0
 800c0dc:	f300 8093 	bgt.w	800c206 <_dtoa_r+0x9ae>
 800c0e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	dc57      	bgt.n	800c196 <_dtoa_r+0x93e>
 800c0e6:	e08e      	b.n	800c206 <_dtoa_r+0x9ae>
 800c0e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c0ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0ee:	e756      	b.n	800bf9e <_dtoa_r+0x746>
 800c0f0:	9b02      	ldr	r3, [sp, #8]
 800c0f2:	1e5c      	subs	r4, r3, #1
 800c0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0f6:	42a3      	cmp	r3, r4
 800c0f8:	bfb7      	itett	lt
 800c0fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0fc:	1b1c      	subge	r4, r3, r4
 800c0fe:	1ae2      	sublt	r2, r4, r3
 800c100:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c102:	bfbe      	ittt	lt
 800c104:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c106:	189b      	addlt	r3, r3, r2
 800c108:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c10a:	9b02      	ldr	r3, [sp, #8]
 800c10c:	bfb8      	it	lt
 800c10e:	2400      	movlt	r4, #0
 800c110:	2b00      	cmp	r3, #0
 800c112:	bfbb      	ittet	lt
 800c114:	9b06      	ldrlt	r3, [sp, #24]
 800c116:	9a02      	ldrlt	r2, [sp, #8]
 800c118:	9f06      	ldrge	r7, [sp, #24]
 800c11a:	1a9f      	sublt	r7, r3, r2
 800c11c:	bfac      	ite	ge
 800c11e:	9b02      	ldrge	r3, [sp, #8]
 800c120:	2300      	movlt	r3, #0
 800c122:	e73e      	b.n	800bfa2 <_dtoa_r+0x74a>
 800c124:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c126:	9f06      	ldr	r7, [sp, #24]
 800c128:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c12a:	e745      	b.n	800bfb8 <_dtoa_r+0x760>
 800c12c:	3fe00000 	.word	0x3fe00000
 800c130:	40240000 	.word	0x40240000
 800c134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c136:	e76a      	b.n	800c00e <_dtoa_r+0x7b6>
 800c138:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	dc19      	bgt.n	800c172 <_dtoa_r+0x91a>
 800c13e:	9b04      	ldr	r3, [sp, #16]
 800c140:	b9bb      	cbnz	r3, 800c172 <_dtoa_r+0x91a>
 800c142:	9b05      	ldr	r3, [sp, #20]
 800c144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c148:	b99b      	cbnz	r3, 800c172 <_dtoa_r+0x91a>
 800c14a:	9b05      	ldr	r3, [sp, #20]
 800c14c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c150:	0d1b      	lsrs	r3, r3, #20
 800c152:	051b      	lsls	r3, r3, #20
 800c154:	b183      	cbz	r3, 800c178 <_dtoa_r+0x920>
 800c156:	f04f 0801 	mov.w	r8, #1
 800c15a:	9b06      	ldr	r3, [sp, #24]
 800c15c:	3301      	adds	r3, #1
 800c15e:	9306      	str	r3, [sp, #24]
 800c160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c162:	3301      	adds	r3, #1
 800c164:	9309      	str	r3, [sp, #36]	; 0x24
 800c166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f47f af6a 	bne.w	800c042 <_dtoa_r+0x7ea>
 800c16e:	2001      	movs	r0, #1
 800c170:	e76f      	b.n	800c052 <_dtoa_r+0x7fa>
 800c172:	f04f 0800 	mov.w	r8, #0
 800c176:	e7f6      	b.n	800c166 <_dtoa_r+0x90e>
 800c178:	4698      	mov	r8, r3
 800c17a:	e7f4      	b.n	800c166 <_dtoa_r+0x90e>
 800c17c:	f43f af7d 	beq.w	800c07a <_dtoa_r+0x822>
 800c180:	4618      	mov	r0, r3
 800c182:	301c      	adds	r0, #28
 800c184:	e772      	b.n	800c06c <_dtoa_r+0x814>
 800c186:	9b02      	ldr	r3, [sp, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	dc36      	bgt.n	800c1fa <_dtoa_r+0x9a2>
 800c18c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c18e:	2b02      	cmp	r3, #2
 800c190:	dd33      	ble.n	800c1fa <_dtoa_r+0x9a2>
 800c192:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c196:	f1bb 0f00 	cmp.w	fp, #0
 800c19a:	d10d      	bne.n	800c1b8 <_dtoa_r+0x960>
 800c19c:	4621      	mov	r1, r4
 800c19e:	465b      	mov	r3, fp
 800c1a0:	2205      	movs	r2, #5
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f000 f9d0 	bl	800c548 <__multadd>
 800c1a8:	4601      	mov	r1, r0
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	4650      	mov	r0, sl
 800c1ae:	f000 fbe3 	bl	800c978 <__mcmp>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	f73f adb6 	bgt.w	800bd24 <_dtoa_r+0x4cc>
 800c1b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c1ba:	9f08      	ldr	r7, [sp, #32]
 800c1bc:	ea6f 0903 	mvn.w	r9, r3
 800c1c0:	f04f 0800 	mov.w	r8, #0
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f000 f99c 	bl	800c504 <_Bfree>
 800c1cc:	2e00      	cmp	r6, #0
 800c1ce:	f43f aea4 	beq.w	800bf1a <_dtoa_r+0x6c2>
 800c1d2:	f1b8 0f00 	cmp.w	r8, #0
 800c1d6:	d005      	beq.n	800c1e4 <_dtoa_r+0x98c>
 800c1d8:	45b0      	cmp	r8, r6
 800c1da:	d003      	beq.n	800c1e4 <_dtoa_r+0x98c>
 800c1dc:	4641      	mov	r1, r8
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f000 f990 	bl	800c504 <_Bfree>
 800c1e4:	4631      	mov	r1, r6
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	f000 f98c 	bl	800c504 <_Bfree>
 800c1ec:	e695      	b.n	800bf1a <_dtoa_r+0x6c2>
 800c1ee:	2400      	movs	r4, #0
 800c1f0:	4626      	mov	r6, r4
 800c1f2:	e7e1      	b.n	800c1b8 <_dtoa_r+0x960>
 800c1f4:	46c1      	mov	r9, r8
 800c1f6:	4626      	mov	r6, r4
 800c1f8:	e594      	b.n	800bd24 <_dtoa_r+0x4cc>
 800c1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1fc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 80fc 	beq.w	800c3fe <_dtoa_r+0xba6>
 800c206:	2f00      	cmp	r7, #0
 800c208:	dd05      	ble.n	800c216 <_dtoa_r+0x9be>
 800c20a:	4631      	mov	r1, r6
 800c20c:	463a      	mov	r2, r7
 800c20e:	4628      	mov	r0, r5
 800c210:	f000 fb46 	bl	800c8a0 <__lshift>
 800c214:	4606      	mov	r6, r0
 800c216:	f1b8 0f00 	cmp.w	r8, #0
 800c21a:	d05c      	beq.n	800c2d6 <_dtoa_r+0xa7e>
 800c21c:	4628      	mov	r0, r5
 800c21e:	6871      	ldr	r1, [r6, #4]
 800c220:	f000 f930 	bl	800c484 <_Balloc>
 800c224:	4607      	mov	r7, r0
 800c226:	b928      	cbnz	r0, 800c234 <_dtoa_r+0x9dc>
 800c228:	4602      	mov	r2, r0
 800c22a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c22e:	4b7e      	ldr	r3, [pc, #504]	; (800c428 <_dtoa_r+0xbd0>)
 800c230:	f7ff bb26 	b.w	800b880 <_dtoa_r+0x28>
 800c234:	6932      	ldr	r2, [r6, #16]
 800c236:	f106 010c 	add.w	r1, r6, #12
 800c23a:	3202      	adds	r2, #2
 800c23c:	0092      	lsls	r2, r2, #2
 800c23e:	300c      	adds	r0, #12
 800c240:	f000 f912 	bl	800c468 <memcpy>
 800c244:	2201      	movs	r2, #1
 800c246:	4639      	mov	r1, r7
 800c248:	4628      	mov	r0, r5
 800c24a:	f000 fb29 	bl	800c8a0 <__lshift>
 800c24e:	46b0      	mov	r8, r6
 800c250:	4606      	mov	r6, r0
 800c252:	9b08      	ldr	r3, [sp, #32]
 800c254:	3301      	adds	r3, #1
 800c256:	9302      	str	r3, [sp, #8]
 800c258:	9b08      	ldr	r3, [sp, #32]
 800c25a:	445b      	add	r3, fp
 800c25c:	930a      	str	r3, [sp, #40]	; 0x28
 800c25e:	9b04      	ldr	r3, [sp, #16]
 800c260:	f003 0301 	and.w	r3, r3, #1
 800c264:	9309      	str	r3, [sp, #36]	; 0x24
 800c266:	9b02      	ldr	r3, [sp, #8]
 800c268:	4621      	mov	r1, r4
 800c26a:	4650      	mov	r0, sl
 800c26c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800c270:	f7ff fa62 	bl	800b738 <quorem>
 800c274:	4603      	mov	r3, r0
 800c276:	4641      	mov	r1, r8
 800c278:	3330      	adds	r3, #48	; 0x30
 800c27a:	9004      	str	r0, [sp, #16]
 800c27c:	4650      	mov	r0, sl
 800c27e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c280:	f000 fb7a 	bl	800c978 <__mcmp>
 800c284:	4632      	mov	r2, r6
 800c286:	9006      	str	r0, [sp, #24]
 800c288:	4621      	mov	r1, r4
 800c28a:	4628      	mov	r0, r5
 800c28c:	f000 fb90 	bl	800c9b0 <__mdiff>
 800c290:	68c2      	ldr	r2, [r0, #12]
 800c292:	4607      	mov	r7, r0
 800c294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c296:	bb02      	cbnz	r2, 800c2da <_dtoa_r+0xa82>
 800c298:	4601      	mov	r1, r0
 800c29a:	4650      	mov	r0, sl
 800c29c:	f000 fb6c 	bl	800c978 <__mcmp>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2a4:	4639      	mov	r1, r7
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c2ac:	f000 f92a 	bl	800c504 <_Bfree>
 800c2b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2b4:	9f02      	ldr	r7, [sp, #8]
 800c2b6:	ea43 0102 	orr.w	r1, r3, r2
 800c2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c0:	d10d      	bne.n	800c2de <_dtoa_r+0xa86>
 800c2c2:	2b39      	cmp	r3, #57	; 0x39
 800c2c4:	d027      	beq.n	800c316 <_dtoa_r+0xabe>
 800c2c6:	9a06      	ldr	r2, [sp, #24]
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	dd01      	ble.n	800c2d0 <_dtoa_r+0xa78>
 800c2cc:	9b04      	ldr	r3, [sp, #16]
 800c2ce:	3331      	adds	r3, #49	; 0x31
 800c2d0:	f88b 3000 	strb.w	r3, [fp]
 800c2d4:	e776      	b.n	800c1c4 <_dtoa_r+0x96c>
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	e7b9      	b.n	800c24e <_dtoa_r+0x9f6>
 800c2da:	2201      	movs	r2, #1
 800c2dc:	e7e2      	b.n	800c2a4 <_dtoa_r+0xa4c>
 800c2de:	9906      	ldr	r1, [sp, #24]
 800c2e0:	2900      	cmp	r1, #0
 800c2e2:	db04      	blt.n	800c2ee <_dtoa_r+0xa96>
 800c2e4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c2e6:	4301      	orrs	r1, r0
 800c2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ea:	4301      	orrs	r1, r0
 800c2ec:	d120      	bne.n	800c330 <_dtoa_r+0xad8>
 800c2ee:	2a00      	cmp	r2, #0
 800c2f0:	ddee      	ble.n	800c2d0 <_dtoa_r+0xa78>
 800c2f2:	4651      	mov	r1, sl
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	9302      	str	r3, [sp, #8]
 800c2fa:	f000 fad1 	bl	800c8a0 <__lshift>
 800c2fe:	4621      	mov	r1, r4
 800c300:	4682      	mov	sl, r0
 800c302:	f000 fb39 	bl	800c978 <__mcmp>
 800c306:	2800      	cmp	r0, #0
 800c308:	9b02      	ldr	r3, [sp, #8]
 800c30a:	dc02      	bgt.n	800c312 <_dtoa_r+0xaba>
 800c30c:	d1e0      	bne.n	800c2d0 <_dtoa_r+0xa78>
 800c30e:	07da      	lsls	r2, r3, #31
 800c310:	d5de      	bpl.n	800c2d0 <_dtoa_r+0xa78>
 800c312:	2b39      	cmp	r3, #57	; 0x39
 800c314:	d1da      	bne.n	800c2cc <_dtoa_r+0xa74>
 800c316:	2339      	movs	r3, #57	; 0x39
 800c318:	f88b 3000 	strb.w	r3, [fp]
 800c31c:	463b      	mov	r3, r7
 800c31e:	461f      	mov	r7, r3
 800c320:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c324:	3b01      	subs	r3, #1
 800c326:	2a39      	cmp	r2, #57	; 0x39
 800c328:	d050      	beq.n	800c3cc <_dtoa_r+0xb74>
 800c32a:	3201      	adds	r2, #1
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	e749      	b.n	800c1c4 <_dtoa_r+0x96c>
 800c330:	2a00      	cmp	r2, #0
 800c332:	dd03      	ble.n	800c33c <_dtoa_r+0xae4>
 800c334:	2b39      	cmp	r3, #57	; 0x39
 800c336:	d0ee      	beq.n	800c316 <_dtoa_r+0xabe>
 800c338:	3301      	adds	r3, #1
 800c33a:	e7c9      	b.n	800c2d0 <_dtoa_r+0xa78>
 800c33c:	9a02      	ldr	r2, [sp, #8]
 800c33e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c340:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c344:	428a      	cmp	r2, r1
 800c346:	d02a      	beq.n	800c39e <_dtoa_r+0xb46>
 800c348:	4651      	mov	r1, sl
 800c34a:	2300      	movs	r3, #0
 800c34c:	220a      	movs	r2, #10
 800c34e:	4628      	mov	r0, r5
 800c350:	f000 f8fa 	bl	800c548 <__multadd>
 800c354:	45b0      	cmp	r8, r6
 800c356:	4682      	mov	sl, r0
 800c358:	f04f 0300 	mov.w	r3, #0
 800c35c:	f04f 020a 	mov.w	r2, #10
 800c360:	4641      	mov	r1, r8
 800c362:	4628      	mov	r0, r5
 800c364:	d107      	bne.n	800c376 <_dtoa_r+0xb1e>
 800c366:	f000 f8ef 	bl	800c548 <__multadd>
 800c36a:	4680      	mov	r8, r0
 800c36c:	4606      	mov	r6, r0
 800c36e:	9b02      	ldr	r3, [sp, #8]
 800c370:	3301      	adds	r3, #1
 800c372:	9302      	str	r3, [sp, #8]
 800c374:	e777      	b.n	800c266 <_dtoa_r+0xa0e>
 800c376:	f000 f8e7 	bl	800c548 <__multadd>
 800c37a:	4631      	mov	r1, r6
 800c37c:	4680      	mov	r8, r0
 800c37e:	2300      	movs	r3, #0
 800c380:	220a      	movs	r2, #10
 800c382:	4628      	mov	r0, r5
 800c384:	f000 f8e0 	bl	800c548 <__multadd>
 800c388:	4606      	mov	r6, r0
 800c38a:	e7f0      	b.n	800c36e <_dtoa_r+0xb16>
 800c38c:	f1bb 0f00 	cmp.w	fp, #0
 800c390:	bfcc      	ite	gt
 800c392:	465f      	movgt	r7, fp
 800c394:	2701      	movle	r7, #1
 800c396:	f04f 0800 	mov.w	r8, #0
 800c39a:	9a08      	ldr	r2, [sp, #32]
 800c39c:	4417      	add	r7, r2
 800c39e:	4651      	mov	r1, sl
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	9302      	str	r3, [sp, #8]
 800c3a6:	f000 fa7b 	bl	800c8a0 <__lshift>
 800c3aa:	4621      	mov	r1, r4
 800c3ac:	4682      	mov	sl, r0
 800c3ae:	f000 fae3 	bl	800c978 <__mcmp>
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	dcb2      	bgt.n	800c31c <_dtoa_r+0xac4>
 800c3b6:	d102      	bne.n	800c3be <_dtoa_r+0xb66>
 800c3b8:	9b02      	ldr	r3, [sp, #8]
 800c3ba:	07db      	lsls	r3, r3, #31
 800c3bc:	d4ae      	bmi.n	800c31c <_dtoa_r+0xac4>
 800c3be:	463b      	mov	r3, r7
 800c3c0:	461f      	mov	r7, r3
 800c3c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3c6:	2a30      	cmp	r2, #48	; 0x30
 800c3c8:	d0fa      	beq.n	800c3c0 <_dtoa_r+0xb68>
 800c3ca:	e6fb      	b.n	800c1c4 <_dtoa_r+0x96c>
 800c3cc:	9a08      	ldr	r2, [sp, #32]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d1a5      	bne.n	800c31e <_dtoa_r+0xac6>
 800c3d2:	2331      	movs	r3, #49	; 0x31
 800c3d4:	f109 0901 	add.w	r9, r9, #1
 800c3d8:	7013      	strb	r3, [r2, #0]
 800c3da:	e6f3      	b.n	800c1c4 <_dtoa_r+0x96c>
 800c3dc:	4b13      	ldr	r3, [pc, #76]	; (800c42c <_dtoa_r+0xbd4>)
 800c3de:	f7ff baa7 	b.w	800b930 <_dtoa_r+0xd8>
 800c3e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f47f aa80 	bne.w	800b8ea <_dtoa_r+0x92>
 800c3ea:	4b11      	ldr	r3, [pc, #68]	; (800c430 <_dtoa_r+0xbd8>)
 800c3ec:	f7ff baa0 	b.w	800b930 <_dtoa_r+0xd8>
 800c3f0:	f1bb 0f00 	cmp.w	fp, #0
 800c3f4:	dc03      	bgt.n	800c3fe <_dtoa_r+0xba6>
 800c3f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	f73f aecc 	bgt.w	800c196 <_dtoa_r+0x93e>
 800c3fe:	9f08      	ldr	r7, [sp, #32]
 800c400:	4621      	mov	r1, r4
 800c402:	4650      	mov	r0, sl
 800c404:	f7ff f998 	bl	800b738 <quorem>
 800c408:	9a08      	ldr	r2, [sp, #32]
 800c40a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c40e:	f807 3b01 	strb.w	r3, [r7], #1
 800c412:	1aba      	subs	r2, r7, r2
 800c414:	4593      	cmp	fp, r2
 800c416:	ddb9      	ble.n	800c38c <_dtoa_r+0xb34>
 800c418:	4651      	mov	r1, sl
 800c41a:	2300      	movs	r3, #0
 800c41c:	220a      	movs	r2, #10
 800c41e:	4628      	mov	r0, r5
 800c420:	f000 f892 	bl	800c548 <__multadd>
 800c424:	4682      	mov	sl, r0
 800c426:	e7eb      	b.n	800c400 <_dtoa_r+0xba8>
 800c428:	0800f3fb 	.word	0x0800f3fb
 800c42c:	0800f354 	.word	0x0800f354
 800c430:	0800f378 	.word	0x0800f378

0800c434 <_localeconv_r>:
 800c434:	4800      	ldr	r0, [pc, #0]	; (800c438 <_localeconv_r+0x4>)
 800c436:	4770      	bx	lr
 800c438:	200002c4 	.word	0x200002c4

0800c43c <malloc>:
 800c43c:	4b02      	ldr	r3, [pc, #8]	; (800c448 <malloc+0xc>)
 800c43e:	4601      	mov	r1, r0
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	f000 bbfb 	b.w	800cc3c <_malloc_r>
 800c446:	bf00      	nop
 800c448:	20000170 	.word	0x20000170

0800c44c <memchr>:
 800c44c:	4603      	mov	r3, r0
 800c44e:	b510      	push	{r4, lr}
 800c450:	b2c9      	uxtb	r1, r1
 800c452:	4402      	add	r2, r0
 800c454:	4293      	cmp	r3, r2
 800c456:	4618      	mov	r0, r3
 800c458:	d101      	bne.n	800c45e <memchr+0x12>
 800c45a:	2000      	movs	r0, #0
 800c45c:	e003      	b.n	800c466 <memchr+0x1a>
 800c45e:	7804      	ldrb	r4, [r0, #0]
 800c460:	3301      	adds	r3, #1
 800c462:	428c      	cmp	r4, r1
 800c464:	d1f6      	bne.n	800c454 <memchr+0x8>
 800c466:	bd10      	pop	{r4, pc}

0800c468 <memcpy>:
 800c468:	440a      	add	r2, r1
 800c46a:	4291      	cmp	r1, r2
 800c46c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c470:	d100      	bne.n	800c474 <memcpy+0xc>
 800c472:	4770      	bx	lr
 800c474:	b510      	push	{r4, lr}
 800c476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c47a:	4291      	cmp	r1, r2
 800c47c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c480:	d1f9      	bne.n	800c476 <memcpy+0xe>
 800c482:	bd10      	pop	{r4, pc}

0800c484 <_Balloc>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c488:	4604      	mov	r4, r0
 800c48a:	460d      	mov	r5, r1
 800c48c:	b976      	cbnz	r6, 800c4ac <_Balloc+0x28>
 800c48e:	2010      	movs	r0, #16
 800c490:	f7ff ffd4 	bl	800c43c <malloc>
 800c494:	4602      	mov	r2, r0
 800c496:	6260      	str	r0, [r4, #36]	; 0x24
 800c498:	b920      	cbnz	r0, 800c4a4 <_Balloc+0x20>
 800c49a:	2166      	movs	r1, #102	; 0x66
 800c49c:	4b17      	ldr	r3, [pc, #92]	; (800c4fc <_Balloc+0x78>)
 800c49e:	4818      	ldr	r0, [pc, #96]	; (800c500 <_Balloc+0x7c>)
 800c4a0:	f000 fd92 	bl	800cfc8 <__assert_func>
 800c4a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4a8:	6006      	str	r6, [r0, #0]
 800c4aa:	60c6      	str	r6, [r0, #12]
 800c4ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4ae:	68f3      	ldr	r3, [r6, #12]
 800c4b0:	b183      	cbz	r3, 800c4d4 <_Balloc+0x50>
 800c4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ba:	b9b8      	cbnz	r0, 800c4ec <_Balloc+0x68>
 800c4bc:	2101      	movs	r1, #1
 800c4be:	fa01 f605 	lsl.w	r6, r1, r5
 800c4c2:	1d72      	adds	r2, r6, #5
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	0092      	lsls	r2, r2, #2
 800c4c8:	f000 fb5e 	bl	800cb88 <_calloc_r>
 800c4cc:	b160      	cbz	r0, 800c4e8 <_Balloc+0x64>
 800c4ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4d2:	e00e      	b.n	800c4f2 <_Balloc+0x6e>
 800c4d4:	2221      	movs	r2, #33	; 0x21
 800c4d6:	2104      	movs	r1, #4
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 fb55 	bl	800cb88 <_calloc_r>
 800c4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4e0:	60f0      	str	r0, [r6, #12]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1e4      	bne.n	800c4b2 <_Balloc+0x2e>
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	bd70      	pop	{r4, r5, r6, pc}
 800c4ec:	6802      	ldr	r2, [r0, #0]
 800c4ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4f8:	e7f7      	b.n	800c4ea <_Balloc+0x66>
 800c4fa:	bf00      	nop
 800c4fc:	0800f385 	.word	0x0800f385
 800c500:	0800f40c 	.word	0x0800f40c

0800c504 <_Bfree>:
 800c504:	b570      	push	{r4, r5, r6, lr}
 800c506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c508:	4605      	mov	r5, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	b976      	cbnz	r6, 800c52c <_Bfree+0x28>
 800c50e:	2010      	movs	r0, #16
 800c510:	f7ff ff94 	bl	800c43c <malloc>
 800c514:	4602      	mov	r2, r0
 800c516:	6268      	str	r0, [r5, #36]	; 0x24
 800c518:	b920      	cbnz	r0, 800c524 <_Bfree+0x20>
 800c51a:	218a      	movs	r1, #138	; 0x8a
 800c51c:	4b08      	ldr	r3, [pc, #32]	; (800c540 <_Bfree+0x3c>)
 800c51e:	4809      	ldr	r0, [pc, #36]	; (800c544 <_Bfree+0x40>)
 800c520:	f000 fd52 	bl	800cfc8 <__assert_func>
 800c524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c528:	6006      	str	r6, [r0, #0]
 800c52a:	60c6      	str	r6, [r0, #12]
 800c52c:	b13c      	cbz	r4, 800c53e <_Bfree+0x3a>
 800c52e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c530:	6862      	ldr	r2, [r4, #4]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c538:	6021      	str	r1, [r4, #0]
 800c53a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c53e:	bd70      	pop	{r4, r5, r6, pc}
 800c540:	0800f385 	.word	0x0800f385
 800c544:	0800f40c 	.word	0x0800f40c

0800c548 <__multadd>:
 800c548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54c:	4698      	mov	r8, r3
 800c54e:	460c      	mov	r4, r1
 800c550:	2300      	movs	r3, #0
 800c552:	690e      	ldr	r6, [r1, #16]
 800c554:	4607      	mov	r7, r0
 800c556:	f101 0014 	add.w	r0, r1, #20
 800c55a:	6805      	ldr	r5, [r0, #0]
 800c55c:	3301      	adds	r3, #1
 800c55e:	b2a9      	uxth	r1, r5
 800c560:	fb02 8101 	mla	r1, r2, r1, r8
 800c564:	0c2d      	lsrs	r5, r5, #16
 800c566:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c56a:	fb02 c505 	mla	r5, r2, r5, ip
 800c56e:	b289      	uxth	r1, r1
 800c570:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c574:	429e      	cmp	r6, r3
 800c576:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c57a:	f840 1b04 	str.w	r1, [r0], #4
 800c57e:	dcec      	bgt.n	800c55a <__multadd+0x12>
 800c580:	f1b8 0f00 	cmp.w	r8, #0
 800c584:	d022      	beq.n	800c5cc <__multadd+0x84>
 800c586:	68a3      	ldr	r3, [r4, #8]
 800c588:	42b3      	cmp	r3, r6
 800c58a:	dc19      	bgt.n	800c5c0 <__multadd+0x78>
 800c58c:	6861      	ldr	r1, [r4, #4]
 800c58e:	4638      	mov	r0, r7
 800c590:	3101      	adds	r1, #1
 800c592:	f7ff ff77 	bl	800c484 <_Balloc>
 800c596:	4605      	mov	r5, r0
 800c598:	b928      	cbnz	r0, 800c5a6 <__multadd+0x5e>
 800c59a:	4602      	mov	r2, r0
 800c59c:	21b5      	movs	r1, #181	; 0xb5
 800c59e:	4b0d      	ldr	r3, [pc, #52]	; (800c5d4 <__multadd+0x8c>)
 800c5a0:	480d      	ldr	r0, [pc, #52]	; (800c5d8 <__multadd+0x90>)
 800c5a2:	f000 fd11 	bl	800cfc8 <__assert_func>
 800c5a6:	6922      	ldr	r2, [r4, #16]
 800c5a8:	f104 010c 	add.w	r1, r4, #12
 800c5ac:	3202      	adds	r2, #2
 800c5ae:	0092      	lsls	r2, r2, #2
 800c5b0:	300c      	adds	r0, #12
 800c5b2:	f7ff ff59 	bl	800c468 <memcpy>
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	4638      	mov	r0, r7
 800c5ba:	f7ff ffa3 	bl	800c504 <_Bfree>
 800c5be:	462c      	mov	r4, r5
 800c5c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c5c4:	3601      	adds	r6, #1
 800c5c6:	f8c3 8014 	str.w	r8, [r3, #20]
 800c5ca:	6126      	str	r6, [r4, #16]
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d2:	bf00      	nop
 800c5d4:	0800f3fb 	.word	0x0800f3fb
 800c5d8:	0800f40c 	.word	0x0800f40c

0800c5dc <__hi0bits>:
 800c5dc:	0c02      	lsrs	r2, r0, #16
 800c5de:	0412      	lsls	r2, r2, #16
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	b9ca      	cbnz	r2, 800c618 <__hi0bits+0x3c>
 800c5e4:	0403      	lsls	r3, r0, #16
 800c5e6:	2010      	movs	r0, #16
 800c5e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c5ec:	bf04      	itt	eq
 800c5ee:	021b      	lsleq	r3, r3, #8
 800c5f0:	3008      	addeq	r0, #8
 800c5f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c5f6:	bf04      	itt	eq
 800c5f8:	011b      	lsleq	r3, r3, #4
 800c5fa:	3004      	addeq	r0, #4
 800c5fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c600:	bf04      	itt	eq
 800c602:	009b      	lsleq	r3, r3, #2
 800c604:	3002      	addeq	r0, #2
 800c606:	2b00      	cmp	r3, #0
 800c608:	db05      	blt.n	800c616 <__hi0bits+0x3a>
 800c60a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c60e:	f100 0001 	add.w	r0, r0, #1
 800c612:	bf08      	it	eq
 800c614:	2020      	moveq	r0, #32
 800c616:	4770      	bx	lr
 800c618:	2000      	movs	r0, #0
 800c61a:	e7e5      	b.n	800c5e8 <__hi0bits+0xc>

0800c61c <__lo0bits>:
 800c61c:	6803      	ldr	r3, [r0, #0]
 800c61e:	4602      	mov	r2, r0
 800c620:	f013 0007 	ands.w	r0, r3, #7
 800c624:	d00b      	beq.n	800c63e <__lo0bits+0x22>
 800c626:	07d9      	lsls	r1, r3, #31
 800c628:	d422      	bmi.n	800c670 <__lo0bits+0x54>
 800c62a:	0798      	lsls	r0, r3, #30
 800c62c:	bf49      	itett	mi
 800c62e:	085b      	lsrmi	r3, r3, #1
 800c630:	089b      	lsrpl	r3, r3, #2
 800c632:	2001      	movmi	r0, #1
 800c634:	6013      	strmi	r3, [r2, #0]
 800c636:	bf5c      	itt	pl
 800c638:	2002      	movpl	r0, #2
 800c63a:	6013      	strpl	r3, [r2, #0]
 800c63c:	4770      	bx	lr
 800c63e:	b299      	uxth	r1, r3
 800c640:	b909      	cbnz	r1, 800c646 <__lo0bits+0x2a>
 800c642:	2010      	movs	r0, #16
 800c644:	0c1b      	lsrs	r3, r3, #16
 800c646:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c64a:	bf04      	itt	eq
 800c64c:	0a1b      	lsreq	r3, r3, #8
 800c64e:	3008      	addeq	r0, #8
 800c650:	0719      	lsls	r1, r3, #28
 800c652:	bf04      	itt	eq
 800c654:	091b      	lsreq	r3, r3, #4
 800c656:	3004      	addeq	r0, #4
 800c658:	0799      	lsls	r1, r3, #30
 800c65a:	bf04      	itt	eq
 800c65c:	089b      	lsreq	r3, r3, #2
 800c65e:	3002      	addeq	r0, #2
 800c660:	07d9      	lsls	r1, r3, #31
 800c662:	d403      	bmi.n	800c66c <__lo0bits+0x50>
 800c664:	085b      	lsrs	r3, r3, #1
 800c666:	f100 0001 	add.w	r0, r0, #1
 800c66a:	d003      	beq.n	800c674 <__lo0bits+0x58>
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	4770      	bx	lr
 800c670:	2000      	movs	r0, #0
 800c672:	4770      	bx	lr
 800c674:	2020      	movs	r0, #32
 800c676:	4770      	bx	lr

0800c678 <__i2b>:
 800c678:	b510      	push	{r4, lr}
 800c67a:	460c      	mov	r4, r1
 800c67c:	2101      	movs	r1, #1
 800c67e:	f7ff ff01 	bl	800c484 <_Balloc>
 800c682:	4602      	mov	r2, r0
 800c684:	b928      	cbnz	r0, 800c692 <__i2b+0x1a>
 800c686:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c68a:	4b04      	ldr	r3, [pc, #16]	; (800c69c <__i2b+0x24>)
 800c68c:	4804      	ldr	r0, [pc, #16]	; (800c6a0 <__i2b+0x28>)
 800c68e:	f000 fc9b 	bl	800cfc8 <__assert_func>
 800c692:	2301      	movs	r3, #1
 800c694:	6144      	str	r4, [r0, #20]
 800c696:	6103      	str	r3, [r0, #16]
 800c698:	bd10      	pop	{r4, pc}
 800c69a:	bf00      	nop
 800c69c:	0800f3fb 	.word	0x0800f3fb
 800c6a0:	0800f40c 	.word	0x0800f40c

0800c6a4 <__multiply>:
 800c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	690a      	ldr	r2, [r1, #16]
 800c6ac:	6923      	ldr	r3, [r4, #16]
 800c6ae:	460d      	mov	r5, r1
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	bfbe      	ittt	lt
 800c6b4:	460b      	movlt	r3, r1
 800c6b6:	4625      	movlt	r5, r4
 800c6b8:	461c      	movlt	r4, r3
 800c6ba:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c6be:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c6c2:	68ab      	ldr	r3, [r5, #8]
 800c6c4:	6869      	ldr	r1, [r5, #4]
 800c6c6:	eb0a 0709 	add.w	r7, sl, r9
 800c6ca:	42bb      	cmp	r3, r7
 800c6cc:	b085      	sub	sp, #20
 800c6ce:	bfb8      	it	lt
 800c6d0:	3101      	addlt	r1, #1
 800c6d2:	f7ff fed7 	bl	800c484 <_Balloc>
 800c6d6:	b930      	cbnz	r0, 800c6e6 <__multiply+0x42>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	f240 115d 	movw	r1, #349	; 0x15d
 800c6de:	4b41      	ldr	r3, [pc, #260]	; (800c7e4 <__multiply+0x140>)
 800c6e0:	4841      	ldr	r0, [pc, #260]	; (800c7e8 <__multiply+0x144>)
 800c6e2:	f000 fc71 	bl	800cfc8 <__assert_func>
 800c6e6:	f100 0614 	add.w	r6, r0, #20
 800c6ea:	4633      	mov	r3, r6
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c6f2:	4543      	cmp	r3, r8
 800c6f4:	d31e      	bcc.n	800c734 <__multiply+0x90>
 800c6f6:	f105 0c14 	add.w	ip, r5, #20
 800c6fa:	f104 0314 	add.w	r3, r4, #20
 800c6fe:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c702:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c706:	9202      	str	r2, [sp, #8]
 800c708:	ebac 0205 	sub.w	r2, ip, r5
 800c70c:	3a15      	subs	r2, #21
 800c70e:	f022 0203 	bic.w	r2, r2, #3
 800c712:	3204      	adds	r2, #4
 800c714:	f105 0115 	add.w	r1, r5, #21
 800c718:	458c      	cmp	ip, r1
 800c71a:	bf38      	it	cc
 800c71c:	2204      	movcc	r2, #4
 800c71e:	9201      	str	r2, [sp, #4]
 800c720:	9a02      	ldr	r2, [sp, #8]
 800c722:	9303      	str	r3, [sp, #12]
 800c724:	429a      	cmp	r2, r3
 800c726:	d808      	bhi.n	800c73a <__multiply+0x96>
 800c728:	2f00      	cmp	r7, #0
 800c72a:	dc55      	bgt.n	800c7d8 <__multiply+0x134>
 800c72c:	6107      	str	r7, [r0, #16]
 800c72e:	b005      	add	sp, #20
 800c730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c734:	f843 2b04 	str.w	r2, [r3], #4
 800c738:	e7db      	b.n	800c6f2 <__multiply+0x4e>
 800c73a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c73e:	f1ba 0f00 	cmp.w	sl, #0
 800c742:	d020      	beq.n	800c786 <__multiply+0xe2>
 800c744:	46b1      	mov	r9, r6
 800c746:	2200      	movs	r2, #0
 800c748:	f105 0e14 	add.w	lr, r5, #20
 800c74c:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c750:	f8d9 b000 	ldr.w	fp, [r9]
 800c754:	b2a1      	uxth	r1, r4
 800c756:	fa1f fb8b 	uxth.w	fp, fp
 800c75a:	fb0a b101 	mla	r1, sl, r1, fp
 800c75e:	4411      	add	r1, r2
 800c760:	f8d9 2000 	ldr.w	r2, [r9]
 800c764:	0c24      	lsrs	r4, r4, #16
 800c766:	0c12      	lsrs	r2, r2, #16
 800c768:	fb0a 2404 	mla	r4, sl, r4, r2
 800c76c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c770:	b289      	uxth	r1, r1
 800c772:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c776:	45f4      	cmp	ip, lr
 800c778:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c77c:	f849 1b04 	str.w	r1, [r9], #4
 800c780:	d8e4      	bhi.n	800c74c <__multiply+0xa8>
 800c782:	9901      	ldr	r1, [sp, #4]
 800c784:	5072      	str	r2, [r6, r1]
 800c786:	9a03      	ldr	r2, [sp, #12]
 800c788:	3304      	adds	r3, #4
 800c78a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c78e:	f1b9 0f00 	cmp.w	r9, #0
 800c792:	d01f      	beq.n	800c7d4 <__multiply+0x130>
 800c794:	46b6      	mov	lr, r6
 800c796:	f04f 0a00 	mov.w	sl, #0
 800c79a:	6834      	ldr	r4, [r6, #0]
 800c79c:	f105 0114 	add.w	r1, r5, #20
 800c7a0:	880a      	ldrh	r2, [r1, #0]
 800c7a2:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c7a6:	b2a4      	uxth	r4, r4
 800c7a8:	fb09 b202 	mla	r2, r9, r2, fp
 800c7ac:	4492      	add	sl, r2
 800c7ae:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c7b2:	f84e 4b04 	str.w	r4, [lr], #4
 800c7b6:	f851 4b04 	ldr.w	r4, [r1], #4
 800c7ba:	f8be 2000 	ldrh.w	r2, [lr]
 800c7be:	0c24      	lsrs	r4, r4, #16
 800c7c0:	fb09 2404 	mla	r4, r9, r4, r2
 800c7c4:	458c      	cmp	ip, r1
 800c7c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c7ca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c7ce:	d8e7      	bhi.n	800c7a0 <__multiply+0xfc>
 800c7d0:	9a01      	ldr	r2, [sp, #4]
 800c7d2:	50b4      	str	r4, [r6, r2]
 800c7d4:	3604      	adds	r6, #4
 800c7d6:	e7a3      	b.n	800c720 <__multiply+0x7c>
 800c7d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1a5      	bne.n	800c72c <__multiply+0x88>
 800c7e0:	3f01      	subs	r7, #1
 800c7e2:	e7a1      	b.n	800c728 <__multiply+0x84>
 800c7e4:	0800f3fb 	.word	0x0800f3fb
 800c7e8:	0800f40c 	.word	0x0800f40c

0800c7ec <__pow5mult>:
 800c7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f0:	4615      	mov	r5, r2
 800c7f2:	f012 0203 	ands.w	r2, r2, #3
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	460f      	mov	r7, r1
 800c7fa:	d007      	beq.n	800c80c <__pow5mult+0x20>
 800c7fc:	4c25      	ldr	r4, [pc, #148]	; (800c894 <__pow5mult+0xa8>)
 800c7fe:	3a01      	subs	r2, #1
 800c800:	2300      	movs	r3, #0
 800c802:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c806:	f7ff fe9f 	bl	800c548 <__multadd>
 800c80a:	4607      	mov	r7, r0
 800c80c:	10ad      	asrs	r5, r5, #2
 800c80e:	d03d      	beq.n	800c88c <__pow5mult+0xa0>
 800c810:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c812:	b97c      	cbnz	r4, 800c834 <__pow5mult+0x48>
 800c814:	2010      	movs	r0, #16
 800c816:	f7ff fe11 	bl	800c43c <malloc>
 800c81a:	4602      	mov	r2, r0
 800c81c:	6270      	str	r0, [r6, #36]	; 0x24
 800c81e:	b928      	cbnz	r0, 800c82c <__pow5mult+0x40>
 800c820:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c824:	4b1c      	ldr	r3, [pc, #112]	; (800c898 <__pow5mult+0xac>)
 800c826:	481d      	ldr	r0, [pc, #116]	; (800c89c <__pow5mult+0xb0>)
 800c828:	f000 fbce 	bl	800cfc8 <__assert_func>
 800c82c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c830:	6004      	str	r4, [r0, #0]
 800c832:	60c4      	str	r4, [r0, #12]
 800c834:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c838:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c83c:	b94c      	cbnz	r4, 800c852 <__pow5mult+0x66>
 800c83e:	f240 2171 	movw	r1, #625	; 0x271
 800c842:	4630      	mov	r0, r6
 800c844:	f7ff ff18 	bl	800c678 <__i2b>
 800c848:	2300      	movs	r3, #0
 800c84a:	4604      	mov	r4, r0
 800c84c:	f8c8 0008 	str.w	r0, [r8, #8]
 800c850:	6003      	str	r3, [r0, #0]
 800c852:	f04f 0900 	mov.w	r9, #0
 800c856:	07eb      	lsls	r3, r5, #31
 800c858:	d50a      	bpl.n	800c870 <__pow5mult+0x84>
 800c85a:	4639      	mov	r1, r7
 800c85c:	4622      	mov	r2, r4
 800c85e:	4630      	mov	r0, r6
 800c860:	f7ff ff20 	bl	800c6a4 <__multiply>
 800c864:	4680      	mov	r8, r0
 800c866:	4639      	mov	r1, r7
 800c868:	4630      	mov	r0, r6
 800c86a:	f7ff fe4b 	bl	800c504 <_Bfree>
 800c86e:	4647      	mov	r7, r8
 800c870:	106d      	asrs	r5, r5, #1
 800c872:	d00b      	beq.n	800c88c <__pow5mult+0xa0>
 800c874:	6820      	ldr	r0, [r4, #0]
 800c876:	b938      	cbnz	r0, 800c888 <__pow5mult+0x9c>
 800c878:	4622      	mov	r2, r4
 800c87a:	4621      	mov	r1, r4
 800c87c:	4630      	mov	r0, r6
 800c87e:	f7ff ff11 	bl	800c6a4 <__multiply>
 800c882:	6020      	str	r0, [r4, #0]
 800c884:	f8c0 9000 	str.w	r9, [r0]
 800c888:	4604      	mov	r4, r0
 800c88a:	e7e4      	b.n	800c856 <__pow5mult+0x6a>
 800c88c:	4638      	mov	r0, r7
 800c88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c892:	bf00      	nop
 800c894:	0800f560 	.word	0x0800f560
 800c898:	0800f385 	.word	0x0800f385
 800c89c:	0800f40c 	.word	0x0800f40c

0800c8a0 <__lshift>:
 800c8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	4607      	mov	r7, r0
 800c8a8:	4691      	mov	r9, r2
 800c8aa:	6923      	ldr	r3, [r4, #16]
 800c8ac:	6849      	ldr	r1, [r1, #4]
 800c8ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8b2:	68a3      	ldr	r3, [r4, #8]
 800c8b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8b8:	f108 0601 	add.w	r6, r8, #1
 800c8bc:	42b3      	cmp	r3, r6
 800c8be:	db0b      	blt.n	800c8d8 <__lshift+0x38>
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	f7ff fddf 	bl	800c484 <_Balloc>
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	b948      	cbnz	r0, 800c8de <__lshift+0x3e>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8d0:	4b27      	ldr	r3, [pc, #156]	; (800c970 <__lshift+0xd0>)
 800c8d2:	4828      	ldr	r0, [pc, #160]	; (800c974 <__lshift+0xd4>)
 800c8d4:	f000 fb78 	bl	800cfc8 <__assert_func>
 800c8d8:	3101      	adds	r1, #1
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	e7ee      	b.n	800c8bc <__lshift+0x1c>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	f100 0114 	add.w	r1, r0, #20
 800c8e4:	f100 0210 	add.w	r2, r0, #16
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	4553      	cmp	r3, sl
 800c8ec:	db33      	blt.n	800c956 <__lshift+0xb6>
 800c8ee:	6920      	ldr	r0, [r4, #16]
 800c8f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8f4:	f104 0314 	add.w	r3, r4, #20
 800c8f8:	f019 091f 	ands.w	r9, r9, #31
 800c8fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c900:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c904:	d02b      	beq.n	800c95e <__lshift+0xbe>
 800c906:	468a      	mov	sl, r1
 800c908:	2200      	movs	r2, #0
 800c90a:	f1c9 0e20 	rsb	lr, r9, #32
 800c90e:	6818      	ldr	r0, [r3, #0]
 800c910:	fa00 f009 	lsl.w	r0, r0, r9
 800c914:	4302      	orrs	r2, r0
 800c916:	f84a 2b04 	str.w	r2, [sl], #4
 800c91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91e:	459c      	cmp	ip, r3
 800c920:	fa22 f20e 	lsr.w	r2, r2, lr
 800c924:	d8f3      	bhi.n	800c90e <__lshift+0x6e>
 800c926:	ebac 0304 	sub.w	r3, ip, r4
 800c92a:	3b15      	subs	r3, #21
 800c92c:	f023 0303 	bic.w	r3, r3, #3
 800c930:	3304      	adds	r3, #4
 800c932:	f104 0015 	add.w	r0, r4, #21
 800c936:	4584      	cmp	ip, r0
 800c938:	bf38      	it	cc
 800c93a:	2304      	movcc	r3, #4
 800c93c:	50ca      	str	r2, [r1, r3]
 800c93e:	b10a      	cbz	r2, 800c944 <__lshift+0xa4>
 800c940:	f108 0602 	add.w	r6, r8, #2
 800c944:	3e01      	subs	r6, #1
 800c946:	4638      	mov	r0, r7
 800c948:	4621      	mov	r1, r4
 800c94a:	612e      	str	r6, [r5, #16]
 800c94c:	f7ff fdda 	bl	800c504 <_Bfree>
 800c950:	4628      	mov	r0, r5
 800c952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c956:	f842 0f04 	str.w	r0, [r2, #4]!
 800c95a:	3301      	adds	r3, #1
 800c95c:	e7c5      	b.n	800c8ea <__lshift+0x4a>
 800c95e:	3904      	subs	r1, #4
 800c960:	f853 2b04 	ldr.w	r2, [r3], #4
 800c964:	459c      	cmp	ip, r3
 800c966:	f841 2f04 	str.w	r2, [r1, #4]!
 800c96a:	d8f9      	bhi.n	800c960 <__lshift+0xc0>
 800c96c:	e7ea      	b.n	800c944 <__lshift+0xa4>
 800c96e:	bf00      	nop
 800c970:	0800f3fb 	.word	0x0800f3fb
 800c974:	0800f40c 	.word	0x0800f40c

0800c978 <__mcmp>:
 800c978:	4603      	mov	r3, r0
 800c97a:	690a      	ldr	r2, [r1, #16]
 800c97c:	6900      	ldr	r0, [r0, #16]
 800c97e:	b530      	push	{r4, r5, lr}
 800c980:	1a80      	subs	r0, r0, r2
 800c982:	d10d      	bne.n	800c9a0 <__mcmp+0x28>
 800c984:	3314      	adds	r3, #20
 800c986:	3114      	adds	r1, #20
 800c988:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c98c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c990:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c994:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c998:	4295      	cmp	r5, r2
 800c99a:	d002      	beq.n	800c9a2 <__mcmp+0x2a>
 800c99c:	d304      	bcc.n	800c9a8 <__mcmp+0x30>
 800c99e:	2001      	movs	r0, #1
 800c9a0:	bd30      	pop	{r4, r5, pc}
 800c9a2:	42a3      	cmp	r3, r4
 800c9a4:	d3f4      	bcc.n	800c990 <__mcmp+0x18>
 800c9a6:	e7fb      	b.n	800c9a0 <__mcmp+0x28>
 800c9a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9ac:	e7f8      	b.n	800c9a0 <__mcmp+0x28>
	...

0800c9b0 <__mdiff>:
 800c9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	4692      	mov	sl, r2
 800c9be:	f7ff ffdb 	bl	800c978 <__mcmp>
 800c9c2:	1e05      	subs	r5, r0, #0
 800c9c4:	d111      	bne.n	800c9ea <__mdiff+0x3a>
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	f7ff fd5b 	bl	800c484 <_Balloc>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	b928      	cbnz	r0, 800c9de <__mdiff+0x2e>
 800c9d2:	f240 2132 	movw	r1, #562	; 0x232
 800c9d6:	4b3c      	ldr	r3, [pc, #240]	; (800cac8 <__mdiff+0x118>)
 800c9d8:	483c      	ldr	r0, [pc, #240]	; (800cacc <__mdiff+0x11c>)
 800c9da:	f000 faf5 	bl	800cfc8 <__assert_func>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ea:	bfa4      	itt	ge
 800c9ec:	4653      	movge	r3, sl
 800c9ee:	46a2      	movge	sl, r4
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c9f6:	bfa6      	itte	ge
 800c9f8:	461c      	movge	r4, r3
 800c9fa:	2500      	movge	r5, #0
 800c9fc:	2501      	movlt	r5, #1
 800c9fe:	f7ff fd41 	bl	800c484 <_Balloc>
 800ca02:	4602      	mov	r2, r0
 800ca04:	b918      	cbnz	r0, 800ca0e <__mdiff+0x5e>
 800ca06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca0a:	4b2f      	ldr	r3, [pc, #188]	; (800cac8 <__mdiff+0x118>)
 800ca0c:	e7e4      	b.n	800c9d8 <__mdiff+0x28>
 800ca0e:	f100 0814 	add.w	r8, r0, #20
 800ca12:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ca16:	60c5      	str	r5, [r0, #12]
 800ca18:	f04f 0c00 	mov.w	ip, #0
 800ca1c:	f10a 0514 	add.w	r5, sl, #20
 800ca20:	f10a 0010 	add.w	r0, sl, #16
 800ca24:	46c2      	mov	sl, r8
 800ca26:	6926      	ldr	r6, [r4, #16]
 800ca28:	f104 0914 	add.w	r9, r4, #20
 800ca2c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ca30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca34:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800ca38:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca3c:	fa1f f18b 	uxth.w	r1, fp
 800ca40:	4461      	add	r1, ip
 800ca42:	fa1f fc83 	uxth.w	ip, r3
 800ca46:	0c1b      	lsrs	r3, r3, #16
 800ca48:	eba1 010c 	sub.w	r1, r1, ip
 800ca4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca50:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ca54:	b289      	uxth	r1, r1
 800ca56:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ca5a:	454e      	cmp	r6, r9
 800ca5c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ca60:	f84a 3b04 	str.w	r3, [sl], #4
 800ca64:	d8e6      	bhi.n	800ca34 <__mdiff+0x84>
 800ca66:	1b33      	subs	r3, r6, r4
 800ca68:	3b15      	subs	r3, #21
 800ca6a:	f023 0303 	bic.w	r3, r3, #3
 800ca6e:	3415      	adds	r4, #21
 800ca70:	3304      	adds	r3, #4
 800ca72:	42a6      	cmp	r6, r4
 800ca74:	bf38      	it	cc
 800ca76:	2304      	movcc	r3, #4
 800ca78:	441d      	add	r5, r3
 800ca7a:	4443      	add	r3, r8
 800ca7c:	461e      	mov	r6, r3
 800ca7e:	462c      	mov	r4, r5
 800ca80:	4574      	cmp	r4, lr
 800ca82:	d30e      	bcc.n	800caa2 <__mdiff+0xf2>
 800ca84:	f10e 0103 	add.w	r1, lr, #3
 800ca88:	1b49      	subs	r1, r1, r5
 800ca8a:	f021 0103 	bic.w	r1, r1, #3
 800ca8e:	3d03      	subs	r5, #3
 800ca90:	45ae      	cmp	lr, r5
 800ca92:	bf38      	it	cc
 800ca94:	2100      	movcc	r1, #0
 800ca96:	4419      	add	r1, r3
 800ca98:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ca9c:	b18b      	cbz	r3, 800cac2 <__mdiff+0x112>
 800ca9e:	6117      	str	r7, [r2, #16]
 800caa0:	e7a0      	b.n	800c9e4 <__mdiff+0x34>
 800caa2:	f854 8b04 	ldr.w	r8, [r4], #4
 800caa6:	fa1f f188 	uxth.w	r1, r8
 800caaa:	4461      	add	r1, ip
 800caac:	1408      	asrs	r0, r1, #16
 800caae:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800cab2:	b289      	uxth	r1, r1
 800cab4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cab8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cabc:	f846 1b04 	str.w	r1, [r6], #4
 800cac0:	e7de      	b.n	800ca80 <__mdiff+0xd0>
 800cac2:	3f01      	subs	r7, #1
 800cac4:	e7e8      	b.n	800ca98 <__mdiff+0xe8>
 800cac6:	bf00      	nop
 800cac8:	0800f3fb 	.word	0x0800f3fb
 800cacc:	0800f40c 	.word	0x0800f40c

0800cad0 <__d2b>:
 800cad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cad4:	2101      	movs	r1, #1
 800cad6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cada:	4690      	mov	r8, r2
 800cadc:	461d      	mov	r5, r3
 800cade:	f7ff fcd1 	bl	800c484 <_Balloc>
 800cae2:	4604      	mov	r4, r0
 800cae4:	b930      	cbnz	r0, 800caf4 <__d2b+0x24>
 800cae6:	4602      	mov	r2, r0
 800cae8:	f240 310a 	movw	r1, #778	; 0x30a
 800caec:	4b24      	ldr	r3, [pc, #144]	; (800cb80 <__d2b+0xb0>)
 800caee:	4825      	ldr	r0, [pc, #148]	; (800cb84 <__d2b+0xb4>)
 800caf0:	f000 fa6a 	bl	800cfc8 <__assert_func>
 800caf4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800caf8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cafc:	bb2d      	cbnz	r5, 800cb4a <__d2b+0x7a>
 800cafe:	9301      	str	r3, [sp, #4]
 800cb00:	f1b8 0300 	subs.w	r3, r8, #0
 800cb04:	d026      	beq.n	800cb54 <__d2b+0x84>
 800cb06:	4668      	mov	r0, sp
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	f7ff fd87 	bl	800c61c <__lo0bits>
 800cb0e:	9900      	ldr	r1, [sp, #0]
 800cb10:	b1f0      	cbz	r0, 800cb50 <__d2b+0x80>
 800cb12:	9a01      	ldr	r2, [sp, #4]
 800cb14:	f1c0 0320 	rsb	r3, r0, #32
 800cb18:	fa02 f303 	lsl.w	r3, r2, r3
 800cb1c:	430b      	orrs	r3, r1
 800cb1e:	40c2      	lsrs	r2, r0
 800cb20:	6163      	str	r3, [r4, #20]
 800cb22:	9201      	str	r2, [sp, #4]
 800cb24:	9b01      	ldr	r3, [sp, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	bf14      	ite	ne
 800cb2a:	2102      	movne	r1, #2
 800cb2c:	2101      	moveq	r1, #1
 800cb2e:	61a3      	str	r3, [r4, #24]
 800cb30:	6121      	str	r1, [r4, #16]
 800cb32:	b1c5      	cbz	r5, 800cb66 <__d2b+0x96>
 800cb34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb38:	4405      	add	r5, r0
 800cb3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb3e:	603d      	str	r5, [r7, #0]
 800cb40:	6030      	str	r0, [r6, #0]
 800cb42:	4620      	mov	r0, r4
 800cb44:	b002      	add	sp, #8
 800cb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb4e:	e7d6      	b.n	800cafe <__d2b+0x2e>
 800cb50:	6161      	str	r1, [r4, #20]
 800cb52:	e7e7      	b.n	800cb24 <__d2b+0x54>
 800cb54:	a801      	add	r0, sp, #4
 800cb56:	f7ff fd61 	bl	800c61c <__lo0bits>
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	9b01      	ldr	r3, [sp, #4]
 800cb5e:	6121      	str	r1, [r4, #16]
 800cb60:	6163      	str	r3, [r4, #20]
 800cb62:	3020      	adds	r0, #32
 800cb64:	e7e5      	b.n	800cb32 <__d2b+0x62>
 800cb66:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cb6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb6e:	6038      	str	r0, [r7, #0]
 800cb70:	6918      	ldr	r0, [r3, #16]
 800cb72:	f7ff fd33 	bl	800c5dc <__hi0bits>
 800cb76:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cb7a:	6031      	str	r1, [r6, #0]
 800cb7c:	e7e1      	b.n	800cb42 <__d2b+0x72>
 800cb7e:	bf00      	nop
 800cb80:	0800f3fb 	.word	0x0800f3fb
 800cb84:	0800f40c 	.word	0x0800f40c

0800cb88 <_calloc_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	fb02 f501 	mul.w	r5, r2, r1
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f000 f854 	bl	800cc3c <_malloc_r>
 800cb94:	4604      	mov	r4, r0
 800cb96:	b118      	cbz	r0, 800cba0 <_calloc_r+0x18>
 800cb98:	462a      	mov	r2, r5
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	f7fe f93c 	bl	800ae18 <memset>
 800cba0:	4620      	mov	r0, r4
 800cba2:	bd38      	pop	{r3, r4, r5, pc}

0800cba4 <_free_r>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4605      	mov	r5, r0
 800cba8:	2900      	cmp	r1, #0
 800cbaa:	d043      	beq.n	800cc34 <_free_r+0x90>
 800cbac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb0:	1f0c      	subs	r4, r1, #4
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	bfb8      	it	lt
 800cbb6:	18e4      	addlt	r4, r4, r3
 800cbb8:	f000 fa62 	bl	800d080 <__malloc_lock>
 800cbbc:	4a1e      	ldr	r2, [pc, #120]	; (800cc38 <_free_r+0x94>)
 800cbbe:	6813      	ldr	r3, [r2, #0]
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	b933      	cbnz	r3, 800cbd2 <_free_r+0x2e>
 800cbc4:	6063      	str	r3, [r4, #4]
 800cbc6:	6014      	str	r4, [r2, #0]
 800cbc8:	4628      	mov	r0, r5
 800cbca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbce:	f000 ba5d 	b.w	800d08c <__malloc_unlock>
 800cbd2:	42a3      	cmp	r3, r4
 800cbd4:	d90a      	bls.n	800cbec <_free_r+0x48>
 800cbd6:	6821      	ldr	r1, [r4, #0]
 800cbd8:	1862      	adds	r2, r4, r1
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	bf01      	itttt	eq
 800cbde:	681a      	ldreq	r2, [r3, #0]
 800cbe0:	685b      	ldreq	r3, [r3, #4]
 800cbe2:	1852      	addeq	r2, r2, r1
 800cbe4:	6022      	streq	r2, [r4, #0]
 800cbe6:	6063      	str	r3, [r4, #4]
 800cbe8:	6004      	str	r4, [r0, #0]
 800cbea:	e7ed      	b.n	800cbc8 <_free_r+0x24>
 800cbec:	461a      	mov	r2, r3
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	b10b      	cbz	r3, 800cbf6 <_free_r+0x52>
 800cbf2:	42a3      	cmp	r3, r4
 800cbf4:	d9fa      	bls.n	800cbec <_free_r+0x48>
 800cbf6:	6811      	ldr	r1, [r2, #0]
 800cbf8:	1850      	adds	r0, r2, r1
 800cbfa:	42a0      	cmp	r0, r4
 800cbfc:	d10b      	bne.n	800cc16 <_free_r+0x72>
 800cbfe:	6820      	ldr	r0, [r4, #0]
 800cc00:	4401      	add	r1, r0
 800cc02:	1850      	adds	r0, r2, r1
 800cc04:	4283      	cmp	r3, r0
 800cc06:	6011      	str	r1, [r2, #0]
 800cc08:	d1de      	bne.n	800cbc8 <_free_r+0x24>
 800cc0a:	6818      	ldr	r0, [r3, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4401      	add	r1, r0
 800cc10:	6011      	str	r1, [r2, #0]
 800cc12:	6053      	str	r3, [r2, #4]
 800cc14:	e7d8      	b.n	800cbc8 <_free_r+0x24>
 800cc16:	d902      	bls.n	800cc1e <_free_r+0x7a>
 800cc18:	230c      	movs	r3, #12
 800cc1a:	602b      	str	r3, [r5, #0]
 800cc1c:	e7d4      	b.n	800cbc8 <_free_r+0x24>
 800cc1e:	6820      	ldr	r0, [r4, #0]
 800cc20:	1821      	adds	r1, r4, r0
 800cc22:	428b      	cmp	r3, r1
 800cc24:	bf01      	itttt	eq
 800cc26:	6819      	ldreq	r1, [r3, #0]
 800cc28:	685b      	ldreq	r3, [r3, #4]
 800cc2a:	1809      	addeq	r1, r1, r0
 800cc2c:	6021      	streq	r1, [r4, #0]
 800cc2e:	6063      	str	r3, [r4, #4]
 800cc30:	6054      	str	r4, [r2, #4]
 800cc32:	e7c9      	b.n	800cbc8 <_free_r+0x24>
 800cc34:	bd38      	pop	{r3, r4, r5, pc}
 800cc36:	bf00      	nop
 800cc38:	20000588 	.word	0x20000588

0800cc3c <_malloc_r>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	1ccd      	adds	r5, r1, #3
 800cc40:	f025 0503 	bic.w	r5, r5, #3
 800cc44:	3508      	adds	r5, #8
 800cc46:	2d0c      	cmp	r5, #12
 800cc48:	bf38      	it	cc
 800cc4a:	250c      	movcc	r5, #12
 800cc4c:	2d00      	cmp	r5, #0
 800cc4e:	4606      	mov	r6, r0
 800cc50:	db01      	blt.n	800cc56 <_malloc_r+0x1a>
 800cc52:	42a9      	cmp	r1, r5
 800cc54:	d903      	bls.n	800cc5e <_malloc_r+0x22>
 800cc56:	230c      	movs	r3, #12
 800cc58:	6033      	str	r3, [r6, #0]
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc5e:	f000 fa0f 	bl	800d080 <__malloc_lock>
 800cc62:	4921      	ldr	r1, [pc, #132]	; (800cce8 <_malloc_r+0xac>)
 800cc64:	680a      	ldr	r2, [r1, #0]
 800cc66:	4614      	mov	r4, r2
 800cc68:	b99c      	cbnz	r4, 800cc92 <_malloc_r+0x56>
 800cc6a:	4f20      	ldr	r7, [pc, #128]	; (800ccec <_malloc_r+0xb0>)
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	b923      	cbnz	r3, 800cc7a <_malloc_r+0x3e>
 800cc70:	4621      	mov	r1, r4
 800cc72:	4630      	mov	r0, r6
 800cc74:	f000 f998 	bl	800cfa8 <_sbrk_r>
 800cc78:	6038      	str	r0, [r7, #0]
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	f000 f993 	bl	800cfa8 <_sbrk_r>
 800cc82:	1c43      	adds	r3, r0, #1
 800cc84:	d123      	bne.n	800ccce <_malloc_r+0x92>
 800cc86:	230c      	movs	r3, #12
 800cc88:	4630      	mov	r0, r6
 800cc8a:	6033      	str	r3, [r6, #0]
 800cc8c:	f000 f9fe 	bl	800d08c <__malloc_unlock>
 800cc90:	e7e3      	b.n	800cc5a <_malloc_r+0x1e>
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	1b5b      	subs	r3, r3, r5
 800cc96:	d417      	bmi.n	800ccc8 <_malloc_r+0x8c>
 800cc98:	2b0b      	cmp	r3, #11
 800cc9a:	d903      	bls.n	800cca4 <_malloc_r+0x68>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	441c      	add	r4, r3
 800cca0:	6025      	str	r5, [r4, #0]
 800cca2:	e004      	b.n	800ccae <_malloc_r+0x72>
 800cca4:	6863      	ldr	r3, [r4, #4]
 800cca6:	42a2      	cmp	r2, r4
 800cca8:	bf0c      	ite	eq
 800ccaa:	600b      	streq	r3, [r1, #0]
 800ccac:	6053      	strne	r3, [r2, #4]
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f000 f9ec 	bl	800d08c <__malloc_unlock>
 800ccb4:	f104 000b 	add.w	r0, r4, #11
 800ccb8:	1d23      	adds	r3, r4, #4
 800ccba:	f020 0007 	bic.w	r0, r0, #7
 800ccbe:	1ac2      	subs	r2, r0, r3
 800ccc0:	d0cc      	beq.n	800cc5c <_malloc_r+0x20>
 800ccc2:	1a1b      	subs	r3, r3, r0
 800ccc4:	50a3      	str	r3, [r4, r2]
 800ccc6:	e7c9      	b.n	800cc5c <_malloc_r+0x20>
 800ccc8:	4622      	mov	r2, r4
 800ccca:	6864      	ldr	r4, [r4, #4]
 800cccc:	e7cc      	b.n	800cc68 <_malloc_r+0x2c>
 800ccce:	1cc4      	adds	r4, r0, #3
 800ccd0:	f024 0403 	bic.w	r4, r4, #3
 800ccd4:	42a0      	cmp	r0, r4
 800ccd6:	d0e3      	beq.n	800cca0 <_malloc_r+0x64>
 800ccd8:	1a21      	subs	r1, r4, r0
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f000 f964 	bl	800cfa8 <_sbrk_r>
 800cce0:	3001      	adds	r0, #1
 800cce2:	d1dd      	bne.n	800cca0 <_malloc_r+0x64>
 800cce4:	e7cf      	b.n	800cc86 <_malloc_r+0x4a>
 800cce6:	bf00      	nop
 800cce8:	20000588 	.word	0x20000588
 800ccec:	2000058c 	.word	0x2000058c

0800ccf0 <__ssputs_r>:
 800ccf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccf4:	688e      	ldr	r6, [r1, #8]
 800ccf6:	4682      	mov	sl, r0
 800ccf8:	429e      	cmp	r6, r3
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	4690      	mov	r8, r2
 800ccfe:	461f      	mov	r7, r3
 800cd00:	d838      	bhi.n	800cd74 <__ssputs_r+0x84>
 800cd02:	898a      	ldrh	r2, [r1, #12]
 800cd04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd08:	d032      	beq.n	800cd70 <__ssputs_r+0x80>
 800cd0a:	6825      	ldr	r5, [r4, #0]
 800cd0c:	6909      	ldr	r1, [r1, #16]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	eba5 0901 	sub.w	r9, r5, r1
 800cd14:	6965      	ldr	r5, [r4, #20]
 800cd16:	444b      	add	r3, r9
 800cd18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd20:	106d      	asrs	r5, r5, #1
 800cd22:	429d      	cmp	r5, r3
 800cd24:	bf38      	it	cc
 800cd26:	461d      	movcc	r5, r3
 800cd28:	0553      	lsls	r3, r2, #21
 800cd2a:	d531      	bpl.n	800cd90 <__ssputs_r+0xa0>
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	f7ff ff85 	bl	800cc3c <_malloc_r>
 800cd32:	4606      	mov	r6, r0
 800cd34:	b950      	cbnz	r0, 800cd4c <__ssputs_r+0x5c>
 800cd36:	230c      	movs	r3, #12
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd3c:	f8ca 3000 	str.w	r3, [sl]
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd4c:	464a      	mov	r2, r9
 800cd4e:	6921      	ldr	r1, [r4, #16]
 800cd50:	f7ff fb8a 	bl	800c468 <memcpy>
 800cd54:	89a3      	ldrh	r3, [r4, #12]
 800cd56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd5e:	81a3      	strh	r3, [r4, #12]
 800cd60:	6126      	str	r6, [r4, #16]
 800cd62:	444e      	add	r6, r9
 800cd64:	6026      	str	r6, [r4, #0]
 800cd66:	463e      	mov	r6, r7
 800cd68:	6165      	str	r5, [r4, #20]
 800cd6a:	eba5 0509 	sub.w	r5, r5, r9
 800cd6e:	60a5      	str	r5, [r4, #8]
 800cd70:	42be      	cmp	r6, r7
 800cd72:	d900      	bls.n	800cd76 <__ssputs_r+0x86>
 800cd74:	463e      	mov	r6, r7
 800cd76:	4632      	mov	r2, r6
 800cd78:	4641      	mov	r1, r8
 800cd7a:	6820      	ldr	r0, [r4, #0]
 800cd7c:	f000 f966 	bl	800d04c <memmove>
 800cd80:	68a3      	ldr	r3, [r4, #8]
 800cd82:	6822      	ldr	r2, [r4, #0]
 800cd84:	1b9b      	subs	r3, r3, r6
 800cd86:	4432      	add	r2, r6
 800cd88:	2000      	movs	r0, #0
 800cd8a:	60a3      	str	r3, [r4, #8]
 800cd8c:	6022      	str	r2, [r4, #0]
 800cd8e:	e7db      	b.n	800cd48 <__ssputs_r+0x58>
 800cd90:	462a      	mov	r2, r5
 800cd92:	f000 f981 	bl	800d098 <_realloc_r>
 800cd96:	4606      	mov	r6, r0
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d1e1      	bne.n	800cd60 <__ssputs_r+0x70>
 800cd9c:	4650      	mov	r0, sl
 800cd9e:	6921      	ldr	r1, [r4, #16]
 800cda0:	f7ff ff00 	bl	800cba4 <_free_r>
 800cda4:	e7c7      	b.n	800cd36 <__ssputs_r+0x46>
	...

0800cda8 <_svfiprintf_r>:
 800cda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdac:	4698      	mov	r8, r3
 800cdae:	898b      	ldrh	r3, [r1, #12]
 800cdb0:	4607      	mov	r7, r0
 800cdb2:	061b      	lsls	r3, r3, #24
 800cdb4:	460d      	mov	r5, r1
 800cdb6:	4614      	mov	r4, r2
 800cdb8:	b09d      	sub	sp, #116	; 0x74
 800cdba:	d50e      	bpl.n	800cdda <_svfiprintf_r+0x32>
 800cdbc:	690b      	ldr	r3, [r1, #16]
 800cdbe:	b963      	cbnz	r3, 800cdda <_svfiprintf_r+0x32>
 800cdc0:	2140      	movs	r1, #64	; 0x40
 800cdc2:	f7ff ff3b 	bl	800cc3c <_malloc_r>
 800cdc6:	6028      	str	r0, [r5, #0]
 800cdc8:	6128      	str	r0, [r5, #16]
 800cdca:	b920      	cbnz	r0, 800cdd6 <_svfiprintf_r+0x2e>
 800cdcc:	230c      	movs	r3, #12
 800cdce:	603b      	str	r3, [r7, #0]
 800cdd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdd4:	e0d1      	b.n	800cf7a <_svfiprintf_r+0x1d2>
 800cdd6:	2340      	movs	r3, #64	; 0x40
 800cdd8:	616b      	str	r3, [r5, #20]
 800cdda:	2300      	movs	r3, #0
 800cddc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdde:	2320      	movs	r3, #32
 800cde0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cde4:	2330      	movs	r3, #48	; 0x30
 800cde6:	f04f 0901 	mov.w	r9, #1
 800cdea:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf94 <_svfiprintf_r+0x1ec>
 800cdf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdf6:	4623      	mov	r3, r4
 800cdf8:	469a      	mov	sl, r3
 800cdfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdfe:	b10a      	cbz	r2, 800ce04 <_svfiprintf_r+0x5c>
 800ce00:	2a25      	cmp	r2, #37	; 0x25
 800ce02:	d1f9      	bne.n	800cdf8 <_svfiprintf_r+0x50>
 800ce04:	ebba 0b04 	subs.w	fp, sl, r4
 800ce08:	d00b      	beq.n	800ce22 <_svfiprintf_r+0x7a>
 800ce0a:	465b      	mov	r3, fp
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	4629      	mov	r1, r5
 800ce10:	4638      	mov	r0, r7
 800ce12:	f7ff ff6d 	bl	800ccf0 <__ssputs_r>
 800ce16:	3001      	adds	r0, #1
 800ce18:	f000 80aa 	beq.w	800cf70 <_svfiprintf_r+0x1c8>
 800ce1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce1e:	445a      	add	r2, fp
 800ce20:	9209      	str	r2, [sp, #36]	; 0x24
 800ce22:	f89a 3000 	ldrb.w	r3, [sl]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f000 80a2 	beq.w	800cf70 <_svfiprintf_r+0x1c8>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce36:	f10a 0a01 	add.w	sl, sl, #1
 800ce3a:	9304      	str	r3, [sp, #16]
 800ce3c:	9307      	str	r3, [sp, #28]
 800ce3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce42:	931a      	str	r3, [sp, #104]	; 0x68
 800ce44:	4654      	mov	r4, sl
 800ce46:	2205      	movs	r2, #5
 800ce48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce4c:	4851      	ldr	r0, [pc, #324]	; (800cf94 <_svfiprintf_r+0x1ec>)
 800ce4e:	f7ff fafd 	bl	800c44c <memchr>
 800ce52:	9a04      	ldr	r2, [sp, #16]
 800ce54:	b9d8      	cbnz	r0, 800ce8e <_svfiprintf_r+0xe6>
 800ce56:	06d0      	lsls	r0, r2, #27
 800ce58:	bf44      	itt	mi
 800ce5a:	2320      	movmi	r3, #32
 800ce5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce60:	0711      	lsls	r1, r2, #28
 800ce62:	bf44      	itt	mi
 800ce64:	232b      	movmi	r3, #43	; 0x2b
 800ce66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce70:	d015      	beq.n	800ce9e <_svfiprintf_r+0xf6>
 800ce72:	4654      	mov	r4, sl
 800ce74:	2000      	movs	r0, #0
 800ce76:	f04f 0c0a 	mov.w	ip, #10
 800ce7a:	9a07      	ldr	r2, [sp, #28]
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce82:	3b30      	subs	r3, #48	; 0x30
 800ce84:	2b09      	cmp	r3, #9
 800ce86:	d94e      	bls.n	800cf26 <_svfiprintf_r+0x17e>
 800ce88:	b1b0      	cbz	r0, 800ceb8 <_svfiprintf_r+0x110>
 800ce8a:	9207      	str	r2, [sp, #28]
 800ce8c:	e014      	b.n	800ceb8 <_svfiprintf_r+0x110>
 800ce8e:	eba0 0308 	sub.w	r3, r0, r8
 800ce92:	fa09 f303 	lsl.w	r3, r9, r3
 800ce96:	4313      	orrs	r3, r2
 800ce98:	46a2      	mov	sl, r4
 800ce9a:	9304      	str	r3, [sp, #16]
 800ce9c:	e7d2      	b.n	800ce44 <_svfiprintf_r+0x9c>
 800ce9e:	9b03      	ldr	r3, [sp, #12]
 800cea0:	1d19      	adds	r1, r3, #4
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	9103      	str	r1, [sp, #12]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	bfbb      	ittet	lt
 800ceaa:	425b      	neglt	r3, r3
 800ceac:	f042 0202 	orrlt.w	r2, r2, #2
 800ceb0:	9307      	strge	r3, [sp, #28]
 800ceb2:	9307      	strlt	r3, [sp, #28]
 800ceb4:	bfb8      	it	lt
 800ceb6:	9204      	strlt	r2, [sp, #16]
 800ceb8:	7823      	ldrb	r3, [r4, #0]
 800ceba:	2b2e      	cmp	r3, #46	; 0x2e
 800cebc:	d10c      	bne.n	800ced8 <_svfiprintf_r+0x130>
 800cebe:	7863      	ldrb	r3, [r4, #1]
 800cec0:	2b2a      	cmp	r3, #42	; 0x2a
 800cec2:	d135      	bne.n	800cf30 <_svfiprintf_r+0x188>
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	3402      	adds	r4, #2
 800cec8:	1d1a      	adds	r2, r3, #4
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	9203      	str	r2, [sp, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	bfb8      	it	lt
 800ced2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ced6:	9305      	str	r3, [sp, #20]
 800ced8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cfa4 <_svfiprintf_r+0x1fc>
 800cedc:	2203      	movs	r2, #3
 800cede:	4650      	mov	r0, sl
 800cee0:	7821      	ldrb	r1, [r4, #0]
 800cee2:	f7ff fab3 	bl	800c44c <memchr>
 800cee6:	b140      	cbz	r0, 800cefa <_svfiprintf_r+0x152>
 800cee8:	2340      	movs	r3, #64	; 0x40
 800ceea:	eba0 000a 	sub.w	r0, r0, sl
 800ceee:	fa03 f000 	lsl.w	r0, r3, r0
 800cef2:	9b04      	ldr	r3, [sp, #16]
 800cef4:	3401      	adds	r4, #1
 800cef6:	4303      	orrs	r3, r0
 800cef8:	9304      	str	r3, [sp, #16]
 800cefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cefe:	2206      	movs	r2, #6
 800cf00:	4825      	ldr	r0, [pc, #148]	; (800cf98 <_svfiprintf_r+0x1f0>)
 800cf02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf06:	f7ff faa1 	bl	800c44c <memchr>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d038      	beq.n	800cf80 <_svfiprintf_r+0x1d8>
 800cf0e:	4b23      	ldr	r3, [pc, #140]	; (800cf9c <_svfiprintf_r+0x1f4>)
 800cf10:	bb1b      	cbnz	r3, 800cf5a <_svfiprintf_r+0x1b2>
 800cf12:	9b03      	ldr	r3, [sp, #12]
 800cf14:	3307      	adds	r3, #7
 800cf16:	f023 0307 	bic.w	r3, r3, #7
 800cf1a:	3308      	adds	r3, #8
 800cf1c:	9303      	str	r3, [sp, #12]
 800cf1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf20:	4433      	add	r3, r6
 800cf22:	9309      	str	r3, [sp, #36]	; 0x24
 800cf24:	e767      	b.n	800cdf6 <_svfiprintf_r+0x4e>
 800cf26:	460c      	mov	r4, r1
 800cf28:	2001      	movs	r0, #1
 800cf2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf2e:	e7a5      	b.n	800ce7c <_svfiprintf_r+0xd4>
 800cf30:	2300      	movs	r3, #0
 800cf32:	f04f 0c0a 	mov.w	ip, #10
 800cf36:	4619      	mov	r1, r3
 800cf38:	3401      	adds	r4, #1
 800cf3a:	9305      	str	r3, [sp, #20]
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf42:	3a30      	subs	r2, #48	; 0x30
 800cf44:	2a09      	cmp	r2, #9
 800cf46:	d903      	bls.n	800cf50 <_svfiprintf_r+0x1a8>
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d0c5      	beq.n	800ced8 <_svfiprintf_r+0x130>
 800cf4c:	9105      	str	r1, [sp, #20]
 800cf4e:	e7c3      	b.n	800ced8 <_svfiprintf_r+0x130>
 800cf50:	4604      	mov	r4, r0
 800cf52:	2301      	movs	r3, #1
 800cf54:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf58:	e7f0      	b.n	800cf3c <_svfiprintf_r+0x194>
 800cf5a:	ab03      	add	r3, sp, #12
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	462a      	mov	r2, r5
 800cf60:	4638      	mov	r0, r7
 800cf62:	4b0f      	ldr	r3, [pc, #60]	; (800cfa0 <_svfiprintf_r+0x1f8>)
 800cf64:	a904      	add	r1, sp, #16
 800cf66:	f7fd fffd 	bl	800af64 <_printf_float>
 800cf6a:	1c42      	adds	r2, r0, #1
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	d1d6      	bne.n	800cf1e <_svfiprintf_r+0x176>
 800cf70:	89ab      	ldrh	r3, [r5, #12]
 800cf72:	065b      	lsls	r3, r3, #25
 800cf74:	f53f af2c 	bmi.w	800cdd0 <_svfiprintf_r+0x28>
 800cf78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf7a:	b01d      	add	sp, #116	; 0x74
 800cf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf80:	ab03      	add	r3, sp, #12
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	462a      	mov	r2, r5
 800cf86:	4638      	mov	r0, r7
 800cf88:	4b05      	ldr	r3, [pc, #20]	; (800cfa0 <_svfiprintf_r+0x1f8>)
 800cf8a:	a904      	add	r1, sp, #16
 800cf8c:	f7fe fa86 	bl	800b49c <_printf_i>
 800cf90:	e7eb      	b.n	800cf6a <_svfiprintf_r+0x1c2>
 800cf92:	bf00      	nop
 800cf94:	0800f56c 	.word	0x0800f56c
 800cf98:	0800f576 	.word	0x0800f576
 800cf9c:	0800af65 	.word	0x0800af65
 800cfa0:	0800ccf1 	.word	0x0800ccf1
 800cfa4:	0800f572 	.word	0x0800f572

0800cfa8 <_sbrk_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	2300      	movs	r3, #0
 800cfac:	4d05      	ldr	r5, [pc, #20]	; (800cfc4 <_sbrk_r+0x1c>)
 800cfae:	4604      	mov	r4, r0
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	602b      	str	r3, [r5, #0]
 800cfb4:	f7f9 f9f0 	bl	8006398 <_sbrk>
 800cfb8:	1c43      	adds	r3, r0, #1
 800cfba:	d102      	bne.n	800cfc2 <_sbrk_r+0x1a>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	b103      	cbz	r3, 800cfc2 <_sbrk_r+0x1a>
 800cfc0:	6023      	str	r3, [r4, #0]
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	20001450 	.word	0x20001450

0800cfc8 <__assert_func>:
 800cfc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfca:	4614      	mov	r4, r2
 800cfcc:	461a      	mov	r2, r3
 800cfce:	4b09      	ldr	r3, [pc, #36]	; (800cff4 <__assert_func+0x2c>)
 800cfd0:	4605      	mov	r5, r0
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68d8      	ldr	r0, [r3, #12]
 800cfd6:	b14c      	cbz	r4, 800cfec <__assert_func+0x24>
 800cfd8:	4b07      	ldr	r3, [pc, #28]	; (800cff8 <__assert_func+0x30>)
 800cfda:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfde:	9100      	str	r1, [sp, #0]
 800cfe0:	462b      	mov	r3, r5
 800cfe2:	4906      	ldr	r1, [pc, #24]	; (800cffc <__assert_func+0x34>)
 800cfe4:	f000 f80e 	bl	800d004 <fiprintf>
 800cfe8:	f000 faa2 	bl	800d530 <abort>
 800cfec:	4b04      	ldr	r3, [pc, #16]	; (800d000 <__assert_func+0x38>)
 800cfee:	461c      	mov	r4, r3
 800cff0:	e7f3      	b.n	800cfda <__assert_func+0x12>
 800cff2:	bf00      	nop
 800cff4:	20000170 	.word	0x20000170
 800cff8:	0800f57d 	.word	0x0800f57d
 800cffc:	0800f58a 	.word	0x0800f58a
 800d000:	0800f5b8 	.word	0x0800f5b8

0800d004 <fiprintf>:
 800d004:	b40e      	push	{r1, r2, r3}
 800d006:	b503      	push	{r0, r1, lr}
 800d008:	4601      	mov	r1, r0
 800d00a:	ab03      	add	r3, sp, #12
 800d00c:	4805      	ldr	r0, [pc, #20]	; (800d024 <fiprintf+0x20>)
 800d00e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d012:	6800      	ldr	r0, [r0, #0]
 800d014:	9301      	str	r3, [sp, #4]
 800d016:	f000 f88d 	bl	800d134 <_vfiprintf_r>
 800d01a:	b002      	add	sp, #8
 800d01c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d020:	b003      	add	sp, #12
 800d022:	4770      	bx	lr
 800d024:	20000170 	.word	0x20000170

0800d028 <__ascii_mbtowc>:
 800d028:	b082      	sub	sp, #8
 800d02a:	b901      	cbnz	r1, 800d02e <__ascii_mbtowc+0x6>
 800d02c:	a901      	add	r1, sp, #4
 800d02e:	b142      	cbz	r2, 800d042 <__ascii_mbtowc+0x1a>
 800d030:	b14b      	cbz	r3, 800d046 <__ascii_mbtowc+0x1e>
 800d032:	7813      	ldrb	r3, [r2, #0]
 800d034:	600b      	str	r3, [r1, #0]
 800d036:	7812      	ldrb	r2, [r2, #0]
 800d038:	1e10      	subs	r0, r2, #0
 800d03a:	bf18      	it	ne
 800d03c:	2001      	movne	r0, #1
 800d03e:	b002      	add	sp, #8
 800d040:	4770      	bx	lr
 800d042:	4610      	mov	r0, r2
 800d044:	e7fb      	b.n	800d03e <__ascii_mbtowc+0x16>
 800d046:	f06f 0001 	mvn.w	r0, #1
 800d04a:	e7f8      	b.n	800d03e <__ascii_mbtowc+0x16>

0800d04c <memmove>:
 800d04c:	4288      	cmp	r0, r1
 800d04e:	b510      	push	{r4, lr}
 800d050:	eb01 0402 	add.w	r4, r1, r2
 800d054:	d902      	bls.n	800d05c <memmove+0x10>
 800d056:	4284      	cmp	r4, r0
 800d058:	4623      	mov	r3, r4
 800d05a:	d807      	bhi.n	800d06c <memmove+0x20>
 800d05c:	1e43      	subs	r3, r0, #1
 800d05e:	42a1      	cmp	r1, r4
 800d060:	d008      	beq.n	800d074 <memmove+0x28>
 800d062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d06a:	e7f8      	b.n	800d05e <memmove+0x12>
 800d06c:	4601      	mov	r1, r0
 800d06e:	4402      	add	r2, r0
 800d070:	428a      	cmp	r2, r1
 800d072:	d100      	bne.n	800d076 <memmove+0x2a>
 800d074:	bd10      	pop	{r4, pc}
 800d076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d07e:	e7f7      	b.n	800d070 <memmove+0x24>

0800d080 <__malloc_lock>:
 800d080:	4801      	ldr	r0, [pc, #4]	; (800d088 <__malloc_lock+0x8>)
 800d082:	f000 bc15 	b.w	800d8b0 <__retarget_lock_acquire_recursive>
 800d086:	bf00      	nop
 800d088:	20001458 	.word	0x20001458

0800d08c <__malloc_unlock>:
 800d08c:	4801      	ldr	r0, [pc, #4]	; (800d094 <__malloc_unlock+0x8>)
 800d08e:	f000 bc10 	b.w	800d8b2 <__retarget_lock_release_recursive>
 800d092:	bf00      	nop
 800d094:	20001458 	.word	0x20001458

0800d098 <_realloc_r>:
 800d098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09a:	4607      	mov	r7, r0
 800d09c:	4614      	mov	r4, r2
 800d09e:	460e      	mov	r6, r1
 800d0a0:	b921      	cbnz	r1, 800d0ac <_realloc_r+0x14>
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d0a8:	f7ff bdc8 	b.w	800cc3c <_malloc_r>
 800d0ac:	b922      	cbnz	r2, 800d0b8 <_realloc_r+0x20>
 800d0ae:	f7ff fd79 	bl	800cba4 <_free_r>
 800d0b2:	4625      	mov	r5, r4
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0b8:	f000 fc60 	bl	800d97c <_malloc_usable_size_r>
 800d0bc:	42a0      	cmp	r0, r4
 800d0be:	d20f      	bcs.n	800d0e0 <_realloc_r+0x48>
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	f7ff fdba 	bl	800cc3c <_malloc_r>
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d0f2      	beq.n	800d0b4 <_realloc_r+0x1c>
 800d0ce:	4631      	mov	r1, r6
 800d0d0:	4622      	mov	r2, r4
 800d0d2:	f7ff f9c9 	bl	800c468 <memcpy>
 800d0d6:	4631      	mov	r1, r6
 800d0d8:	4638      	mov	r0, r7
 800d0da:	f7ff fd63 	bl	800cba4 <_free_r>
 800d0de:	e7e9      	b.n	800d0b4 <_realloc_r+0x1c>
 800d0e0:	4635      	mov	r5, r6
 800d0e2:	e7e7      	b.n	800d0b4 <_realloc_r+0x1c>

0800d0e4 <__sfputc_r>:
 800d0e4:	6893      	ldr	r3, [r2, #8]
 800d0e6:	b410      	push	{r4}
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	6093      	str	r3, [r2, #8]
 800d0ee:	da07      	bge.n	800d100 <__sfputc_r+0x1c>
 800d0f0:	6994      	ldr	r4, [r2, #24]
 800d0f2:	42a3      	cmp	r3, r4
 800d0f4:	db01      	blt.n	800d0fa <__sfputc_r+0x16>
 800d0f6:	290a      	cmp	r1, #10
 800d0f8:	d102      	bne.n	800d100 <__sfputc_r+0x1c>
 800d0fa:	bc10      	pop	{r4}
 800d0fc:	f000 b94a 	b.w	800d394 <__swbuf_r>
 800d100:	6813      	ldr	r3, [r2, #0]
 800d102:	1c58      	adds	r0, r3, #1
 800d104:	6010      	str	r0, [r2, #0]
 800d106:	7019      	strb	r1, [r3, #0]
 800d108:	4608      	mov	r0, r1
 800d10a:	bc10      	pop	{r4}
 800d10c:	4770      	bx	lr

0800d10e <__sfputs_r>:
 800d10e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d110:	4606      	mov	r6, r0
 800d112:	460f      	mov	r7, r1
 800d114:	4614      	mov	r4, r2
 800d116:	18d5      	adds	r5, r2, r3
 800d118:	42ac      	cmp	r4, r5
 800d11a:	d101      	bne.n	800d120 <__sfputs_r+0x12>
 800d11c:	2000      	movs	r0, #0
 800d11e:	e007      	b.n	800d130 <__sfputs_r+0x22>
 800d120:	463a      	mov	r2, r7
 800d122:	4630      	mov	r0, r6
 800d124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d128:	f7ff ffdc 	bl	800d0e4 <__sfputc_r>
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	d1f3      	bne.n	800d118 <__sfputs_r+0xa>
 800d130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d134 <_vfiprintf_r>:
 800d134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	460d      	mov	r5, r1
 800d13a:	4614      	mov	r4, r2
 800d13c:	4698      	mov	r8, r3
 800d13e:	4606      	mov	r6, r0
 800d140:	b09d      	sub	sp, #116	; 0x74
 800d142:	b118      	cbz	r0, 800d14c <_vfiprintf_r+0x18>
 800d144:	6983      	ldr	r3, [r0, #24]
 800d146:	b90b      	cbnz	r3, 800d14c <_vfiprintf_r+0x18>
 800d148:	f000 fb14 	bl	800d774 <__sinit>
 800d14c:	4b89      	ldr	r3, [pc, #548]	; (800d374 <_vfiprintf_r+0x240>)
 800d14e:	429d      	cmp	r5, r3
 800d150:	d11b      	bne.n	800d18a <_vfiprintf_r+0x56>
 800d152:	6875      	ldr	r5, [r6, #4]
 800d154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d156:	07d9      	lsls	r1, r3, #31
 800d158:	d405      	bmi.n	800d166 <_vfiprintf_r+0x32>
 800d15a:	89ab      	ldrh	r3, [r5, #12]
 800d15c:	059a      	lsls	r2, r3, #22
 800d15e:	d402      	bmi.n	800d166 <_vfiprintf_r+0x32>
 800d160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d162:	f000 fba5 	bl	800d8b0 <__retarget_lock_acquire_recursive>
 800d166:	89ab      	ldrh	r3, [r5, #12]
 800d168:	071b      	lsls	r3, r3, #28
 800d16a:	d501      	bpl.n	800d170 <_vfiprintf_r+0x3c>
 800d16c:	692b      	ldr	r3, [r5, #16]
 800d16e:	b9eb      	cbnz	r3, 800d1ac <_vfiprintf_r+0x78>
 800d170:	4629      	mov	r1, r5
 800d172:	4630      	mov	r0, r6
 800d174:	f000 f96e 	bl	800d454 <__swsetup_r>
 800d178:	b1c0      	cbz	r0, 800d1ac <_vfiprintf_r+0x78>
 800d17a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d17c:	07dc      	lsls	r4, r3, #31
 800d17e:	d50e      	bpl.n	800d19e <_vfiprintf_r+0x6a>
 800d180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d184:	b01d      	add	sp, #116	; 0x74
 800d186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18a:	4b7b      	ldr	r3, [pc, #492]	; (800d378 <_vfiprintf_r+0x244>)
 800d18c:	429d      	cmp	r5, r3
 800d18e:	d101      	bne.n	800d194 <_vfiprintf_r+0x60>
 800d190:	68b5      	ldr	r5, [r6, #8]
 800d192:	e7df      	b.n	800d154 <_vfiprintf_r+0x20>
 800d194:	4b79      	ldr	r3, [pc, #484]	; (800d37c <_vfiprintf_r+0x248>)
 800d196:	429d      	cmp	r5, r3
 800d198:	bf08      	it	eq
 800d19a:	68f5      	ldreq	r5, [r6, #12]
 800d19c:	e7da      	b.n	800d154 <_vfiprintf_r+0x20>
 800d19e:	89ab      	ldrh	r3, [r5, #12]
 800d1a0:	0598      	lsls	r0, r3, #22
 800d1a2:	d4ed      	bmi.n	800d180 <_vfiprintf_r+0x4c>
 800d1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1a6:	f000 fb84 	bl	800d8b2 <__retarget_lock_release_recursive>
 800d1aa:	e7e9      	b.n	800d180 <_vfiprintf_r+0x4c>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b0:	2320      	movs	r3, #32
 800d1b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1b6:	2330      	movs	r3, #48	; 0x30
 800d1b8:	f04f 0901 	mov.w	r9, #1
 800d1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1c0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d380 <_vfiprintf_r+0x24c>
 800d1c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1c8:	4623      	mov	r3, r4
 800d1ca:	469a      	mov	sl, r3
 800d1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1d0:	b10a      	cbz	r2, 800d1d6 <_vfiprintf_r+0xa2>
 800d1d2:	2a25      	cmp	r2, #37	; 0x25
 800d1d4:	d1f9      	bne.n	800d1ca <_vfiprintf_r+0x96>
 800d1d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1da:	d00b      	beq.n	800d1f4 <_vfiprintf_r+0xc0>
 800d1dc:	465b      	mov	r3, fp
 800d1de:	4622      	mov	r2, r4
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff ff93 	bl	800d10e <__sfputs_r>
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	f000 80aa 	beq.w	800d342 <_vfiprintf_r+0x20e>
 800d1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1f0:	445a      	add	r2, fp
 800d1f2:	9209      	str	r2, [sp, #36]	; 0x24
 800d1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f000 80a2 	beq.w	800d342 <_vfiprintf_r+0x20e>
 800d1fe:	2300      	movs	r3, #0
 800d200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d208:	f10a 0a01 	add.w	sl, sl, #1
 800d20c:	9304      	str	r3, [sp, #16]
 800d20e:	9307      	str	r3, [sp, #28]
 800d210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d214:	931a      	str	r3, [sp, #104]	; 0x68
 800d216:	4654      	mov	r4, sl
 800d218:	2205      	movs	r2, #5
 800d21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d21e:	4858      	ldr	r0, [pc, #352]	; (800d380 <_vfiprintf_r+0x24c>)
 800d220:	f7ff f914 	bl	800c44c <memchr>
 800d224:	9a04      	ldr	r2, [sp, #16]
 800d226:	b9d8      	cbnz	r0, 800d260 <_vfiprintf_r+0x12c>
 800d228:	06d1      	lsls	r1, r2, #27
 800d22a:	bf44      	itt	mi
 800d22c:	2320      	movmi	r3, #32
 800d22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d232:	0713      	lsls	r3, r2, #28
 800d234:	bf44      	itt	mi
 800d236:	232b      	movmi	r3, #43	; 0x2b
 800d238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d23c:	f89a 3000 	ldrb.w	r3, [sl]
 800d240:	2b2a      	cmp	r3, #42	; 0x2a
 800d242:	d015      	beq.n	800d270 <_vfiprintf_r+0x13c>
 800d244:	4654      	mov	r4, sl
 800d246:	2000      	movs	r0, #0
 800d248:	f04f 0c0a 	mov.w	ip, #10
 800d24c:	9a07      	ldr	r2, [sp, #28]
 800d24e:	4621      	mov	r1, r4
 800d250:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d254:	3b30      	subs	r3, #48	; 0x30
 800d256:	2b09      	cmp	r3, #9
 800d258:	d94e      	bls.n	800d2f8 <_vfiprintf_r+0x1c4>
 800d25a:	b1b0      	cbz	r0, 800d28a <_vfiprintf_r+0x156>
 800d25c:	9207      	str	r2, [sp, #28]
 800d25e:	e014      	b.n	800d28a <_vfiprintf_r+0x156>
 800d260:	eba0 0308 	sub.w	r3, r0, r8
 800d264:	fa09 f303 	lsl.w	r3, r9, r3
 800d268:	4313      	orrs	r3, r2
 800d26a:	46a2      	mov	sl, r4
 800d26c:	9304      	str	r3, [sp, #16]
 800d26e:	e7d2      	b.n	800d216 <_vfiprintf_r+0xe2>
 800d270:	9b03      	ldr	r3, [sp, #12]
 800d272:	1d19      	adds	r1, r3, #4
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	9103      	str	r1, [sp, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	bfbb      	ittet	lt
 800d27c:	425b      	neglt	r3, r3
 800d27e:	f042 0202 	orrlt.w	r2, r2, #2
 800d282:	9307      	strge	r3, [sp, #28]
 800d284:	9307      	strlt	r3, [sp, #28]
 800d286:	bfb8      	it	lt
 800d288:	9204      	strlt	r2, [sp, #16]
 800d28a:	7823      	ldrb	r3, [r4, #0]
 800d28c:	2b2e      	cmp	r3, #46	; 0x2e
 800d28e:	d10c      	bne.n	800d2aa <_vfiprintf_r+0x176>
 800d290:	7863      	ldrb	r3, [r4, #1]
 800d292:	2b2a      	cmp	r3, #42	; 0x2a
 800d294:	d135      	bne.n	800d302 <_vfiprintf_r+0x1ce>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	3402      	adds	r4, #2
 800d29a:	1d1a      	adds	r2, r3, #4
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	9203      	str	r2, [sp, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	bfb8      	it	lt
 800d2a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d2a8:	9305      	str	r3, [sp, #20]
 800d2aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d390 <_vfiprintf_r+0x25c>
 800d2ae:	2203      	movs	r2, #3
 800d2b0:	4650      	mov	r0, sl
 800d2b2:	7821      	ldrb	r1, [r4, #0]
 800d2b4:	f7ff f8ca 	bl	800c44c <memchr>
 800d2b8:	b140      	cbz	r0, 800d2cc <_vfiprintf_r+0x198>
 800d2ba:	2340      	movs	r3, #64	; 0x40
 800d2bc:	eba0 000a 	sub.w	r0, r0, sl
 800d2c0:	fa03 f000 	lsl.w	r0, r3, r0
 800d2c4:	9b04      	ldr	r3, [sp, #16]
 800d2c6:	3401      	adds	r4, #1
 800d2c8:	4303      	orrs	r3, r0
 800d2ca:	9304      	str	r3, [sp, #16]
 800d2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d0:	2206      	movs	r2, #6
 800d2d2:	482c      	ldr	r0, [pc, #176]	; (800d384 <_vfiprintf_r+0x250>)
 800d2d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2d8:	f7ff f8b8 	bl	800c44c <memchr>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d03f      	beq.n	800d360 <_vfiprintf_r+0x22c>
 800d2e0:	4b29      	ldr	r3, [pc, #164]	; (800d388 <_vfiprintf_r+0x254>)
 800d2e2:	bb1b      	cbnz	r3, 800d32c <_vfiprintf_r+0x1f8>
 800d2e4:	9b03      	ldr	r3, [sp, #12]
 800d2e6:	3307      	adds	r3, #7
 800d2e8:	f023 0307 	bic.w	r3, r3, #7
 800d2ec:	3308      	adds	r3, #8
 800d2ee:	9303      	str	r3, [sp, #12]
 800d2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2f2:	443b      	add	r3, r7
 800d2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f6:	e767      	b.n	800d1c8 <_vfiprintf_r+0x94>
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	2001      	movs	r0, #1
 800d2fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d300:	e7a5      	b.n	800d24e <_vfiprintf_r+0x11a>
 800d302:	2300      	movs	r3, #0
 800d304:	f04f 0c0a 	mov.w	ip, #10
 800d308:	4619      	mov	r1, r3
 800d30a:	3401      	adds	r4, #1
 800d30c:	9305      	str	r3, [sp, #20]
 800d30e:	4620      	mov	r0, r4
 800d310:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d314:	3a30      	subs	r2, #48	; 0x30
 800d316:	2a09      	cmp	r2, #9
 800d318:	d903      	bls.n	800d322 <_vfiprintf_r+0x1ee>
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d0c5      	beq.n	800d2aa <_vfiprintf_r+0x176>
 800d31e:	9105      	str	r1, [sp, #20]
 800d320:	e7c3      	b.n	800d2aa <_vfiprintf_r+0x176>
 800d322:	4604      	mov	r4, r0
 800d324:	2301      	movs	r3, #1
 800d326:	fb0c 2101 	mla	r1, ip, r1, r2
 800d32a:	e7f0      	b.n	800d30e <_vfiprintf_r+0x1da>
 800d32c:	ab03      	add	r3, sp, #12
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	462a      	mov	r2, r5
 800d332:	4630      	mov	r0, r6
 800d334:	4b15      	ldr	r3, [pc, #84]	; (800d38c <_vfiprintf_r+0x258>)
 800d336:	a904      	add	r1, sp, #16
 800d338:	f7fd fe14 	bl	800af64 <_printf_float>
 800d33c:	4607      	mov	r7, r0
 800d33e:	1c78      	adds	r0, r7, #1
 800d340:	d1d6      	bne.n	800d2f0 <_vfiprintf_r+0x1bc>
 800d342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d344:	07d9      	lsls	r1, r3, #31
 800d346:	d405      	bmi.n	800d354 <_vfiprintf_r+0x220>
 800d348:	89ab      	ldrh	r3, [r5, #12]
 800d34a:	059a      	lsls	r2, r3, #22
 800d34c:	d402      	bmi.n	800d354 <_vfiprintf_r+0x220>
 800d34e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d350:	f000 faaf 	bl	800d8b2 <__retarget_lock_release_recursive>
 800d354:	89ab      	ldrh	r3, [r5, #12]
 800d356:	065b      	lsls	r3, r3, #25
 800d358:	f53f af12 	bmi.w	800d180 <_vfiprintf_r+0x4c>
 800d35c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d35e:	e711      	b.n	800d184 <_vfiprintf_r+0x50>
 800d360:	ab03      	add	r3, sp, #12
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	462a      	mov	r2, r5
 800d366:	4630      	mov	r0, r6
 800d368:	4b08      	ldr	r3, [pc, #32]	; (800d38c <_vfiprintf_r+0x258>)
 800d36a:	a904      	add	r1, sp, #16
 800d36c:	f7fe f896 	bl	800b49c <_printf_i>
 800d370:	e7e4      	b.n	800d33c <_vfiprintf_r+0x208>
 800d372:	bf00      	nop
 800d374:	0800f6e4 	.word	0x0800f6e4
 800d378:	0800f704 	.word	0x0800f704
 800d37c:	0800f6c4 	.word	0x0800f6c4
 800d380:	0800f56c 	.word	0x0800f56c
 800d384:	0800f576 	.word	0x0800f576
 800d388:	0800af65 	.word	0x0800af65
 800d38c:	0800d10f 	.word	0x0800d10f
 800d390:	0800f572 	.word	0x0800f572

0800d394 <__swbuf_r>:
 800d394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d396:	460e      	mov	r6, r1
 800d398:	4614      	mov	r4, r2
 800d39a:	4605      	mov	r5, r0
 800d39c:	b118      	cbz	r0, 800d3a6 <__swbuf_r+0x12>
 800d39e:	6983      	ldr	r3, [r0, #24]
 800d3a0:	b90b      	cbnz	r3, 800d3a6 <__swbuf_r+0x12>
 800d3a2:	f000 f9e7 	bl	800d774 <__sinit>
 800d3a6:	4b21      	ldr	r3, [pc, #132]	; (800d42c <__swbuf_r+0x98>)
 800d3a8:	429c      	cmp	r4, r3
 800d3aa:	d12b      	bne.n	800d404 <__swbuf_r+0x70>
 800d3ac:	686c      	ldr	r4, [r5, #4]
 800d3ae:	69a3      	ldr	r3, [r4, #24]
 800d3b0:	60a3      	str	r3, [r4, #8]
 800d3b2:	89a3      	ldrh	r3, [r4, #12]
 800d3b4:	071a      	lsls	r2, r3, #28
 800d3b6:	d52f      	bpl.n	800d418 <__swbuf_r+0x84>
 800d3b8:	6923      	ldr	r3, [r4, #16]
 800d3ba:	b36b      	cbz	r3, 800d418 <__swbuf_r+0x84>
 800d3bc:	6923      	ldr	r3, [r4, #16]
 800d3be:	6820      	ldr	r0, [r4, #0]
 800d3c0:	b2f6      	uxtb	r6, r6
 800d3c2:	1ac0      	subs	r0, r0, r3
 800d3c4:	6963      	ldr	r3, [r4, #20]
 800d3c6:	4637      	mov	r7, r6
 800d3c8:	4283      	cmp	r3, r0
 800d3ca:	dc04      	bgt.n	800d3d6 <__swbuf_r+0x42>
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	f000 f93c 	bl	800d64c <_fflush_r>
 800d3d4:	bb30      	cbnz	r0, 800d424 <__swbuf_r+0x90>
 800d3d6:	68a3      	ldr	r3, [r4, #8]
 800d3d8:	3001      	adds	r0, #1
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	60a3      	str	r3, [r4, #8]
 800d3de:	6823      	ldr	r3, [r4, #0]
 800d3e0:	1c5a      	adds	r2, r3, #1
 800d3e2:	6022      	str	r2, [r4, #0]
 800d3e4:	701e      	strb	r6, [r3, #0]
 800d3e6:	6963      	ldr	r3, [r4, #20]
 800d3e8:	4283      	cmp	r3, r0
 800d3ea:	d004      	beq.n	800d3f6 <__swbuf_r+0x62>
 800d3ec:	89a3      	ldrh	r3, [r4, #12]
 800d3ee:	07db      	lsls	r3, r3, #31
 800d3f0:	d506      	bpl.n	800d400 <__swbuf_r+0x6c>
 800d3f2:	2e0a      	cmp	r6, #10
 800d3f4:	d104      	bne.n	800d400 <__swbuf_r+0x6c>
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f000 f927 	bl	800d64c <_fflush_r>
 800d3fe:	b988      	cbnz	r0, 800d424 <__swbuf_r+0x90>
 800d400:	4638      	mov	r0, r7
 800d402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d404:	4b0a      	ldr	r3, [pc, #40]	; (800d430 <__swbuf_r+0x9c>)
 800d406:	429c      	cmp	r4, r3
 800d408:	d101      	bne.n	800d40e <__swbuf_r+0x7a>
 800d40a:	68ac      	ldr	r4, [r5, #8]
 800d40c:	e7cf      	b.n	800d3ae <__swbuf_r+0x1a>
 800d40e:	4b09      	ldr	r3, [pc, #36]	; (800d434 <__swbuf_r+0xa0>)
 800d410:	429c      	cmp	r4, r3
 800d412:	bf08      	it	eq
 800d414:	68ec      	ldreq	r4, [r5, #12]
 800d416:	e7ca      	b.n	800d3ae <__swbuf_r+0x1a>
 800d418:	4621      	mov	r1, r4
 800d41a:	4628      	mov	r0, r5
 800d41c:	f000 f81a 	bl	800d454 <__swsetup_r>
 800d420:	2800      	cmp	r0, #0
 800d422:	d0cb      	beq.n	800d3bc <__swbuf_r+0x28>
 800d424:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d428:	e7ea      	b.n	800d400 <__swbuf_r+0x6c>
 800d42a:	bf00      	nop
 800d42c:	0800f6e4 	.word	0x0800f6e4
 800d430:	0800f704 	.word	0x0800f704
 800d434:	0800f6c4 	.word	0x0800f6c4

0800d438 <__ascii_wctomb>:
 800d438:	4603      	mov	r3, r0
 800d43a:	4608      	mov	r0, r1
 800d43c:	b141      	cbz	r1, 800d450 <__ascii_wctomb+0x18>
 800d43e:	2aff      	cmp	r2, #255	; 0xff
 800d440:	d904      	bls.n	800d44c <__ascii_wctomb+0x14>
 800d442:	228a      	movs	r2, #138	; 0x8a
 800d444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d448:	601a      	str	r2, [r3, #0]
 800d44a:	4770      	bx	lr
 800d44c:	2001      	movs	r0, #1
 800d44e:	700a      	strb	r2, [r1, #0]
 800d450:	4770      	bx	lr
	...

0800d454 <__swsetup_r>:
 800d454:	4b32      	ldr	r3, [pc, #200]	; (800d520 <__swsetup_r+0xcc>)
 800d456:	b570      	push	{r4, r5, r6, lr}
 800d458:	681d      	ldr	r5, [r3, #0]
 800d45a:	4606      	mov	r6, r0
 800d45c:	460c      	mov	r4, r1
 800d45e:	b125      	cbz	r5, 800d46a <__swsetup_r+0x16>
 800d460:	69ab      	ldr	r3, [r5, #24]
 800d462:	b913      	cbnz	r3, 800d46a <__swsetup_r+0x16>
 800d464:	4628      	mov	r0, r5
 800d466:	f000 f985 	bl	800d774 <__sinit>
 800d46a:	4b2e      	ldr	r3, [pc, #184]	; (800d524 <__swsetup_r+0xd0>)
 800d46c:	429c      	cmp	r4, r3
 800d46e:	d10f      	bne.n	800d490 <__swsetup_r+0x3c>
 800d470:	686c      	ldr	r4, [r5, #4]
 800d472:	89a3      	ldrh	r3, [r4, #12]
 800d474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d478:	0719      	lsls	r1, r3, #28
 800d47a:	d42c      	bmi.n	800d4d6 <__swsetup_r+0x82>
 800d47c:	06dd      	lsls	r5, r3, #27
 800d47e:	d411      	bmi.n	800d4a4 <__swsetup_r+0x50>
 800d480:	2309      	movs	r3, #9
 800d482:	6033      	str	r3, [r6, #0]
 800d484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d48c:	81a3      	strh	r3, [r4, #12]
 800d48e:	e03e      	b.n	800d50e <__swsetup_r+0xba>
 800d490:	4b25      	ldr	r3, [pc, #148]	; (800d528 <__swsetup_r+0xd4>)
 800d492:	429c      	cmp	r4, r3
 800d494:	d101      	bne.n	800d49a <__swsetup_r+0x46>
 800d496:	68ac      	ldr	r4, [r5, #8]
 800d498:	e7eb      	b.n	800d472 <__swsetup_r+0x1e>
 800d49a:	4b24      	ldr	r3, [pc, #144]	; (800d52c <__swsetup_r+0xd8>)
 800d49c:	429c      	cmp	r4, r3
 800d49e:	bf08      	it	eq
 800d4a0:	68ec      	ldreq	r4, [r5, #12]
 800d4a2:	e7e6      	b.n	800d472 <__swsetup_r+0x1e>
 800d4a4:	0758      	lsls	r0, r3, #29
 800d4a6:	d512      	bpl.n	800d4ce <__swsetup_r+0x7a>
 800d4a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4aa:	b141      	cbz	r1, 800d4be <__swsetup_r+0x6a>
 800d4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4b0:	4299      	cmp	r1, r3
 800d4b2:	d002      	beq.n	800d4ba <__swsetup_r+0x66>
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f7ff fb75 	bl	800cba4 <_free_r>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	6363      	str	r3, [r4, #52]	; 0x34
 800d4be:	89a3      	ldrh	r3, [r4, #12]
 800d4c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4c4:	81a3      	strh	r3, [r4, #12]
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	6063      	str	r3, [r4, #4]
 800d4ca:	6923      	ldr	r3, [r4, #16]
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	89a3      	ldrh	r3, [r4, #12]
 800d4d0:	f043 0308 	orr.w	r3, r3, #8
 800d4d4:	81a3      	strh	r3, [r4, #12]
 800d4d6:	6923      	ldr	r3, [r4, #16]
 800d4d8:	b94b      	cbnz	r3, 800d4ee <__swsetup_r+0x9a>
 800d4da:	89a3      	ldrh	r3, [r4, #12]
 800d4dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4e4:	d003      	beq.n	800d4ee <__swsetup_r+0x9a>
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f000 fa07 	bl	800d8fc <__smakebuf_r>
 800d4ee:	89a0      	ldrh	r0, [r4, #12]
 800d4f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4f4:	f010 0301 	ands.w	r3, r0, #1
 800d4f8:	d00a      	beq.n	800d510 <__swsetup_r+0xbc>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	60a3      	str	r3, [r4, #8]
 800d4fe:	6963      	ldr	r3, [r4, #20]
 800d500:	425b      	negs	r3, r3
 800d502:	61a3      	str	r3, [r4, #24]
 800d504:	6923      	ldr	r3, [r4, #16]
 800d506:	b943      	cbnz	r3, 800d51a <__swsetup_r+0xc6>
 800d508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d50c:	d1ba      	bne.n	800d484 <__swsetup_r+0x30>
 800d50e:	bd70      	pop	{r4, r5, r6, pc}
 800d510:	0781      	lsls	r1, r0, #30
 800d512:	bf58      	it	pl
 800d514:	6963      	ldrpl	r3, [r4, #20]
 800d516:	60a3      	str	r3, [r4, #8]
 800d518:	e7f4      	b.n	800d504 <__swsetup_r+0xb0>
 800d51a:	2000      	movs	r0, #0
 800d51c:	e7f7      	b.n	800d50e <__swsetup_r+0xba>
 800d51e:	bf00      	nop
 800d520:	20000170 	.word	0x20000170
 800d524:	0800f6e4 	.word	0x0800f6e4
 800d528:	0800f704 	.word	0x0800f704
 800d52c:	0800f6c4 	.word	0x0800f6c4

0800d530 <abort>:
 800d530:	2006      	movs	r0, #6
 800d532:	b508      	push	{r3, lr}
 800d534:	f000 fa52 	bl	800d9dc <raise>
 800d538:	2001      	movs	r0, #1
 800d53a:	f7f8 feba 	bl	80062b2 <_exit>
	...

0800d540 <__sflush_r>:
 800d540:	898a      	ldrh	r2, [r1, #12]
 800d542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d546:	4605      	mov	r5, r0
 800d548:	0710      	lsls	r0, r2, #28
 800d54a:	460c      	mov	r4, r1
 800d54c:	d458      	bmi.n	800d600 <__sflush_r+0xc0>
 800d54e:	684b      	ldr	r3, [r1, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	dc05      	bgt.n	800d560 <__sflush_r+0x20>
 800d554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d556:	2b00      	cmp	r3, #0
 800d558:	dc02      	bgt.n	800d560 <__sflush_r+0x20>
 800d55a:	2000      	movs	r0, #0
 800d55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d562:	2e00      	cmp	r6, #0
 800d564:	d0f9      	beq.n	800d55a <__sflush_r+0x1a>
 800d566:	2300      	movs	r3, #0
 800d568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d56c:	682f      	ldr	r7, [r5, #0]
 800d56e:	602b      	str	r3, [r5, #0]
 800d570:	d032      	beq.n	800d5d8 <__sflush_r+0x98>
 800d572:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d574:	89a3      	ldrh	r3, [r4, #12]
 800d576:	075a      	lsls	r2, r3, #29
 800d578:	d505      	bpl.n	800d586 <__sflush_r+0x46>
 800d57a:	6863      	ldr	r3, [r4, #4]
 800d57c:	1ac0      	subs	r0, r0, r3
 800d57e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d580:	b10b      	cbz	r3, 800d586 <__sflush_r+0x46>
 800d582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d584:	1ac0      	subs	r0, r0, r3
 800d586:	2300      	movs	r3, #0
 800d588:	4602      	mov	r2, r0
 800d58a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d58c:	4628      	mov	r0, r5
 800d58e:	6a21      	ldr	r1, [r4, #32]
 800d590:	47b0      	blx	r6
 800d592:	1c43      	adds	r3, r0, #1
 800d594:	89a3      	ldrh	r3, [r4, #12]
 800d596:	d106      	bne.n	800d5a6 <__sflush_r+0x66>
 800d598:	6829      	ldr	r1, [r5, #0]
 800d59a:	291d      	cmp	r1, #29
 800d59c:	d82c      	bhi.n	800d5f8 <__sflush_r+0xb8>
 800d59e:	4a2a      	ldr	r2, [pc, #168]	; (800d648 <__sflush_r+0x108>)
 800d5a0:	40ca      	lsrs	r2, r1
 800d5a2:	07d6      	lsls	r6, r2, #31
 800d5a4:	d528      	bpl.n	800d5f8 <__sflush_r+0xb8>
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	6062      	str	r2, [r4, #4]
 800d5aa:	6922      	ldr	r2, [r4, #16]
 800d5ac:	04d9      	lsls	r1, r3, #19
 800d5ae:	6022      	str	r2, [r4, #0]
 800d5b0:	d504      	bpl.n	800d5bc <__sflush_r+0x7c>
 800d5b2:	1c42      	adds	r2, r0, #1
 800d5b4:	d101      	bne.n	800d5ba <__sflush_r+0x7a>
 800d5b6:	682b      	ldr	r3, [r5, #0]
 800d5b8:	b903      	cbnz	r3, 800d5bc <__sflush_r+0x7c>
 800d5ba:	6560      	str	r0, [r4, #84]	; 0x54
 800d5bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5be:	602f      	str	r7, [r5, #0]
 800d5c0:	2900      	cmp	r1, #0
 800d5c2:	d0ca      	beq.n	800d55a <__sflush_r+0x1a>
 800d5c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5c8:	4299      	cmp	r1, r3
 800d5ca:	d002      	beq.n	800d5d2 <__sflush_r+0x92>
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f7ff fae9 	bl	800cba4 <_free_r>
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	6360      	str	r0, [r4, #52]	; 0x34
 800d5d6:	e7c1      	b.n	800d55c <__sflush_r+0x1c>
 800d5d8:	6a21      	ldr	r1, [r4, #32]
 800d5da:	2301      	movs	r3, #1
 800d5dc:	4628      	mov	r0, r5
 800d5de:	47b0      	blx	r6
 800d5e0:	1c41      	adds	r1, r0, #1
 800d5e2:	d1c7      	bne.n	800d574 <__sflush_r+0x34>
 800d5e4:	682b      	ldr	r3, [r5, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d0c4      	beq.n	800d574 <__sflush_r+0x34>
 800d5ea:	2b1d      	cmp	r3, #29
 800d5ec:	d001      	beq.n	800d5f2 <__sflush_r+0xb2>
 800d5ee:	2b16      	cmp	r3, #22
 800d5f0:	d101      	bne.n	800d5f6 <__sflush_r+0xb6>
 800d5f2:	602f      	str	r7, [r5, #0]
 800d5f4:	e7b1      	b.n	800d55a <__sflush_r+0x1a>
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5fc:	81a3      	strh	r3, [r4, #12]
 800d5fe:	e7ad      	b.n	800d55c <__sflush_r+0x1c>
 800d600:	690f      	ldr	r7, [r1, #16]
 800d602:	2f00      	cmp	r7, #0
 800d604:	d0a9      	beq.n	800d55a <__sflush_r+0x1a>
 800d606:	0793      	lsls	r3, r2, #30
 800d608:	bf18      	it	ne
 800d60a:	2300      	movne	r3, #0
 800d60c:	680e      	ldr	r6, [r1, #0]
 800d60e:	bf08      	it	eq
 800d610:	694b      	ldreq	r3, [r1, #20]
 800d612:	eba6 0807 	sub.w	r8, r6, r7
 800d616:	600f      	str	r7, [r1, #0]
 800d618:	608b      	str	r3, [r1, #8]
 800d61a:	f1b8 0f00 	cmp.w	r8, #0
 800d61e:	dd9c      	ble.n	800d55a <__sflush_r+0x1a>
 800d620:	4643      	mov	r3, r8
 800d622:	463a      	mov	r2, r7
 800d624:	4628      	mov	r0, r5
 800d626:	6a21      	ldr	r1, [r4, #32]
 800d628:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d62a:	47b0      	blx	r6
 800d62c:	2800      	cmp	r0, #0
 800d62e:	dc06      	bgt.n	800d63e <__sflush_r+0xfe>
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	e78e      	b.n	800d55c <__sflush_r+0x1c>
 800d63e:	4407      	add	r7, r0
 800d640:	eba8 0800 	sub.w	r8, r8, r0
 800d644:	e7e9      	b.n	800d61a <__sflush_r+0xda>
 800d646:	bf00      	nop
 800d648:	20400001 	.word	0x20400001

0800d64c <_fflush_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	690b      	ldr	r3, [r1, #16]
 800d650:	4605      	mov	r5, r0
 800d652:	460c      	mov	r4, r1
 800d654:	b913      	cbnz	r3, 800d65c <_fflush_r+0x10>
 800d656:	2500      	movs	r5, #0
 800d658:	4628      	mov	r0, r5
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	b118      	cbz	r0, 800d666 <_fflush_r+0x1a>
 800d65e:	6983      	ldr	r3, [r0, #24]
 800d660:	b90b      	cbnz	r3, 800d666 <_fflush_r+0x1a>
 800d662:	f000 f887 	bl	800d774 <__sinit>
 800d666:	4b14      	ldr	r3, [pc, #80]	; (800d6b8 <_fflush_r+0x6c>)
 800d668:	429c      	cmp	r4, r3
 800d66a:	d11b      	bne.n	800d6a4 <_fflush_r+0x58>
 800d66c:	686c      	ldr	r4, [r5, #4]
 800d66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d0ef      	beq.n	800d656 <_fflush_r+0xa>
 800d676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d678:	07d0      	lsls	r0, r2, #31
 800d67a:	d404      	bmi.n	800d686 <_fflush_r+0x3a>
 800d67c:	0599      	lsls	r1, r3, #22
 800d67e:	d402      	bmi.n	800d686 <_fflush_r+0x3a>
 800d680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d682:	f000 f915 	bl	800d8b0 <__retarget_lock_acquire_recursive>
 800d686:	4628      	mov	r0, r5
 800d688:	4621      	mov	r1, r4
 800d68a:	f7ff ff59 	bl	800d540 <__sflush_r>
 800d68e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d690:	4605      	mov	r5, r0
 800d692:	07da      	lsls	r2, r3, #31
 800d694:	d4e0      	bmi.n	800d658 <_fflush_r+0xc>
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	059b      	lsls	r3, r3, #22
 800d69a:	d4dd      	bmi.n	800d658 <_fflush_r+0xc>
 800d69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d69e:	f000 f908 	bl	800d8b2 <__retarget_lock_release_recursive>
 800d6a2:	e7d9      	b.n	800d658 <_fflush_r+0xc>
 800d6a4:	4b05      	ldr	r3, [pc, #20]	; (800d6bc <_fflush_r+0x70>)
 800d6a6:	429c      	cmp	r4, r3
 800d6a8:	d101      	bne.n	800d6ae <_fflush_r+0x62>
 800d6aa:	68ac      	ldr	r4, [r5, #8]
 800d6ac:	e7df      	b.n	800d66e <_fflush_r+0x22>
 800d6ae:	4b04      	ldr	r3, [pc, #16]	; (800d6c0 <_fflush_r+0x74>)
 800d6b0:	429c      	cmp	r4, r3
 800d6b2:	bf08      	it	eq
 800d6b4:	68ec      	ldreq	r4, [r5, #12]
 800d6b6:	e7da      	b.n	800d66e <_fflush_r+0x22>
 800d6b8:	0800f6e4 	.word	0x0800f6e4
 800d6bc:	0800f704 	.word	0x0800f704
 800d6c0:	0800f6c4 	.word	0x0800f6c4

0800d6c4 <std>:
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	b510      	push	{r4, lr}
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	e9c0 3300 	strd	r3, r3, [r0]
 800d6ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6d2:	6083      	str	r3, [r0, #8]
 800d6d4:	8181      	strh	r1, [r0, #12]
 800d6d6:	6643      	str	r3, [r0, #100]	; 0x64
 800d6d8:	81c2      	strh	r2, [r0, #14]
 800d6da:	6183      	str	r3, [r0, #24]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	2208      	movs	r2, #8
 800d6e0:	305c      	adds	r0, #92	; 0x5c
 800d6e2:	f7fd fb99 	bl	800ae18 <memset>
 800d6e6:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <std+0x38>)
 800d6e8:	6224      	str	r4, [r4, #32]
 800d6ea:	6263      	str	r3, [r4, #36]	; 0x24
 800d6ec:	4b04      	ldr	r3, [pc, #16]	; (800d700 <std+0x3c>)
 800d6ee:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6f0:	4b04      	ldr	r3, [pc, #16]	; (800d704 <std+0x40>)
 800d6f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6f4:	4b04      	ldr	r3, [pc, #16]	; (800d708 <std+0x44>)
 800d6f6:	6323      	str	r3, [r4, #48]	; 0x30
 800d6f8:	bd10      	pop	{r4, pc}
 800d6fa:	bf00      	nop
 800d6fc:	0800da15 	.word	0x0800da15
 800d700:	0800da37 	.word	0x0800da37
 800d704:	0800da6f 	.word	0x0800da6f
 800d708:	0800da93 	.word	0x0800da93

0800d70c <_cleanup_r>:
 800d70c:	4901      	ldr	r1, [pc, #4]	; (800d714 <_cleanup_r+0x8>)
 800d70e:	f000 b8af 	b.w	800d870 <_fwalk_reent>
 800d712:	bf00      	nop
 800d714:	0800d64d 	.word	0x0800d64d

0800d718 <__sfmoreglue>:
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	2568      	movs	r5, #104	; 0x68
 800d71c:	1e4a      	subs	r2, r1, #1
 800d71e:	4355      	muls	r5, r2
 800d720:	460e      	mov	r6, r1
 800d722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d726:	f7ff fa89 	bl	800cc3c <_malloc_r>
 800d72a:	4604      	mov	r4, r0
 800d72c:	b140      	cbz	r0, 800d740 <__sfmoreglue+0x28>
 800d72e:	2100      	movs	r1, #0
 800d730:	e9c0 1600 	strd	r1, r6, [r0]
 800d734:	300c      	adds	r0, #12
 800d736:	60a0      	str	r0, [r4, #8]
 800d738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d73c:	f7fd fb6c 	bl	800ae18 <memset>
 800d740:	4620      	mov	r0, r4
 800d742:	bd70      	pop	{r4, r5, r6, pc}

0800d744 <__sfp_lock_acquire>:
 800d744:	4801      	ldr	r0, [pc, #4]	; (800d74c <__sfp_lock_acquire+0x8>)
 800d746:	f000 b8b3 	b.w	800d8b0 <__retarget_lock_acquire_recursive>
 800d74a:	bf00      	nop
 800d74c:	2000145c 	.word	0x2000145c

0800d750 <__sfp_lock_release>:
 800d750:	4801      	ldr	r0, [pc, #4]	; (800d758 <__sfp_lock_release+0x8>)
 800d752:	f000 b8ae 	b.w	800d8b2 <__retarget_lock_release_recursive>
 800d756:	bf00      	nop
 800d758:	2000145c 	.word	0x2000145c

0800d75c <__sinit_lock_acquire>:
 800d75c:	4801      	ldr	r0, [pc, #4]	; (800d764 <__sinit_lock_acquire+0x8>)
 800d75e:	f000 b8a7 	b.w	800d8b0 <__retarget_lock_acquire_recursive>
 800d762:	bf00      	nop
 800d764:	20001457 	.word	0x20001457

0800d768 <__sinit_lock_release>:
 800d768:	4801      	ldr	r0, [pc, #4]	; (800d770 <__sinit_lock_release+0x8>)
 800d76a:	f000 b8a2 	b.w	800d8b2 <__retarget_lock_release_recursive>
 800d76e:	bf00      	nop
 800d770:	20001457 	.word	0x20001457

0800d774 <__sinit>:
 800d774:	b510      	push	{r4, lr}
 800d776:	4604      	mov	r4, r0
 800d778:	f7ff fff0 	bl	800d75c <__sinit_lock_acquire>
 800d77c:	69a3      	ldr	r3, [r4, #24]
 800d77e:	b11b      	cbz	r3, 800d788 <__sinit+0x14>
 800d780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d784:	f7ff bff0 	b.w	800d768 <__sinit_lock_release>
 800d788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d78c:	6523      	str	r3, [r4, #80]	; 0x50
 800d78e:	4b13      	ldr	r3, [pc, #76]	; (800d7dc <__sinit+0x68>)
 800d790:	4a13      	ldr	r2, [pc, #76]	; (800d7e0 <__sinit+0x6c>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	62a2      	str	r2, [r4, #40]	; 0x28
 800d796:	42a3      	cmp	r3, r4
 800d798:	bf08      	it	eq
 800d79a:	2301      	moveq	r3, #1
 800d79c:	4620      	mov	r0, r4
 800d79e:	bf08      	it	eq
 800d7a0:	61a3      	streq	r3, [r4, #24]
 800d7a2:	f000 f81f 	bl	800d7e4 <__sfp>
 800d7a6:	6060      	str	r0, [r4, #4]
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f000 f81b 	bl	800d7e4 <__sfp>
 800d7ae:	60a0      	str	r0, [r4, #8]
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 f817 	bl	800d7e4 <__sfp>
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	2104      	movs	r1, #4
 800d7ba:	60e0      	str	r0, [r4, #12]
 800d7bc:	6860      	ldr	r0, [r4, #4]
 800d7be:	f7ff ff81 	bl	800d6c4 <std>
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	2109      	movs	r1, #9
 800d7c6:	68a0      	ldr	r0, [r4, #8]
 800d7c8:	f7ff ff7c 	bl	800d6c4 <std>
 800d7cc:	2202      	movs	r2, #2
 800d7ce:	2112      	movs	r1, #18
 800d7d0:	68e0      	ldr	r0, [r4, #12]
 800d7d2:	f7ff ff77 	bl	800d6c4 <std>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	61a3      	str	r3, [r4, #24]
 800d7da:	e7d1      	b.n	800d780 <__sinit+0xc>
 800d7dc:	0800f340 	.word	0x0800f340
 800d7e0:	0800d70d 	.word	0x0800d70d

0800d7e4 <__sfp>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	4607      	mov	r7, r0
 800d7e8:	f7ff ffac 	bl	800d744 <__sfp_lock_acquire>
 800d7ec:	4b1e      	ldr	r3, [pc, #120]	; (800d868 <__sfp+0x84>)
 800d7ee:	681e      	ldr	r6, [r3, #0]
 800d7f0:	69b3      	ldr	r3, [r6, #24]
 800d7f2:	b913      	cbnz	r3, 800d7fa <__sfp+0x16>
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f7ff ffbd 	bl	800d774 <__sinit>
 800d7fa:	3648      	adds	r6, #72	; 0x48
 800d7fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d800:	3b01      	subs	r3, #1
 800d802:	d503      	bpl.n	800d80c <__sfp+0x28>
 800d804:	6833      	ldr	r3, [r6, #0]
 800d806:	b30b      	cbz	r3, 800d84c <__sfp+0x68>
 800d808:	6836      	ldr	r6, [r6, #0]
 800d80a:	e7f7      	b.n	800d7fc <__sfp+0x18>
 800d80c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d810:	b9d5      	cbnz	r5, 800d848 <__sfp+0x64>
 800d812:	4b16      	ldr	r3, [pc, #88]	; (800d86c <__sfp+0x88>)
 800d814:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d818:	60e3      	str	r3, [r4, #12]
 800d81a:	6665      	str	r5, [r4, #100]	; 0x64
 800d81c:	f000 f847 	bl	800d8ae <__retarget_lock_init_recursive>
 800d820:	f7ff ff96 	bl	800d750 <__sfp_lock_release>
 800d824:	2208      	movs	r2, #8
 800d826:	4629      	mov	r1, r5
 800d828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d82c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d830:	6025      	str	r5, [r4, #0]
 800d832:	61a5      	str	r5, [r4, #24]
 800d834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d838:	f7fd faee 	bl	800ae18 <memset>
 800d83c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d844:	4620      	mov	r0, r4
 800d846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d848:	3468      	adds	r4, #104	; 0x68
 800d84a:	e7d9      	b.n	800d800 <__sfp+0x1c>
 800d84c:	2104      	movs	r1, #4
 800d84e:	4638      	mov	r0, r7
 800d850:	f7ff ff62 	bl	800d718 <__sfmoreglue>
 800d854:	4604      	mov	r4, r0
 800d856:	6030      	str	r0, [r6, #0]
 800d858:	2800      	cmp	r0, #0
 800d85a:	d1d5      	bne.n	800d808 <__sfp+0x24>
 800d85c:	f7ff ff78 	bl	800d750 <__sfp_lock_release>
 800d860:	230c      	movs	r3, #12
 800d862:	603b      	str	r3, [r7, #0]
 800d864:	e7ee      	b.n	800d844 <__sfp+0x60>
 800d866:	bf00      	nop
 800d868:	0800f340 	.word	0x0800f340
 800d86c:	ffff0001 	.word	0xffff0001

0800d870 <_fwalk_reent>:
 800d870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d874:	4606      	mov	r6, r0
 800d876:	4688      	mov	r8, r1
 800d878:	2700      	movs	r7, #0
 800d87a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d87e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d882:	f1b9 0901 	subs.w	r9, r9, #1
 800d886:	d505      	bpl.n	800d894 <_fwalk_reent+0x24>
 800d888:	6824      	ldr	r4, [r4, #0]
 800d88a:	2c00      	cmp	r4, #0
 800d88c:	d1f7      	bne.n	800d87e <_fwalk_reent+0xe>
 800d88e:	4638      	mov	r0, r7
 800d890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d894:	89ab      	ldrh	r3, [r5, #12]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d907      	bls.n	800d8aa <_fwalk_reent+0x3a>
 800d89a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	d003      	beq.n	800d8aa <_fwalk_reent+0x3a>
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	47c0      	blx	r8
 800d8a8:	4307      	orrs	r7, r0
 800d8aa:	3568      	adds	r5, #104	; 0x68
 800d8ac:	e7e9      	b.n	800d882 <_fwalk_reent+0x12>

0800d8ae <__retarget_lock_init_recursive>:
 800d8ae:	4770      	bx	lr

0800d8b0 <__retarget_lock_acquire_recursive>:
 800d8b0:	4770      	bx	lr

0800d8b2 <__retarget_lock_release_recursive>:
 800d8b2:	4770      	bx	lr

0800d8b4 <__swhatbuf_r>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	460e      	mov	r6, r1
 800d8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8bc:	4614      	mov	r4, r2
 800d8be:	2900      	cmp	r1, #0
 800d8c0:	461d      	mov	r5, r3
 800d8c2:	b096      	sub	sp, #88	; 0x58
 800d8c4:	da07      	bge.n	800d8d6 <__swhatbuf_r+0x22>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	602b      	str	r3, [r5, #0]
 800d8ca:	89b3      	ldrh	r3, [r6, #12]
 800d8cc:	061a      	lsls	r2, r3, #24
 800d8ce:	d410      	bmi.n	800d8f2 <__swhatbuf_r+0x3e>
 800d8d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8d4:	e00e      	b.n	800d8f4 <__swhatbuf_r+0x40>
 800d8d6:	466a      	mov	r2, sp
 800d8d8:	f000 f902 	bl	800dae0 <_fstat_r>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	dbf2      	blt.n	800d8c6 <__swhatbuf_r+0x12>
 800d8e0:	9a01      	ldr	r2, [sp, #4]
 800d8e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8ea:	425a      	negs	r2, r3
 800d8ec:	415a      	adcs	r2, r3
 800d8ee:	602a      	str	r2, [r5, #0]
 800d8f0:	e7ee      	b.n	800d8d0 <__swhatbuf_r+0x1c>
 800d8f2:	2340      	movs	r3, #64	; 0x40
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	6023      	str	r3, [r4, #0]
 800d8f8:	b016      	add	sp, #88	; 0x58
 800d8fa:	bd70      	pop	{r4, r5, r6, pc}

0800d8fc <__smakebuf_r>:
 800d8fc:	898b      	ldrh	r3, [r1, #12]
 800d8fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d900:	079d      	lsls	r5, r3, #30
 800d902:	4606      	mov	r6, r0
 800d904:	460c      	mov	r4, r1
 800d906:	d507      	bpl.n	800d918 <__smakebuf_r+0x1c>
 800d908:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	6123      	str	r3, [r4, #16]
 800d910:	2301      	movs	r3, #1
 800d912:	6163      	str	r3, [r4, #20]
 800d914:	b002      	add	sp, #8
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	466a      	mov	r2, sp
 800d91a:	ab01      	add	r3, sp, #4
 800d91c:	f7ff ffca 	bl	800d8b4 <__swhatbuf_r>
 800d920:	9900      	ldr	r1, [sp, #0]
 800d922:	4605      	mov	r5, r0
 800d924:	4630      	mov	r0, r6
 800d926:	f7ff f989 	bl	800cc3c <_malloc_r>
 800d92a:	b948      	cbnz	r0, 800d940 <__smakebuf_r+0x44>
 800d92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d930:	059a      	lsls	r2, r3, #22
 800d932:	d4ef      	bmi.n	800d914 <__smakebuf_r+0x18>
 800d934:	f023 0303 	bic.w	r3, r3, #3
 800d938:	f043 0302 	orr.w	r3, r3, #2
 800d93c:	81a3      	strh	r3, [r4, #12]
 800d93e:	e7e3      	b.n	800d908 <__smakebuf_r+0xc>
 800d940:	4b0d      	ldr	r3, [pc, #52]	; (800d978 <__smakebuf_r+0x7c>)
 800d942:	62b3      	str	r3, [r6, #40]	; 0x28
 800d944:	89a3      	ldrh	r3, [r4, #12]
 800d946:	6020      	str	r0, [r4, #0]
 800d948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d94c:	81a3      	strh	r3, [r4, #12]
 800d94e:	9b00      	ldr	r3, [sp, #0]
 800d950:	6120      	str	r0, [r4, #16]
 800d952:	6163      	str	r3, [r4, #20]
 800d954:	9b01      	ldr	r3, [sp, #4]
 800d956:	b15b      	cbz	r3, 800d970 <__smakebuf_r+0x74>
 800d958:	4630      	mov	r0, r6
 800d95a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d95e:	f000 f8d1 	bl	800db04 <_isatty_r>
 800d962:	b128      	cbz	r0, 800d970 <__smakebuf_r+0x74>
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	f023 0303 	bic.w	r3, r3, #3
 800d96a:	f043 0301 	orr.w	r3, r3, #1
 800d96e:	81a3      	strh	r3, [r4, #12]
 800d970:	89a0      	ldrh	r0, [r4, #12]
 800d972:	4305      	orrs	r5, r0
 800d974:	81a5      	strh	r5, [r4, #12]
 800d976:	e7cd      	b.n	800d914 <__smakebuf_r+0x18>
 800d978:	0800d70d 	.word	0x0800d70d

0800d97c <_malloc_usable_size_r>:
 800d97c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d980:	1f18      	subs	r0, r3, #4
 800d982:	2b00      	cmp	r3, #0
 800d984:	bfbc      	itt	lt
 800d986:	580b      	ldrlt	r3, [r1, r0]
 800d988:	18c0      	addlt	r0, r0, r3
 800d98a:	4770      	bx	lr

0800d98c <_raise_r>:
 800d98c:	291f      	cmp	r1, #31
 800d98e:	b538      	push	{r3, r4, r5, lr}
 800d990:	4604      	mov	r4, r0
 800d992:	460d      	mov	r5, r1
 800d994:	d904      	bls.n	800d9a0 <_raise_r+0x14>
 800d996:	2316      	movs	r3, #22
 800d998:	6003      	str	r3, [r0, #0]
 800d99a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d99e:	bd38      	pop	{r3, r4, r5, pc}
 800d9a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9a2:	b112      	cbz	r2, 800d9aa <_raise_r+0x1e>
 800d9a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9a8:	b94b      	cbnz	r3, 800d9be <_raise_r+0x32>
 800d9aa:	4620      	mov	r0, r4
 800d9ac:	f000 f830 	bl	800da10 <_getpid_r>
 800d9b0:	462a      	mov	r2, r5
 800d9b2:	4601      	mov	r1, r0
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ba:	f000 b817 	b.w	800d9ec <_kill_r>
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d00a      	beq.n	800d9d8 <_raise_r+0x4c>
 800d9c2:	1c59      	adds	r1, r3, #1
 800d9c4:	d103      	bne.n	800d9ce <_raise_r+0x42>
 800d9c6:	2316      	movs	r3, #22
 800d9c8:	6003      	str	r3, [r0, #0]
 800d9ca:	2001      	movs	r0, #1
 800d9cc:	e7e7      	b.n	800d99e <_raise_r+0x12>
 800d9ce:	2400      	movs	r4, #0
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9d6:	4798      	blx	r3
 800d9d8:	2000      	movs	r0, #0
 800d9da:	e7e0      	b.n	800d99e <_raise_r+0x12>

0800d9dc <raise>:
 800d9dc:	4b02      	ldr	r3, [pc, #8]	; (800d9e8 <raise+0xc>)
 800d9de:	4601      	mov	r1, r0
 800d9e0:	6818      	ldr	r0, [r3, #0]
 800d9e2:	f7ff bfd3 	b.w	800d98c <_raise_r>
 800d9e6:	bf00      	nop
 800d9e8:	20000170 	.word	0x20000170

0800d9ec <_kill_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	4d06      	ldr	r5, [pc, #24]	; (800da0c <_kill_r+0x20>)
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	602b      	str	r3, [r5, #0]
 800d9fa:	f7f8 fc4a 	bl	8006292 <_kill>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	d102      	bne.n	800da08 <_kill_r+0x1c>
 800da02:	682b      	ldr	r3, [r5, #0]
 800da04:	b103      	cbz	r3, 800da08 <_kill_r+0x1c>
 800da06:	6023      	str	r3, [r4, #0]
 800da08:	bd38      	pop	{r3, r4, r5, pc}
 800da0a:	bf00      	nop
 800da0c:	20001450 	.word	0x20001450

0800da10 <_getpid_r>:
 800da10:	f7f8 bc38 	b.w	8006284 <_getpid>

0800da14 <__sread>:
 800da14:	b510      	push	{r4, lr}
 800da16:	460c      	mov	r4, r1
 800da18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da1c:	f000 f894 	bl	800db48 <_read_r>
 800da20:	2800      	cmp	r0, #0
 800da22:	bfab      	itete	ge
 800da24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da26:	89a3      	ldrhlt	r3, [r4, #12]
 800da28:	181b      	addge	r3, r3, r0
 800da2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da2e:	bfac      	ite	ge
 800da30:	6563      	strge	r3, [r4, #84]	; 0x54
 800da32:	81a3      	strhlt	r3, [r4, #12]
 800da34:	bd10      	pop	{r4, pc}

0800da36 <__swrite>:
 800da36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da3a:	461f      	mov	r7, r3
 800da3c:	898b      	ldrh	r3, [r1, #12]
 800da3e:	4605      	mov	r5, r0
 800da40:	05db      	lsls	r3, r3, #23
 800da42:	460c      	mov	r4, r1
 800da44:	4616      	mov	r6, r2
 800da46:	d505      	bpl.n	800da54 <__swrite+0x1e>
 800da48:	2302      	movs	r3, #2
 800da4a:	2200      	movs	r2, #0
 800da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da50:	f000 f868 	bl	800db24 <_lseek_r>
 800da54:	89a3      	ldrh	r3, [r4, #12]
 800da56:	4632      	mov	r2, r6
 800da58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da5c:	81a3      	strh	r3, [r4, #12]
 800da5e:	4628      	mov	r0, r5
 800da60:	463b      	mov	r3, r7
 800da62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da6a:	f000 b817 	b.w	800da9c <_write_r>

0800da6e <__sseek>:
 800da6e:	b510      	push	{r4, lr}
 800da70:	460c      	mov	r4, r1
 800da72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da76:	f000 f855 	bl	800db24 <_lseek_r>
 800da7a:	1c43      	adds	r3, r0, #1
 800da7c:	89a3      	ldrh	r3, [r4, #12]
 800da7e:	bf15      	itete	ne
 800da80:	6560      	strne	r0, [r4, #84]	; 0x54
 800da82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da8a:	81a3      	strheq	r3, [r4, #12]
 800da8c:	bf18      	it	ne
 800da8e:	81a3      	strhne	r3, [r4, #12]
 800da90:	bd10      	pop	{r4, pc}

0800da92 <__sclose>:
 800da92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da96:	f000 b813 	b.w	800dac0 <_close_r>
	...

0800da9c <_write_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	4604      	mov	r4, r0
 800daa0:	4608      	mov	r0, r1
 800daa2:	4611      	mov	r1, r2
 800daa4:	2200      	movs	r2, #0
 800daa6:	4d05      	ldr	r5, [pc, #20]	; (800dabc <_write_r+0x20>)
 800daa8:	602a      	str	r2, [r5, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	f7f8 fc28 	bl	8006300 <_write>
 800dab0:	1c43      	adds	r3, r0, #1
 800dab2:	d102      	bne.n	800daba <_write_r+0x1e>
 800dab4:	682b      	ldr	r3, [r5, #0]
 800dab6:	b103      	cbz	r3, 800daba <_write_r+0x1e>
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	bd38      	pop	{r3, r4, r5, pc}
 800dabc:	20001450 	.word	0x20001450

0800dac0 <_close_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	2300      	movs	r3, #0
 800dac4:	4d05      	ldr	r5, [pc, #20]	; (800dadc <_close_r+0x1c>)
 800dac6:	4604      	mov	r4, r0
 800dac8:	4608      	mov	r0, r1
 800daca:	602b      	str	r3, [r5, #0]
 800dacc:	f7f8 fc34 	bl	8006338 <_close>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d102      	bne.n	800dada <_close_r+0x1a>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	b103      	cbz	r3, 800dada <_close_r+0x1a>
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	20001450 	.word	0x20001450

0800dae0 <_fstat_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	2300      	movs	r3, #0
 800dae4:	4d06      	ldr	r5, [pc, #24]	; (800db00 <_fstat_r+0x20>)
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	4611      	mov	r1, r2
 800daec:	602b      	str	r3, [r5, #0]
 800daee:	f7f8 fc2e 	bl	800634e <_fstat>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	d102      	bne.n	800dafc <_fstat_r+0x1c>
 800daf6:	682b      	ldr	r3, [r5, #0]
 800daf8:	b103      	cbz	r3, 800dafc <_fstat_r+0x1c>
 800dafa:	6023      	str	r3, [r4, #0]
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	bf00      	nop
 800db00:	20001450 	.word	0x20001450

0800db04 <_isatty_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	2300      	movs	r3, #0
 800db08:	4d05      	ldr	r5, [pc, #20]	; (800db20 <_isatty_r+0x1c>)
 800db0a:	4604      	mov	r4, r0
 800db0c:	4608      	mov	r0, r1
 800db0e:	602b      	str	r3, [r5, #0]
 800db10:	f7f8 fc2c 	bl	800636c <_isatty>
 800db14:	1c43      	adds	r3, r0, #1
 800db16:	d102      	bne.n	800db1e <_isatty_r+0x1a>
 800db18:	682b      	ldr	r3, [r5, #0]
 800db1a:	b103      	cbz	r3, 800db1e <_isatty_r+0x1a>
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	bd38      	pop	{r3, r4, r5, pc}
 800db20:	20001450 	.word	0x20001450

0800db24 <_lseek_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4604      	mov	r4, r0
 800db28:	4608      	mov	r0, r1
 800db2a:	4611      	mov	r1, r2
 800db2c:	2200      	movs	r2, #0
 800db2e:	4d05      	ldr	r5, [pc, #20]	; (800db44 <_lseek_r+0x20>)
 800db30:	602a      	str	r2, [r5, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	f7f8 fc24 	bl	8006380 <_lseek>
 800db38:	1c43      	adds	r3, r0, #1
 800db3a:	d102      	bne.n	800db42 <_lseek_r+0x1e>
 800db3c:	682b      	ldr	r3, [r5, #0]
 800db3e:	b103      	cbz	r3, 800db42 <_lseek_r+0x1e>
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	bd38      	pop	{r3, r4, r5, pc}
 800db44:	20001450 	.word	0x20001450

0800db48 <_read_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4604      	mov	r4, r0
 800db4c:	4608      	mov	r0, r1
 800db4e:	4611      	mov	r1, r2
 800db50:	2200      	movs	r2, #0
 800db52:	4d05      	ldr	r5, [pc, #20]	; (800db68 <_read_r+0x20>)
 800db54:	602a      	str	r2, [r5, #0]
 800db56:	461a      	mov	r2, r3
 800db58:	f7f8 fbb5 	bl	80062c6 <_read>
 800db5c:	1c43      	adds	r3, r0, #1
 800db5e:	d102      	bne.n	800db66 <_read_r+0x1e>
 800db60:	682b      	ldr	r3, [r5, #0]
 800db62:	b103      	cbz	r3, 800db66 <_read_r+0x1e>
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	20001450 	.word	0x20001450

0800db6c <acos>:
 800db6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db6e:	4604      	mov	r4, r0
 800db70:	460d      	mov	r5, r1
 800db72:	f000 f901 	bl	800dd78 <__ieee754_acos>
 800db76:	4b11      	ldr	r3, [pc, #68]	; (800dbbc <acos+0x50>)
 800db78:	4606      	mov	r6, r0
 800db7a:	f993 3000 	ldrsb.w	r3, [r3]
 800db7e:	460f      	mov	r7, r1
 800db80:	3301      	adds	r3, #1
 800db82:	d018      	beq.n	800dbb6 <acos+0x4a>
 800db84:	4622      	mov	r2, r4
 800db86:	462b      	mov	r3, r5
 800db88:	4620      	mov	r0, r4
 800db8a:	4629      	mov	r1, r5
 800db8c:	f7f2 ff3e 	bl	8000a0c <__aeabi_dcmpun>
 800db90:	b988      	cbnz	r0, 800dbb6 <acos+0x4a>
 800db92:	4620      	mov	r0, r4
 800db94:	4629      	mov	r1, r5
 800db96:	f001 f8fd 	bl	800ed94 <fabs>
 800db9a:	2200      	movs	r2, #0
 800db9c:	4b08      	ldr	r3, [pc, #32]	; (800dbc0 <acos+0x54>)
 800db9e:	f7f2 ff2b 	bl	80009f8 <__aeabi_dcmpgt>
 800dba2:	b140      	cbz	r0, 800dbb6 <acos+0x4a>
 800dba4:	f7fd f90e 	bl	800adc4 <__errno>
 800dba8:	2321      	movs	r3, #33	; 0x21
 800dbaa:	6003      	str	r3, [r0, #0]
 800dbac:	4805      	ldr	r0, [pc, #20]	; (800dbc4 <acos+0x58>)
 800dbae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbb2:	f001 b8f9 	b.w	800eda8 <nan>
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	4639      	mov	r1, r7
 800dbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbbc:	20000340 	.word	0x20000340
 800dbc0:	3ff00000 	.word	0x3ff00000
 800dbc4:	0800f5b8 	.word	0x0800f5b8

0800dbc8 <pow>:
 800dbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbcc:	461f      	mov	r7, r3
 800dbce:	4680      	mov	r8, r0
 800dbd0:	4689      	mov	r9, r1
 800dbd2:	4616      	mov	r6, r2
 800dbd4:	f000 fb1c 	bl	800e210 <__ieee754_pow>
 800dbd8:	4b4d      	ldr	r3, [pc, #308]	; (800dd10 <pow+0x148>)
 800dbda:	4604      	mov	r4, r0
 800dbdc:	f993 3000 	ldrsb.w	r3, [r3]
 800dbe0:	460d      	mov	r5, r1
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	d015      	beq.n	800dc12 <pow+0x4a>
 800dbe6:	4632      	mov	r2, r6
 800dbe8:	463b      	mov	r3, r7
 800dbea:	4630      	mov	r0, r6
 800dbec:	4639      	mov	r1, r7
 800dbee:	f7f2 ff0d 	bl	8000a0c <__aeabi_dcmpun>
 800dbf2:	b970      	cbnz	r0, 800dc12 <pow+0x4a>
 800dbf4:	4642      	mov	r2, r8
 800dbf6:	464b      	mov	r3, r9
 800dbf8:	4640      	mov	r0, r8
 800dbfa:	4649      	mov	r1, r9
 800dbfc:	f7f2 ff06 	bl	8000a0c <__aeabi_dcmpun>
 800dc00:	2200      	movs	r2, #0
 800dc02:	2300      	movs	r3, #0
 800dc04:	b148      	cbz	r0, 800dc1a <pow+0x52>
 800dc06:	4630      	mov	r0, r6
 800dc08:	4639      	mov	r1, r7
 800dc0a:	f7f2 fecd 	bl	80009a8 <__aeabi_dcmpeq>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d17b      	bne.n	800dd0a <pow+0x142>
 800dc12:	4620      	mov	r0, r4
 800dc14:	4629      	mov	r1, r5
 800dc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	f7f2 fec3 	bl	80009a8 <__aeabi_dcmpeq>
 800dc22:	b1e0      	cbz	r0, 800dc5e <pow+0x96>
 800dc24:	2200      	movs	r2, #0
 800dc26:	2300      	movs	r3, #0
 800dc28:	4630      	mov	r0, r6
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	f7f2 febc 	bl	80009a8 <__aeabi_dcmpeq>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d16a      	bne.n	800dd0a <pow+0x142>
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f001 f8af 	bl	800ed9a <finite>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d0e8      	beq.n	800dc12 <pow+0x4a>
 800dc40:	2200      	movs	r2, #0
 800dc42:	2300      	movs	r3, #0
 800dc44:	4630      	mov	r0, r6
 800dc46:	4639      	mov	r1, r7
 800dc48:	f7f2 feb8 	bl	80009bc <__aeabi_dcmplt>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	d0e0      	beq.n	800dc12 <pow+0x4a>
 800dc50:	f7fd f8b8 	bl	800adc4 <__errno>
 800dc54:	2321      	movs	r3, #33	; 0x21
 800dc56:	2400      	movs	r4, #0
 800dc58:	6003      	str	r3, [r0, #0]
 800dc5a:	4d2e      	ldr	r5, [pc, #184]	; (800dd14 <pow+0x14c>)
 800dc5c:	e7d9      	b.n	800dc12 <pow+0x4a>
 800dc5e:	4620      	mov	r0, r4
 800dc60:	4629      	mov	r1, r5
 800dc62:	f001 f89a 	bl	800ed9a <finite>
 800dc66:	bba8      	cbnz	r0, 800dcd4 <pow+0x10c>
 800dc68:	4640      	mov	r0, r8
 800dc6a:	4649      	mov	r1, r9
 800dc6c:	f001 f895 	bl	800ed9a <finite>
 800dc70:	b380      	cbz	r0, 800dcd4 <pow+0x10c>
 800dc72:	4630      	mov	r0, r6
 800dc74:	4639      	mov	r1, r7
 800dc76:	f001 f890 	bl	800ed9a <finite>
 800dc7a:	b358      	cbz	r0, 800dcd4 <pow+0x10c>
 800dc7c:	4622      	mov	r2, r4
 800dc7e:	462b      	mov	r3, r5
 800dc80:	4620      	mov	r0, r4
 800dc82:	4629      	mov	r1, r5
 800dc84:	f7f2 fec2 	bl	8000a0c <__aeabi_dcmpun>
 800dc88:	b160      	cbz	r0, 800dca4 <pow+0xdc>
 800dc8a:	f7fd f89b 	bl	800adc4 <__errno>
 800dc8e:	2321      	movs	r3, #33	; 0x21
 800dc90:	2200      	movs	r2, #0
 800dc92:	6003      	str	r3, [r0, #0]
 800dc94:	2300      	movs	r3, #0
 800dc96:	4610      	mov	r0, r2
 800dc98:	4619      	mov	r1, r3
 800dc9a:	f7f2 fd47 	bl	800072c <__aeabi_ddiv>
 800dc9e:	4604      	mov	r4, r0
 800dca0:	460d      	mov	r5, r1
 800dca2:	e7b6      	b.n	800dc12 <pow+0x4a>
 800dca4:	f7fd f88e 	bl	800adc4 <__errno>
 800dca8:	2322      	movs	r3, #34	; 0x22
 800dcaa:	2200      	movs	r2, #0
 800dcac:	6003      	str	r3, [r0, #0]
 800dcae:	4649      	mov	r1, r9
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	4640      	mov	r0, r8
 800dcb4:	f7f2 fe82 	bl	80009bc <__aeabi_dcmplt>
 800dcb8:	2400      	movs	r4, #0
 800dcba:	b148      	cbz	r0, 800dcd0 <pow+0x108>
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	f001 f878 	bl	800edb4 <rint>
 800dcc4:	4632      	mov	r2, r6
 800dcc6:	463b      	mov	r3, r7
 800dcc8:	f7f2 fe6e 	bl	80009a8 <__aeabi_dcmpeq>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d0c4      	beq.n	800dc5a <pow+0x92>
 800dcd0:	4d11      	ldr	r5, [pc, #68]	; (800dd18 <pow+0x150>)
 800dcd2:	e79e      	b.n	800dc12 <pow+0x4a>
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	4620      	mov	r0, r4
 800dcda:	4629      	mov	r1, r5
 800dcdc:	f7f2 fe64 	bl	80009a8 <__aeabi_dcmpeq>
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d096      	beq.n	800dc12 <pow+0x4a>
 800dce4:	4640      	mov	r0, r8
 800dce6:	4649      	mov	r1, r9
 800dce8:	f001 f857 	bl	800ed9a <finite>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d090      	beq.n	800dc12 <pow+0x4a>
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	4639      	mov	r1, r7
 800dcf4:	f001 f851 	bl	800ed9a <finite>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	d08a      	beq.n	800dc12 <pow+0x4a>
 800dcfc:	f7fd f862 	bl	800adc4 <__errno>
 800dd00:	2322      	movs	r3, #34	; 0x22
 800dd02:	2400      	movs	r4, #0
 800dd04:	2500      	movs	r5, #0
 800dd06:	6003      	str	r3, [r0, #0]
 800dd08:	e783      	b.n	800dc12 <pow+0x4a>
 800dd0a:	2400      	movs	r4, #0
 800dd0c:	4d03      	ldr	r5, [pc, #12]	; (800dd1c <pow+0x154>)
 800dd0e:	e780      	b.n	800dc12 <pow+0x4a>
 800dd10:	20000340 	.word	0x20000340
 800dd14:	fff00000 	.word	0xfff00000
 800dd18:	7ff00000 	.word	0x7ff00000
 800dd1c:	3ff00000 	.word	0x3ff00000

0800dd20 <sqrt>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	4606      	mov	r6, r0
 800dd24:	460f      	mov	r7, r1
 800dd26:	f000 ff89 	bl	800ec3c <__ieee754_sqrt>
 800dd2a:	4b12      	ldr	r3, [pc, #72]	; (800dd74 <sqrt+0x54>)
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	f993 3000 	ldrsb.w	r3, [r3]
 800dd32:	460d      	mov	r5, r1
 800dd34:	3301      	adds	r3, #1
 800dd36:	d019      	beq.n	800dd6c <sqrt+0x4c>
 800dd38:	4632      	mov	r2, r6
 800dd3a:	463b      	mov	r3, r7
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	4639      	mov	r1, r7
 800dd40:	f7f2 fe64 	bl	8000a0c <__aeabi_dcmpun>
 800dd44:	b990      	cbnz	r0, 800dd6c <sqrt+0x4c>
 800dd46:	2200      	movs	r2, #0
 800dd48:	2300      	movs	r3, #0
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	4639      	mov	r1, r7
 800dd4e:	f7f2 fe35 	bl	80009bc <__aeabi_dcmplt>
 800dd52:	b158      	cbz	r0, 800dd6c <sqrt+0x4c>
 800dd54:	f7fd f836 	bl	800adc4 <__errno>
 800dd58:	2321      	movs	r3, #33	; 0x21
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	6003      	str	r3, [r0, #0]
 800dd5e:	2300      	movs	r3, #0
 800dd60:	4610      	mov	r0, r2
 800dd62:	4619      	mov	r1, r3
 800dd64:	f7f2 fce2 	bl	800072c <__aeabi_ddiv>
 800dd68:	4604      	mov	r4, r0
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	4629      	mov	r1, r5
 800dd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd72:	bf00      	nop
 800dd74:	20000340 	.word	0x20000340

0800dd78 <__ieee754_acos>:
 800dd78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7c:	4cb2      	ldr	r4, [pc, #712]	; (800e048 <__ieee754_acos+0x2d0>)
 800dd7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd82:	42a3      	cmp	r3, r4
 800dd84:	4607      	mov	r7, r0
 800dd86:	460e      	mov	r6, r1
 800dd88:	dd16      	ble.n	800ddb8 <__ieee754_acos+0x40>
 800dd8a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800dd8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dd92:	4303      	orrs	r3, r0
 800dd94:	d107      	bne.n	800dda6 <__ieee754_acos+0x2e>
 800dd96:	2900      	cmp	r1, #0
 800dd98:	f300 8202 	bgt.w	800e1a0 <__ieee754_acos+0x428>
 800dd9c:	a190      	add	r1, pc, #576	; (adr r1, 800dfe0 <__ieee754_acos+0x268>)
 800dd9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dda2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	f7f2 f9dd 	bl	8000168 <__aeabi_dsub>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	f7f2 fcbb 	bl	800072c <__aeabi_ddiv>
 800ddb6:	e7f4      	b.n	800dda2 <__ieee754_acos+0x2a>
 800ddb8:	4ca4      	ldr	r4, [pc, #656]	; (800e04c <__ieee754_acos+0x2d4>)
 800ddba:	42a3      	cmp	r3, r4
 800ddbc:	f300 8083 	bgt.w	800dec6 <__ieee754_acos+0x14e>
 800ddc0:	4aa3      	ldr	r2, [pc, #652]	; (800e050 <__ieee754_acos+0x2d8>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	f340 81ef 	ble.w	800e1a6 <__ieee754_acos+0x42e>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	f7f2 fb84 	bl	80004d8 <__aeabi_dmul>
 800ddd0:	a385      	add	r3, pc, #532	; (adr r3, 800dfe8 <__ieee754_acos+0x270>)
 800ddd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	460d      	mov	r5, r1
 800ddda:	f7f2 fb7d 	bl	80004d8 <__aeabi_dmul>
 800ddde:	a384      	add	r3, pc, #528	; (adr r3, 800dff0 <__ieee754_acos+0x278>)
 800dde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde4:	f7f2 f9c2 	bl	800016c <__adddf3>
 800dde8:	4622      	mov	r2, r4
 800ddea:	462b      	mov	r3, r5
 800ddec:	f7f2 fb74 	bl	80004d8 <__aeabi_dmul>
 800ddf0:	a381      	add	r3, pc, #516	; (adr r3, 800dff8 <__ieee754_acos+0x280>)
 800ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf6:	f7f2 f9b7 	bl	8000168 <__aeabi_dsub>
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	462b      	mov	r3, r5
 800ddfe:	f7f2 fb6b 	bl	80004d8 <__aeabi_dmul>
 800de02:	a37f      	add	r3, pc, #508	; (adr r3, 800e000 <__ieee754_acos+0x288>)
 800de04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de08:	f7f2 f9b0 	bl	800016c <__adddf3>
 800de0c:	4622      	mov	r2, r4
 800de0e:	462b      	mov	r3, r5
 800de10:	f7f2 fb62 	bl	80004d8 <__aeabi_dmul>
 800de14:	a37c      	add	r3, pc, #496	; (adr r3, 800e008 <__ieee754_acos+0x290>)
 800de16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1a:	f7f2 f9a5 	bl	8000168 <__aeabi_dsub>
 800de1e:	4622      	mov	r2, r4
 800de20:	462b      	mov	r3, r5
 800de22:	f7f2 fb59 	bl	80004d8 <__aeabi_dmul>
 800de26:	a37a      	add	r3, pc, #488	; (adr r3, 800e010 <__ieee754_acos+0x298>)
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	f7f2 f99e 	bl	800016c <__adddf3>
 800de30:	4622      	mov	r2, r4
 800de32:	462b      	mov	r3, r5
 800de34:	f7f2 fb50 	bl	80004d8 <__aeabi_dmul>
 800de38:	a377      	add	r3, pc, #476	; (adr r3, 800e018 <__ieee754_acos+0x2a0>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	4680      	mov	r8, r0
 800de40:	4689      	mov	r9, r1
 800de42:	4620      	mov	r0, r4
 800de44:	4629      	mov	r1, r5
 800de46:	f7f2 fb47 	bl	80004d8 <__aeabi_dmul>
 800de4a:	a375      	add	r3, pc, #468	; (adr r3, 800e020 <__ieee754_acos+0x2a8>)
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	f7f2 f98a 	bl	8000168 <__aeabi_dsub>
 800de54:	4622      	mov	r2, r4
 800de56:	462b      	mov	r3, r5
 800de58:	f7f2 fb3e 	bl	80004d8 <__aeabi_dmul>
 800de5c:	a372      	add	r3, pc, #456	; (adr r3, 800e028 <__ieee754_acos+0x2b0>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	f7f2 f983 	bl	800016c <__adddf3>
 800de66:	4622      	mov	r2, r4
 800de68:	462b      	mov	r3, r5
 800de6a:	f7f2 fb35 	bl	80004d8 <__aeabi_dmul>
 800de6e:	a370      	add	r3, pc, #448	; (adr r3, 800e030 <__ieee754_acos+0x2b8>)
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	f7f2 f978 	bl	8000168 <__aeabi_dsub>
 800de78:	4622      	mov	r2, r4
 800de7a:	462b      	mov	r3, r5
 800de7c:	f7f2 fb2c 	bl	80004d8 <__aeabi_dmul>
 800de80:	2200      	movs	r2, #0
 800de82:	4b74      	ldr	r3, [pc, #464]	; (800e054 <__ieee754_acos+0x2dc>)
 800de84:	f7f2 f972 	bl	800016c <__adddf3>
 800de88:	4602      	mov	r2, r0
 800de8a:	460b      	mov	r3, r1
 800de8c:	4640      	mov	r0, r8
 800de8e:	4649      	mov	r1, r9
 800de90:	f7f2 fc4c 	bl	800072c <__aeabi_ddiv>
 800de94:	463a      	mov	r2, r7
 800de96:	4633      	mov	r3, r6
 800de98:	f7f2 fb1e 	bl	80004d8 <__aeabi_dmul>
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	a165      	add	r1, pc, #404	; (adr r1, 800e038 <__ieee754_acos+0x2c0>)
 800dea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dea6:	f7f2 f95f 	bl	8000168 <__aeabi_dsub>
 800deaa:	4602      	mov	r2, r0
 800deac:	460b      	mov	r3, r1
 800deae:	4638      	mov	r0, r7
 800deb0:	4631      	mov	r1, r6
 800deb2:	f7f2 f959 	bl	8000168 <__aeabi_dsub>
 800deb6:	4602      	mov	r2, r0
 800deb8:	460b      	mov	r3, r1
 800deba:	a161      	add	r1, pc, #388	; (adr r1, 800e040 <__ieee754_acos+0x2c8>)
 800debc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dec0:	f7f2 f952 	bl	8000168 <__aeabi_dsub>
 800dec4:	e76d      	b.n	800dda2 <__ieee754_acos+0x2a>
 800dec6:	2900      	cmp	r1, #0
 800dec8:	f280 80c8 	bge.w	800e05c <__ieee754_acos+0x2e4>
 800decc:	2200      	movs	r2, #0
 800dece:	4b61      	ldr	r3, [pc, #388]	; (800e054 <__ieee754_acos+0x2dc>)
 800ded0:	f7f2 f94c 	bl	800016c <__adddf3>
 800ded4:	2200      	movs	r2, #0
 800ded6:	4b60      	ldr	r3, [pc, #384]	; (800e058 <__ieee754_acos+0x2e0>)
 800ded8:	f7f2 fafe 	bl	80004d8 <__aeabi_dmul>
 800dedc:	a342      	add	r3, pc, #264	; (adr r3, 800dfe8 <__ieee754_acos+0x270>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	4604      	mov	r4, r0
 800dee4:	460d      	mov	r5, r1
 800dee6:	f7f2 faf7 	bl	80004d8 <__aeabi_dmul>
 800deea:	a341      	add	r3, pc, #260	; (adr r3, 800dff0 <__ieee754_acos+0x278>)
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	f7f2 f93c 	bl	800016c <__adddf3>
 800def4:	4622      	mov	r2, r4
 800def6:	462b      	mov	r3, r5
 800def8:	f7f2 faee 	bl	80004d8 <__aeabi_dmul>
 800defc:	a33e      	add	r3, pc, #248	; (adr r3, 800dff8 <__ieee754_acos+0x280>)
 800defe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df02:	f7f2 f931 	bl	8000168 <__aeabi_dsub>
 800df06:	4622      	mov	r2, r4
 800df08:	462b      	mov	r3, r5
 800df0a:	f7f2 fae5 	bl	80004d8 <__aeabi_dmul>
 800df0e:	a33c      	add	r3, pc, #240	; (adr r3, 800e000 <__ieee754_acos+0x288>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	f7f2 f92a 	bl	800016c <__adddf3>
 800df18:	4622      	mov	r2, r4
 800df1a:	462b      	mov	r3, r5
 800df1c:	f7f2 fadc 	bl	80004d8 <__aeabi_dmul>
 800df20:	a339      	add	r3, pc, #228	; (adr r3, 800e008 <__ieee754_acos+0x290>)
 800df22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df26:	f7f2 f91f 	bl	8000168 <__aeabi_dsub>
 800df2a:	4622      	mov	r2, r4
 800df2c:	462b      	mov	r3, r5
 800df2e:	f7f2 fad3 	bl	80004d8 <__aeabi_dmul>
 800df32:	a337      	add	r3, pc, #220	; (adr r3, 800e010 <__ieee754_acos+0x298>)
 800df34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df38:	f7f2 f918 	bl	800016c <__adddf3>
 800df3c:	4622      	mov	r2, r4
 800df3e:	462b      	mov	r3, r5
 800df40:	f7f2 faca 	bl	80004d8 <__aeabi_dmul>
 800df44:	4680      	mov	r8, r0
 800df46:	4689      	mov	r9, r1
 800df48:	4620      	mov	r0, r4
 800df4a:	4629      	mov	r1, r5
 800df4c:	f000 fe76 	bl	800ec3c <__ieee754_sqrt>
 800df50:	a331      	add	r3, pc, #196	; (adr r3, 800e018 <__ieee754_acos+0x2a0>)
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	4606      	mov	r6, r0
 800df58:	460f      	mov	r7, r1
 800df5a:	4620      	mov	r0, r4
 800df5c:	4629      	mov	r1, r5
 800df5e:	f7f2 fabb 	bl	80004d8 <__aeabi_dmul>
 800df62:	a32f      	add	r3, pc, #188	; (adr r3, 800e020 <__ieee754_acos+0x2a8>)
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	f7f2 f8fe 	bl	8000168 <__aeabi_dsub>
 800df6c:	4622      	mov	r2, r4
 800df6e:	462b      	mov	r3, r5
 800df70:	f7f2 fab2 	bl	80004d8 <__aeabi_dmul>
 800df74:	a32c      	add	r3, pc, #176	; (adr r3, 800e028 <__ieee754_acos+0x2b0>)
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	f7f2 f8f7 	bl	800016c <__adddf3>
 800df7e:	4622      	mov	r2, r4
 800df80:	462b      	mov	r3, r5
 800df82:	f7f2 faa9 	bl	80004d8 <__aeabi_dmul>
 800df86:	a32a      	add	r3, pc, #168	; (adr r3, 800e030 <__ieee754_acos+0x2b8>)
 800df88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8c:	f7f2 f8ec 	bl	8000168 <__aeabi_dsub>
 800df90:	4622      	mov	r2, r4
 800df92:	462b      	mov	r3, r5
 800df94:	f7f2 faa0 	bl	80004d8 <__aeabi_dmul>
 800df98:	2200      	movs	r2, #0
 800df9a:	4b2e      	ldr	r3, [pc, #184]	; (800e054 <__ieee754_acos+0x2dc>)
 800df9c:	f7f2 f8e6 	bl	800016c <__adddf3>
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	460b      	mov	r3, r1
 800dfa4:	4640      	mov	r0, r8
 800dfa6:	4649      	mov	r1, r9
 800dfa8:	f7f2 fbc0 	bl	800072c <__aeabi_ddiv>
 800dfac:	4632      	mov	r2, r6
 800dfae:	463b      	mov	r3, r7
 800dfb0:	f7f2 fa92 	bl	80004d8 <__aeabi_dmul>
 800dfb4:	a320      	add	r3, pc, #128	; (adr r3, 800e038 <__ieee754_acos+0x2c0>)
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	f7f2 f8d5 	bl	8000168 <__aeabi_dsub>
 800dfbe:	4632      	mov	r2, r6
 800dfc0:	463b      	mov	r3, r7
 800dfc2:	f7f2 f8d3 	bl	800016c <__adddf3>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	460b      	mov	r3, r1
 800dfca:	f7f2 f8cf 	bl	800016c <__adddf3>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	a103      	add	r1, pc, #12	; (adr r1, 800dfe0 <__ieee754_acos+0x268>)
 800dfd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfd8:	e772      	b.n	800dec0 <__ieee754_acos+0x148>
 800dfda:	bf00      	nop
 800dfdc:	f3af 8000 	nop.w
 800dfe0:	54442d18 	.word	0x54442d18
 800dfe4:	400921fb 	.word	0x400921fb
 800dfe8:	0dfdf709 	.word	0x0dfdf709
 800dfec:	3f023de1 	.word	0x3f023de1
 800dff0:	7501b288 	.word	0x7501b288
 800dff4:	3f49efe0 	.word	0x3f49efe0
 800dff8:	b5688f3b 	.word	0xb5688f3b
 800dffc:	3fa48228 	.word	0x3fa48228
 800e000:	0e884455 	.word	0x0e884455
 800e004:	3fc9c155 	.word	0x3fc9c155
 800e008:	03eb6f7d 	.word	0x03eb6f7d
 800e00c:	3fd4d612 	.word	0x3fd4d612
 800e010:	55555555 	.word	0x55555555
 800e014:	3fc55555 	.word	0x3fc55555
 800e018:	b12e9282 	.word	0xb12e9282
 800e01c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e020:	1b8d0159 	.word	0x1b8d0159
 800e024:	3fe6066c 	.word	0x3fe6066c
 800e028:	9c598ac8 	.word	0x9c598ac8
 800e02c:	40002ae5 	.word	0x40002ae5
 800e030:	1c8a2d4b 	.word	0x1c8a2d4b
 800e034:	40033a27 	.word	0x40033a27
 800e038:	33145c07 	.word	0x33145c07
 800e03c:	3c91a626 	.word	0x3c91a626
 800e040:	54442d18 	.word	0x54442d18
 800e044:	3ff921fb 	.word	0x3ff921fb
 800e048:	3fefffff 	.word	0x3fefffff
 800e04c:	3fdfffff 	.word	0x3fdfffff
 800e050:	3c600000 	.word	0x3c600000
 800e054:	3ff00000 	.word	0x3ff00000
 800e058:	3fe00000 	.word	0x3fe00000
 800e05c:	4602      	mov	r2, r0
 800e05e:	460b      	mov	r3, r1
 800e060:	2000      	movs	r0, #0
 800e062:	4969      	ldr	r1, [pc, #420]	; (800e208 <__ieee754_acos+0x490>)
 800e064:	f7f2 f880 	bl	8000168 <__aeabi_dsub>
 800e068:	2200      	movs	r2, #0
 800e06a:	4b68      	ldr	r3, [pc, #416]	; (800e20c <__ieee754_acos+0x494>)
 800e06c:	f7f2 fa34 	bl	80004d8 <__aeabi_dmul>
 800e070:	4604      	mov	r4, r0
 800e072:	460d      	mov	r5, r1
 800e074:	f000 fde2 	bl	800ec3c <__ieee754_sqrt>
 800e078:	a34d      	add	r3, pc, #308	; (adr r3, 800e1b0 <__ieee754_acos+0x438>)
 800e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07e:	4689      	mov	r9, r1
 800e080:	4680      	mov	r8, r0
 800e082:	4629      	mov	r1, r5
 800e084:	4620      	mov	r0, r4
 800e086:	f7f2 fa27 	bl	80004d8 <__aeabi_dmul>
 800e08a:	a34b      	add	r3, pc, #300	; (adr r3, 800e1b8 <__ieee754_acos+0x440>)
 800e08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e090:	f7f2 f86c 	bl	800016c <__adddf3>
 800e094:	4622      	mov	r2, r4
 800e096:	462b      	mov	r3, r5
 800e098:	f7f2 fa1e 	bl	80004d8 <__aeabi_dmul>
 800e09c:	a348      	add	r3, pc, #288	; (adr r3, 800e1c0 <__ieee754_acos+0x448>)
 800e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a2:	f7f2 f861 	bl	8000168 <__aeabi_dsub>
 800e0a6:	4622      	mov	r2, r4
 800e0a8:	462b      	mov	r3, r5
 800e0aa:	f7f2 fa15 	bl	80004d8 <__aeabi_dmul>
 800e0ae:	a346      	add	r3, pc, #280	; (adr r3, 800e1c8 <__ieee754_acos+0x450>)
 800e0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b4:	f7f2 f85a 	bl	800016c <__adddf3>
 800e0b8:	4622      	mov	r2, r4
 800e0ba:	462b      	mov	r3, r5
 800e0bc:	f7f2 fa0c 	bl	80004d8 <__aeabi_dmul>
 800e0c0:	a343      	add	r3, pc, #268	; (adr r3, 800e1d0 <__ieee754_acos+0x458>)
 800e0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c6:	f7f2 f84f 	bl	8000168 <__aeabi_dsub>
 800e0ca:	4622      	mov	r2, r4
 800e0cc:	462b      	mov	r3, r5
 800e0ce:	f7f2 fa03 	bl	80004d8 <__aeabi_dmul>
 800e0d2:	a341      	add	r3, pc, #260	; (adr r3, 800e1d8 <__ieee754_acos+0x460>)
 800e0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d8:	f7f2 f848 	bl	800016c <__adddf3>
 800e0dc:	4622      	mov	r2, r4
 800e0de:	462b      	mov	r3, r5
 800e0e0:	f7f2 f9fa 	bl	80004d8 <__aeabi_dmul>
 800e0e4:	a33e      	add	r3, pc, #248	; (adr r3, 800e1e0 <__ieee754_acos+0x468>)
 800e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ea:	4682      	mov	sl, r0
 800e0ec:	468b      	mov	fp, r1
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	f7f2 f9f1 	bl	80004d8 <__aeabi_dmul>
 800e0f6:	a33c      	add	r3, pc, #240	; (adr r3, 800e1e8 <__ieee754_acos+0x470>)
 800e0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fc:	f7f2 f834 	bl	8000168 <__aeabi_dsub>
 800e100:	4622      	mov	r2, r4
 800e102:	462b      	mov	r3, r5
 800e104:	f7f2 f9e8 	bl	80004d8 <__aeabi_dmul>
 800e108:	a339      	add	r3, pc, #228	; (adr r3, 800e1f0 <__ieee754_acos+0x478>)
 800e10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10e:	f7f2 f82d 	bl	800016c <__adddf3>
 800e112:	4622      	mov	r2, r4
 800e114:	462b      	mov	r3, r5
 800e116:	f7f2 f9df 	bl	80004d8 <__aeabi_dmul>
 800e11a:	a337      	add	r3, pc, #220	; (adr r3, 800e1f8 <__ieee754_acos+0x480>)
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	f7f2 f822 	bl	8000168 <__aeabi_dsub>
 800e124:	4622      	mov	r2, r4
 800e126:	462b      	mov	r3, r5
 800e128:	f7f2 f9d6 	bl	80004d8 <__aeabi_dmul>
 800e12c:	2200      	movs	r2, #0
 800e12e:	4b36      	ldr	r3, [pc, #216]	; (800e208 <__ieee754_acos+0x490>)
 800e130:	f7f2 f81c 	bl	800016c <__adddf3>
 800e134:	4602      	mov	r2, r0
 800e136:	460b      	mov	r3, r1
 800e138:	4650      	mov	r0, sl
 800e13a:	4659      	mov	r1, fp
 800e13c:	f7f2 faf6 	bl	800072c <__aeabi_ddiv>
 800e140:	4642      	mov	r2, r8
 800e142:	464b      	mov	r3, r9
 800e144:	f7f2 f9c8 	bl	80004d8 <__aeabi_dmul>
 800e148:	2600      	movs	r6, #0
 800e14a:	4682      	mov	sl, r0
 800e14c:	468b      	mov	fp, r1
 800e14e:	4632      	mov	r2, r6
 800e150:	464b      	mov	r3, r9
 800e152:	4630      	mov	r0, r6
 800e154:	4649      	mov	r1, r9
 800e156:	f7f2 f9bf 	bl	80004d8 <__aeabi_dmul>
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	4620      	mov	r0, r4
 800e160:	4629      	mov	r1, r5
 800e162:	f7f2 f801 	bl	8000168 <__aeabi_dsub>
 800e166:	4632      	mov	r2, r6
 800e168:	4604      	mov	r4, r0
 800e16a:	460d      	mov	r5, r1
 800e16c:	464b      	mov	r3, r9
 800e16e:	4640      	mov	r0, r8
 800e170:	4649      	mov	r1, r9
 800e172:	f7f1 fffb 	bl	800016c <__adddf3>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	4620      	mov	r0, r4
 800e17c:	4629      	mov	r1, r5
 800e17e:	f7f2 fad5 	bl	800072c <__aeabi_ddiv>
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	4650      	mov	r0, sl
 800e188:	4659      	mov	r1, fp
 800e18a:	f7f1 ffef 	bl	800016c <__adddf3>
 800e18e:	4632      	mov	r2, r6
 800e190:	464b      	mov	r3, r9
 800e192:	f7f1 ffeb 	bl	800016c <__adddf3>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	f7f1 ffe7 	bl	800016c <__adddf3>
 800e19e:	e600      	b.n	800dda2 <__ieee754_acos+0x2a>
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	e5fd      	b.n	800dda2 <__ieee754_acos+0x2a>
 800e1a6:	a116      	add	r1, pc, #88	; (adr r1, 800e200 <__ieee754_acos+0x488>)
 800e1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ac:	e5f9      	b.n	800dda2 <__ieee754_acos+0x2a>
 800e1ae:	bf00      	nop
 800e1b0:	0dfdf709 	.word	0x0dfdf709
 800e1b4:	3f023de1 	.word	0x3f023de1
 800e1b8:	7501b288 	.word	0x7501b288
 800e1bc:	3f49efe0 	.word	0x3f49efe0
 800e1c0:	b5688f3b 	.word	0xb5688f3b
 800e1c4:	3fa48228 	.word	0x3fa48228
 800e1c8:	0e884455 	.word	0x0e884455
 800e1cc:	3fc9c155 	.word	0x3fc9c155
 800e1d0:	03eb6f7d 	.word	0x03eb6f7d
 800e1d4:	3fd4d612 	.word	0x3fd4d612
 800e1d8:	55555555 	.word	0x55555555
 800e1dc:	3fc55555 	.word	0x3fc55555
 800e1e0:	b12e9282 	.word	0xb12e9282
 800e1e4:	3fb3b8c5 	.word	0x3fb3b8c5
 800e1e8:	1b8d0159 	.word	0x1b8d0159
 800e1ec:	3fe6066c 	.word	0x3fe6066c
 800e1f0:	9c598ac8 	.word	0x9c598ac8
 800e1f4:	40002ae5 	.word	0x40002ae5
 800e1f8:	1c8a2d4b 	.word	0x1c8a2d4b
 800e1fc:	40033a27 	.word	0x40033a27
 800e200:	54442d18 	.word	0x54442d18
 800e204:	3ff921fb 	.word	0x3ff921fb
 800e208:	3ff00000 	.word	0x3ff00000
 800e20c:	3fe00000 	.word	0x3fe00000

0800e210 <__ieee754_pow>:
 800e210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e214:	b093      	sub	sp, #76	; 0x4c
 800e216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e21a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800e21e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e222:	ea55 0302 	orrs.w	r3, r5, r2
 800e226:	4607      	mov	r7, r0
 800e228:	4688      	mov	r8, r1
 800e22a:	f000 84bf 	beq.w	800ebac <__ieee754_pow+0x99c>
 800e22e:	4b7e      	ldr	r3, [pc, #504]	; (800e428 <__ieee754_pow+0x218>)
 800e230:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e234:	429c      	cmp	r4, r3
 800e236:	4689      	mov	r9, r1
 800e238:	4682      	mov	sl, r0
 800e23a:	dc09      	bgt.n	800e250 <__ieee754_pow+0x40>
 800e23c:	d103      	bne.n	800e246 <__ieee754_pow+0x36>
 800e23e:	b978      	cbnz	r0, 800e260 <__ieee754_pow+0x50>
 800e240:	42a5      	cmp	r5, r4
 800e242:	dd02      	ble.n	800e24a <__ieee754_pow+0x3a>
 800e244:	e00c      	b.n	800e260 <__ieee754_pow+0x50>
 800e246:	429d      	cmp	r5, r3
 800e248:	dc02      	bgt.n	800e250 <__ieee754_pow+0x40>
 800e24a:	429d      	cmp	r5, r3
 800e24c:	d10e      	bne.n	800e26c <__ieee754_pow+0x5c>
 800e24e:	b16a      	cbz	r2, 800e26c <__ieee754_pow+0x5c>
 800e250:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e254:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e258:	ea54 030a 	orrs.w	r3, r4, sl
 800e25c:	f000 84a6 	beq.w	800ebac <__ieee754_pow+0x99c>
 800e260:	4872      	ldr	r0, [pc, #456]	; (800e42c <__ieee754_pow+0x21c>)
 800e262:	b013      	add	sp, #76	; 0x4c
 800e264:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e268:	f000 bd9e 	b.w	800eda8 <nan>
 800e26c:	f1b9 0f00 	cmp.w	r9, #0
 800e270:	da39      	bge.n	800e2e6 <__ieee754_pow+0xd6>
 800e272:	4b6f      	ldr	r3, [pc, #444]	; (800e430 <__ieee754_pow+0x220>)
 800e274:	429d      	cmp	r5, r3
 800e276:	dc54      	bgt.n	800e322 <__ieee754_pow+0x112>
 800e278:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e27c:	429d      	cmp	r5, r3
 800e27e:	f340 84a6 	ble.w	800ebce <__ieee754_pow+0x9be>
 800e282:	152b      	asrs	r3, r5, #20
 800e284:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e288:	2b14      	cmp	r3, #20
 800e28a:	dd0f      	ble.n	800e2ac <__ieee754_pow+0x9c>
 800e28c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e290:	fa22 f103 	lsr.w	r1, r2, r3
 800e294:	fa01 f303 	lsl.w	r3, r1, r3
 800e298:	4293      	cmp	r3, r2
 800e29a:	f040 8498 	bne.w	800ebce <__ieee754_pow+0x9be>
 800e29e:	f001 0101 	and.w	r1, r1, #1
 800e2a2:	f1c1 0302 	rsb	r3, r1, #2
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	b182      	cbz	r2, 800e2cc <__ieee754_pow+0xbc>
 800e2aa:	e05e      	b.n	800e36a <__ieee754_pow+0x15a>
 800e2ac:	2a00      	cmp	r2, #0
 800e2ae:	d15a      	bne.n	800e366 <__ieee754_pow+0x156>
 800e2b0:	f1c3 0314 	rsb	r3, r3, #20
 800e2b4:	fa45 f103 	asr.w	r1, r5, r3
 800e2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800e2bc:	42ab      	cmp	r3, r5
 800e2be:	f040 8483 	bne.w	800ebc8 <__ieee754_pow+0x9b8>
 800e2c2:	f001 0101 	and.w	r1, r1, #1
 800e2c6:	f1c1 0302 	rsb	r3, r1, #2
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	4b59      	ldr	r3, [pc, #356]	; (800e434 <__ieee754_pow+0x224>)
 800e2ce:	429d      	cmp	r5, r3
 800e2d0:	d130      	bne.n	800e334 <__ieee754_pow+0x124>
 800e2d2:	2e00      	cmp	r6, #0
 800e2d4:	f280 8474 	bge.w	800ebc0 <__ieee754_pow+0x9b0>
 800e2d8:	463a      	mov	r2, r7
 800e2da:	4643      	mov	r3, r8
 800e2dc:	2000      	movs	r0, #0
 800e2de:	4955      	ldr	r1, [pc, #340]	; (800e434 <__ieee754_pow+0x224>)
 800e2e0:	f7f2 fa24 	bl	800072c <__aeabi_ddiv>
 800e2e4:	e02f      	b.n	800e346 <__ieee754_pow+0x136>
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	2a00      	cmp	r2, #0
 800e2ec:	d13d      	bne.n	800e36a <__ieee754_pow+0x15a>
 800e2ee:	4b4e      	ldr	r3, [pc, #312]	; (800e428 <__ieee754_pow+0x218>)
 800e2f0:	429d      	cmp	r5, r3
 800e2f2:	d1eb      	bne.n	800e2cc <__ieee754_pow+0xbc>
 800e2f4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e2f8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e2fc:	ea53 030a 	orrs.w	r3, r3, sl
 800e300:	f000 8454 	beq.w	800ebac <__ieee754_pow+0x99c>
 800e304:	4b4c      	ldr	r3, [pc, #304]	; (800e438 <__ieee754_pow+0x228>)
 800e306:	429c      	cmp	r4, r3
 800e308:	dd0d      	ble.n	800e326 <__ieee754_pow+0x116>
 800e30a:	2e00      	cmp	r6, #0
 800e30c:	f280 8454 	bge.w	800ebb8 <__ieee754_pow+0x9a8>
 800e310:	f04f 0b00 	mov.w	fp, #0
 800e314:	f04f 0c00 	mov.w	ip, #0
 800e318:	4658      	mov	r0, fp
 800e31a:	4661      	mov	r1, ip
 800e31c:	b013      	add	sp, #76	; 0x4c
 800e31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e322:	2302      	movs	r3, #2
 800e324:	e7e0      	b.n	800e2e8 <__ieee754_pow+0xd8>
 800e326:	2e00      	cmp	r6, #0
 800e328:	daf2      	bge.n	800e310 <__ieee754_pow+0x100>
 800e32a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800e32e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800e332:	e7f1      	b.n	800e318 <__ieee754_pow+0x108>
 800e334:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800e338:	d108      	bne.n	800e34c <__ieee754_pow+0x13c>
 800e33a:	463a      	mov	r2, r7
 800e33c:	4643      	mov	r3, r8
 800e33e:	4638      	mov	r0, r7
 800e340:	4641      	mov	r1, r8
 800e342:	f7f2 f8c9 	bl	80004d8 <__aeabi_dmul>
 800e346:	4683      	mov	fp, r0
 800e348:	468c      	mov	ip, r1
 800e34a:	e7e5      	b.n	800e318 <__ieee754_pow+0x108>
 800e34c:	4b3b      	ldr	r3, [pc, #236]	; (800e43c <__ieee754_pow+0x22c>)
 800e34e:	429e      	cmp	r6, r3
 800e350:	d10b      	bne.n	800e36a <__ieee754_pow+0x15a>
 800e352:	f1b9 0f00 	cmp.w	r9, #0
 800e356:	db08      	blt.n	800e36a <__ieee754_pow+0x15a>
 800e358:	4638      	mov	r0, r7
 800e35a:	4641      	mov	r1, r8
 800e35c:	b013      	add	sp, #76	; 0x4c
 800e35e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e362:	f000 bc6b 	b.w	800ec3c <__ieee754_sqrt>
 800e366:	2300      	movs	r3, #0
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	4638      	mov	r0, r7
 800e36c:	4641      	mov	r1, r8
 800e36e:	f000 fd11 	bl	800ed94 <fabs>
 800e372:	4683      	mov	fp, r0
 800e374:	468c      	mov	ip, r1
 800e376:	f1ba 0f00 	cmp.w	sl, #0
 800e37a:	d129      	bne.n	800e3d0 <__ieee754_pow+0x1c0>
 800e37c:	b124      	cbz	r4, 800e388 <__ieee754_pow+0x178>
 800e37e:	4b2d      	ldr	r3, [pc, #180]	; (800e434 <__ieee754_pow+0x224>)
 800e380:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800e384:	429a      	cmp	r2, r3
 800e386:	d123      	bne.n	800e3d0 <__ieee754_pow+0x1c0>
 800e388:	2e00      	cmp	r6, #0
 800e38a:	da07      	bge.n	800e39c <__ieee754_pow+0x18c>
 800e38c:	465a      	mov	r2, fp
 800e38e:	4663      	mov	r3, ip
 800e390:	2000      	movs	r0, #0
 800e392:	4928      	ldr	r1, [pc, #160]	; (800e434 <__ieee754_pow+0x224>)
 800e394:	f7f2 f9ca 	bl	800072c <__aeabi_ddiv>
 800e398:	4683      	mov	fp, r0
 800e39a:	468c      	mov	ip, r1
 800e39c:	f1b9 0f00 	cmp.w	r9, #0
 800e3a0:	daba      	bge.n	800e318 <__ieee754_pow+0x108>
 800e3a2:	9b00      	ldr	r3, [sp, #0]
 800e3a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e3a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e3ac:	4323      	orrs	r3, r4
 800e3ae:	d108      	bne.n	800e3c2 <__ieee754_pow+0x1b2>
 800e3b0:	465a      	mov	r2, fp
 800e3b2:	4663      	mov	r3, ip
 800e3b4:	4658      	mov	r0, fp
 800e3b6:	4661      	mov	r1, ip
 800e3b8:	f7f1 fed6 	bl	8000168 <__aeabi_dsub>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	460b      	mov	r3, r1
 800e3c0:	e78e      	b.n	800e2e0 <__ieee754_pow+0xd0>
 800e3c2:	9b00      	ldr	r3, [sp, #0]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d1a7      	bne.n	800e318 <__ieee754_pow+0x108>
 800e3c8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800e3cc:	469c      	mov	ip, r3
 800e3ce:	e7a3      	b.n	800e318 <__ieee754_pow+0x108>
 800e3d0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	930c      	str	r3, [sp, #48]	; 0x30
 800e3d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e3da:	9b00      	ldr	r3, [sp, #0]
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	d104      	bne.n	800e3ea <__ieee754_pow+0x1da>
 800e3e0:	463a      	mov	r2, r7
 800e3e2:	4643      	mov	r3, r8
 800e3e4:	4638      	mov	r0, r7
 800e3e6:	4641      	mov	r1, r8
 800e3e8:	e7e6      	b.n	800e3b8 <__ieee754_pow+0x1a8>
 800e3ea:	4b15      	ldr	r3, [pc, #84]	; (800e440 <__ieee754_pow+0x230>)
 800e3ec:	429d      	cmp	r5, r3
 800e3ee:	f340 80f9 	ble.w	800e5e4 <__ieee754_pow+0x3d4>
 800e3f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e3f6:	429d      	cmp	r5, r3
 800e3f8:	4b0f      	ldr	r3, [pc, #60]	; (800e438 <__ieee754_pow+0x228>)
 800e3fa:	dd09      	ble.n	800e410 <__ieee754_pow+0x200>
 800e3fc:	429c      	cmp	r4, r3
 800e3fe:	dc0c      	bgt.n	800e41a <__ieee754_pow+0x20a>
 800e400:	2e00      	cmp	r6, #0
 800e402:	da85      	bge.n	800e310 <__ieee754_pow+0x100>
 800e404:	a306      	add	r3, pc, #24	; (adr r3, 800e420 <__ieee754_pow+0x210>)
 800e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40a:	4610      	mov	r0, r2
 800e40c:	4619      	mov	r1, r3
 800e40e:	e798      	b.n	800e342 <__ieee754_pow+0x132>
 800e410:	429c      	cmp	r4, r3
 800e412:	dbf5      	blt.n	800e400 <__ieee754_pow+0x1f0>
 800e414:	4b07      	ldr	r3, [pc, #28]	; (800e434 <__ieee754_pow+0x224>)
 800e416:	429c      	cmp	r4, r3
 800e418:	dd14      	ble.n	800e444 <__ieee754_pow+0x234>
 800e41a:	2e00      	cmp	r6, #0
 800e41c:	dcf2      	bgt.n	800e404 <__ieee754_pow+0x1f4>
 800e41e:	e777      	b.n	800e310 <__ieee754_pow+0x100>
 800e420:	8800759c 	.word	0x8800759c
 800e424:	7e37e43c 	.word	0x7e37e43c
 800e428:	7ff00000 	.word	0x7ff00000
 800e42c:	0800f5b8 	.word	0x0800f5b8
 800e430:	433fffff 	.word	0x433fffff
 800e434:	3ff00000 	.word	0x3ff00000
 800e438:	3fefffff 	.word	0x3fefffff
 800e43c:	3fe00000 	.word	0x3fe00000
 800e440:	41e00000 	.word	0x41e00000
 800e444:	4661      	mov	r1, ip
 800e446:	2200      	movs	r2, #0
 800e448:	4658      	mov	r0, fp
 800e44a:	4b61      	ldr	r3, [pc, #388]	; (800e5d0 <__ieee754_pow+0x3c0>)
 800e44c:	f7f1 fe8c 	bl	8000168 <__aeabi_dsub>
 800e450:	a355      	add	r3, pc, #340	; (adr r3, 800e5a8 <__ieee754_pow+0x398>)
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	4604      	mov	r4, r0
 800e458:	460d      	mov	r5, r1
 800e45a:	f7f2 f83d 	bl	80004d8 <__aeabi_dmul>
 800e45e:	a354      	add	r3, pc, #336	; (adr r3, 800e5b0 <__ieee754_pow+0x3a0>)
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	4606      	mov	r6, r0
 800e466:	460f      	mov	r7, r1
 800e468:	4620      	mov	r0, r4
 800e46a:	4629      	mov	r1, r5
 800e46c:	f7f2 f834 	bl	80004d8 <__aeabi_dmul>
 800e470:	2200      	movs	r2, #0
 800e472:	4682      	mov	sl, r0
 800e474:	468b      	mov	fp, r1
 800e476:	4620      	mov	r0, r4
 800e478:	4629      	mov	r1, r5
 800e47a:	4b56      	ldr	r3, [pc, #344]	; (800e5d4 <__ieee754_pow+0x3c4>)
 800e47c:	f7f2 f82c 	bl	80004d8 <__aeabi_dmul>
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	a14c      	add	r1, pc, #304	; (adr r1, 800e5b8 <__ieee754_pow+0x3a8>)
 800e486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e48a:	f7f1 fe6d 	bl	8000168 <__aeabi_dsub>
 800e48e:	4622      	mov	r2, r4
 800e490:	462b      	mov	r3, r5
 800e492:	f7f2 f821 	bl	80004d8 <__aeabi_dmul>
 800e496:	4602      	mov	r2, r0
 800e498:	460b      	mov	r3, r1
 800e49a:	2000      	movs	r0, #0
 800e49c:	494e      	ldr	r1, [pc, #312]	; (800e5d8 <__ieee754_pow+0x3c8>)
 800e49e:	f7f1 fe63 	bl	8000168 <__aeabi_dsub>
 800e4a2:	4622      	mov	r2, r4
 800e4a4:	462b      	mov	r3, r5
 800e4a6:	4680      	mov	r8, r0
 800e4a8:	4689      	mov	r9, r1
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	f7f2 f813 	bl	80004d8 <__aeabi_dmul>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	4640      	mov	r0, r8
 800e4b8:	4649      	mov	r1, r9
 800e4ba:	f7f2 f80d 	bl	80004d8 <__aeabi_dmul>
 800e4be:	a340      	add	r3, pc, #256	; (adr r3, 800e5c0 <__ieee754_pow+0x3b0>)
 800e4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c4:	f7f2 f808 	bl	80004d8 <__aeabi_dmul>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	4650      	mov	r0, sl
 800e4ce:	4659      	mov	r1, fp
 800e4d0:	f7f1 fe4a 	bl	8000168 <__aeabi_dsub>
 800e4d4:	f04f 0a00 	mov.w	sl, #0
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4604      	mov	r4, r0
 800e4de:	460d      	mov	r5, r1
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	f7f1 fe42 	bl	800016c <__adddf3>
 800e4e8:	4632      	mov	r2, r6
 800e4ea:	463b      	mov	r3, r7
 800e4ec:	4650      	mov	r0, sl
 800e4ee:	468b      	mov	fp, r1
 800e4f0:	f7f1 fe3a 	bl	8000168 <__aeabi_dsub>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	f7f1 fe34 	bl	8000168 <__aeabi_dsub>
 800e500:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e504:	9b00      	ldr	r3, [sp, #0]
 800e506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e508:	3b01      	subs	r3, #1
 800e50a:	4313      	orrs	r3, r2
 800e50c:	f04f 0600 	mov.w	r6, #0
 800e510:	f04f 0200 	mov.w	r2, #0
 800e514:	bf0c      	ite	eq
 800e516:	4b31      	ldreq	r3, [pc, #196]	; (800e5dc <__ieee754_pow+0x3cc>)
 800e518:	4b2d      	ldrne	r3, [pc, #180]	; (800e5d0 <__ieee754_pow+0x3c0>)
 800e51a:	4604      	mov	r4, r0
 800e51c:	460d      	mov	r5, r1
 800e51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e522:	e9cd 2300 	strd	r2, r3, [sp]
 800e526:	4632      	mov	r2, r6
 800e528:	463b      	mov	r3, r7
 800e52a:	f7f1 fe1d 	bl	8000168 <__aeabi_dsub>
 800e52e:	4652      	mov	r2, sl
 800e530:	465b      	mov	r3, fp
 800e532:	f7f1 ffd1 	bl	80004d8 <__aeabi_dmul>
 800e536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e53a:	4680      	mov	r8, r0
 800e53c:	4689      	mov	r9, r1
 800e53e:	4620      	mov	r0, r4
 800e540:	4629      	mov	r1, r5
 800e542:	f7f1 ffc9 	bl	80004d8 <__aeabi_dmul>
 800e546:	4602      	mov	r2, r0
 800e548:	460b      	mov	r3, r1
 800e54a:	4640      	mov	r0, r8
 800e54c:	4649      	mov	r1, r9
 800e54e:	f7f1 fe0d 	bl	800016c <__adddf3>
 800e552:	4632      	mov	r2, r6
 800e554:	463b      	mov	r3, r7
 800e556:	4680      	mov	r8, r0
 800e558:	4689      	mov	r9, r1
 800e55a:	4650      	mov	r0, sl
 800e55c:	4659      	mov	r1, fp
 800e55e:	f7f1 ffbb 	bl	80004d8 <__aeabi_dmul>
 800e562:	4604      	mov	r4, r0
 800e564:	460d      	mov	r5, r1
 800e566:	460b      	mov	r3, r1
 800e568:	4602      	mov	r2, r0
 800e56a:	4649      	mov	r1, r9
 800e56c:	4640      	mov	r0, r8
 800e56e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e572:	f7f1 fdfb 	bl	800016c <__adddf3>
 800e576:	4b1a      	ldr	r3, [pc, #104]	; (800e5e0 <__ieee754_pow+0x3d0>)
 800e578:	4682      	mov	sl, r0
 800e57a:	4299      	cmp	r1, r3
 800e57c:	460f      	mov	r7, r1
 800e57e:	460e      	mov	r6, r1
 800e580:	f340 82ed 	ble.w	800eb5e <__ieee754_pow+0x94e>
 800e584:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e588:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e58c:	4303      	orrs	r3, r0
 800e58e:	f000 81e7 	beq.w	800e960 <__ieee754_pow+0x750>
 800e592:	a30d      	add	r3, pc, #52	; (adr r3, 800e5c8 <__ieee754_pow+0x3b8>)
 800e594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e598:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e59c:	f7f1 ff9c 	bl	80004d8 <__aeabi_dmul>
 800e5a0:	a309      	add	r3, pc, #36	; (adr r3, 800e5c8 <__ieee754_pow+0x3b8>)
 800e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a6:	e6cc      	b.n	800e342 <__ieee754_pow+0x132>
 800e5a8:	60000000 	.word	0x60000000
 800e5ac:	3ff71547 	.word	0x3ff71547
 800e5b0:	f85ddf44 	.word	0xf85ddf44
 800e5b4:	3e54ae0b 	.word	0x3e54ae0b
 800e5b8:	55555555 	.word	0x55555555
 800e5bc:	3fd55555 	.word	0x3fd55555
 800e5c0:	652b82fe 	.word	0x652b82fe
 800e5c4:	3ff71547 	.word	0x3ff71547
 800e5c8:	8800759c 	.word	0x8800759c
 800e5cc:	7e37e43c 	.word	0x7e37e43c
 800e5d0:	3ff00000 	.word	0x3ff00000
 800e5d4:	3fd00000 	.word	0x3fd00000
 800e5d8:	3fe00000 	.word	0x3fe00000
 800e5dc:	bff00000 	.word	0xbff00000
 800e5e0:	408fffff 	.word	0x408fffff
 800e5e4:	4bd4      	ldr	r3, [pc, #848]	; (800e938 <__ieee754_pow+0x728>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	ea09 0303 	and.w	r3, r9, r3
 800e5ec:	b943      	cbnz	r3, 800e600 <__ieee754_pow+0x3f0>
 800e5ee:	4658      	mov	r0, fp
 800e5f0:	4661      	mov	r1, ip
 800e5f2:	4bd2      	ldr	r3, [pc, #840]	; (800e93c <__ieee754_pow+0x72c>)
 800e5f4:	f7f1 ff70 	bl	80004d8 <__aeabi_dmul>
 800e5f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e5fc:	4683      	mov	fp, r0
 800e5fe:	460c      	mov	r4, r1
 800e600:	1523      	asrs	r3, r4, #20
 800e602:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e606:	4413      	add	r3, r2
 800e608:	930b      	str	r3, [sp, #44]	; 0x2c
 800e60a:	4bcd      	ldr	r3, [pc, #820]	; (800e940 <__ieee754_pow+0x730>)
 800e60c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e610:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e614:	429c      	cmp	r4, r3
 800e616:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e61a:	dd08      	ble.n	800e62e <__ieee754_pow+0x41e>
 800e61c:	4bc9      	ldr	r3, [pc, #804]	; (800e944 <__ieee754_pow+0x734>)
 800e61e:	429c      	cmp	r4, r3
 800e620:	f340 819c 	ble.w	800e95c <__ieee754_pow+0x74c>
 800e624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e626:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e62a:	3301      	adds	r3, #1
 800e62c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e62e:	2600      	movs	r6, #0
 800e630:	00f3      	lsls	r3, r6, #3
 800e632:	930d      	str	r3, [sp, #52]	; 0x34
 800e634:	4bc4      	ldr	r3, [pc, #784]	; (800e948 <__ieee754_pow+0x738>)
 800e636:	4658      	mov	r0, fp
 800e638:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e63c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e640:	4629      	mov	r1, r5
 800e642:	461a      	mov	r2, r3
 800e644:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e648:	4623      	mov	r3, r4
 800e64a:	f7f1 fd8d 	bl	8000168 <__aeabi_dsub>
 800e64e:	46da      	mov	sl, fp
 800e650:	462b      	mov	r3, r5
 800e652:	4652      	mov	r2, sl
 800e654:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e658:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e65c:	f7f1 fd86 	bl	800016c <__adddf3>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	2000      	movs	r0, #0
 800e666:	49b9      	ldr	r1, [pc, #740]	; (800e94c <__ieee754_pow+0x73c>)
 800e668:	f7f2 f860 	bl	800072c <__aeabi_ddiv>
 800e66c:	4602      	mov	r2, r0
 800e66e:	460b      	mov	r3, r1
 800e670:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e674:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e678:	f7f1 ff2e 	bl	80004d8 <__aeabi_dmul>
 800e67c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e680:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e684:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e688:	2300      	movs	r3, #0
 800e68a:	2200      	movs	r2, #0
 800e68c:	46ab      	mov	fp, r5
 800e68e:	106d      	asrs	r5, r5, #1
 800e690:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e694:	9304      	str	r3, [sp, #16]
 800e696:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e69a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e69e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	4649      	mov	r1, r9
 800e6a6:	4614      	mov	r4, r2
 800e6a8:	461d      	mov	r5, r3
 800e6aa:	f7f1 ff15 	bl	80004d8 <__aeabi_dmul>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e6b6:	f7f1 fd57 	bl	8000168 <__aeabi_dsub>
 800e6ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e6be:	4606      	mov	r6, r0
 800e6c0:	460f      	mov	r7, r1
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	f7f1 fd4f 	bl	8000168 <__aeabi_dsub>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	4650      	mov	r0, sl
 800e6d0:	4659      	mov	r1, fp
 800e6d2:	f7f1 fd49 	bl	8000168 <__aeabi_dsub>
 800e6d6:	4642      	mov	r2, r8
 800e6d8:	464b      	mov	r3, r9
 800e6da:	f7f1 fefd 	bl	80004d8 <__aeabi_dmul>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	4639      	mov	r1, r7
 800e6e6:	f7f1 fd3f 	bl	8000168 <__aeabi_dsub>
 800e6ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e6ee:	f7f1 fef3 	bl	80004d8 <__aeabi_dmul>
 800e6f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e6fa:	4610      	mov	r0, r2
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	f7f1 feeb 	bl	80004d8 <__aeabi_dmul>
 800e702:	a37b      	add	r3, pc, #492	; (adr r3, 800e8f0 <__ieee754_pow+0x6e0>)
 800e704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e708:	4604      	mov	r4, r0
 800e70a:	460d      	mov	r5, r1
 800e70c:	f7f1 fee4 	bl	80004d8 <__aeabi_dmul>
 800e710:	a379      	add	r3, pc, #484	; (adr r3, 800e8f8 <__ieee754_pow+0x6e8>)
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	f7f1 fd29 	bl	800016c <__adddf3>
 800e71a:	4622      	mov	r2, r4
 800e71c:	462b      	mov	r3, r5
 800e71e:	f7f1 fedb 	bl	80004d8 <__aeabi_dmul>
 800e722:	a377      	add	r3, pc, #476	; (adr r3, 800e900 <__ieee754_pow+0x6f0>)
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	f7f1 fd20 	bl	800016c <__adddf3>
 800e72c:	4622      	mov	r2, r4
 800e72e:	462b      	mov	r3, r5
 800e730:	f7f1 fed2 	bl	80004d8 <__aeabi_dmul>
 800e734:	a374      	add	r3, pc, #464	; (adr r3, 800e908 <__ieee754_pow+0x6f8>)
 800e736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73a:	f7f1 fd17 	bl	800016c <__adddf3>
 800e73e:	4622      	mov	r2, r4
 800e740:	462b      	mov	r3, r5
 800e742:	f7f1 fec9 	bl	80004d8 <__aeabi_dmul>
 800e746:	a372      	add	r3, pc, #456	; (adr r3, 800e910 <__ieee754_pow+0x700>)
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	f7f1 fd0e 	bl	800016c <__adddf3>
 800e750:	4622      	mov	r2, r4
 800e752:	462b      	mov	r3, r5
 800e754:	f7f1 fec0 	bl	80004d8 <__aeabi_dmul>
 800e758:	a36f      	add	r3, pc, #444	; (adr r3, 800e918 <__ieee754_pow+0x708>)
 800e75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75e:	f7f1 fd05 	bl	800016c <__adddf3>
 800e762:	4622      	mov	r2, r4
 800e764:	4606      	mov	r6, r0
 800e766:	460f      	mov	r7, r1
 800e768:	462b      	mov	r3, r5
 800e76a:	4620      	mov	r0, r4
 800e76c:	4629      	mov	r1, r5
 800e76e:	f7f1 feb3 	bl	80004d8 <__aeabi_dmul>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	4630      	mov	r0, r6
 800e778:	4639      	mov	r1, r7
 800e77a:	f7f1 fead 	bl	80004d8 <__aeabi_dmul>
 800e77e:	4604      	mov	r4, r0
 800e780:	460d      	mov	r5, r1
 800e782:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e786:	4642      	mov	r2, r8
 800e788:	464b      	mov	r3, r9
 800e78a:	f7f1 fcef 	bl	800016c <__adddf3>
 800e78e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e792:	f7f1 fea1 	bl	80004d8 <__aeabi_dmul>
 800e796:	4622      	mov	r2, r4
 800e798:	462b      	mov	r3, r5
 800e79a:	f7f1 fce7 	bl	800016c <__adddf3>
 800e79e:	4642      	mov	r2, r8
 800e7a0:	4606      	mov	r6, r0
 800e7a2:	460f      	mov	r7, r1
 800e7a4:	464b      	mov	r3, r9
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	4649      	mov	r1, r9
 800e7aa:	f7f1 fe95 	bl	80004d8 <__aeabi_dmul>
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	4b67      	ldr	r3, [pc, #412]	; (800e950 <__ieee754_pow+0x740>)
 800e7b2:	4682      	mov	sl, r0
 800e7b4:	468b      	mov	fp, r1
 800e7b6:	f7f1 fcd9 	bl	800016c <__adddf3>
 800e7ba:	4632      	mov	r2, r6
 800e7bc:	463b      	mov	r3, r7
 800e7be:	f7f1 fcd5 	bl	800016c <__adddf3>
 800e7c2:	9c04      	ldr	r4, [sp, #16]
 800e7c4:	460d      	mov	r5, r1
 800e7c6:	4622      	mov	r2, r4
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	4640      	mov	r0, r8
 800e7cc:	4649      	mov	r1, r9
 800e7ce:	f7f1 fe83 	bl	80004d8 <__aeabi_dmul>
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	4680      	mov	r8, r0
 800e7d6:	4689      	mov	r9, r1
 800e7d8:	4620      	mov	r0, r4
 800e7da:	4629      	mov	r1, r5
 800e7dc:	4b5c      	ldr	r3, [pc, #368]	; (800e950 <__ieee754_pow+0x740>)
 800e7de:	f7f1 fcc3 	bl	8000168 <__aeabi_dsub>
 800e7e2:	4652      	mov	r2, sl
 800e7e4:	465b      	mov	r3, fp
 800e7e6:	f7f1 fcbf 	bl	8000168 <__aeabi_dsub>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	4639      	mov	r1, r7
 800e7f2:	f7f1 fcb9 	bl	8000168 <__aeabi_dsub>
 800e7f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e7fa:	f7f1 fe6d 	bl	80004d8 <__aeabi_dmul>
 800e7fe:	4622      	mov	r2, r4
 800e800:	4606      	mov	r6, r0
 800e802:	460f      	mov	r7, r1
 800e804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e808:	462b      	mov	r3, r5
 800e80a:	f7f1 fe65 	bl	80004d8 <__aeabi_dmul>
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	4630      	mov	r0, r6
 800e814:	4639      	mov	r1, r7
 800e816:	f7f1 fca9 	bl	800016c <__adddf3>
 800e81a:	4606      	mov	r6, r0
 800e81c:	460f      	mov	r7, r1
 800e81e:	4602      	mov	r2, r0
 800e820:	460b      	mov	r3, r1
 800e822:	4640      	mov	r0, r8
 800e824:	4649      	mov	r1, r9
 800e826:	f7f1 fca1 	bl	800016c <__adddf3>
 800e82a:	a33d      	add	r3, pc, #244	; (adr r3, 800e920 <__ieee754_pow+0x710>)
 800e82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e830:	9c04      	ldr	r4, [sp, #16]
 800e832:	460d      	mov	r5, r1
 800e834:	4620      	mov	r0, r4
 800e836:	f7f1 fe4f 	bl	80004d8 <__aeabi_dmul>
 800e83a:	4642      	mov	r2, r8
 800e83c:	464b      	mov	r3, r9
 800e83e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e842:	4620      	mov	r0, r4
 800e844:	4629      	mov	r1, r5
 800e846:	f7f1 fc8f 	bl	8000168 <__aeabi_dsub>
 800e84a:	4602      	mov	r2, r0
 800e84c:	460b      	mov	r3, r1
 800e84e:	4630      	mov	r0, r6
 800e850:	4639      	mov	r1, r7
 800e852:	f7f1 fc89 	bl	8000168 <__aeabi_dsub>
 800e856:	a334      	add	r3, pc, #208	; (adr r3, 800e928 <__ieee754_pow+0x718>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	f7f1 fe3c 	bl	80004d8 <__aeabi_dmul>
 800e860:	a333      	add	r3, pc, #204	; (adr r3, 800e930 <__ieee754_pow+0x720>)
 800e862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e866:	4606      	mov	r6, r0
 800e868:	460f      	mov	r7, r1
 800e86a:	4620      	mov	r0, r4
 800e86c:	4629      	mov	r1, r5
 800e86e:	f7f1 fe33 	bl	80004d8 <__aeabi_dmul>
 800e872:	4602      	mov	r2, r0
 800e874:	460b      	mov	r3, r1
 800e876:	4630      	mov	r0, r6
 800e878:	4639      	mov	r1, r7
 800e87a:	f7f1 fc77 	bl	800016c <__adddf3>
 800e87e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e880:	4b34      	ldr	r3, [pc, #208]	; (800e954 <__ieee754_pow+0x744>)
 800e882:	4413      	add	r3, r2
 800e884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e888:	f7f1 fc70 	bl	800016c <__adddf3>
 800e88c:	4680      	mov	r8, r0
 800e88e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e890:	4689      	mov	r9, r1
 800e892:	f7f1 fdb7 	bl	8000404 <__aeabi_i2d>
 800e896:	4604      	mov	r4, r0
 800e898:	460d      	mov	r5, r1
 800e89a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e89c:	4b2e      	ldr	r3, [pc, #184]	; (800e958 <__ieee754_pow+0x748>)
 800e89e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e8a8:	4642      	mov	r2, r8
 800e8aa:	464b      	mov	r3, r9
 800e8ac:	f7f1 fc5e 	bl	800016c <__adddf3>
 800e8b0:	4632      	mov	r2, r6
 800e8b2:	463b      	mov	r3, r7
 800e8b4:	f7f1 fc5a 	bl	800016c <__adddf3>
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	462b      	mov	r3, r5
 800e8bc:	f7f1 fc56 	bl	800016c <__adddf3>
 800e8c0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e8c4:	4622      	mov	r2, r4
 800e8c6:	462b      	mov	r3, r5
 800e8c8:	4650      	mov	r0, sl
 800e8ca:	468b      	mov	fp, r1
 800e8cc:	f7f1 fc4c 	bl	8000168 <__aeabi_dsub>
 800e8d0:	4632      	mov	r2, r6
 800e8d2:	463b      	mov	r3, r7
 800e8d4:	f7f1 fc48 	bl	8000168 <__aeabi_dsub>
 800e8d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e8dc:	f7f1 fc44 	bl	8000168 <__aeabi_dsub>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	460b      	mov	r3, r1
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	4649      	mov	r1, r9
 800e8e8:	e608      	b.n	800e4fc <__ieee754_pow+0x2ec>
 800e8ea:	bf00      	nop
 800e8ec:	f3af 8000 	nop.w
 800e8f0:	4a454eef 	.word	0x4a454eef
 800e8f4:	3fca7e28 	.word	0x3fca7e28
 800e8f8:	93c9db65 	.word	0x93c9db65
 800e8fc:	3fcd864a 	.word	0x3fcd864a
 800e900:	a91d4101 	.word	0xa91d4101
 800e904:	3fd17460 	.word	0x3fd17460
 800e908:	518f264d 	.word	0x518f264d
 800e90c:	3fd55555 	.word	0x3fd55555
 800e910:	db6fabff 	.word	0xdb6fabff
 800e914:	3fdb6db6 	.word	0x3fdb6db6
 800e918:	33333303 	.word	0x33333303
 800e91c:	3fe33333 	.word	0x3fe33333
 800e920:	e0000000 	.word	0xe0000000
 800e924:	3feec709 	.word	0x3feec709
 800e928:	dc3a03fd 	.word	0xdc3a03fd
 800e92c:	3feec709 	.word	0x3feec709
 800e930:	145b01f5 	.word	0x145b01f5
 800e934:	be3e2fe0 	.word	0xbe3e2fe0
 800e938:	7ff00000 	.word	0x7ff00000
 800e93c:	43400000 	.word	0x43400000
 800e940:	0003988e 	.word	0x0003988e
 800e944:	000bb679 	.word	0x000bb679
 800e948:	0800f728 	.word	0x0800f728
 800e94c:	3ff00000 	.word	0x3ff00000
 800e950:	40080000 	.word	0x40080000
 800e954:	0800f748 	.word	0x0800f748
 800e958:	0800f738 	.word	0x0800f738
 800e95c:	2601      	movs	r6, #1
 800e95e:	e667      	b.n	800e630 <__ieee754_pow+0x420>
 800e960:	a39d      	add	r3, pc, #628	; (adr r3, 800ebd8 <__ieee754_pow+0x9c8>)
 800e962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e966:	4640      	mov	r0, r8
 800e968:	4649      	mov	r1, r9
 800e96a:	f7f1 fbff 	bl	800016c <__adddf3>
 800e96e:	4622      	mov	r2, r4
 800e970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e974:	462b      	mov	r3, r5
 800e976:	4650      	mov	r0, sl
 800e978:	4639      	mov	r1, r7
 800e97a:	f7f1 fbf5 	bl	8000168 <__aeabi_dsub>
 800e97e:	4602      	mov	r2, r0
 800e980:	460b      	mov	r3, r1
 800e982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e986:	f7f2 f837 	bl	80009f8 <__aeabi_dcmpgt>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	f47f ae01 	bne.w	800e592 <__ieee754_pow+0x382>
 800e990:	4aa5      	ldr	r2, [pc, #660]	; (800ec28 <__ieee754_pow+0xa18>)
 800e992:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800e996:	4293      	cmp	r3, r2
 800e998:	f340 8103 	ble.w	800eba2 <__ieee754_pow+0x992>
 800e99c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	151b      	asrs	r3, r3, #20
 800e9a4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e9a8:	fa4a f303 	asr.w	r3, sl, r3
 800e9ac:	4433      	add	r3, r6
 800e9ae:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e9b2:	4f9e      	ldr	r7, [pc, #632]	; (800ec2c <__ieee754_pow+0xa1c>)
 800e9b4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e9b8:	4117      	asrs	r7, r2
 800e9ba:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e9be:	ea23 0107 	bic.w	r1, r3, r7
 800e9c2:	f1c2 0214 	rsb	r2, r2, #20
 800e9c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	fa4a fa02 	asr.w	sl, sl, r2
 800e9d0:	2e00      	cmp	r6, #0
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	4629      	mov	r1, r5
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	bfb8      	it	lt
 800e9da:	f1ca 0a00 	rsblt	sl, sl, #0
 800e9de:	f7f1 fbc3 	bl	8000168 <__aeabi_dsub>
 800e9e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9ea:	2400      	movs	r4, #0
 800e9ec:	4642      	mov	r2, r8
 800e9ee:	464b      	mov	r3, r9
 800e9f0:	f7f1 fbbc 	bl	800016c <__adddf3>
 800e9f4:	a37a      	add	r3, pc, #488	; (adr r3, 800ebe0 <__ieee754_pow+0x9d0>)
 800e9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	460d      	mov	r5, r1
 800e9fe:	f7f1 fd6b 	bl	80004d8 <__aeabi_dmul>
 800ea02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea06:	4606      	mov	r6, r0
 800ea08:	460f      	mov	r7, r1
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	f7f1 fbab 	bl	8000168 <__aeabi_dsub>
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	4640      	mov	r0, r8
 800ea18:	4649      	mov	r1, r9
 800ea1a:	f7f1 fba5 	bl	8000168 <__aeabi_dsub>
 800ea1e:	a372      	add	r3, pc, #456	; (adr r3, 800ebe8 <__ieee754_pow+0x9d8>)
 800ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea24:	f7f1 fd58 	bl	80004d8 <__aeabi_dmul>
 800ea28:	a371      	add	r3, pc, #452	; (adr r3, 800ebf0 <__ieee754_pow+0x9e0>)
 800ea2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2e:	4680      	mov	r8, r0
 800ea30:	4689      	mov	r9, r1
 800ea32:	4620      	mov	r0, r4
 800ea34:	4629      	mov	r1, r5
 800ea36:	f7f1 fd4f 	bl	80004d8 <__aeabi_dmul>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4640      	mov	r0, r8
 800ea40:	4649      	mov	r1, r9
 800ea42:	f7f1 fb93 	bl	800016c <__adddf3>
 800ea46:	4604      	mov	r4, r0
 800ea48:	460d      	mov	r5, r1
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4630      	mov	r0, r6
 800ea50:	4639      	mov	r1, r7
 800ea52:	f7f1 fb8b 	bl	800016c <__adddf3>
 800ea56:	4632      	mov	r2, r6
 800ea58:	463b      	mov	r3, r7
 800ea5a:	4680      	mov	r8, r0
 800ea5c:	4689      	mov	r9, r1
 800ea5e:	f7f1 fb83 	bl	8000168 <__aeabi_dsub>
 800ea62:	4602      	mov	r2, r0
 800ea64:	460b      	mov	r3, r1
 800ea66:	4620      	mov	r0, r4
 800ea68:	4629      	mov	r1, r5
 800ea6a:	f7f1 fb7d 	bl	8000168 <__aeabi_dsub>
 800ea6e:	4642      	mov	r2, r8
 800ea70:	4606      	mov	r6, r0
 800ea72:	460f      	mov	r7, r1
 800ea74:	464b      	mov	r3, r9
 800ea76:	4640      	mov	r0, r8
 800ea78:	4649      	mov	r1, r9
 800ea7a:	f7f1 fd2d 	bl	80004d8 <__aeabi_dmul>
 800ea7e:	a35e      	add	r3, pc, #376	; (adr r3, 800ebf8 <__ieee754_pow+0x9e8>)
 800ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea84:	4604      	mov	r4, r0
 800ea86:	460d      	mov	r5, r1
 800ea88:	f7f1 fd26 	bl	80004d8 <__aeabi_dmul>
 800ea8c:	a35c      	add	r3, pc, #368	; (adr r3, 800ec00 <__ieee754_pow+0x9f0>)
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	f7f1 fb69 	bl	8000168 <__aeabi_dsub>
 800ea96:	4622      	mov	r2, r4
 800ea98:	462b      	mov	r3, r5
 800ea9a:	f7f1 fd1d 	bl	80004d8 <__aeabi_dmul>
 800ea9e:	a35a      	add	r3, pc, #360	; (adr r3, 800ec08 <__ieee754_pow+0x9f8>)
 800eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa4:	f7f1 fb62 	bl	800016c <__adddf3>
 800eaa8:	4622      	mov	r2, r4
 800eaaa:	462b      	mov	r3, r5
 800eaac:	f7f1 fd14 	bl	80004d8 <__aeabi_dmul>
 800eab0:	a357      	add	r3, pc, #348	; (adr r3, 800ec10 <__ieee754_pow+0xa00>)
 800eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab6:	f7f1 fb57 	bl	8000168 <__aeabi_dsub>
 800eaba:	4622      	mov	r2, r4
 800eabc:	462b      	mov	r3, r5
 800eabe:	f7f1 fd0b 	bl	80004d8 <__aeabi_dmul>
 800eac2:	a355      	add	r3, pc, #340	; (adr r3, 800ec18 <__ieee754_pow+0xa08>)
 800eac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac8:	f7f1 fb50 	bl	800016c <__adddf3>
 800eacc:	4622      	mov	r2, r4
 800eace:	462b      	mov	r3, r5
 800ead0:	f7f1 fd02 	bl	80004d8 <__aeabi_dmul>
 800ead4:	4602      	mov	r2, r0
 800ead6:	460b      	mov	r3, r1
 800ead8:	4640      	mov	r0, r8
 800eada:	4649      	mov	r1, r9
 800eadc:	f7f1 fb44 	bl	8000168 <__aeabi_dsub>
 800eae0:	4604      	mov	r4, r0
 800eae2:	460d      	mov	r5, r1
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	4640      	mov	r0, r8
 800eaea:	4649      	mov	r1, r9
 800eaec:	f7f1 fcf4 	bl	80004d8 <__aeabi_dmul>
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eaf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eafa:	4620      	mov	r0, r4
 800eafc:	4629      	mov	r1, r5
 800eafe:	f7f1 fb33 	bl	8000168 <__aeabi_dsub>
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb0a:	f7f1 fe0f 	bl	800072c <__aeabi_ddiv>
 800eb0e:	4632      	mov	r2, r6
 800eb10:	4604      	mov	r4, r0
 800eb12:	460d      	mov	r5, r1
 800eb14:	463b      	mov	r3, r7
 800eb16:	4640      	mov	r0, r8
 800eb18:	4649      	mov	r1, r9
 800eb1a:	f7f1 fcdd 	bl	80004d8 <__aeabi_dmul>
 800eb1e:	4632      	mov	r2, r6
 800eb20:	463b      	mov	r3, r7
 800eb22:	f7f1 fb23 	bl	800016c <__adddf3>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	f7f1 fb1b 	bl	8000168 <__aeabi_dsub>
 800eb32:	4642      	mov	r2, r8
 800eb34:	464b      	mov	r3, r9
 800eb36:	f7f1 fb17 	bl	8000168 <__aeabi_dsub>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	2000      	movs	r0, #0
 800eb40:	493b      	ldr	r1, [pc, #236]	; (800ec30 <__ieee754_pow+0xa20>)
 800eb42:	f7f1 fb11 	bl	8000168 <__aeabi_dsub>
 800eb46:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800eb4a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800eb4e:	da2b      	bge.n	800eba8 <__ieee754_pow+0x998>
 800eb50:	4652      	mov	r2, sl
 800eb52:	f000 f9b9 	bl	800eec8 <scalbn>
 800eb56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb5a:	f7ff bbf2 	b.w	800e342 <__ieee754_pow+0x132>
 800eb5e:	4b35      	ldr	r3, [pc, #212]	; (800ec34 <__ieee754_pow+0xa24>)
 800eb60:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800eb64:	429f      	cmp	r7, r3
 800eb66:	f77f af13 	ble.w	800e990 <__ieee754_pow+0x780>
 800eb6a:	4b33      	ldr	r3, [pc, #204]	; (800ec38 <__ieee754_pow+0xa28>)
 800eb6c:	440b      	add	r3, r1
 800eb6e:	4303      	orrs	r3, r0
 800eb70:	d00b      	beq.n	800eb8a <__ieee754_pow+0x97a>
 800eb72:	a32b      	add	r3, pc, #172	; (adr r3, 800ec20 <__ieee754_pow+0xa10>)
 800eb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb7c:	f7f1 fcac 	bl	80004d8 <__aeabi_dmul>
 800eb80:	a327      	add	r3, pc, #156	; (adr r3, 800ec20 <__ieee754_pow+0xa10>)
 800eb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb86:	f7ff bbdc 	b.w	800e342 <__ieee754_pow+0x132>
 800eb8a:	4622      	mov	r2, r4
 800eb8c:	462b      	mov	r3, r5
 800eb8e:	f7f1 faeb 	bl	8000168 <__aeabi_dsub>
 800eb92:	4642      	mov	r2, r8
 800eb94:	464b      	mov	r3, r9
 800eb96:	f7f1 ff25 	bl	80009e4 <__aeabi_dcmpge>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	f43f aef8 	beq.w	800e990 <__ieee754_pow+0x780>
 800eba0:	e7e7      	b.n	800eb72 <__ieee754_pow+0x962>
 800eba2:	f04f 0a00 	mov.w	sl, #0
 800eba6:	e71e      	b.n	800e9e6 <__ieee754_pow+0x7d6>
 800eba8:	4621      	mov	r1, r4
 800ebaa:	e7d4      	b.n	800eb56 <__ieee754_pow+0x946>
 800ebac:	f04f 0b00 	mov.w	fp, #0
 800ebb0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ec30 <__ieee754_pow+0xa20>
 800ebb4:	f7ff bbb0 	b.w	800e318 <__ieee754_pow+0x108>
 800ebb8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ebbc:	f7ff bbac 	b.w	800e318 <__ieee754_pow+0x108>
 800ebc0:	4638      	mov	r0, r7
 800ebc2:	4641      	mov	r1, r8
 800ebc4:	f7ff bbbf 	b.w	800e346 <__ieee754_pow+0x136>
 800ebc8:	9200      	str	r2, [sp, #0]
 800ebca:	f7ff bb7f 	b.w	800e2cc <__ieee754_pow+0xbc>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	f7ff bb69 	b.w	800e2a6 <__ieee754_pow+0x96>
 800ebd4:	f3af 8000 	nop.w
 800ebd8:	652b82fe 	.word	0x652b82fe
 800ebdc:	3c971547 	.word	0x3c971547
 800ebe0:	00000000 	.word	0x00000000
 800ebe4:	3fe62e43 	.word	0x3fe62e43
 800ebe8:	fefa39ef 	.word	0xfefa39ef
 800ebec:	3fe62e42 	.word	0x3fe62e42
 800ebf0:	0ca86c39 	.word	0x0ca86c39
 800ebf4:	be205c61 	.word	0xbe205c61
 800ebf8:	72bea4d0 	.word	0x72bea4d0
 800ebfc:	3e663769 	.word	0x3e663769
 800ec00:	c5d26bf1 	.word	0xc5d26bf1
 800ec04:	3ebbbd41 	.word	0x3ebbbd41
 800ec08:	af25de2c 	.word	0xaf25de2c
 800ec0c:	3f11566a 	.word	0x3f11566a
 800ec10:	16bebd93 	.word	0x16bebd93
 800ec14:	3f66c16c 	.word	0x3f66c16c
 800ec18:	5555553e 	.word	0x5555553e
 800ec1c:	3fc55555 	.word	0x3fc55555
 800ec20:	c2f8f359 	.word	0xc2f8f359
 800ec24:	01a56e1f 	.word	0x01a56e1f
 800ec28:	3fe00000 	.word	0x3fe00000
 800ec2c:	000fffff 	.word	0x000fffff
 800ec30:	3ff00000 	.word	0x3ff00000
 800ec34:	4090cbff 	.word	0x4090cbff
 800ec38:	3f6f3400 	.word	0x3f6f3400

0800ec3c <__ieee754_sqrt>:
 800ec3c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ed90 <__ieee754_sqrt+0x154>
 800ec40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec44:	ea3c 0c01 	bics.w	ip, ip, r1
 800ec48:	460b      	mov	r3, r1
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	460d      	mov	r5, r1
 800ec4e:	460a      	mov	r2, r1
 800ec50:	4607      	mov	r7, r0
 800ec52:	4604      	mov	r4, r0
 800ec54:	d10e      	bne.n	800ec74 <__ieee754_sqrt+0x38>
 800ec56:	4602      	mov	r2, r0
 800ec58:	f7f1 fc3e 	bl	80004d8 <__aeabi_dmul>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4630      	mov	r0, r6
 800ec62:	4629      	mov	r1, r5
 800ec64:	f7f1 fa82 	bl	800016c <__adddf3>
 800ec68:	4606      	mov	r6, r0
 800ec6a:	460d      	mov	r5, r1
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	4629      	mov	r1, r5
 800ec70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec74:	2900      	cmp	r1, #0
 800ec76:	dc0d      	bgt.n	800ec94 <__ieee754_sqrt+0x58>
 800ec78:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ec7c:	ea5c 0707 	orrs.w	r7, ip, r7
 800ec80:	d0f4      	beq.n	800ec6c <__ieee754_sqrt+0x30>
 800ec82:	b139      	cbz	r1, 800ec94 <__ieee754_sqrt+0x58>
 800ec84:	4602      	mov	r2, r0
 800ec86:	f7f1 fa6f 	bl	8000168 <__aeabi_dsub>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	f7f1 fd4d 	bl	800072c <__aeabi_ddiv>
 800ec92:	e7e9      	b.n	800ec68 <__ieee754_sqrt+0x2c>
 800ec94:	1512      	asrs	r2, r2, #20
 800ec96:	d074      	beq.n	800ed82 <__ieee754_sqrt+0x146>
 800ec98:	2000      	movs	r0, #0
 800ec9a:	07d5      	lsls	r5, r2, #31
 800ec9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eca0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800eca4:	bf5e      	ittt	pl
 800eca6:	0fe3      	lsrpl	r3, r4, #31
 800eca8:	0064      	lslpl	r4, r4, #1
 800ecaa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ecae:	0fe3      	lsrs	r3, r4, #31
 800ecb0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ecb4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ecb8:	2516      	movs	r5, #22
 800ecba:	4601      	mov	r1, r0
 800ecbc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ecc0:	1076      	asrs	r6, r6, #1
 800ecc2:	0064      	lsls	r4, r4, #1
 800ecc4:	188f      	adds	r7, r1, r2
 800ecc6:	429f      	cmp	r7, r3
 800ecc8:	bfde      	ittt	le
 800ecca:	1bdb      	suble	r3, r3, r7
 800eccc:	18b9      	addle	r1, r7, r2
 800ecce:	1880      	addle	r0, r0, r2
 800ecd0:	005b      	lsls	r3, r3, #1
 800ecd2:	3d01      	subs	r5, #1
 800ecd4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ecd8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ecdc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ece0:	d1f0      	bne.n	800ecc4 <__ieee754_sqrt+0x88>
 800ece2:	462a      	mov	r2, r5
 800ece4:	f04f 0e20 	mov.w	lr, #32
 800ece8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ecec:	428b      	cmp	r3, r1
 800ecee:	eb07 0c05 	add.w	ip, r7, r5
 800ecf2:	dc02      	bgt.n	800ecfa <__ieee754_sqrt+0xbe>
 800ecf4:	d113      	bne.n	800ed1e <__ieee754_sqrt+0xe2>
 800ecf6:	45a4      	cmp	ip, r4
 800ecf8:	d811      	bhi.n	800ed1e <__ieee754_sqrt+0xe2>
 800ecfa:	f1bc 0f00 	cmp.w	ip, #0
 800ecfe:	eb0c 0507 	add.w	r5, ip, r7
 800ed02:	da43      	bge.n	800ed8c <__ieee754_sqrt+0x150>
 800ed04:	2d00      	cmp	r5, #0
 800ed06:	db41      	blt.n	800ed8c <__ieee754_sqrt+0x150>
 800ed08:	f101 0801 	add.w	r8, r1, #1
 800ed0c:	1a5b      	subs	r3, r3, r1
 800ed0e:	4641      	mov	r1, r8
 800ed10:	45a4      	cmp	ip, r4
 800ed12:	bf88      	it	hi
 800ed14:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800ed18:	eba4 040c 	sub.w	r4, r4, ip
 800ed1c:	443a      	add	r2, r7
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	f1be 0e01 	subs.w	lr, lr, #1
 800ed24:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ed28:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800ed2c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ed30:	d1dc      	bne.n	800ecec <__ieee754_sqrt+0xb0>
 800ed32:	4323      	orrs	r3, r4
 800ed34:	d006      	beq.n	800ed44 <__ieee754_sqrt+0x108>
 800ed36:	1c54      	adds	r4, r2, #1
 800ed38:	bf0b      	itete	eq
 800ed3a:	4672      	moveq	r2, lr
 800ed3c:	3201      	addne	r2, #1
 800ed3e:	3001      	addeq	r0, #1
 800ed40:	f022 0201 	bicne.w	r2, r2, #1
 800ed44:	1043      	asrs	r3, r0, #1
 800ed46:	07c1      	lsls	r1, r0, #31
 800ed48:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ed4c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ed50:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ed54:	bf48      	it	mi
 800ed56:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ed60:	e782      	b.n	800ec68 <__ieee754_sqrt+0x2c>
 800ed62:	0ae3      	lsrs	r3, r4, #11
 800ed64:	3915      	subs	r1, #21
 800ed66:	0564      	lsls	r4, r4, #21
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d0fa      	beq.n	800ed62 <__ieee754_sqrt+0x126>
 800ed6c:	02de      	lsls	r6, r3, #11
 800ed6e:	d50a      	bpl.n	800ed86 <__ieee754_sqrt+0x14a>
 800ed70:	f1c2 0020 	rsb	r0, r2, #32
 800ed74:	fa24 f000 	lsr.w	r0, r4, r0
 800ed78:	1e55      	subs	r5, r2, #1
 800ed7a:	4094      	lsls	r4, r2
 800ed7c:	4303      	orrs	r3, r0
 800ed7e:	1b4a      	subs	r2, r1, r5
 800ed80:	e78a      	b.n	800ec98 <__ieee754_sqrt+0x5c>
 800ed82:	4611      	mov	r1, r2
 800ed84:	e7f0      	b.n	800ed68 <__ieee754_sqrt+0x12c>
 800ed86:	005b      	lsls	r3, r3, #1
 800ed88:	3201      	adds	r2, #1
 800ed8a:	e7ef      	b.n	800ed6c <__ieee754_sqrt+0x130>
 800ed8c:	4688      	mov	r8, r1
 800ed8e:	e7bd      	b.n	800ed0c <__ieee754_sqrt+0xd0>
 800ed90:	7ff00000 	.word	0x7ff00000

0800ed94 <fabs>:
 800ed94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ed98:	4770      	bx	lr

0800ed9a <finite>:
 800ed9a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ed9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eda2:	0fc0      	lsrs	r0, r0, #31
 800eda4:	4770      	bx	lr
	...

0800eda8 <nan>:
 800eda8:	2000      	movs	r0, #0
 800edaa:	4901      	ldr	r1, [pc, #4]	; (800edb0 <nan+0x8>)
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop
 800edb0:	7ff80000 	.word	0x7ff80000

0800edb4 <rint>:
 800edb4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800edb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edba:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800edbe:	2f13      	cmp	r7, #19
 800edc0:	4602      	mov	r2, r0
 800edc2:	460b      	mov	r3, r1
 800edc4:	460c      	mov	r4, r1
 800edc6:	4605      	mov	r5, r0
 800edc8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800edcc:	dc59      	bgt.n	800ee82 <rint+0xce>
 800edce:	2f00      	cmp	r7, #0
 800edd0:	da2a      	bge.n	800ee28 <rint+0x74>
 800edd2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800edd6:	4301      	orrs	r1, r0
 800edd8:	d022      	beq.n	800ee20 <rint+0x6c>
 800edda:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800edde:	4301      	orrs	r1, r0
 800ede0:	424d      	negs	r5, r1
 800ede2:	430d      	orrs	r5, r1
 800ede4:	4936      	ldr	r1, [pc, #216]	; (800eec0 <rint+0x10c>)
 800ede6:	0c5c      	lsrs	r4, r3, #17
 800ede8:	0b2d      	lsrs	r5, r5, #12
 800edea:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800edee:	0464      	lsls	r4, r4, #17
 800edf0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800edf4:	ea45 0304 	orr.w	r3, r5, r4
 800edf8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800edfc:	4620      	mov	r0, r4
 800edfe:	4629      	mov	r1, r5
 800ee00:	f7f1 f9b4 	bl	800016c <__adddf3>
 800ee04:	e9cd 0100 	strd	r0, r1, [sp]
 800ee08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee0c:	462b      	mov	r3, r5
 800ee0e:	4622      	mov	r2, r4
 800ee10:	f7f1 f9aa 	bl	8000168 <__aeabi_dsub>
 800ee14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ee18:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	460b      	mov	r3, r1
 800ee20:	4610      	mov	r0, r2
 800ee22:	4619      	mov	r1, r3
 800ee24:	b003      	add	sp, #12
 800ee26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee28:	4926      	ldr	r1, [pc, #152]	; (800eec4 <rint+0x110>)
 800ee2a:	4139      	asrs	r1, r7
 800ee2c:	ea03 0001 	and.w	r0, r3, r1
 800ee30:	4310      	orrs	r0, r2
 800ee32:	d0f5      	beq.n	800ee20 <rint+0x6c>
 800ee34:	084b      	lsrs	r3, r1, #1
 800ee36:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800ee3a:	ea52 0501 	orrs.w	r5, r2, r1
 800ee3e:	d00c      	beq.n	800ee5a <rint+0xa6>
 800ee40:	ea24 0303 	bic.w	r3, r4, r3
 800ee44:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ee48:	2f13      	cmp	r7, #19
 800ee4a:	bf0c      	ite	eq
 800ee4c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ee50:	2500      	movne	r5, #0
 800ee52:	fa44 f707 	asr.w	r7, r4, r7
 800ee56:	ea43 0407 	orr.w	r4, r3, r7
 800ee5a:	4919      	ldr	r1, [pc, #100]	; (800eec0 <rint+0x10c>)
 800ee5c:	4623      	mov	r3, r4
 800ee5e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ee62:	462a      	mov	r2, r5
 800ee64:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ee68:	4620      	mov	r0, r4
 800ee6a:	4629      	mov	r1, r5
 800ee6c:	f7f1 f97e 	bl	800016c <__adddf3>
 800ee70:	e9cd 0100 	strd	r0, r1, [sp]
 800ee74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee78:	4622      	mov	r2, r4
 800ee7a:	462b      	mov	r3, r5
 800ee7c:	f7f1 f974 	bl	8000168 <__aeabi_dsub>
 800ee80:	e7cc      	b.n	800ee1c <rint+0x68>
 800ee82:	2f33      	cmp	r7, #51	; 0x33
 800ee84:	dd05      	ble.n	800ee92 <rint+0xde>
 800ee86:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ee8a:	d1c9      	bne.n	800ee20 <rint+0x6c>
 800ee8c:	f7f1 f96e 	bl	800016c <__adddf3>
 800ee90:	e7c4      	b.n	800ee1c <rint+0x68>
 800ee92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ee96:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800ee9a:	fa21 f10c 	lsr.w	r1, r1, ip
 800ee9e:	4208      	tst	r0, r1
 800eea0:	d0be      	beq.n	800ee20 <rint+0x6c>
 800eea2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800eea6:	bf18      	it	ne
 800eea8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800eeac:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800eeb0:	bf1e      	ittt	ne
 800eeb2:	ea20 0303 	bicne.w	r3, r0, r3
 800eeb6:	fa45 fc0c 	asrne.w	ip, r5, ip
 800eeba:	ea43 050c 	orrne.w	r5, r3, ip
 800eebe:	e7cc      	b.n	800ee5a <rint+0xa6>
 800eec0:	0800f758 	.word	0x0800f758
 800eec4:	000fffff 	.word	0x000fffff

0800eec8 <scalbn>:
 800eec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800eece:	4604      	mov	r4, r0
 800eed0:	460d      	mov	r5, r1
 800eed2:	4617      	mov	r7, r2
 800eed4:	460b      	mov	r3, r1
 800eed6:	b996      	cbnz	r6, 800eefe <scalbn+0x36>
 800eed8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eedc:	4303      	orrs	r3, r0
 800eede:	d039      	beq.n	800ef54 <scalbn+0x8c>
 800eee0:	4b35      	ldr	r3, [pc, #212]	; (800efb8 <scalbn+0xf0>)
 800eee2:	2200      	movs	r2, #0
 800eee4:	f7f1 faf8 	bl	80004d8 <__aeabi_dmul>
 800eee8:	4b34      	ldr	r3, [pc, #208]	; (800efbc <scalbn+0xf4>)
 800eeea:	4604      	mov	r4, r0
 800eeec:	429f      	cmp	r7, r3
 800eeee:	460d      	mov	r5, r1
 800eef0:	da0f      	bge.n	800ef12 <scalbn+0x4a>
 800eef2:	a32d      	add	r3, pc, #180	; (adr r3, 800efa8 <scalbn+0xe0>)
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	f7f1 faee 	bl	80004d8 <__aeabi_dmul>
 800eefc:	e006      	b.n	800ef0c <scalbn+0x44>
 800eefe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ef02:	4296      	cmp	r6, r2
 800ef04:	d10a      	bne.n	800ef1c <scalbn+0x54>
 800ef06:	4602      	mov	r2, r0
 800ef08:	f7f1 f930 	bl	800016c <__adddf3>
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	460d      	mov	r5, r1
 800ef10:	e020      	b.n	800ef54 <scalbn+0x8c>
 800ef12:	460b      	mov	r3, r1
 800ef14:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ef18:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ef1c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ef20:	19b9      	adds	r1, r7, r6
 800ef22:	4291      	cmp	r1, r2
 800ef24:	dd0e      	ble.n	800ef44 <scalbn+0x7c>
 800ef26:	a322      	add	r3, pc, #136	; (adr r3, 800efb0 <scalbn+0xe8>)
 800ef28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ef30:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ef34:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ef38:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ef3c:	4820      	ldr	r0, [pc, #128]	; (800efc0 <scalbn+0xf8>)
 800ef3e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ef42:	e7d9      	b.n	800eef8 <scalbn+0x30>
 800ef44:	2900      	cmp	r1, #0
 800ef46:	dd08      	ble.n	800ef5a <scalbn+0x92>
 800ef48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ef54:	4620      	mov	r0, r4
 800ef56:	4629      	mov	r1, r5
 800ef58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef5a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ef5e:	da16      	bge.n	800ef8e <scalbn+0xc6>
 800ef60:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ef64:	429f      	cmp	r7, r3
 800ef66:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ef6a:	dd08      	ble.n	800ef7e <scalbn+0xb6>
 800ef6c:	4c15      	ldr	r4, [pc, #84]	; (800efc4 <scalbn+0xfc>)
 800ef6e:	4814      	ldr	r0, [pc, #80]	; (800efc0 <scalbn+0xf8>)
 800ef70:	f363 74df 	bfi	r4, r3, #31, #1
 800ef74:	a30e      	add	r3, pc, #56	; (adr r3, 800efb0 <scalbn+0xe8>)
 800ef76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7a:	4621      	mov	r1, r4
 800ef7c:	e7bc      	b.n	800eef8 <scalbn+0x30>
 800ef7e:	4c12      	ldr	r4, [pc, #72]	; (800efc8 <scalbn+0x100>)
 800ef80:	4812      	ldr	r0, [pc, #72]	; (800efcc <scalbn+0x104>)
 800ef82:	f363 74df 	bfi	r4, r3, #31, #1
 800ef86:	a308      	add	r3, pc, #32	; (adr r3, 800efa8 <scalbn+0xe0>)
 800ef88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef8c:	e7f5      	b.n	800ef7a <scalbn+0xb2>
 800ef8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef92:	3136      	adds	r1, #54	; 0x36
 800ef94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	4629      	mov	r1, r5
 800efa0:	2200      	movs	r2, #0
 800efa2:	4b0b      	ldr	r3, [pc, #44]	; (800efd0 <scalbn+0x108>)
 800efa4:	e7a8      	b.n	800eef8 <scalbn+0x30>
 800efa6:	bf00      	nop
 800efa8:	c2f8f359 	.word	0xc2f8f359
 800efac:	01a56e1f 	.word	0x01a56e1f
 800efb0:	8800759c 	.word	0x8800759c
 800efb4:	7e37e43c 	.word	0x7e37e43c
 800efb8:	43500000 	.word	0x43500000
 800efbc:	ffff3cb0 	.word	0xffff3cb0
 800efc0:	8800759c 	.word	0x8800759c
 800efc4:	7e37e43c 	.word	0x7e37e43c
 800efc8:	01a56e1f 	.word	0x01a56e1f
 800efcc:	c2f8f359 	.word	0xc2f8f359
 800efd0:	3c900000 	.word	0x3c900000

0800efd4 <_init>:
 800efd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd6:	bf00      	nop
 800efd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efda:	bc08      	pop	{r3}
 800efdc:	469e      	mov	lr, r3
 800efde:	4770      	bx	lr

0800efe0 <_fini>:
 800efe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe2:	bf00      	nop
 800efe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efe6:	bc08      	pop	{r3}
 800efe8:	469e      	mov	lr, r3
 800efea:	4770      	bx	lr
