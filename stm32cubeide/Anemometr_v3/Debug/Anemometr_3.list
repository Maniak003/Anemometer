
Anemometr_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  0800ac00  0800ac00  0001ac00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2b0  0800b2b0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2b0  0800b2b0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2b0  0800b2b0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2b0  0800b2b0  0001b2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2b4  0800b2b4  0001b2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc0  200001e0  0800b498  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  0800b498  00020da0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ea2  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003031  00000000  00000000  000370ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab5c  00000000  00000000  0003c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162e7  00000000  00000000  0005729c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f68  00000000  00000000  0006d583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001034eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006890  00000000  00000000  00103540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800abe4 	.word	0x0800abe4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800abe4 	.word	0x0800abe4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <DHCP_time_handler+0x18>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a03      	ldr	r2, [pc, #12]	; (8001094 <DHCP_time_handler+0x18>)
 8001088:	6013      	str	r3, [r2, #0]
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200001fc 	.word	0x200001fc

08001098 <rwFlash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void rwFlash(uint8_t rwFlag) {
 8001098:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800109c:	b08e      	sub	sp, #56	; 0x38
 800109e:	af02      	add	r7, sp, #8
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	uint32_t pageAdr = 0x800FC00; //.
 80010a4:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <rwFlash+0x230>)
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 80010ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b0:	4a86      	ldr	r2, [pc, #536]	; (80012cc <rwFlash+0x234>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d103      	bne.n	80010be <rwFlash+0x26>
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 80b1 	bne.w	8001220 <rwFlash+0x188>
		magicKey = 0x12349876;
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <rwFlash+0x234>)
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rwFlag == 0) { // For first initial
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10f      	bne.n	80010e8 <rwFlash+0x50>
			C_13 = CALIBRATE_START;
 80010c8:	4b81      	ldr	r3, [pc, #516]	; (80012d0 <rwFlash+0x238>)
 80010ca:	f649 4240 	movw	r2, #40000	; 0x9c40
 80010ce:	801a      	strh	r2, [r3, #0]
			C_24 = CALIBRATE_START;
 80010d0:	4b80      	ldr	r3, [pc, #512]	; (80012d4 <rwFlash+0x23c>)
 80010d2:	f649 4240 	movw	r2, #40000	; 0x9c40
 80010d6:	801a      	strh	r2, [r3, #0]
			DX1.f = 1;
 80010d8:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <rwFlash+0x240>)
 80010da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010de:	601a      	str	r2, [r3, #0]
			//DX2.f = 1;
			DY1.f = 1;
 80010e0:	4b7e      	ldr	r3, [pc, #504]	; (80012dc <rwFlash+0x244>)
 80010e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010e6:	601a      	str	r2, [r3, #0]
			//DY2.f = 1;
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
		EraseInitStruct.PageAddress = pageAdr; //
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbPages     = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]

		flash_ok = HAL_ERROR;
 80010f8:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <rwFlash+0x248>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 80010fe:	e005      	b.n	800110c <rwFlash+0x74>
		  flash_ok = HAL_FLASH_Unlock();
 8001100:	f002 fbc6 	bl	8003890 <HAL_FLASH_Unlock>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b75      	ldr	r3, [pc, #468]	; (80012e0 <rwFlash+0x248>)
 800110a:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 800110c:	4b74      	ldr	r3, [pc, #464]	; (80012e0 <rwFlash+0x248>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f5      	bne.n	8001100 <rwFlash+0x68>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fc9e 	bl	8003a60 <HAL_FLASHEx_Erase>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d16b      	bne.n	8001202 <rwFlash+0x16a>
			dataForSave = (uint64_t) magicKey;
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	461a      	mov	r2, r3
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	e9c7 2308 	strd	r2, r3, [r7, #32]
			flash_ok = HAL_ERROR;
 8001136:	4b6a      	ldr	r3, [pc, #424]	; (80012e0 <rwFlash+0x248>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800113c:	e009      	b.n	8001152 <rwFlash+0xba>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key
 800113e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001144:	2003      	movs	r0, #3
 8001146:	f002 fb33 	bl	80037b0 <HAL_FLASH_Program>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b64      	ldr	r3, [pc, #400]	; (80012e0 <rwFlash+0x248>)
 8001150:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001152:	4b63      	ldr	r3, [pc, #396]	; (80012e0 <rwFlash+0x248>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f1      	bne.n	800113e <rwFlash+0xa6>
			}
			dataForSave = (uint64_t) (C_13 | ((uint64_t) C_24 << 16));
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <rwFlash+0x238>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29a      	uxth	r2, r3
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	495b      	ldr	r1, [pc, #364]	; (80012d4 <rwFlash+0x23c>)
 8001166:	8809      	ldrh	r1, [r1, #0]
 8001168:	b288      	uxth	r0, r1
 800116a:	f04f 0100 	mov.w	r1, #0
 800116e:	0c05      	lsrs	r5, r0, #16
 8001170:	0404      	lsls	r4, r0, #16
 8001172:	ea42 0804 	orr.w	r8, r2, r4
 8001176:	ea43 0905 	orr.w	r9, r3, r5
 800117a:	e9c7 8908 	strd	r8, r9, [r7, #32]
			flash_ok = HAL_ERROR;
 800117e:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <rwFlash+0x248>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001184:	e00b      	b.n	800119e <rwFlash+0x106>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 16, dataForSave); // Write C_12 C_34 C_14 C_23
 8001186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001188:	f103 0110 	add.w	r1, r3, #16
 800118c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001190:	2003      	movs	r0, #3
 8001192:	f002 fb0d 	bl	80037b0 <HAL_FLASH_Program>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <rwFlash+0x248>)
 800119c:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <rwFlash+0x248>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1ef      	bne.n	8001186 <rwFlash+0xee>
			}
			flash_ok = HAL_ERROR;
 80011a6:	4b4e      	ldr	r3, [pc, #312]	; (80012e0 <rwFlash+0x248>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011ac:	e00e      	b.n	80011cc <rwFlash+0x134>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 24, DX1.u); // Write DX1
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	f103 0118 	add.w	r1, r3, #24
 80011b4:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <rwFlash+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	2002      	movs	r0, #2
 80011c0:	f002 faf6 	bl	80037b0 <HAL_FLASH_Program>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <rwFlash+0x248>)
 80011ca:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011cc:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <rwFlash+0x248>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1ec      	bne.n	80011ae <rwFlash+0x116>
			}
			//flash_ok = HAL_ERROR;
			//while(flash_ok != HAL_OK){
			//	flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 28, DX2.u); // Write DX2
			//}
			flash_ok = HAL_ERROR;
 80011d4:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <rwFlash+0x248>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011da:	e00e      	b.n	80011fa <rwFlash+0x162>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 32, DY1.u); // Write DY1
 80011dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011de:	f103 0120 	add.w	r1, r3, #32
 80011e2:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <rwFlash+0x244>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	2002      	movs	r0, #2
 80011ee:	f002 fadf 	bl	80037b0 <HAL_FLASH_Program>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <rwFlash+0x248>)
 80011f8:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011fa:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <rwFlash+0x248>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ec      	bne.n	80011dc <rwFlash+0x144>
			//while(flash_ok != HAL_OK){
			//	flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 36, DY2.u); // Write DY2
			//}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <rwFlash+0x248>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8001208:	e005      	b.n	8001216 <rwFlash+0x17e>
			flash_ok = HAL_FLASH_Lock();
 800120a:	f002 fb67 	bl	80038dc <HAL_FLASH_Lock>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <rwFlash+0x248>)
 8001214:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <rwFlash+0x248>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f5      	bne.n	800120a <rwFlash+0x172>
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 800121e:	e04d      	b.n	80012bc <rwFlash+0x224>
		}
	} else {
		/* Задержки измерения в каналах */
		C_13 = *(__IO uint16_t*) (pageAdr + 16);
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	3310      	adds	r3, #16
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <rwFlash+0x238>)
 800122a:	801a      	strh	r2, [r3, #0]
		C_24 = *(__IO uint16_t*) (pageAdr + 18);
 800122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122e:	3312      	adds	r3, #18
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <rwFlash+0x23c>)
 8001236:	801a      	strh	r2, [r3, #0]
		//C_31 = *(__IO uint16_t*) (pageAdr + 20);
		//C_42 = *(__IO uint16_t*) (pageAdr + 22);
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8001238:	22c8      	movs	r2, #200	; 0xc8
 800123a:	2100      	movs	r1, #0
 800123c:	4829      	ldr	r0, [pc, #164]	; (80012e4 <rwFlash+0x24c>)
 800123e:	f005 fbfd 	bl	8006a3c <memset>
		sprintf(SndBuffer, "C_13: %5d, C_24: %5d  \r\n", C_13, C_24);
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <rwFlash+0x238>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <rwFlash+0x23c>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4926      	ldr	r1, [pc, #152]	; (80012e8 <rwFlash+0x250>)
 800124e:	4825      	ldr	r0, [pc, #148]	; (80012e4 <rwFlash+0x24c>)
 8001250:	f006 f85c 	bl	800730c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	22c8      	movs	r2, #200	; 0xc8
 800125a:	4922      	ldr	r1, [pc, #136]	; (80012e4 <rwFlash+0x24c>)
 800125c:	4823      	ldr	r0, [pc, #140]	; (80012ec <rwFlash+0x254>)
 800125e:	f005 f9b7 	bl	80065d0 <HAL_UART_Transmit>

		/* Поправочные коэффициенты */
		DX1.u = *(__IO uint32_t*) (pageAdr + 24);
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	3318      	adds	r3, #24
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <rwFlash+0x240>)
 800126a:	6013      	str	r3, [r2, #0]
		//DX2.u = *(__IO uint32_t*) (pageAdr + 28);
		DY1.u = *(__IO uint32_t*) (pageAdr + 32);
 800126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126e:	3320      	adds	r3, #32
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <rwFlash+0x244>)
 8001274:	6013      	str	r3, [r2, #0]
		//DY2.u = *(__IO uint32_t*) (pageAdr + 36);
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8001276:	22c8      	movs	r2, #200	; 0xc8
 8001278:	2100      	movs	r1, #0
 800127a:	481a      	ldr	r0, [pc, #104]	; (80012e4 <rwFlash+0x24c>)
 800127c:	f005 fbde 	bl	8006a3c <memset>
		sprintf(SndBuffer, "DX1: %7.6f, DY1: %7.6f \r\n", DX1.f, DY1.f);
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <rwFlash+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8cf 	bl	8000428 <__aeabi_f2d>
 800128a:	4604      	mov	r4, r0
 800128c:	460d      	mov	r5, r1
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <rwFlash+0x244>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f8c8 	bl	8000428 <__aeabi_f2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	e9cd 2300 	strd	r2, r3, [sp]
 80012a0:	4622      	mov	r2, r4
 80012a2:	462b      	mov	r3, r5
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <rwFlash+0x258>)
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <rwFlash+0x24c>)
 80012a8:	f006 f830 	bl	800730c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	22c8      	movs	r2, #200	; 0xc8
 80012b2:	490c      	ldr	r1, [pc, #48]	; (80012e4 <rwFlash+0x24c>)
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <rwFlash+0x254>)
 80012b6:	f005 f98b 	bl	80065d0 <HAL_UART_Transmit>
	}
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3730      	adds	r7, #48	; 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012c6:	bf00      	nop
 80012c8:	0800fc00 	.word	0x0800fc00
 80012cc:	12349876 	.word	0x12349876
 80012d0:	200006e8 	.word	0x200006e8
 80012d4:	2000033c 	.word	0x2000033c
 80012d8:	200002e8 	.word	0x200002e8
 80012dc:	200002f8 	.word	0x200002f8
 80012e0:	20000d64 	.word	0x20000d64
 80012e4:	2000020c 	.word	0x2000020c
 80012e8:	0800ac00 	.word	0x0800ac00
 80012ec:	20000c88 	.word	0x20000c88
 80012f0:	0800ac1c 	.word	0x0800ac1c

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f8:	b0a1      	sub	sp, #132	; 0x84
 80012fa:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f002 f8ce 	bl	800349c <HAL_Init>

  /* USER CODE BEGIN Init */
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
			(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) ? "Yes" : "No",
 8001300:	4b54      	ldr	r3, [pc, #336]	; (8001454 <main+0x160>)
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001304:	2b00      	cmp	r3, #0
 8001306:	da01      	bge.n	800130c <main+0x18>
 8001308:	4c53      	ldr	r4, [pc, #332]	; (8001458 <main+0x164>)
 800130a:	e000      	b.n	800130e <main+0x1a>
 800130c:	4c53      	ldr	r4, [pc, #332]	; (800145c <main+0x168>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) ? "Yes" : "No",
 800130e:	4b51      	ldr	r3, [pc, #324]	; (8001454 <main+0x160>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <main+0x2a>
 800131a:	4d4f      	ldr	r5, [pc, #316]	; (8001458 <main+0x164>)
 800131c:	e000      	b.n	8001320 <main+0x2c>
 800131e:	4d4f      	ldr	r5, [pc, #316]	; (800145c <main+0x168>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) ? "Yes" : "No",
 8001320:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <main+0x160>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <main+0x3c>
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <main+0x164>)
 800132e:	e000      	b.n	8001332 <main+0x3e>
 8001330:	4b4a      	ldr	r3, [pc, #296]	; (800145c <main+0x168>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) ? "Yes" : "No",
 8001332:	4a48      	ldr	r2, [pc, #288]	; (8001454 <main+0x160>)
 8001334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001336:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800133a:	2a00      	cmp	r2, #0
 800133c:	d001      	beq.n	8001342 <main+0x4e>
 800133e:	4a46      	ldr	r2, [pc, #280]	; (8001458 <main+0x164>)
 8001340:	e000      	b.n	8001344 <main+0x50>
 8001342:	4a46      	ldr	r2, [pc, #280]	; (800145c <main+0x168>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) ? "Yes" : "No",
 8001344:	4943      	ldr	r1, [pc, #268]	; (8001454 <main+0x160>)
 8001346:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001348:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800134c:	2900      	cmp	r1, #0
 800134e:	d001      	beq.n	8001354 <main+0x60>
 8001350:	4941      	ldr	r1, [pc, #260]	; (8001458 <main+0x164>)
 8001352:	e000      	b.n	8001356 <main+0x62>
 8001354:	4941      	ldr	r1, [pc, #260]	; (800145c <main+0x168>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) ? "Yes" : "No");
 8001356:	483f      	ldr	r0, [pc, #252]	; (8001454 <main+0x160>)
 8001358:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800135a:	f000 6000 	and.w	r0, r0, #134217728	; 0x8000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800135e:	2800      	cmp	r0, #0
 8001360:	d001      	beq.n	8001366 <main+0x72>
 8001362:	483d      	ldr	r0, [pc, #244]	; (8001458 <main+0x164>)
 8001364:	e000      	b.n	8001368 <main+0x74>
 8001366:	483d      	ldr	r0, [pc, #244]	; (800145c <main+0x168>)
 8001368:	9003      	str	r0, [sp, #12]
 800136a:	9102      	str	r1, [sp, #8]
 800136c:	9201      	str	r2, [sp, #4]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	462b      	mov	r3, r5
 8001372:	4622      	mov	r2, r4
 8001374:	493a      	ldr	r1, [pc, #232]	; (8001460 <main+0x16c>)
 8001376:	483b      	ldr	r0, [pc, #236]	; (8001464 <main+0x170>)
 8001378:	f005 ffc8 	bl	800730c <siprintf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 fcf6 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f001 f83e 	bl	8002400 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001384:	f001 f812 	bl	80023ac <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001388:	f000 fdb2 	bl	8001ef0 <MX_TIM1_Init>
  MX_TIM4_Init();
 800138c:	f000 ffc0 	bl	8002310 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001390:	f000 ff2a 	bl	80021e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001394:	f000 fe92 	bl	80020bc <MX_TIM2_Init>
  MX_I2C1_Init();
 8001398:	f000 fd2c 	bl	8001df4 <MX_I2C1_Init>
  MX_SPI2_Init();
 800139c:	f000 fd72 	bl	8001e84 <MX_SPI2_Init>
  MX_IWDG_Init();
 80013a0:	f000 fd56 	bl	8001e50 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	482f      	ldr	r0, [pc, #188]	; (8001468 <main+0x174>)
 80013aa:	f002 fd85 	bl	8003eb8 <HAL_GPIO_WritePin>
  readyFlag = TRUE;
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <main+0x178>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
  //sumCounter2 = 0;
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b8:	22c8      	movs	r2, #200	; 0xc8
 80013ba:	492a      	ldr	r1, [pc, #168]	; (8001464 <main+0x170>)
 80013bc:	482c      	ldr	r0, [pc, #176]	; (8001470 <main+0x17c>)
 80013be:	f005 f907 	bl	80065d0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_START_TEXT, sizeof(INIT_START_TEXT), HAL_MAX_DELAY);
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c6:	2212      	movs	r2, #18
 80013c8:	492a      	ldr	r1, [pc, #168]	; (8001474 <main+0x180>)
 80013ca:	4829      	ldr	r0, [pc, #164]	; (8001470 <main+0x17c>)
 80013cc:	f005 f900 	bl	80065d0 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(SCSN_GPIO_Port, SCSN_Pin, GPIO_PIN_SET);
  HAL_Delay(2000);
  init_w5500();
#else
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_RESET);	// Reset W5500
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d6:	4824      	ldr	r0, [pc, #144]	; (8001468 <main+0x174>)
 80013d8:	f002 fd6e 	bl	8003eb8 <HAL_GPIO_WritePin>
#endif
  rwFlash(0);		// Чтение параметров калибровки из Flash.
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fe5b 	bl	8001098 <rwFlash>

  /* Таймер задержки запуска измерения */
  receiversOff
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <main+0x184>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	4a24      	ldr	r2, [pc, #144]	; (8001478 <main+0x184>)
 80013e8:	f043 031e 	orr.w	r3, r3, #30
 80013ec:	60d3      	str	r3, [r2, #12]
  //C_13 = CALIBRATE_START;
  TIM3->ARR = C_13; 		// Коррекция для таймера запуска измерения Z13
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <main+0x188>)
 80013f0:	881a      	ldrh	r2, [r3, #0]
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <main+0x18c>)
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
  /*
   * calibrateMode == 0 -- Нормальный режим
   * calibrateMode > 0 -- Режим калибровки
   */
  calibrateMode = 0;
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <main+0x190>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	801a      	strh	r2, [r3, #0]
  test_flag = FALSE;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <main+0x194>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
  Xsum = 0;
 8001402:	4922      	ldr	r1, [pc, #136]	; (800148c <main+0x198>)
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 8001410:	491f      	ldr	r1, [pc, #124]	; (8001490 <main+0x19c>)
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	e9c1 2300 	strd	r2, r3, [r1]
  Vmax = 0;
 800141e:	491d      	ldr	r1, [pc, #116]	; (8001494 <main+0x1a0>)
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9c1 2300 	strd	r2, r3, [r1]
  firstTime = TRUE;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <main+0x1a4>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
  currentMode = 0;
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <main+0x1a8>)
 8001434:	2200      	movs	r2, #0
 8001436:	801a      	strh	r2, [r3, #0]
  STOP_CAPTURE
 8001438:	2100      	movs	r1, #0
 800143a:	4819      	ldr	r0, [pc, #100]	; (80014a0 <main+0x1ac>)
 800143c:	f003 ff16 	bl	800526c <HAL_TIM_IC_Stop_IT>
 8001440:	2104      	movs	r1, #4
 8001442:	4817      	ldr	r0, [pc, #92]	; (80014a0 <main+0x1ac>)
 8001444:	f003 ff12 	bl	800526c <HAL_TIM_IC_Stop_IT>
  measCount = 0;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <main+0x1b0>)
 800144a:	2200      	movs	r2, #0
 800144c:	801a      	strh	r2, [r3, #0]
  /*
   *	Очистка массива результатов.
   */
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 800144e:	2300      	movs	r3, #0
 8001450:	637b      	str	r3, [r7, #52]	; 0x34
 8001452:	e038      	b.n	80014c6 <main+0x1d2>
 8001454:	40021000 	.word	0x40021000
 8001458:	0800ac38 	.word	0x0800ac38
 800145c:	0800ac3c 	.word	0x0800ac3c
 8001460:	0800ac40 	.word	0x0800ac40
 8001464:	2000020c 	.word	0x2000020c
 8001468:	40010800 	.word	0x40010800
 800146c:	200002ec 	.word	0x200002ec
 8001470:	20000c88 	.word	0x20000c88
 8001474:	0800ac84 	.word	0x0800ac84
 8001478:	40010c00 	.word	0x40010c00
 800147c:	200006e8 	.word	0x200006e8
 8001480:	40000400 	.word	0x40000400
 8001484:	20000880 	.word	0x20000880
 8001488:	200003a0 	.word	0x200003a0
 800148c:	20000398 	.word	0x20000398
 8001490:	200002f0 	.word	0x200002f0
 8001494:	20000310 	.word	0x20000310
 8001498:	20000b2c 	.word	0x20000b2c
 800149c:	200006d8 	.word	0x200006d8
 80014a0:	20000d18 	.word	0x20000d18
 80014a4:	20000318 	.word	0x20000318
	  resul_arrayX1[ii] = 0;
 80014a8:	4aa5      	ldr	r2, [pc, #660]	; (8001740 <main+0x44c>)
 80014aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ac:	f04f 0100 	mov.w	r1, #0
 80014b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  resul_arrayY1[ii] = 0;
 80014b4:	4aa3      	ldr	r2, [pc, #652]	; (8001744 <main+0x450>)
 80014b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 80014c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c2:	3301      	adds	r3, #1
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
 80014c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c8:	2b63      	cmp	r3, #99	; 0x63
 80014ca:	dded      	ble.n	80014a8 <main+0x1b4>
  }
  calibrate13 = FALSE;
 80014cc:	4b9e      	ldr	r3, [pc, #632]	; (8001748 <main+0x454>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
  calibrate24 = FALSE;
 80014d2:	4b9e      	ldr	r3, [pc, #632]	; (800174c <main+0x458>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_FINISH_TEXT, sizeof(INIT_FINISH_TEXT), HAL_MAX_DELAY);
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014dc:	2213      	movs	r2, #19
 80014de:	499c      	ldr	r1, [pc, #624]	; (8001750 <main+0x45c>)
 80014e0:	489c      	ldr	r0, [pc, #624]	; (8001754 <main+0x460>)
 80014e2:	f005 f875 	bl	80065d0 <HAL_UART_Transmit>


  HAL_TIM_Base_Start_IT(&htim3);
 80014e6:	489c      	ldr	r0, [pc, #624]	; (8001758 <main+0x464>)
 80014e8:	f003 fb84 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80014ec:	489b      	ldr	r0, [pc, #620]	; (800175c <main+0x468>)
 80014ee:	f003 fb81 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  V = 0;
 80014f2:	499b      	ldr	r1, [pc, #620]	; (8001760 <main+0x46c>)
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
  Xsum = 0;
 8001500:	4998      	ldr	r1, [pc, #608]	; (8001764 <main+0x470>)
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 800150e:	4996      	ldr	r1, [pc, #600]	; (8001768 <main+0x474>)
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9c1 2300 	strd	r2, r3, [r1]
  Vmaxfin = 0;
 800151c:	4993      	ldr	r1, [pc, #588]	; (800176c <main+0x478>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9c1 2300 	strd	r2, r3, [r1]
  Xmaxfin = 0;
 800152a:	4991      	ldr	r1, [pc, #580]	; (8001770 <main+0x47c>)
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9c1 2300 	strd	r2, r3, [r1]
  Ymaxfin = 0;
 8001538:	498e      	ldr	r1, [pc, #568]	; (8001774 <main+0x480>)
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	e9c1 2300 	strd	r2, r3, [r1]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	488b      	ldr	r0, [pc, #556]	; (8001778 <main+0x484>)
 800154c:	f002 fcb4 	bl	8003eb8 <HAL_GPIO_WritePin>
  while (1)
  {
	  if (readyFlag) {
 8001550:	4b8a      	ldr	r3, [pc, #552]	; (800177c <main+0x488>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 82fe 	beq.w	8001b56 <main+0x862>
		  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 800155a:	4b89      	ldr	r3, [pc, #548]	; (8001780 <main+0x48c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a88      	ldr	r2, [pc, #544]	; (8001780 <main+0x48c>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6013      	str	r3, [r2, #0]
		  HAL_IWDG_Refresh(&hiwdg);
 8001566:	4887      	ldr	r0, [pc, #540]	; (8001784 <main+0x490>)
 8001568:	f002 fe44 	bl	80041f4 <HAL_IWDG_Refresh>
		  readyFlag = FALSE;
 800156c:	4b83      	ldr	r3, [pc, #524]	; (800177c <main+0x488>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
		  if (calibrateMode > 0) {
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <main+0x494>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 827c 	beq.w	8001a74 <main+0x780>
			  /* Процедура калибровки */
			  if (( calibrate13 || calibrate24 ) && (calibrateCount < CALIBRATE_MAX_COUNT)) {
 800157c:	4b72      	ldr	r3, [pc, #456]	; (8001748 <main+0x454>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d104      	bne.n	800158e <main+0x29a>
 8001584:	4b71      	ldr	r3, [pc, #452]	; (800174c <main+0x458>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8164 	beq.w	8001856 <main+0x562>
 800158e:	4b7f      	ldr	r3, [pc, #508]	; (800178c <main+0x498>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001596:	f080 815e 	bcs.w	8001856 <main+0x562>
				  memset(SndBuffer, 0, sizeof(SndBuffer));
 800159a:	22c8      	movs	r2, #200	; 0xc8
 800159c:	2100      	movs	r1, #0
 800159e:	487c      	ldr	r0, [pc, #496]	; (8001790 <main+0x49c>)
 80015a0:	f005 fa4c 	bl	8006a3c <memset>
				  if (test_flag) {
 80015a4:	4b7b      	ldr	r3, [pc, #492]	; (8001794 <main+0x4a0>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d058      	beq.n	800165e <main+0x36a>
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80015ac:	4b65      	ldr	r3, [pc, #404]	; (8001744 <main+0x450>)
 80015ae:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff39 	bl	8000428 <__aeabi_f2d>
 80015b6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80015ba:	4b77      	ldr	r3, [pc, #476]	; (8001798 <main+0x4a4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ff32 	bl	8000428 <__aeabi_f2d>
 80015c4:	4680      	mov	r8, r0
 80015c6:	4689      	mov	r9, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80015c8:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <main+0x450>)
 80015ca:	681c      	ldr	r4, [r3, #0]
 80015cc:	4b72      	ldr	r3, [pc, #456]	; (8001798 <main+0x4a4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a72      	ldr	r2, [pc, #456]	; (800179c <main+0x4a8>)
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fb64 	bl	8000ca4 <__aeabi_fmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	4619      	mov	r1, r3
 80015e0:	4620      	mov	r0, r4
 80015e2:	f7ff fa55 	bl	8000a90 <__aeabi_fsub>
 80015e6:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ff1d 	bl	8000428 <__aeabi_f2d>
 80015ee:	4604      	mov	r4, r0
 80015f0:	460d      	mov	r5, r1
							  resul_arrayX1[0], resul_arrayX2[0], resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 80015f2:	4b53      	ldr	r3, [pc, #332]	; (8001740 <main+0x44c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff16 	bl	8000428 <__aeabi_f2d>
 80015fc:	4682      	mov	sl, r0
 80015fe:	468b      	mov	fp, r1
							  resul_arrayX1[0], resul_arrayX2[0], resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 8001600:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <main+0x4ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff0f 	bl	8000428 <__aeabi_f2d>
 800160a:	e9c7 0108 	strd	r0, r1, [r7, #32]
							  resul_arrayX1[0], resul_arrayX2[0], resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 800160e:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <main+0x44c>)
 8001610:	681e      	ldr	r6, [r3, #0]
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <main+0x4ac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a63      	ldr	r2, [pc, #396]	; (80017a4 <main+0x4b0>)
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb41 	bl	8000ca4 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	4619      	mov	r1, r3
 8001626:	4630      	mov	r0, r6
 8001628:	f7ff fa32 	bl	8000a90 <__aeabi_fsub>
 800162c:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fefa 	bl	8000428 <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800163c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001640:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001644:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001648:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800164c:	e9cd 8900 	strd	r8, r9, [sp]
 8001650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001654:	4954      	ldr	r1, [pc, #336]	; (80017a8 <main+0x4b4>)
 8001656:	484e      	ldr	r0, [pc, #312]	; (8001790 <main+0x49c>)
 8001658:	f005 fe58 	bl	800730c <siprintf>
 800165c:	e027      	b.n	80016ae <main+0x3ba>
				  } else {
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 800165e:	4b39      	ldr	r3, [pc, #228]	; (8001744 <main+0x450>)
 8001660:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fee0 	bl	8000428 <__aeabi_f2d>
 8001668:	4682      	mov	sl, r0
 800166a:	468b      	mov	fp, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 800166c:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <main+0x4a4>)
 800166e:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fed9 	bl	8000428 <__aeabi_f2d>
 8001676:	4604      	mov	r4, r0
 8001678:	460d      	mov	r5, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <main+0x44c>)
 800167c:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fed2 	bl	8000428 <__aeabi_f2d>
 8001684:	4680      	mov	r8, r0
 8001686:	4689      	mov	r9, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8001688:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <main+0x4ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fecb 	bl	8000428 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800169a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800169e:	e9cd 4500 	strd	r4, r5, [sp]
 80016a2:	4652      	mov	r2, sl
 80016a4:	465b      	mov	r3, fp
 80016a6:	4941      	ldr	r1, [pc, #260]	; (80017ac <main+0x4b8>)
 80016a8:	4839      	ldr	r0, [pc, #228]	; (8001790 <main+0x49c>)
 80016aa:	f005 fe2f 	bl	800730c <siprintf>
				  }
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	22c8      	movs	r2, #200	; 0xc8
 80016b4:	4936      	ldr	r1, [pc, #216]	; (8001790 <main+0x49c>)
 80016b6:	4827      	ldr	r0, [pc, #156]	; (8001754 <main+0x460>)
 80016b8:	f004 ff8a 	bl	80065d0 <HAL_UART_Transmit>
				  /* Y */
				  if (! test_flag) {
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <main+0x4a0>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	f083 0301 	eor.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80bb 	beq.w	8001842 <main+0x54e>
					  if ( calibrate13 && (abs(resul_arrayY1[0] + resul_arrayY2[0] - 1600) > CALIBRATE_ACURACY) ) {
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <main+0x454>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d071      	beq.n	80017b8 <main+0x4c4>
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <main+0x450>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a2f      	ldr	r2, [pc, #188]	; (8001798 <main+0x4a4>)
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff f9d8 	bl	8000a94 <__addsf3>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4932      	ldr	r1, [pc, #200]	; (80017b0 <main+0x4bc>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f9d1 	bl	8000a90 <__aeabi_fsub>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc9d 	bl	8001030 <__aeabi_f2iz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bfb8      	it	lt
 80016fc:	425b      	neglt	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	dd5a      	ble.n	80017b8 <main+0x4c4>
						  if (resul_arrayY1[0] + resul_arrayY2[0] > 1600) {
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <main+0x450>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a24      	ldr	r2, [pc, #144]	; (8001798 <main+0x4a4>)
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff f9c1 	bl	8000a94 <__addsf3>
 8001712:	4603      	mov	r3, r0
 8001714:	4926      	ldr	r1, [pc, #152]	; (80017b0 <main+0x4bc>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fc80 	bl	800101c <__aeabi_fcmpgt>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d006      	beq.n	8001730 <main+0x43c>
							  C_13++;
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <main+0x4c0>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <main+0x4c0>)
 800172c:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] + resul_arrayY2[0] > 1600) {
 800172e:	e046      	b.n	80017be <main+0x4ca>
						  } else {
							  C_13--;
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <main+0x4c0>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <main+0x4c0>)
 800173a:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] + resul_arrayY2[0] > 1600) {
 800173c:	e03f      	b.n	80017be <main+0x4ca>
 800173e:	bf00      	nop
 8001740:	20000548 	.word	0x20000548
 8001744:	200003a4 	.word	0x200003a4
 8001748:	2000033e 	.word	0x2000033e
 800174c:	20000544 	.word	0x20000544
 8001750:	0800ac98 	.word	0x0800ac98
 8001754:	20000c88 	.word	0x20000c88
 8001758:	20000c40 	.word	0x20000c40
 800175c:	20000b90 	.word	0x20000b90
 8001760:	20000388 	.word	0x20000388
 8001764:	20000398 	.word	0x20000398
 8001768:	200002f0 	.word	0x200002f0
 800176c:	20000300 	.word	0x20000300
 8001770:	20000888 	.word	0x20000888
 8001774:	20000538 	.word	0x20000538
 8001778:	40010800 	.word	0x40010800
 800177c:	200002ec 	.word	0x200002ec
 8001780:	e000e010 	.word	0xe000e010
 8001784:	20000c2c 	.word	0x20000c2c
 8001788:	20000880 	.word	0x20000880
 800178c:	20000882 	.word	0x20000882
 8001790:	2000020c 	.word	0x2000020c
 8001794:	200003a0 	.word	0x200003a0
 8001798:	20000890 	.word	0x20000890
 800179c:	200002f8 	.word	0x200002f8
 80017a0:	200006ec 	.word	0x200006ec
 80017a4:	200002e8 	.word	0x200002e8
 80017a8:	0800acac 	.word	0x0800acac
 80017ac:	0800acec 	.word	0x0800acec
 80017b0:	44c80000 	.word	0x44c80000
 80017b4:	200006e8 	.word	0x200006e8
						  }
					  } else {
						  calibrate13 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y1
 80017b8:	4b94      	ldr	r3, [pc, #592]	; (8001a0c <main+0x718>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
					  }
					  /* X */
					  if ( calibrate24 && (abs(resul_arrayX1[0] + resul_arrayX2[0] - 1600) > CALIBRATE_ACURACY) ) {
 80017be:	4b94      	ldr	r3, [pc, #592]	; (8001a10 <main+0x71c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d034      	beq.n	8001830 <main+0x53c>
 80017c6:	4b93      	ldr	r3, [pc, #588]	; (8001a14 <main+0x720>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a93      	ldr	r2, [pc, #588]	; (8001a18 <main+0x724>)
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff f95f 	bl	8000a94 <__addsf3>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4990      	ldr	r1, [pc, #576]	; (8001a1c <main+0x728>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f958 	bl	8000a90 <__aeabi_fsub>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fc24 	bl	8001030 <__aeabi_f2iz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bfb8      	it	lt
 80017ee:	425b      	neglt	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	dd1d      	ble.n	8001830 <main+0x53c>
						  if (resul_arrayX1[0] + resul_arrayX2[0] > 1600) {
 80017f4:	4b87      	ldr	r3, [pc, #540]	; (8001a14 <main+0x720>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a87      	ldr	r2, [pc, #540]	; (8001a18 <main+0x724>)
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f948 	bl	8000a94 <__addsf3>
 8001804:	4603      	mov	r3, r0
 8001806:	4985      	ldr	r1, [pc, #532]	; (8001a1c <main+0x728>)
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fc07 	bl	800101c <__aeabi_fcmpgt>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <main+0x52e>
							  C_24++;
 8001814:	4b82      	ldr	r3, [pc, #520]	; (8001a20 <main+0x72c>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b80      	ldr	r3, [pc, #512]	; (8001a20 <main+0x72c>)
 800181e:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] + resul_arrayX2[0] > 1600) {
 8001820:	e009      	b.n	8001836 <main+0x542>
						  } else {
							  C_24--;
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <main+0x72c>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	3b01      	subs	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b7d      	ldr	r3, [pc, #500]	; (8001a20 <main+0x72c>)
 800182c:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] + resul_arrayX2[0] > 1600) {
 800182e:	e002      	b.n	8001836 <main+0x542>
						  }
					  } else {
						  calibrate24 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y2
 8001830:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <main+0x71c>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
					  }
					  calibrateCount++;
 8001836:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <main+0x730>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b79      	ldr	r3, [pc, #484]	; (8001a24 <main+0x730>)
 8001840:	801a      	strh	r2, [r3, #0]
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001842:	4b79      	ldr	r3, [pc, #484]	; (8001a28 <main+0x734>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a78      	ldr	r2, [pc, #480]	; (8001a28 <main+0x734>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 800184e:	4877      	ldr	r0, [pc, #476]	; (8001a2c <main+0x738>)
 8001850:	f003 f9d0 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
 8001854:	e17f      	b.n	8001b56 <main+0x862>
			  } else {
				  if (calibrateCount >= CALIBRATE_MAX_COUNT) {
 8001856:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <main+0x730>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800185e:	d308      	bcc.n	8001872 <main+0x57e>
					  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_TOUT, sizeof(CALIBRATE_ERROR_TOUT), 1000);
 8001860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001864:	221f      	movs	r2, #31
 8001866:	4972      	ldr	r1, [pc, #456]	; (8001a30 <main+0x73c>)
 8001868:	4872      	ldr	r0, [pc, #456]	; (8001a34 <main+0x740>)
 800186a:	f004 feb1 	bl	80065d0 <HAL_UART_Transmit>
					  /* System restart if calibrate error. */
					  HAL_NVIC_SystemReset();
 800186e:	f001 ff8e 	bl	800378e <HAL_NVIC_SystemReset>
				  }
				  if (calibrateMode > 0) {
 8001872:	4b71      	ldr	r3, [pc, #452]	; (8001a38 <main+0x744>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80bd 	beq.w	80019f6 <main+0x702>
					  ZX1 = ZX1 + (float) resul_arrayX1[0];
 800187c:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <main+0x720>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a6e      	ldr	r2, [pc, #440]	; (8001a3c <main+0x748>)
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f904 	bl	8000a94 <__addsf3>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	4b6a      	ldr	r3, [pc, #424]	; (8001a3c <main+0x748>)
 8001892:	601a      	str	r2, [r3, #0]
					  ZX2 = ZX2 + (float) resul_arrayX2[0];
 8001894:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <main+0x724>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a69      	ldr	r2, [pc, #420]	; (8001a40 <main+0x74c>)
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f8f8 	bl	8000a94 <__addsf3>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <main+0x74c>)
 80018aa:	601a      	str	r2, [r3, #0]
					  ZY1 = ZY1 + (float) resul_arrayY1[0];
 80018ac:	4b65      	ldr	r3, [pc, #404]	; (8001a44 <main+0x750>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <main+0x754>)
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f8ec 	bl	8000a94 <__addsf3>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <main+0x754>)
 80018c2:	601a      	str	r2, [r3, #0]
					  ZY2 = ZY2 + (float) resul_arrayY2[0];
 80018c4:	4b61      	ldr	r3, [pc, #388]	; (8001a4c <main+0x758>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a61      	ldr	r2, [pc, #388]	; (8001a50 <main+0x75c>)
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f8e0 	bl	8000a94 <__addsf3>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <main+0x75c>)
 80018da:	601a      	str	r2, [r3, #0]
					  calibrateMode--;
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <main+0x744>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <main+0x744>)
 80018e6:	801a      	strh	r2, [r3, #0]
					  if (calibrateMode == 0) {
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <main+0x744>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f040 8082 	bne.w	80019f6 <main+0x702>
						  /* Вычисление поправок */
						  DX1.f = ZX1 / ZX2;
 80018f2:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <main+0x748>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <main+0x74c>)
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fa85 	bl	8000e0c <__aeabi_fdiv>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <main+0x760>)
 8001908:	601a      	str	r2, [r3, #0]
						  DY1.f = ZY1 / ZY2;
 800190a:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <main+0x754>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a50      	ldr	r2, [pc, #320]	; (8001a50 <main+0x75c>)
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fa79 	bl	8000e0c <__aeabi_fdiv>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <main+0x764>)
 8001920:	601a      	str	r2, [r3, #0]
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001922:	22c8      	movs	r2, #200	; 0xc8
 8001924:	2100      	movs	r1, #0
 8001926:	484d      	ldr	r0, [pc, #308]	; (8001a5c <main+0x768>)
 8001928:	f005 f888 	bl	8006a3c <memset>
						  sprintf(SndBuffer, "\r\nCalibrate complite.\r\nC_13:%5d, C_24:%5d\r\n", C_13, C_24);
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <main+0x76c>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <main+0x72c>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	494b      	ldr	r1, [pc, #300]	; (8001a64 <main+0x770>)
 8001938:	4848      	ldr	r0, [pc, #288]	; (8001a5c <main+0x768>)
 800193a:	f005 fce7 	bl	800730c <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	22c8      	movs	r2, #200	; 0xc8
 8001944:	4945      	ldr	r1, [pc, #276]	; (8001a5c <main+0x768>)
 8001946:	483b      	ldr	r0, [pc, #236]	; (8001a34 <main+0x740>)
 8001948:	f004 fe42 	bl	80065d0 <HAL_UART_Transmit>
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 800194c:	22c8      	movs	r2, #200	; 0xc8
 800194e:	2100      	movs	r1, #0
 8001950:	4842      	ldr	r0, [pc, #264]	; (8001a5c <main+0x768>)
 8001952:	f005 f873 	bl	8006a3c <memset>
						  sprintf(SndBuffer, "DY1:%5.4f, DX1:%5.4f\r\n\r\n", DY1.f, DX1.f);
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <main+0x764>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fd64 	bl	8000428 <__aeabi_f2d>
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <main+0x760>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fd5d 	bl	8000428 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	e9cd 2300 	strd	r2, r3, [sp]
 8001976:	4622      	mov	r2, r4
 8001978:	462b      	mov	r3, r5
 800197a:	493b      	ldr	r1, [pc, #236]	; (8001a68 <main+0x774>)
 800197c:	4837      	ldr	r0, [pc, #220]	; (8001a5c <main+0x768>)
 800197e:	f005 fcc5 	bl	800730c <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	22c8      	movs	r2, #200	; 0xc8
 8001988:	4934      	ldr	r1, [pc, #208]	; (8001a5c <main+0x768>)
 800198a:	482a      	ldr	r0, [pc, #168]	; (8001a34 <main+0x740>)
 800198c:	f004 fe20 	bl	80065d0 <HAL_UART_Transmit>
						  if (abs(DX1.f) < 2 && abs(DY1.f) < 2) {
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <main+0x760>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fb4b 	bl	8001030 <__aeabi_f2iz>
 800199a:	4603      	mov	r3, r0
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a0:	db1c      	blt.n	80019dc <main+0x6e8>
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <main+0x760>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fb42 	bl	8001030 <__aeabi_f2iz>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	dc14      	bgt.n	80019dc <main+0x6e8>
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <main+0x764>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fb3a 	bl	8001030 <__aeabi_f2iz>
 80019bc:	4603      	mov	r3, r0
 80019be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c2:	db0b      	blt.n	80019dc <main+0x6e8>
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <main+0x764>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fb31 	bl	8001030 <__aeabi_f2iz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	dc03      	bgt.n	80019dc <main+0x6e8>
							  rwFlash(1);  // Запись данных калибровки во Flash.
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff fb5f 	bl	8001098 <rwFlash>
 80019da:	e006      	b.n	80019ea <main+0x6f6>
						  } else {
							  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_RANGE, sizeof(CALIBRATE_ERROR_RANGE), 1000);
 80019dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e0:	222a      	movs	r2, #42	; 0x2a
 80019e2:	4922      	ldr	r1, [pc, #136]	; (8001a6c <main+0x778>)
 80019e4:	4813      	ldr	r0, [pc, #76]	; (8001a34 <main+0x740>)
 80019e6:	f004 fdf3 	bl	80065d0 <HAL_UART_Transmit>
						  }
						  calibrateCount = 0;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <main+0x730>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	801a      	strh	r2, [r3, #0]
						  firstTime = TRUE;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <main+0x77c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
					  }
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <main+0x734>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <main+0x734>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8001a02:	480a      	ldr	r0, [pc, #40]	; (8001a2c <main+0x738>)
 8001a04:	f003 f8f6 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
 8001a08:	e0a5      	b.n	8001b56 <main+0x862>
 8001a0a:	bf00      	nop
 8001a0c:	2000033e 	.word	0x2000033e
 8001a10:	20000544 	.word	0x20000544
 8001a14:	20000548 	.word	0x20000548
 8001a18:	200006ec 	.word	0x200006ec
 8001a1c:	44c80000 	.word	0x44c80000
 8001a20:	2000033c 	.word	0x2000033c
 8001a24:	20000882 	.word	0x20000882
 8001a28:	e000e010 	.word	0xe000e010
 8001a2c:	20000b90 	.word	0x20000b90
 8001a30:	0800ad1c 	.word	0x0800ad1c
 8001a34:	20000c88 	.word	0x20000c88
 8001a38:	20000880 	.word	0x20000880
 8001a3c:	20000338 	.word	0x20000338
 8001a40:	20000540 	.word	0x20000540
 8001a44:	200003a4 	.word	0x200003a4
 8001a48:	2000087c 	.word	0x2000087c
 8001a4c:	20000890 	.word	0x20000890
 8001a50:	20000b20 	.word	0x20000b20
 8001a54:	200002e8 	.word	0x200002e8
 8001a58:	200002f8 	.word	0x200002f8
 8001a5c:	2000020c 	.word	0x2000020c
 8001a60:	200006e8 	.word	0x200006e8
 8001a64:	0800ad3c 	.word	0x0800ad3c
 8001a68:	0800ad68 	.word	0x0800ad68
 8001a6c:	0800ad84 	.word	0x0800ad84
 8001a70:	20000b2c 	.word	0x20000b2c
					  sendToZabbix(net_info.zabbix, ZabbixHostName, "ALTIM_MAXSPEED", Vmaxfin);
				  }
			  }
			#endif
			  //HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
			  if ( ! firstTime ) {
 8001a74:	4b98      	ldr	r3, [pc, #608]	; (8001cd8 <main+0x9e4>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f083 0301 	eor.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d05d      	beq.n	8001b3e <main+0x84a>
				  sprintf(SndBuffer, "V:%5.2f, X:%5.2f, Y:%5.2f, Vmax:%5.2f, Xmax:%5.2f, Ymax:%5.2f, A:%3.0f, T:%5.2f, P:%8.3f, H:%5.2f   \r",
 8001a82:	4b96      	ldr	r3, [pc, #600]	; (8001cdc <main+0x9e8>)
 8001a84:	cb18      	ldmia	r3, {r3, r4}
 8001a86:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8001a8a:	4b95      	ldr	r3, [pc, #596]	; (8001ce0 <main+0x9ec>)
 8001a8c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001a90:	4b94      	ldr	r3, [pc, #592]	; (8001ce4 <main+0x9f0>)
 8001a92:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001a96:	e9c7 1208 	strd	r1, r2, [r7, #32]
 8001a9a:	4b93      	ldr	r3, [pc, #588]	; (8001ce8 <main+0x9f4>)
 8001a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001aa4:	4b91      	ldr	r3, [pc, #580]	; (8001cec <main+0x9f8>)
 8001aa6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001aaa:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001aae:	4b90      	ldr	r3, [pc, #576]	; (8001cf0 <main+0x9fc>)
 8001ab0:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001ab4:	e9c7 5602 	strd	r5, r6, [r7, #8]
 8001ab8:	4b8e      	ldr	r3, [pc, #568]	; (8001cf4 <main+0xa00>)
 8001aba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001abe:	e9c7 8900 	strd	r8, r9, [r7]
 8001ac2:	4b8d      	ldr	r3, [pc, #564]	; (8001cf8 <main+0xa04>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fcae 	bl	8000428 <__aeabi_f2d>
 8001acc:	4680      	mov	r8, r0
 8001ace:	4689      	mov	r9, r1
 8001ad0:	4b8a      	ldr	r3, [pc, #552]	; (8001cfc <main+0xa08>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fca7 	bl	8000428 <__aeabi_f2d>
 8001ada:	4604      	mov	r4, r0
 8001adc:	460d      	mov	r5, r1
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <main+0xa0c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fca0 	bl	8000428 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001af0:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001af4:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001af8:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001afc:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001b00:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001b04:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8001b08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b0c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001b10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001b18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001b1c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001b20:	e9cd ab00 	strd	sl, fp, [sp]
 8001b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b28:	4976      	ldr	r1, [pc, #472]	; (8001d04 <main+0xa10>)
 8001b2a:	4877      	ldr	r0, [pc, #476]	; (8001d08 <main+0xa14>)
 8001b2c:	f005 fbee 	bl	800730c <siprintf>
						  V, Xsum, Ysum, Vmaxfin, Xmaxfin, Ymaxfin, A, temperature, pressure, humidity);
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b34:	22c8      	movs	r2, #200	; 0xc8
 8001b36:	4974      	ldr	r1, [pc, #464]	; (8001d08 <main+0xa14>)
 8001b38:	4874      	ldr	r0, [pc, #464]	; (8001d0c <main+0xa18>)
 8001b3a:	f004 fd49 	bl	80065d0 <HAL_UART_Transmit>
			  }
			  firstTime = FALSE;
 8001b3e:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <main+0x9e4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001b44:	4b72      	ldr	r3, [pc, #456]	; (8001d10 <main+0xa1c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a71      	ldr	r2, [pc, #452]	; (8001d10 <main+0xa1c>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]
				#endif
			  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8001b50:	4870      	ldr	r0, [pc, #448]	; (8001d14 <main+0xa20>)
 8001b52:	f003 f84f 	bl	8004bf4 <HAL_TIM_Base_Start_IT>


	  /*
	   * Подготовка запуска процедуры калибровки
	   */
	  if(HAL_UART_Receive(&huart1, (uint8_t *) uart_buffer, 1, 10) ) {
 8001b56:	230a      	movs	r3, #10
 8001b58:	2201      	movs	r2, #1
 8001b5a:	496f      	ldr	r1, [pc, #444]	; (8001d18 <main+0xa24>)
 8001b5c:	486b      	ldr	r0, [pc, #428]	; (8001d0c <main+0xa18>)
 8001b5e:	f004 fdc9 	bl	80066f4 <HAL_UART_Receive>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f43f acf3 	beq.w	8001550 <main+0x25c>
		  if (uart_buffer[0] == 'c' ) {  // Клавиша c нажата ?
 8001b6a:	4b6b      	ldr	r3, [pc, #428]	; (8001d18 <main+0xa24>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b63      	cmp	r3, #99	; 0x63
 8001b70:	d153      	bne.n	8001c1a <main+0x926>
			  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_TEXT, sizeof(CALIBRATE_TEXT), 1000);
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	2216      	movs	r2, #22
 8001b78:	4968      	ldr	r1, [pc, #416]	; (8001d1c <main+0xa28>)
 8001b7a:	4864      	ldr	r0, [pc, #400]	; (8001d0c <main+0xa18>)
 8001b7c:	f004 fd28 	bl	80065d0 <HAL_UART_Transmit>
			  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001b80:	4864      	ldr	r0, [pc, #400]	; (8001d14 <main+0xa20>)
 8001b82:	f003 f889 	bl	8004c98 <HAL_TIM_Base_Stop_IT>
			  STOP_CAPTURE
 8001b86:	2100      	movs	r1, #0
 8001b88:	4865      	ldr	r0, [pc, #404]	; (8001d20 <main+0xa2c>)
 8001b8a:	f003 fb6f 	bl	800526c <HAL_TIM_IC_Stop_IT>
 8001b8e:	2104      	movs	r1, #4
 8001b90:	4863      	ldr	r0, [pc, #396]	; (8001d20 <main+0xa2c>)
 8001b92:	f003 fb6b 	bl	800526c <HAL_TIM_IC_Stop_IT>
			  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001b96:	22c8      	movs	r2, #200	; 0xc8
 8001b98:	2100      	movs	r1, #0
 8001b9a:	485b      	ldr	r0, [pc, #364]	; (8001d08 <main+0xa14>)
 8001b9c:	f004 ff4e 	bl	8006a3c <memset>
			  calibrate13 = TRUE;
 8001ba0:	4b60      	ldr	r3, [pc, #384]	; (8001d24 <main+0xa30>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
			  calibrate24 = TRUE;
 8001ba6:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <main+0xa34>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]
			  test_flag = FALSE;
 8001bac:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <main+0xa38>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
			  calibrateCount = 0;
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	; (8001d30 <main+0xa3c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	801a      	strh	r2, [r3, #0]
			  C_13 = CALIBRATE_START;
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <main+0xa40>)
 8001bba:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001bbe:	801a      	strh	r2, [r3, #0]
			  C_24 = CALIBRATE_START;
 8001bc0:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <main+0xa44>)
 8001bc2:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001bc6:	801a      	strh	r2, [r3, #0]
			  ZX1 = 0;
 8001bc8:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <main+0xa48>)
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
			  ZX2 = 0;
 8001bd0:	4b5b      	ldr	r3, [pc, #364]	; (8001d40 <main+0xa4c>)
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
			  ZY1 = 0;
 8001bd8:	4b5a      	ldr	r3, [pc, #360]	; (8001d44 <main+0xa50>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
			  ZY2 = 0;
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <main+0xa54>)
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
			  DX1.f = 0;
 8001be8:	4b58      	ldr	r3, [pc, #352]	; (8001d4c <main+0xa58>)
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
			  DY1.f = 0;
 8001bf0:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <main+0xa5c>)
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
			  test_cnt = 0;
 8001bf8:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <main+0xa60>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	801a      	strh	r2, [r3, #0]
			  calibrateMode = MEASSURE_COUNT * CALIBRATE_TIMES;
 8001bfe:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <main+0xa64>)
 8001c00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c04:	801a      	strh	r2, [r3, #0]
			  currentMode = 0;
 8001c06:	4b55      	ldr	r3, [pc, #340]	; (8001d5c <main+0xa68>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	801a      	strh	r2, [r3, #0]
			  measCount = 0;
 8001c0c:	4b54      	ldr	r3, [pc, #336]	; (8001d60 <main+0xa6c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	801a      	strh	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001c12:	4840      	ldr	r0, [pc, #256]	; (8001d14 <main+0xa20>)
 8001c14:	f002 ffee 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
 8001c18:	e059      	b.n	8001cce <main+0x9da>
		  } else {
			  if (uart_buffer[0] == 't' ) {		// Test
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <main+0xa24>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b74      	cmp	r3, #116	; 0x74
 8001c20:	d127      	bne.n	8001c72 <main+0x97e>
				  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001c22:	483c      	ldr	r0, [pc, #240]	; (8001d14 <main+0xa20>)
 8001c24:	f003 f838 	bl	8004c98 <HAL_TIM_Base_Stop_IT>
				  STOP_CAPTURE
 8001c28:	2100      	movs	r1, #0
 8001c2a:	483d      	ldr	r0, [pc, #244]	; (8001d20 <main+0xa2c>)
 8001c2c:	f003 fb1e 	bl	800526c <HAL_TIM_IC_Stop_IT>
 8001c30:	2104      	movs	r1, #4
 8001c32:	483b      	ldr	r0, [pc, #236]	; (8001d20 <main+0xa2c>)
 8001c34:	f003 fb1a 	bl	800526c <HAL_TIM_IC_Stop_IT>
				  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TEXT, sizeof(TEST_TEXT), 1000);
 8001c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	4949      	ldr	r1, [pc, #292]	; (8001d64 <main+0xa70>)
 8001c40:	4832      	ldr	r0, [pc, #200]	; (8001d0c <main+0xa18>)
 8001c42:	f004 fcc5 	bl	80065d0 <HAL_UART_Transmit>
				  calibrateMode = 1;
 8001c46:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <main+0xa64>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	801a      	strh	r2, [r3, #0]
				  calibrateCount = 0;
 8001c4c:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <main+0xa3c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	801a      	strh	r2, [r3, #0]
				  test_flag = TRUE;
 8001c52:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <main+0xa38>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
				  calibrate13 = TRUE;
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <main+0xa30>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
				  calibrate24 = TRUE;
 8001c5e:	4b32      	ldr	r3, [pc, #200]	; (8001d28 <main+0xa34>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
				  measCount = 0;
 8001c64:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <main+0xa6c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	801a      	strh	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001c6a:	482a      	ldr	r0, [pc, #168]	; (8001d14 <main+0xa20>)
 8001c6c:	f002 ffc2 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
 8001c70:	e02d      	b.n	8001cce <main+0x9da>
			  } else {
				  if (uart_buffer[0] == 'r' ) {		// Terminate calibration && test
 8001c72:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <main+0xa24>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b72      	cmp	r3, #114	; 0x72
 8001c78:	d129      	bne.n	8001cce <main+0x9da>
					  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001c7a:	4826      	ldr	r0, [pc, #152]	; (8001d14 <main+0xa20>)
 8001c7c:	f003 f80c 	bl	8004c98 <HAL_TIM_Base_Stop_IT>
					  STOP_CAPTURE
 8001c80:	2100      	movs	r1, #0
 8001c82:	4827      	ldr	r0, [pc, #156]	; (8001d20 <main+0xa2c>)
 8001c84:	f003 faf2 	bl	800526c <HAL_TIM_IC_Stop_IT>
 8001c88:	2104      	movs	r1, #4
 8001c8a:	4825      	ldr	r0, [pc, #148]	; (8001d20 <main+0xa2c>)
 8001c8c:	f003 faee 	bl	800526c <HAL_TIM_IC_Stop_IT>
					  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TERMINATE, sizeof(TEST_TERMINATE), 1000);
 8001c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c94:	2221      	movs	r2, #33	; 0x21
 8001c96:	4934      	ldr	r1, [pc, #208]	; (8001d68 <main+0xa74>)
 8001c98:	481c      	ldr	r0, [pc, #112]	; (8001d0c <main+0xa18>)
 8001c9a:	f004 fc99 	bl	80065d0 <HAL_UART_Transmit>
					  test_flag = 0;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <main+0xa38>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
					  calibrate13 = TRUE;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <main+0xa30>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
					  calibrate24 = TRUE;
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <main+0xa34>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
					  calibrateMode = 0;
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <main+0xa64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
					  calibrateCount = 0;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <main+0xa3c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	801a      	strh	r2, [r3, #0]
					  measCount = 0;
 8001cbc:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <main+0xa6c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	801a      	strh	r2, [r3, #0]
					  rwFlash(0);		// Чтение параметров калибровки из Flash.
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff f9e8 	bl	8001098 <rwFlash>
					  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001cc8:	4812      	ldr	r0, [pc, #72]	; (8001d14 <main+0xa20>)
 8001cca:	f002 ff93 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
				  }
			  }
		  }
		  uart_buffer[0] = 0x00;
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <main+0xa24>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
	  if (readyFlag) {
 8001cd4:	e43c      	b.n	8001550 <main+0x25c>
 8001cd6:	bf00      	nop
 8001cd8:	20000b2c 	.word	0x20000b2c
 8001cdc:	20000388 	.word	0x20000388
 8001ce0:	20000398 	.word	0x20000398
 8001ce4:	200002f0 	.word	0x200002f0
 8001ce8:	20000300 	.word	0x20000300
 8001cec:	20000888 	.word	0x20000888
 8001cf0:	20000538 	.word	0x20000538
 8001cf4:	20000320 	.word	0x20000320
 8001cf8:	20000348 	.word	0x20000348
 8001cfc:	20000358 	.word	0x20000358
 8001d00:	20000384 	.word	0x20000384
 8001d04:	0800adb0 	.word	0x0800adb0
 8001d08:	2000020c 	.word	0x2000020c
 8001d0c:	20000c88 	.word	0x20000c88
 8001d10:	e000e010 	.word	0xe000e010
 8001d14:	20000b90 	.word	0x20000b90
 8001d18:	20000200 	.word	0x20000200
 8001d1c:	0800ae18 	.word	0x0800ae18
 8001d20:	20000d18 	.word	0x20000d18
 8001d24:	2000033e 	.word	0x2000033e
 8001d28:	20000544 	.word	0x20000544
 8001d2c:	200003a0 	.word	0x200003a0
 8001d30:	20000882 	.word	0x20000882
 8001d34:	200006e8 	.word	0x200006e8
 8001d38:	2000033c 	.word	0x2000033c
 8001d3c:	20000338 	.word	0x20000338
 8001d40:	20000540 	.word	0x20000540
 8001d44:	2000087c 	.word	0x2000087c
 8001d48:	20000b20 	.word	0x20000b20
 8001d4c:	200002e8 	.word	0x200002e8
 8001d50:	200002f8 	.word	0x200002f8
 8001d54:	20000b24 	.word	0x20000b24
 8001d58:	20000880 	.word	0x20000880
 8001d5c:	200006d8 	.word	0x200006d8
 8001d60:	20000318 	.word	0x20000318
 8001d64:	0800ae30 	.word	0x0800ae30
 8001d68:	0800ae40 	.word	0x0800ae40

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b090      	sub	sp, #64	; 0x40
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	2228      	movs	r2, #40	; 0x28
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fe5e 	bl	8006a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d8e:	230a      	movs	r3, #10
 8001d90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d92:	2301      	movs	r3, #1
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d96:	2310      	movs	r3, #16
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001da2:	2300      	movs	r3, #0
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001da6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 fa2f 	bl	8004214 <HAL_RCC_OscConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001dbc:	f000 fc4e 	bl	800265c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2102      	movs	r1, #2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 fc9a 	bl	8004714 <HAL_RCC_ClockConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001de6:	f000 fc39 	bl	800265c <Error_Handler>
  }
}
 8001dea:	bf00      	nop
 8001dec:	3740      	adds	r7, #64	; 0x40
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <MX_I2C1_Init+0x54>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <MX_I2C1_Init+0x58>)
 8001e02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <MX_I2C1_Init+0x50>)
 8001e32:	f002 f859 	bl	8003ee8 <HAL_I2C_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e3c:	f000 fc0e 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000bd8 	.word	0x20000bd8
 8001e48:	40005400 	.word	0x40005400
 8001e4c:	000186a0 	.word	0x000186a0

08001e50 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_IWDG_Init+0x2c>)
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <MX_IWDG_Init+0x30>)
 8001e58:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <MX_IWDG_Init+0x2c>)
 8001e5c:	2205      	movs	r2, #5
 8001e5e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_IWDG_Init+0x2c>)
 8001e62:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e66:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_IWDG_Init+0x2c>)
 8001e6a:	f002 f981 	bl	8004170 <HAL_IWDG_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001e74:	f000 fbf2 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000c2c 	.word	0x20000c2c
 8001e80:	40003000 	.word	0x40003000

08001e84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI2_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI2_Init+0x64>)
 8001ed6:	f002 fdb9 	bl	8004a4c <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 fbbc 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000b38 	.word	0x20000b38
 8001eec:	40003800 	.word	0x40003800

08001ef0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b096      	sub	sp, #88	; 0x58
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	615a      	str	r2, [r3, #20]
 8001f20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2220      	movs	r2, #32
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 fd87 	bl	8006a3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f2e:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f30:	4a61      	ldr	r2, [pc, #388]	; (80020b8 <MX_TIM1_Init+0x1c8>)
 8001f32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f34:	4b5f      	ldr	r3, [pc, #380]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3a:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 810;
 8001f40:	4b5c      	ldr	r3, [pc, #368]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f42:	f240 322a 	movw	r2, #810	; 0x32a
 8001f46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f48:	4b5a      	ldr	r3, [pc, #360]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 91;
 8001f4e:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f50:	225b      	movs	r2, #91	; 0x5b
 8001f52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f54:	4b57      	ldr	r3, [pc, #348]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f56:	2280      	movs	r2, #128	; 0x80
 8001f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f5a:	4856      	ldr	r0, [pc, #344]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f5c:	f002 fdfa 	bl	8004b54 <HAL_TIM_Base_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f66:	f000 fb79 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f74:	4619      	mov	r1, r3
 8001f76:	484f      	ldr	r0, [pc, #316]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f78:	f003 fc6e 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f82:	f000 fb6b 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001f86:	484b      	ldr	r0, [pc, #300]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f88:	f002 feb4 	bl	8004cf4 <HAL_TIM_OC_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f92:	f000 fb63 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001f96:	2108      	movs	r1, #8
 8001f98:	4846      	ldr	r0, [pc, #280]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001f9a:	f003 fa0f 	bl	80053bc <HAL_TIM_OnePulse_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001fa4:	f000 fb5a 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001fa8:	2330      	movs	r3, #48	; 0x30
 8001faa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	483f      	ldr	r0, [pc, #252]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001fb8:	f004 f9fc 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001fc2:	f000 fb4b 	bl	800265c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001fc6:	2330      	movs	r3, #48	; 0x30
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4832      	ldr	r0, [pc, #200]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001fec:	f003 fb48 	bl	8005680 <HAL_TIM_OC_ConfigChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001ff6:	f000 fb31 	bl	800265c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0208 	orr.w	r2, r2, #8
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800200a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200e:	2204      	movs	r2, #4
 8002010:	4619      	mov	r1, r3
 8002012:	4828      	ldr	r0, [pc, #160]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8002014:	f003 fb34 	bl	8005680 <HAL_TIM_OC_ConfigChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 800201e:	f000 fb1d 	bl	800265c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	2208      	movs	r2, #8
 8002038:	4619      	mov	r1, r3
 800203a:	481e      	ldr	r0, [pc, #120]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 800203c:	f003 fb20 	bl	8005680 <HAL_TIM_OC_ConfigChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002046:	f000 fb09 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800204a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204e:	220c      	movs	r2, #12
 8002050:	4619      	mov	r1, r3
 8002052:	4818      	ldr	r0, [pc, #96]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8002054:	f003 fb14 	bl	8005680 <HAL_TIM_OC_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800205e:	f000 fafd 	bl	800265c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002070:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	4619      	mov	r1, r3
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 8002096:	f004 f9eb 	bl	8006470 <HAL_TIMEx_ConfigBreakDeadTime>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 80020a0:	f000 fadc 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <MX_TIM1_Init+0x1c4>)
 80020a6:	f000 fc3d 	bl	8002924 <HAL_TIM_MspPostInit>

}
 80020aa:	bf00      	nop
 80020ac:	3758      	adds	r7, #88	; 0x58
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000cd0 	.word	0x20000cd0
 80020b8:	40012c00 	.word	0x40012c00

080020bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b090      	sub	sp, #64	; 0x40
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <MX_TIM2_Init+0x128>)
 80020f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <MX_TIM2_Init+0x128>)
 8002100:	2200      	movs	r2, #0
 8002102:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <MX_TIM2_Init+0x128>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800210a:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <MX_TIM2_Init+0x128>)
 800210c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002110:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <MX_TIM2_Init+0x128>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002118:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <MX_TIM2_Init+0x128>)
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800211e:	4831      	ldr	r0, [pc, #196]	; (80021e4 <MX_TIM2_Init+0x128>)
 8002120:	f002 fd18 	bl	8004b54 <HAL_TIM_Base_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800212a:	f000 fa97 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002134:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002138:	4619      	mov	r1, r3
 800213a:	482a      	ldr	r0, [pc, #168]	; (80021e4 <MX_TIM2_Init+0x128>)
 800213c:	f003 fb8c 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002146:	f000 fa89 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800214a:	4826      	ldr	r0, [pc, #152]	; (80021e4 <MX_TIM2_Init+0x128>)
 800214c:	f002 ff30 	bl	8004fb0 <HAL_TIM_IC_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002156:	f000 fa81 	bl	800265c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800215a:	2304      	movs	r3, #4
 800215c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800215e:	2320      	movs	r3, #32
 8002160:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4619      	mov	r1, r3
 8002168:	481e      	ldr	r0, [pc, #120]	; (80021e4 <MX_TIM2_Init+0x128>)
 800216a:	f003 fc39 	bl	80059e0 <HAL_TIM_SlaveConfigSynchro>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002174:	f000 fa72 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	4817      	ldr	r0, [pc, #92]	; (80021e4 <MX_TIM2_Init+0x128>)
 8002188:	f004 f914 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002192:	f000 fa63 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800219a:	2301      	movs	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2200      	movs	r2, #0
 80021aa:	4619      	mov	r1, r3
 80021ac:	480d      	ldr	r0, [pc, #52]	; (80021e4 <MX_TIM2_Init+0x128>)
 80021ae:	f003 fabf 	bl	8005730 <HAL_TIM_IC_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80021b8:	f000 fa50 	bl	800265c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80021bc:	2302      	movs	r3, #2
 80021be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80021c0:	2302      	movs	r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2204      	movs	r2, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4806      	ldr	r0, [pc, #24]	; (80021e4 <MX_TIM2_Init+0x128>)
 80021cc:	f003 fab0 	bl	8005730 <HAL_TIM_IC_ConfigChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80021d6:	f000 fa41 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	3740      	adds	r7, #64	; 0x40
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000d18 	.word	0x20000d18

080021e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b092      	sub	sp, #72	; 0x48
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002216:	463b      	mov	r3, r7
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
 8002224:	615a      	str	r2, [r3, #20]
 8002226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <MX_TIM3_Init+0x120>)
 800222a:	4a38      	ldr	r2, [pc, #224]	; (800230c <MX_TIM3_Init+0x124>)
 800222c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800222e:	4b36      	ldr	r3, [pc, #216]	; (8002308 <MX_TIM3_Init+0x120>)
 8002230:	2200      	movs	r2, #0
 8002232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002234:	4b34      	ldr	r3, [pc, #208]	; (8002308 <MX_TIM3_Init+0x120>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <MX_TIM3_Init+0x120>)
 800223c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002240:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <MX_TIM3_Init+0x120>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <MX_TIM3_Init+0x120>)
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800224e:	482e      	ldr	r0, [pc, #184]	; (8002308 <MX_TIM3_Init+0x120>)
 8002250:	f002 fc80 	bl	8004b54 <HAL_TIM_Base_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800225a:	f000 f9ff 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002264:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002268:	4619      	mov	r1, r3
 800226a:	4827      	ldr	r0, [pc, #156]	; (8002308 <MX_TIM3_Init+0x120>)
 800226c:	f003 faf4 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002276:	f000 f9f1 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800227a:	4823      	ldr	r0, [pc, #140]	; (8002308 <MX_TIM3_Init+0x120>)
 800227c:	f002 fd3a 	bl	8004cf4 <HAL_TIM_OC_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8002286:	f000 f9e9 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800228a:	2108      	movs	r1, #8
 800228c:	481e      	ldr	r0, [pc, #120]	; (8002308 <MX_TIM3_Init+0x120>)
 800228e:	f003 f895 	bl	80053bc <HAL_TIM_OnePulse_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002298:	f000 f9e0 	bl	800265c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800229c:	2306      	movs	r3, #6
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	4817      	ldr	r0, [pc, #92]	; (8002308 <MX_TIM3_Init+0x120>)
 80022ac:	f003 fb98 	bl	80059e0 <HAL_TIM_SlaveConfigSynchro>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80022b6:	f000 f9d1 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80022ba:	2330      	movs	r3, #48	; 0x30
 80022bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	480f      	ldr	r0, [pc, #60]	; (8002308 <MX_TIM3_Init+0x120>)
 80022ca:	f004 f873 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80022d4:	f000 f9c2 	bl	800265c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80022d8:	2310      	movs	r3, #16
 80022da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e8:	463b      	mov	r3, r7
 80022ea:	2200      	movs	r2, #0
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <MX_TIM3_Init+0x120>)
 80022f0:	f003 f9c6 	bl	8005680 <HAL_TIM_OC_ConfigChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80022fa:	f000 f9af 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	3748      	adds	r7, #72	; 0x48
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000c40 	.word	0x20000c40
 800230c:	40000400 	.word	0x40000400

08002310 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	463b      	mov	r3, r7
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <MX_TIM4_Init+0x94>)
 800232e:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <MX_TIM4_Init+0x98>)
 8002330:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002334:	2201      	movs	r2, #1
 8002336:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <MX_TIM4_Init+0x94>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002344:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_TIM4_Init+0x94>)
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002352:	4814      	ldr	r0, [pc, #80]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002354:	f002 fbfe 	bl	8004b54 <HAL_TIM_Base_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800235e:	f000 f97d 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002366:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	4619      	mov	r1, r3
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <MX_TIM4_Init+0x94>)
 8002370:	f003 fa72 	bl	8005858 <HAL_TIM_ConfigClockSource>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800237a:	f000 f96f 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800237e:	2320      	movs	r3, #32
 8002380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002386:	463b      	mov	r3, r7
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <MX_TIM4_Init+0x94>)
 800238c:	f004 f812 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002396:	f000 f961 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000b90 	.word	0x20000b90
 80023a8:	40000800 	.word	0x40000800

080023ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <MX_USART1_UART_Init+0x50>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023e4:	f004 f8a7 	bl	8006536 <HAL_UART_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ee:	f000 f935 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000c88 	.word	0x20000c88
 80023fc:	40013800 	.word	0x40013800

08002400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002414:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <MX_GPIO_Init+0xb8>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <MX_GPIO_Init+0xb8>)
 800241a:	f043 0320 	orr.w	r3, r3, #32
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <MX_GPIO_Init+0xb8>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <MX_GPIO_Init+0xb8>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <MX_GPIO_Init+0xb8>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <MX_GPIO_Init+0xb8>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <MX_GPIO_Init+0xb8>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <MX_GPIO_Init+0xb8>)
 800244a:	f043 0308 	orr.w	r3, r3, #8
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <MX_GPIO_Init+0xb8>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|nRst_Pin, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8002462:	4816      	ldr	r0, [pc, #88]	; (80024bc <MX_GPIO_Init+0xbc>)
 8002464:	f001 fd28 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 8002468:	2200      	movs	r2, #0
 800246a:	f241 011e 	movw	r1, #4126	; 0x101e
 800246e:	4814      	ldr	r0, [pc, #80]	; (80024c0 <MX_GPIO_Init+0xc0>)
 8002470:	f001 fd22 	bl	8003eb8 <HAL_GPIO_WritePin>
                          |Z4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin nRst_Pin */
  GPIO_InitStruct.Pin = LED_Pin|nRst_Pin;
 8002474:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8002478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2301      	movs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2302      	movs	r3, #2
 8002484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	4619      	mov	r1, r3
 800248c:	480b      	ldr	r0, [pc, #44]	; (80024bc <MX_GPIO_Init+0xbc>)
 800248e:	f001 fb8f 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z1_Pin Z2_Pin SCSN_Pin Z3_Pin
                           Z4_Pin */
  GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 8002492:	f241 031e 	movw	r3, #4126	; 0x101e
 8002496:	613b      	str	r3, [r7, #16]
                          |Z4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002498:	2301      	movs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2302      	movs	r3, #2
 80024a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4619      	mov	r1, r3
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_GPIO_Init+0xc0>)
 80024ac:	f001 fb80 	bl	8003bb0 <HAL_GPIO_Init>

}
 80024b0:	bf00      	nop
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40010800 	.word	0x40010800
 80024c0:	40010c00 	.word	0x40010c00

080024c4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	if (runFlag > 0) {								// Разрешено измерение ?
 80024cc:	4b54      	ldr	r3, [pc, #336]	; (8002620 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 809f 	beq.w	8002614 <HAL_TIM_IC_CaptureCallback+0x150>
		if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024de:	f040 8099 	bne.w	8002614 <HAL_TIM_IC_CaptureCallback+0x150>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7f1b      	ldrb	r3, [r3, #28]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d004      	beq.n	80024f4 <HAL_TIM_IC_CaptureCallback+0x30>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7f1b      	ldrb	r3, [r3, #28]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	f040 8090 	bne.w	8002614 <HAL_TIM_IC_CaptureCallback+0x150>
			if ((runFlag < COUNT_FRONT) || ((GPIOA->IDR & GPIO_PIN_0) != 0) ) {  // Ждем фронт первого импульса, дальше обрабатываем все импульсы.
 80024f4:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d906      	bls.n	800250a <HAL_TIM_IC_CaptureCallback+0x46>
 80024fc:	4b49      	ldr	r3, [pc, #292]	; (8002624 <HAL_TIM_IC_CaptureCallback+0x160>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8085 	beq.w	8002614 <HAL_TIM_IC_CaptureCallback+0x150>
				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ) {  // Активен фронт
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7f1b      	ldrb	r3, [r3, #28]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10a      	bne.n	8002528 <HAL_TIM_IC_CaptureCallback+0x64>
					front_sum = front_sum + HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8002512:	2100      	movs	r1, #0
 8002514:	4844      	ldr	r0, [pc, #272]	; (8002628 <HAL_TIM_IC_CaptureCallback+0x164>)
 8002516:	f003 faa5 	bl	8005a64 <HAL_TIM_ReadCapturedValue>
 800251a:	4602      	mov	r2, r0
 800251c:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_TIM_IC_CaptureCallback+0x168>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4413      	add	r3, r2
 8002522:	4a42      	ldr	r2, [pc, #264]	; (800262c <HAL_TIM_IC_CaptureCallback+0x168>)
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e009      	b.n	800253c <HAL_TIM_IC_CaptureCallback+0x78>
				} else {   // Активен спад
					front_sum = front_sum + HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8002528:	2104      	movs	r1, #4
 800252a:	483f      	ldr	r0, [pc, #252]	; (8002628 <HAL_TIM_IC_CaptureCallback+0x164>)
 800252c:	f003 fa9a 	bl	8005a64 <HAL_TIM_ReadCapturedValue>
 8002530:	4602      	mov	r2, r0
 8002532:	4b3e      	ldr	r3, [pc, #248]	; (800262c <HAL_TIM_IC_CaptureCallback+0x168>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	4a3c      	ldr	r2, [pc, #240]	; (800262c <HAL_TIM_IC_CaptureCallback+0x168>)
 800253a:	6013      	str	r3, [r2, #0]
				}
				runFlag--;
 800253c:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3b01      	subs	r3, #1
 8002542:	4a37      	ldr	r2, [pc, #220]	; (8002620 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8002544:	6013      	str	r3, [r2, #0]
				if (runFlag == 0) {
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d162      	bne.n	8002614 <HAL_TIM_IC_CaptureCallback+0x150>
					//LED_PULSE
					STOP_CAPTURE
 800254e:	2100      	movs	r1, #0
 8002550:	4835      	ldr	r0, [pc, #212]	; (8002628 <HAL_TIM_IC_CaptureCallback+0x164>)
 8002552:	f002 fe8b 	bl	800526c <HAL_TIM_IC_Stop_IT>
 8002556:	2104      	movs	r1, #4
 8002558:	4833      	ldr	r0, [pc, #204]	; (8002628 <HAL_TIM_IC_CaptureCallback+0x164>)
 800255a:	f002 fe87 	bl	800526c <HAL_TIM_IC_Stop_IT>
					front_sumf = (float) front_sum / ((COUNT_FRONT + COUNT_FRONT * COUNT_FRONT) / 2);  // Расчитываем задержку от средины импульсов
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <HAL_TIM_IC_CaptureCallback+0x168>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fb46 	bl	8000bf4 <__aeabi_ui2f>
 8002568:	4603      	mov	r3, r0
 800256a:	4931      	ldr	r1, [pc, #196]	; (8002630 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fc4d 	bl	8000e0c <__aeabi_fdiv>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x170>)
 8002578:	601a      	str	r2, [r3, #0]
					if (front_sumf > 1500) {	// Ошибка измерения.
 800257a:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x170>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	492e      	ldr	r1, [pc, #184]	; (8002638 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fd4b 	bl	800101c <__aeabi_fcmpgt>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_TIM_IC_CaptureCallback+0xce>
						front_sumf = 1500;		// Значение необходимое для калибровки.
 800258c:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x170>)
 800258e:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002590:	601a      	str	r2, [r3, #0]
					}
					/* Отключим все мультиплексоры */
					receiversOff
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_TIM_IC_CaptureCallback+0x178>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4a29      	ldr	r2, [pc, #164]	; (800263c <HAL_TIM_IC_CaptureCallback+0x178>)
 8002598:	f043 031e 	orr.w	r3, r3, #30
 800259c:	60d3      	str	r3, [r2, #12]
					//runFlag = 0;
					#ifdef SYSTICK_DISABLE
						SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6013      	str	r3, [r2, #0]
					#endif
					switch (currentMode) {
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_TIM_IC_CaptureCallback+0x180>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d830      	bhi.n	8002616 <HAL_TIM_IC_CaptureCallback+0x152>
 80025b4:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025df 	.word	0x080025df
 80025c4:	080025f1 	.word	0x080025f1
 80025c8:	08002603 	.word	0x08002603
						case 1: { // Z1 > Z3, Z13
							resul_arrayY1[measCount] = front_sumf;
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_TIM_IC_CaptureCallback+0x184>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	4b18      	ldr	r3, [pc, #96]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x170>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_TIM_IC_CaptureCallback+0x188>)
 80025d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							break;
 80025dc:	e01b      	b.n	8002616 <HAL_TIM_IC_CaptureCallback+0x152>
						}
						case 2: { // Z3 > Z1, Z31
							resul_arrayY2[measCount] = front_sumf;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_TIM_IC_CaptureCallback+0x184>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	4619      	mov	r1, r3
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x170>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a19      	ldr	r2, [pc, #100]	; (8002650 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80025ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							break;
 80025ee:	e012      	b.n	8002616 <HAL_TIM_IC_CaptureCallback+0x152>
						}
						case 3: { // Z2 > Z4 Z24
							resul_arrayX1[measCount] = front_sumf;
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_TIM_IC_CaptureCallback+0x184>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x170>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a16      	ldr	r2, [pc, #88]	; (8002654 <HAL_TIM_IC_CaptureCallback+0x190>)
 80025fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							break;
 8002600:	e009      	b.n	8002616 <HAL_TIM_IC_CaptureCallback+0x152>
						}
						case 4: { // Z4 > Z2 Z42
							resul_arrayX2[measCount] = front_sumf;
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	4619      	mov	r1, r3
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_TIM_IC_CaptureCallback+0x170>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a12      	ldr	r2, [pc, #72]	; (8002658 <HAL_TIM_IC_CaptureCallback+0x194>)
 800260e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							break;
 8002612:	e000      	b.n	8002616 <HAL_TIM_IC_CaptureCallback+0x152>
						}
					}
				}
 8002614:	bf00      	nop
			}
		}
	}
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000390 	.word	0x20000390
 8002624:	40010800 	.word	0x40010800
 8002628:	20000d18 	.word	0x20000d18
 800262c:	20000380 	.word	0x20000380
 8002630:	40400000 	.word	0x40400000
 8002634:	20000308 	.word	0x20000308
 8002638:	44bb8000 	.word	0x44bb8000
 800263c:	40010c00 	.word	0x40010c00
 8002640:	e000e010 	.word	0xe000e010
 8002644:	200006d8 	.word	0x200006d8
 8002648:	20000318 	.word	0x20000318
 800264c:	200003a4 	.word	0x200003a4
 8002650:	20000890 	.word	0x20000890
 8002654:	20000548 	.word	0x20000548
 8002658:	200006ec 	.word	0x200006ec

0800265c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002660:	b672      	cpsid	i
}
 8002662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002664:	e7fe      	b.n	8002664 <Error_Handler+0x8>
	...

08002668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_MspInit+0x5c>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <HAL_MspInit+0x5c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6193      	str	r3, [r2, #24]
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_MspInit+0x5c>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_MspInit+0x5c>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <HAL_MspInit+0x5c>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_MspInit+0x5c>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_MspInit+0x60>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_MspInit+0x60>)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40010000 	.word	0x40010000

080026cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1d      	ldr	r2, [pc, #116]	; (800275c <HAL_I2C_MspInit+0x90>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d132      	bne.n	8002752 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_I2C_MspInit+0x94>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <HAL_I2C_MspInit+0x94>)
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_I2C_MspInit+0x94>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002704:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270a:	2312      	movs	r3, #18
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	4812      	ldr	r0, [pc, #72]	; (8002764 <HAL_I2C_MspInit+0x98>)
 800271a:	f001 fa49 	bl	8003bb0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_I2C_MspInit+0x9c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_I2C_MspInit+0x9c>)
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_I2C_MspInit+0x94>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_I2C_MspInit+0x94>)
 8002740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_I2C_MspInit+0x94>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	; 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40005400 	.word	0x40005400
 8002760:	40021000 	.word	0x40021000
 8002764:	40010c00 	.word	0x40010c00
 8002768:	40010000 	.word	0x40010000

0800276c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_SPI_MspInit+0x8c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d131      	bne.n	80027f0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_SPI_MspInit+0x90>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4a1a      	ldr	r2, [pc, #104]	; (80027fc <HAL_SPI_MspInit+0x90>)
 8002792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002796:	61d3      	str	r3, [r2, #28]
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <HAL_SPI_MspInit+0x90>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_SPI_MspInit+0x90>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <HAL_SPI_MspInit+0x90>)
 80027aa:	f043 0308 	orr.w	r3, r3, #8
 80027ae:	6193      	str	r3, [r2, #24]
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_SPI_MspInit+0x90>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80027bc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80027c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 0310 	add.w	r3, r7, #16
 80027ce:	4619      	mov	r1, r3
 80027d0:	480b      	ldr	r0, [pc, #44]	; (8002800 <HAL_SPI_MspInit+0x94>)
 80027d2:	f001 f9ed 	bl	8003bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	4619      	mov	r1, r3
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <HAL_SPI_MspInit+0x94>)
 80027ec:	f001 f9e0 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027f0:	bf00      	nop
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40003800 	.word	0x40003800
 80027fc:	40021000 	.word	0x40021000
 8002800:	40010c00 	.word	0x40010c00

08002804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0320 	add.w	r3, r7, #32
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a3c      	ldr	r2, [pc, #240]	; (8002910 <HAL_TIM_Base_MspInit+0x10c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10c      	bne.n	800283e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002824:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 800282a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800283c:	e064      	b.n	8002908 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002846:	d12c      	bne.n	80028a2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a31      	ldr	r2, [pc, #196]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	61d3      	str	r3, [r2, #28]
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002860:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a2b      	ldr	r2, [pc, #172]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002878:	2301      	movs	r3, #1
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	f107 0320 	add.w	r3, r7, #32
 8002888:	4619      	mov	r1, r3
 800288a:	4823      	ldr	r0, [pc, #140]	; (8002918 <HAL_TIM_Base_MspInit+0x114>)
 800288c:	f001 f990 	bl	8003bb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2100      	movs	r1, #0
 8002894:	201c      	movs	r0, #28
 8002896:	f000 ff50 	bl	800373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800289a:	201c      	movs	r0, #28
 800289c:	f000 ff69 	bl	8003772 <HAL_NVIC_EnableIRQ>
}
 80028a0:	e032      	b.n	8002908 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM3)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_TIM_Base_MspInit+0x118>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d114      	bne.n	80028d6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 80028b2:	f043 0302 	orr.w	r3, r3, #2
 80028b6:	61d3      	str	r3, [r2, #28]
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	201d      	movs	r0, #29
 80028ca:	f000 ff36 	bl	800373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028ce:	201d      	movs	r0, #29
 80028d0:	f000 ff4f 	bl	8003772 <HAL_NVIC_EnableIRQ>
}
 80028d4:	e018      	b.n	8002908 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a11      	ldr	r2, [pc, #68]	; (8002920 <HAL_TIM_Base_MspInit+0x11c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d113      	bne.n	8002908 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	61d3      	str	r3, [r2, #28]
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_TIM_Base_MspInit+0x110>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	201e      	movs	r0, #30
 80028fe:	f000 ff1c 	bl	800373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002902:	201e      	movs	r0, #30
 8002904:	f000 ff35 	bl	8003772 <HAL_NVIC_EnableIRQ>
}
 8002908:	bf00      	nop
 800290a:	3730      	adds	r7, #48	; 0x30
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40021000 	.word	0x40021000
 8002918:	40010800 	.word	0x40010800
 800291c:	40000400 	.word	0x40000400
 8002920:	40000800 	.word	0x40000800

08002924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a10      	ldr	r2, [pc, #64]	; (8002980 <HAL_TIM_MspPostInit+0x5c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d118      	bne.n	8002976 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <HAL_TIM_MspPostInit+0x60>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_TIM_MspPostInit+0x60>)
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	6193      	str	r3, [r2, #24]
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_TIM_MspPostInit+0x60>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTZ1_Pin|OUTZ2_Pin|OUTZ3_Pin|OUTZ4_Pin;
 800295c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	f107 0310 	add.w	r3, r7, #16
 800296e:	4619      	mov	r1, r3
 8002970:	4805      	ldr	r0, [pc, #20]	; (8002988 <HAL_TIM_MspPostInit+0x64>)
 8002972:	f001 f91d 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002976:	bf00      	nop
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40021000 	.word	0x40021000
 8002988:	40010800 	.word	0x40010800

0800298c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <HAL_UART_MspInit+0xa4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d13d      	bne.n	8002a28 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_UART_MspInit+0xa8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_UART_MspInit+0xa8>)
 80029b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b6:	6193      	str	r3, [r2, #24]
 80029b8:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <HAL_UART_MspInit+0xa8>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_UART_MspInit+0xa8>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_UART_MspInit+0xa8>)
 80029ca:	f043 0308 	orr.w	r3, r3, #8
 80029ce:	6193      	str	r3, [r2, #24]
 80029d0:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_UART_MspInit+0xa8>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029dc:	2340      	movs	r3, #64	; 0x40
 80029de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	4812      	ldr	r0, [pc, #72]	; (8002a38 <HAL_UART_MspInit+0xac>)
 80029f0:	f001 f8de 	bl	8003bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	480c      	ldr	r0, [pc, #48]	; (8002a38 <HAL_UART_MspInit+0xac>)
 8002a08:	f001 f8d2 	bl	8003bb0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_UART_MspInit+0xb0>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	4a06      	ldr	r2, [pc, #24]	; (8002a3c <HAL_UART_MspInit+0xb0>)
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a28:	bf00      	nop
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010c00 	.word	0x40010c00
 8002a3c:	40010000 	.word	0x40010000

08002a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <NMI_Handler+0x4>

08002a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <HardFault_Handler+0x4>

08002a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <MemManage_Handler+0x4>

08002a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a56:	e7fe      	b.n	8002a56 <BusFault_Handler+0x4>

08002a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <UsageFault_Handler+0x4>

08002a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
	...

08002a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <SysTick_Handler+0x2c>)
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <SysTick_Handler+0x2c>)
 8002a92:	801a      	strh	r2, [r3, #0]
	if(ticks >= 1000) {
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <SysTick_Handler+0x2c>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a9c:	d304      	bcc.n	8002aa8 <SysTick_Handler+0x24>
		DHCP_time_handler();
 8002a9e:	f7fe faed 	bl	800107c <DHCP_time_handler>
		ticks = 0;
 8002aa2:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <SysTick_Handler+0x2c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa8:	f000 fd3e 	bl	8003528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200002d4 	.word	0x200002d4

08002ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <TIM2_IRQHandler+0x10>)
 8002aba:	f002 fcd8 	bl	800546e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000d18 	.word	0x20000d18

08002ac8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_TIM_Base_Stop_IT(&htim3);
	runFlag = COUNT_FRONT;		// Сработал таймер сброса таймера захвата, начинаем измерение.
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <TIM3_IRQHandler+0x14>)
 8002ace:	2202      	movs	r2, #2
 8002ad0:	601a      	str	r2, [r3, #0]
	//LED_PULSE
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ad2:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <TIM3_IRQHandler+0x18>)
 8002ad4:	f002 fccb 	bl	800546e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000390 	.word	0x20000390
 8002ae0:	20000c40 	.word	0x20000c40
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b08c      	sub	sp, #48	; 0x30
 8002aec:	af00      	add	r7, sp, #0
	#else
	double Vm[3];
	uint8_t countV;
	#endif
	#ifdef SYSTICK_DISABLE
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8002aee:	4ba5      	ldr	r3, [pc, #660]	; (8002d84 <TIM4_IRQHandler+0x29c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4aa4      	ldr	r2, [pc, #656]	; (8002d84 <TIM4_IRQHandler+0x29c>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6013      	str	r3, [r2, #0]
	#endif

		front_sum = 0;
 8002afa:	4ba3      	ldr	r3, [pc, #652]	; (8002d88 <TIM4_IRQHandler+0x2a0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
		runFlag = 0;
 8002b00:	4ba2      	ldr	r3, [pc, #648]	; (8002d8c <TIM4_IRQHandler+0x2a4>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8002b06:	2100      	movs	r1, #0
 8002b08:	48a1      	ldr	r0, [pc, #644]	; (8002d90 <TIM4_IRQHandler+0x2a8>)
 8002b0a:	f002 f9ed 	bl	8004ee8 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8002b0e:	2104      	movs	r1, #4
 8002b10:	489f      	ldr	r0, [pc, #636]	; (8002d90 <TIM4_IRQHandler+0x2a8>)
 8002b12:	f002 f9e9 	bl	8004ee8 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8002b16:	2108      	movs	r1, #8
 8002b18:	489d      	ldr	r0, [pc, #628]	; (8002d90 <TIM4_IRQHandler+0x2a8>)
 8002b1a:	f002 f9e5 	bl	8004ee8 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8002b1e:	210c      	movs	r1, #12
 8002b20:	489b      	ldr	r0, [pc, #620]	; (8002d90 <TIM4_IRQHandler+0x2a8>)
 8002b22:	f002 f9e1 	bl	8004ee8 <HAL_TIM_OC_Stop>

		/* Отключим все мультиплексоры */
		receiversOff
 8002b26:	4b9b      	ldr	r3, [pc, #620]	; (8002d94 <TIM4_IRQHandler+0x2ac>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4a9a      	ldr	r2, [pc, #616]	; (8002d94 <TIM4_IRQHandler+0x2ac>)
 8002b2c:	f043 031e 	orr.w	r3, r3, #30
 8002b30:	60d3      	str	r3, [r2, #12]
		STOP_CAPTURE	// If not stop in callback.
 8002b32:	2100      	movs	r1, #0
 8002b34:	4898      	ldr	r0, [pc, #608]	; (8002d98 <TIM4_IRQHandler+0x2b0>)
 8002b36:	f002 fb99 	bl	800526c <HAL_TIM_IC_Stop_IT>
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	4896      	ldr	r0, [pc, #600]	; (8002d98 <TIM4_IRQHandler+0x2b0>)
 8002b3e:	f002 fb95 	bl	800526c <HAL_TIM_IC_Stop_IT>
		/* Set all timer channels for output mode */
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002b42:	4b96      	ldr	r3, [pc, #600]	; (8002d9c <TIM4_IRQHandler+0x2b4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8002b46:	f423 436e 	bic.w	r3, r3, #60928	; 0xee00
 8002b4a:	f023 03ee 	bic.w	r3, r3, #238	; 0xee
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002b4e:	4a93      	ldr	r2, [pc, #588]	; (8002d9c <TIM4_IRQHandler+0x2b4>)
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8002b50:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8002b54:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002b58:	6053      	str	r3, [r2, #4]

		/* Управление циклом опроса */
		if (currentMode >= CHANNELS) {
 8002b5a:	4b91      	ldr	r3, [pc, #580]	; (8002da0 <TIM4_IRQHandler+0x2b8>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d908      	bls.n	8002b74 <TIM4_IRQHandler+0x8c>
			currentMode = 0;
 8002b62:	4b8f      	ldr	r3, [pc, #572]	; (8002da0 <TIM4_IRQHandler+0x2b8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	801a      	strh	r2, [r3, #0]
			measCount++;  // Следующее измерение.
 8002b68:	4b8e      	ldr	r3, [pc, #568]	; (8002da4 <TIM4_IRQHandler+0x2bc>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <TIM4_IRQHandler+0x2bc>)
 8002b72:	801a      	strh	r2, [r3, #0]
		}
		//LED_PULSE
		if ((measCount == MEASSURE_COUNT) && (calibrateMode == 0)) {
 8002b74:	4b8b      	ldr	r3, [pc, #556]	; (8002da4 <TIM4_IRQHandler+0x2bc>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	2b64      	cmp	r3, #100	; 0x64
 8002b7a:	f040 82e0 	bne.w	800313e <TIM4_IRQHandler+0x656>
 8002b7e:	4b8a      	ldr	r3, [pc, #552]	; (8002da8 <TIM4_IRQHandler+0x2c0>)
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 82db 	bne.w	800313e <TIM4_IRQHandler+0x656>
			//LED_PULSE
			//HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
			#ifdef SYSTICK_DISABLE
			SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8002b88:	4b7e      	ldr	r3, [pc, #504]	; (8002d84 <TIM4_IRQHandler+0x29c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a7d      	ldr	r2, [pc, #500]	; (8002d84 <TIM4_IRQHandler+0x29c>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6013      	str	r3, [r2, #0]
			#endif
			HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 8002b94:	4885      	ldr	r0, [pc, #532]	; (8002dac <TIM4_IRQHandler+0x2c4>)
 8002b96:	f002 f87f 	bl	8004c98 <HAL_TIM_Base_Stop_IT>
			Vmax = 0;
 8002b9a:	4985      	ldr	r1, [pc, #532]	; (8002db0 <TIM4_IRQHandler+0x2c8>)
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	e9c1 2300 	strd	r2, r3, [r1]
			Xmax = 0;
 8002ba8:	4982      	ldr	r1, [pc, #520]	; (8002db4 <TIM4_IRQHandler+0x2cc>)
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9c1 2300 	strd	r2, r3, [r1]
			Ymax = 0;
 8002bb6:	4980      	ldr	r1, [pc, #512]	; (8002db8 <TIM4_IRQHandler+0x2d0>)
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum1 = 0;
 8002bc4:	497d      	ldr	r1, [pc, #500]	; (8002dbc <TIM4_IRQHandler+0x2d4>)
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum1 = 0;
 8002bd2:	497b      	ldr	r1, [pc, #492]	; (8002dc0 <TIM4_IRQHandler+0x2d8>)
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9c1 2300 	strd	r2, r3, [r1]
			/* Фильтр для всех значений */
			X1m[0] = 0; X1m[1] = 0; X1m[2] = 0; countX1 = 0;
			Y1m[0] = 0; Y1m[1] = 0; Y1m[2] = 0; countY1 = 0;
			#else
			/* Фильтр только для максимальной скорости */
			Vm[0] = 0; Vm[1] = 0; Vm[2] = 0; countV = 0;
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	e9c7 2300 	strd	r2, r3, [r7]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			#endif
			//LED_PULSE
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 8002c0a:	2314      	movs	r3, #20
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0e:	e186      	b.n	8002f1e <TIM4_IRQHandler+0x436>
				#ifdef MEDIAN_FILTER_ENABLE
				X1m[countX1] = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
				if (++countX1 >= 3) countX1 = 0;
				XX1 = (X1m[0] < X1m[1]) ? ((X1m[1] < X1m[2]) ? X1m[1] : ((X1m[2] < X1m[0]) ? X1m[0] : X1m[2])) : ((X1m[0] < X1m[2]) ? X1m[0] : ((X1m[2] < X1m[1]) ? X1m[1] : X1m[2]));
				#else
				XX1 = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
 8002c10:	4a6c      	ldr	r2, [pc, #432]	; (8002dc4 <TIM4_IRQHandler+0x2dc>)
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002c18:	4a6b      	ldr	r2, [pc, #428]	; (8002dc8 <TIM4_IRQHandler+0x2e0>)
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	4a6a      	ldr	r2, [pc, #424]	; (8002dcc <TIM4_IRQHandler+0x2e4>)
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f83c 	bl	8000ca4 <__aeabi_fmul>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7fd ff2d 	bl	8000a90 <__aeabi_fsub>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fbf5 	bl	8000428 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	e9c7 2308 	strd	r2, r3, [r7, #32]
				#endif
				Xsum1 = Xsum1 + XX1;
 8002c46:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <TIM4_IRQHandler+0x2d4>)
 8002c48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c50:	f7fd fa8c 	bl	800016c <__adddf3>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4958      	ldr	r1, [pc, #352]	; (8002dbc <TIM4_IRQHandler+0x2d4>)
 8002c5a:	e9c1 2300 	strd	r2, r3, [r1]
				#ifdef MEDIAN_FILTER_ENABLE
				Y1m[countY1] = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
				if (++countY1 >= 3) countY1 = 0;
				YY1 = (Y1m[0] < Y1m[1]) ? ((Y1m[1] < Y1m[2]) ? Y1m[1] : ((Y1m[2] < Y1m[0]) ? Y1m[0] : Y1m[2])) : ((Y1m[0] < Y1m[2]) ? Y1m[0] : ((Y1m[2] < Y1m[1]) ? Y1m[1] : Y1m[2]));
				#else
				YY1 = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
 8002c5e:	4a5c      	ldr	r2, [pc, #368]	; (8002dd0 <TIM4_IRQHandler+0x2e8>)
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002c66:	4a5b      	ldr	r2, [pc, #364]	; (8002dd4 <TIM4_IRQHandler+0x2ec>)
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	4a5a      	ldr	r2, [pc, #360]	; (8002dd8 <TIM4_IRQHandler+0x2f0>)
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe f815 	bl	8000ca4 <__aeabi_fmul>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f7fd ff06 	bl	8000a90 <__aeabi_fsub>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fbce 	bl	8000428 <__aeabi_f2d>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	e9c7 2306 	strd	r2, r3, [r7, #24]
				#endif
				Ysum1 = Ysum1 + YY1;
 8002c94:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <TIM4_IRQHandler+0x2d8>)
 8002c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c9e:	f7fd fa65 	bl	800016c <__adddf3>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4946      	ldr	r1, [pc, #280]	; (8002dc0 <TIM4_IRQHandler+0x2d8>)
 8002ca8:	e9c1 2300 	strd	r2, r3, [r1]

				X = XX1;
 8002cac:	494b      	ldr	r1, [pc, #300]	; (8002ddc <TIM4_IRQHandler+0x2f4>)
 8002cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cb2:	e9c1 2300 	strd	r2, r3, [r1]
				Y = YY1;
 8002cb6:	494a      	ldr	r1, [pc, #296]	; (8002de0 <TIM4_IRQHandler+0x2f8>)
 8002cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cbc:	e9c1 2300 	strd	r2, r3, [r1]
				V = sqrt(pow(X, 2) + pow(Y, 2));
 8002cc0:	4b46      	ldr	r3, [pc, #280]	; (8002ddc <TIM4_IRQHandler+0x2f4>)
 8002cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cce:	f006 fd83 	bl	80097d8 <pow>
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	460d      	mov	r5, r1
 8002cd6:	4b42      	ldr	r3, [pc, #264]	; (8002de0 <TIM4_IRQHandler+0x2f8>)
 8002cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ce4:	f006 fd78 	bl	80097d8 <pow>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4620      	mov	r0, r4
 8002cee:	4629      	mov	r1, r5
 8002cf0:	f7fd fa3c 	bl	800016c <__adddf3>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f006 fe18 	bl	8009930 <sqrt>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4937      	ldr	r1, [pc, #220]	; (8002de4 <TIM4_IRQHandler+0x2fc>)
 8002d06:	e9c1 2300 	strd	r2, r3, [r1]

				/* Медианный фильтр для максимальных значений */
				#ifndef MEDIAN_FILTER_ENABLE
				Vm[countV] = V;
 8002d0a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002d0e:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <TIM4_IRQHandler+0x2fc>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	00c9      	lsls	r1, r1, #3
 8002d16:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002d1a:	4401      	add	r1, r0
 8002d1c:	3930      	subs	r1, #48	; 0x30
 8002d1e:	e9c1 2300 	strd	r2, r3, [r1]
				if (++countV >= 3) countV = 0;
 8002d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d26:	3301      	adds	r3, #1
 8002d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d902      	bls.n	8002d3a <TIM4_IRQHandler+0x252>
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				V = (Vm[0] < Vm[1]) ? ((Vm[1] < Vm[2]) ? Vm[1] : ((Vm[2] < Vm[0]) ? Vm[0] : Vm[2])) : ((Vm[0] < Vm[2]) ? Vm[0] : ((Vm[2] < Vm[1]) ? Vm[1] : Vm[2]));
 8002d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d42:	f7fd fe3b 	bl	80009bc <__aeabi_dcmplt>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d04d      	beq.n	8002de8 <TIM4_IRQHandler+0x300>
 8002d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d54:	f7fd fe32 	bl	80009bc <__aeabi_dcmplt>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <TIM4_IRQHandler+0x27c>
 8002d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d62:	e05b      	b.n	8002e1c <TIM4_IRQHandler+0x334>
 8002d64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d6c:	f7fd fe26 	bl	80009bc <__aeabi_dcmplt>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <TIM4_IRQHandler+0x294>
 8002d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d7a:	e04f      	b.n	8002e1c <TIM4_IRQHandler+0x334>
 8002d7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d80:	e04c      	b.n	8002e1c <TIM4_IRQHandler+0x334>
 8002d82:	bf00      	nop
 8002d84:	e000e010 	.word	0xe000e010
 8002d88:	20000380 	.word	0x20000380
 8002d8c:	20000390 	.word	0x20000390
 8002d90:	20000cd0 	.word	0x20000cd0
 8002d94:	40010c00 	.word	0x40010c00
 8002d98:	20000d18 	.word	0x20000d18
 8002d9c:	40010800 	.word	0x40010800
 8002da0:	200006d8 	.word	0x200006d8
 8002da4:	20000318 	.word	0x20000318
 8002da8:	20000880 	.word	0x20000880
 8002dac:	20000b90 	.word	0x20000b90
 8002db0:	20000310 	.word	0x20000310
 8002db4:	20000328 	.word	0x20000328
 8002db8:	200006e0 	.word	0x200006e0
 8002dbc:	20000330 	.word	0x20000330
 8002dc0:	20000350 	.word	0x20000350
 8002dc4:	20000548 	.word	0x20000548
 8002dc8:	200006ec 	.word	0x200006ec
 8002dcc:	200002e8 	.word	0x200002e8
 8002dd0:	200003a4 	.word	0x200003a4
 8002dd4:	20000890 	.word	0x20000890
 8002dd8:	200002f8 	.word	0x200002f8
 8002ddc:	20000b30 	.word	0x20000b30
 8002de0:	20000340 	.word	0x20000340
 8002de4:	20000388 	.word	0x20000388
 8002de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002df0:	f7fd fde4 	bl	80009bc <__aeabi_dcmplt>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <TIM4_IRQHandler+0x318>
 8002dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dfe:	e00d      	b.n	8002e1c <TIM4_IRQHandler+0x334>
 8002e00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e08:	f7fd fdd8 	bl	80009bc <__aeabi_dcmplt>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <TIM4_IRQHandler+0x330>
 8002e12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e16:	e001      	b.n	8002e1c <TIM4_IRQHandler+0x334>
 8002e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e1c:	4994      	ldr	r1, [pc, #592]	; (8003070 <TIM4_IRQHandler+0x588>)
 8002e1e:	e9c1 2300 	strd	r2, r3, [r1]
				#endif

				if ( V > Vmax) {
 8002e22:	4b93      	ldr	r3, [pc, #588]	; (8003070 <TIM4_IRQHandler+0x588>)
 8002e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <TIM4_IRQHandler+0x58c>)
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f7fd fde3 	bl	80009f8 <__aeabi_dcmpgt>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <TIM4_IRQHandler+0x35c>
					Vmax = V;
 8002e38:	4b8d      	ldr	r3, [pc, #564]	; (8003070 <TIM4_IRQHandler+0x588>)
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	498d      	ldr	r1, [pc, #564]	; (8003074 <TIM4_IRQHandler+0x58c>)
 8002e40:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(X) > Xmax) {
 8002e44:	4b8c      	ldr	r3, [pc, #560]	; (8003078 <TIM4_IRQHandler+0x590>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7fd fdf3 	bl	8000a38 <__aeabi_d2iz>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bfb8      	it	lt
 8002e58:	425b      	neglt	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fad2 	bl	8000404 <__aeabi_i2d>
 8002e60:	4b86      	ldr	r3, [pc, #536]	; (800307c <TIM4_IRQHandler+0x594>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fdc7 	bl	80009f8 <__aeabi_dcmpgt>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <TIM4_IRQHandler+0x3ae>
					Xmax = abs(X);
 8002e70:	4b81      	ldr	r3, [pc, #516]	; (8003078 <TIM4_IRQHandler+0x590>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd fddd 	bl	8000a38 <__aeabi_d2iz>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bfb8      	it	lt
 8002e84:	425b      	neglt	r3, r3
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd fabc 	bl	8000404 <__aeabi_i2d>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	497a      	ldr	r1, [pc, #488]	; (800307c <TIM4_IRQHandler+0x594>)
 8002e92:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(Y) > Ymax) {
 8002e96:	4b7a      	ldr	r3, [pc, #488]	; (8003080 <TIM4_IRQHandler+0x598>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f7fd fdca 	bl	8000a38 <__aeabi_d2iz>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bfb8      	it	lt
 8002eaa:	425b      	neglt	r3, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd faa9 	bl	8000404 <__aeabi_i2d>
 8002eb2:	4b74      	ldr	r3, [pc, #464]	; (8003084 <TIM4_IRQHandler+0x59c>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f7fd fd9e 	bl	80009f8 <__aeabi_dcmpgt>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <TIM4_IRQHandler+0x400>
					Ymax = abs(Y);
 8002ec2:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <TIM4_IRQHandler+0x598>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7fd fdb4 	bl	8000a38 <__aeabi_d2iz>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bfb8      	it	lt
 8002ed6:	425b      	neglt	r3, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fa93 	bl	8000404 <__aeabi_i2d>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4968      	ldr	r1, [pc, #416]	; (8003084 <TIM4_IRQHandler+0x59c>)
 8002ee4:	e9c1 2300 	strd	r2, r3, [r1]
				}
				resul_arrayX1[ii] = 0;
 8002ee8:	4a67      	ldr	r2, [pc, #412]	; (8003088 <TIM4_IRQHandler+0x5a0>)
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayX2[ii] = 0;
 8002ef4:	4a65      	ldr	r2, [pc, #404]	; (800308c <TIM4_IRQHandler+0x5a4>)
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	f04f 0100 	mov.w	r1, #0
 8002efc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY1[ii] = 0;
 8002f00:	4a63      	ldr	r2, [pc, #396]	; (8003090 <TIM4_IRQHandler+0x5a8>)
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	f04f 0100 	mov.w	r1, #0
 8002f08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY2[ii] = 0;
 8002f0c:	4a61      	ldr	r2, [pc, #388]	; (8003094 <TIM4_IRQHandler+0x5ac>)
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2b63      	cmp	r3, #99	; 0x63
 8002f22:	f77f ae75 	ble.w	8002c10 <TIM4_IRQHandler+0x128>
			}
			Xsum = Xsum1;
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <TIM4_IRQHandler+0x5b0>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	495b      	ldr	r1, [pc, #364]	; (800309c <TIM4_IRQHandler+0x5b4>)
 8002f2e:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по X
 8002f32:	4b5a      	ldr	r3, [pc, #360]	; (800309c <TIM4_IRQHandler+0x5b4>)
 8002f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	4b58      	ldr	r3, [pc, #352]	; (80030a0 <TIM4_IRQHandler+0x5b8>)
 8002f3e:	f7fd fbf5 	bl	800072c <__aeabi_ddiv>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4955      	ldr	r1, [pc, #340]	; (800309c <TIM4_IRQHandler+0x5b4>)
 8002f48:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / SPEED_CALIBRATE;	// Скорость по X
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <TIM4_IRQHandler+0x5b4>)
 8002f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f52:	a345      	add	r3, pc, #276	; (adr r3, 8003068 <TIM4_IRQHandler+0x580>)
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f7fd fbe8 	bl	800072c <__aeabi_ddiv>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	494e      	ldr	r1, [pc, #312]	; (800309c <TIM4_IRQHandler+0x5b4>)
 8002f62:	e9c1 2300 	strd	r2, r3, [r1]

			Ysum = Ysum1;
 8002f66:	4b4f      	ldr	r3, [pc, #316]	; (80030a4 <TIM4_IRQHandler+0x5bc>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	494e      	ldr	r1, [pc, #312]	; (80030a8 <TIM4_IRQHandler+0x5c0>)
 8002f6e:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по Y
 8002f72:	4b4d      	ldr	r3, [pc, #308]	; (80030a8 <TIM4_IRQHandler+0x5c0>)
 8002f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <TIM4_IRQHandler+0x5b8>)
 8002f7e:	f7fd fbd5 	bl	800072c <__aeabi_ddiv>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4948      	ldr	r1, [pc, #288]	; (80030a8 <TIM4_IRQHandler+0x5c0>)
 8002f88:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / SPEED_CALIBRATE;	// Скорость по Y
 8002f8c:	4b46      	ldr	r3, [pc, #280]	; (80030a8 <TIM4_IRQHandler+0x5c0>)
 8002f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f92:	a335      	add	r3, pc, #212	; (adr r3, 8003068 <TIM4_IRQHandler+0x580>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd fbc8 	bl	800072c <__aeabi_ddiv>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4941      	ldr	r1, [pc, #260]	; (80030a8 <TIM4_IRQHandler+0x5c0>)
 8002fa2:	e9c1 2300 	strd	r2, r3, [r1]

			Vmaxfin = Vmax / SPEED_CALIBRATE;	// Максимальная скорость за время MEASSURE_COUNT
 8002fa6:	4b33      	ldr	r3, [pc, #204]	; (8003074 <TIM4_IRQHandler+0x58c>)
 8002fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fac:	a32e      	add	r3, pc, #184	; (adr r3, 8003068 <TIM4_IRQHandler+0x580>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd fbbb 	bl	800072c <__aeabi_ddiv>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	493c      	ldr	r1, [pc, #240]	; (80030ac <TIM4_IRQHandler+0x5c4>)
 8002fbc:	e9c1 2300 	strd	r2, r3, [r1]
			Xmaxfin = Xmax / SPEED_CALIBRATE;
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	; (800307c <TIM4_IRQHandler+0x594>)
 8002fc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fc6:	a328      	add	r3, pc, #160	; (adr r3, 8003068 <TIM4_IRQHandler+0x580>)
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f7fd fbae 	bl	800072c <__aeabi_ddiv>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4936      	ldr	r1, [pc, #216]	; (80030b0 <TIM4_IRQHandler+0x5c8>)
 8002fd6:	e9c1 2300 	strd	r2, r3, [r1]
			Ymaxfin = Ymax / SPEED_CALIBRATE;
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <TIM4_IRQHandler+0x59c>)
 8002fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fe0:	a321      	add	r3, pc, #132	; (adr r3, 8003068 <TIM4_IRQHandler+0x580>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd fba1 	bl	800072c <__aeabi_ddiv>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4931      	ldr	r1, [pc, #196]	; (80030b4 <TIM4_IRQHandler+0x5cc>)
 8002ff0:	e9c1 2300 	strd	r2, r3, [r1]
			V = sqrt(pow(Xsum, 2) + pow(Ysum, 2));  // Скалярное значение скорости
 8002ff4:	4b29      	ldr	r3, [pc, #164]	; (800309c <TIM4_IRQHandler+0x5b4>)
 8002ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003002:	f006 fbe9 	bl	80097d8 <pow>
 8003006:	4604      	mov	r4, r0
 8003008:	460d      	mov	r5, r1
 800300a:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <TIM4_IRQHandler+0x5c0>)
 800300c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003018:	f006 fbde 	bl	80097d8 <pow>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4620      	mov	r0, r4
 8003022:	4629      	mov	r1, r5
 8003024:	f7fd f8a2 	bl	800016c <__adddf3>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	f006 fc7e 	bl	8009930 <sqrt>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	490d      	ldr	r1, [pc, #52]	; (8003070 <TIM4_IRQHandler+0x588>)
 800303a:	e9c1 2300 	strd	r2, r3, [r1]
			if ( V == 0) {
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <TIM4_IRQHandler+0x588>)
 8003040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	f7fd fcac 	bl	80009a8 <__aeabi_dcmpeq>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d032      	beq.n	80030bc <TIM4_IRQHandler+0x5d4>
			  A = 0;
 8003056:	4918      	ldr	r1, [pc, #96]	; (80030b8 <TIM4_IRQHandler+0x5d0>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9c1 2300 	strd	r2, r3, [r1]
 8003064:	e064      	b.n	8003130 <TIM4_IRQHandler+0x648>
 8003066:	bf00      	nop
 8003068:	e0000000 	.word	0xe0000000
 800306c:	40451851 	.word	0x40451851
 8003070:	20000388 	.word	0x20000388
 8003074:	20000310 	.word	0x20000310
 8003078:	20000b30 	.word	0x20000b30
 800307c:	20000328 	.word	0x20000328
 8003080:	20000340 	.word	0x20000340
 8003084:	200006e0 	.word	0x200006e0
 8003088:	20000548 	.word	0x20000548
 800308c:	200006ec 	.word	0x200006ec
 8003090:	200003a4 	.word	0x200003a4
 8003094:	20000890 	.word	0x20000890
 8003098:	20000330 	.word	0x20000330
 800309c:	20000398 	.word	0x20000398
 80030a0:	40540000 	.word	0x40540000
 80030a4:	20000350 	.word	0x20000350
 80030a8:	200002f0 	.word	0x200002f0
 80030ac:	20000300 	.word	0x20000300
 80030b0:	20000888 	.word	0x20000888
 80030b4:	20000538 	.word	0x20000538
 80030b8:	20000320 	.word	0x20000320
			} else {
				A = acos( Ysum / V ) * 180 / 3.1415926; // Угол
 80030bc:	4b6e      	ldr	r3, [pc, #440]	; (8003278 <TIM4_IRQHandler+0x790>)
 80030be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c2:	4b6e      	ldr	r3, [pc, #440]	; (800327c <TIM4_IRQHandler+0x794>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f7fd fb30 	bl	800072c <__aeabi_ddiv>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	f006 fb52 	bl	800977c <acos>
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	4b68      	ldr	r3, [pc, #416]	; (8003280 <TIM4_IRQHandler+0x798>)
 80030de:	f7fd f9fb 	bl	80004d8 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	a361      	add	r3, pc, #388	; (adr r3, 8003270 <TIM4_IRQHandler+0x788>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f7fd fb1c 	bl	800072c <__aeabi_ddiv>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4962      	ldr	r1, [pc, #392]	; (8003284 <TIM4_IRQHandler+0x79c>)
 80030fa:	e9c1 2300 	strd	r2, r3, [r1]
				if (Xsum < 0) {
 80030fe:	4b62      	ldr	r3, [pc, #392]	; (8003288 <TIM4_IRQHandler+0x7a0>)
 8003100:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f7fd fc56 	bl	80009bc <__aeabi_dcmplt>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <TIM4_IRQHandler+0x648>
					A = 360 - A; // III, IV квадранты
 8003116:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <TIM4_IRQHandler+0x79c>)
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f04f 0000 	mov.w	r0, #0
 8003120:	495a      	ldr	r1, [pc, #360]	; (800328c <TIM4_IRQHandler+0x7a4>)
 8003122:	f7fd f821 	bl	8000168 <__aeabi_dsub>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4956      	ldr	r1, [pc, #344]	; (8003284 <TIM4_IRQHandler+0x79c>)
 800312c:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			measCount = 0;
 8003130:	4b57      	ldr	r3, [pc, #348]	; (8003290 <TIM4_IRQHandler+0x7a8>)
 8003132:	2200      	movs	r2, #0
 8003134:	801a      	strh	r2, [r3, #0]
			readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 8003136:	4b57      	ldr	r3, [pc, #348]	; (8003294 <TIM4_IRQHandler+0x7ac>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e090      	b.n	8003260 <TIM4_IRQHandler+0x778>
		} else {
			if ((calibrateMode > 0) && (measCount == 1)) {  // Режим калибровки/тестирования
 800313e:	4b56      	ldr	r3, [pc, #344]	; (8003298 <TIM4_IRQHandler+0x7b0>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d013      	beq.n	800316e <TIM4_IRQHandler+0x686>
 8003146:	4b52      	ldr	r3, [pc, #328]	; (8003290 <TIM4_IRQHandler+0x7a8>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d10f      	bne.n	800316e <TIM4_IRQHandler+0x686>
				HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 800314e:	4853      	ldr	r0, [pc, #332]	; (800329c <TIM4_IRQHandler+0x7b4>)
 8003150:	f001 fda2 	bl	8004c98 <HAL_TIM_Base_Stop_IT>
				measCount = 0;
 8003154:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <TIM4_IRQHandler+0x7a8>)
 8003156:	2200      	movs	r2, #0
 8003158:	801a      	strh	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
					SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <TIM4_IRQHandler+0x7b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a50      	ldr	r2, [pc, #320]	; (80032a0 <TIM4_IRQHandler+0x7b8>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6013      	str	r3, [r2, #0]
				#endif
				readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 8003166:	4b4b      	ldr	r3, [pc, #300]	; (8003294 <TIM4_IRQHandler+0x7ac>)
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e078      	b.n	8003260 <TIM4_IRQHandler+0x778>
			} else {
				switch (currentMode++) {
 800316e:	4b4d      	ldr	r3, [pc, #308]	; (80032a4 <TIM4_IRQHandler+0x7bc>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	b291      	uxth	r1, r2
 8003176:	4a4b      	ldr	r2, [pc, #300]	; (80032a4 <TIM4_IRQHandler+0x7bc>)
 8003178:	8011      	strh	r1, [r2, #0]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d868      	bhi.n	8003250 <TIM4_IRQHandler+0x768>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <TIM4_IRQHandler+0x69c>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	08003195 	.word	0x08003195
 8003188:	080031cf 	.word	0x080031cf
 800318c:	080031fd 	.word	0x080031fd
 8003190:	08003223 	.word	0x08003223
					case 0: { 					// Z1 (transmit) > Z3 (receive) Y1
						LED_PULSE
 8003194:	2201      	movs	r2, #1
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	4843      	ldr	r0, [pc, #268]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 800319a:	f000 fe8d 	bl	8003eb8 <HAL_GPIO_WritePin>
 800319e:	2200      	movs	r2, #0
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	4841      	ldr	r0, [pc, #260]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 80031a4:	f000 fe88 	bl	8003eb8 <HAL_GPIO_WritePin>
						setZ3receive 			// Turn on multiplexer for input Z2 channel.
 80031a8:	4b40      	ldr	r3, [pc, #256]	; (80032ac <TIM4_IRQHandler+0x7c4>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a3f      	ldr	r2, [pc, #252]	; (80032ac <TIM4_IRQHandler+0x7c4>)
 80031ae:	f023 0308 	bic.w	r3, r3, #8
 80031b2:	60d3      	str	r3, [r2, #12]
 80031b4:	4b3c      	ldr	r3, [pc, #240]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031bc:	4a3a      	ldr	r2, [pc, #232]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 80031be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031c2:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1); // Генерация для пьезокристалла в 1 канале
 80031c4:	2100      	movs	r1, #0
 80031c6:	483a      	ldr	r0, [pc, #232]	; (80032b0 <TIM4_IRQHandler+0x7c8>)
 80031c8:	f001 fdec 	bl	8004da4 <HAL_TIM_OC_Start>
						break;
 80031cc:	e040      	b.n	8003250 <TIM4_IRQHandler+0x768>
					}
					case 1: { 					// Z3 (transmit) > Z1 (receive) Y2
						//LED_PULSE
						TIM3->ARR = C_24; 		// Коррекция для таймера запуска измерения Z24, Z42
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <TIM4_IRQHandler+0x7cc>)
 80031d0:	881a      	ldrh	r2, [r3, #0]
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <TIM4_IRQHandler+0x7d0>)
 80031d4:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ1receive 			// Turn on multiplexer for input Z1 channel.
 80031d6:	4b35      	ldr	r3, [pc, #212]	; (80032ac <TIM4_IRQHandler+0x7c4>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4a34      	ldr	r2, [pc, #208]	; (80032ac <TIM4_IRQHandler+0x7c4>)
 80031dc:	f023 0302 	bic.w	r3, r3, #2
 80031e0:	60d3      	str	r3, [r2, #12]
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f023 030f 	bic.w	r3, r3, #15
 80031ea:	4a2f      	ldr	r2, [pc, #188]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // Генерация для пьезокристалла в 3 канале
 80031f2:	2108      	movs	r1, #8
 80031f4:	482e      	ldr	r0, [pc, #184]	; (80032b0 <TIM4_IRQHandler+0x7c8>)
 80031f6:	f001 fdd5 	bl	8004da4 <HAL_TIM_OC_Start>
						break;
 80031fa:	e029      	b.n	8003250 <TIM4_IRQHandler+0x768>
					}
					case 2: { 					// Z2 (transmit) > Z4 (receive) X1
						//LED_PULSE
						setZ4receive 			// Turn on multiplexer for input Z4 channel.
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <TIM4_IRQHandler+0x7c4>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <TIM4_IRQHandler+0x7c4>)
 8003202:	f023 0310 	bic.w	r3, r3, #16
 8003206:	60d3      	str	r3, [r2, #12]
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003210:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 8003212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003216:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);	// Генерация для пьезокристалла в 2 канале
 8003218:	2104      	movs	r1, #4
 800321a:	4825      	ldr	r0, [pc, #148]	; (80032b0 <TIM4_IRQHandler+0x7c8>)
 800321c:	f001 fdc2 	bl	8004da4 <HAL_TIM_OC_Start>
						break;
 8003220:	e016      	b.n	8003250 <TIM4_IRQHandler+0x768>
					}
					case 3: { 					// Z4 (transmit) > Z3 (receive) X2
						//LED_PULSE
						TIM3->ARR = C_13; 		// Коррекция для таймера запуска измерения Z13, Z31
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <TIM4_IRQHandler+0x7d4>)
 8003224:	881a      	ldrh	r2, [r3, #0]
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <TIM4_IRQHandler+0x7d0>)
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ2receive 			// Turn on multiplexer for input Z3 channel.
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <TIM4_IRQHandler+0x7c4>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <TIM4_IRQHandler+0x7c4>)
 8003230:	f023 0304 	bic.w	r3, r3, #4
 8003234:	60d3      	str	r3, [r2, #12]
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800323e:	4a1a      	ldr	r2, [pc, #104]	; (80032a8 <TIM4_IRQHandler+0x7c0>)
 8003240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003244:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);	// Генерация для пьезокристалла в 4 канале
 8003246:	210c      	movs	r1, #12
 8003248:	4819      	ldr	r0, [pc, #100]	; (80032b0 <TIM4_IRQHandler+0x7c8>)
 800324a:	f001 fdab 	bl	8004da4 <HAL_TIM_OC_Start>
						break;
 800324e:	bf00      	nop
					}
				}
				/* Запускаем таймер захвата */
				START_CAPTURE
 8003250:	2100      	movs	r1, #0
 8003252:	481b      	ldr	r0, [pc, #108]	; (80032c0 <TIM4_IRQHandler+0x7d8>)
 8003254:	f001 ff04 	bl	8005060 <HAL_TIM_IC_Start_IT>
 8003258:	2104      	movs	r1, #4
 800325a:	4819      	ldr	r0, [pc, #100]	; (80032c0 <TIM4_IRQHandler+0x7d8>)
 800325c:	f001 ff00 	bl	8005060 <HAL_TIM_IC_Start_IT>
			}
		}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003260:	480e      	ldr	r0, [pc, #56]	; (800329c <TIM4_IRQHandler+0x7b4>)
 8003262:	f002 f904 	bl	800546e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bdb0      	pop	{r4, r5, r7, pc}
 800326e:	bf00      	nop
 8003270:	4d12d84a 	.word	0x4d12d84a
 8003274:	400921fb 	.word	0x400921fb
 8003278:	200002f0 	.word	0x200002f0
 800327c:	20000388 	.word	0x20000388
 8003280:	40668000 	.word	0x40668000
 8003284:	20000320 	.word	0x20000320
 8003288:	20000398 	.word	0x20000398
 800328c:	40768000 	.word	0x40768000
 8003290:	20000318 	.word	0x20000318
 8003294:	200002ec 	.word	0x200002ec
 8003298:	20000880 	.word	0x20000880
 800329c:	20000b90 	.word	0x20000b90
 80032a0:	e000e010 	.word	0xe000e010
 80032a4:	200006d8 	.word	0x200006d8
 80032a8:	40010800 	.word	0x40010800
 80032ac:	40010c00 	.word	0x40010c00
 80032b0:	20000cd0 	.word	0x20000cd0
 80032b4:	2000033c 	.word	0x2000033c
 80032b8:	40000400 	.word	0x40000400
 80032bc:	200006e8 	.word	0x200006e8
 80032c0:	20000d18 	.word	0x20000d18

080032c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
	return 1;
 80032c8:	2301      	movs	r3, #1
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <_kill>:

int _kill(int pid, int sig)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80032dc:	f003 fb84 	bl	80069e8 <__errno>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2216      	movs	r2, #22
 80032e4:	601a      	str	r2, [r3, #0]
	return -1;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_exit>:

void _exit (int status)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80032fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffe7 	bl	80032d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003304:	e7fe      	b.n	8003304 <_exit+0x12>

08003306 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e00a      	b.n	800332e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003318:	f3af 8000 	nop.w
 800331c:	4601      	mov	r1, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	60ba      	str	r2, [r7, #8]
 8003324:	b2ca      	uxtb	r2, r1
 8003326:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3301      	adds	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	dbf0      	blt.n	8003318 <_read+0x12>
	}

return len;
 8003336:	687b      	ldr	r3, [r7, #4]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	e009      	b.n	8003366 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	60ba      	str	r2, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3301      	adds	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	dbf1      	blt.n	8003352 <_write+0x12>
	}
	return len;
 800336e:	687b      	ldr	r3, [r7, #4]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_close>:

int _close(int file)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	return -1;
 8003380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800339e:	605a      	str	r2, [r3, #4]
	return 0;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <_isatty>:

int _isatty(int file)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	return 1;
 80033b4:	2301      	movs	r3, #1
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
	return 0;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <_sbrk+0x5c>)
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <_sbrk+0x60>)
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <_sbrk+0x64>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <_sbrk+0x64>)
 80033f6:	4a12      	ldr	r2, [pc, #72]	; (8003440 <_sbrk+0x68>)
 80033f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <_sbrk+0x64>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	429a      	cmp	r2, r3
 8003406:	d207      	bcs.n	8003418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003408:	f003 faee 	bl	80069e8 <__errno>
 800340c:	4603      	mov	r3, r0
 800340e:	220c      	movs	r2, #12
 8003410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003416:	e009      	b.n	800342c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <_sbrk+0x64>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800341e:	4b07      	ldr	r3, [pc, #28]	; (800343c <_sbrk+0x64>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	4a05      	ldr	r2, [pc, #20]	; (800343c <_sbrk+0x64>)
 8003428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20005000 	.word	0x20005000
 8003438:	00000400 	.word	0x00000400
 800343c:	200002d8 	.word	0x200002d8
 8003440:	20000da0 	.word	0x20000da0

08003444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003450:	480c      	ldr	r0, [pc, #48]	; (8003484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003452:	490d      	ldr	r1, [pc, #52]	; (8003488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003454:	4a0d      	ldr	r2, [pc, #52]	; (800348c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003458:	e002      	b.n	8003460 <LoopCopyDataInit>

0800345a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800345a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800345c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800345e:	3304      	adds	r3, #4

08003460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003464:	d3f9      	bcc.n	800345a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003468:	4c0a      	ldr	r4, [pc, #40]	; (8003494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800346a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800346c:	e001      	b.n	8003472 <LoopFillZerobss>

0800346e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800346e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003470:	3204      	adds	r2, #4

08003472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003474:	d3fb      	bcc.n	800346e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003476:	f7ff ffe5 	bl	8003444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800347a:	f003 fabb 	bl	80069f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800347e:	f7fd ff39 	bl	80012f4 <main>
  bx lr
 8003482:	4770      	bx	lr
  ldr r0, =_sdata
 8003484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003488:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800348c:	0800b2b8 	.word	0x0800b2b8
  ldr r2, =_sbss
 8003490:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003494:	20000da0 	.word	0x20000da0

08003498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003498:	e7fe      	b.n	8003498 <ADC1_2_IRQHandler>
	...

0800349c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034a0:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <HAL_Init+0x28>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <HAL_Init+0x28>)
 80034a6:	f043 0310 	orr.w	r3, r3, #16
 80034aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ac:	2003      	movs	r0, #3
 80034ae:	f000 f939 	bl	8003724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f000 f808 	bl	80034c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b8:	f7ff f8d6 	bl	8002668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40022000 	.word	0x40022000

080034c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_InitTick+0x54>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_InitTick+0x58>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4619      	mov	r1, r3
 80034da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034de:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f955 	bl	8003796 <HAL_SYSTICK_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00e      	b.n	8003514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b0f      	cmp	r3, #15
 80034fa:	d80a      	bhi.n	8003512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034fc:	2200      	movs	r2, #0
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003504:	f000 f919 	bl	800373a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003508:	4a06      	ldr	r2, [pc, #24]	; (8003524 <HAL_InitTick+0x5c>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000000 	.word	0x20000000
 8003520:	20000008 	.word	0x20000008
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_IncTick+0x1c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_IncTick+0x20>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4413      	add	r3, r2
 8003538:	4a03      	ldr	r2, [pc, #12]	; (8003548 <HAL_IncTick+0x20>)
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	20000008 	.word	0x20000008
 8003548:	20000d68 	.word	0x20000d68

0800354c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;
 8003550:	4b02      	ldr	r3, [pc, #8]	; (800355c <HAL_GetTick+0x10>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	20000d68 	.word	0x20000d68

08003560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800357c:	4013      	ands	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800358c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	60d3      	str	r3, [r2, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 0307 	and.w	r3, r3, #7
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db0b      	blt.n	80035ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	f003 021f 	and.w	r2, r3, #31
 80035dc:	4906      	ldr	r1, [pc, #24]	; (80035f8 <__NVIC_EnableIRQ+0x34>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	2001      	movs	r0, #1
 80035e6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100

080035fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	6039      	str	r1, [r7, #0]
 8003606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	db0a      	blt.n	8003626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	490c      	ldr	r1, [pc, #48]	; (8003648 <__NVIC_SetPriority+0x4c>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	440b      	add	r3, r1
 8003620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003624:	e00a      	b.n	800363c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4908      	ldr	r1, [pc, #32]	; (800364c <__NVIC_SetPriority+0x50>)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	3b04      	subs	r3, #4
 8003634:	0112      	lsls	r2, r2, #4
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	440b      	add	r3, r1
 800363a:	761a      	strb	r2, [r3, #24]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003650:	b480      	push	{r7}
 8003652:	b089      	sub	sp, #36	; 0x24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f1c3 0307 	rsb	r3, r3, #7
 800366a:	2b04      	cmp	r3, #4
 800366c:	bf28      	it	cs
 800366e:	2304      	movcs	r3, #4
 8003670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3304      	adds	r3, #4
 8003676:	2b06      	cmp	r3, #6
 8003678:	d902      	bls.n	8003680 <NVIC_EncodePriority+0x30>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3b03      	subs	r3, #3
 800367e:	e000      	b.n	8003682 <NVIC_EncodePriority+0x32>
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	401a      	ands	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43d9      	mvns	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	4313      	orrs	r3, r2
         );
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036b8:	f3bf 8f4f 	dsb	sy
}
 80036bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <__NVIC_SystemReset+0x24>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <__NVIC_SystemReset+0x24>)
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <__NVIC_SystemReset+0x28>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80036ce:	f3bf 8f4f 	dsb	sy
}
 80036d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80036d4:	bf00      	nop
 80036d6:	e7fd      	b.n	80036d4 <__NVIC_SystemReset+0x20>
 80036d8:	e000ed00 	.word	0xe000ed00
 80036dc:	05fa0004 	.word	0x05fa0004

080036e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f0:	d301      	bcc.n	80036f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00f      	b.n	8003716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <SysTick_Config+0x40>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fe:	210f      	movs	r1, #15
 8003700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003704:	f7ff ff7a 	bl	80035fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <SysTick_Config+0x40>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <SysTick_Config+0x40>)
 8003710:	2207      	movs	r2, #7
 8003712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	e000e010 	.word	0xe000e010

08003724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff17 	bl	8003560 <__NVIC_SetPriorityGrouping>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800374c:	f7ff ff2c 	bl	80035a8 <__NVIC_GetPriorityGrouping>
 8003750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	6978      	ldr	r0, [r7, #20]
 8003758:	f7ff ff7a 	bl	8003650 <NVIC_EncodePriority>
 800375c:	4602      	mov	r2, r0
 800375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff49 	bl	80035fc <__NVIC_SetPriority>
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	4603      	mov	r3, r0
 800377a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff1f 	bl	80035c4 <__NVIC_EnableIRQ>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003792:	f7ff ff8f 	bl	80036b4 <__NVIC_SystemReset>

08003796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ff9e 	bl	80036e0 <SysTick_Config>
 80037a4:	4603      	mov	r3, r0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80037b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_FLASH_Program+0xd8>)
 80037cc:	7e1b      	ldrb	r3, [r3, #24]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_FLASH_Program+0x26>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e054      	b.n	8003880 <HAL_FLASH_Program+0xd0>
 80037d6:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <HAL_FLASH_Program+0xd8>)
 80037d8:	2201      	movs	r2, #1
 80037da:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037e0:	f000 f8a8 	bl	8003934 <FLASH_WaitForLastOperation>
 80037e4:	4603      	mov	r3, r0
 80037e6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d144      	bne.n	8003878 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d102      	bne.n	80037fa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80037f4:	2301      	movs	r3, #1
 80037f6:	757b      	strb	r3, [r7, #21]
 80037f8:	e007      	b.n	800380a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d102      	bne.n	8003806 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003800:	2302      	movs	r3, #2
 8003802:	757b      	strb	r3, [r7, #21]
 8003804:	e001      	b.n	800380a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003806:	2304      	movs	r3, #4
 8003808:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800380a:	2300      	movs	r3, #0
 800380c:	75bb      	strb	r3, [r7, #22]
 800380e:	e02d      	b.n	800386c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003810:	7dbb      	ldrb	r3, [r7, #22]
 8003812:	005a      	lsls	r2, r3, #1
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	eb02 0c03 	add.w	ip, r2, r3
 800381a:	7dbb      	ldrb	r3, [r7, #22]
 800381c:	0119      	lsls	r1, r3, #4
 800381e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003822:	f1c1 0620 	rsb	r6, r1, #32
 8003826:	f1a1 0020 	sub.w	r0, r1, #32
 800382a:	fa22 f401 	lsr.w	r4, r2, r1
 800382e:	fa03 f606 	lsl.w	r6, r3, r6
 8003832:	4334      	orrs	r4, r6
 8003834:	fa23 f000 	lsr.w	r0, r3, r0
 8003838:	4304      	orrs	r4, r0
 800383a:	fa23 f501 	lsr.w	r5, r3, r1
 800383e:	b2a3      	uxth	r3, r4
 8003840:	4619      	mov	r1, r3
 8003842:	4660      	mov	r0, ip
 8003844:	f000 f85a 	bl	80038fc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003848:	f24c 3050 	movw	r0, #50000	; 0xc350
 800384c:	f000 f872 	bl	8003934 <FLASH_WaitForLastOperation>
 8003850:	4603      	mov	r3, r0
 8003852:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_FLASH_Program+0xdc>)
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	4a0c      	ldr	r2, [pc, #48]	; (800388c <HAL_FLASH_Program+0xdc>)
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d107      	bne.n	8003876 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003866:	7dbb      	ldrb	r3, [r7, #22]
 8003868:	3301      	adds	r3, #1
 800386a:	75bb      	strb	r3, [r7, #22]
 800386c:	7dba      	ldrb	r2, [r7, #22]
 800386e:	7d7b      	ldrb	r3, [r7, #21]
 8003870:	429a      	cmp	r2, r3
 8003872:	d3cd      	bcc.n	8003810 <HAL_FLASH_Program+0x60>
 8003874:	e000      	b.n	8003878 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003876:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_FLASH_Program+0xd8>)
 800387a:	2200      	movs	r2, #0
 800387c:	761a      	strb	r2, [r3, #24]

  return status;
 800387e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003880:	4618      	mov	r0, r3
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003888:	20000d70 	.word	0x20000d70
 800388c:	40022000 	.word	0x40022000

08003890 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <HAL_FLASH_Unlock+0x40>)
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00d      	beq.n	80038c2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_FLASH_Unlock+0x40>)
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_FLASH_Unlock+0x44>)
 80038aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <HAL_FLASH_Unlock+0x40>)
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <HAL_FLASH_Unlock+0x48>)
 80038b0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <HAL_FLASH_Unlock+0x40>)
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80038c2:	79fb      	ldrb	r3, [r7, #7]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40022000 	.word	0x40022000
 80038d4:	45670123 	.word	0x45670123
 80038d8:	cdef89ab 	.word	0xcdef89ab

080038dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_FLASH_Lock+0x1c>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <HAL_FLASH_Lock+0x1c>)
 80038e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40022000 	.word	0x40022000

080038fc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <FLASH_Program_HalfWord+0x30>)
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <FLASH_Program_HalfWord+0x34>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	4a07      	ldr	r2, [pc, #28]	; (8003930 <FLASH_Program_HalfWord+0x34>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	887a      	ldrh	r2, [r7, #2]
 800391e:	801a      	strh	r2, [r3, #0]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000d70 	.word	0x20000d70
 8003930:	40022000 	.word	0x40022000

08003934 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff fe06 	bl	800354c <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003942:	e010      	b.n	8003966 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394a:	d00c      	beq.n	8003966 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <FLASH_WaitForLastOperation+0x2e>
 8003952:	f7ff fdfb 	bl	800354c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	429a      	cmp	r2, r3
 8003960:	d201      	bcs.n	8003966 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e025      	b.n	80039b2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <FLASH_WaitForLastOperation+0x88>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e8      	bne.n	8003944 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <FLASH_WaitForLastOperation+0x88>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <FLASH_WaitForLastOperation+0x88>)
 8003980:	2220      	movs	r2, #32
 8003982:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <FLASH_WaitForLastOperation+0x88>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <FLASH_WaitForLastOperation+0x88>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003998:	2b00      	cmp	r3, #0
 800399a:	d105      	bne.n	80039a8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <FLASH_WaitForLastOperation+0x88>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80039a8:	f000 f80a 	bl	80039c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40022000 	.word	0x40022000

080039c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <FLASH_SetErrorCode+0x98>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80039d6:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <FLASH_SetErrorCode+0x9c>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <FLASH_SetErrorCode+0x9c>)
 80039e0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f043 0310 	orr.w	r3, r3, #16
 80039e8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80039ea:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <FLASH_SetErrorCode+0x98>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80039f6:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <FLASH_SetErrorCode+0x9c>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <FLASH_SetErrorCode+0x9c>)
 8003a00:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <FLASH_SetErrorCode+0x98>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <FLASH_SetErrorCode+0x9c>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <FLASH_SetErrorCode+0x9c>)
 8003a20:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <FLASH_SetErrorCode+0x98>)
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <FLASH_SetErrorCode+0x98>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f240 1201 	movw	r2, #257	; 0x101
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d106      	bne.n	8003a46 <FLASH_SetErrorCode+0x86>
 8003a38:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <FLASH_SetErrorCode+0x98>)
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <FLASH_SetErrorCode+0x98>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	61d3      	str	r3, [r2, #28]
}  
 8003a44:	e002      	b.n	8003a4c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <FLASH_SetErrorCode+0x98>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60d3      	str	r3, [r2, #12]
}  
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40022000 	.word	0x40022000
 8003a5c:	20000d70 	.word	0x20000d70

08003a60 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a72:	4b2f      	ldr	r3, [pc, #188]	; (8003b30 <HAL_FLASHEx_Erase+0xd0>)
 8003a74:	7e1b      	ldrb	r3, [r3, #24]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_FLASHEx_Erase+0x1e>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e053      	b.n	8003b26 <HAL_FLASHEx_Erase+0xc6>
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <HAL_FLASHEx_Erase+0xd0>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d116      	bne.n	8003aba <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003a8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a90:	f7ff ff50 	bl	8003934 <FLASH_WaitForLastOperation>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d141      	bne.n	8003b1e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f000 f84c 	bl	8003b38 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003aa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003aa4:	f7ff ff46 	bl	8003934 <FLASH_WaitForLastOperation>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <HAL_FLASHEx_Erase+0xd4>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <HAL_FLASHEx_Erase+0xd4>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6113      	str	r3, [r2, #16]
 8003ab8:	e031      	b.n	8003b1e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003aba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003abe:	f7ff ff39 	bl	8003934 <FLASH_WaitForLastOperation>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d12a      	bne.n	8003b1e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ace:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	e019      	b.n	8003b0c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003ad8:	68b8      	ldr	r0, [r7, #8]
 8003ada:	f000 f849 	bl	8003b70 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ade:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ae2:	f7ff ff27 	bl	8003934 <FLASH_WaitForLastOperation>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_FLASHEx_Erase+0xd4>)
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	4a11      	ldr	r2, [pc, #68]	; (8003b34 <HAL_FLASHEx_Erase+0xd4>)
 8003af0:	f023 0302 	bic.w	r3, r3, #2
 8003af4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	601a      	str	r2, [r3, #0]
            break;
 8003b02:	e00c      	b.n	8003b1e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b0a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	029a      	lsls	r2, r3, #10
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d3dc      	bcc.n	8003ad8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <HAL_FLASHEx_Erase+0xd0>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	761a      	strb	r2, [r3, #24]

  return status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000d70 	.word	0x20000d70
 8003b34:	40022000 	.word	0x40022000

08003b38 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <FLASH_MassErase+0x30>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <FLASH_MassErase+0x34>)
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <FLASH_MassErase+0x34>)
 8003b4c:	f043 0304 	orr.w	r3, r3, #4
 8003b50:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <FLASH_MassErase+0x34>)
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <FLASH_MassErase+0x34>)
 8003b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	20000d70 	.word	0x20000d70
 8003b6c:	40022000 	.word	0x40022000

08003b70 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <FLASH_PageErase+0x38>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <FLASH_PageErase+0x3c>)
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <FLASH_PageErase+0x3c>)
 8003b84:	f043 0302 	orr.w	r3, r3, #2
 8003b88:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003b8a:	4a08      	ldr	r2, [pc, #32]	; (8003bac <FLASH_PageErase+0x3c>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <FLASH_PageErase+0x3c>)
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	4a05      	ldr	r2, [pc, #20]	; (8003bac <FLASH_PageErase+0x3c>)
 8003b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000d70 	.word	0x20000d70
 8003bac:	40022000 	.word	0x40022000

08003bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b08b      	sub	sp, #44	; 0x2c
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc2:	e169      	b.n	8003e98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f040 8158 	bne.w	8003e92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4a9a      	ldr	r2, [pc, #616]	; (8003e50 <HAL_GPIO_Init+0x2a0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d05e      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003bec:	4a98      	ldr	r2, [pc, #608]	; (8003e50 <HAL_GPIO_Init+0x2a0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d875      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003bf2:	4a98      	ldr	r2, [pc, #608]	; (8003e54 <HAL_GPIO_Init+0x2a4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d058      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003bf8:	4a96      	ldr	r2, [pc, #600]	; (8003e54 <HAL_GPIO_Init+0x2a4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d86f      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003bfe:	4a96      	ldr	r2, [pc, #600]	; (8003e58 <HAL_GPIO_Init+0x2a8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d052      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003c04:	4a94      	ldr	r2, [pc, #592]	; (8003e58 <HAL_GPIO_Init+0x2a8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d869      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003c0a:	4a94      	ldr	r2, [pc, #592]	; (8003e5c <HAL_GPIO_Init+0x2ac>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d04c      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003c10:	4a92      	ldr	r2, [pc, #584]	; (8003e5c <HAL_GPIO_Init+0x2ac>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d863      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003c16:	4a92      	ldr	r2, [pc, #584]	; (8003e60 <HAL_GPIO_Init+0x2b0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d046      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
 8003c1c:	4a90      	ldr	r2, [pc, #576]	; (8003e60 <HAL_GPIO_Init+0x2b0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d85d      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003c22:	2b12      	cmp	r3, #18
 8003c24:	d82a      	bhi.n	8003c7c <HAL_GPIO_Init+0xcc>
 8003c26:	2b12      	cmp	r3, #18
 8003c28:	d859      	bhi.n	8003cde <HAL_GPIO_Init+0x12e>
 8003c2a:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <HAL_GPIO_Init+0x80>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003cab 	.word	0x08003cab
 8003c34:	08003c85 	.word	0x08003c85
 8003c38:	08003c97 	.word	0x08003c97
 8003c3c:	08003cd9 	.word	0x08003cd9
 8003c40:	08003cdf 	.word	0x08003cdf
 8003c44:	08003cdf 	.word	0x08003cdf
 8003c48:	08003cdf 	.word	0x08003cdf
 8003c4c:	08003cdf 	.word	0x08003cdf
 8003c50:	08003cdf 	.word	0x08003cdf
 8003c54:	08003cdf 	.word	0x08003cdf
 8003c58:	08003cdf 	.word	0x08003cdf
 8003c5c:	08003cdf 	.word	0x08003cdf
 8003c60:	08003cdf 	.word	0x08003cdf
 8003c64:	08003cdf 	.word	0x08003cdf
 8003c68:	08003cdf 	.word	0x08003cdf
 8003c6c:	08003cdf 	.word	0x08003cdf
 8003c70:	08003cdf 	.word	0x08003cdf
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003ca1 	.word	0x08003ca1
 8003c7c:	4a79      	ldr	r2, [pc, #484]	; (8003e64 <HAL_GPIO_Init+0x2b4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c82:	e02c      	b.n	8003cde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	623b      	str	r3, [r7, #32]
          break;
 8003c8a:	e029      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	3304      	adds	r3, #4
 8003c92:	623b      	str	r3, [r7, #32]
          break;
 8003c94:	e024      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	623b      	str	r3, [r7, #32]
          break;
 8003c9e:	e01f      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	623b      	str	r3, [r7, #32]
          break;
 8003ca8:	e01a      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	623b      	str	r3, [r7, #32]
          break;
 8003cb6:	e013      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	611a      	str	r2, [r3, #16]
          break;
 8003cca:	e009      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ccc:	2308      	movs	r3, #8
 8003cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	615a      	str	r2, [r3, #20]
          break;
 8003cd6:	e003      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	623b      	str	r3, [r7, #32]
          break;
 8003cdc:	e000      	b.n	8003ce0 <HAL_GPIO_Init+0x130>
          break;
 8003cde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2bff      	cmp	r3, #255	; 0xff
 8003ce4:	d801      	bhi.n	8003cea <HAL_GPIO_Init+0x13a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	e001      	b.n	8003cee <HAL_GPIO_Init+0x13e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2bff      	cmp	r3, #255	; 0xff
 8003cf4:	d802      	bhi.n	8003cfc <HAL_GPIO_Init+0x14c>
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	e002      	b.n	8003d02 <HAL_GPIO_Init+0x152>
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	3b08      	subs	r3, #8
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	210f      	movs	r1, #15
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	401a      	ands	r2, r3
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80b1 	beq.w	8003e92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d30:	4b4d      	ldr	r3, [pc, #308]	; (8003e68 <HAL_GPIO_Init+0x2b8>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	4a4c      	ldr	r2, [pc, #304]	; (8003e68 <HAL_GPIO_Init+0x2b8>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6193      	str	r3, [r2, #24]
 8003d3c:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <HAL_GPIO_Init+0x2b8>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d48:	4a48      	ldr	r2, [pc, #288]	; (8003e6c <HAL_GPIO_Init+0x2bc>)
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	220f      	movs	r2, #15
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a40      	ldr	r2, [pc, #256]	; (8003e70 <HAL_GPIO_Init+0x2c0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d013      	beq.n	8003d9c <HAL_GPIO_Init+0x1ec>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3f      	ldr	r2, [pc, #252]	; (8003e74 <HAL_GPIO_Init+0x2c4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00d      	beq.n	8003d98 <HAL_GPIO_Init+0x1e8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3e      	ldr	r2, [pc, #248]	; (8003e78 <HAL_GPIO_Init+0x2c8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <HAL_GPIO_Init+0x1e4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3d      	ldr	r2, [pc, #244]	; (8003e7c <HAL_GPIO_Init+0x2cc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_GPIO_Init+0x1e0>
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e006      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d90:	2304      	movs	r3, #4
 8003d92:	e004      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e002      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da0:	f002 0203 	and.w	r2, r2, #3
 8003da4:	0092      	lsls	r2, r2, #2
 8003da6:	4093      	lsls	r3, r2
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dae:	492f      	ldr	r1, [pc, #188]	; (8003e6c <HAL_GPIO_Init+0x2bc>)
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	3302      	adds	r3, #2
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d006      	beq.n	8003dd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003dc8:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	492c      	ldr	r1, [pc, #176]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]
 8003dd4:	e006      	b.n	8003de4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003dd6:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	4928      	ldr	r1, [pc, #160]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003df0:	4b23      	ldr	r3, [pc, #140]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	4922      	ldr	r1, [pc, #136]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	491e      	ldr	r1, [pc, #120]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d006      	beq.n	8003e26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	4918      	ldr	r1, [pc, #96]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]
 8003e24:	e006      	b.n	8003e34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	4914      	ldr	r1, [pc, #80]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d021      	beq.n	8003e84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	490e      	ldr	r1, [pc, #56]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60cb      	str	r3, [r1, #12]
 8003e4c:	e021      	b.n	8003e92 <HAL_GPIO_Init+0x2e2>
 8003e4e:	bf00      	nop
 8003e50:	10320000 	.word	0x10320000
 8003e54:	10310000 	.word	0x10310000
 8003e58:	10220000 	.word	0x10220000
 8003e5c:	10210000 	.word	0x10210000
 8003e60:	10120000 	.word	0x10120000
 8003e64:	10110000 	.word	0x10110000
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40010800 	.word	0x40010800
 8003e74:	40010c00 	.word	0x40010c00
 8003e78:	40011000 	.word	0x40011000
 8003e7c:	40011400 	.word	0x40011400
 8003e80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	4909      	ldr	r1, [pc, #36]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	3301      	adds	r3, #1
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f ae8e 	bne.w	8003bc4 <HAL_GPIO_Init+0x14>
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	372c      	adds	r7, #44	; 0x2c
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40010400 	.word	0x40010400

08003eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ed4:	e003      	b.n	8003ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	041a      	lsls	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e12b      	b.n	8004152 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fe fbdc 	bl	80026cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2224      	movs	r2, #36	; 0x24
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f000 fd38 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8003f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4a81      	ldr	r2, [pc, #516]	; (800415c <HAL_I2C_Init+0x274>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d807      	bhi.n	8003f6c <HAL_I2C_Init+0x84>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a80      	ldr	r2, [pc, #512]	; (8004160 <HAL_I2C_Init+0x278>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	bf94      	ite	ls
 8003f64:	2301      	movls	r3, #1
 8003f66:	2300      	movhi	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e006      	b.n	8003f7a <HAL_I2C_Init+0x92>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a7d      	ldr	r2, [pc, #500]	; (8004164 <HAL_I2C_Init+0x27c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	bf94      	ite	ls
 8003f74:	2301      	movls	r3, #1
 8003f76:	2300      	movhi	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0e7      	b.n	8004152 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a78      	ldr	r2, [pc, #480]	; (8004168 <HAL_I2C_Init+0x280>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	0c9b      	lsrs	r3, r3, #18
 8003f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a6a      	ldr	r2, [pc, #424]	; (800415c <HAL_I2C_Init+0x274>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d802      	bhi.n	8003fbc <HAL_I2C_Init+0xd4>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	e009      	b.n	8003fd0 <HAL_I2C_Init+0xe8>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	4a69      	ldr	r2, [pc, #420]	; (800416c <HAL_I2C_Init+0x284>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	3301      	adds	r3, #1
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fe2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	495c      	ldr	r1, [pc, #368]	; (800415c <HAL_I2C_Init+0x274>)
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d819      	bhi.n	8004024 <HAL_I2C_Init+0x13c>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e59      	subs	r1, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffe:	1c59      	adds	r1, r3, #1
 8004000:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004004:	400b      	ands	r3, r1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_I2C_Init+0x138>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e59      	subs	r1, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fbb1 f3f3 	udiv	r3, r1, r3
 8004018:	3301      	adds	r3, #1
 800401a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401e:	e051      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 8004020:	2304      	movs	r3, #4
 8004022:	e04f      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d111      	bne.n	8004050 <HAL_I2C_Init+0x168>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1e58      	subs	r0, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e012      	b.n	8004076 <HAL_I2C_Init+0x18e>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1e58      	subs	r0, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	0099      	lsls	r1, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	fbb0 f3f3 	udiv	r3, r0, r3
 8004066:	3301      	adds	r3, #1
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x196>
 800407a:	2301      	movs	r3, #1
 800407c:	e022      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <HAL_I2C_Init+0x1bc>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1e58      	subs	r0, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6859      	ldr	r1, [r3, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	440b      	add	r3, r1
 8004094:	fbb0 f3f3 	udiv	r3, r0, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	e00f      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1e58      	subs	r0, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	0099      	lsls	r1, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	6809      	ldr	r1, [r1, #0]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6911      	ldr	r1, [r2, #16]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68d2      	ldr	r2, [r2, #12]
 80040fe:	4311      	orrs	r1, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	430b      	orrs	r3, r1
 8004106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	000186a0 	.word	0x000186a0
 8004160:	001e847f 	.word	0x001e847f
 8004164:	003d08ff 	.word	0x003d08ff
 8004168:	431bde83 	.word	0x431bde83
 800416c:	10624dd3 	.word	0x10624dd3

08004170 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e034      	b.n	80041ec <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800418a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f245 5255 	movw	r2, #21845	; 0x5555
 8004194:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6852      	ldr	r2, [r2, #4]
 800419e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6892      	ldr	r2, [r2, #8]
 80041a8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80041aa:	f7ff f9cf 	bl	800354c <HAL_GetTick>
 80041ae:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80041b0:	e00f      	b.n	80041d2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80041b2:	f7ff f9cb 	bl	800354c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b27      	cmp	r3, #39	; 0x27
 80041be:	d908      	bls.n	80041d2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e00c      	b.n	80041ec <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e8      	bne.n	80041b2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80041e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004204:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
	...

08004214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e26c      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8087 	beq.w	8004342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004234:	4b92      	ldr	r3, [pc, #584]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b04      	cmp	r3, #4
 800423e:	d00c      	beq.n	800425a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004240:	4b8f      	ldr	r3, [pc, #572]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d112      	bne.n	8004272 <HAL_RCC_OscConfig+0x5e>
 800424c:	4b8c      	ldr	r3, [pc, #560]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d10b      	bne.n	8004272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425a:	4b89      	ldr	r3, [pc, #548]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d06c      	beq.n	8004340 <HAL_RCC_OscConfig+0x12c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d168      	bne.n	8004340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e246      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427a:	d106      	bne.n	800428a <HAL_RCC_OscConfig+0x76>
 800427c:	4b80      	ldr	r3, [pc, #512]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a7f      	ldr	r2, [pc, #508]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e02e      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x98>
 8004292:	4b7b      	ldr	r3, [pc, #492]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7a      	ldr	r2, [pc, #488]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b78      	ldr	r3, [pc, #480]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a77      	ldr	r2, [pc, #476]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e01d      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0xbc>
 80042b6:	4b72      	ldr	r3, [pc, #456]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a71      	ldr	r2, [pc, #452]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b6f      	ldr	r3, [pc, #444]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6e      	ldr	r2, [pc, #440]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 80042d0:	4b6b      	ldr	r3, [pc, #428]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a6a      	ldr	r2, [pc, #424]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b68      	ldr	r3, [pc, #416]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a67      	ldr	r2, [pc, #412]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7ff f92c 	bl	800354c <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7ff f928 	bl	800354c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1fa      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0xe4>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7ff f918 	bl	800354c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7ff f914 	bl	800354c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1e6      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004332:	4b53      	ldr	r3, [pc, #332]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x10c>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d063      	beq.n	8004416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800434e:	4b4c      	ldr	r3, [pc, #304]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800435a:	4b49      	ldr	r3, [pc, #292]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d11c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x18c>
 8004366:	4b46      	ldr	r3, [pc, #280]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d116      	bne.n	80043a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	4b43      	ldr	r3, [pc, #268]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x176>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1ba      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4b3d      	ldr	r3, [pc, #244]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4939      	ldr	r1, [pc, #228]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	e03a      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a8:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_RCC_OscConfig+0x270>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7ff f8cd 	bl	800354c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b6:	f7ff f8c9 	bl	800354c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e19b      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4927      	ldr	r1, [pc, #156]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
 80043e8:	e015      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_RCC_OscConfig+0x270>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7ff f8ac 	bl	800354c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f8:	f7ff f8a8 	bl	800354c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e17a      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	4b1d      	ldr	r3, [pc, #116]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03a      	beq.n	8004498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d019      	beq.n	800445e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <HAL_RCC_OscConfig+0x274>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004430:	f7ff f88c 	bl	800354c <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7ff f888 	bl	800354c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e15a      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <HAL_RCC_OscConfig+0x26c>)
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004456:	2001      	movs	r0, #1
 8004458:	f000 fada 	bl	8004a10 <RCC_Delay>
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_RCC_OscConfig+0x274>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004464:	f7ff f872 	bl	800354c <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446a:	e00f      	b.n	800448c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446c:	f7ff f86e 	bl	800354c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d908      	bls.n	800448c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e140      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	42420000 	.word	0x42420000
 8004488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448c:	4b9e      	ldr	r3, [pc, #632]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e9      	bne.n	800446c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a6 	beq.w	80045f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044aa:	4b97      	ldr	r3, [pc, #604]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	4b94      	ldr	r3, [pc, #592]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4a93      	ldr	r2, [pc, #588]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c0:	61d3      	str	r3, [r2, #28]
 80044c2:	4b91      	ldr	r3, [pc, #580]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b8e      	ldr	r3, [pc, #568]	; (800470c <HAL_RCC_OscConfig+0x4f8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d118      	bne.n	8004510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044de:	4b8b      	ldr	r3, [pc, #556]	; (800470c <HAL_RCC_OscConfig+0x4f8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a8a      	ldr	r2, [pc, #552]	; (800470c <HAL_RCC_OscConfig+0x4f8>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7ff f82f 	bl	800354c <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7ff f82b 	bl	800354c <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	; 0x64
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0fd      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	4b81      	ldr	r3, [pc, #516]	; (800470c <HAL_RCC_OscConfig+0x4f8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x312>
 8004518:	4b7b      	ldr	r3, [pc, #492]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4a7a      	ldr	r2, [pc, #488]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6213      	str	r3, [r2, #32]
 8004524:	e02d      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x334>
 800452e:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4a75      	ldr	r2, [pc, #468]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6213      	str	r3, [r2, #32]
 800453a:	4b73      	ldr	r3, [pc, #460]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a72      	ldr	r2, [pc, #456]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004540:	f023 0304 	bic.w	r3, r3, #4
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	e01c      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d10c      	bne.n	800456a <HAL_RCC_OscConfig+0x356>
 8004550:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4a6c      	ldr	r2, [pc, #432]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004556:	f043 0304 	orr.w	r3, r3, #4
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a69      	ldr	r2, [pc, #420]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	e00b      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 800456a:	4b67      	ldr	r3, [pc, #412]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4a66      	ldr	r2, [pc, #408]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6213      	str	r3, [r2, #32]
 8004576:	4b64      	ldr	r3, [pc, #400]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4a63      	ldr	r2, [pc, #396]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d015      	beq.n	80045b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458a:	f7fe ffdf 	bl	800354c <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fe ffdb 	bl	800354c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0ab      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	4b57      	ldr	r3, [pc, #348]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ee      	beq.n	8004592 <HAL_RCC_OscConfig+0x37e>
 80045b4:	e014      	b.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b6:	f7fe ffc9 	bl	800354c <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fe ffc5 	bl	800354c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e095      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	4b4c      	ldr	r3, [pc, #304]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ee      	bne.n	80045be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e6:	4b48      	ldr	r3, [pc, #288]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4a47      	ldr	r2, [pc, #284]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8081 	beq.w	80046fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fc:	4b42      	ldr	r3, [pc, #264]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b08      	cmp	r3, #8
 8004606:	d061      	beq.n	80046cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d146      	bne.n	800469e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b3f      	ldr	r3, [pc, #252]	; (8004710 <HAL_RCC_OscConfig+0x4fc>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe ff99 	bl	800354c <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe ff95 	bl	800354c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e067      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004630:	4b35      	ldr	r3, [pc, #212]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d108      	bne.n	8004658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004646:	4b30      	ldr	r3, [pc, #192]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	492d      	ldr	r1, [pc, #180]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004658:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a19      	ldr	r1, [r3, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	430b      	orrs	r3, r1
 800466a:	4927      	ldr	r1, [pc, #156]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <HAL_RCC_OscConfig+0x4fc>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fe ff69 	bl	800354c <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fe ff65 	bl	800354c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e037      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x46a>
 800469c:	e02f      	b.n	80046fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <HAL_RCC_OscConfig+0x4fc>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fe ff52 	bl	800354c <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fe ff4e 	bl	800354c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e020      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x498>
 80046ca:	e018      	b.n	80046fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e013      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_OscConfig+0x4f4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	40007000 	.word	0x40007000
 8004710:	42420060 	.word	0x42420060

08004714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0d0      	b.n	80048ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004728:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d910      	bls.n	8004758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b67      	ldr	r3, [pc, #412]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 0207 	bic.w	r2, r3, #7
 800473e:	4965      	ldr	r1, [pc, #404]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b63      	ldr	r3, [pc, #396]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0b8      	b.n	80048ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d020      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004770:	4b59      	ldr	r3, [pc, #356]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a58      	ldr	r2, [pc, #352]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800477a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004788:	4b53      	ldr	r3, [pc, #332]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a52      	ldr	r2, [pc, #328]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004794:	4b50      	ldr	r3, [pc, #320]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	494d      	ldr	r1, [pc, #308]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d040      	beq.n	8004834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b47      	ldr	r3, [pc, #284]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d115      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e07f      	b.n	80048ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d2:	4b41      	ldr	r3, [pc, #260]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e073      	b.n	80048ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e2:	4b3d      	ldr	r3, [pc, #244]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e06b      	b.n	80048ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f2:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f023 0203 	bic.w	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4936      	ldr	r1, [pc, #216]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	4313      	orrs	r3, r2
 8004802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004804:	f7fe fea2 	bl	800354c <HAL_GetTick>
 8004808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	e00a      	b.n	8004822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480c:	f7fe fe9e 	bl	800354c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	; 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e053      	b.n	80048ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004822:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 020c 	and.w	r2, r3, #12
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	429a      	cmp	r2, r3
 8004832:	d1eb      	bne.n	800480c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004834:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d210      	bcs.n	8004864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 0207 	bic.w	r2, r3, #7
 800484a:	4922      	ldr	r1, [pc, #136]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e032      	b.n	80048ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004870:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4916      	ldr	r1, [pc, #88]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	4313      	orrs	r3, r2
 8004880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	490e      	ldr	r1, [pc, #56]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048a2:	f000 f821 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 80048a6:	4602      	mov	r2, r0
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	490a      	ldr	r1, [pc, #40]	; (80048dc <HAL_RCC_ClockConfig+0x1c8>)
 80048b4:	5ccb      	ldrb	r3, [r1, r3]
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <HAL_RCC_ClockConfig+0x1cc>)
 80048bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1d0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe fe00 	bl	80034c8 <HAL_InitTick>

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40022000 	.word	0x40022000
 80048d8:	40021000 	.word	0x40021000
 80048dc:	0800ae74 	.word	0x0800ae74
 80048e0:	20000000 	.word	0x20000000
 80048e4:	20000004 	.word	0x20000004

080048e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e8:	b490      	push	{r4, r7}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048ee:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048f0:	1d3c      	adds	r4, r7, #4
 80048f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048f8:	f240 2301 	movw	r3, #513	; 0x201
 80048fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
 8004902:	2300      	movs	r3, #0
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	2300      	movs	r3, #0
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004912:	4b22      	ldr	r3, [pc, #136]	; (800499c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b04      	cmp	r3, #4
 8004920:	d002      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x40>
 8004922:	2b08      	cmp	r3, #8
 8004924:	d003      	beq.n	800492e <HAL_RCC_GetSysClockFreq+0x46>
 8004926:	e02d      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004928:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800492a:	623b      	str	r3, [r7, #32]
      break;
 800492c:	e02d      	b.n	800498a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	0c9b      	lsrs	r3, r3, #18
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800493a:	4413      	add	r3, r2
 800493c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004940:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d013      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800494c:	4b13      	ldr	r3, [pc, #76]	; (800499c <HAL_RCC_GetSysClockFreq+0xb4>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	0c5b      	lsrs	r3, r3, #17
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800495a:	4413      	add	r3, r2
 800495c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004960:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	4a0e      	ldr	r2, [pc, #56]	; (80049a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004966:	fb02 f203 	mul.w	r2, r2, r3
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
 8004972:	e004      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	4a0b      	ldr	r2, [pc, #44]	; (80049a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	623b      	str	r3, [r7, #32]
      break;
 8004982:	e002      	b.n	800498a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004984:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004986:	623b      	str	r3, [r7, #32]
      break;
 8004988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800498a:	6a3b      	ldr	r3, [r7, #32]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3728      	adds	r7, #40	; 0x28
 8004990:	46bd      	mov	sp, r7
 8004992:	bc90      	pop	{r4, r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	0800ae64 	.word	0x0800ae64
 800499c:	40021000 	.word	0x40021000
 80049a0:	00f42400 	.word	0x00f42400
 80049a4:	003d0900 	.word	0x003d0900
 80049a8:	007a1200 	.word	0x007a1200

080049ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b0:	4b02      	ldr	r3, [pc, #8]	; (80049bc <HAL_RCC_GetHCLKFreq+0x10>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	20000000 	.word	0x20000000

080049c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c4:	f7ff fff2 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049c8:	4602      	mov	r2, r0
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	4903      	ldr	r1, [pc, #12]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d6:	5ccb      	ldrb	r3, [r1, r3]
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	0800ae84 	.word	0x0800ae84

080049e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049ec:	f7ff ffde 	bl	80049ac <HAL_RCC_GetHCLKFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	0adb      	lsrs	r3, r3, #11
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	4903      	ldr	r1, [pc, #12]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	0800ae84 	.word	0x0800ae84

08004a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a18:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <RCC_Delay+0x34>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <RCC_Delay+0x38>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	0a5b      	lsrs	r3, r3, #9
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a2c:	bf00      	nop
  }
  while (Delay --);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1e5a      	subs	r2, r3, #1
 8004a32:	60fa      	str	r2, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f9      	bne.n	8004a2c <RCC_Delay+0x1c>
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	20000000 	.word	0x20000000
 8004a48:	10624dd3 	.word	0x10624dd3

08004a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e076      	b.n	8004b4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6e:	d009      	beq.n	8004a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	61da      	str	r2, [r3, #28]
 8004a76:	e005      	b.n	8004a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fd fe64 	bl	800276c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	ea42 0103 	orr.w	r1, r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	0c1a      	lsrs	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f002 0204 	and.w	r2, r2, #4
 8004b2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e041      	b.n	8004bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fd fe42 	bl	8002804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 ffce 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d001      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e03a      	b.n	8004c82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <HAL_TIM_Base_Start_IT+0x98>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00e      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x58>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d009      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x58>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x58>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d111      	bne.n	8004c70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d010      	beq.n	8004c80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	e007      	b.n	8004c80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800

08004c98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0201 	bic.w	r2, r2, #1
 8004cae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10f      	bne.n	8004ce0 <HAL_TIM_Base_Stop_IT+0x48>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6a1a      	ldr	r2, [r3, #32]
 8004cc6:	f240 4344 	movw	r3, #1092	; 0x444
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_Base_Stop_IT+0x48>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e041      	b.n	8004d8a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f839 	bl	8004d92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 fefe 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIM_OC_Start+0x24>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e022      	b.n	8004e0e <HAL_TIM_OC_Start+0x6a>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d109      	bne.n	8004de2 <HAL_TIM_OC_Start+0x3e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	e015      	b.n	8004e0e <HAL_TIM_OC_Start+0x6a>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d109      	bne.n	8004dfc <HAL_TIM_OC_Start+0x58>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	e008      	b.n	8004e0e <HAL_TIM_OC_Start+0x6a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e05e      	b.n	8004ed4 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_OC_Start+0x82>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e24:	e013      	b.n	8004e4e <HAL_TIM_OC_Start+0xaa>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_OC_Start+0x92>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e34:	e00b      	b.n	8004e4e <HAL_TIM_OC_Start+0xaa>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_OC_Start+0xa2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e44:	e003      	b.n	8004e4e <HAL_TIM_OC_Start+0xaa>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2201      	movs	r2, #1
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 fa87 	bl	800636a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <HAL_TIM_OC_Start+0x138>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d107      	bne.n	8004e76 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a18      	ldr	r2, [pc, #96]	; (8004edc <HAL_TIM_OC_Start+0x138>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIM_OC_Start+0xfa>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e88:	d009      	beq.n	8004e9e <HAL_TIM_OC_Start+0xfa>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a14      	ldr	r2, [pc, #80]	; (8004ee0 <HAL_TIM_OC_Start+0x13c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIM_OC_Start+0xfa>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <HAL_TIM_OC_Start+0x140>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d111      	bne.n	8004ec2 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b06      	cmp	r3, #6
 8004eae:	d010      	beq.n	8004ed2 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	e007      	b.n	8004ed2 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800

08004ee8 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 fa35 	bl	800636a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a29      	ldr	r2, [pc, #164]	; (8004fac <HAL_TIM_OC_Stop+0xc4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d117      	bne.n	8004f3a <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10f      	bne.n	8004f3a <HAL_TIM_OC_Stop+0x52>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6a1a      	ldr	r2, [r3, #32]
 8004f20:	f240 4344 	movw	r3, #1092	; 0x444
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d107      	bne.n	8004f3a <HAL_TIM_OC_Stop+0x52>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6a1a      	ldr	r2, [r3, #32]
 8004f40:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10f      	bne.n	8004f6a <HAL_TIM_OC_Stop+0x82>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	f240 4344 	movw	r3, #1092	; 0x444
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <HAL_TIM_OC_Stop+0x82>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_OC_Stop+0x92>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f78:	e013      	b.n	8004fa2 <HAL_TIM_OC_Stop+0xba>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_OC_Stop+0xa2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f88:	e00b      	b.n	8004fa2 <HAL_TIM_OC_Stop+0xba>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_OC_Stop+0xb2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f98:	e003      	b.n	8004fa2 <HAL_TIM_OC_Stop+0xba>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40012c00 	.word	0x40012c00

08004fb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e041      	b.n	8005046 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f839 	bl	800504e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f000 fda0 	bl	8005b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <HAL_TIM_IC_Start_IT+0x1a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e013      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x42>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b04      	cmp	r3, #4
 800507e:	d104      	bne.n	800508a <HAL_TIM_IC_Start_IT+0x2a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e00b      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x42>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d104      	bne.n	800509a <HAL_TIM_IC_Start_IT+0x3a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005096:	b2db      	uxtb	r3, r3
 8005098:	e003      	b.n	80050a2 <HAL_TIM_IC_Start_IT+0x42>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d104      	bne.n	80050b4 <HAL_TIM_IC_Start_IT+0x54>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e013      	b.n	80050dc <HAL_TIM_IC_Start_IT+0x7c>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d104      	bne.n	80050c4 <HAL_TIM_IC_Start_IT+0x64>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e00b      	b.n	80050dc <HAL_TIM_IC_Start_IT+0x7c>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d104      	bne.n	80050d4 <HAL_TIM_IC_Start_IT+0x74>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e003      	b.n	80050dc <HAL_TIM_IC_Start_IT+0x7c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d102      	bne.n	80050ea <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0b3      	b.n	8005256 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0x9e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050fc:	e013      	b.n	8005126 <HAL_TIM_IC_Start_IT+0xc6>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d104      	bne.n	800510e <HAL_TIM_IC_Start_IT+0xae>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800510c:	e00b      	b.n	8005126 <HAL_TIM_IC_Start_IT+0xc6>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d104      	bne.n	800511e <HAL_TIM_IC_Start_IT+0xbe>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511c:	e003      	b.n	8005126 <HAL_TIM_IC_Start_IT+0xc6>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <HAL_TIM_IC_Start_IT+0xd6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005134:	e013      	b.n	800515e <HAL_TIM_IC_Start_IT+0xfe>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d104      	bne.n	8005146 <HAL_TIM_IC_Start_IT+0xe6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005144:	e00b      	b.n	800515e <HAL_TIM_IC_Start_IT+0xfe>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0xf6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005154:	e003      	b.n	800515e <HAL_TIM_IC_Start_IT+0xfe>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b0c      	cmp	r3, #12
 8005162:	d841      	bhi.n	80051e8 <HAL_TIM_IC_Start_IT+0x188>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <HAL_TIM_IC_Start_IT+0x10c>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	080051a1 	.word	0x080051a1
 8005170:	080051e9 	.word	0x080051e9
 8005174:	080051e9 	.word	0x080051e9
 8005178:	080051e9 	.word	0x080051e9
 800517c:	080051b3 	.word	0x080051b3
 8005180:	080051e9 	.word	0x080051e9
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080051e9 	.word	0x080051e9
 800518c:	080051c5 	.word	0x080051c5
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051e9 	.word	0x080051e9
 8005198:	080051e9 	.word	0x080051e9
 800519c:	080051d7 	.word	0x080051d7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0202 	orr.w	r2, r2, #2
 80051ae:	60da      	str	r2, [r3, #12]
      break;
 80051b0:	e01b      	b.n	80051ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0204 	orr.w	r2, r2, #4
 80051c0:	60da      	str	r2, [r3, #12]
      break;
 80051c2:	e012      	b.n	80051ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	60da      	str	r2, [r3, #12]
      break;
 80051d4:	e009      	b.n	80051ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0210 	orr.w	r2, r2, #16
 80051e4:	60da      	str	r2, [r3, #12]
      break;
 80051e6:	e000      	b.n	80051ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80051e8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2201      	movs	r2, #1
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 f8b9 	bl	800636a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a18      	ldr	r2, [pc, #96]	; (8005260 <HAL_TIM_IC_Start_IT+0x200>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_TIM_IC_Start_IT+0x1c0>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520a:	d009      	beq.n	8005220 <HAL_TIM_IC_Start_IT+0x1c0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a14      	ldr	r2, [pc, #80]	; (8005264 <HAL_TIM_IC_Start_IT+0x204>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIM_IC_Start_IT+0x1c0>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a13      	ldr	r2, [pc, #76]	; (8005268 <HAL_TIM_IC_Start_IT+0x208>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d111      	bne.n	8005244 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b06      	cmp	r3, #6
 8005230:	d010      	beq.n	8005254 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005242:	e007      	b.n	8005254 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800

0800526c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d841      	bhi.n	8005300 <HAL_TIM_IC_Stop_IT+0x94>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <HAL_TIM_IC_Stop_IT+0x18>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052b9 	.word	0x080052b9
 8005288:	08005301 	.word	0x08005301
 800528c:	08005301 	.word	0x08005301
 8005290:	08005301 	.word	0x08005301
 8005294:	080052cb 	.word	0x080052cb
 8005298:	08005301 	.word	0x08005301
 800529c:	08005301 	.word	0x08005301
 80052a0:	08005301 	.word	0x08005301
 80052a4:	080052dd 	.word	0x080052dd
 80052a8:	08005301 	.word	0x08005301
 80052ac:	08005301 	.word	0x08005301
 80052b0:	08005301 	.word	0x08005301
 80052b4:	080052ef 	.word	0x080052ef
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0202 	bic.w	r2, r2, #2
 80052c6:	60da      	str	r2, [r3, #12]
      break;
 80052c8:	e01b      	b.n	8005302 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0204 	bic.w	r2, r2, #4
 80052d8:	60da      	str	r2, [r3, #12]
      break;
 80052da:	e012      	b.n	8005302 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0208 	bic.w	r2, r2, #8
 80052ea:	60da      	str	r2, [r3, #12]
      break;
 80052ec:	e009      	b.n	8005302 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0210 	bic.w	r2, r2, #16
 80052fc:	60da      	str	r2, [r3, #12]
      break;
 80052fe:	e000      	b.n	8005302 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8005300:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f001 f82d 	bl	800636a <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6a1a      	ldr	r2, [r3, #32]
 8005316:	f241 1311 	movw	r3, #4369	; 0x1111
 800531a:	4013      	ands	r3, r2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10f      	bne.n	8005340 <HAL_TIM_IC_Stop_IT+0xd4>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a1a      	ldr	r2, [r3, #32]
 8005326:	f240 4344 	movw	r3, #1092	; 0x444
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d107      	bne.n	8005340 <HAL_TIM_IC_Stop_IT+0xd4>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <HAL_TIM_IC_Stop_IT+0xe4>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800534e:	e013      	b.n	8005378 <HAL_TIM_IC_Stop_IT+0x10c>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b04      	cmp	r3, #4
 8005354:	d104      	bne.n	8005360 <HAL_TIM_IC_Stop_IT+0xf4>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800535e:	e00b      	b.n	8005378 <HAL_TIM_IC_Stop_IT+0x10c>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b08      	cmp	r3, #8
 8005364:	d104      	bne.n	8005370 <HAL_TIM_IC_Stop_IT+0x104>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800536e:	e003      	b.n	8005378 <HAL_TIM_IC_Stop_IT+0x10c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d104      	bne.n	8005388 <HAL_TIM_IC_Stop_IT+0x11c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005386:	e013      	b.n	80053b0 <HAL_TIM_IC_Stop_IT+0x144>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b04      	cmp	r3, #4
 800538c:	d104      	bne.n	8005398 <HAL_TIM_IC_Stop_IT+0x12c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005396:	e00b      	b.n	80053b0 <HAL_TIM_IC_Stop_IT+0x144>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b08      	cmp	r3, #8
 800539c:	d104      	bne.n	80053a8 <HAL_TIM_IC_Stop_IT+0x13c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a6:	e003      	b.n	80053b0 <HAL_TIM_IC_Stop_IT+0x144>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop

080053bc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e041      	b.n	8005454 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f839 	bl	800545c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f000 fb99 	bl	8005b34 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0208 	bic.w	r2, r2, #8
 8005410:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6819      	ldr	r1, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr

0800546e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b02      	cmp	r3, #2
 8005482:	d122      	bne.n	80054ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d11b      	bne.n	80054ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0202 	mvn.w	r2, #2
 800549a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7fd f807 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 80054b6:	e005      	b.n	80054c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fb20 	bl	8005afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fb26 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d122      	bne.n	800551e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d11b      	bne.n	800551e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0204 	mvn.w	r2, #4
 80054ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fc ffdd 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 800550a:	e005      	b.n	8005518 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 faf6 	bl	8005afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fafc 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b08      	cmp	r3, #8
 800552a:	d122      	bne.n	8005572 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b08      	cmp	r3, #8
 8005538:	d11b      	bne.n	8005572 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f06f 0208 	mvn.w	r2, #8
 8005542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2204      	movs	r2, #4
 8005548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fc ffb3 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 800555e:	e005      	b.n	800556c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 facc 	bl	8005afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fad2 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b10      	cmp	r3, #16
 800557e:	d122      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b10      	cmp	r3, #16
 800558c:	d11b      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f06f 0210 	mvn.w	r2, #16
 8005596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2208      	movs	r2, #8
 800559c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fc ff89 	bl	80024c4 <HAL_TIM_IC_CaptureCallback>
 80055b2:	e005      	b.n	80055c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 faa2 	bl	8005afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 faa8 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d10e      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f06f 0201 	mvn.w	r2, #1
 80055ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fa7d 	bl	8005aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b80      	cmp	r3, #128	; 0x80
 80055fe:	d10e      	bne.n	800561e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d107      	bne.n	800561e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 ff83 	bl	8006524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d10e      	bne.n	800564a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d107      	bne.n	800564a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fa6c 	bl	8005b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b20      	cmp	r3, #32
 8005656:	d10e      	bne.n	8005676 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b20      	cmp	r3, #32
 8005664:	d107      	bne.n	8005676 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0220 	mvn.w	r2, #32
 800566e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 ff4e 	bl	8006512 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005696:	2302      	movs	r3, #2
 8005698:	e046      	b.n	8005728 <HAL_TIM_OC_ConfigChannel+0xa8>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d839      	bhi.n	800571c <HAL_TIM_OC_ConfigChannel+0x9c>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056e5 	.word	0x080056e5
 80056b4:	0800571d 	.word	0x0800571d
 80056b8:	0800571d 	.word	0x0800571d
 80056bc:	0800571d 	.word	0x0800571d
 80056c0:	080056f3 	.word	0x080056f3
 80056c4:	0800571d 	.word	0x0800571d
 80056c8:	0800571d 	.word	0x0800571d
 80056cc:	0800571d 	.word	0x0800571d
 80056d0:	08005701 	.word	0x08005701
 80056d4:	0800571d 	.word	0x0800571d
 80056d8:	0800571d 	.word	0x0800571d
 80056dc:	0800571d 	.word	0x0800571d
 80056e0:	0800570f 	.word	0x0800570f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fa84 	bl	8005bf8 <TIM_OC1_SetConfig>
      break;
 80056f0:	e015      	b.n	800571e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fae3 	bl	8005cc4 <TIM_OC2_SetConfig>
      break;
 80056fe:	e00e      	b.n	800571e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fb46 	bl	8005d98 <TIM_OC3_SetConfig>
      break;
 800570c:	e007      	b.n	800571e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fba9 	bl	8005e6c <TIM_OC4_SetConfig>
      break;
 800571a:	e000      	b.n	800571e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800571c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005746:	2302      	movs	r3, #2
 8005748:	e082      	b.n	8005850 <HAL_TIM_IC_ConfigChannel+0x120>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11b      	bne.n	8005790 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6819      	ldr	r1, [r3, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f000 fc5c 	bl	8006024 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 020c 	bic.w	r2, r2, #12
 800577a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	619a      	str	r2, [r3, #24]
 800578e:	e05a      	b.n	8005846 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d11c      	bne.n	80057d0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f000 fcc5 	bl	8006134 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6999      	ldr	r1, [r3, #24]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	021a      	lsls	r2, r3, #8
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	619a      	str	r2, [r3, #24]
 80057ce:	e03a      	b.n	8005846 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d11b      	bne.n	800580e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6819      	ldr	r1, [r3, #0]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f000 fd10 	bl	800620a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 020c 	bic.w	r2, r2, #12
 80057f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69d9      	ldr	r1, [r3, #28]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	61da      	str	r2, [r3, #28]
 800580c:	e01b      	b.n	8005846 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6819      	ldr	r1, [r3, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f000 fd2f 	bl	8006280 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005830:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69d9      	ldr	r1, [r3, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	021a      	lsls	r2, r3, #8
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_TIM_ConfigClockSource+0x18>
 800586c:	2302      	movs	r3, #2
 800586e:	e0b3      	b.n	80059d8 <HAL_TIM_ConfigClockSource+0x180>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800588e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005896:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a8:	d03e      	beq.n	8005928 <HAL_TIM_ConfigClockSource+0xd0>
 80058aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ae:	f200 8087 	bhi.w	80059c0 <HAL_TIM_ConfigClockSource+0x168>
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b6:	f000 8085 	beq.w	80059c4 <HAL_TIM_ConfigClockSource+0x16c>
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058be:	d87f      	bhi.n	80059c0 <HAL_TIM_ConfigClockSource+0x168>
 80058c0:	2b70      	cmp	r3, #112	; 0x70
 80058c2:	d01a      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0xa2>
 80058c4:	2b70      	cmp	r3, #112	; 0x70
 80058c6:	d87b      	bhi.n	80059c0 <HAL_TIM_ConfigClockSource+0x168>
 80058c8:	2b60      	cmp	r3, #96	; 0x60
 80058ca:	d050      	beq.n	800596e <HAL_TIM_ConfigClockSource+0x116>
 80058cc:	2b60      	cmp	r3, #96	; 0x60
 80058ce:	d877      	bhi.n	80059c0 <HAL_TIM_ConfigClockSource+0x168>
 80058d0:	2b50      	cmp	r3, #80	; 0x50
 80058d2:	d03c      	beq.n	800594e <HAL_TIM_ConfigClockSource+0xf6>
 80058d4:	2b50      	cmp	r3, #80	; 0x50
 80058d6:	d873      	bhi.n	80059c0 <HAL_TIM_ConfigClockSource+0x168>
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d058      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x136>
 80058dc:	2b40      	cmp	r3, #64	; 0x40
 80058de:	d86f      	bhi.n	80059c0 <HAL_TIM_ConfigClockSource+0x168>
 80058e0:	2b30      	cmp	r3, #48	; 0x30
 80058e2:	d064      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x156>
 80058e4:	2b30      	cmp	r3, #48	; 0x30
 80058e6:	d86b      	bhi.n	80059c0 <HAL_TIM_ConfigClockSource+0x168>
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d060      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x156>
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d867      	bhi.n	80059c0 <HAL_TIM_ConfigClockSource+0x168>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d05c      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x156>
 80058f4:	2b10      	cmp	r3, #16
 80058f6:	d05a      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80058f8:	e062      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6899      	ldr	r1, [r3, #8]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f000 fd0f 	bl	800632c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800591c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	609a      	str	r2, [r3, #8]
      break;
 8005926:	e04e      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	6899      	ldr	r1, [r3, #8]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f000 fcf8 	bl	800632c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800594a:	609a      	str	r2, [r3, #8]
      break;
 800594c:	e03b      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6859      	ldr	r1, [r3, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	461a      	mov	r2, r3
 800595c:	f000 fbbc 	bl	80060d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2150      	movs	r1, #80	; 0x50
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fcc6 	bl	80062f8 <TIM_ITRx_SetConfig>
      break;
 800596c:	e02b      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	461a      	mov	r2, r3
 800597c:	f000 fc16 	bl	80061ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2160      	movs	r1, #96	; 0x60
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fcb6 	bl	80062f8 <TIM_ITRx_SetConfig>
      break;
 800598c:	e01b      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6859      	ldr	r1, [r3, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	461a      	mov	r2, r3
 800599c:	f000 fb9c 	bl	80060d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2140      	movs	r1, #64	; 0x40
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fca6 	bl	80062f8 <TIM_ITRx_SetConfig>
      break;
 80059ac:	e00b      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f000 fc9d 	bl	80062f8 <TIM_ITRx_SetConfig>
        break;
 80059be:	e002      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059c0:	bf00      	nop
 80059c2:	e000      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e031      	b.n	8005a5c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005a08:	6839      	ldr	r1, [r7, #0]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa7c 	bl	8005f08 <TIM_SlaveTimer_SetConfig>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e018      	b.n	8005a5c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a38:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a48:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b0c      	cmp	r3, #12
 8005a76:	d831      	bhi.n	8005adc <HAL_TIM_ReadCapturedValue+0x78>
 8005a78:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005ab5 	.word	0x08005ab5
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005add 	.word	0x08005add
 8005a90:	08005abf 	.word	0x08005abf
 8005a94:	08005add 	.word	0x08005add
 8005a98:	08005add 	.word	0x08005add
 8005a9c:	08005add 	.word	0x08005add
 8005aa0:	08005ac9 	.word	0x08005ac9
 8005aa4:	08005add 	.word	0x08005add
 8005aa8:	08005add 	.word	0x08005add
 8005aac:	08005add 	.word	0x08005add
 8005ab0:	08005ad3 	.word	0x08005ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aba:	60fb      	str	r3, [r7, #12]

      break;
 8005abc:	e00f      	b.n	8005ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	60fb      	str	r3, [r7, #12]

      break;
 8005ac6:	e00a      	b.n	8005ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	60fb      	str	r3, [r7, #12]

      break;
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	60fb      	str	r3, [r7, #12]

      break;
 8005ada:	e000      	b.n	8005ade <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005adc:	bf00      	nop
  }

  return tmpreg;
 8005ade:	68fb      	ldr	r3, [r7, #12]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop

08005aec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a29      	ldr	r2, [pc, #164]	; (8005bec <TIM_Base_SetConfig+0xb8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00b      	beq.n	8005b64 <TIM_Base_SetConfig+0x30>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d007      	beq.n	8005b64 <TIM_Base_SetConfig+0x30>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a26      	ldr	r2, [pc, #152]	; (8005bf0 <TIM_Base_SetConfig+0xbc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_Base_SetConfig+0x30>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a25      	ldr	r2, [pc, #148]	; (8005bf4 <TIM_Base_SetConfig+0xc0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d108      	bne.n	8005b76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <TIM_Base_SetConfig+0xb8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00b      	beq.n	8005b96 <TIM_Base_SetConfig+0x62>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b84:	d007      	beq.n	8005b96 <TIM_Base_SetConfig+0x62>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <TIM_Base_SetConfig+0xbc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <TIM_Base_SetConfig+0x62>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <TIM_Base_SetConfig+0xc0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d108      	bne.n	8005ba8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a07      	ldr	r2, [pc, #28]	; (8005bec <TIM_Base_SetConfig+0xb8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d103      	bne.n	8005bdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	615a      	str	r2, [r3, #20]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800

08005bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f023 0201 	bic.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f023 0302 	bic.w	r3, r3, #2
 8005c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <TIM_OC1_SetConfig+0xc8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d10c      	bne.n	8005c6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0308 	bic.w	r3, r3, #8
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 0304 	bic.w	r3, r3, #4
 8005c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <TIM_OC1_SetConfig+0xc8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d111      	bne.n	8005c9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40012c00 	.word	0x40012c00

08005cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0210 	bic.w	r2, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f023 0320 	bic.w	r3, r3, #32
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <TIM_OC2_SetConfig+0xd0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10d      	bne.n	8005d40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <TIM_OC2_SetConfig+0xd0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d113      	bne.n	8005d70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	40012c00 	.word	0x40012c00

08005d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a1d      	ldr	r2, [pc, #116]	; (8005e68 <TIM_OC3_SetConfig+0xd0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10d      	bne.n	8005e12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a14      	ldr	r2, [pc, #80]	; (8005e68 <TIM_OC3_SetConfig+0xd0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d113      	bne.n	8005e42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	621a      	str	r2, [r3, #32]
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40012c00 	.word	0x40012c00

08005e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	031b      	lsls	r3, r3, #12
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a0f      	ldr	r2, [pc, #60]	; (8005f04 <TIM_OC4_SetConfig+0x98>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d109      	bne.n	8005ee0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	019b      	lsls	r3, r3, #6
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	621a      	str	r2, [r3, #32]
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr
 8005f04:	40012c00 	.word	0x40012c00

08005f08 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f20:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b70      	cmp	r3, #112	; 0x70
 8005f4c:	d01a      	beq.n	8005f84 <TIM_SlaveTimer_SetConfig+0x7c>
 8005f4e:	2b70      	cmp	r3, #112	; 0x70
 8005f50:	d860      	bhi.n	8006014 <TIM_SlaveTimer_SetConfig+0x10c>
 8005f52:	2b60      	cmp	r3, #96	; 0x60
 8005f54:	d054      	beq.n	8006000 <TIM_SlaveTimer_SetConfig+0xf8>
 8005f56:	2b60      	cmp	r3, #96	; 0x60
 8005f58:	d85c      	bhi.n	8006014 <TIM_SlaveTimer_SetConfig+0x10c>
 8005f5a:	2b50      	cmp	r3, #80	; 0x50
 8005f5c:	d046      	beq.n	8005fec <TIM_SlaveTimer_SetConfig+0xe4>
 8005f5e:	2b50      	cmp	r3, #80	; 0x50
 8005f60:	d858      	bhi.n	8006014 <TIM_SlaveTimer_SetConfig+0x10c>
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d019      	beq.n	8005f9a <TIM_SlaveTimer_SetConfig+0x92>
 8005f66:	2b40      	cmp	r3, #64	; 0x40
 8005f68:	d854      	bhi.n	8006014 <TIM_SlaveTimer_SetConfig+0x10c>
 8005f6a:	2b30      	cmp	r3, #48	; 0x30
 8005f6c:	d054      	beq.n	8006018 <TIM_SlaveTimer_SetConfig+0x110>
 8005f6e:	2b30      	cmp	r3, #48	; 0x30
 8005f70:	d850      	bhi.n	8006014 <TIM_SlaveTimer_SetConfig+0x10c>
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d050      	beq.n	8006018 <TIM_SlaveTimer_SetConfig+0x110>
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d84c      	bhi.n	8006014 <TIM_SlaveTimer_SetConfig+0x10c>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d04c      	beq.n	8006018 <TIM_SlaveTimer_SetConfig+0x110>
 8005f7e:	2b10      	cmp	r3, #16
 8005f80:	d04a      	beq.n	8006018 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005f82:	e047      	b.n	8006014 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68d9      	ldr	r1, [r3, #12]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f000 f9ca 	bl	800632c <TIM_ETR_SetConfig>
      break;
 8005f98:	e03f      	b.n	800601a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d101      	bne.n	8005fa6 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e03a      	b.n	800601c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0201 	bic.w	r2, r2, #1
 8005fbc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fcc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	621a      	str	r2, [r3, #32]
      break;
 8005fea:	e016      	b.n	800601a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6899      	ldr	r1, [r3, #8]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f000 f86d 	bl	80060d8 <TIM_TI1_ConfigInputStage>
      break;
 8005ffe:	e00c      	b.n	800601a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	6899      	ldr	r1, [r3, #8]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	461a      	mov	r2, r3
 800600e:	f000 f8cd 	bl	80061ac <TIM_TI2_ConfigInputStage>
      break;
 8006012:	e002      	b.n	800601a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006014:	bf00      	nop
 8006016:	e000      	b.n	800601a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8006018:	bf00      	nop
  }
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a1f      	ldr	r2, [pc, #124]	; (80060cc <TIM_TI1_SetConfig+0xa8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00b      	beq.n	800606a <TIM_TI1_SetConfig+0x46>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006058:	d007      	beq.n	800606a <TIM_TI1_SetConfig+0x46>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <TIM_TI1_SetConfig+0xac>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_TI1_SetConfig+0x46>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <TIM_TI1_SetConfig+0xb0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <TIM_TI1_SetConfig+0x4a>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <TIM_TI1_SetConfig+0x4c>
 800606e:	2300      	movs	r3, #0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	e003      	b.n	800608e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f043 0301 	orr.w	r3, r3, #1
 800608c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	b2db      	uxtb	r3, r3
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f023 030a 	bic.w	r3, r3, #10
 80060a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f003 030a 	and.w	r3, r3, #10
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800

080060d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f023 0201 	bic.w	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f023 030a 	bic.w	r3, r3, #10
 8006114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr

08006134 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f023 0210 	bic.w	r2, r3, #16
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	031b      	lsls	r3, r3, #12
 8006178:	b29b      	uxth	r3, r3
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006186:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f023 0210 	bic.w	r2, r3, #16
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	031b      	lsls	r3, r3, #12
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	621a      	str	r2, [r3, #32]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr

0800620a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800620a:	b480      	push	{r7}
 800620c:	b087      	sub	sp, #28
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006246:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	b2db      	uxtb	r3, r3
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800625a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr

08006280 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	031b      	lsls	r3, r3, #12
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	031b      	lsls	r3, r3, #12
 80062d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	f043 0307 	orr.w	r3, r3, #7
 800631a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	609a      	str	r2, [r3, #8]
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	021a      	lsls	r2, r3, #8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	431a      	orrs	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4313      	orrs	r3, r2
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	609a      	str	r2, [r3, #8]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr

0800636a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800636a:	b480      	push	{r7}
 800636c:	b087      	sub	sp, #28
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2201      	movs	r2, #1
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1a      	ldr	r2, [r3, #32]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	43db      	mvns	r3, r3
 800638c:	401a      	ands	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	fa01 f303 	lsl.w	r3, r1, r3
 80063a2:	431a      	orrs	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr
	...

080063b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e046      	b.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a16      	ldr	r2, [pc, #88]	; (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00e      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006418:	d009      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a12      	ldr	r2, [pc, #72]	; (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d004      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a10      	ldr	r2, [pc, #64]	; (800646c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10c      	bne.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4313      	orrs	r3, r2
 800643e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40000400 	.word	0x40000400
 800646c:	40000800 	.word	0x40000800

08006470 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006488:	2302      	movs	r3, #2
 800648a:	e03d      	b.n	8006508 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr

08006512 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr

08006524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr

08006536 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e03f      	b.n	80065c8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d106      	bne.n	8006562 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7fc fa15 	bl	800298c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2224      	movs	r2, #36	; 0x24
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006578:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f9a6 	bl	80068cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800658e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695a      	ldr	r2, [r3, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800659e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d17c      	bne.n	80066ea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_UART_Transmit+0x2c>
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e075      	b.n	80066ec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_UART_Transmit+0x3e>
 800660a:	2302      	movs	r3, #2
 800660c:	e06e      	b.n	80066ec <HAL_UART_Transmit+0x11c>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2221      	movs	r2, #33	; 0x21
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006624:	f7fc ff92 	bl	800354c <HAL_GetTick>
 8006628:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	88fa      	ldrh	r2, [r7, #6]
 8006634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	d108      	bne.n	8006652 <HAL_UART_Transmit+0x82>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006648:	2300      	movs	r3, #0
 800664a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	e003      	b.n	800665a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006662:	e02a      	b.n	80066ba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f8e2 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e036      	b.n	80066ec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10b      	bne.n	800669c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006692:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	3302      	adds	r3, #2
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	e007      	b.n	80066ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	781a      	ldrb	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	3301      	adds	r3, #1
 80066aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1cf      	bne.n	8006664 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2200      	movs	r2, #0
 80066cc:	2140      	movs	r1, #64	; 0x40
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f8b2 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e006      	b.n	80066ec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e000      	b.n	80066ec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066ea:	2302      	movs	r3, #2
  }
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3720      	adds	r7, #32
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	; 0x28
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b20      	cmp	r3, #32
 8006712:	f040 808c 	bne.w	800682e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_UART_Receive+0x2e>
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e084      	b.n	8006830 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_UART_Receive+0x40>
 8006730:	2302      	movs	r3, #2
 8006732:	e07d      	b.n	8006830 <HAL_UART_Receive+0x13c>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2222      	movs	r2, #34	; 0x22
 8006746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006750:	f7fc fefc 	bl	800354c <HAL_GetTick>
 8006754:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	88fa      	ldrh	r2, [r7, #6]
 800675a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	88fa      	ldrh	r2, [r7, #6]
 8006760:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676a:	d108      	bne.n	800677e <HAL_UART_Receive+0x8a>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	61bb      	str	r3, [r7, #24]
 800677c:	e003      	b.n	8006786 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800678e:	e043      	b.n	8006818 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	2120      	movs	r1, #32
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f84c 	bl	8006838 <UART_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e042      	b.n	8006830 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10c      	bne.n	80067ca <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067bc:	b29a      	uxth	r2, r3
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	3302      	adds	r3, #2
 80067c6:	61bb      	str	r3, [r7, #24]
 80067c8:	e01f      	b.n	800680a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	d007      	beq.n	80067e4 <HAL_UART_Receive+0xf0>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <HAL_UART_Receive+0xfe>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	e008      	b.n	8006804 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	3301      	adds	r3, #1
 8006808:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1b6      	bne.n	8006790 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	e000      	b.n	8006830 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800682e:	2302      	movs	r3, #2
  }
}
 8006830:	4618      	mov	r0, r3
 8006832:	3720      	adds	r7, #32
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006848:	e02c      	b.n	80068a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006850:	d028      	beq.n	80068a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <UART_WaitOnFlagUntilTimeout+0x30>
 8006858:	f7fc fe78 	bl	800354c <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	429a      	cmp	r2, r3
 8006866:	d21d      	bcs.n	80068a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006876:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695a      	ldr	r2, [r3, #20]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0201 	bic.w	r2, r2, #1
 8006886:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e00f      	b.n	80068c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4013      	ands	r3, r2
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	bf0c      	ite	eq
 80068b4:	2301      	moveq	r3, #1
 80068b6:	2300      	movne	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d0c3      	beq.n	800684a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006906:	f023 030c 	bic.w	r3, r3, #12
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6812      	ldr	r2, [r2, #0]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	430b      	orrs	r3, r1
 8006912:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a2c      	ldr	r2, [pc, #176]	; (80069e0 <UART_SetConfig+0x114>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d103      	bne.n	800693c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006934:	f7fe f858 	bl	80049e8 <HAL_RCC_GetPCLK2Freq>
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	e002      	b.n	8006942 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800693c:	f7fe f840 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8006940:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009a      	lsls	r2, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	fbb2 f3f3 	udiv	r3, r2, r3
 8006958:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <UART_SetConfig+0x118>)
 800695a:	fba2 2303 	umull	r2, r3, r2, r3
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	0119      	lsls	r1, r3, #4
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009a      	lsls	r2, r3, #2
 800696c:	441a      	add	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	fbb2 f2f3 	udiv	r2, r2, r3
 8006978:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <UART_SetConfig+0x118>)
 800697a:	fba3 0302 	umull	r0, r3, r3, r2
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	2064      	movs	r0, #100	; 0x64
 8006982:	fb00 f303 	mul.w	r3, r0, r3
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	3332      	adds	r3, #50	; 0x32
 800698c:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <UART_SetConfig+0x118>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006998:	4419      	add	r1, r3
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009a      	lsls	r2, r3, #2
 80069a4:	441a      	add	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80069b0:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <UART_SetConfig+0x118>)
 80069b2:	fba3 0302 	umull	r0, r3, r3, r2
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	2064      	movs	r0, #100	; 0x64
 80069ba:	fb00 f303 	mul.w	r3, r0, r3
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	3332      	adds	r3, #50	; 0x32
 80069c4:	4a07      	ldr	r2, [pc, #28]	; (80069e4 <UART_SetConfig+0x118>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	f003 020f 	and.w	r2, r3, #15
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	440a      	add	r2, r1
 80069d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40013800 	.word	0x40013800
 80069e4:	51eb851f 	.word	0x51eb851f

080069e8 <__errno>:
 80069e8:	4b01      	ldr	r3, [pc, #4]	; (80069f0 <__errno+0x8>)
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	2000000c 	.word	0x2000000c

080069f4 <__libc_init_array>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	2600      	movs	r6, #0
 80069f8:	4d0c      	ldr	r5, [pc, #48]	; (8006a2c <__libc_init_array+0x38>)
 80069fa:	4c0d      	ldr	r4, [pc, #52]	; (8006a30 <__libc_init_array+0x3c>)
 80069fc:	1b64      	subs	r4, r4, r5
 80069fe:	10a4      	asrs	r4, r4, #2
 8006a00:	42a6      	cmp	r6, r4
 8006a02:	d109      	bne.n	8006a18 <__libc_init_array+0x24>
 8006a04:	f004 f8ee 	bl	800abe4 <_init>
 8006a08:	2600      	movs	r6, #0
 8006a0a:	4d0a      	ldr	r5, [pc, #40]	; (8006a34 <__libc_init_array+0x40>)
 8006a0c:	4c0a      	ldr	r4, [pc, #40]	; (8006a38 <__libc_init_array+0x44>)
 8006a0e:	1b64      	subs	r4, r4, r5
 8006a10:	10a4      	asrs	r4, r4, #2
 8006a12:	42a6      	cmp	r6, r4
 8006a14:	d105      	bne.n	8006a22 <__libc_init_array+0x2e>
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1c:	4798      	blx	r3
 8006a1e:	3601      	adds	r6, #1
 8006a20:	e7ee      	b.n	8006a00 <__libc_init_array+0xc>
 8006a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a26:	4798      	blx	r3
 8006a28:	3601      	adds	r6, #1
 8006a2a:	e7f2      	b.n	8006a12 <__libc_init_array+0x1e>
 8006a2c:	0800b2b0 	.word	0x0800b2b0
 8006a30:	0800b2b0 	.word	0x0800b2b0
 8006a34:	0800b2b0 	.word	0x0800b2b0
 8006a38:	0800b2b4 	.word	0x0800b2b4

08006a3c <memset>:
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4402      	add	r2, r0
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d100      	bne.n	8006a46 <memset+0xa>
 8006a44:	4770      	bx	lr
 8006a46:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4a:	e7f9      	b.n	8006a40 <memset+0x4>

08006a4c <__cvt>:
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a52:	461f      	mov	r7, r3
 8006a54:	bfbb      	ittet	lt
 8006a56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006a5a:	461f      	movlt	r7, r3
 8006a5c:	2300      	movge	r3, #0
 8006a5e:	232d      	movlt	r3, #45	; 0x2d
 8006a60:	b088      	sub	sp, #32
 8006a62:	4614      	mov	r4, r2
 8006a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a68:	7013      	strb	r3, [r2, #0]
 8006a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a70:	f023 0820 	bic.w	r8, r3, #32
 8006a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a78:	d005      	beq.n	8006a86 <__cvt+0x3a>
 8006a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a7e:	d100      	bne.n	8006a82 <__cvt+0x36>
 8006a80:	3501      	adds	r5, #1
 8006a82:	2302      	movs	r3, #2
 8006a84:	e000      	b.n	8006a88 <__cvt+0x3c>
 8006a86:	2303      	movs	r3, #3
 8006a88:	aa07      	add	r2, sp, #28
 8006a8a:	9204      	str	r2, [sp, #16]
 8006a8c:	aa06      	add	r2, sp, #24
 8006a8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a92:	e9cd 3500 	strd	r3, r5, [sp]
 8006a96:	4622      	mov	r2, r4
 8006a98:	463b      	mov	r3, r7
 8006a9a:	f000 fce5 	bl	8007468 <_dtoa_r>
 8006a9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	d102      	bne.n	8006aac <__cvt+0x60>
 8006aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aa8:	07db      	lsls	r3, r3, #31
 8006aaa:	d522      	bpl.n	8006af2 <__cvt+0xa6>
 8006aac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ab0:	eb06 0905 	add.w	r9, r6, r5
 8006ab4:	d110      	bne.n	8006ad8 <__cvt+0x8c>
 8006ab6:	7833      	ldrb	r3, [r6, #0]
 8006ab8:	2b30      	cmp	r3, #48	; 0x30
 8006aba:	d10a      	bne.n	8006ad2 <__cvt+0x86>
 8006abc:	2200      	movs	r2, #0
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7f9 ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8006ac8:	b918      	cbnz	r0, 8006ad2 <__cvt+0x86>
 8006aca:	f1c5 0501 	rsb	r5, r5, #1
 8006ace:	f8ca 5000 	str.w	r5, [sl]
 8006ad2:	f8da 3000 	ldr.w	r3, [sl]
 8006ad6:	4499      	add	r9, r3
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2300      	movs	r3, #0
 8006adc:	4620      	mov	r0, r4
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7f9 ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8006ae4:	b108      	cbz	r0, 8006aea <__cvt+0x9e>
 8006ae6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006aea:	2230      	movs	r2, #48	; 0x30
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	454b      	cmp	r3, r9
 8006af0:	d307      	bcc.n	8006b02 <__cvt+0xb6>
 8006af2:	4630      	mov	r0, r6
 8006af4:	9b07      	ldr	r3, [sp, #28]
 8006af6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006af8:	1b9b      	subs	r3, r3, r6
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	b008      	add	sp, #32
 8006afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b02:	1c59      	adds	r1, r3, #1
 8006b04:	9107      	str	r1, [sp, #28]
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	e7f0      	b.n	8006aec <__cvt+0xa0>

08006b0a <__exponent>:
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b0e:	2900      	cmp	r1, #0
 8006b10:	f803 2b02 	strb.w	r2, [r3], #2
 8006b14:	bfb6      	itet	lt
 8006b16:	222d      	movlt	r2, #45	; 0x2d
 8006b18:	222b      	movge	r2, #43	; 0x2b
 8006b1a:	4249      	neglt	r1, r1
 8006b1c:	2909      	cmp	r1, #9
 8006b1e:	7042      	strb	r2, [r0, #1]
 8006b20:	dd2b      	ble.n	8006b7a <__exponent+0x70>
 8006b22:	f10d 0407 	add.w	r4, sp, #7
 8006b26:	46a4      	mov	ip, r4
 8006b28:	270a      	movs	r7, #10
 8006b2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b2e:	460a      	mov	r2, r1
 8006b30:	46a6      	mov	lr, r4
 8006b32:	fb07 1516 	mls	r5, r7, r6, r1
 8006b36:	2a63      	cmp	r2, #99	; 0x63
 8006b38:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006b42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b46:	dcf0      	bgt.n	8006b2a <__exponent+0x20>
 8006b48:	3130      	adds	r1, #48	; 0x30
 8006b4a:	f1ae 0502 	sub.w	r5, lr, #2
 8006b4e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b52:	4629      	mov	r1, r5
 8006b54:	1c44      	adds	r4, r0, #1
 8006b56:	4561      	cmp	r1, ip
 8006b58:	d30a      	bcc.n	8006b70 <__exponent+0x66>
 8006b5a:	f10d 0209 	add.w	r2, sp, #9
 8006b5e:	eba2 020e 	sub.w	r2, r2, lr
 8006b62:	4565      	cmp	r5, ip
 8006b64:	bf88      	it	hi
 8006b66:	2200      	movhi	r2, #0
 8006b68:	4413      	add	r3, r2
 8006b6a:	1a18      	subs	r0, r3, r0
 8006b6c:	b003      	add	sp, #12
 8006b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b74:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b78:	e7ed      	b.n	8006b56 <__exponent+0x4c>
 8006b7a:	2330      	movs	r3, #48	; 0x30
 8006b7c:	3130      	adds	r1, #48	; 0x30
 8006b7e:	7083      	strb	r3, [r0, #2]
 8006b80:	70c1      	strb	r1, [r0, #3]
 8006b82:	1d03      	adds	r3, r0, #4
 8006b84:	e7f1      	b.n	8006b6a <__exponent+0x60>
	...

08006b88 <_printf_float>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	b091      	sub	sp, #68	; 0x44
 8006b8e:	460c      	mov	r4, r1
 8006b90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006b94:	4616      	mov	r6, r2
 8006b96:	461f      	mov	r7, r3
 8006b98:	4605      	mov	r5, r0
 8006b9a:	f001 fa53 	bl	8008044 <_localeconv_r>
 8006b9e:	6803      	ldr	r3, [r0, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba4:	f7f9 fad4 	bl	8000150 <strlen>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	930e      	str	r3, [sp, #56]	; 0x38
 8006bac:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb0:	900a      	str	r0, [sp, #40]	; 0x28
 8006bb2:	3307      	adds	r3, #7
 8006bb4:	f023 0307 	bic.w	r3, r3, #7
 8006bb8:	f103 0208 	add.w	r2, r3, #8
 8006bbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006bc0:	f8d4 b000 	ldr.w	fp, [r4]
 8006bc4:	f8c8 2000 	str.w	r2, [r8]
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bd0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006bd4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bde:	4640      	mov	r0, r8
 8006be0:	4b9c      	ldr	r3, [pc, #624]	; (8006e54 <_printf_float+0x2cc>)
 8006be2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006be4:	f7f9 ff12 	bl	8000a0c <__aeabi_dcmpun>
 8006be8:	bb70      	cbnz	r0, 8006c48 <_printf_float+0xc0>
 8006bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bee:	4640      	mov	r0, r8
 8006bf0:	4b98      	ldr	r3, [pc, #608]	; (8006e54 <_printf_float+0x2cc>)
 8006bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bf4:	f7f9 feec 	bl	80009d0 <__aeabi_dcmple>
 8006bf8:	bb30      	cbnz	r0, 8006c48 <_printf_float+0xc0>
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4651      	mov	r1, sl
 8006c02:	f7f9 fedb 	bl	80009bc <__aeabi_dcmplt>
 8006c06:	b110      	cbz	r0, 8006c0e <_printf_float+0x86>
 8006c08:	232d      	movs	r3, #45	; 0x2d
 8006c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0e:	4b92      	ldr	r3, [pc, #584]	; (8006e58 <_printf_float+0x2d0>)
 8006c10:	4892      	ldr	r0, [pc, #584]	; (8006e5c <_printf_float+0x2d4>)
 8006c12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c16:	bf94      	ite	ls
 8006c18:	4698      	movls	r8, r3
 8006c1a:	4680      	movhi	r8, r0
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	f04f 0a00 	mov.w	sl, #0
 8006c22:	6123      	str	r3, [r4, #16]
 8006c24:	f02b 0304 	bic.w	r3, fp, #4
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	4633      	mov	r3, r6
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	9700      	str	r7, [sp, #0]
 8006c32:	aa0f      	add	r2, sp, #60	; 0x3c
 8006c34:	f000 f9d4 	bl	8006fe0 <_printf_common>
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f040 8090 	bne.w	8006d5e <_printf_float+0x1d6>
 8006c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c42:	b011      	add	sp, #68	; 0x44
 8006c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c48:	4642      	mov	r2, r8
 8006c4a:	4653      	mov	r3, sl
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	4651      	mov	r1, sl
 8006c50:	f7f9 fedc 	bl	8000a0c <__aeabi_dcmpun>
 8006c54:	b148      	cbz	r0, 8006c6a <_printf_float+0xe2>
 8006c56:	f1ba 0f00 	cmp.w	sl, #0
 8006c5a:	bfb8      	it	lt
 8006c5c:	232d      	movlt	r3, #45	; 0x2d
 8006c5e:	4880      	ldr	r0, [pc, #512]	; (8006e60 <_printf_float+0x2d8>)
 8006c60:	bfb8      	it	lt
 8006c62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c66:	4b7f      	ldr	r3, [pc, #508]	; (8006e64 <_printf_float+0x2dc>)
 8006c68:	e7d3      	b.n	8006c12 <_printf_float+0x8a>
 8006c6a:	6863      	ldr	r3, [r4, #4]
 8006c6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	d142      	bne.n	8006cfa <_printf_float+0x172>
 8006c74:	2306      	movs	r3, #6
 8006c76:	6063      	str	r3, [r4, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	9206      	str	r2, [sp, #24]
 8006c7c:	aa0e      	add	r2, sp, #56	; 0x38
 8006c7e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c82:	aa0d      	add	r2, sp, #52	; 0x34
 8006c84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c88:	9203      	str	r2, [sp, #12]
 8006c8a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c92:	6023      	str	r3, [r4, #0]
 8006c94:	6863      	ldr	r3, [r4, #4]
 8006c96:	4642      	mov	r2, r8
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	4653      	mov	r3, sl
 8006c9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ca0:	f7ff fed4 	bl	8006a4c <__cvt>
 8006ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	2947      	cmp	r1, #71	; 0x47
 8006caa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006cac:	d108      	bne.n	8006cc0 <_printf_float+0x138>
 8006cae:	1cc8      	adds	r0, r1, #3
 8006cb0:	db02      	blt.n	8006cb8 <_printf_float+0x130>
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	4299      	cmp	r1, r3
 8006cb6:	dd40      	ble.n	8006d3a <_printf_float+0x1b2>
 8006cb8:	f1a9 0902 	sub.w	r9, r9, #2
 8006cbc:	fa5f f989 	uxtb.w	r9, r9
 8006cc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cc4:	d81f      	bhi.n	8006d06 <_printf_float+0x17e>
 8006cc6:	464a      	mov	r2, r9
 8006cc8:	3901      	subs	r1, #1
 8006cca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cce:	910d      	str	r1, [sp, #52]	; 0x34
 8006cd0:	f7ff ff1b 	bl	8006b0a <__exponent>
 8006cd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cd6:	4682      	mov	sl, r0
 8006cd8:	1813      	adds	r3, r2, r0
 8006cda:	2a01      	cmp	r2, #1
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	dc02      	bgt.n	8006ce6 <_printf_float+0x15e>
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	07d2      	lsls	r2, r2, #31
 8006ce4:	d501      	bpl.n	8006cea <_printf_float+0x162>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d09b      	beq.n	8006c2a <_printf_float+0xa2>
 8006cf2:	232d      	movs	r3, #45	; 0x2d
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf8:	e797      	b.n	8006c2a <_printf_float+0xa2>
 8006cfa:	2947      	cmp	r1, #71	; 0x47
 8006cfc:	d1bc      	bne.n	8006c78 <_printf_float+0xf0>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1ba      	bne.n	8006c78 <_printf_float+0xf0>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e7b7      	b.n	8006c76 <_printf_float+0xee>
 8006d06:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d0a:	d118      	bne.n	8006d3e <_printf_float+0x1b6>
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	dd0b      	ble.n	8006d2a <_printf_float+0x1a2>
 8006d12:	6121      	str	r1, [r4, #16]
 8006d14:	b913      	cbnz	r3, 8006d1c <_printf_float+0x194>
 8006d16:	6822      	ldr	r2, [r4, #0]
 8006d18:	07d0      	lsls	r0, r2, #31
 8006d1a:	d502      	bpl.n	8006d22 <_printf_float+0x19a>
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	440b      	add	r3, r1
 8006d20:	6123      	str	r3, [r4, #16]
 8006d22:	f04f 0a00 	mov.w	sl, #0
 8006d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d28:	e7df      	b.n	8006cea <_printf_float+0x162>
 8006d2a:	b913      	cbnz	r3, 8006d32 <_printf_float+0x1aa>
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	07d2      	lsls	r2, r2, #31
 8006d30:	d501      	bpl.n	8006d36 <_printf_float+0x1ae>
 8006d32:	3302      	adds	r3, #2
 8006d34:	e7f4      	b.n	8006d20 <_printf_float+0x198>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e7f2      	b.n	8006d20 <_printf_float+0x198>
 8006d3a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d40:	4299      	cmp	r1, r3
 8006d42:	db05      	blt.n	8006d50 <_printf_float+0x1c8>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	6121      	str	r1, [r4, #16]
 8006d48:	07d8      	lsls	r0, r3, #31
 8006d4a:	d5ea      	bpl.n	8006d22 <_printf_float+0x19a>
 8006d4c:	1c4b      	adds	r3, r1, #1
 8006d4e:	e7e7      	b.n	8006d20 <_printf_float+0x198>
 8006d50:	2900      	cmp	r1, #0
 8006d52:	bfcc      	ite	gt
 8006d54:	2201      	movgt	r2, #1
 8006d56:	f1c1 0202 	rsble	r2, r1, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	e7e0      	b.n	8006d20 <_printf_float+0x198>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	055a      	lsls	r2, r3, #21
 8006d62:	d407      	bmi.n	8006d74 <_printf_float+0x1ec>
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	4642      	mov	r2, r8
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d12b      	bne.n	8006dca <_printf_float+0x242>
 8006d72:	e764      	b.n	8006c3e <_printf_float+0xb6>
 8006d74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d78:	f240 80dd 	bls.w	8006f36 <_printf_float+0x3ae>
 8006d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d80:	2200      	movs	r2, #0
 8006d82:	2300      	movs	r3, #0
 8006d84:	f7f9 fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d033      	beq.n	8006df4 <_printf_float+0x26c>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4628      	mov	r0, r5
 8006d92:	4a35      	ldr	r2, [pc, #212]	; (8006e68 <_printf_float+0x2e0>)
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f af51 	beq.w	8006c3e <_printf_float+0xb6>
 8006d9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006da0:	429a      	cmp	r2, r3
 8006da2:	db02      	blt.n	8006daa <_printf_float+0x222>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	07d8      	lsls	r0, r3, #31
 8006da8:	d50f      	bpl.n	8006dca <_printf_float+0x242>
 8006daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f af42 	beq.w	8006c3e <_printf_float+0xb6>
 8006dba:	f04f 0800 	mov.w	r8, #0
 8006dbe:	f104 091a 	add.w	r9, r4, #26
 8006dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	4543      	cmp	r3, r8
 8006dc8:	dc09      	bgt.n	8006dde <_printf_float+0x256>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	079b      	lsls	r3, r3, #30
 8006dce:	f100 8102 	bmi.w	8006fd6 <_printf_float+0x44e>
 8006dd2:	68e0      	ldr	r0, [r4, #12]
 8006dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dd6:	4298      	cmp	r0, r3
 8006dd8:	bfb8      	it	lt
 8006dda:	4618      	movlt	r0, r3
 8006ddc:	e731      	b.n	8006c42 <_printf_float+0xba>
 8006dde:	2301      	movs	r3, #1
 8006de0:	464a      	mov	r2, r9
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b8      	blx	r7
 8006de8:	3001      	adds	r0, #1
 8006dea:	f43f af28 	beq.w	8006c3e <_printf_float+0xb6>
 8006dee:	f108 0801 	add.w	r8, r8, #1
 8006df2:	e7e6      	b.n	8006dc2 <_printf_float+0x23a>
 8006df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	dc38      	bgt.n	8006e6c <_printf_float+0x2e4>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	4a19      	ldr	r2, [pc, #100]	; (8006e68 <_printf_float+0x2e0>)
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	f43f af1a 	beq.w	8006c3e <_printf_float+0xb6>
 8006e0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d102      	bne.n	8006e18 <_printf_float+0x290>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	07d9      	lsls	r1, r3, #31
 8006e16:	d5d8      	bpl.n	8006dca <_printf_float+0x242>
 8006e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	f43f af0b 	beq.w	8006c3e <_printf_float+0xb6>
 8006e28:	f04f 0900 	mov.w	r9, #0
 8006e2c:	f104 0a1a 	add.w	sl, r4, #26
 8006e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e32:	425b      	negs	r3, r3
 8006e34:	454b      	cmp	r3, r9
 8006e36:	dc01      	bgt.n	8006e3c <_printf_float+0x2b4>
 8006e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e3a:	e794      	b.n	8006d66 <_printf_float+0x1de>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4652      	mov	r2, sl
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	f43f aef9 	beq.w	8006c3e <_printf_float+0xb6>
 8006e4c:	f109 0901 	add.w	r9, r9, #1
 8006e50:	e7ee      	b.n	8006e30 <_printf_float+0x2a8>
 8006e52:	bf00      	nop
 8006e54:	7fefffff 	.word	0x7fefffff
 8006e58:	0800ae90 	.word	0x0800ae90
 8006e5c:	0800ae94 	.word	0x0800ae94
 8006e60:	0800ae9c 	.word	0x0800ae9c
 8006e64:	0800ae98 	.word	0x0800ae98
 8006e68:	0800aea0 	.word	0x0800aea0
 8006e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e70:	429a      	cmp	r2, r3
 8006e72:	bfa8      	it	ge
 8006e74:	461a      	movge	r2, r3
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	4691      	mov	r9, r2
 8006e7a:	dc37      	bgt.n	8006eec <_printf_float+0x364>
 8006e7c:	f04f 0b00 	mov.w	fp, #0
 8006e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e84:	f104 021a 	add.w	r2, r4, #26
 8006e88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e8c:	ebaa 0309 	sub.w	r3, sl, r9
 8006e90:	455b      	cmp	r3, fp
 8006e92:	dc33      	bgt.n	8006efc <_printf_float+0x374>
 8006e94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	db3b      	blt.n	8006f14 <_printf_float+0x38c>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	07da      	lsls	r2, r3, #31
 8006ea0:	d438      	bmi.n	8006f14 <_printf_float+0x38c>
 8006ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ea4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006ea6:	eba2 030a 	sub.w	r3, r2, sl
 8006eaa:	eba2 0901 	sub.w	r9, r2, r1
 8006eae:	4599      	cmp	r9, r3
 8006eb0:	bfa8      	it	ge
 8006eb2:	4699      	movge	r9, r3
 8006eb4:	f1b9 0f00 	cmp.w	r9, #0
 8006eb8:	dc34      	bgt.n	8006f24 <_printf_float+0x39c>
 8006eba:	f04f 0800 	mov.w	r8, #0
 8006ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ec2:	f104 0a1a 	add.w	sl, r4, #26
 8006ec6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006eca:	1a9b      	subs	r3, r3, r2
 8006ecc:	eba3 0309 	sub.w	r3, r3, r9
 8006ed0:	4543      	cmp	r3, r8
 8006ed2:	f77f af7a 	ble.w	8006dca <_printf_float+0x242>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4652      	mov	r2, sl
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b8      	blx	r7
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	f43f aeac 	beq.w	8006c3e <_printf_float+0xb6>
 8006ee6:	f108 0801 	add.w	r8, r8, #1
 8006eea:	e7ec      	b.n	8006ec6 <_printf_float+0x33e>
 8006eec:	4613      	mov	r3, r2
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d1c0      	bne.n	8006e7c <_printf_float+0x2f4>
 8006efa:	e6a0      	b.n	8006c3e <_printf_float+0xb6>
 8006efc:	2301      	movs	r3, #1
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	f43f ae99 	beq.w	8006c3e <_printf_float+0xb6>
 8006f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f0e:	f10b 0b01 	add.w	fp, fp, #1
 8006f12:	e7b9      	b.n	8006e88 <_printf_float+0x300>
 8006f14:	4631      	mov	r1, r6
 8006f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d1bf      	bne.n	8006ea2 <_printf_float+0x31a>
 8006f22:	e68c      	b.n	8006c3e <_printf_float+0xb6>
 8006f24:	464b      	mov	r3, r9
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	eb08 020a 	add.w	r2, r8, sl
 8006f2e:	47b8      	blx	r7
 8006f30:	3001      	adds	r0, #1
 8006f32:	d1c2      	bne.n	8006eba <_printf_float+0x332>
 8006f34:	e683      	b.n	8006c3e <_printf_float+0xb6>
 8006f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f38:	2a01      	cmp	r2, #1
 8006f3a:	dc01      	bgt.n	8006f40 <_printf_float+0x3b8>
 8006f3c:	07db      	lsls	r3, r3, #31
 8006f3e:	d537      	bpl.n	8006fb0 <_printf_float+0x428>
 8006f40:	2301      	movs	r3, #1
 8006f42:	4642      	mov	r2, r8
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f ae77 	beq.w	8006c3e <_printf_float+0xb6>
 8006f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f ae6f 	beq.w	8006c3e <_printf_float+0xb6>
 8006f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f7f9 fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8006f6c:	b9d8      	cbnz	r0, 8006fa6 <_printf_float+0x41e>
 8006f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f70:	f108 0201 	add.w	r2, r8, #1
 8006f74:	3b01      	subs	r3, #1
 8006f76:	4631      	mov	r1, r6
 8006f78:	4628      	mov	r0, r5
 8006f7a:	47b8      	blx	r7
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d10e      	bne.n	8006f9e <_printf_float+0x416>
 8006f80:	e65d      	b.n	8006c3e <_printf_float+0xb6>
 8006f82:	2301      	movs	r3, #1
 8006f84:	464a      	mov	r2, r9
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae56 	beq.w	8006c3e <_printf_float+0xb6>
 8006f92:	f108 0801 	add.w	r8, r8, #1
 8006f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	4543      	cmp	r3, r8
 8006f9c:	dcf1      	bgt.n	8006f82 <_printf_float+0x3fa>
 8006f9e:	4653      	mov	r3, sl
 8006fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fa4:	e6e0      	b.n	8006d68 <_printf_float+0x1e0>
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	f104 091a 	add.w	r9, r4, #26
 8006fae:	e7f2      	b.n	8006f96 <_printf_float+0x40e>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	e7df      	b.n	8006f76 <_printf_float+0x3ee>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	464a      	mov	r2, r9
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f ae3c 	beq.w	8006c3e <_printf_float+0xb6>
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006fce:	1a5b      	subs	r3, r3, r1
 8006fd0:	4543      	cmp	r3, r8
 8006fd2:	dcf0      	bgt.n	8006fb6 <_printf_float+0x42e>
 8006fd4:	e6fd      	b.n	8006dd2 <_printf_float+0x24a>
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	f104 0919 	add.w	r9, r4, #25
 8006fde:	e7f4      	b.n	8006fca <_printf_float+0x442>

08006fe0 <_printf_common>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	4699      	mov	r9, r3
 8006fe8:	688a      	ldr	r2, [r1, #8]
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	4607      	mov	r7, r0
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	bfb8      	it	lt
 8006ff2:	4613      	movlt	r3, r2
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007000:	b10a      	cbz	r2, 8007006 <_printf_common+0x26>
 8007002:	3301      	adds	r3, #1
 8007004:	6033      	str	r3, [r6, #0]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	0699      	lsls	r1, r3, #26
 800700a:	bf42      	ittt	mi
 800700c:	6833      	ldrmi	r3, [r6, #0]
 800700e:	3302      	addmi	r3, #2
 8007010:	6033      	strmi	r3, [r6, #0]
 8007012:	6825      	ldr	r5, [r4, #0]
 8007014:	f015 0506 	ands.w	r5, r5, #6
 8007018:	d106      	bne.n	8007028 <_printf_common+0x48>
 800701a:	f104 0a19 	add.w	sl, r4, #25
 800701e:	68e3      	ldr	r3, [r4, #12]
 8007020:	6832      	ldr	r2, [r6, #0]
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	42ab      	cmp	r3, r5
 8007026:	dc28      	bgt.n	800707a <_printf_common+0x9a>
 8007028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800702c:	1e13      	subs	r3, r2, #0
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	bf18      	it	ne
 8007032:	2301      	movne	r3, #1
 8007034:	0692      	lsls	r2, r2, #26
 8007036:	d42d      	bmi.n	8007094 <_printf_common+0xb4>
 8007038:	4649      	mov	r1, r9
 800703a:	4638      	mov	r0, r7
 800703c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007040:	47c0      	blx	r8
 8007042:	3001      	adds	r0, #1
 8007044:	d020      	beq.n	8007088 <_printf_common+0xa8>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	68e5      	ldr	r5, [r4, #12]
 800704a:	f003 0306 	and.w	r3, r3, #6
 800704e:	2b04      	cmp	r3, #4
 8007050:	bf18      	it	ne
 8007052:	2500      	movne	r5, #0
 8007054:	6832      	ldr	r2, [r6, #0]
 8007056:	f04f 0600 	mov.w	r6, #0
 800705a:	68a3      	ldr	r3, [r4, #8]
 800705c:	bf08      	it	eq
 800705e:	1aad      	subeq	r5, r5, r2
 8007060:	6922      	ldr	r2, [r4, #16]
 8007062:	bf08      	it	eq
 8007064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007068:	4293      	cmp	r3, r2
 800706a:	bfc4      	itt	gt
 800706c:	1a9b      	subgt	r3, r3, r2
 800706e:	18ed      	addgt	r5, r5, r3
 8007070:	341a      	adds	r4, #26
 8007072:	42b5      	cmp	r5, r6
 8007074:	d11a      	bne.n	80070ac <_printf_common+0xcc>
 8007076:	2000      	movs	r0, #0
 8007078:	e008      	b.n	800708c <_printf_common+0xac>
 800707a:	2301      	movs	r3, #1
 800707c:	4652      	mov	r2, sl
 800707e:	4649      	mov	r1, r9
 8007080:	4638      	mov	r0, r7
 8007082:	47c0      	blx	r8
 8007084:	3001      	adds	r0, #1
 8007086:	d103      	bne.n	8007090 <_printf_common+0xb0>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800708c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007090:	3501      	adds	r5, #1
 8007092:	e7c4      	b.n	800701e <_printf_common+0x3e>
 8007094:	2030      	movs	r0, #48	; 0x30
 8007096:	18e1      	adds	r1, r4, r3
 8007098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070a2:	4422      	add	r2, r4
 80070a4:	3302      	adds	r3, #2
 80070a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070aa:	e7c5      	b.n	8007038 <_printf_common+0x58>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4622      	mov	r2, r4
 80070b0:	4649      	mov	r1, r9
 80070b2:	4638      	mov	r0, r7
 80070b4:	47c0      	blx	r8
 80070b6:	3001      	adds	r0, #1
 80070b8:	d0e6      	beq.n	8007088 <_printf_common+0xa8>
 80070ba:	3601      	adds	r6, #1
 80070bc:	e7d9      	b.n	8007072 <_printf_common+0x92>
	...

080070c0 <_printf_i>:
 80070c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	460c      	mov	r4, r1
 80070c6:	7e27      	ldrb	r7, [r4, #24]
 80070c8:	4691      	mov	r9, r2
 80070ca:	2f78      	cmp	r7, #120	; 0x78
 80070cc:	4680      	mov	r8, r0
 80070ce:	469a      	mov	sl, r3
 80070d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070d6:	d807      	bhi.n	80070e8 <_printf_i+0x28>
 80070d8:	2f62      	cmp	r7, #98	; 0x62
 80070da:	d80a      	bhi.n	80070f2 <_printf_i+0x32>
 80070dc:	2f00      	cmp	r7, #0
 80070de:	f000 80d9 	beq.w	8007294 <_printf_i+0x1d4>
 80070e2:	2f58      	cmp	r7, #88	; 0x58
 80070e4:	f000 80a4 	beq.w	8007230 <_printf_i+0x170>
 80070e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070f0:	e03a      	b.n	8007168 <_printf_i+0xa8>
 80070f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070f6:	2b15      	cmp	r3, #21
 80070f8:	d8f6      	bhi.n	80070e8 <_printf_i+0x28>
 80070fa:	a001      	add	r0, pc, #4	; (adr r0, 8007100 <_printf_i+0x40>)
 80070fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007100:	08007159 	.word	0x08007159
 8007104:	0800716d 	.word	0x0800716d
 8007108:	080070e9 	.word	0x080070e9
 800710c:	080070e9 	.word	0x080070e9
 8007110:	080070e9 	.word	0x080070e9
 8007114:	080070e9 	.word	0x080070e9
 8007118:	0800716d 	.word	0x0800716d
 800711c:	080070e9 	.word	0x080070e9
 8007120:	080070e9 	.word	0x080070e9
 8007124:	080070e9 	.word	0x080070e9
 8007128:	080070e9 	.word	0x080070e9
 800712c:	0800727b 	.word	0x0800727b
 8007130:	0800719d 	.word	0x0800719d
 8007134:	0800725d 	.word	0x0800725d
 8007138:	080070e9 	.word	0x080070e9
 800713c:	080070e9 	.word	0x080070e9
 8007140:	0800729d 	.word	0x0800729d
 8007144:	080070e9 	.word	0x080070e9
 8007148:	0800719d 	.word	0x0800719d
 800714c:	080070e9 	.word	0x080070e9
 8007150:	080070e9 	.word	0x080070e9
 8007154:	08007265 	.word	0x08007265
 8007158:	680b      	ldr	r3, [r1, #0]
 800715a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800715e:	1d1a      	adds	r2, r3, #4
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	600a      	str	r2, [r1, #0]
 8007164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007168:	2301      	movs	r3, #1
 800716a:	e0a4      	b.n	80072b6 <_printf_i+0x1f6>
 800716c:	6825      	ldr	r5, [r4, #0]
 800716e:	6808      	ldr	r0, [r1, #0]
 8007170:	062e      	lsls	r6, r5, #24
 8007172:	f100 0304 	add.w	r3, r0, #4
 8007176:	d50a      	bpl.n	800718e <_printf_i+0xce>
 8007178:	6805      	ldr	r5, [r0, #0]
 800717a:	600b      	str	r3, [r1, #0]
 800717c:	2d00      	cmp	r5, #0
 800717e:	da03      	bge.n	8007188 <_printf_i+0xc8>
 8007180:	232d      	movs	r3, #45	; 0x2d
 8007182:	426d      	negs	r5, r5
 8007184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007188:	230a      	movs	r3, #10
 800718a:	485e      	ldr	r0, [pc, #376]	; (8007304 <_printf_i+0x244>)
 800718c:	e019      	b.n	80071c2 <_printf_i+0x102>
 800718e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007192:	6805      	ldr	r5, [r0, #0]
 8007194:	600b      	str	r3, [r1, #0]
 8007196:	bf18      	it	ne
 8007198:	b22d      	sxthne	r5, r5
 800719a:	e7ef      	b.n	800717c <_printf_i+0xbc>
 800719c:	680b      	ldr	r3, [r1, #0]
 800719e:	6825      	ldr	r5, [r4, #0]
 80071a0:	1d18      	adds	r0, r3, #4
 80071a2:	6008      	str	r0, [r1, #0]
 80071a4:	0628      	lsls	r0, r5, #24
 80071a6:	d501      	bpl.n	80071ac <_printf_i+0xec>
 80071a8:	681d      	ldr	r5, [r3, #0]
 80071aa:	e002      	b.n	80071b2 <_printf_i+0xf2>
 80071ac:	0669      	lsls	r1, r5, #25
 80071ae:	d5fb      	bpl.n	80071a8 <_printf_i+0xe8>
 80071b0:	881d      	ldrh	r5, [r3, #0]
 80071b2:	2f6f      	cmp	r7, #111	; 0x6f
 80071b4:	bf0c      	ite	eq
 80071b6:	2308      	moveq	r3, #8
 80071b8:	230a      	movne	r3, #10
 80071ba:	4852      	ldr	r0, [pc, #328]	; (8007304 <_printf_i+0x244>)
 80071bc:	2100      	movs	r1, #0
 80071be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071c2:	6866      	ldr	r6, [r4, #4]
 80071c4:	2e00      	cmp	r6, #0
 80071c6:	bfa8      	it	ge
 80071c8:	6821      	ldrge	r1, [r4, #0]
 80071ca:	60a6      	str	r6, [r4, #8]
 80071cc:	bfa4      	itt	ge
 80071ce:	f021 0104 	bicge.w	r1, r1, #4
 80071d2:	6021      	strge	r1, [r4, #0]
 80071d4:	b90d      	cbnz	r5, 80071da <_printf_i+0x11a>
 80071d6:	2e00      	cmp	r6, #0
 80071d8:	d04d      	beq.n	8007276 <_printf_i+0x1b6>
 80071da:	4616      	mov	r6, r2
 80071dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80071e0:	fb03 5711 	mls	r7, r3, r1, r5
 80071e4:	5dc7      	ldrb	r7, [r0, r7]
 80071e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071ea:	462f      	mov	r7, r5
 80071ec:	42bb      	cmp	r3, r7
 80071ee:	460d      	mov	r5, r1
 80071f0:	d9f4      	bls.n	80071dc <_printf_i+0x11c>
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	d10b      	bne.n	800720e <_printf_i+0x14e>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	07df      	lsls	r7, r3, #31
 80071fa:	d508      	bpl.n	800720e <_printf_i+0x14e>
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	6861      	ldr	r1, [r4, #4]
 8007200:	4299      	cmp	r1, r3
 8007202:	bfde      	ittt	le
 8007204:	2330      	movle	r3, #48	; 0x30
 8007206:	f806 3c01 	strble.w	r3, [r6, #-1]
 800720a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800720e:	1b92      	subs	r2, r2, r6
 8007210:	6122      	str	r2, [r4, #16]
 8007212:	464b      	mov	r3, r9
 8007214:	4621      	mov	r1, r4
 8007216:	4640      	mov	r0, r8
 8007218:	f8cd a000 	str.w	sl, [sp]
 800721c:	aa03      	add	r2, sp, #12
 800721e:	f7ff fedf 	bl	8006fe0 <_printf_common>
 8007222:	3001      	adds	r0, #1
 8007224:	d14c      	bne.n	80072c0 <_printf_i+0x200>
 8007226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800722a:	b004      	add	sp, #16
 800722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007230:	4834      	ldr	r0, [pc, #208]	; (8007304 <_printf_i+0x244>)
 8007232:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007236:	680e      	ldr	r6, [r1, #0]
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	f856 5b04 	ldr.w	r5, [r6], #4
 800723e:	061f      	lsls	r7, r3, #24
 8007240:	600e      	str	r6, [r1, #0]
 8007242:	d514      	bpl.n	800726e <_printf_i+0x1ae>
 8007244:	07d9      	lsls	r1, r3, #31
 8007246:	bf44      	itt	mi
 8007248:	f043 0320 	orrmi.w	r3, r3, #32
 800724c:	6023      	strmi	r3, [r4, #0]
 800724e:	b91d      	cbnz	r5, 8007258 <_printf_i+0x198>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	f023 0320 	bic.w	r3, r3, #32
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	2310      	movs	r3, #16
 800725a:	e7af      	b.n	80071bc <_printf_i+0xfc>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	f043 0320 	orr.w	r3, r3, #32
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	2378      	movs	r3, #120	; 0x78
 8007266:	4828      	ldr	r0, [pc, #160]	; (8007308 <_printf_i+0x248>)
 8007268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800726c:	e7e3      	b.n	8007236 <_printf_i+0x176>
 800726e:	065e      	lsls	r6, r3, #25
 8007270:	bf48      	it	mi
 8007272:	b2ad      	uxthmi	r5, r5
 8007274:	e7e6      	b.n	8007244 <_printf_i+0x184>
 8007276:	4616      	mov	r6, r2
 8007278:	e7bb      	b.n	80071f2 <_printf_i+0x132>
 800727a:	680b      	ldr	r3, [r1, #0]
 800727c:	6826      	ldr	r6, [r4, #0]
 800727e:	1d1d      	adds	r5, r3, #4
 8007280:	6960      	ldr	r0, [r4, #20]
 8007282:	600d      	str	r5, [r1, #0]
 8007284:	0635      	lsls	r5, r6, #24
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	d501      	bpl.n	800728e <_printf_i+0x1ce>
 800728a:	6018      	str	r0, [r3, #0]
 800728c:	e002      	b.n	8007294 <_printf_i+0x1d4>
 800728e:	0671      	lsls	r1, r6, #25
 8007290:	d5fb      	bpl.n	800728a <_printf_i+0x1ca>
 8007292:	8018      	strh	r0, [r3, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	4616      	mov	r6, r2
 8007298:	6123      	str	r3, [r4, #16]
 800729a:	e7ba      	b.n	8007212 <_printf_i+0x152>
 800729c:	680b      	ldr	r3, [r1, #0]
 800729e:	1d1a      	adds	r2, r3, #4
 80072a0:	600a      	str	r2, [r1, #0]
 80072a2:	681e      	ldr	r6, [r3, #0]
 80072a4:	2100      	movs	r1, #0
 80072a6:	4630      	mov	r0, r6
 80072a8:	6862      	ldr	r2, [r4, #4]
 80072aa:	f000 fed7 	bl	800805c <memchr>
 80072ae:	b108      	cbz	r0, 80072b4 <_printf_i+0x1f4>
 80072b0:	1b80      	subs	r0, r0, r6
 80072b2:	6060      	str	r0, [r4, #4]
 80072b4:	6863      	ldr	r3, [r4, #4]
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	2300      	movs	r3, #0
 80072ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072be:	e7a8      	b.n	8007212 <_printf_i+0x152>
 80072c0:	4632      	mov	r2, r6
 80072c2:	4649      	mov	r1, r9
 80072c4:	4640      	mov	r0, r8
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	47d0      	blx	sl
 80072ca:	3001      	adds	r0, #1
 80072cc:	d0ab      	beq.n	8007226 <_printf_i+0x166>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	079b      	lsls	r3, r3, #30
 80072d2:	d413      	bmi.n	80072fc <_printf_i+0x23c>
 80072d4:	68e0      	ldr	r0, [r4, #12]
 80072d6:	9b03      	ldr	r3, [sp, #12]
 80072d8:	4298      	cmp	r0, r3
 80072da:	bfb8      	it	lt
 80072dc:	4618      	movlt	r0, r3
 80072de:	e7a4      	b.n	800722a <_printf_i+0x16a>
 80072e0:	2301      	movs	r3, #1
 80072e2:	4632      	mov	r2, r6
 80072e4:	4649      	mov	r1, r9
 80072e6:	4640      	mov	r0, r8
 80072e8:	47d0      	blx	sl
 80072ea:	3001      	adds	r0, #1
 80072ec:	d09b      	beq.n	8007226 <_printf_i+0x166>
 80072ee:	3501      	adds	r5, #1
 80072f0:	68e3      	ldr	r3, [r4, #12]
 80072f2:	9903      	ldr	r1, [sp, #12]
 80072f4:	1a5b      	subs	r3, r3, r1
 80072f6:	42ab      	cmp	r3, r5
 80072f8:	dcf2      	bgt.n	80072e0 <_printf_i+0x220>
 80072fa:	e7eb      	b.n	80072d4 <_printf_i+0x214>
 80072fc:	2500      	movs	r5, #0
 80072fe:	f104 0619 	add.w	r6, r4, #25
 8007302:	e7f5      	b.n	80072f0 <_printf_i+0x230>
 8007304:	0800aea2 	.word	0x0800aea2
 8007308:	0800aeb3 	.word	0x0800aeb3

0800730c <siprintf>:
 800730c:	b40e      	push	{r1, r2, r3}
 800730e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007312:	b500      	push	{lr}
 8007314:	b09c      	sub	sp, #112	; 0x70
 8007316:	ab1d      	add	r3, sp, #116	; 0x74
 8007318:	9002      	str	r0, [sp, #8]
 800731a:	9006      	str	r0, [sp, #24]
 800731c:	9107      	str	r1, [sp, #28]
 800731e:	9104      	str	r1, [sp, #16]
 8007320:	4808      	ldr	r0, [pc, #32]	; (8007344 <siprintf+0x38>)
 8007322:	4909      	ldr	r1, [pc, #36]	; (8007348 <siprintf+0x3c>)
 8007324:	f853 2b04 	ldr.w	r2, [r3], #4
 8007328:	9105      	str	r1, [sp, #20]
 800732a:	6800      	ldr	r0, [r0, #0]
 800732c:	a902      	add	r1, sp, #8
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	f001 fb42 	bl	80089b8 <_svfiprintf_r>
 8007334:	2200      	movs	r2, #0
 8007336:	9b02      	ldr	r3, [sp, #8]
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	b01c      	add	sp, #112	; 0x70
 800733c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007340:	b003      	add	sp, #12
 8007342:	4770      	bx	lr
 8007344:	2000000c 	.word	0x2000000c
 8007348:	ffff0208 	.word	0xffff0208

0800734c <quorem>:
 800734c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	6903      	ldr	r3, [r0, #16]
 8007352:	690c      	ldr	r4, [r1, #16]
 8007354:	4607      	mov	r7, r0
 8007356:	42a3      	cmp	r3, r4
 8007358:	f2c0 8083 	blt.w	8007462 <quorem+0x116>
 800735c:	3c01      	subs	r4, #1
 800735e:	f100 0514 	add.w	r5, r0, #20
 8007362:	f101 0814 	add.w	r8, r1, #20
 8007366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007374:	3301      	adds	r3, #1
 8007376:	429a      	cmp	r2, r3
 8007378:	fbb2 f6f3 	udiv	r6, r2, r3
 800737c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007380:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007384:	d332      	bcc.n	80073ec <quorem+0xa0>
 8007386:	f04f 0e00 	mov.w	lr, #0
 800738a:	4640      	mov	r0, r8
 800738c:	46ac      	mov	ip, r5
 800738e:	46f2      	mov	sl, lr
 8007390:	f850 2b04 	ldr.w	r2, [r0], #4
 8007394:	b293      	uxth	r3, r2
 8007396:	fb06 e303 	mla	r3, r6, r3, lr
 800739a:	0c12      	lsrs	r2, r2, #16
 800739c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073a0:	fb06 e202 	mla	r2, r6, r2, lr
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	ebaa 0303 	sub.w	r3, sl, r3
 80073aa:	f8dc a000 	ldr.w	sl, [ip]
 80073ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073b2:	fa1f fa8a 	uxth.w	sl, sl
 80073b6:	4453      	add	r3, sl
 80073b8:	fa1f fa82 	uxth.w	sl, r2
 80073bc:	f8dc 2000 	ldr.w	r2, [ip]
 80073c0:	4581      	cmp	r9, r0
 80073c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80073c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073d4:	f84c 3b04 	str.w	r3, [ip], #4
 80073d8:	d2da      	bcs.n	8007390 <quorem+0x44>
 80073da:	f855 300b 	ldr.w	r3, [r5, fp]
 80073de:	b92b      	cbnz	r3, 80073ec <quorem+0xa0>
 80073e0:	9b01      	ldr	r3, [sp, #4]
 80073e2:	3b04      	subs	r3, #4
 80073e4:	429d      	cmp	r5, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	d32f      	bcc.n	800744a <quorem+0xfe>
 80073ea:	613c      	str	r4, [r7, #16]
 80073ec:	4638      	mov	r0, r7
 80073ee:	f001 f8cb 	bl	8008588 <__mcmp>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	db25      	blt.n	8007442 <quorem+0xf6>
 80073f6:	4628      	mov	r0, r5
 80073f8:	f04f 0c00 	mov.w	ip, #0
 80073fc:	3601      	adds	r6, #1
 80073fe:	f858 1b04 	ldr.w	r1, [r8], #4
 8007402:	f8d0 e000 	ldr.w	lr, [r0]
 8007406:	b28b      	uxth	r3, r1
 8007408:	ebac 0303 	sub.w	r3, ip, r3
 800740c:	fa1f f28e 	uxth.w	r2, lr
 8007410:	4413      	add	r3, r2
 8007412:	0c0a      	lsrs	r2, r1, #16
 8007414:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800741c:	b29b      	uxth	r3, r3
 800741e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007422:	45c1      	cmp	r9, r8
 8007424:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007428:	f840 3b04 	str.w	r3, [r0], #4
 800742c:	d2e7      	bcs.n	80073fe <quorem+0xb2>
 800742e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007436:	b922      	cbnz	r2, 8007442 <quorem+0xf6>
 8007438:	3b04      	subs	r3, #4
 800743a:	429d      	cmp	r5, r3
 800743c:	461a      	mov	r2, r3
 800743e:	d30a      	bcc.n	8007456 <quorem+0x10a>
 8007440:	613c      	str	r4, [r7, #16]
 8007442:	4630      	mov	r0, r6
 8007444:	b003      	add	sp, #12
 8007446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744a:	6812      	ldr	r2, [r2, #0]
 800744c:	3b04      	subs	r3, #4
 800744e:	2a00      	cmp	r2, #0
 8007450:	d1cb      	bne.n	80073ea <quorem+0x9e>
 8007452:	3c01      	subs	r4, #1
 8007454:	e7c6      	b.n	80073e4 <quorem+0x98>
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	3b04      	subs	r3, #4
 800745a:	2a00      	cmp	r2, #0
 800745c:	d1f0      	bne.n	8007440 <quorem+0xf4>
 800745e:	3c01      	subs	r4, #1
 8007460:	e7eb      	b.n	800743a <quorem+0xee>
 8007462:	2000      	movs	r0, #0
 8007464:	e7ee      	b.n	8007444 <quorem+0xf8>
	...

08007468 <_dtoa_r>:
 8007468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	4616      	mov	r6, r2
 800746e:	461f      	mov	r7, r3
 8007470:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007472:	b099      	sub	sp, #100	; 0x64
 8007474:	4605      	mov	r5, r0
 8007476:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800747a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800747e:	b974      	cbnz	r4, 800749e <_dtoa_r+0x36>
 8007480:	2010      	movs	r0, #16
 8007482:	f000 fde3 	bl	800804c <malloc>
 8007486:	4602      	mov	r2, r0
 8007488:	6268      	str	r0, [r5, #36]	; 0x24
 800748a:	b920      	cbnz	r0, 8007496 <_dtoa_r+0x2e>
 800748c:	21ea      	movs	r1, #234	; 0xea
 800748e:	4bae      	ldr	r3, [pc, #696]	; (8007748 <_dtoa_r+0x2e0>)
 8007490:	48ae      	ldr	r0, [pc, #696]	; (800774c <_dtoa_r+0x2e4>)
 8007492:	f001 fba1 	bl	8008bd8 <__assert_func>
 8007496:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800749a:	6004      	str	r4, [r0, #0]
 800749c:	60c4      	str	r4, [r0, #12]
 800749e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	b151      	cbz	r1, 80074ba <_dtoa_r+0x52>
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	2301      	movs	r3, #1
 80074a8:	4093      	lsls	r3, r2
 80074aa:	604a      	str	r2, [r1, #4]
 80074ac:	608b      	str	r3, [r1, #8]
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 fe30 	bl	8008114 <_Bfree>
 80074b4:	2200      	movs	r2, #0
 80074b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	1e3b      	subs	r3, r7, #0
 80074bc:	bfaf      	iteee	ge
 80074be:	2300      	movge	r3, #0
 80074c0:	2201      	movlt	r2, #1
 80074c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074c6:	9305      	strlt	r3, [sp, #20]
 80074c8:	bfa8      	it	ge
 80074ca:	f8c8 3000 	strge.w	r3, [r8]
 80074ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80074d2:	4b9f      	ldr	r3, [pc, #636]	; (8007750 <_dtoa_r+0x2e8>)
 80074d4:	bfb8      	it	lt
 80074d6:	f8c8 2000 	strlt.w	r2, [r8]
 80074da:	ea33 0309 	bics.w	r3, r3, r9
 80074de:	d119      	bne.n	8007514 <_dtoa_r+0xac>
 80074e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80074e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074e6:	6013      	str	r3, [r2, #0]
 80074e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074ec:	4333      	orrs	r3, r6
 80074ee:	f000 8580 	beq.w	8007ff2 <_dtoa_r+0xb8a>
 80074f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074f4:	b953      	cbnz	r3, 800750c <_dtoa_r+0xa4>
 80074f6:	4b97      	ldr	r3, [pc, #604]	; (8007754 <_dtoa_r+0x2ec>)
 80074f8:	e022      	b.n	8007540 <_dtoa_r+0xd8>
 80074fa:	4b97      	ldr	r3, [pc, #604]	; (8007758 <_dtoa_r+0x2f0>)
 80074fc:	9308      	str	r3, [sp, #32]
 80074fe:	3308      	adds	r3, #8
 8007500:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	9808      	ldr	r0, [sp, #32]
 8007506:	b019      	add	sp, #100	; 0x64
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	4b91      	ldr	r3, [pc, #580]	; (8007754 <_dtoa_r+0x2ec>)
 800750e:	9308      	str	r3, [sp, #32]
 8007510:	3303      	adds	r3, #3
 8007512:	e7f5      	b.n	8007500 <_dtoa_r+0x98>
 8007514:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007518:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800751c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007520:	2200      	movs	r2, #0
 8007522:	2300      	movs	r3, #0
 8007524:	f7f9 fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8007528:	4680      	mov	r8, r0
 800752a:	b158      	cbz	r0, 8007544 <_dtoa_r+0xdc>
 800752c:	2301      	movs	r3, #1
 800752e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8559 	beq.w	8007fec <_dtoa_r+0xb84>
 800753a:	4888      	ldr	r0, [pc, #544]	; (800775c <_dtoa_r+0x2f4>)
 800753c:	6018      	str	r0, [r3, #0]
 800753e:	1e43      	subs	r3, r0, #1
 8007540:	9308      	str	r3, [sp, #32]
 8007542:	e7df      	b.n	8007504 <_dtoa_r+0x9c>
 8007544:	ab16      	add	r3, sp, #88	; 0x58
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	ab17      	add	r3, sp, #92	; 0x5c
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	4628      	mov	r0, r5
 800754e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007552:	f001 f8c5 	bl	80086e0 <__d2b>
 8007556:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800755a:	4682      	mov	sl, r0
 800755c:	2c00      	cmp	r4, #0
 800755e:	d07e      	beq.n	800765e <_dtoa_r+0x1f6>
 8007560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007566:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800756a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800756e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007572:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007576:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800757a:	2200      	movs	r2, #0
 800757c:	4b78      	ldr	r3, [pc, #480]	; (8007760 <_dtoa_r+0x2f8>)
 800757e:	f7f8 fdf3 	bl	8000168 <__aeabi_dsub>
 8007582:	a36b      	add	r3, pc, #428	; (adr r3, 8007730 <_dtoa_r+0x2c8>)
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f7f8 ffa6 	bl	80004d8 <__aeabi_dmul>
 800758c:	a36a      	add	r3, pc, #424	; (adr r3, 8007738 <_dtoa_r+0x2d0>)
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f7f8 fdeb 	bl	800016c <__adddf3>
 8007596:	4606      	mov	r6, r0
 8007598:	4620      	mov	r0, r4
 800759a:	460f      	mov	r7, r1
 800759c:	f7f8 ff32 	bl	8000404 <__aeabi_i2d>
 80075a0:	a367      	add	r3, pc, #412	; (adr r3, 8007740 <_dtoa_r+0x2d8>)
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f7f8 ff97 	bl	80004d8 <__aeabi_dmul>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4630      	mov	r0, r6
 80075b0:	4639      	mov	r1, r7
 80075b2:	f7f8 fddb 	bl	800016c <__adddf3>
 80075b6:	4606      	mov	r6, r0
 80075b8:	460f      	mov	r7, r1
 80075ba:	f7f9 fa3d 	bl	8000a38 <__aeabi_d2iz>
 80075be:	2200      	movs	r2, #0
 80075c0:	4681      	mov	r9, r0
 80075c2:	2300      	movs	r3, #0
 80075c4:	4630      	mov	r0, r6
 80075c6:	4639      	mov	r1, r7
 80075c8:	f7f9 f9f8 	bl	80009bc <__aeabi_dcmplt>
 80075cc:	b148      	cbz	r0, 80075e2 <_dtoa_r+0x17a>
 80075ce:	4648      	mov	r0, r9
 80075d0:	f7f8 ff18 	bl	8000404 <__aeabi_i2d>
 80075d4:	4632      	mov	r2, r6
 80075d6:	463b      	mov	r3, r7
 80075d8:	f7f9 f9e6 	bl	80009a8 <__aeabi_dcmpeq>
 80075dc:	b908      	cbnz	r0, 80075e2 <_dtoa_r+0x17a>
 80075de:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80075e2:	f1b9 0f16 	cmp.w	r9, #22
 80075e6:	d857      	bhi.n	8007698 <_dtoa_r+0x230>
 80075e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075ec:	4b5d      	ldr	r3, [pc, #372]	; (8007764 <_dtoa_r+0x2fc>)
 80075ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f9 f9e1 	bl	80009bc <__aeabi_dcmplt>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d04e      	beq.n	800769c <_dtoa_r+0x234>
 80075fe:	2300      	movs	r3, #0
 8007600:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007604:	930f      	str	r3, [sp, #60]	; 0x3c
 8007606:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007608:	1b1c      	subs	r4, r3, r4
 800760a:	1e63      	subs	r3, r4, #1
 800760c:	9309      	str	r3, [sp, #36]	; 0x24
 800760e:	bf49      	itett	mi
 8007610:	f1c4 0301 	rsbmi	r3, r4, #1
 8007614:	2300      	movpl	r3, #0
 8007616:	9306      	strmi	r3, [sp, #24]
 8007618:	2300      	movmi	r3, #0
 800761a:	bf54      	ite	pl
 800761c:	9306      	strpl	r3, [sp, #24]
 800761e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007620:	f1b9 0f00 	cmp.w	r9, #0
 8007624:	db3c      	blt.n	80076a0 <_dtoa_r+0x238>
 8007626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007628:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800762c:	444b      	add	r3, r9
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	2300      	movs	r3, #0
 8007632:	930a      	str	r3, [sp, #40]	; 0x28
 8007634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007636:	2b09      	cmp	r3, #9
 8007638:	d86c      	bhi.n	8007714 <_dtoa_r+0x2ac>
 800763a:	2b05      	cmp	r3, #5
 800763c:	bfc4      	itt	gt
 800763e:	3b04      	subgt	r3, #4
 8007640:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007644:	bfc8      	it	gt
 8007646:	2400      	movgt	r4, #0
 8007648:	f1a3 0302 	sub.w	r3, r3, #2
 800764c:	bfd8      	it	le
 800764e:	2401      	movle	r4, #1
 8007650:	2b03      	cmp	r3, #3
 8007652:	f200 808b 	bhi.w	800776c <_dtoa_r+0x304>
 8007656:	e8df f003 	tbb	[pc, r3]
 800765a:	4f2d      	.short	0x4f2d
 800765c:	5b4d      	.short	0x5b4d
 800765e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007662:	441c      	add	r4, r3
 8007664:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007668:	2b20      	cmp	r3, #32
 800766a:	bfc3      	ittte	gt
 800766c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007670:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007674:	fa09 f303 	lslgt.w	r3, r9, r3
 8007678:	f1c3 0320 	rsble	r3, r3, #32
 800767c:	bfc6      	itte	gt
 800767e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007682:	4318      	orrgt	r0, r3
 8007684:	fa06 f003 	lslle.w	r0, r6, r3
 8007688:	f7f8 feac 	bl	80003e4 <__aeabi_ui2d>
 800768c:	2301      	movs	r3, #1
 800768e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007692:	3c01      	subs	r4, #1
 8007694:	9313      	str	r3, [sp, #76]	; 0x4c
 8007696:	e770      	b.n	800757a <_dtoa_r+0x112>
 8007698:	2301      	movs	r3, #1
 800769a:	e7b3      	b.n	8007604 <_dtoa_r+0x19c>
 800769c:	900f      	str	r0, [sp, #60]	; 0x3c
 800769e:	e7b2      	b.n	8007606 <_dtoa_r+0x19e>
 80076a0:	9b06      	ldr	r3, [sp, #24]
 80076a2:	eba3 0309 	sub.w	r3, r3, r9
 80076a6:	9306      	str	r3, [sp, #24]
 80076a8:	f1c9 0300 	rsb	r3, r9, #0
 80076ac:	930a      	str	r3, [sp, #40]	; 0x28
 80076ae:	2300      	movs	r3, #0
 80076b0:	930e      	str	r3, [sp, #56]	; 0x38
 80076b2:	e7bf      	b.n	8007634 <_dtoa_r+0x1cc>
 80076b4:	2300      	movs	r3, #0
 80076b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dc59      	bgt.n	8007772 <_dtoa_r+0x30a>
 80076be:	f04f 0b01 	mov.w	fp, #1
 80076c2:	465b      	mov	r3, fp
 80076c4:	f8cd b008 	str.w	fp, [sp, #8]
 80076c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80076cc:	2200      	movs	r2, #0
 80076ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80076d0:	6042      	str	r2, [r0, #4]
 80076d2:	2204      	movs	r2, #4
 80076d4:	f102 0614 	add.w	r6, r2, #20
 80076d8:	429e      	cmp	r6, r3
 80076da:	6841      	ldr	r1, [r0, #4]
 80076dc:	d94f      	bls.n	800777e <_dtoa_r+0x316>
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 fcd8 	bl	8008094 <_Balloc>
 80076e4:	9008      	str	r0, [sp, #32]
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d14d      	bne.n	8007786 <_dtoa_r+0x31e>
 80076ea:	4602      	mov	r2, r0
 80076ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076f0:	4b1d      	ldr	r3, [pc, #116]	; (8007768 <_dtoa_r+0x300>)
 80076f2:	e6cd      	b.n	8007490 <_dtoa_r+0x28>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e7de      	b.n	80076b6 <_dtoa_r+0x24e>
 80076f8:	2300      	movs	r3, #0
 80076fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80076fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076fe:	eb09 0b03 	add.w	fp, r9, r3
 8007702:	f10b 0301 	add.w	r3, fp, #1
 8007706:	2b01      	cmp	r3, #1
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	bfb8      	it	lt
 800770c:	2301      	movlt	r3, #1
 800770e:	e7dd      	b.n	80076cc <_dtoa_r+0x264>
 8007710:	2301      	movs	r3, #1
 8007712:	e7f2      	b.n	80076fa <_dtoa_r+0x292>
 8007714:	2401      	movs	r4, #1
 8007716:	2300      	movs	r3, #0
 8007718:	940b      	str	r4, [sp, #44]	; 0x2c
 800771a:	9322      	str	r3, [sp, #136]	; 0x88
 800771c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007720:	2200      	movs	r2, #0
 8007722:	2312      	movs	r3, #18
 8007724:	f8cd b008 	str.w	fp, [sp, #8]
 8007728:	9223      	str	r2, [sp, #140]	; 0x8c
 800772a:	e7cf      	b.n	80076cc <_dtoa_r+0x264>
 800772c:	f3af 8000 	nop.w
 8007730:	636f4361 	.word	0x636f4361
 8007734:	3fd287a7 	.word	0x3fd287a7
 8007738:	8b60c8b3 	.word	0x8b60c8b3
 800773c:	3fc68a28 	.word	0x3fc68a28
 8007740:	509f79fb 	.word	0x509f79fb
 8007744:	3fd34413 	.word	0x3fd34413
 8007748:	0800aed1 	.word	0x0800aed1
 800774c:	0800aee8 	.word	0x0800aee8
 8007750:	7ff00000 	.word	0x7ff00000
 8007754:	0800aecd 	.word	0x0800aecd
 8007758:	0800aec4 	.word	0x0800aec4
 800775c:	0800aea1 	.word	0x0800aea1
 8007760:	3ff80000 	.word	0x3ff80000
 8007764:	0800afe0 	.word	0x0800afe0
 8007768:	0800af47 	.word	0x0800af47
 800776c:	2301      	movs	r3, #1
 800776e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007770:	e7d4      	b.n	800771c <_dtoa_r+0x2b4>
 8007772:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007776:	465b      	mov	r3, fp
 8007778:	f8cd b008 	str.w	fp, [sp, #8]
 800777c:	e7a6      	b.n	80076cc <_dtoa_r+0x264>
 800777e:	3101      	adds	r1, #1
 8007780:	6041      	str	r1, [r0, #4]
 8007782:	0052      	lsls	r2, r2, #1
 8007784:	e7a6      	b.n	80076d4 <_dtoa_r+0x26c>
 8007786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007788:	9a08      	ldr	r2, [sp, #32]
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	9b02      	ldr	r3, [sp, #8]
 800778e:	2b0e      	cmp	r3, #14
 8007790:	f200 80a8 	bhi.w	80078e4 <_dtoa_r+0x47c>
 8007794:	2c00      	cmp	r4, #0
 8007796:	f000 80a5 	beq.w	80078e4 <_dtoa_r+0x47c>
 800779a:	f1b9 0f00 	cmp.w	r9, #0
 800779e:	dd34      	ble.n	800780a <_dtoa_r+0x3a2>
 80077a0:	4a9a      	ldr	r2, [pc, #616]	; (8007a0c <_dtoa_r+0x5a4>)
 80077a2:	f009 030f 	and.w	r3, r9, #15
 80077a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80077ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80077b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80077ba:	d016      	beq.n	80077ea <_dtoa_r+0x382>
 80077bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077c0:	4b93      	ldr	r3, [pc, #588]	; (8007a10 <_dtoa_r+0x5a8>)
 80077c2:	2703      	movs	r7, #3
 80077c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077c8:	f7f8 ffb0 	bl	800072c <__aeabi_ddiv>
 80077cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077d0:	f004 040f 	and.w	r4, r4, #15
 80077d4:	4e8e      	ldr	r6, [pc, #568]	; (8007a10 <_dtoa_r+0x5a8>)
 80077d6:	b954      	cbnz	r4, 80077ee <_dtoa_r+0x386>
 80077d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077e0:	f7f8 ffa4 	bl	800072c <__aeabi_ddiv>
 80077e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077e8:	e029      	b.n	800783e <_dtoa_r+0x3d6>
 80077ea:	2702      	movs	r7, #2
 80077ec:	e7f2      	b.n	80077d4 <_dtoa_r+0x36c>
 80077ee:	07e1      	lsls	r1, r4, #31
 80077f0:	d508      	bpl.n	8007804 <_dtoa_r+0x39c>
 80077f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077fa:	f7f8 fe6d 	bl	80004d8 <__aeabi_dmul>
 80077fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007802:	3701      	adds	r7, #1
 8007804:	1064      	asrs	r4, r4, #1
 8007806:	3608      	adds	r6, #8
 8007808:	e7e5      	b.n	80077d6 <_dtoa_r+0x36e>
 800780a:	f000 80a5 	beq.w	8007958 <_dtoa_r+0x4f0>
 800780e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007812:	f1c9 0400 	rsb	r4, r9, #0
 8007816:	4b7d      	ldr	r3, [pc, #500]	; (8007a0c <_dtoa_r+0x5a4>)
 8007818:	f004 020f 	and.w	r2, r4, #15
 800781c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f7f8 fe58 	bl	80004d8 <__aeabi_dmul>
 8007828:	2702      	movs	r7, #2
 800782a:	2300      	movs	r3, #0
 800782c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007830:	4e77      	ldr	r6, [pc, #476]	; (8007a10 <_dtoa_r+0x5a8>)
 8007832:	1124      	asrs	r4, r4, #4
 8007834:	2c00      	cmp	r4, #0
 8007836:	f040 8084 	bne.w	8007942 <_dtoa_r+0x4da>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1d2      	bne.n	80077e4 <_dtoa_r+0x37c>
 800783e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 808b 	beq.w	800795c <_dtoa_r+0x4f4>
 8007846:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800784a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800784e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007852:	2200      	movs	r2, #0
 8007854:	4b6f      	ldr	r3, [pc, #444]	; (8007a14 <_dtoa_r+0x5ac>)
 8007856:	f7f9 f8b1 	bl	80009bc <__aeabi_dcmplt>
 800785a:	2800      	cmp	r0, #0
 800785c:	d07e      	beq.n	800795c <_dtoa_r+0x4f4>
 800785e:	9b02      	ldr	r3, [sp, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d07b      	beq.n	800795c <_dtoa_r+0x4f4>
 8007864:	f1bb 0f00 	cmp.w	fp, #0
 8007868:	dd38      	ble.n	80078dc <_dtoa_r+0x474>
 800786a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800786e:	2200      	movs	r2, #0
 8007870:	4b69      	ldr	r3, [pc, #420]	; (8007a18 <_dtoa_r+0x5b0>)
 8007872:	f7f8 fe31 	bl	80004d8 <__aeabi_dmul>
 8007876:	465c      	mov	r4, fp
 8007878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800787c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8007880:	3701      	adds	r7, #1
 8007882:	4638      	mov	r0, r7
 8007884:	f7f8 fdbe 	bl	8000404 <__aeabi_i2d>
 8007888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800788c:	f7f8 fe24 	bl	80004d8 <__aeabi_dmul>
 8007890:	2200      	movs	r2, #0
 8007892:	4b62      	ldr	r3, [pc, #392]	; (8007a1c <_dtoa_r+0x5b4>)
 8007894:	f7f8 fc6a 	bl	800016c <__adddf3>
 8007898:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800789c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078a0:	9611      	str	r6, [sp, #68]	; 0x44
 80078a2:	2c00      	cmp	r4, #0
 80078a4:	d15d      	bne.n	8007962 <_dtoa_r+0x4fa>
 80078a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078aa:	2200      	movs	r2, #0
 80078ac:	4b5c      	ldr	r3, [pc, #368]	; (8007a20 <_dtoa_r+0x5b8>)
 80078ae:	f7f8 fc5b 	bl	8000168 <__aeabi_dsub>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078ba:	4633      	mov	r3, r6
 80078bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078be:	f7f9 f89b 	bl	80009f8 <__aeabi_dcmpgt>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	f040 829e 	bne.w	8007e04 <_dtoa_r+0x99c>
 80078c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80078d2:	f7f9 f873 	bl	80009bc <__aeabi_dcmplt>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f040 8292 	bne.w	8007e00 <_dtoa_r+0x998>
 80078dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80078e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80078e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f2c0 8153 	blt.w	8007b92 <_dtoa_r+0x72a>
 80078ec:	f1b9 0f0e 	cmp.w	r9, #14
 80078f0:	f300 814f 	bgt.w	8007b92 <_dtoa_r+0x72a>
 80078f4:	4b45      	ldr	r3, [pc, #276]	; (8007a0c <_dtoa_r+0x5a4>)
 80078f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80078fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007902:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f280 80db 	bge.w	8007ac0 <_dtoa_r+0x658>
 800790a:	9b02      	ldr	r3, [sp, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f300 80d7 	bgt.w	8007ac0 <_dtoa_r+0x658>
 8007912:	f040 8274 	bne.w	8007dfe <_dtoa_r+0x996>
 8007916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800791a:	2200      	movs	r2, #0
 800791c:	4b40      	ldr	r3, [pc, #256]	; (8007a20 <_dtoa_r+0x5b8>)
 800791e:	f7f8 fddb 	bl	80004d8 <__aeabi_dmul>
 8007922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007926:	f7f9 f85d 	bl	80009e4 <__aeabi_dcmpge>
 800792a:	9c02      	ldr	r4, [sp, #8]
 800792c:	4626      	mov	r6, r4
 800792e:	2800      	cmp	r0, #0
 8007930:	f040 824a 	bne.w	8007dc8 <_dtoa_r+0x960>
 8007934:	2331      	movs	r3, #49	; 0x31
 8007936:	9f08      	ldr	r7, [sp, #32]
 8007938:	f109 0901 	add.w	r9, r9, #1
 800793c:	f807 3b01 	strb.w	r3, [r7], #1
 8007940:	e246      	b.n	8007dd0 <_dtoa_r+0x968>
 8007942:	07e2      	lsls	r2, r4, #31
 8007944:	d505      	bpl.n	8007952 <_dtoa_r+0x4ea>
 8007946:	e9d6 2300 	ldrd	r2, r3, [r6]
 800794a:	f7f8 fdc5 	bl	80004d8 <__aeabi_dmul>
 800794e:	2301      	movs	r3, #1
 8007950:	3701      	adds	r7, #1
 8007952:	1064      	asrs	r4, r4, #1
 8007954:	3608      	adds	r6, #8
 8007956:	e76d      	b.n	8007834 <_dtoa_r+0x3cc>
 8007958:	2702      	movs	r7, #2
 800795a:	e770      	b.n	800783e <_dtoa_r+0x3d6>
 800795c:	46c8      	mov	r8, r9
 800795e:	9c02      	ldr	r4, [sp, #8]
 8007960:	e78f      	b.n	8007882 <_dtoa_r+0x41a>
 8007962:	9908      	ldr	r1, [sp, #32]
 8007964:	4b29      	ldr	r3, [pc, #164]	; (8007a0c <_dtoa_r+0x5a4>)
 8007966:	4421      	add	r1, r4
 8007968:	9112      	str	r1, [sp, #72]	; 0x48
 800796a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800796c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007970:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007974:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007978:	2900      	cmp	r1, #0
 800797a:	d055      	beq.n	8007a28 <_dtoa_r+0x5c0>
 800797c:	2000      	movs	r0, #0
 800797e:	4929      	ldr	r1, [pc, #164]	; (8007a24 <_dtoa_r+0x5bc>)
 8007980:	f7f8 fed4 	bl	800072c <__aeabi_ddiv>
 8007984:	463b      	mov	r3, r7
 8007986:	4632      	mov	r2, r6
 8007988:	f7f8 fbee 	bl	8000168 <__aeabi_dsub>
 800798c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007990:	9f08      	ldr	r7, [sp, #32]
 8007992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007996:	f7f9 f84f 	bl	8000a38 <__aeabi_d2iz>
 800799a:	4604      	mov	r4, r0
 800799c:	f7f8 fd32 	bl	8000404 <__aeabi_i2d>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079a8:	f7f8 fbde 	bl	8000168 <__aeabi_dsub>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	3430      	adds	r4, #48	; 0x30
 80079b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079ba:	f807 4b01 	strb.w	r4, [r7], #1
 80079be:	f7f8 fffd 	bl	80009bc <__aeabi_dcmplt>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d174      	bne.n	8007ab0 <_dtoa_r+0x648>
 80079c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079ca:	2000      	movs	r0, #0
 80079cc:	4911      	ldr	r1, [pc, #68]	; (8007a14 <_dtoa_r+0x5ac>)
 80079ce:	f7f8 fbcb 	bl	8000168 <__aeabi_dsub>
 80079d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079d6:	f7f8 fff1 	bl	80009bc <__aeabi_dcmplt>
 80079da:	2800      	cmp	r0, #0
 80079dc:	f040 80b6 	bne.w	8007b4c <_dtoa_r+0x6e4>
 80079e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079e2:	429f      	cmp	r7, r3
 80079e4:	f43f af7a 	beq.w	80078dc <_dtoa_r+0x474>
 80079e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079ec:	2200      	movs	r2, #0
 80079ee:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <_dtoa_r+0x5b0>)
 80079f0:	f7f8 fd72 	bl	80004d8 <__aeabi_dmul>
 80079f4:	2200      	movs	r2, #0
 80079f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079fe:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <_dtoa_r+0x5b0>)
 8007a00:	f7f8 fd6a 	bl	80004d8 <__aeabi_dmul>
 8007a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a08:	e7c3      	b.n	8007992 <_dtoa_r+0x52a>
 8007a0a:	bf00      	nop
 8007a0c:	0800afe0 	.word	0x0800afe0
 8007a10:	0800afb8 	.word	0x0800afb8
 8007a14:	3ff00000 	.word	0x3ff00000
 8007a18:	40240000 	.word	0x40240000
 8007a1c:	401c0000 	.word	0x401c0000
 8007a20:	40140000 	.word	0x40140000
 8007a24:	3fe00000 	.word	0x3fe00000
 8007a28:	4630      	mov	r0, r6
 8007a2a:	4639      	mov	r1, r7
 8007a2c:	f7f8 fd54 	bl	80004d8 <__aeabi_dmul>
 8007a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a36:	9c08      	ldr	r4, [sp, #32]
 8007a38:	9314      	str	r3, [sp, #80]	; 0x50
 8007a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a3e:	f7f8 fffb 	bl	8000a38 <__aeabi_d2iz>
 8007a42:	9015      	str	r0, [sp, #84]	; 0x54
 8007a44:	f7f8 fcde 	bl	8000404 <__aeabi_i2d>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a50:	f7f8 fb8a 	bl	8000168 <__aeabi_dsub>
 8007a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a56:	4606      	mov	r6, r0
 8007a58:	3330      	adds	r3, #48	; 0x30
 8007a5a:	f804 3b01 	strb.w	r3, [r4], #1
 8007a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a60:	460f      	mov	r7, r1
 8007a62:	429c      	cmp	r4, r3
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	d124      	bne.n	8007ab4 <_dtoa_r+0x64c>
 8007a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a6e:	4bb3      	ldr	r3, [pc, #716]	; (8007d3c <_dtoa_r+0x8d4>)
 8007a70:	f7f8 fb7c 	bl	800016c <__adddf3>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f8 ffbc 	bl	80009f8 <__aeabi_dcmpgt>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d162      	bne.n	8007b4a <_dtoa_r+0x6e2>
 8007a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a88:	2000      	movs	r0, #0
 8007a8a:	49ac      	ldr	r1, [pc, #688]	; (8007d3c <_dtoa_r+0x8d4>)
 8007a8c:	f7f8 fb6c 	bl	8000168 <__aeabi_dsub>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4630      	mov	r0, r6
 8007a96:	4639      	mov	r1, r7
 8007a98:	f7f8 ff90 	bl	80009bc <__aeabi_dcmplt>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f43f af1d 	beq.w	80078dc <_dtoa_r+0x474>
 8007aa2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007aa4:	1e7b      	subs	r3, r7, #1
 8007aa6:	9314      	str	r3, [sp, #80]	; 0x50
 8007aa8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007aac:	2b30      	cmp	r3, #48	; 0x30
 8007aae:	d0f8      	beq.n	8007aa2 <_dtoa_r+0x63a>
 8007ab0:	46c1      	mov	r9, r8
 8007ab2:	e03a      	b.n	8007b2a <_dtoa_r+0x6c2>
 8007ab4:	4ba2      	ldr	r3, [pc, #648]	; (8007d40 <_dtoa_r+0x8d8>)
 8007ab6:	f7f8 fd0f 	bl	80004d8 <__aeabi_dmul>
 8007aba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007abe:	e7bc      	b.n	8007a3a <_dtoa_r+0x5d2>
 8007ac0:	9f08      	ldr	r7, [sp, #32]
 8007ac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aca:	f7f8 fe2f 	bl	800072c <__aeabi_ddiv>
 8007ace:	f7f8 ffb3 	bl	8000a38 <__aeabi_d2iz>
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	f7f8 fc96 	bl	8000404 <__aeabi_i2d>
 8007ad8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007adc:	f7f8 fcfc 	bl	80004d8 <__aeabi_dmul>
 8007ae0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aec:	f7f8 fb3c 	bl	8000168 <__aeabi_dsub>
 8007af0:	f807 6b01 	strb.w	r6, [r7], #1
 8007af4:	9e08      	ldr	r6, [sp, #32]
 8007af6:	9b02      	ldr	r3, [sp, #8]
 8007af8:	1bbe      	subs	r6, r7, r6
 8007afa:	42b3      	cmp	r3, r6
 8007afc:	d13a      	bne.n	8007b74 <_dtoa_r+0x70c>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	f7f8 fb33 	bl	800016c <__adddf3>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b12:	f7f8 ff71 	bl	80009f8 <__aeabi_dcmpgt>
 8007b16:	bb58      	cbnz	r0, 8007b70 <_dtoa_r+0x708>
 8007b18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b20:	f7f8 ff42 	bl	80009a8 <__aeabi_dcmpeq>
 8007b24:	b108      	cbz	r0, 8007b2a <_dtoa_r+0x6c2>
 8007b26:	07e1      	lsls	r1, r4, #31
 8007b28:	d422      	bmi.n	8007b70 <_dtoa_r+0x708>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	4651      	mov	r1, sl
 8007b2e:	f000 faf1 	bl	8008114 <_Bfree>
 8007b32:	2300      	movs	r3, #0
 8007b34:	703b      	strb	r3, [r7, #0]
 8007b36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b38:	f109 0001 	add.w	r0, r9, #1
 8007b3c:	6018      	str	r0, [r3, #0]
 8007b3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f43f acdf 	beq.w	8007504 <_dtoa_r+0x9c>
 8007b46:	601f      	str	r7, [r3, #0]
 8007b48:	e4dc      	b.n	8007504 <_dtoa_r+0x9c>
 8007b4a:	4627      	mov	r7, r4
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	461f      	mov	r7, r3
 8007b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b54:	2a39      	cmp	r2, #57	; 0x39
 8007b56:	d107      	bne.n	8007b68 <_dtoa_r+0x700>
 8007b58:	9a08      	ldr	r2, [sp, #32]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d1f7      	bne.n	8007b4e <_dtoa_r+0x6e6>
 8007b5e:	2230      	movs	r2, #48	; 0x30
 8007b60:	9908      	ldr	r1, [sp, #32]
 8007b62:	f108 0801 	add.w	r8, r8, #1
 8007b66:	700a      	strb	r2, [r1, #0]
 8007b68:	781a      	ldrb	r2, [r3, #0]
 8007b6a:	3201      	adds	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	e79f      	b.n	8007ab0 <_dtoa_r+0x648>
 8007b70:	46c8      	mov	r8, r9
 8007b72:	e7eb      	b.n	8007b4c <_dtoa_r+0x6e4>
 8007b74:	2200      	movs	r2, #0
 8007b76:	4b72      	ldr	r3, [pc, #456]	; (8007d40 <_dtoa_r+0x8d8>)
 8007b78:	f7f8 fcae 	bl	80004d8 <__aeabi_dmul>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	f7f8 ff0e 	bl	80009a8 <__aeabi_dcmpeq>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d098      	beq.n	8007ac2 <_dtoa_r+0x65a>
 8007b90:	e7cb      	b.n	8007b2a <_dtoa_r+0x6c2>
 8007b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b94:	2a00      	cmp	r2, #0
 8007b96:	f000 80cd 	beq.w	8007d34 <_dtoa_r+0x8cc>
 8007b9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b9c:	2a01      	cmp	r2, #1
 8007b9e:	f300 80af 	bgt.w	8007d00 <_dtoa_r+0x898>
 8007ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	f000 80a7 	beq.w	8007cf8 <_dtoa_r+0x890>
 8007baa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bb0:	9f06      	ldr	r7, [sp, #24]
 8007bb2:	9a06      	ldr	r2, [sp, #24]
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	441a      	add	r2, r3
 8007bb8:	9206      	str	r2, [sp, #24]
 8007bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	441a      	add	r2, r3
 8007bc0:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc2:	f000 fb61 	bl	8008288 <__i2b>
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	2f00      	cmp	r7, #0
 8007bca:	dd0c      	ble.n	8007be6 <_dtoa_r+0x77e>
 8007bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dd09      	ble.n	8007be6 <_dtoa_r+0x77e>
 8007bd2:	42bb      	cmp	r3, r7
 8007bd4:	bfa8      	it	ge
 8007bd6:	463b      	movge	r3, r7
 8007bd8:	9a06      	ldr	r2, [sp, #24]
 8007bda:	1aff      	subs	r7, r7, r3
 8007bdc:	1ad2      	subs	r2, r2, r3
 8007bde:	9206      	str	r2, [sp, #24]
 8007be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	9309      	str	r3, [sp, #36]	; 0x24
 8007be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be8:	b1f3      	cbz	r3, 8007c28 <_dtoa_r+0x7c0>
 8007bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 80a9 	beq.w	8007d44 <_dtoa_r+0x8dc>
 8007bf2:	2c00      	cmp	r4, #0
 8007bf4:	dd10      	ble.n	8007c18 <_dtoa_r+0x7b0>
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 fbfe 	bl	80083fc <__pow5mult>
 8007c00:	4652      	mov	r2, sl
 8007c02:	4601      	mov	r1, r0
 8007c04:	4606      	mov	r6, r0
 8007c06:	4628      	mov	r0, r5
 8007c08:	f000 fb54 	bl	80082b4 <__multiply>
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4651      	mov	r1, sl
 8007c10:	4628      	mov	r0, r5
 8007c12:	f000 fa7f 	bl	8008114 <_Bfree>
 8007c16:	46c2      	mov	sl, r8
 8007c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1a:	1b1a      	subs	r2, r3, r4
 8007c1c:	d004      	beq.n	8007c28 <_dtoa_r+0x7c0>
 8007c1e:	4651      	mov	r1, sl
 8007c20:	4628      	mov	r0, r5
 8007c22:	f000 fbeb 	bl	80083fc <__pow5mult>
 8007c26:	4682      	mov	sl, r0
 8007c28:	2101      	movs	r1, #1
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f000 fb2c 	bl	8008288 <__i2b>
 8007c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c32:	4604      	mov	r4, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f340 8087 	ble.w	8007d48 <_dtoa_r+0x8e0>
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4601      	mov	r1, r0
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 fbdc 	bl	80083fc <__pow5mult>
 8007c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c46:	4604      	mov	r4, r0
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	f340 8080 	ble.w	8007d4e <_dtoa_r+0x8e6>
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c58:	6918      	ldr	r0, [r3, #16]
 8007c5a:	f000 fac7 	bl	80081ec <__hi0bits>
 8007c5e:	f1c0 0020 	rsb	r0, r0, #32
 8007c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c64:	4418      	add	r0, r3
 8007c66:	f010 001f 	ands.w	r0, r0, #31
 8007c6a:	f000 8092 	beq.w	8007d92 <_dtoa_r+0x92a>
 8007c6e:	f1c0 0320 	rsb	r3, r0, #32
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	f340 808a 	ble.w	8007d8c <_dtoa_r+0x924>
 8007c78:	f1c0 001c 	rsb	r0, r0, #28
 8007c7c:	9b06      	ldr	r3, [sp, #24]
 8007c7e:	4407      	add	r7, r0
 8007c80:	4403      	add	r3, r0
 8007c82:	9306      	str	r3, [sp, #24]
 8007c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c86:	4403      	add	r3, r0
 8007c88:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8a:	9b06      	ldr	r3, [sp, #24]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dd05      	ble.n	8007c9c <_dtoa_r+0x834>
 8007c90:	4651      	mov	r1, sl
 8007c92:	461a      	mov	r2, r3
 8007c94:	4628      	mov	r0, r5
 8007c96:	f000 fc0b 	bl	80084b0 <__lshift>
 8007c9a:	4682      	mov	sl, r0
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	dd05      	ble.n	8007cae <_dtoa_r+0x846>
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 fc02 	bl	80084b0 <__lshift>
 8007cac:	4604      	mov	r4, r0
 8007cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d070      	beq.n	8007d96 <_dtoa_r+0x92e>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4650      	mov	r0, sl
 8007cb8:	f000 fc66 	bl	8008588 <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	da6a      	bge.n	8007d96 <_dtoa_r+0x92e>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4651      	mov	r1, sl
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 fa46 	bl	8008158 <__multadd>
 8007ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cce:	4682      	mov	sl, r0
 8007cd0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 8193 	beq.w	8008000 <_dtoa_r+0xb98>
 8007cda:	4631      	mov	r1, r6
 8007cdc:	2300      	movs	r3, #0
 8007cde:	220a      	movs	r2, #10
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 fa39 	bl	8008158 <__multadd>
 8007ce6:	f1bb 0f00 	cmp.w	fp, #0
 8007cea:	4606      	mov	r6, r0
 8007cec:	f300 8093 	bgt.w	8007e16 <_dtoa_r+0x9ae>
 8007cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	dc57      	bgt.n	8007da6 <_dtoa_r+0x93e>
 8007cf6:	e08e      	b.n	8007e16 <_dtoa_r+0x9ae>
 8007cf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007cfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cfe:	e756      	b.n	8007bae <_dtoa_r+0x746>
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	1e5c      	subs	r4, r3, #1
 8007d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	bfb7      	itett	lt
 8007d0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d0c:	1b1c      	subge	r4, r3, r4
 8007d0e:	1ae2      	sublt	r2, r4, r3
 8007d10:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007d12:	bfbe      	ittt	lt
 8007d14:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007d16:	189b      	addlt	r3, r3, r2
 8007d18:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007d1a:	9b02      	ldr	r3, [sp, #8]
 8007d1c:	bfb8      	it	lt
 8007d1e:	2400      	movlt	r4, #0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bfbb      	ittet	lt
 8007d24:	9b06      	ldrlt	r3, [sp, #24]
 8007d26:	9a02      	ldrlt	r2, [sp, #8]
 8007d28:	9f06      	ldrge	r7, [sp, #24]
 8007d2a:	1a9f      	sublt	r7, r3, r2
 8007d2c:	bfac      	ite	ge
 8007d2e:	9b02      	ldrge	r3, [sp, #8]
 8007d30:	2300      	movlt	r3, #0
 8007d32:	e73e      	b.n	8007bb2 <_dtoa_r+0x74a>
 8007d34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d36:	9f06      	ldr	r7, [sp, #24]
 8007d38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007d3a:	e745      	b.n	8007bc8 <_dtoa_r+0x760>
 8007d3c:	3fe00000 	.word	0x3fe00000
 8007d40:	40240000 	.word	0x40240000
 8007d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d46:	e76a      	b.n	8007c1e <_dtoa_r+0x7b6>
 8007d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	dc19      	bgt.n	8007d82 <_dtoa_r+0x91a>
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	b9bb      	cbnz	r3, 8007d82 <_dtoa_r+0x91a>
 8007d52:	9b05      	ldr	r3, [sp, #20]
 8007d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d58:	b99b      	cbnz	r3, 8007d82 <_dtoa_r+0x91a>
 8007d5a:	9b05      	ldr	r3, [sp, #20]
 8007d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d60:	0d1b      	lsrs	r3, r3, #20
 8007d62:	051b      	lsls	r3, r3, #20
 8007d64:	b183      	cbz	r3, 8007d88 <_dtoa_r+0x920>
 8007d66:	f04f 0801 	mov.w	r8, #1
 8007d6a:	9b06      	ldr	r3, [sp, #24]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	9306      	str	r3, [sp, #24]
 8007d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d72:	3301      	adds	r3, #1
 8007d74:	9309      	str	r3, [sp, #36]	; 0x24
 8007d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f47f af6a 	bne.w	8007c52 <_dtoa_r+0x7ea>
 8007d7e:	2001      	movs	r0, #1
 8007d80:	e76f      	b.n	8007c62 <_dtoa_r+0x7fa>
 8007d82:	f04f 0800 	mov.w	r8, #0
 8007d86:	e7f6      	b.n	8007d76 <_dtoa_r+0x90e>
 8007d88:	4698      	mov	r8, r3
 8007d8a:	e7f4      	b.n	8007d76 <_dtoa_r+0x90e>
 8007d8c:	f43f af7d 	beq.w	8007c8a <_dtoa_r+0x822>
 8007d90:	4618      	mov	r0, r3
 8007d92:	301c      	adds	r0, #28
 8007d94:	e772      	b.n	8007c7c <_dtoa_r+0x814>
 8007d96:	9b02      	ldr	r3, [sp, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dc36      	bgt.n	8007e0a <_dtoa_r+0x9a2>
 8007d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	dd33      	ble.n	8007e0a <_dtoa_r+0x9a2>
 8007da2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007da6:	f1bb 0f00 	cmp.w	fp, #0
 8007daa:	d10d      	bne.n	8007dc8 <_dtoa_r+0x960>
 8007dac:	4621      	mov	r1, r4
 8007dae:	465b      	mov	r3, fp
 8007db0:	2205      	movs	r2, #5
 8007db2:	4628      	mov	r0, r5
 8007db4:	f000 f9d0 	bl	8008158 <__multadd>
 8007db8:	4601      	mov	r1, r0
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	f000 fbe3 	bl	8008588 <__mcmp>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f73f adb6 	bgt.w	8007934 <_dtoa_r+0x4cc>
 8007dc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007dca:	9f08      	ldr	r7, [sp, #32]
 8007dcc:	ea6f 0903 	mvn.w	r9, r3
 8007dd0:	f04f 0800 	mov.w	r8, #0
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f99c 	bl	8008114 <_Bfree>
 8007ddc:	2e00      	cmp	r6, #0
 8007dde:	f43f aea4 	beq.w	8007b2a <_dtoa_r+0x6c2>
 8007de2:	f1b8 0f00 	cmp.w	r8, #0
 8007de6:	d005      	beq.n	8007df4 <_dtoa_r+0x98c>
 8007de8:	45b0      	cmp	r8, r6
 8007dea:	d003      	beq.n	8007df4 <_dtoa_r+0x98c>
 8007dec:	4641      	mov	r1, r8
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 f990 	bl	8008114 <_Bfree>
 8007df4:	4631      	mov	r1, r6
 8007df6:	4628      	mov	r0, r5
 8007df8:	f000 f98c 	bl	8008114 <_Bfree>
 8007dfc:	e695      	b.n	8007b2a <_dtoa_r+0x6c2>
 8007dfe:	2400      	movs	r4, #0
 8007e00:	4626      	mov	r6, r4
 8007e02:	e7e1      	b.n	8007dc8 <_dtoa_r+0x960>
 8007e04:	46c1      	mov	r9, r8
 8007e06:	4626      	mov	r6, r4
 8007e08:	e594      	b.n	8007934 <_dtoa_r+0x4cc>
 8007e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e0c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 80fc 	beq.w	800800e <_dtoa_r+0xba6>
 8007e16:	2f00      	cmp	r7, #0
 8007e18:	dd05      	ble.n	8007e26 <_dtoa_r+0x9be>
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	463a      	mov	r2, r7
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f000 fb46 	bl	80084b0 <__lshift>
 8007e24:	4606      	mov	r6, r0
 8007e26:	f1b8 0f00 	cmp.w	r8, #0
 8007e2a:	d05c      	beq.n	8007ee6 <_dtoa_r+0xa7e>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	6871      	ldr	r1, [r6, #4]
 8007e30:	f000 f930 	bl	8008094 <_Balloc>
 8007e34:	4607      	mov	r7, r0
 8007e36:	b928      	cbnz	r0, 8007e44 <_dtoa_r+0x9dc>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e3e:	4b7e      	ldr	r3, [pc, #504]	; (8008038 <_dtoa_r+0xbd0>)
 8007e40:	f7ff bb26 	b.w	8007490 <_dtoa_r+0x28>
 8007e44:	6932      	ldr	r2, [r6, #16]
 8007e46:	f106 010c 	add.w	r1, r6, #12
 8007e4a:	3202      	adds	r2, #2
 8007e4c:	0092      	lsls	r2, r2, #2
 8007e4e:	300c      	adds	r0, #12
 8007e50:	f000 f912 	bl	8008078 <memcpy>
 8007e54:	2201      	movs	r2, #1
 8007e56:	4639      	mov	r1, r7
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f000 fb29 	bl	80084b0 <__lshift>
 8007e5e:	46b0      	mov	r8, r6
 8007e60:	4606      	mov	r6, r0
 8007e62:	9b08      	ldr	r3, [sp, #32]
 8007e64:	3301      	adds	r3, #1
 8007e66:	9302      	str	r3, [sp, #8]
 8007e68:	9b08      	ldr	r3, [sp, #32]
 8007e6a:	445b      	add	r3, fp
 8007e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e6e:	9b04      	ldr	r3, [sp, #16]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	9309      	str	r3, [sp, #36]	; 0x24
 8007e76:	9b02      	ldr	r3, [sp, #8]
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007e80:	f7ff fa64 	bl	800734c <quorem>
 8007e84:	4603      	mov	r3, r0
 8007e86:	4641      	mov	r1, r8
 8007e88:	3330      	adds	r3, #48	; 0x30
 8007e8a:	9004      	str	r0, [sp, #16]
 8007e8c:	4650      	mov	r0, sl
 8007e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e90:	f000 fb7a 	bl	8008588 <__mcmp>
 8007e94:	4632      	mov	r2, r6
 8007e96:	9006      	str	r0, [sp, #24]
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f000 fb90 	bl	80085c0 <__mdiff>
 8007ea0:	68c2      	ldr	r2, [r0, #12]
 8007ea2:	4607      	mov	r7, r0
 8007ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea6:	bb02      	cbnz	r2, 8007eea <_dtoa_r+0xa82>
 8007ea8:	4601      	mov	r1, r0
 8007eaa:	4650      	mov	r0, sl
 8007eac:	f000 fb6c 	bl	8008588 <__mcmp>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eb4:	4639      	mov	r1, r7
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007ebc:	f000 f92a 	bl	8008114 <_Bfree>
 8007ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ec4:	9f02      	ldr	r7, [sp, #8]
 8007ec6:	ea43 0102 	orr.w	r1, r3, r2
 8007eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed0:	d10d      	bne.n	8007eee <_dtoa_r+0xa86>
 8007ed2:	2b39      	cmp	r3, #57	; 0x39
 8007ed4:	d027      	beq.n	8007f26 <_dtoa_r+0xabe>
 8007ed6:	9a06      	ldr	r2, [sp, #24]
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	dd01      	ble.n	8007ee0 <_dtoa_r+0xa78>
 8007edc:	9b04      	ldr	r3, [sp, #16]
 8007ede:	3331      	adds	r3, #49	; 0x31
 8007ee0:	f88b 3000 	strb.w	r3, [fp]
 8007ee4:	e776      	b.n	8007dd4 <_dtoa_r+0x96c>
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	e7b9      	b.n	8007e5e <_dtoa_r+0x9f6>
 8007eea:	2201      	movs	r2, #1
 8007eec:	e7e2      	b.n	8007eb4 <_dtoa_r+0xa4c>
 8007eee:	9906      	ldr	r1, [sp, #24]
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	db04      	blt.n	8007efe <_dtoa_r+0xa96>
 8007ef4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007ef6:	4301      	orrs	r1, r0
 8007ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007efa:	4301      	orrs	r1, r0
 8007efc:	d120      	bne.n	8007f40 <_dtoa_r+0xad8>
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	ddee      	ble.n	8007ee0 <_dtoa_r+0xa78>
 8007f02:	4651      	mov	r1, sl
 8007f04:	2201      	movs	r2, #1
 8007f06:	4628      	mov	r0, r5
 8007f08:	9302      	str	r3, [sp, #8]
 8007f0a:	f000 fad1 	bl	80084b0 <__lshift>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4682      	mov	sl, r0
 8007f12:	f000 fb39 	bl	8008588 <__mcmp>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	9b02      	ldr	r3, [sp, #8]
 8007f1a:	dc02      	bgt.n	8007f22 <_dtoa_r+0xaba>
 8007f1c:	d1e0      	bne.n	8007ee0 <_dtoa_r+0xa78>
 8007f1e:	07da      	lsls	r2, r3, #31
 8007f20:	d5de      	bpl.n	8007ee0 <_dtoa_r+0xa78>
 8007f22:	2b39      	cmp	r3, #57	; 0x39
 8007f24:	d1da      	bne.n	8007edc <_dtoa_r+0xa74>
 8007f26:	2339      	movs	r3, #57	; 0x39
 8007f28:	f88b 3000 	strb.w	r3, [fp]
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	461f      	mov	r7, r3
 8007f30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	2a39      	cmp	r2, #57	; 0x39
 8007f38:	d050      	beq.n	8007fdc <_dtoa_r+0xb74>
 8007f3a:	3201      	adds	r2, #1
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	e749      	b.n	8007dd4 <_dtoa_r+0x96c>
 8007f40:	2a00      	cmp	r2, #0
 8007f42:	dd03      	ble.n	8007f4c <_dtoa_r+0xae4>
 8007f44:	2b39      	cmp	r3, #57	; 0x39
 8007f46:	d0ee      	beq.n	8007f26 <_dtoa_r+0xabe>
 8007f48:	3301      	adds	r3, #1
 8007f4a:	e7c9      	b.n	8007ee0 <_dtoa_r+0xa78>
 8007f4c:	9a02      	ldr	r2, [sp, #8]
 8007f4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f54:	428a      	cmp	r2, r1
 8007f56:	d02a      	beq.n	8007fae <_dtoa_r+0xb46>
 8007f58:	4651      	mov	r1, sl
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	220a      	movs	r2, #10
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f000 f8fa 	bl	8008158 <__multadd>
 8007f64:	45b0      	cmp	r8, r6
 8007f66:	4682      	mov	sl, r0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	f04f 020a 	mov.w	r2, #10
 8007f70:	4641      	mov	r1, r8
 8007f72:	4628      	mov	r0, r5
 8007f74:	d107      	bne.n	8007f86 <_dtoa_r+0xb1e>
 8007f76:	f000 f8ef 	bl	8008158 <__multadd>
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	9b02      	ldr	r3, [sp, #8]
 8007f80:	3301      	adds	r3, #1
 8007f82:	9302      	str	r3, [sp, #8]
 8007f84:	e777      	b.n	8007e76 <_dtoa_r+0xa0e>
 8007f86:	f000 f8e7 	bl	8008158 <__multadd>
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	220a      	movs	r2, #10
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f8e0 	bl	8008158 <__multadd>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	e7f0      	b.n	8007f7e <_dtoa_r+0xb16>
 8007f9c:	f1bb 0f00 	cmp.w	fp, #0
 8007fa0:	bfcc      	ite	gt
 8007fa2:	465f      	movgt	r7, fp
 8007fa4:	2701      	movle	r7, #1
 8007fa6:	f04f 0800 	mov.w	r8, #0
 8007faa:	9a08      	ldr	r2, [sp, #32]
 8007fac:	4417      	add	r7, r2
 8007fae:	4651      	mov	r1, sl
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	9302      	str	r3, [sp, #8]
 8007fb6:	f000 fa7b 	bl	80084b0 <__lshift>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4682      	mov	sl, r0
 8007fbe:	f000 fae3 	bl	8008588 <__mcmp>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	dcb2      	bgt.n	8007f2c <_dtoa_r+0xac4>
 8007fc6:	d102      	bne.n	8007fce <_dtoa_r+0xb66>
 8007fc8:	9b02      	ldr	r3, [sp, #8]
 8007fca:	07db      	lsls	r3, r3, #31
 8007fcc:	d4ae      	bmi.n	8007f2c <_dtoa_r+0xac4>
 8007fce:	463b      	mov	r3, r7
 8007fd0:	461f      	mov	r7, r3
 8007fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fd6:	2a30      	cmp	r2, #48	; 0x30
 8007fd8:	d0fa      	beq.n	8007fd0 <_dtoa_r+0xb68>
 8007fda:	e6fb      	b.n	8007dd4 <_dtoa_r+0x96c>
 8007fdc:	9a08      	ldr	r2, [sp, #32]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d1a5      	bne.n	8007f2e <_dtoa_r+0xac6>
 8007fe2:	2331      	movs	r3, #49	; 0x31
 8007fe4:	f109 0901 	add.w	r9, r9, #1
 8007fe8:	7013      	strb	r3, [r2, #0]
 8007fea:	e6f3      	b.n	8007dd4 <_dtoa_r+0x96c>
 8007fec:	4b13      	ldr	r3, [pc, #76]	; (800803c <_dtoa_r+0xbd4>)
 8007fee:	f7ff baa7 	b.w	8007540 <_dtoa_r+0xd8>
 8007ff2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f47f aa80 	bne.w	80074fa <_dtoa_r+0x92>
 8007ffa:	4b11      	ldr	r3, [pc, #68]	; (8008040 <_dtoa_r+0xbd8>)
 8007ffc:	f7ff baa0 	b.w	8007540 <_dtoa_r+0xd8>
 8008000:	f1bb 0f00 	cmp.w	fp, #0
 8008004:	dc03      	bgt.n	800800e <_dtoa_r+0xba6>
 8008006:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008008:	2b02      	cmp	r3, #2
 800800a:	f73f aecc 	bgt.w	8007da6 <_dtoa_r+0x93e>
 800800e:	9f08      	ldr	r7, [sp, #32]
 8008010:	4621      	mov	r1, r4
 8008012:	4650      	mov	r0, sl
 8008014:	f7ff f99a 	bl	800734c <quorem>
 8008018:	9a08      	ldr	r2, [sp, #32]
 800801a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800801e:	f807 3b01 	strb.w	r3, [r7], #1
 8008022:	1aba      	subs	r2, r7, r2
 8008024:	4593      	cmp	fp, r2
 8008026:	ddb9      	ble.n	8007f9c <_dtoa_r+0xb34>
 8008028:	4651      	mov	r1, sl
 800802a:	2300      	movs	r3, #0
 800802c:	220a      	movs	r2, #10
 800802e:	4628      	mov	r0, r5
 8008030:	f000 f892 	bl	8008158 <__multadd>
 8008034:	4682      	mov	sl, r0
 8008036:	e7eb      	b.n	8008010 <_dtoa_r+0xba8>
 8008038:	0800af47 	.word	0x0800af47
 800803c:	0800aea0 	.word	0x0800aea0
 8008040:	0800aec4 	.word	0x0800aec4

08008044 <_localeconv_r>:
 8008044:	4800      	ldr	r0, [pc, #0]	; (8008048 <_localeconv_r+0x4>)
 8008046:	4770      	bx	lr
 8008048:	20000160 	.word	0x20000160

0800804c <malloc>:
 800804c:	4b02      	ldr	r3, [pc, #8]	; (8008058 <malloc+0xc>)
 800804e:	4601      	mov	r1, r0
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	f000 bbfb 	b.w	800884c <_malloc_r>
 8008056:	bf00      	nop
 8008058:	2000000c 	.word	0x2000000c

0800805c <memchr>:
 800805c:	4603      	mov	r3, r0
 800805e:	b510      	push	{r4, lr}
 8008060:	b2c9      	uxtb	r1, r1
 8008062:	4402      	add	r2, r0
 8008064:	4293      	cmp	r3, r2
 8008066:	4618      	mov	r0, r3
 8008068:	d101      	bne.n	800806e <memchr+0x12>
 800806a:	2000      	movs	r0, #0
 800806c:	e003      	b.n	8008076 <memchr+0x1a>
 800806e:	7804      	ldrb	r4, [r0, #0]
 8008070:	3301      	adds	r3, #1
 8008072:	428c      	cmp	r4, r1
 8008074:	d1f6      	bne.n	8008064 <memchr+0x8>
 8008076:	bd10      	pop	{r4, pc}

08008078 <memcpy>:
 8008078:	440a      	add	r2, r1
 800807a:	4291      	cmp	r1, r2
 800807c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008080:	d100      	bne.n	8008084 <memcpy+0xc>
 8008082:	4770      	bx	lr
 8008084:	b510      	push	{r4, lr}
 8008086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800808a:	4291      	cmp	r1, r2
 800808c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008090:	d1f9      	bne.n	8008086 <memcpy+0xe>
 8008092:	bd10      	pop	{r4, pc}

08008094 <_Balloc>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008098:	4604      	mov	r4, r0
 800809a:	460d      	mov	r5, r1
 800809c:	b976      	cbnz	r6, 80080bc <_Balloc+0x28>
 800809e:	2010      	movs	r0, #16
 80080a0:	f7ff ffd4 	bl	800804c <malloc>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6260      	str	r0, [r4, #36]	; 0x24
 80080a8:	b920      	cbnz	r0, 80080b4 <_Balloc+0x20>
 80080aa:	2166      	movs	r1, #102	; 0x66
 80080ac:	4b17      	ldr	r3, [pc, #92]	; (800810c <_Balloc+0x78>)
 80080ae:	4818      	ldr	r0, [pc, #96]	; (8008110 <_Balloc+0x7c>)
 80080b0:	f000 fd92 	bl	8008bd8 <__assert_func>
 80080b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b8:	6006      	str	r6, [r0, #0]
 80080ba:	60c6      	str	r6, [r0, #12]
 80080bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080be:	68f3      	ldr	r3, [r6, #12]
 80080c0:	b183      	cbz	r3, 80080e4 <_Balloc+0x50>
 80080c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ca:	b9b8      	cbnz	r0, 80080fc <_Balloc+0x68>
 80080cc:	2101      	movs	r1, #1
 80080ce:	fa01 f605 	lsl.w	r6, r1, r5
 80080d2:	1d72      	adds	r2, r6, #5
 80080d4:	4620      	mov	r0, r4
 80080d6:	0092      	lsls	r2, r2, #2
 80080d8:	f000 fb5e 	bl	8008798 <_calloc_r>
 80080dc:	b160      	cbz	r0, 80080f8 <_Balloc+0x64>
 80080de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080e2:	e00e      	b.n	8008102 <_Balloc+0x6e>
 80080e4:	2221      	movs	r2, #33	; 0x21
 80080e6:	2104      	movs	r1, #4
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 fb55 	bl	8008798 <_calloc_r>
 80080ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f0:	60f0      	str	r0, [r6, #12]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e4      	bne.n	80080c2 <_Balloc+0x2e>
 80080f8:	2000      	movs	r0, #0
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	6802      	ldr	r2, [r0, #0]
 80080fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008102:	2300      	movs	r3, #0
 8008104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008108:	e7f7      	b.n	80080fa <_Balloc+0x66>
 800810a:	bf00      	nop
 800810c:	0800aed1 	.word	0x0800aed1
 8008110:	0800af58 	.word	0x0800af58

08008114 <_Bfree>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008118:	4605      	mov	r5, r0
 800811a:	460c      	mov	r4, r1
 800811c:	b976      	cbnz	r6, 800813c <_Bfree+0x28>
 800811e:	2010      	movs	r0, #16
 8008120:	f7ff ff94 	bl	800804c <malloc>
 8008124:	4602      	mov	r2, r0
 8008126:	6268      	str	r0, [r5, #36]	; 0x24
 8008128:	b920      	cbnz	r0, 8008134 <_Bfree+0x20>
 800812a:	218a      	movs	r1, #138	; 0x8a
 800812c:	4b08      	ldr	r3, [pc, #32]	; (8008150 <_Bfree+0x3c>)
 800812e:	4809      	ldr	r0, [pc, #36]	; (8008154 <_Bfree+0x40>)
 8008130:	f000 fd52 	bl	8008bd8 <__assert_func>
 8008134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008138:	6006      	str	r6, [r0, #0]
 800813a:	60c6      	str	r6, [r0, #12]
 800813c:	b13c      	cbz	r4, 800814e <_Bfree+0x3a>
 800813e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008140:	6862      	ldr	r2, [r4, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008148:	6021      	str	r1, [r4, #0]
 800814a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	0800aed1 	.word	0x0800aed1
 8008154:	0800af58 	.word	0x0800af58

08008158 <__multadd>:
 8008158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815c:	4698      	mov	r8, r3
 800815e:	460c      	mov	r4, r1
 8008160:	2300      	movs	r3, #0
 8008162:	690e      	ldr	r6, [r1, #16]
 8008164:	4607      	mov	r7, r0
 8008166:	f101 0014 	add.w	r0, r1, #20
 800816a:	6805      	ldr	r5, [r0, #0]
 800816c:	3301      	adds	r3, #1
 800816e:	b2a9      	uxth	r1, r5
 8008170:	fb02 8101 	mla	r1, r2, r1, r8
 8008174:	0c2d      	lsrs	r5, r5, #16
 8008176:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800817a:	fb02 c505 	mla	r5, r2, r5, ip
 800817e:	b289      	uxth	r1, r1
 8008180:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008184:	429e      	cmp	r6, r3
 8008186:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800818a:	f840 1b04 	str.w	r1, [r0], #4
 800818e:	dcec      	bgt.n	800816a <__multadd+0x12>
 8008190:	f1b8 0f00 	cmp.w	r8, #0
 8008194:	d022      	beq.n	80081dc <__multadd+0x84>
 8008196:	68a3      	ldr	r3, [r4, #8]
 8008198:	42b3      	cmp	r3, r6
 800819a:	dc19      	bgt.n	80081d0 <__multadd+0x78>
 800819c:	6861      	ldr	r1, [r4, #4]
 800819e:	4638      	mov	r0, r7
 80081a0:	3101      	adds	r1, #1
 80081a2:	f7ff ff77 	bl	8008094 <_Balloc>
 80081a6:	4605      	mov	r5, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__multadd+0x5e>
 80081aa:	4602      	mov	r2, r0
 80081ac:	21b5      	movs	r1, #181	; 0xb5
 80081ae:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <__multadd+0x8c>)
 80081b0:	480d      	ldr	r0, [pc, #52]	; (80081e8 <__multadd+0x90>)
 80081b2:	f000 fd11 	bl	8008bd8 <__assert_func>
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	f104 010c 	add.w	r1, r4, #12
 80081bc:	3202      	adds	r2, #2
 80081be:	0092      	lsls	r2, r2, #2
 80081c0:	300c      	adds	r0, #12
 80081c2:	f7ff ff59 	bl	8008078 <memcpy>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7ff ffa3 	bl	8008114 <_Bfree>
 80081ce:	462c      	mov	r4, r5
 80081d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80081d4:	3601      	adds	r6, #1
 80081d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80081da:	6126      	str	r6, [r4, #16]
 80081dc:	4620      	mov	r0, r4
 80081de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e2:	bf00      	nop
 80081e4:	0800af47 	.word	0x0800af47
 80081e8:	0800af58 	.word	0x0800af58

080081ec <__hi0bits>:
 80081ec:	0c02      	lsrs	r2, r0, #16
 80081ee:	0412      	lsls	r2, r2, #16
 80081f0:	4603      	mov	r3, r0
 80081f2:	b9ca      	cbnz	r2, 8008228 <__hi0bits+0x3c>
 80081f4:	0403      	lsls	r3, r0, #16
 80081f6:	2010      	movs	r0, #16
 80081f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80081fc:	bf04      	itt	eq
 80081fe:	021b      	lsleq	r3, r3, #8
 8008200:	3008      	addeq	r0, #8
 8008202:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008206:	bf04      	itt	eq
 8008208:	011b      	lsleq	r3, r3, #4
 800820a:	3004      	addeq	r0, #4
 800820c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008210:	bf04      	itt	eq
 8008212:	009b      	lsleq	r3, r3, #2
 8008214:	3002      	addeq	r0, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	db05      	blt.n	8008226 <__hi0bits+0x3a>
 800821a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800821e:	f100 0001 	add.w	r0, r0, #1
 8008222:	bf08      	it	eq
 8008224:	2020      	moveq	r0, #32
 8008226:	4770      	bx	lr
 8008228:	2000      	movs	r0, #0
 800822a:	e7e5      	b.n	80081f8 <__hi0bits+0xc>

0800822c <__lo0bits>:
 800822c:	6803      	ldr	r3, [r0, #0]
 800822e:	4602      	mov	r2, r0
 8008230:	f013 0007 	ands.w	r0, r3, #7
 8008234:	d00b      	beq.n	800824e <__lo0bits+0x22>
 8008236:	07d9      	lsls	r1, r3, #31
 8008238:	d422      	bmi.n	8008280 <__lo0bits+0x54>
 800823a:	0798      	lsls	r0, r3, #30
 800823c:	bf49      	itett	mi
 800823e:	085b      	lsrmi	r3, r3, #1
 8008240:	089b      	lsrpl	r3, r3, #2
 8008242:	2001      	movmi	r0, #1
 8008244:	6013      	strmi	r3, [r2, #0]
 8008246:	bf5c      	itt	pl
 8008248:	2002      	movpl	r0, #2
 800824a:	6013      	strpl	r3, [r2, #0]
 800824c:	4770      	bx	lr
 800824e:	b299      	uxth	r1, r3
 8008250:	b909      	cbnz	r1, 8008256 <__lo0bits+0x2a>
 8008252:	2010      	movs	r0, #16
 8008254:	0c1b      	lsrs	r3, r3, #16
 8008256:	f013 0fff 	tst.w	r3, #255	; 0xff
 800825a:	bf04      	itt	eq
 800825c:	0a1b      	lsreq	r3, r3, #8
 800825e:	3008      	addeq	r0, #8
 8008260:	0719      	lsls	r1, r3, #28
 8008262:	bf04      	itt	eq
 8008264:	091b      	lsreq	r3, r3, #4
 8008266:	3004      	addeq	r0, #4
 8008268:	0799      	lsls	r1, r3, #30
 800826a:	bf04      	itt	eq
 800826c:	089b      	lsreq	r3, r3, #2
 800826e:	3002      	addeq	r0, #2
 8008270:	07d9      	lsls	r1, r3, #31
 8008272:	d403      	bmi.n	800827c <__lo0bits+0x50>
 8008274:	085b      	lsrs	r3, r3, #1
 8008276:	f100 0001 	add.w	r0, r0, #1
 800827a:	d003      	beq.n	8008284 <__lo0bits+0x58>
 800827c:	6013      	str	r3, [r2, #0]
 800827e:	4770      	bx	lr
 8008280:	2000      	movs	r0, #0
 8008282:	4770      	bx	lr
 8008284:	2020      	movs	r0, #32
 8008286:	4770      	bx	lr

08008288 <__i2b>:
 8008288:	b510      	push	{r4, lr}
 800828a:	460c      	mov	r4, r1
 800828c:	2101      	movs	r1, #1
 800828e:	f7ff ff01 	bl	8008094 <_Balloc>
 8008292:	4602      	mov	r2, r0
 8008294:	b928      	cbnz	r0, 80082a2 <__i2b+0x1a>
 8008296:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800829a:	4b04      	ldr	r3, [pc, #16]	; (80082ac <__i2b+0x24>)
 800829c:	4804      	ldr	r0, [pc, #16]	; (80082b0 <__i2b+0x28>)
 800829e:	f000 fc9b 	bl	8008bd8 <__assert_func>
 80082a2:	2301      	movs	r3, #1
 80082a4:	6144      	str	r4, [r0, #20]
 80082a6:	6103      	str	r3, [r0, #16]
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	bf00      	nop
 80082ac:	0800af47 	.word	0x0800af47
 80082b0:	0800af58 	.word	0x0800af58

080082b4 <__multiply>:
 80082b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	4614      	mov	r4, r2
 80082ba:	690a      	ldr	r2, [r1, #16]
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	460d      	mov	r5, r1
 80082c0:	429a      	cmp	r2, r3
 80082c2:	bfbe      	ittt	lt
 80082c4:	460b      	movlt	r3, r1
 80082c6:	4625      	movlt	r5, r4
 80082c8:	461c      	movlt	r4, r3
 80082ca:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80082ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80082d2:	68ab      	ldr	r3, [r5, #8]
 80082d4:	6869      	ldr	r1, [r5, #4]
 80082d6:	eb0a 0709 	add.w	r7, sl, r9
 80082da:	42bb      	cmp	r3, r7
 80082dc:	b085      	sub	sp, #20
 80082de:	bfb8      	it	lt
 80082e0:	3101      	addlt	r1, #1
 80082e2:	f7ff fed7 	bl	8008094 <_Balloc>
 80082e6:	b930      	cbnz	r0, 80082f6 <__multiply+0x42>
 80082e8:	4602      	mov	r2, r0
 80082ea:	f240 115d 	movw	r1, #349	; 0x15d
 80082ee:	4b41      	ldr	r3, [pc, #260]	; (80083f4 <__multiply+0x140>)
 80082f0:	4841      	ldr	r0, [pc, #260]	; (80083f8 <__multiply+0x144>)
 80082f2:	f000 fc71 	bl	8008bd8 <__assert_func>
 80082f6:	f100 0614 	add.w	r6, r0, #20
 80082fa:	4633      	mov	r3, r6
 80082fc:	2200      	movs	r2, #0
 80082fe:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008302:	4543      	cmp	r3, r8
 8008304:	d31e      	bcc.n	8008344 <__multiply+0x90>
 8008306:	f105 0c14 	add.w	ip, r5, #20
 800830a:	f104 0314 	add.w	r3, r4, #20
 800830e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008312:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008316:	9202      	str	r2, [sp, #8]
 8008318:	ebac 0205 	sub.w	r2, ip, r5
 800831c:	3a15      	subs	r2, #21
 800831e:	f022 0203 	bic.w	r2, r2, #3
 8008322:	3204      	adds	r2, #4
 8008324:	f105 0115 	add.w	r1, r5, #21
 8008328:	458c      	cmp	ip, r1
 800832a:	bf38      	it	cc
 800832c:	2204      	movcc	r2, #4
 800832e:	9201      	str	r2, [sp, #4]
 8008330:	9a02      	ldr	r2, [sp, #8]
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	429a      	cmp	r2, r3
 8008336:	d808      	bhi.n	800834a <__multiply+0x96>
 8008338:	2f00      	cmp	r7, #0
 800833a:	dc55      	bgt.n	80083e8 <__multiply+0x134>
 800833c:	6107      	str	r7, [r0, #16]
 800833e:	b005      	add	sp, #20
 8008340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008344:	f843 2b04 	str.w	r2, [r3], #4
 8008348:	e7db      	b.n	8008302 <__multiply+0x4e>
 800834a:	f8b3 a000 	ldrh.w	sl, [r3]
 800834e:	f1ba 0f00 	cmp.w	sl, #0
 8008352:	d020      	beq.n	8008396 <__multiply+0xe2>
 8008354:	46b1      	mov	r9, r6
 8008356:	2200      	movs	r2, #0
 8008358:	f105 0e14 	add.w	lr, r5, #20
 800835c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008360:	f8d9 b000 	ldr.w	fp, [r9]
 8008364:	b2a1      	uxth	r1, r4
 8008366:	fa1f fb8b 	uxth.w	fp, fp
 800836a:	fb0a b101 	mla	r1, sl, r1, fp
 800836e:	4411      	add	r1, r2
 8008370:	f8d9 2000 	ldr.w	r2, [r9]
 8008374:	0c24      	lsrs	r4, r4, #16
 8008376:	0c12      	lsrs	r2, r2, #16
 8008378:	fb0a 2404 	mla	r4, sl, r4, r2
 800837c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008380:	b289      	uxth	r1, r1
 8008382:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008386:	45f4      	cmp	ip, lr
 8008388:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800838c:	f849 1b04 	str.w	r1, [r9], #4
 8008390:	d8e4      	bhi.n	800835c <__multiply+0xa8>
 8008392:	9901      	ldr	r1, [sp, #4]
 8008394:	5072      	str	r2, [r6, r1]
 8008396:	9a03      	ldr	r2, [sp, #12]
 8008398:	3304      	adds	r3, #4
 800839a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800839e:	f1b9 0f00 	cmp.w	r9, #0
 80083a2:	d01f      	beq.n	80083e4 <__multiply+0x130>
 80083a4:	46b6      	mov	lr, r6
 80083a6:	f04f 0a00 	mov.w	sl, #0
 80083aa:	6834      	ldr	r4, [r6, #0]
 80083ac:	f105 0114 	add.w	r1, r5, #20
 80083b0:	880a      	ldrh	r2, [r1, #0]
 80083b2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80083b6:	b2a4      	uxth	r4, r4
 80083b8:	fb09 b202 	mla	r2, r9, r2, fp
 80083bc:	4492      	add	sl, r2
 80083be:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80083c2:	f84e 4b04 	str.w	r4, [lr], #4
 80083c6:	f851 4b04 	ldr.w	r4, [r1], #4
 80083ca:	f8be 2000 	ldrh.w	r2, [lr]
 80083ce:	0c24      	lsrs	r4, r4, #16
 80083d0:	fb09 2404 	mla	r4, r9, r4, r2
 80083d4:	458c      	cmp	ip, r1
 80083d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80083da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80083de:	d8e7      	bhi.n	80083b0 <__multiply+0xfc>
 80083e0:	9a01      	ldr	r2, [sp, #4]
 80083e2:	50b4      	str	r4, [r6, r2]
 80083e4:	3604      	adds	r6, #4
 80083e6:	e7a3      	b.n	8008330 <__multiply+0x7c>
 80083e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1a5      	bne.n	800833c <__multiply+0x88>
 80083f0:	3f01      	subs	r7, #1
 80083f2:	e7a1      	b.n	8008338 <__multiply+0x84>
 80083f4:	0800af47 	.word	0x0800af47
 80083f8:	0800af58 	.word	0x0800af58

080083fc <__pow5mult>:
 80083fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008400:	4615      	mov	r5, r2
 8008402:	f012 0203 	ands.w	r2, r2, #3
 8008406:	4606      	mov	r6, r0
 8008408:	460f      	mov	r7, r1
 800840a:	d007      	beq.n	800841c <__pow5mult+0x20>
 800840c:	4c25      	ldr	r4, [pc, #148]	; (80084a4 <__pow5mult+0xa8>)
 800840e:	3a01      	subs	r2, #1
 8008410:	2300      	movs	r3, #0
 8008412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008416:	f7ff fe9f 	bl	8008158 <__multadd>
 800841a:	4607      	mov	r7, r0
 800841c:	10ad      	asrs	r5, r5, #2
 800841e:	d03d      	beq.n	800849c <__pow5mult+0xa0>
 8008420:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008422:	b97c      	cbnz	r4, 8008444 <__pow5mult+0x48>
 8008424:	2010      	movs	r0, #16
 8008426:	f7ff fe11 	bl	800804c <malloc>
 800842a:	4602      	mov	r2, r0
 800842c:	6270      	str	r0, [r6, #36]	; 0x24
 800842e:	b928      	cbnz	r0, 800843c <__pow5mult+0x40>
 8008430:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008434:	4b1c      	ldr	r3, [pc, #112]	; (80084a8 <__pow5mult+0xac>)
 8008436:	481d      	ldr	r0, [pc, #116]	; (80084ac <__pow5mult+0xb0>)
 8008438:	f000 fbce 	bl	8008bd8 <__assert_func>
 800843c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008440:	6004      	str	r4, [r0, #0]
 8008442:	60c4      	str	r4, [r0, #12]
 8008444:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008448:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800844c:	b94c      	cbnz	r4, 8008462 <__pow5mult+0x66>
 800844e:	f240 2171 	movw	r1, #625	; 0x271
 8008452:	4630      	mov	r0, r6
 8008454:	f7ff ff18 	bl	8008288 <__i2b>
 8008458:	2300      	movs	r3, #0
 800845a:	4604      	mov	r4, r0
 800845c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	f04f 0900 	mov.w	r9, #0
 8008466:	07eb      	lsls	r3, r5, #31
 8008468:	d50a      	bpl.n	8008480 <__pow5mult+0x84>
 800846a:	4639      	mov	r1, r7
 800846c:	4622      	mov	r2, r4
 800846e:	4630      	mov	r0, r6
 8008470:	f7ff ff20 	bl	80082b4 <__multiply>
 8008474:	4680      	mov	r8, r0
 8008476:	4639      	mov	r1, r7
 8008478:	4630      	mov	r0, r6
 800847a:	f7ff fe4b 	bl	8008114 <_Bfree>
 800847e:	4647      	mov	r7, r8
 8008480:	106d      	asrs	r5, r5, #1
 8008482:	d00b      	beq.n	800849c <__pow5mult+0xa0>
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	b938      	cbnz	r0, 8008498 <__pow5mult+0x9c>
 8008488:	4622      	mov	r2, r4
 800848a:	4621      	mov	r1, r4
 800848c:	4630      	mov	r0, r6
 800848e:	f7ff ff11 	bl	80082b4 <__multiply>
 8008492:	6020      	str	r0, [r4, #0]
 8008494:	f8c0 9000 	str.w	r9, [r0]
 8008498:	4604      	mov	r4, r0
 800849a:	e7e4      	b.n	8008466 <__pow5mult+0x6a>
 800849c:	4638      	mov	r0, r7
 800849e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a2:	bf00      	nop
 80084a4:	0800b0a8 	.word	0x0800b0a8
 80084a8:	0800aed1 	.word	0x0800aed1
 80084ac:	0800af58 	.word	0x0800af58

080084b0 <__lshift>:
 80084b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b4:	460c      	mov	r4, r1
 80084b6:	4607      	mov	r7, r0
 80084b8:	4691      	mov	r9, r2
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	6849      	ldr	r1, [r1, #4]
 80084be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084c2:	68a3      	ldr	r3, [r4, #8]
 80084c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084c8:	f108 0601 	add.w	r6, r8, #1
 80084cc:	42b3      	cmp	r3, r6
 80084ce:	db0b      	blt.n	80084e8 <__lshift+0x38>
 80084d0:	4638      	mov	r0, r7
 80084d2:	f7ff fddf 	bl	8008094 <_Balloc>
 80084d6:	4605      	mov	r5, r0
 80084d8:	b948      	cbnz	r0, 80084ee <__lshift+0x3e>
 80084da:	4602      	mov	r2, r0
 80084dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084e0:	4b27      	ldr	r3, [pc, #156]	; (8008580 <__lshift+0xd0>)
 80084e2:	4828      	ldr	r0, [pc, #160]	; (8008584 <__lshift+0xd4>)
 80084e4:	f000 fb78 	bl	8008bd8 <__assert_func>
 80084e8:	3101      	adds	r1, #1
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	e7ee      	b.n	80084cc <__lshift+0x1c>
 80084ee:	2300      	movs	r3, #0
 80084f0:	f100 0114 	add.w	r1, r0, #20
 80084f4:	f100 0210 	add.w	r2, r0, #16
 80084f8:	4618      	mov	r0, r3
 80084fa:	4553      	cmp	r3, sl
 80084fc:	db33      	blt.n	8008566 <__lshift+0xb6>
 80084fe:	6920      	ldr	r0, [r4, #16]
 8008500:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008504:	f104 0314 	add.w	r3, r4, #20
 8008508:	f019 091f 	ands.w	r9, r9, #31
 800850c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008510:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008514:	d02b      	beq.n	800856e <__lshift+0xbe>
 8008516:	468a      	mov	sl, r1
 8008518:	2200      	movs	r2, #0
 800851a:	f1c9 0e20 	rsb	lr, r9, #32
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	fa00 f009 	lsl.w	r0, r0, r9
 8008524:	4302      	orrs	r2, r0
 8008526:	f84a 2b04 	str.w	r2, [sl], #4
 800852a:	f853 2b04 	ldr.w	r2, [r3], #4
 800852e:	459c      	cmp	ip, r3
 8008530:	fa22 f20e 	lsr.w	r2, r2, lr
 8008534:	d8f3      	bhi.n	800851e <__lshift+0x6e>
 8008536:	ebac 0304 	sub.w	r3, ip, r4
 800853a:	3b15      	subs	r3, #21
 800853c:	f023 0303 	bic.w	r3, r3, #3
 8008540:	3304      	adds	r3, #4
 8008542:	f104 0015 	add.w	r0, r4, #21
 8008546:	4584      	cmp	ip, r0
 8008548:	bf38      	it	cc
 800854a:	2304      	movcc	r3, #4
 800854c:	50ca      	str	r2, [r1, r3]
 800854e:	b10a      	cbz	r2, 8008554 <__lshift+0xa4>
 8008550:	f108 0602 	add.w	r6, r8, #2
 8008554:	3e01      	subs	r6, #1
 8008556:	4638      	mov	r0, r7
 8008558:	4621      	mov	r1, r4
 800855a:	612e      	str	r6, [r5, #16]
 800855c:	f7ff fdda 	bl	8008114 <_Bfree>
 8008560:	4628      	mov	r0, r5
 8008562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008566:	f842 0f04 	str.w	r0, [r2, #4]!
 800856a:	3301      	adds	r3, #1
 800856c:	e7c5      	b.n	80084fa <__lshift+0x4a>
 800856e:	3904      	subs	r1, #4
 8008570:	f853 2b04 	ldr.w	r2, [r3], #4
 8008574:	459c      	cmp	ip, r3
 8008576:	f841 2f04 	str.w	r2, [r1, #4]!
 800857a:	d8f9      	bhi.n	8008570 <__lshift+0xc0>
 800857c:	e7ea      	b.n	8008554 <__lshift+0xa4>
 800857e:	bf00      	nop
 8008580:	0800af47 	.word	0x0800af47
 8008584:	0800af58 	.word	0x0800af58

08008588 <__mcmp>:
 8008588:	4603      	mov	r3, r0
 800858a:	690a      	ldr	r2, [r1, #16]
 800858c:	6900      	ldr	r0, [r0, #16]
 800858e:	b530      	push	{r4, r5, lr}
 8008590:	1a80      	subs	r0, r0, r2
 8008592:	d10d      	bne.n	80085b0 <__mcmp+0x28>
 8008594:	3314      	adds	r3, #20
 8008596:	3114      	adds	r1, #20
 8008598:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800859c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085a8:	4295      	cmp	r5, r2
 80085aa:	d002      	beq.n	80085b2 <__mcmp+0x2a>
 80085ac:	d304      	bcc.n	80085b8 <__mcmp+0x30>
 80085ae:	2001      	movs	r0, #1
 80085b0:	bd30      	pop	{r4, r5, pc}
 80085b2:	42a3      	cmp	r3, r4
 80085b4:	d3f4      	bcc.n	80085a0 <__mcmp+0x18>
 80085b6:	e7fb      	b.n	80085b0 <__mcmp+0x28>
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085bc:	e7f8      	b.n	80085b0 <__mcmp+0x28>
	...

080085c0 <__mdiff>:
 80085c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	460c      	mov	r4, r1
 80085c6:	4606      	mov	r6, r0
 80085c8:	4611      	mov	r1, r2
 80085ca:	4620      	mov	r0, r4
 80085cc:	4692      	mov	sl, r2
 80085ce:	f7ff ffdb 	bl	8008588 <__mcmp>
 80085d2:	1e05      	subs	r5, r0, #0
 80085d4:	d111      	bne.n	80085fa <__mdiff+0x3a>
 80085d6:	4629      	mov	r1, r5
 80085d8:	4630      	mov	r0, r6
 80085da:	f7ff fd5b 	bl	8008094 <_Balloc>
 80085de:	4602      	mov	r2, r0
 80085e0:	b928      	cbnz	r0, 80085ee <__mdiff+0x2e>
 80085e2:	f240 2132 	movw	r1, #562	; 0x232
 80085e6:	4b3c      	ldr	r3, [pc, #240]	; (80086d8 <__mdiff+0x118>)
 80085e8:	483c      	ldr	r0, [pc, #240]	; (80086dc <__mdiff+0x11c>)
 80085ea:	f000 faf5 	bl	8008bd8 <__assert_func>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085f4:	4610      	mov	r0, r2
 80085f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fa:	bfa4      	itt	ge
 80085fc:	4653      	movge	r3, sl
 80085fe:	46a2      	movge	sl, r4
 8008600:	4630      	mov	r0, r6
 8008602:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008606:	bfa6      	itte	ge
 8008608:	461c      	movge	r4, r3
 800860a:	2500      	movge	r5, #0
 800860c:	2501      	movlt	r5, #1
 800860e:	f7ff fd41 	bl	8008094 <_Balloc>
 8008612:	4602      	mov	r2, r0
 8008614:	b918      	cbnz	r0, 800861e <__mdiff+0x5e>
 8008616:	f44f 7110 	mov.w	r1, #576	; 0x240
 800861a:	4b2f      	ldr	r3, [pc, #188]	; (80086d8 <__mdiff+0x118>)
 800861c:	e7e4      	b.n	80085e8 <__mdiff+0x28>
 800861e:	f100 0814 	add.w	r8, r0, #20
 8008622:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008626:	60c5      	str	r5, [r0, #12]
 8008628:	f04f 0c00 	mov.w	ip, #0
 800862c:	f10a 0514 	add.w	r5, sl, #20
 8008630:	f10a 0010 	add.w	r0, sl, #16
 8008634:	46c2      	mov	sl, r8
 8008636:	6926      	ldr	r6, [r4, #16]
 8008638:	f104 0914 	add.w	r9, r4, #20
 800863c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008640:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008644:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008648:	f859 3b04 	ldr.w	r3, [r9], #4
 800864c:	fa1f f18b 	uxth.w	r1, fp
 8008650:	4461      	add	r1, ip
 8008652:	fa1f fc83 	uxth.w	ip, r3
 8008656:	0c1b      	lsrs	r3, r3, #16
 8008658:	eba1 010c 	sub.w	r1, r1, ip
 800865c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008660:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008664:	b289      	uxth	r1, r1
 8008666:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800866a:	454e      	cmp	r6, r9
 800866c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008670:	f84a 3b04 	str.w	r3, [sl], #4
 8008674:	d8e6      	bhi.n	8008644 <__mdiff+0x84>
 8008676:	1b33      	subs	r3, r6, r4
 8008678:	3b15      	subs	r3, #21
 800867a:	f023 0303 	bic.w	r3, r3, #3
 800867e:	3415      	adds	r4, #21
 8008680:	3304      	adds	r3, #4
 8008682:	42a6      	cmp	r6, r4
 8008684:	bf38      	it	cc
 8008686:	2304      	movcc	r3, #4
 8008688:	441d      	add	r5, r3
 800868a:	4443      	add	r3, r8
 800868c:	461e      	mov	r6, r3
 800868e:	462c      	mov	r4, r5
 8008690:	4574      	cmp	r4, lr
 8008692:	d30e      	bcc.n	80086b2 <__mdiff+0xf2>
 8008694:	f10e 0103 	add.w	r1, lr, #3
 8008698:	1b49      	subs	r1, r1, r5
 800869a:	f021 0103 	bic.w	r1, r1, #3
 800869e:	3d03      	subs	r5, #3
 80086a0:	45ae      	cmp	lr, r5
 80086a2:	bf38      	it	cc
 80086a4:	2100      	movcc	r1, #0
 80086a6:	4419      	add	r1, r3
 80086a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80086ac:	b18b      	cbz	r3, 80086d2 <__mdiff+0x112>
 80086ae:	6117      	str	r7, [r2, #16]
 80086b0:	e7a0      	b.n	80085f4 <__mdiff+0x34>
 80086b2:	f854 8b04 	ldr.w	r8, [r4], #4
 80086b6:	fa1f f188 	uxth.w	r1, r8
 80086ba:	4461      	add	r1, ip
 80086bc:	1408      	asrs	r0, r1, #16
 80086be:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80086c2:	b289      	uxth	r1, r1
 80086c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086cc:	f846 1b04 	str.w	r1, [r6], #4
 80086d0:	e7de      	b.n	8008690 <__mdiff+0xd0>
 80086d2:	3f01      	subs	r7, #1
 80086d4:	e7e8      	b.n	80086a8 <__mdiff+0xe8>
 80086d6:	bf00      	nop
 80086d8:	0800af47 	.word	0x0800af47
 80086dc:	0800af58 	.word	0x0800af58

080086e0 <__d2b>:
 80086e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80086e4:	2101      	movs	r1, #1
 80086e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80086ea:	4690      	mov	r8, r2
 80086ec:	461d      	mov	r5, r3
 80086ee:	f7ff fcd1 	bl	8008094 <_Balloc>
 80086f2:	4604      	mov	r4, r0
 80086f4:	b930      	cbnz	r0, 8008704 <__d2b+0x24>
 80086f6:	4602      	mov	r2, r0
 80086f8:	f240 310a 	movw	r1, #778	; 0x30a
 80086fc:	4b24      	ldr	r3, [pc, #144]	; (8008790 <__d2b+0xb0>)
 80086fe:	4825      	ldr	r0, [pc, #148]	; (8008794 <__d2b+0xb4>)
 8008700:	f000 fa6a 	bl	8008bd8 <__assert_func>
 8008704:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008708:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800870c:	bb2d      	cbnz	r5, 800875a <__d2b+0x7a>
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	f1b8 0300 	subs.w	r3, r8, #0
 8008714:	d026      	beq.n	8008764 <__d2b+0x84>
 8008716:	4668      	mov	r0, sp
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	f7ff fd87 	bl	800822c <__lo0bits>
 800871e:	9900      	ldr	r1, [sp, #0]
 8008720:	b1f0      	cbz	r0, 8008760 <__d2b+0x80>
 8008722:	9a01      	ldr	r2, [sp, #4]
 8008724:	f1c0 0320 	rsb	r3, r0, #32
 8008728:	fa02 f303 	lsl.w	r3, r2, r3
 800872c:	430b      	orrs	r3, r1
 800872e:	40c2      	lsrs	r2, r0
 8008730:	6163      	str	r3, [r4, #20]
 8008732:	9201      	str	r2, [sp, #4]
 8008734:	9b01      	ldr	r3, [sp, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	bf14      	ite	ne
 800873a:	2102      	movne	r1, #2
 800873c:	2101      	moveq	r1, #1
 800873e:	61a3      	str	r3, [r4, #24]
 8008740:	6121      	str	r1, [r4, #16]
 8008742:	b1c5      	cbz	r5, 8008776 <__d2b+0x96>
 8008744:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008748:	4405      	add	r5, r0
 800874a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800874e:	603d      	str	r5, [r7, #0]
 8008750:	6030      	str	r0, [r6, #0]
 8008752:	4620      	mov	r0, r4
 8008754:	b002      	add	sp, #8
 8008756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800875e:	e7d6      	b.n	800870e <__d2b+0x2e>
 8008760:	6161      	str	r1, [r4, #20]
 8008762:	e7e7      	b.n	8008734 <__d2b+0x54>
 8008764:	a801      	add	r0, sp, #4
 8008766:	f7ff fd61 	bl	800822c <__lo0bits>
 800876a:	2101      	movs	r1, #1
 800876c:	9b01      	ldr	r3, [sp, #4]
 800876e:	6121      	str	r1, [r4, #16]
 8008770:	6163      	str	r3, [r4, #20]
 8008772:	3020      	adds	r0, #32
 8008774:	e7e5      	b.n	8008742 <__d2b+0x62>
 8008776:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800877a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800877e:	6038      	str	r0, [r7, #0]
 8008780:	6918      	ldr	r0, [r3, #16]
 8008782:	f7ff fd33 	bl	80081ec <__hi0bits>
 8008786:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800878a:	6031      	str	r1, [r6, #0]
 800878c:	e7e1      	b.n	8008752 <__d2b+0x72>
 800878e:	bf00      	nop
 8008790:	0800af47 	.word	0x0800af47
 8008794:	0800af58 	.word	0x0800af58

08008798 <_calloc_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	fb02 f501 	mul.w	r5, r2, r1
 800879e:	4629      	mov	r1, r5
 80087a0:	f000 f854 	bl	800884c <_malloc_r>
 80087a4:	4604      	mov	r4, r0
 80087a6:	b118      	cbz	r0, 80087b0 <_calloc_r+0x18>
 80087a8:	462a      	mov	r2, r5
 80087aa:	2100      	movs	r1, #0
 80087ac:	f7fe f946 	bl	8006a3c <memset>
 80087b0:	4620      	mov	r0, r4
 80087b2:	bd38      	pop	{r3, r4, r5, pc}

080087b4 <_free_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4605      	mov	r5, r0
 80087b8:	2900      	cmp	r1, #0
 80087ba:	d043      	beq.n	8008844 <_free_r+0x90>
 80087bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c0:	1f0c      	subs	r4, r1, #4
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	bfb8      	it	lt
 80087c6:	18e4      	addlt	r4, r4, r3
 80087c8:	f000 fa62 	bl	8008c90 <__malloc_lock>
 80087cc:	4a1e      	ldr	r2, [pc, #120]	; (8008848 <_free_r+0x94>)
 80087ce:	6813      	ldr	r3, [r2, #0]
 80087d0:	4610      	mov	r0, r2
 80087d2:	b933      	cbnz	r3, 80087e2 <_free_r+0x2e>
 80087d4:	6063      	str	r3, [r4, #4]
 80087d6:	6014      	str	r4, [r2, #0]
 80087d8:	4628      	mov	r0, r5
 80087da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087de:	f000 ba5d 	b.w	8008c9c <__malloc_unlock>
 80087e2:	42a3      	cmp	r3, r4
 80087e4:	d90a      	bls.n	80087fc <_free_r+0x48>
 80087e6:	6821      	ldr	r1, [r4, #0]
 80087e8:	1862      	adds	r2, r4, r1
 80087ea:	4293      	cmp	r3, r2
 80087ec:	bf01      	itttt	eq
 80087ee:	681a      	ldreq	r2, [r3, #0]
 80087f0:	685b      	ldreq	r3, [r3, #4]
 80087f2:	1852      	addeq	r2, r2, r1
 80087f4:	6022      	streq	r2, [r4, #0]
 80087f6:	6063      	str	r3, [r4, #4]
 80087f8:	6004      	str	r4, [r0, #0]
 80087fa:	e7ed      	b.n	80087d8 <_free_r+0x24>
 80087fc:	461a      	mov	r2, r3
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	b10b      	cbz	r3, 8008806 <_free_r+0x52>
 8008802:	42a3      	cmp	r3, r4
 8008804:	d9fa      	bls.n	80087fc <_free_r+0x48>
 8008806:	6811      	ldr	r1, [r2, #0]
 8008808:	1850      	adds	r0, r2, r1
 800880a:	42a0      	cmp	r0, r4
 800880c:	d10b      	bne.n	8008826 <_free_r+0x72>
 800880e:	6820      	ldr	r0, [r4, #0]
 8008810:	4401      	add	r1, r0
 8008812:	1850      	adds	r0, r2, r1
 8008814:	4283      	cmp	r3, r0
 8008816:	6011      	str	r1, [r2, #0]
 8008818:	d1de      	bne.n	80087d8 <_free_r+0x24>
 800881a:	6818      	ldr	r0, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	4401      	add	r1, r0
 8008820:	6011      	str	r1, [r2, #0]
 8008822:	6053      	str	r3, [r2, #4]
 8008824:	e7d8      	b.n	80087d8 <_free_r+0x24>
 8008826:	d902      	bls.n	800882e <_free_r+0x7a>
 8008828:	230c      	movs	r3, #12
 800882a:	602b      	str	r3, [r5, #0]
 800882c:	e7d4      	b.n	80087d8 <_free_r+0x24>
 800882e:	6820      	ldr	r0, [r4, #0]
 8008830:	1821      	adds	r1, r4, r0
 8008832:	428b      	cmp	r3, r1
 8008834:	bf01      	itttt	eq
 8008836:	6819      	ldreq	r1, [r3, #0]
 8008838:	685b      	ldreq	r3, [r3, #4]
 800883a:	1809      	addeq	r1, r1, r0
 800883c:	6021      	streq	r1, [r4, #0]
 800883e:	6063      	str	r3, [r4, #4]
 8008840:	6054      	str	r4, [r2, #4]
 8008842:	e7c9      	b.n	80087d8 <_free_r+0x24>
 8008844:	bd38      	pop	{r3, r4, r5, pc}
 8008846:	bf00      	nop
 8008848:	200002dc 	.word	0x200002dc

0800884c <_malloc_r>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	1ccd      	adds	r5, r1, #3
 8008850:	f025 0503 	bic.w	r5, r5, #3
 8008854:	3508      	adds	r5, #8
 8008856:	2d0c      	cmp	r5, #12
 8008858:	bf38      	it	cc
 800885a:	250c      	movcc	r5, #12
 800885c:	2d00      	cmp	r5, #0
 800885e:	4606      	mov	r6, r0
 8008860:	db01      	blt.n	8008866 <_malloc_r+0x1a>
 8008862:	42a9      	cmp	r1, r5
 8008864:	d903      	bls.n	800886e <_malloc_r+0x22>
 8008866:	230c      	movs	r3, #12
 8008868:	6033      	str	r3, [r6, #0]
 800886a:	2000      	movs	r0, #0
 800886c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800886e:	f000 fa0f 	bl	8008c90 <__malloc_lock>
 8008872:	4921      	ldr	r1, [pc, #132]	; (80088f8 <_malloc_r+0xac>)
 8008874:	680a      	ldr	r2, [r1, #0]
 8008876:	4614      	mov	r4, r2
 8008878:	b99c      	cbnz	r4, 80088a2 <_malloc_r+0x56>
 800887a:	4f20      	ldr	r7, [pc, #128]	; (80088fc <_malloc_r+0xb0>)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	b923      	cbnz	r3, 800888a <_malloc_r+0x3e>
 8008880:	4621      	mov	r1, r4
 8008882:	4630      	mov	r0, r6
 8008884:	f000 f998 	bl	8008bb8 <_sbrk_r>
 8008888:	6038      	str	r0, [r7, #0]
 800888a:	4629      	mov	r1, r5
 800888c:	4630      	mov	r0, r6
 800888e:	f000 f993 	bl	8008bb8 <_sbrk_r>
 8008892:	1c43      	adds	r3, r0, #1
 8008894:	d123      	bne.n	80088de <_malloc_r+0x92>
 8008896:	230c      	movs	r3, #12
 8008898:	4630      	mov	r0, r6
 800889a:	6033      	str	r3, [r6, #0]
 800889c:	f000 f9fe 	bl	8008c9c <__malloc_unlock>
 80088a0:	e7e3      	b.n	800886a <_malloc_r+0x1e>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	1b5b      	subs	r3, r3, r5
 80088a6:	d417      	bmi.n	80088d8 <_malloc_r+0x8c>
 80088a8:	2b0b      	cmp	r3, #11
 80088aa:	d903      	bls.n	80088b4 <_malloc_r+0x68>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	441c      	add	r4, r3
 80088b0:	6025      	str	r5, [r4, #0]
 80088b2:	e004      	b.n	80088be <_malloc_r+0x72>
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	42a2      	cmp	r2, r4
 80088b8:	bf0c      	ite	eq
 80088ba:	600b      	streq	r3, [r1, #0]
 80088bc:	6053      	strne	r3, [r2, #4]
 80088be:	4630      	mov	r0, r6
 80088c0:	f000 f9ec 	bl	8008c9c <__malloc_unlock>
 80088c4:	f104 000b 	add.w	r0, r4, #11
 80088c8:	1d23      	adds	r3, r4, #4
 80088ca:	f020 0007 	bic.w	r0, r0, #7
 80088ce:	1ac2      	subs	r2, r0, r3
 80088d0:	d0cc      	beq.n	800886c <_malloc_r+0x20>
 80088d2:	1a1b      	subs	r3, r3, r0
 80088d4:	50a3      	str	r3, [r4, r2]
 80088d6:	e7c9      	b.n	800886c <_malloc_r+0x20>
 80088d8:	4622      	mov	r2, r4
 80088da:	6864      	ldr	r4, [r4, #4]
 80088dc:	e7cc      	b.n	8008878 <_malloc_r+0x2c>
 80088de:	1cc4      	adds	r4, r0, #3
 80088e0:	f024 0403 	bic.w	r4, r4, #3
 80088e4:	42a0      	cmp	r0, r4
 80088e6:	d0e3      	beq.n	80088b0 <_malloc_r+0x64>
 80088e8:	1a21      	subs	r1, r4, r0
 80088ea:	4630      	mov	r0, r6
 80088ec:	f000 f964 	bl	8008bb8 <_sbrk_r>
 80088f0:	3001      	adds	r0, #1
 80088f2:	d1dd      	bne.n	80088b0 <_malloc_r+0x64>
 80088f4:	e7cf      	b.n	8008896 <_malloc_r+0x4a>
 80088f6:	bf00      	nop
 80088f8:	200002dc 	.word	0x200002dc
 80088fc:	200002e0 	.word	0x200002e0

08008900 <__ssputs_r>:
 8008900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	688e      	ldr	r6, [r1, #8]
 8008906:	4682      	mov	sl, r0
 8008908:	429e      	cmp	r6, r3
 800890a:	460c      	mov	r4, r1
 800890c:	4690      	mov	r8, r2
 800890e:	461f      	mov	r7, r3
 8008910:	d838      	bhi.n	8008984 <__ssputs_r+0x84>
 8008912:	898a      	ldrh	r2, [r1, #12]
 8008914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008918:	d032      	beq.n	8008980 <__ssputs_r+0x80>
 800891a:	6825      	ldr	r5, [r4, #0]
 800891c:	6909      	ldr	r1, [r1, #16]
 800891e:	3301      	adds	r3, #1
 8008920:	eba5 0901 	sub.w	r9, r5, r1
 8008924:	6965      	ldr	r5, [r4, #20]
 8008926:	444b      	add	r3, r9
 8008928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800892c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008930:	106d      	asrs	r5, r5, #1
 8008932:	429d      	cmp	r5, r3
 8008934:	bf38      	it	cc
 8008936:	461d      	movcc	r5, r3
 8008938:	0553      	lsls	r3, r2, #21
 800893a:	d531      	bpl.n	80089a0 <__ssputs_r+0xa0>
 800893c:	4629      	mov	r1, r5
 800893e:	f7ff ff85 	bl	800884c <_malloc_r>
 8008942:	4606      	mov	r6, r0
 8008944:	b950      	cbnz	r0, 800895c <__ssputs_r+0x5c>
 8008946:	230c      	movs	r3, #12
 8008948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800894c:	f8ca 3000 	str.w	r3, [sl]
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895c:	464a      	mov	r2, r9
 800895e:	6921      	ldr	r1, [r4, #16]
 8008960:	f7ff fb8a 	bl	8008078 <memcpy>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800896a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	6126      	str	r6, [r4, #16]
 8008972:	444e      	add	r6, r9
 8008974:	6026      	str	r6, [r4, #0]
 8008976:	463e      	mov	r6, r7
 8008978:	6165      	str	r5, [r4, #20]
 800897a:	eba5 0509 	sub.w	r5, r5, r9
 800897e:	60a5      	str	r5, [r4, #8]
 8008980:	42be      	cmp	r6, r7
 8008982:	d900      	bls.n	8008986 <__ssputs_r+0x86>
 8008984:	463e      	mov	r6, r7
 8008986:	4632      	mov	r2, r6
 8008988:	4641      	mov	r1, r8
 800898a:	6820      	ldr	r0, [r4, #0]
 800898c:	f000 f966 	bl	8008c5c <memmove>
 8008990:	68a3      	ldr	r3, [r4, #8]
 8008992:	6822      	ldr	r2, [r4, #0]
 8008994:	1b9b      	subs	r3, r3, r6
 8008996:	4432      	add	r2, r6
 8008998:	2000      	movs	r0, #0
 800899a:	60a3      	str	r3, [r4, #8]
 800899c:	6022      	str	r2, [r4, #0]
 800899e:	e7db      	b.n	8008958 <__ssputs_r+0x58>
 80089a0:	462a      	mov	r2, r5
 80089a2:	f000 f981 	bl	8008ca8 <_realloc_r>
 80089a6:	4606      	mov	r6, r0
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d1e1      	bne.n	8008970 <__ssputs_r+0x70>
 80089ac:	4650      	mov	r0, sl
 80089ae:	6921      	ldr	r1, [r4, #16]
 80089b0:	f7ff ff00 	bl	80087b4 <_free_r>
 80089b4:	e7c7      	b.n	8008946 <__ssputs_r+0x46>
	...

080089b8 <_svfiprintf_r>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	4698      	mov	r8, r3
 80089be:	898b      	ldrh	r3, [r1, #12]
 80089c0:	4607      	mov	r7, r0
 80089c2:	061b      	lsls	r3, r3, #24
 80089c4:	460d      	mov	r5, r1
 80089c6:	4614      	mov	r4, r2
 80089c8:	b09d      	sub	sp, #116	; 0x74
 80089ca:	d50e      	bpl.n	80089ea <_svfiprintf_r+0x32>
 80089cc:	690b      	ldr	r3, [r1, #16]
 80089ce:	b963      	cbnz	r3, 80089ea <_svfiprintf_r+0x32>
 80089d0:	2140      	movs	r1, #64	; 0x40
 80089d2:	f7ff ff3b 	bl	800884c <_malloc_r>
 80089d6:	6028      	str	r0, [r5, #0]
 80089d8:	6128      	str	r0, [r5, #16]
 80089da:	b920      	cbnz	r0, 80089e6 <_svfiprintf_r+0x2e>
 80089dc:	230c      	movs	r3, #12
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089e4:	e0d1      	b.n	8008b8a <_svfiprintf_r+0x1d2>
 80089e6:	2340      	movs	r3, #64	; 0x40
 80089e8:	616b      	str	r3, [r5, #20]
 80089ea:	2300      	movs	r3, #0
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
 80089ee:	2320      	movs	r3, #32
 80089f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089f4:	2330      	movs	r3, #48	; 0x30
 80089f6:	f04f 0901 	mov.w	r9, #1
 80089fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80089fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ba4 <_svfiprintf_r+0x1ec>
 8008a02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a06:	4623      	mov	r3, r4
 8008a08:	469a      	mov	sl, r3
 8008a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a0e:	b10a      	cbz	r2, 8008a14 <_svfiprintf_r+0x5c>
 8008a10:	2a25      	cmp	r2, #37	; 0x25
 8008a12:	d1f9      	bne.n	8008a08 <_svfiprintf_r+0x50>
 8008a14:	ebba 0b04 	subs.w	fp, sl, r4
 8008a18:	d00b      	beq.n	8008a32 <_svfiprintf_r+0x7a>
 8008a1a:	465b      	mov	r3, fp
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7ff ff6d 	bl	8008900 <__ssputs_r>
 8008a26:	3001      	adds	r0, #1
 8008a28:	f000 80aa 	beq.w	8008b80 <_svfiprintf_r+0x1c8>
 8008a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a2e:	445a      	add	r2, fp
 8008a30:	9209      	str	r2, [sp, #36]	; 0x24
 8008a32:	f89a 3000 	ldrb.w	r3, [sl]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80a2 	beq.w	8008b80 <_svfiprintf_r+0x1c8>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a46:	f10a 0a01 	add.w	sl, sl, #1
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	9307      	str	r3, [sp, #28]
 8008a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a52:	931a      	str	r3, [sp, #104]	; 0x68
 8008a54:	4654      	mov	r4, sl
 8008a56:	2205      	movs	r2, #5
 8008a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a5c:	4851      	ldr	r0, [pc, #324]	; (8008ba4 <_svfiprintf_r+0x1ec>)
 8008a5e:	f7ff fafd 	bl	800805c <memchr>
 8008a62:	9a04      	ldr	r2, [sp, #16]
 8008a64:	b9d8      	cbnz	r0, 8008a9e <_svfiprintf_r+0xe6>
 8008a66:	06d0      	lsls	r0, r2, #27
 8008a68:	bf44      	itt	mi
 8008a6a:	2320      	movmi	r3, #32
 8008a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a70:	0711      	lsls	r1, r2, #28
 8008a72:	bf44      	itt	mi
 8008a74:	232b      	movmi	r3, #43	; 0x2b
 8008a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a80:	d015      	beq.n	8008aae <_svfiprintf_r+0xf6>
 8008a82:	4654      	mov	r4, sl
 8008a84:	2000      	movs	r0, #0
 8008a86:	f04f 0c0a 	mov.w	ip, #10
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a92:	3b30      	subs	r3, #48	; 0x30
 8008a94:	2b09      	cmp	r3, #9
 8008a96:	d94e      	bls.n	8008b36 <_svfiprintf_r+0x17e>
 8008a98:	b1b0      	cbz	r0, 8008ac8 <_svfiprintf_r+0x110>
 8008a9a:	9207      	str	r2, [sp, #28]
 8008a9c:	e014      	b.n	8008ac8 <_svfiprintf_r+0x110>
 8008a9e:	eba0 0308 	sub.w	r3, r0, r8
 8008aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	46a2      	mov	sl, r4
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	e7d2      	b.n	8008a54 <_svfiprintf_r+0x9c>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	1d19      	adds	r1, r3, #4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	9103      	str	r1, [sp, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bfbb      	ittet	lt
 8008aba:	425b      	neglt	r3, r3
 8008abc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ac0:	9307      	strge	r3, [sp, #28]
 8008ac2:	9307      	strlt	r3, [sp, #28]
 8008ac4:	bfb8      	it	lt
 8008ac6:	9204      	strlt	r2, [sp, #16]
 8008ac8:	7823      	ldrb	r3, [r4, #0]
 8008aca:	2b2e      	cmp	r3, #46	; 0x2e
 8008acc:	d10c      	bne.n	8008ae8 <_svfiprintf_r+0x130>
 8008ace:	7863      	ldrb	r3, [r4, #1]
 8008ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad2:	d135      	bne.n	8008b40 <_svfiprintf_r+0x188>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	3402      	adds	r4, #2
 8008ad8:	1d1a      	adds	r2, r3, #4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	9203      	str	r2, [sp, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bfb8      	it	lt
 8008ae2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ae6:	9305      	str	r3, [sp, #20]
 8008ae8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bb4 <_svfiprintf_r+0x1fc>
 8008aec:	2203      	movs	r2, #3
 8008aee:	4650      	mov	r0, sl
 8008af0:	7821      	ldrb	r1, [r4, #0]
 8008af2:	f7ff fab3 	bl	800805c <memchr>
 8008af6:	b140      	cbz	r0, 8008b0a <_svfiprintf_r+0x152>
 8008af8:	2340      	movs	r3, #64	; 0x40
 8008afa:	eba0 000a 	sub.w	r0, r0, sl
 8008afe:	fa03 f000 	lsl.w	r0, r3, r0
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	3401      	adds	r4, #1
 8008b06:	4303      	orrs	r3, r0
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0e:	2206      	movs	r2, #6
 8008b10:	4825      	ldr	r0, [pc, #148]	; (8008ba8 <_svfiprintf_r+0x1f0>)
 8008b12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b16:	f7ff faa1 	bl	800805c <memchr>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d038      	beq.n	8008b90 <_svfiprintf_r+0x1d8>
 8008b1e:	4b23      	ldr	r3, [pc, #140]	; (8008bac <_svfiprintf_r+0x1f4>)
 8008b20:	bb1b      	cbnz	r3, 8008b6a <_svfiprintf_r+0x1b2>
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	3307      	adds	r3, #7
 8008b26:	f023 0307 	bic.w	r3, r3, #7
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	9303      	str	r3, [sp, #12]
 8008b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b30:	4433      	add	r3, r6
 8008b32:	9309      	str	r3, [sp, #36]	; 0x24
 8008b34:	e767      	b.n	8008a06 <_svfiprintf_r+0x4e>
 8008b36:	460c      	mov	r4, r1
 8008b38:	2001      	movs	r0, #1
 8008b3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b3e:	e7a5      	b.n	8008a8c <_svfiprintf_r+0xd4>
 8008b40:	2300      	movs	r3, #0
 8008b42:	f04f 0c0a 	mov.w	ip, #10
 8008b46:	4619      	mov	r1, r3
 8008b48:	3401      	adds	r4, #1
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b52:	3a30      	subs	r2, #48	; 0x30
 8008b54:	2a09      	cmp	r2, #9
 8008b56:	d903      	bls.n	8008b60 <_svfiprintf_r+0x1a8>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d0c5      	beq.n	8008ae8 <_svfiprintf_r+0x130>
 8008b5c:	9105      	str	r1, [sp, #20]
 8008b5e:	e7c3      	b.n	8008ae8 <_svfiprintf_r+0x130>
 8008b60:	4604      	mov	r4, r0
 8008b62:	2301      	movs	r3, #1
 8008b64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b68:	e7f0      	b.n	8008b4c <_svfiprintf_r+0x194>
 8008b6a:	ab03      	add	r3, sp, #12
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	462a      	mov	r2, r5
 8008b70:	4638      	mov	r0, r7
 8008b72:	4b0f      	ldr	r3, [pc, #60]	; (8008bb0 <_svfiprintf_r+0x1f8>)
 8008b74:	a904      	add	r1, sp, #16
 8008b76:	f7fe f807 	bl	8006b88 <_printf_float>
 8008b7a:	1c42      	adds	r2, r0, #1
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	d1d6      	bne.n	8008b2e <_svfiprintf_r+0x176>
 8008b80:	89ab      	ldrh	r3, [r5, #12]
 8008b82:	065b      	lsls	r3, r3, #25
 8008b84:	f53f af2c 	bmi.w	80089e0 <_svfiprintf_r+0x28>
 8008b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b8a:	b01d      	add	sp, #116	; 0x74
 8008b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b90:	ab03      	add	r3, sp, #12
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	462a      	mov	r2, r5
 8008b96:	4638      	mov	r0, r7
 8008b98:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <_svfiprintf_r+0x1f8>)
 8008b9a:	a904      	add	r1, sp, #16
 8008b9c:	f7fe fa90 	bl	80070c0 <_printf_i>
 8008ba0:	e7eb      	b.n	8008b7a <_svfiprintf_r+0x1c2>
 8008ba2:	bf00      	nop
 8008ba4:	0800b0b4 	.word	0x0800b0b4
 8008ba8:	0800b0be 	.word	0x0800b0be
 8008bac:	08006b89 	.word	0x08006b89
 8008bb0:	08008901 	.word	0x08008901
 8008bb4:	0800b0ba 	.word	0x0800b0ba

08008bb8 <_sbrk_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4d05      	ldr	r5, [pc, #20]	; (8008bd4 <_sbrk_r+0x1c>)
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	f7fa fc08 	bl	80033d8 <_sbrk>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_sbrk_r+0x1a>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_sbrk_r+0x1a>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	20000d90 	.word	0x20000d90

08008bd8 <__assert_func>:
 8008bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bda:	4614      	mov	r4, r2
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <__assert_func+0x2c>)
 8008be0:	4605      	mov	r5, r0
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68d8      	ldr	r0, [r3, #12]
 8008be6:	b14c      	cbz	r4, 8008bfc <__assert_func+0x24>
 8008be8:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <__assert_func+0x30>)
 8008bea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bee:	9100      	str	r1, [sp, #0]
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	4906      	ldr	r1, [pc, #24]	; (8008c0c <__assert_func+0x34>)
 8008bf4:	f000 f80e 	bl	8008c14 <fiprintf>
 8008bf8:	f000 faa2 	bl	8009140 <abort>
 8008bfc:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <__assert_func+0x38>)
 8008bfe:	461c      	mov	r4, r3
 8008c00:	e7f3      	b.n	8008bea <__assert_func+0x12>
 8008c02:	bf00      	nop
 8008c04:	2000000c 	.word	0x2000000c
 8008c08:	0800b0c5 	.word	0x0800b0c5
 8008c0c:	0800b0d2 	.word	0x0800b0d2
 8008c10:	0800b100 	.word	0x0800b100

08008c14 <fiprintf>:
 8008c14:	b40e      	push	{r1, r2, r3}
 8008c16:	b503      	push	{r0, r1, lr}
 8008c18:	4601      	mov	r1, r0
 8008c1a:	ab03      	add	r3, sp, #12
 8008c1c:	4805      	ldr	r0, [pc, #20]	; (8008c34 <fiprintf+0x20>)
 8008c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c22:	6800      	ldr	r0, [r0, #0]
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	f000 f88d 	bl	8008d44 <_vfiprintf_r>
 8008c2a:	b002      	add	sp, #8
 8008c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c30:	b003      	add	sp, #12
 8008c32:	4770      	bx	lr
 8008c34:	2000000c 	.word	0x2000000c

08008c38 <__ascii_mbtowc>:
 8008c38:	b082      	sub	sp, #8
 8008c3a:	b901      	cbnz	r1, 8008c3e <__ascii_mbtowc+0x6>
 8008c3c:	a901      	add	r1, sp, #4
 8008c3e:	b142      	cbz	r2, 8008c52 <__ascii_mbtowc+0x1a>
 8008c40:	b14b      	cbz	r3, 8008c56 <__ascii_mbtowc+0x1e>
 8008c42:	7813      	ldrb	r3, [r2, #0]
 8008c44:	600b      	str	r3, [r1, #0]
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	1e10      	subs	r0, r2, #0
 8008c4a:	bf18      	it	ne
 8008c4c:	2001      	movne	r0, #1
 8008c4e:	b002      	add	sp, #8
 8008c50:	4770      	bx	lr
 8008c52:	4610      	mov	r0, r2
 8008c54:	e7fb      	b.n	8008c4e <__ascii_mbtowc+0x16>
 8008c56:	f06f 0001 	mvn.w	r0, #1
 8008c5a:	e7f8      	b.n	8008c4e <__ascii_mbtowc+0x16>

08008c5c <memmove>:
 8008c5c:	4288      	cmp	r0, r1
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	eb01 0402 	add.w	r4, r1, r2
 8008c64:	d902      	bls.n	8008c6c <memmove+0x10>
 8008c66:	4284      	cmp	r4, r0
 8008c68:	4623      	mov	r3, r4
 8008c6a:	d807      	bhi.n	8008c7c <memmove+0x20>
 8008c6c:	1e43      	subs	r3, r0, #1
 8008c6e:	42a1      	cmp	r1, r4
 8008c70:	d008      	beq.n	8008c84 <memmove+0x28>
 8008c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c7a:	e7f8      	b.n	8008c6e <memmove+0x12>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	4402      	add	r2, r0
 8008c80:	428a      	cmp	r2, r1
 8008c82:	d100      	bne.n	8008c86 <memmove+0x2a>
 8008c84:	bd10      	pop	{r4, pc}
 8008c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c8e:	e7f7      	b.n	8008c80 <memmove+0x24>

08008c90 <__malloc_lock>:
 8008c90:	4801      	ldr	r0, [pc, #4]	; (8008c98 <__malloc_lock+0x8>)
 8008c92:	f000 bc15 	b.w	80094c0 <__retarget_lock_acquire_recursive>
 8008c96:	bf00      	nop
 8008c98:	20000d98 	.word	0x20000d98

08008c9c <__malloc_unlock>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	; (8008ca4 <__malloc_unlock+0x8>)
 8008c9e:	f000 bc10 	b.w	80094c2 <__retarget_lock_release_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	20000d98 	.word	0x20000d98

08008ca8 <_realloc_r>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	4607      	mov	r7, r0
 8008cac:	4614      	mov	r4, r2
 8008cae:	460e      	mov	r6, r1
 8008cb0:	b921      	cbnz	r1, 8008cbc <_realloc_r+0x14>
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008cb8:	f7ff bdc8 	b.w	800884c <_malloc_r>
 8008cbc:	b922      	cbnz	r2, 8008cc8 <_realloc_r+0x20>
 8008cbe:	f7ff fd79 	bl	80087b4 <_free_r>
 8008cc2:	4625      	mov	r5, r4
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cc8:	f000 fc60 	bl	800958c <_malloc_usable_size_r>
 8008ccc:	42a0      	cmp	r0, r4
 8008cce:	d20f      	bcs.n	8008cf0 <_realloc_r+0x48>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	f7ff fdba 	bl	800884c <_malloc_r>
 8008cd8:	4605      	mov	r5, r0
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d0f2      	beq.n	8008cc4 <_realloc_r+0x1c>
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	f7ff f9c9 	bl	8008078 <memcpy>
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff fd63 	bl	80087b4 <_free_r>
 8008cee:	e7e9      	b.n	8008cc4 <_realloc_r+0x1c>
 8008cf0:	4635      	mov	r5, r6
 8008cf2:	e7e7      	b.n	8008cc4 <_realloc_r+0x1c>

08008cf4 <__sfputc_r>:
 8008cf4:	6893      	ldr	r3, [r2, #8]
 8008cf6:	b410      	push	{r4}
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	6093      	str	r3, [r2, #8]
 8008cfe:	da07      	bge.n	8008d10 <__sfputc_r+0x1c>
 8008d00:	6994      	ldr	r4, [r2, #24]
 8008d02:	42a3      	cmp	r3, r4
 8008d04:	db01      	blt.n	8008d0a <__sfputc_r+0x16>
 8008d06:	290a      	cmp	r1, #10
 8008d08:	d102      	bne.n	8008d10 <__sfputc_r+0x1c>
 8008d0a:	bc10      	pop	{r4}
 8008d0c:	f000 b94a 	b.w	8008fa4 <__swbuf_r>
 8008d10:	6813      	ldr	r3, [r2, #0]
 8008d12:	1c58      	adds	r0, r3, #1
 8008d14:	6010      	str	r0, [r2, #0]
 8008d16:	7019      	strb	r1, [r3, #0]
 8008d18:	4608      	mov	r0, r1
 8008d1a:	bc10      	pop	{r4}
 8008d1c:	4770      	bx	lr

08008d1e <__sfputs_r>:
 8008d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d20:	4606      	mov	r6, r0
 8008d22:	460f      	mov	r7, r1
 8008d24:	4614      	mov	r4, r2
 8008d26:	18d5      	adds	r5, r2, r3
 8008d28:	42ac      	cmp	r4, r5
 8008d2a:	d101      	bne.n	8008d30 <__sfputs_r+0x12>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e007      	b.n	8008d40 <__sfputs_r+0x22>
 8008d30:	463a      	mov	r2, r7
 8008d32:	4630      	mov	r0, r6
 8008d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d38:	f7ff ffdc 	bl	8008cf4 <__sfputc_r>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d1f3      	bne.n	8008d28 <__sfputs_r+0xa>
 8008d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d44 <_vfiprintf_r>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	460d      	mov	r5, r1
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	4698      	mov	r8, r3
 8008d4e:	4606      	mov	r6, r0
 8008d50:	b09d      	sub	sp, #116	; 0x74
 8008d52:	b118      	cbz	r0, 8008d5c <_vfiprintf_r+0x18>
 8008d54:	6983      	ldr	r3, [r0, #24]
 8008d56:	b90b      	cbnz	r3, 8008d5c <_vfiprintf_r+0x18>
 8008d58:	f000 fb14 	bl	8009384 <__sinit>
 8008d5c:	4b89      	ldr	r3, [pc, #548]	; (8008f84 <_vfiprintf_r+0x240>)
 8008d5e:	429d      	cmp	r5, r3
 8008d60:	d11b      	bne.n	8008d9a <_vfiprintf_r+0x56>
 8008d62:	6875      	ldr	r5, [r6, #4]
 8008d64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d66:	07d9      	lsls	r1, r3, #31
 8008d68:	d405      	bmi.n	8008d76 <_vfiprintf_r+0x32>
 8008d6a:	89ab      	ldrh	r3, [r5, #12]
 8008d6c:	059a      	lsls	r2, r3, #22
 8008d6e:	d402      	bmi.n	8008d76 <_vfiprintf_r+0x32>
 8008d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d72:	f000 fba5 	bl	80094c0 <__retarget_lock_acquire_recursive>
 8008d76:	89ab      	ldrh	r3, [r5, #12]
 8008d78:	071b      	lsls	r3, r3, #28
 8008d7a:	d501      	bpl.n	8008d80 <_vfiprintf_r+0x3c>
 8008d7c:	692b      	ldr	r3, [r5, #16]
 8008d7e:	b9eb      	cbnz	r3, 8008dbc <_vfiprintf_r+0x78>
 8008d80:	4629      	mov	r1, r5
 8008d82:	4630      	mov	r0, r6
 8008d84:	f000 f96e 	bl	8009064 <__swsetup_r>
 8008d88:	b1c0      	cbz	r0, 8008dbc <_vfiprintf_r+0x78>
 8008d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d8c:	07dc      	lsls	r4, r3, #31
 8008d8e:	d50e      	bpl.n	8008dae <_vfiprintf_r+0x6a>
 8008d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d94:	b01d      	add	sp, #116	; 0x74
 8008d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9a:	4b7b      	ldr	r3, [pc, #492]	; (8008f88 <_vfiprintf_r+0x244>)
 8008d9c:	429d      	cmp	r5, r3
 8008d9e:	d101      	bne.n	8008da4 <_vfiprintf_r+0x60>
 8008da0:	68b5      	ldr	r5, [r6, #8]
 8008da2:	e7df      	b.n	8008d64 <_vfiprintf_r+0x20>
 8008da4:	4b79      	ldr	r3, [pc, #484]	; (8008f8c <_vfiprintf_r+0x248>)
 8008da6:	429d      	cmp	r5, r3
 8008da8:	bf08      	it	eq
 8008daa:	68f5      	ldreq	r5, [r6, #12]
 8008dac:	e7da      	b.n	8008d64 <_vfiprintf_r+0x20>
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	0598      	lsls	r0, r3, #22
 8008db2:	d4ed      	bmi.n	8008d90 <_vfiprintf_r+0x4c>
 8008db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008db6:	f000 fb84 	bl	80094c2 <__retarget_lock_release_recursive>
 8008dba:	e7e9      	b.n	8008d90 <_vfiprintf_r+0x4c>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dc6:	2330      	movs	r3, #48	; 0x30
 8008dc8:	f04f 0901 	mov.w	r9, #1
 8008dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dd0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008f90 <_vfiprintf_r+0x24c>
 8008dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dd8:	4623      	mov	r3, r4
 8008dda:	469a      	mov	sl, r3
 8008ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de0:	b10a      	cbz	r2, 8008de6 <_vfiprintf_r+0xa2>
 8008de2:	2a25      	cmp	r2, #37	; 0x25
 8008de4:	d1f9      	bne.n	8008dda <_vfiprintf_r+0x96>
 8008de6:	ebba 0b04 	subs.w	fp, sl, r4
 8008dea:	d00b      	beq.n	8008e04 <_vfiprintf_r+0xc0>
 8008dec:	465b      	mov	r3, fp
 8008dee:	4622      	mov	r2, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff ff93 	bl	8008d1e <__sfputs_r>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	f000 80aa 	beq.w	8008f52 <_vfiprintf_r+0x20e>
 8008dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e00:	445a      	add	r2, fp
 8008e02:	9209      	str	r2, [sp, #36]	; 0x24
 8008e04:	f89a 3000 	ldrb.w	r3, [sl]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 80a2 	beq.w	8008f52 <_vfiprintf_r+0x20e>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e18:	f10a 0a01 	add.w	sl, sl, #1
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	9307      	str	r3, [sp, #28]
 8008e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e24:	931a      	str	r3, [sp, #104]	; 0x68
 8008e26:	4654      	mov	r4, sl
 8008e28:	2205      	movs	r2, #5
 8008e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e2e:	4858      	ldr	r0, [pc, #352]	; (8008f90 <_vfiprintf_r+0x24c>)
 8008e30:	f7ff f914 	bl	800805c <memchr>
 8008e34:	9a04      	ldr	r2, [sp, #16]
 8008e36:	b9d8      	cbnz	r0, 8008e70 <_vfiprintf_r+0x12c>
 8008e38:	06d1      	lsls	r1, r2, #27
 8008e3a:	bf44      	itt	mi
 8008e3c:	2320      	movmi	r3, #32
 8008e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e42:	0713      	lsls	r3, r2, #28
 8008e44:	bf44      	itt	mi
 8008e46:	232b      	movmi	r3, #43	; 0x2b
 8008e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e50:	2b2a      	cmp	r3, #42	; 0x2a
 8008e52:	d015      	beq.n	8008e80 <_vfiprintf_r+0x13c>
 8008e54:	4654      	mov	r4, sl
 8008e56:	2000      	movs	r0, #0
 8008e58:	f04f 0c0a 	mov.w	ip, #10
 8008e5c:	9a07      	ldr	r2, [sp, #28]
 8008e5e:	4621      	mov	r1, r4
 8008e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e64:	3b30      	subs	r3, #48	; 0x30
 8008e66:	2b09      	cmp	r3, #9
 8008e68:	d94e      	bls.n	8008f08 <_vfiprintf_r+0x1c4>
 8008e6a:	b1b0      	cbz	r0, 8008e9a <_vfiprintf_r+0x156>
 8008e6c:	9207      	str	r2, [sp, #28]
 8008e6e:	e014      	b.n	8008e9a <_vfiprintf_r+0x156>
 8008e70:	eba0 0308 	sub.w	r3, r0, r8
 8008e74:	fa09 f303 	lsl.w	r3, r9, r3
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	46a2      	mov	sl, r4
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	e7d2      	b.n	8008e26 <_vfiprintf_r+0xe2>
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	1d19      	adds	r1, r3, #4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	9103      	str	r1, [sp, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bfbb      	ittet	lt
 8008e8c:	425b      	neglt	r3, r3
 8008e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e92:	9307      	strge	r3, [sp, #28]
 8008e94:	9307      	strlt	r3, [sp, #28]
 8008e96:	bfb8      	it	lt
 8008e98:	9204      	strlt	r2, [sp, #16]
 8008e9a:	7823      	ldrb	r3, [r4, #0]
 8008e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e9e:	d10c      	bne.n	8008eba <_vfiprintf_r+0x176>
 8008ea0:	7863      	ldrb	r3, [r4, #1]
 8008ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ea4:	d135      	bne.n	8008f12 <_vfiprintf_r+0x1ce>
 8008ea6:	9b03      	ldr	r3, [sp, #12]
 8008ea8:	3402      	adds	r4, #2
 8008eaa:	1d1a      	adds	r2, r3, #4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	9203      	str	r2, [sp, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	bfb8      	it	lt
 8008eb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008eb8:	9305      	str	r3, [sp, #20]
 8008eba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fa0 <_vfiprintf_r+0x25c>
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	7821      	ldrb	r1, [r4, #0]
 8008ec4:	f7ff f8ca 	bl	800805c <memchr>
 8008ec8:	b140      	cbz	r0, 8008edc <_vfiprintf_r+0x198>
 8008eca:	2340      	movs	r3, #64	; 0x40
 8008ecc:	eba0 000a 	sub.w	r0, r0, sl
 8008ed0:	fa03 f000 	lsl.w	r0, r3, r0
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	3401      	adds	r4, #1
 8008ed8:	4303      	orrs	r3, r0
 8008eda:	9304      	str	r3, [sp, #16]
 8008edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee0:	2206      	movs	r2, #6
 8008ee2:	482c      	ldr	r0, [pc, #176]	; (8008f94 <_vfiprintf_r+0x250>)
 8008ee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ee8:	f7ff f8b8 	bl	800805c <memchr>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d03f      	beq.n	8008f70 <_vfiprintf_r+0x22c>
 8008ef0:	4b29      	ldr	r3, [pc, #164]	; (8008f98 <_vfiprintf_r+0x254>)
 8008ef2:	bb1b      	cbnz	r3, 8008f3c <_vfiprintf_r+0x1f8>
 8008ef4:	9b03      	ldr	r3, [sp, #12]
 8008ef6:	3307      	adds	r3, #7
 8008ef8:	f023 0307 	bic.w	r3, r3, #7
 8008efc:	3308      	adds	r3, #8
 8008efe:	9303      	str	r3, [sp, #12]
 8008f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f02:	443b      	add	r3, r7
 8008f04:	9309      	str	r3, [sp, #36]	; 0x24
 8008f06:	e767      	b.n	8008dd8 <_vfiprintf_r+0x94>
 8008f08:	460c      	mov	r4, r1
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f10:	e7a5      	b.n	8008e5e <_vfiprintf_r+0x11a>
 8008f12:	2300      	movs	r3, #0
 8008f14:	f04f 0c0a 	mov.w	ip, #10
 8008f18:	4619      	mov	r1, r3
 8008f1a:	3401      	adds	r4, #1
 8008f1c:	9305      	str	r3, [sp, #20]
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f24:	3a30      	subs	r2, #48	; 0x30
 8008f26:	2a09      	cmp	r2, #9
 8008f28:	d903      	bls.n	8008f32 <_vfiprintf_r+0x1ee>
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0c5      	beq.n	8008eba <_vfiprintf_r+0x176>
 8008f2e:	9105      	str	r1, [sp, #20]
 8008f30:	e7c3      	b.n	8008eba <_vfiprintf_r+0x176>
 8008f32:	4604      	mov	r4, r0
 8008f34:	2301      	movs	r3, #1
 8008f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f3a:	e7f0      	b.n	8008f1e <_vfiprintf_r+0x1da>
 8008f3c:	ab03      	add	r3, sp, #12
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	462a      	mov	r2, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <_vfiprintf_r+0x258>)
 8008f46:	a904      	add	r1, sp, #16
 8008f48:	f7fd fe1e 	bl	8006b88 <_printf_float>
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	1c78      	adds	r0, r7, #1
 8008f50:	d1d6      	bne.n	8008f00 <_vfiprintf_r+0x1bc>
 8008f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f54:	07d9      	lsls	r1, r3, #31
 8008f56:	d405      	bmi.n	8008f64 <_vfiprintf_r+0x220>
 8008f58:	89ab      	ldrh	r3, [r5, #12]
 8008f5a:	059a      	lsls	r2, r3, #22
 8008f5c:	d402      	bmi.n	8008f64 <_vfiprintf_r+0x220>
 8008f5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f60:	f000 faaf 	bl	80094c2 <__retarget_lock_release_recursive>
 8008f64:	89ab      	ldrh	r3, [r5, #12]
 8008f66:	065b      	lsls	r3, r3, #25
 8008f68:	f53f af12 	bmi.w	8008d90 <_vfiprintf_r+0x4c>
 8008f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f6e:	e711      	b.n	8008d94 <_vfiprintf_r+0x50>
 8008f70:	ab03      	add	r3, sp, #12
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	462a      	mov	r2, r5
 8008f76:	4630      	mov	r0, r6
 8008f78:	4b08      	ldr	r3, [pc, #32]	; (8008f9c <_vfiprintf_r+0x258>)
 8008f7a:	a904      	add	r1, sp, #16
 8008f7c:	f7fe f8a0 	bl	80070c0 <_printf_i>
 8008f80:	e7e4      	b.n	8008f4c <_vfiprintf_r+0x208>
 8008f82:	bf00      	nop
 8008f84:	0800b22c 	.word	0x0800b22c
 8008f88:	0800b24c 	.word	0x0800b24c
 8008f8c:	0800b20c 	.word	0x0800b20c
 8008f90:	0800b0b4 	.word	0x0800b0b4
 8008f94:	0800b0be 	.word	0x0800b0be
 8008f98:	08006b89 	.word	0x08006b89
 8008f9c:	08008d1f 	.word	0x08008d1f
 8008fa0:	0800b0ba 	.word	0x0800b0ba

08008fa4 <__swbuf_r>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	460e      	mov	r6, r1
 8008fa8:	4614      	mov	r4, r2
 8008faa:	4605      	mov	r5, r0
 8008fac:	b118      	cbz	r0, 8008fb6 <__swbuf_r+0x12>
 8008fae:	6983      	ldr	r3, [r0, #24]
 8008fb0:	b90b      	cbnz	r3, 8008fb6 <__swbuf_r+0x12>
 8008fb2:	f000 f9e7 	bl	8009384 <__sinit>
 8008fb6:	4b21      	ldr	r3, [pc, #132]	; (800903c <__swbuf_r+0x98>)
 8008fb8:	429c      	cmp	r4, r3
 8008fba:	d12b      	bne.n	8009014 <__swbuf_r+0x70>
 8008fbc:	686c      	ldr	r4, [r5, #4]
 8008fbe:	69a3      	ldr	r3, [r4, #24]
 8008fc0:	60a3      	str	r3, [r4, #8]
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	071a      	lsls	r2, r3, #28
 8008fc6:	d52f      	bpl.n	8009028 <__swbuf_r+0x84>
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	b36b      	cbz	r3, 8009028 <__swbuf_r+0x84>
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	6820      	ldr	r0, [r4, #0]
 8008fd0:	b2f6      	uxtb	r6, r6
 8008fd2:	1ac0      	subs	r0, r0, r3
 8008fd4:	6963      	ldr	r3, [r4, #20]
 8008fd6:	4637      	mov	r7, r6
 8008fd8:	4283      	cmp	r3, r0
 8008fda:	dc04      	bgt.n	8008fe6 <__swbuf_r+0x42>
 8008fdc:	4621      	mov	r1, r4
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 f93c 	bl	800925c <_fflush_r>
 8008fe4:	bb30      	cbnz	r0, 8009034 <__swbuf_r+0x90>
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	3001      	adds	r0, #1
 8008fea:	3b01      	subs	r3, #1
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	6022      	str	r2, [r4, #0]
 8008ff4:	701e      	strb	r6, [r3, #0]
 8008ff6:	6963      	ldr	r3, [r4, #20]
 8008ff8:	4283      	cmp	r3, r0
 8008ffa:	d004      	beq.n	8009006 <__swbuf_r+0x62>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	07db      	lsls	r3, r3, #31
 8009000:	d506      	bpl.n	8009010 <__swbuf_r+0x6c>
 8009002:	2e0a      	cmp	r6, #10
 8009004:	d104      	bne.n	8009010 <__swbuf_r+0x6c>
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	f000 f927 	bl	800925c <_fflush_r>
 800900e:	b988      	cbnz	r0, 8009034 <__swbuf_r+0x90>
 8009010:	4638      	mov	r0, r7
 8009012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009014:	4b0a      	ldr	r3, [pc, #40]	; (8009040 <__swbuf_r+0x9c>)
 8009016:	429c      	cmp	r4, r3
 8009018:	d101      	bne.n	800901e <__swbuf_r+0x7a>
 800901a:	68ac      	ldr	r4, [r5, #8]
 800901c:	e7cf      	b.n	8008fbe <__swbuf_r+0x1a>
 800901e:	4b09      	ldr	r3, [pc, #36]	; (8009044 <__swbuf_r+0xa0>)
 8009020:	429c      	cmp	r4, r3
 8009022:	bf08      	it	eq
 8009024:	68ec      	ldreq	r4, [r5, #12]
 8009026:	e7ca      	b.n	8008fbe <__swbuf_r+0x1a>
 8009028:	4621      	mov	r1, r4
 800902a:	4628      	mov	r0, r5
 800902c:	f000 f81a 	bl	8009064 <__swsetup_r>
 8009030:	2800      	cmp	r0, #0
 8009032:	d0cb      	beq.n	8008fcc <__swbuf_r+0x28>
 8009034:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009038:	e7ea      	b.n	8009010 <__swbuf_r+0x6c>
 800903a:	bf00      	nop
 800903c:	0800b22c 	.word	0x0800b22c
 8009040:	0800b24c 	.word	0x0800b24c
 8009044:	0800b20c 	.word	0x0800b20c

08009048 <__ascii_wctomb>:
 8009048:	4603      	mov	r3, r0
 800904a:	4608      	mov	r0, r1
 800904c:	b141      	cbz	r1, 8009060 <__ascii_wctomb+0x18>
 800904e:	2aff      	cmp	r2, #255	; 0xff
 8009050:	d904      	bls.n	800905c <__ascii_wctomb+0x14>
 8009052:	228a      	movs	r2, #138	; 0x8a
 8009054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	4770      	bx	lr
 800905c:	2001      	movs	r0, #1
 800905e:	700a      	strb	r2, [r1, #0]
 8009060:	4770      	bx	lr
	...

08009064 <__swsetup_r>:
 8009064:	4b32      	ldr	r3, [pc, #200]	; (8009130 <__swsetup_r+0xcc>)
 8009066:	b570      	push	{r4, r5, r6, lr}
 8009068:	681d      	ldr	r5, [r3, #0]
 800906a:	4606      	mov	r6, r0
 800906c:	460c      	mov	r4, r1
 800906e:	b125      	cbz	r5, 800907a <__swsetup_r+0x16>
 8009070:	69ab      	ldr	r3, [r5, #24]
 8009072:	b913      	cbnz	r3, 800907a <__swsetup_r+0x16>
 8009074:	4628      	mov	r0, r5
 8009076:	f000 f985 	bl	8009384 <__sinit>
 800907a:	4b2e      	ldr	r3, [pc, #184]	; (8009134 <__swsetup_r+0xd0>)
 800907c:	429c      	cmp	r4, r3
 800907e:	d10f      	bne.n	80090a0 <__swsetup_r+0x3c>
 8009080:	686c      	ldr	r4, [r5, #4]
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009088:	0719      	lsls	r1, r3, #28
 800908a:	d42c      	bmi.n	80090e6 <__swsetup_r+0x82>
 800908c:	06dd      	lsls	r5, r3, #27
 800908e:	d411      	bmi.n	80090b4 <__swsetup_r+0x50>
 8009090:	2309      	movs	r3, #9
 8009092:	6033      	str	r3, [r6, #0]
 8009094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	e03e      	b.n	800911e <__swsetup_r+0xba>
 80090a0:	4b25      	ldr	r3, [pc, #148]	; (8009138 <__swsetup_r+0xd4>)
 80090a2:	429c      	cmp	r4, r3
 80090a4:	d101      	bne.n	80090aa <__swsetup_r+0x46>
 80090a6:	68ac      	ldr	r4, [r5, #8]
 80090a8:	e7eb      	b.n	8009082 <__swsetup_r+0x1e>
 80090aa:	4b24      	ldr	r3, [pc, #144]	; (800913c <__swsetup_r+0xd8>)
 80090ac:	429c      	cmp	r4, r3
 80090ae:	bf08      	it	eq
 80090b0:	68ec      	ldreq	r4, [r5, #12]
 80090b2:	e7e6      	b.n	8009082 <__swsetup_r+0x1e>
 80090b4:	0758      	lsls	r0, r3, #29
 80090b6:	d512      	bpl.n	80090de <__swsetup_r+0x7a>
 80090b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ba:	b141      	cbz	r1, 80090ce <__swsetup_r+0x6a>
 80090bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090c0:	4299      	cmp	r1, r3
 80090c2:	d002      	beq.n	80090ca <__swsetup_r+0x66>
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7ff fb75 	bl	80087b4 <_free_r>
 80090ca:	2300      	movs	r3, #0
 80090cc:	6363      	str	r3, [r4, #52]	; 0x34
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090d4:	81a3      	strh	r3, [r4, #12]
 80090d6:	2300      	movs	r3, #0
 80090d8:	6063      	str	r3, [r4, #4]
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	f043 0308 	orr.w	r3, r3, #8
 80090e4:	81a3      	strh	r3, [r4, #12]
 80090e6:	6923      	ldr	r3, [r4, #16]
 80090e8:	b94b      	cbnz	r3, 80090fe <__swsetup_r+0x9a>
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f4:	d003      	beq.n	80090fe <__swsetup_r+0x9a>
 80090f6:	4621      	mov	r1, r4
 80090f8:	4630      	mov	r0, r6
 80090fa:	f000 fa07 	bl	800950c <__smakebuf_r>
 80090fe:	89a0      	ldrh	r0, [r4, #12]
 8009100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009104:	f010 0301 	ands.w	r3, r0, #1
 8009108:	d00a      	beq.n	8009120 <__swsetup_r+0xbc>
 800910a:	2300      	movs	r3, #0
 800910c:	60a3      	str	r3, [r4, #8]
 800910e:	6963      	ldr	r3, [r4, #20]
 8009110:	425b      	negs	r3, r3
 8009112:	61a3      	str	r3, [r4, #24]
 8009114:	6923      	ldr	r3, [r4, #16]
 8009116:	b943      	cbnz	r3, 800912a <__swsetup_r+0xc6>
 8009118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800911c:	d1ba      	bne.n	8009094 <__swsetup_r+0x30>
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	0781      	lsls	r1, r0, #30
 8009122:	bf58      	it	pl
 8009124:	6963      	ldrpl	r3, [r4, #20]
 8009126:	60a3      	str	r3, [r4, #8]
 8009128:	e7f4      	b.n	8009114 <__swsetup_r+0xb0>
 800912a:	2000      	movs	r0, #0
 800912c:	e7f7      	b.n	800911e <__swsetup_r+0xba>
 800912e:	bf00      	nop
 8009130:	2000000c 	.word	0x2000000c
 8009134:	0800b22c 	.word	0x0800b22c
 8009138:	0800b24c 	.word	0x0800b24c
 800913c:	0800b20c 	.word	0x0800b20c

08009140 <abort>:
 8009140:	2006      	movs	r0, #6
 8009142:	b508      	push	{r3, lr}
 8009144:	f000 fa52 	bl	80095ec <raise>
 8009148:	2001      	movs	r0, #1
 800914a:	f7fa f8d2 	bl	80032f2 <_exit>
	...

08009150 <__sflush_r>:
 8009150:	898a      	ldrh	r2, [r1, #12]
 8009152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009156:	4605      	mov	r5, r0
 8009158:	0710      	lsls	r0, r2, #28
 800915a:	460c      	mov	r4, r1
 800915c:	d458      	bmi.n	8009210 <__sflush_r+0xc0>
 800915e:	684b      	ldr	r3, [r1, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	dc05      	bgt.n	8009170 <__sflush_r+0x20>
 8009164:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009166:	2b00      	cmp	r3, #0
 8009168:	dc02      	bgt.n	8009170 <__sflush_r+0x20>
 800916a:	2000      	movs	r0, #0
 800916c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009172:	2e00      	cmp	r6, #0
 8009174:	d0f9      	beq.n	800916a <__sflush_r+0x1a>
 8009176:	2300      	movs	r3, #0
 8009178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800917c:	682f      	ldr	r7, [r5, #0]
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	d032      	beq.n	80091e8 <__sflush_r+0x98>
 8009182:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	075a      	lsls	r2, r3, #29
 8009188:	d505      	bpl.n	8009196 <__sflush_r+0x46>
 800918a:	6863      	ldr	r3, [r4, #4]
 800918c:	1ac0      	subs	r0, r0, r3
 800918e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009190:	b10b      	cbz	r3, 8009196 <__sflush_r+0x46>
 8009192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009194:	1ac0      	subs	r0, r0, r3
 8009196:	2300      	movs	r3, #0
 8009198:	4602      	mov	r2, r0
 800919a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800919c:	4628      	mov	r0, r5
 800919e:	6a21      	ldr	r1, [r4, #32]
 80091a0:	47b0      	blx	r6
 80091a2:	1c43      	adds	r3, r0, #1
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	d106      	bne.n	80091b6 <__sflush_r+0x66>
 80091a8:	6829      	ldr	r1, [r5, #0]
 80091aa:	291d      	cmp	r1, #29
 80091ac:	d82c      	bhi.n	8009208 <__sflush_r+0xb8>
 80091ae:	4a2a      	ldr	r2, [pc, #168]	; (8009258 <__sflush_r+0x108>)
 80091b0:	40ca      	lsrs	r2, r1
 80091b2:	07d6      	lsls	r6, r2, #31
 80091b4:	d528      	bpl.n	8009208 <__sflush_r+0xb8>
 80091b6:	2200      	movs	r2, #0
 80091b8:	6062      	str	r2, [r4, #4]
 80091ba:	6922      	ldr	r2, [r4, #16]
 80091bc:	04d9      	lsls	r1, r3, #19
 80091be:	6022      	str	r2, [r4, #0]
 80091c0:	d504      	bpl.n	80091cc <__sflush_r+0x7c>
 80091c2:	1c42      	adds	r2, r0, #1
 80091c4:	d101      	bne.n	80091ca <__sflush_r+0x7a>
 80091c6:	682b      	ldr	r3, [r5, #0]
 80091c8:	b903      	cbnz	r3, 80091cc <__sflush_r+0x7c>
 80091ca:	6560      	str	r0, [r4, #84]	; 0x54
 80091cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ce:	602f      	str	r7, [r5, #0]
 80091d0:	2900      	cmp	r1, #0
 80091d2:	d0ca      	beq.n	800916a <__sflush_r+0x1a>
 80091d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d8:	4299      	cmp	r1, r3
 80091da:	d002      	beq.n	80091e2 <__sflush_r+0x92>
 80091dc:	4628      	mov	r0, r5
 80091de:	f7ff fae9 	bl	80087b4 <_free_r>
 80091e2:	2000      	movs	r0, #0
 80091e4:	6360      	str	r0, [r4, #52]	; 0x34
 80091e6:	e7c1      	b.n	800916c <__sflush_r+0x1c>
 80091e8:	6a21      	ldr	r1, [r4, #32]
 80091ea:	2301      	movs	r3, #1
 80091ec:	4628      	mov	r0, r5
 80091ee:	47b0      	blx	r6
 80091f0:	1c41      	adds	r1, r0, #1
 80091f2:	d1c7      	bne.n	8009184 <__sflush_r+0x34>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0c4      	beq.n	8009184 <__sflush_r+0x34>
 80091fa:	2b1d      	cmp	r3, #29
 80091fc:	d001      	beq.n	8009202 <__sflush_r+0xb2>
 80091fe:	2b16      	cmp	r3, #22
 8009200:	d101      	bne.n	8009206 <__sflush_r+0xb6>
 8009202:	602f      	str	r7, [r5, #0]
 8009204:	e7b1      	b.n	800916a <__sflush_r+0x1a>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	e7ad      	b.n	800916c <__sflush_r+0x1c>
 8009210:	690f      	ldr	r7, [r1, #16]
 8009212:	2f00      	cmp	r7, #0
 8009214:	d0a9      	beq.n	800916a <__sflush_r+0x1a>
 8009216:	0793      	lsls	r3, r2, #30
 8009218:	bf18      	it	ne
 800921a:	2300      	movne	r3, #0
 800921c:	680e      	ldr	r6, [r1, #0]
 800921e:	bf08      	it	eq
 8009220:	694b      	ldreq	r3, [r1, #20]
 8009222:	eba6 0807 	sub.w	r8, r6, r7
 8009226:	600f      	str	r7, [r1, #0]
 8009228:	608b      	str	r3, [r1, #8]
 800922a:	f1b8 0f00 	cmp.w	r8, #0
 800922e:	dd9c      	ble.n	800916a <__sflush_r+0x1a>
 8009230:	4643      	mov	r3, r8
 8009232:	463a      	mov	r2, r7
 8009234:	4628      	mov	r0, r5
 8009236:	6a21      	ldr	r1, [r4, #32]
 8009238:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800923a:	47b0      	blx	r6
 800923c:	2800      	cmp	r0, #0
 800923e:	dc06      	bgt.n	800924e <__sflush_r+0xfe>
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800924a:	81a3      	strh	r3, [r4, #12]
 800924c:	e78e      	b.n	800916c <__sflush_r+0x1c>
 800924e:	4407      	add	r7, r0
 8009250:	eba8 0800 	sub.w	r8, r8, r0
 8009254:	e7e9      	b.n	800922a <__sflush_r+0xda>
 8009256:	bf00      	nop
 8009258:	20400001 	.word	0x20400001

0800925c <_fflush_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	690b      	ldr	r3, [r1, #16]
 8009260:	4605      	mov	r5, r0
 8009262:	460c      	mov	r4, r1
 8009264:	b913      	cbnz	r3, 800926c <_fflush_r+0x10>
 8009266:	2500      	movs	r5, #0
 8009268:	4628      	mov	r0, r5
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	b118      	cbz	r0, 8009276 <_fflush_r+0x1a>
 800926e:	6983      	ldr	r3, [r0, #24]
 8009270:	b90b      	cbnz	r3, 8009276 <_fflush_r+0x1a>
 8009272:	f000 f887 	bl	8009384 <__sinit>
 8009276:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <_fflush_r+0x6c>)
 8009278:	429c      	cmp	r4, r3
 800927a:	d11b      	bne.n	80092b4 <_fflush_r+0x58>
 800927c:	686c      	ldr	r4, [r5, #4]
 800927e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0ef      	beq.n	8009266 <_fflush_r+0xa>
 8009286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009288:	07d0      	lsls	r0, r2, #31
 800928a:	d404      	bmi.n	8009296 <_fflush_r+0x3a>
 800928c:	0599      	lsls	r1, r3, #22
 800928e:	d402      	bmi.n	8009296 <_fflush_r+0x3a>
 8009290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009292:	f000 f915 	bl	80094c0 <__retarget_lock_acquire_recursive>
 8009296:	4628      	mov	r0, r5
 8009298:	4621      	mov	r1, r4
 800929a:	f7ff ff59 	bl	8009150 <__sflush_r>
 800929e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092a0:	4605      	mov	r5, r0
 80092a2:	07da      	lsls	r2, r3, #31
 80092a4:	d4e0      	bmi.n	8009268 <_fflush_r+0xc>
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	059b      	lsls	r3, r3, #22
 80092aa:	d4dd      	bmi.n	8009268 <_fflush_r+0xc>
 80092ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ae:	f000 f908 	bl	80094c2 <__retarget_lock_release_recursive>
 80092b2:	e7d9      	b.n	8009268 <_fflush_r+0xc>
 80092b4:	4b05      	ldr	r3, [pc, #20]	; (80092cc <_fflush_r+0x70>)
 80092b6:	429c      	cmp	r4, r3
 80092b8:	d101      	bne.n	80092be <_fflush_r+0x62>
 80092ba:	68ac      	ldr	r4, [r5, #8]
 80092bc:	e7df      	b.n	800927e <_fflush_r+0x22>
 80092be:	4b04      	ldr	r3, [pc, #16]	; (80092d0 <_fflush_r+0x74>)
 80092c0:	429c      	cmp	r4, r3
 80092c2:	bf08      	it	eq
 80092c4:	68ec      	ldreq	r4, [r5, #12]
 80092c6:	e7da      	b.n	800927e <_fflush_r+0x22>
 80092c8:	0800b22c 	.word	0x0800b22c
 80092cc:	0800b24c 	.word	0x0800b24c
 80092d0:	0800b20c 	.word	0x0800b20c

080092d4 <std>:
 80092d4:	2300      	movs	r3, #0
 80092d6:	b510      	push	{r4, lr}
 80092d8:	4604      	mov	r4, r0
 80092da:	e9c0 3300 	strd	r3, r3, [r0]
 80092de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092e2:	6083      	str	r3, [r0, #8]
 80092e4:	8181      	strh	r1, [r0, #12]
 80092e6:	6643      	str	r3, [r0, #100]	; 0x64
 80092e8:	81c2      	strh	r2, [r0, #14]
 80092ea:	6183      	str	r3, [r0, #24]
 80092ec:	4619      	mov	r1, r3
 80092ee:	2208      	movs	r2, #8
 80092f0:	305c      	adds	r0, #92	; 0x5c
 80092f2:	f7fd fba3 	bl	8006a3c <memset>
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <std+0x38>)
 80092f8:	6224      	str	r4, [r4, #32]
 80092fa:	6263      	str	r3, [r4, #36]	; 0x24
 80092fc:	4b04      	ldr	r3, [pc, #16]	; (8009310 <std+0x3c>)
 80092fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8009300:	4b04      	ldr	r3, [pc, #16]	; (8009314 <std+0x40>)
 8009302:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009304:	4b04      	ldr	r3, [pc, #16]	; (8009318 <std+0x44>)
 8009306:	6323      	str	r3, [r4, #48]	; 0x30
 8009308:	bd10      	pop	{r4, pc}
 800930a:	bf00      	nop
 800930c:	08009625 	.word	0x08009625
 8009310:	08009647 	.word	0x08009647
 8009314:	0800967f 	.word	0x0800967f
 8009318:	080096a3 	.word	0x080096a3

0800931c <_cleanup_r>:
 800931c:	4901      	ldr	r1, [pc, #4]	; (8009324 <_cleanup_r+0x8>)
 800931e:	f000 b8af 	b.w	8009480 <_fwalk_reent>
 8009322:	bf00      	nop
 8009324:	0800925d 	.word	0x0800925d

08009328 <__sfmoreglue>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	2568      	movs	r5, #104	; 0x68
 800932c:	1e4a      	subs	r2, r1, #1
 800932e:	4355      	muls	r5, r2
 8009330:	460e      	mov	r6, r1
 8009332:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009336:	f7ff fa89 	bl	800884c <_malloc_r>
 800933a:	4604      	mov	r4, r0
 800933c:	b140      	cbz	r0, 8009350 <__sfmoreglue+0x28>
 800933e:	2100      	movs	r1, #0
 8009340:	e9c0 1600 	strd	r1, r6, [r0]
 8009344:	300c      	adds	r0, #12
 8009346:	60a0      	str	r0, [r4, #8]
 8009348:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800934c:	f7fd fb76 	bl	8006a3c <memset>
 8009350:	4620      	mov	r0, r4
 8009352:	bd70      	pop	{r4, r5, r6, pc}

08009354 <__sfp_lock_acquire>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__sfp_lock_acquire+0x8>)
 8009356:	f000 b8b3 	b.w	80094c0 <__retarget_lock_acquire_recursive>
 800935a:	bf00      	nop
 800935c:	20000d9c 	.word	0x20000d9c

08009360 <__sfp_lock_release>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__sfp_lock_release+0x8>)
 8009362:	f000 b8ae 	b.w	80094c2 <__retarget_lock_release_recursive>
 8009366:	bf00      	nop
 8009368:	20000d9c 	.word	0x20000d9c

0800936c <__sinit_lock_acquire>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__sinit_lock_acquire+0x8>)
 800936e:	f000 b8a7 	b.w	80094c0 <__retarget_lock_acquire_recursive>
 8009372:	bf00      	nop
 8009374:	20000d97 	.word	0x20000d97

08009378 <__sinit_lock_release>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__sinit_lock_release+0x8>)
 800937a:	f000 b8a2 	b.w	80094c2 <__retarget_lock_release_recursive>
 800937e:	bf00      	nop
 8009380:	20000d97 	.word	0x20000d97

08009384 <__sinit>:
 8009384:	b510      	push	{r4, lr}
 8009386:	4604      	mov	r4, r0
 8009388:	f7ff fff0 	bl	800936c <__sinit_lock_acquire>
 800938c:	69a3      	ldr	r3, [r4, #24]
 800938e:	b11b      	cbz	r3, 8009398 <__sinit+0x14>
 8009390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009394:	f7ff bff0 	b.w	8009378 <__sinit_lock_release>
 8009398:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800939c:	6523      	str	r3, [r4, #80]	; 0x50
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <__sinit+0x68>)
 80093a0:	4a13      	ldr	r2, [pc, #76]	; (80093f0 <__sinit+0x6c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80093a6:	42a3      	cmp	r3, r4
 80093a8:	bf08      	it	eq
 80093aa:	2301      	moveq	r3, #1
 80093ac:	4620      	mov	r0, r4
 80093ae:	bf08      	it	eq
 80093b0:	61a3      	streq	r3, [r4, #24]
 80093b2:	f000 f81f 	bl	80093f4 <__sfp>
 80093b6:	6060      	str	r0, [r4, #4]
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 f81b 	bl	80093f4 <__sfp>
 80093be:	60a0      	str	r0, [r4, #8]
 80093c0:	4620      	mov	r0, r4
 80093c2:	f000 f817 	bl	80093f4 <__sfp>
 80093c6:	2200      	movs	r2, #0
 80093c8:	2104      	movs	r1, #4
 80093ca:	60e0      	str	r0, [r4, #12]
 80093cc:	6860      	ldr	r0, [r4, #4]
 80093ce:	f7ff ff81 	bl	80092d4 <std>
 80093d2:	2201      	movs	r2, #1
 80093d4:	2109      	movs	r1, #9
 80093d6:	68a0      	ldr	r0, [r4, #8]
 80093d8:	f7ff ff7c 	bl	80092d4 <std>
 80093dc:	2202      	movs	r2, #2
 80093de:	2112      	movs	r1, #18
 80093e0:	68e0      	ldr	r0, [r4, #12]
 80093e2:	f7ff ff77 	bl	80092d4 <std>
 80093e6:	2301      	movs	r3, #1
 80093e8:	61a3      	str	r3, [r4, #24]
 80093ea:	e7d1      	b.n	8009390 <__sinit+0xc>
 80093ec:	0800ae8c 	.word	0x0800ae8c
 80093f0:	0800931d 	.word	0x0800931d

080093f4 <__sfp>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	4607      	mov	r7, r0
 80093f8:	f7ff ffac 	bl	8009354 <__sfp_lock_acquire>
 80093fc:	4b1e      	ldr	r3, [pc, #120]	; (8009478 <__sfp+0x84>)
 80093fe:	681e      	ldr	r6, [r3, #0]
 8009400:	69b3      	ldr	r3, [r6, #24]
 8009402:	b913      	cbnz	r3, 800940a <__sfp+0x16>
 8009404:	4630      	mov	r0, r6
 8009406:	f7ff ffbd 	bl	8009384 <__sinit>
 800940a:	3648      	adds	r6, #72	; 0x48
 800940c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009410:	3b01      	subs	r3, #1
 8009412:	d503      	bpl.n	800941c <__sfp+0x28>
 8009414:	6833      	ldr	r3, [r6, #0]
 8009416:	b30b      	cbz	r3, 800945c <__sfp+0x68>
 8009418:	6836      	ldr	r6, [r6, #0]
 800941a:	e7f7      	b.n	800940c <__sfp+0x18>
 800941c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009420:	b9d5      	cbnz	r5, 8009458 <__sfp+0x64>
 8009422:	4b16      	ldr	r3, [pc, #88]	; (800947c <__sfp+0x88>)
 8009424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009428:	60e3      	str	r3, [r4, #12]
 800942a:	6665      	str	r5, [r4, #100]	; 0x64
 800942c:	f000 f847 	bl	80094be <__retarget_lock_init_recursive>
 8009430:	f7ff ff96 	bl	8009360 <__sfp_lock_release>
 8009434:	2208      	movs	r2, #8
 8009436:	4629      	mov	r1, r5
 8009438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800943c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009440:	6025      	str	r5, [r4, #0]
 8009442:	61a5      	str	r5, [r4, #24]
 8009444:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009448:	f7fd faf8 	bl	8006a3c <memset>
 800944c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009450:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009454:	4620      	mov	r0, r4
 8009456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009458:	3468      	adds	r4, #104	; 0x68
 800945a:	e7d9      	b.n	8009410 <__sfp+0x1c>
 800945c:	2104      	movs	r1, #4
 800945e:	4638      	mov	r0, r7
 8009460:	f7ff ff62 	bl	8009328 <__sfmoreglue>
 8009464:	4604      	mov	r4, r0
 8009466:	6030      	str	r0, [r6, #0]
 8009468:	2800      	cmp	r0, #0
 800946a:	d1d5      	bne.n	8009418 <__sfp+0x24>
 800946c:	f7ff ff78 	bl	8009360 <__sfp_lock_release>
 8009470:	230c      	movs	r3, #12
 8009472:	603b      	str	r3, [r7, #0]
 8009474:	e7ee      	b.n	8009454 <__sfp+0x60>
 8009476:	bf00      	nop
 8009478:	0800ae8c 	.word	0x0800ae8c
 800947c:	ffff0001 	.word	0xffff0001

08009480 <_fwalk_reent>:
 8009480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009484:	4606      	mov	r6, r0
 8009486:	4688      	mov	r8, r1
 8009488:	2700      	movs	r7, #0
 800948a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800948e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009492:	f1b9 0901 	subs.w	r9, r9, #1
 8009496:	d505      	bpl.n	80094a4 <_fwalk_reent+0x24>
 8009498:	6824      	ldr	r4, [r4, #0]
 800949a:	2c00      	cmp	r4, #0
 800949c:	d1f7      	bne.n	800948e <_fwalk_reent+0xe>
 800949e:	4638      	mov	r0, r7
 80094a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094a4:	89ab      	ldrh	r3, [r5, #12]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d907      	bls.n	80094ba <_fwalk_reent+0x3a>
 80094aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094ae:	3301      	adds	r3, #1
 80094b0:	d003      	beq.n	80094ba <_fwalk_reent+0x3a>
 80094b2:	4629      	mov	r1, r5
 80094b4:	4630      	mov	r0, r6
 80094b6:	47c0      	blx	r8
 80094b8:	4307      	orrs	r7, r0
 80094ba:	3568      	adds	r5, #104	; 0x68
 80094bc:	e7e9      	b.n	8009492 <_fwalk_reent+0x12>

080094be <__retarget_lock_init_recursive>:
 80094be:	4770      	bx	lr

080094c0 <__retarget_lock_acquire_recursive>:
 80094c0:	4770      	bx	lr

080094c2 <__retarget_lock_release_recursive>:
 80094c2:	4770      	bx	lr

080094c4 <__swhatbuf_r>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	460e      	mov	r6, r1
 80094c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094cc:	4614      	mov	r4, r2
 80094ce:	2900      	cmp	r1, #0
 80094d0:	461d      	mov	r5, r3
 80094d2:	b096      	sub	sp, #88	; 0x58
 80094d4:	da07      	bge.n	80094e6 <__swhatbuf_r+0x22>
 80094d6:	2300      	movs	r3, #0
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	89b3      	ldrh	r3, [r6, #12]
 80094dc:	061a      	lsls	r2, r3, #24
 80094de:	d410      	bmi.n	8009502 <__swhatbuf_r+0x3e>
 80094e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e4:	e00e      	b.n	8009504 <__swhatbuf_r+0x40>
 80094e6:	466a      	mov	r2, sp
 80094e8:	f000 f902 	bl	80096f0 <_fstat_r>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	dbf2      	blt.n	80094d6 <__swhatbuf_r+0x12>
 80094f0:	9a01      	ldr	r2, [sp, #4]
 80094f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094fa:	425a      	negs	r2, r3
 80094fc:	415a      	adcs	r2, r3
 80094fe:	602a      	str	r2, [r5, #0]
 8009500:	e7ee      	b.n	80094e0 <__swhatbuf_r+0x1c>
 8009502:	2340      	movs	r3, #64	; 0x40
 8009504:	2000      	movs	r0, #0
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	b016      	add	sp, #88	; 0x58
 800950a:	bd70      	pop	{r4, r5, r6, pc}

0800950c <__smakebuf_r>:
 800950c:	898b      	ldrh	r3, [r1, #12]
 800950e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009510:	079d      	lsls	r5, r3, #30
 8009512:	4606      	mov	r6, r0
 8009514:	460c      	mov	r4, r1
 8009516:	d507      	bpl.n	8009528 <__smakebuf_r+0x1c>
 8009518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	6123      	str	r3, [r4, #16]
 8009520:	2301      	movs	r3, #1
 8009522:	6163      	str	r3, [r4, #20]
 8009524:	b002      	add	sp, #8
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	466a      	mov	r2, sp
 800952a:	ab01      	add	r3, sp, #4
 800952c:	f7ff ffca 	bl	80094c4 <__swhatbuf_r>
 8009530:	9900      	ldr	r1, [sp, #0]
 8009532:	4605      	mov	r5, r0
 8009534:	4630      	mov	r0, r6
 8009536:	f7ff f989 	bl	800884c <_malloc_r>
 800953a:	b948      	cbnz	r0, 8009550 <__smakebuf_r+0x44>
 800953c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009540:	059a      	lsls	r2, r3, #22
 8009542:	d4ef      	bmi.n	8009524 <__smakebuf_r+0x18>
 8009544:	f023 0303 	bic.w	r3, r3, #3
 8009548:	f043 0302 	orr.w	r3, r3, #2
 800954c:	81a3      	strh	r3, [r4, #12]
 800954e:	e7e3      	b.n	8009518 <__smakebuf_r+0xc>
 8009550:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <__smakebuf_r+0x7c>)
 8009552:	62b3      	str	r3, [r6, #40]	; 0x28
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	6020      	str	r0, [r4, #0]
 8009558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	9b00      	ldr	r3, [sp, #0]
 8009560:	6120      	str	r0, [r4, #16]
 8009562:	6163      	str	r3, [r4, #20]
 8009564:	9b01      	ldr	r3, [sp, #4]
 8009566:	b15b      	cbz	r3, 8009580 <__smakebuf_r+0x74>
 8009568:	4630      	mov	r0, r6
 800956a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800956e:	f000 f8d1 	bl	8009714 <_isatty_r>
 8009572:	b128      	cbz	r0, 8009580 <__smakebuf_r+0x74>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	f023 0303 	bic.w	r3, r3, #3
 800957a:	f043 0301 	orr.w	r3, r3, #1
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	89a0      	ldrh	r0, [r4, #12]
 8009582:	4305      	orrs	r5, r0
 8009584:	81a5      	strh	r5, [r4, #12]
 8009586:	e7cd      	b.n	8009524 <__smakebuf_r+0x18>
 8009588:	0800931d 	.word	0x0800931d

0800958c <_malloc_usable_size_r>:
 800958c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009590:	1f18      	subs	r0, r3, #4
 8009592:	2b00      	cmp	r3, #0
 8009594:	bfbc      	itt	lt
 8009596:	580b      	ldrlt	r3, [r1, r0]
 8009598:	18c0      	addlt	r0, r0, r3
 800959a:	4770      	bx	lr

0800959c <_raise_r>:
 800959c:	291f      	cmp	r1, #31
 800959e:	b538      	push	{r3, r4, r5, lr}
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	d904      	bls.n	80095b0 <_raise_r+0x14>
 80095a6:	2316      	movs	r3, #22
 80095a8:	6003      	str	r3, [r0, #0]
 80095aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095b2:	b112      	cbz	r2, 80095ba <_raise_r+0x1e>
 80095b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095b8:	b94b      	cbnz	r3, 80095ce <_raise_r+0x32>
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 f830 	bl	8009620 <_getpid_r>
 80095c0:	462a      	mov	r2, r5
 80095c2:	4601      	mov	r1, r0
 80095c4:	4620      	mov	r0, r4
 80095c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095ca:	f000 b817 	b.w	80095fc <_kill_r>
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d00a      	beq.n	80095e8 <_raise_r+0x4c>
 80095d2:	1c59      	adds	r1, r3, #1
 80095d4:	d103      	bne.n	80095de <_raise_r+0x42>
 80095d6:	2316      	movs	r3, #22
 80095d8:	6003      	str	r3, [r0, #0]
 80095da:	2001      	movs	r0, #1
 80095dc:	e7e7      	b.n	80095ae <_raise_r+0x12>
 80095de:	2400      	movs	r4, #0
 80095e0:	4628      	mov	r0, r5
 80095e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095e6:	4798      	blx	r3
 80095e8:	2000      	movs	r0, #0
 80095ea:	e7e0      	b.n	80095ae <_raise_r+0x12>

080095ec <raise>:
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <raise+0xc>)
 80095ee:	4601      	mov	r1, r0
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	f7ff bfd3 	b.w	800959c <_raise_r>
 80095f6:	bf00      	nop
 80095f8:	2000000c 	.word	0x2000000c

080095fc <_kill_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	2300      	movs	r3, #0
 8009600:	4d06      	ldr	r5, [pc, #24]	; (800961c <_kill_r+0x20>)
 8009602:	4604      	mov	r4, r0
 8009604:	4608      	mov	r0, r1
 8009606:	4611      	mov	r1, r2
 8009608:	602b      	str	r3, [r5, #0]
 800960a:	f7f9 fe62 	bl	80032d2 <_kill>
 800960e:	1c43      	adds	r3, r0, #1
 8009610:	d102      	bne.n	8009618 <_kill_r+0x1c>
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	b103      	cbz	r3, 8009618 <_kill_r+0x1c>
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	bd38      	pop	{r3, r4, r5, pc}
 800961a:	bf00      	nop
 800961c:	20000d90 	.word	0x20000d90

08009620 <_getpid_r>:
 8009620:	f7f9 be50 	b.w	80032c4 <_getpid>

08009624 <__sread>:
 8009624:	b510      	push	{r4, lr}
 8009626:	460c      	mov	r4, r1
 8009628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800962c:	f000 f894 	bl	8009758 <_read_r>
 8009630:	2800      	cmp	r0, #0
 8009632:	bfab      	itete	ge
 8009634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009636:	89a3      	ldrhlt	r3, [r4, #12]
 8009638:	181b      	addge	r3, r3, r0
 800963a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800963e:	bfac      	ite	ge
 8009640:	6563      	strge	r3, [r4, #84]	; 0x54
 8009642:	81a3      	strhlt	r3, [r4, #12]
 8009644:	bd10      	pop	{r4, pc}

08009646 <__swrite>:
 8009646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964a:	461f      	mov	r7, r3
 800964c:	898b      	ldrh	r3, [r1, #12]
 800964e:	4605      	mov	r5, r0
 8009650:	05db      	lsls	r3, r3, #23
 8009652:	460c      	mov	r4, r1
 8009654:	4616      	mov	r6, r2
 8009656:	d505      	bpl.n	8009664 <__swrite+0x1e>
 8009658:	2302      	movs	r3, #2
 800965a:	2200      	movs	r2, #0
 800965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009660:	f000 f868 	bl	8009734 <_lseek_r>
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	4632      	mov	r2, r6
 8009668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	4628      	mov	r0, r5
 8009670:	463b      	mov	r3, r7
 8009672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967a:	f000 b817 	b.w	80096ac <_write_r>

0800967e <__sseek>:
 800967e:	b510      	push	{r4, lr}
 8009680:	460c      	mov	r4, r1
 8009682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009686:	f000 f855 	bl	8009734 <_lseek_r>
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	bf15      	itete	ne
 8009690:	6560      	strne	r0, [r4, #84]	; 0x54
 8009692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800969a:	81a3      	strheq	r3, [r4, #12]
 800969c:	bf18      	it	ne
 800969e:	81a3      	strhne	r3, [r4, #12]
 80096a0:	bd10      	pop	{r4, pc}

080096a2 <__sclose>:
 80096a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a6:	f000 b813 	b.w	80096d0 <_close_r>
	...

080096ac <_write_r>:
 80096ac:	b538      	push	{r3, r4, r5, lr}
 80096ae:	4604      	mov	r4, r0
 80096b0:	4608      	mov	r0, r1
 80096b2:	4611      	mov	r1, r2
 80096b4:	2200      	movs	r2, #0
 80096b6:	4d05      	ldr	r5, [pc, #20]	; (80096cc <_write_r+0x20>)
 80096b8:	602a      	str	r2, [r5, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	f7f9 fe40 	bl	8003340 <_write>
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d102      	bne.n	80096ca <_write_r+0x1e>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	b103      	cbz	r3, 80096ca <_write_r+0x1e>
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	bd38      	pop	{r3, r4, r5, pc}
 80096cc:	20000d90 	.word	0x20000d90

080096d0 <_close_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	2300      	movs	r3, #0
 80096d4:	4d05      	ldr	r5, [pc, #20]	; (80096ec <_close_r+0x1c>)
 80096d6:	4604      	mov	r4, r0
 80096d8:	4608      	mov	r0, r1
 80096da:	602b      	str	r3, [r5, #0]
 80096dc:	f7f9 fe4c 	bl	8003378 <_close>
 80096e0:	1c43      	adds	r3, r0, #1
 80096e2:	d102      	bne.n	80096ea <_close_r+0x1a>
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	b103      	cbz	r3, 80096ea <_close_r+0x1a>
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	bd38      	pop	{r3, r4, r5, pc}
 80096ec:	20000d90 	.word	0x20000d90

080096f0 <_fstat_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	2300      	movs	r3, #0
 80096f4:	4d06      	ldr	r5, [pc, #24]	; (8009710 <_fstat_r+0x20>)
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	4611      	mov	r1, r2
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	f7f9 fe46 	bl	800338e <_fstat>
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	d102      	bne.n	800970c <_fstat_r+0x1c>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	b103      	cbz	r3, 800970c <_fstat_r+0x1c>
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	bd38      	pop	{r3, r4, r5, pc}
 800970e:	bf00      	nop
 8009710:	20000d90 	.word	0x20000d90

08009714 <_isatty_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	2300      	movs	r3, #0
 8009718:	4d05      	ldr	r5, [pc, #20]	; (8009730 <_isatty_r+0x1c>)
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	f7f9 fe44 	bl	80033ac <_isatty>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_isatty_r+0x1a>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_isatty_r+0x1a>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	20000d90 	.word	0x20000d90

08009734 <_lseek_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	2200      	movs	r2, #0
 800973e:	4d05      	ldr	r5, [pc, #20]	; (8009754 <_lseek_r+0x20>)
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f7f9 fe3c 	bl	80033c0 <_lseek>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_lseek_r+0x1e>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_lseek_r+0x1e>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	20000d90 	.word	0x20000d90

08009758 <_read_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	4611      	mov	r1, r2
 8009760:	2200      	movs	r2, #0
 8009762:	4d05      	ldr	r5, [pc, #20]	; (8009778 <_read_r+0x20>)
 8009764:	602a      	str	r2, [r5, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	f7f9 fdcd 	bl	8003306 <_read>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_read_r+0x1e>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_read_r+0x1e>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20000d90 	.word	0x20000d90

0800977c <acos>:
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	4604      	mov	r4, r0
 8009780:	460d      	mov	r5, r1
 8009782:	f000 f901 	bl	8009988 <__ieee754_acos>
 8009786:	4b11      	ldr	r3, [pc, #68]	; (80097cc <acos+0x50>)
 8009788:	4606      	mov	r6, r0
 800978a:	f993 3000 	ldrsb.w	r3, [r3]
 800978e:	460f      	mov	r7, r1
 8009790:	3301      	adds	r3, #1
 8009792:	d018      	beq.n	80097c6 <acos+0x4a>
 8009794:	4622      	mov	r2, r4
 8009796:	462b      	mov	r3, r5
 8009798:	4620      	mov	r0, r4
 800979a:	4629      	mov	r1, r5
 800979c:	f7f7 f936 	bl	8000a0c <__aeabi_dcmpun>
 80097a0:	b988      	cbnz	r0, 80097c6 <acos+0x4a>
 80097a2:	4620      	mov	r0, r4
 80097a4:	4629      	mov	r1, r5
 80097a6:	f001 f8fd 	bl	800a9a4 <fabs>
 80097aa:	2200      	movs	r2, #0
 80097ac:	4b08      	ldr	r3, [pc, #32]	; (80097d0 <acos+0x54>)
 80097ae:	f7f7 f923 	bl	80009f8 <__aeabi_dcmpgt>
 80097b2:	b140      	cbz	r0, 80097c6 <acos+0x4a>
 80097b4:	f7fd f918 	bl	80069e8 <__errno>
 80097b8:	2321      	movs	r3, #33	; 0x21
 80097ba:	6003      	str	r3, [r0, #0]
 80097bc:	4805      	ldr	r0, [pc, #20]	; (80097d4 <acos+0x58>)
 80097be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097c2:	f001 b8f9 	b.w	800a9b8 <nan>
 80097c6:	4630      	mov	r0, r6
 80097c8:	4639      	mov	r1, r7
 80097ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097cc:	200001dc 	.word	0x200001dc
 80097d0:	3ff00000 	.word	0x3ff00000
 80097d4:	0800b100 	.word	0x0800b100

080097d8 <pow>:
 80097d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097dc:	461f      	mov	r7, r3
 80097de:	4680      	mov	r8, r0
 80097e0:	4689      	mov	r9, r1
 80097e2:	4616      	mov	r6, r2
 80097e4:	f000 fb1c 	bl	8009e20 <__ieee754_pow>
 80097e8:	4b4d      	ldr	r3, [pc, #308]	; (8009920 <pow+0x148>)
 80097ea:	4604      	mov	r4, r0
 80097ec:	f993 3000 	ldrsb.w	r3, [r3]
 80097f0:	460d      	mov	r5, r1
 80097f2:	3301      	adds	r3, #1
 80097f4:	d015      	beq.n	8009822 <pow+0x4a>
 80097f6:	4632      	mov	r2, r6
 80097f8:	463b      	mov	r3, r7
 80097fa:	4630      	mov	r0, r6
 80097fc:	4639      	mov	r1, r7
 80097fe:	f7f7 f905 	bl	8000a0c <__aeabi_dcmpun>
 8009802:	b970      	cbnz	r0, 8009822 <pow+0x4a>
 8009804:	4642      	mov	r2, r8
 8009806:	464b      	mov	r3, r9
 8009808:	4640      	mov	r0, r8
 800980a:	4649      	mov	r1, r9
 800980c:	f7f7 f8fe 	bl	8000a0c <__aeabi_dcmpun>
 8009810:	2200      	movs	r2, #0
 8009812:	2300      	movs	r3, #0
 8009814:	b148      	cbz	r0, 800982a <pow+0x52>
 8009816:	4630      	mov	r0, r6
 8009818:	4639      	mov	r1, r7
 800981a:	f7f7 f8c5 	bl	80009a8 <__aeabi_dcmpeq>
 800981e:	2800      	cmp	r0, #0
 8009820:	d17b      	bne.n	800991a <pow+0x142>
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f7 f8bb 	bl	80009a8 <__aeabi_dcmpeq>
 8009832:	b1e0      	cbz	r0, 800986e <pow+0x96>
 8009834:	2200      	movs	r2, #0
 8009836:	2300      	movs	r3, #0
 8009838:	4630      	mov	r0, r6
 800983a:	4639      	mov	r1, r7
 800983c:	f7f7 f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8009840:	2800      	cmp	r0, #0
 8009842:	d16a      	bne.n	800991a <pow+0x142>
 8009844:	4630      	mov	r0, r6
 8009846:	4639      	mov	r1, r7
 8009848:	f001 f8af 	bl	800a9aa <finite>
 800984c:	2800      	cmp	r0, #0
 800984e:	d0e8      	beq.n	8009822 <pow+0x4a>
 8009850:	2200      	movs	r2, #0
 8009852:	2300      	movs	r3, #0
 8009854:	4630      	mov	r0, r6
 8009856:	4639      	mov	r1, r7
 8009858:	f7f7 f8b0 	bl	80009bc <__aeabi_dcmplt>
 800985c:	2800      	cmp	r0, #0
 800985e:	d0e0      	beq.n	8009822 <pow+0x4a>
 8009860:	f7fd f8c2 	bl	80069e8 <__errno>
 8009864:	2321      	movs	r3, #33	; 0x21
 8009866:	2400      	movs	r4, #0
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	4d2e      	ldr	r5, [pc, #184]	; (8009924 <pow+0x14c>)
 800986c:	e7d9      	b.n	8009822 <pow+0x4a>
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f001 f89a 	bl	800a9aa <finite>
 8009876:	bba8      	cbnz	r0, 80098e4 <pow+0x10c>
 8009878:	4640      	mov	r0, r8
 800987a:	4649      	mov	r1, r9
 800987c:	f001 f895 	bl	800a9aa <finite>
 8009880:	b380      	cbz	r0, 80098e4 <pow+0x10c>
 8009882:	4630      	mov	r0, r6
 8009884:	4639      	mov	r1, r7
 8009886:	f001 f890 	bl	800a9aa <finite>
 800988a:	b358      	cbz	r0, 80098e4 <pow+0x10c>
 800988c:	4622      	mov	r2, r4
 800988e:	462b      	mov	r3, r5
 8009890:	4620      	mov	r0, r4
 8009892:	4629      	mov	r1, r5
 8009894:	f7f7 f8ba 	bl	8000a0c <__aeabi_dcmpun>
 8009898:	b160      	cbz	r0, 80098b4 <pow+0xdc>
 800989a:	f7fd f8a5 	bl	80069e8 <__errno>
 800989e:	2321      	movs	r3, #33	; 0x21
 80098a0:	2200      	movs	r2, #0
 80098a2:	6003      	str	r3, [r0, #0]
 80098a4:	2300      	movs	r3, #0
 80098a6:	4610      	mov	r0, r2
 80098a8:	4619      	mov	r1, r3
 80098aa:	f7f6 ff3f 	bl	800072c <__aeabi_ddiv>
 80098ae:	4604      	mov	r4, r0
 80098b0:	460d      	mov	r5, r1
 80098b2:	e7b6      	b.n	8009822 <pow+0x4a>
 80098b4:	f7fd f898 	bl	80069e8 <__errno>
 80098b8:	2322      	movs	r3, #34	; 0x22
 80098ba:	2200      	movs	r2, #0
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	4649      	mov	r1, r9
 80098c0:	2300      	movs	r3, #0
 80098c2:	4640      	mov	r0, r8
 80098c4:	f7f7 f87a 	bl	80009bc <__aeabi_dcmplt>
 80098c8:	2400      	movs	r4, #0
 80098ca:	b148      	cbz	r0, 80098e0 <pow+0x108>
 80098cc:	4630      	mov	r0, r6
 80098ce:	4639      	mov	r1, r7
 80098d0:	f001 f878 	bl	800a9c4 <rint>
 80098d4:	4632      	mov	r2, r6
 80098d6:	463b      	mov	r3, r7
 80098d8:	f7f7 f866 	bl	80009a8 <__aeabi_dcmpeq>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d0c4      	beq.n	800986a <pow+0x92>
 80098e0:	4d11      	ldr	r5, [pc, #68]	; (8009928 <pow+0x150>)
 80098e2:	e79e      	b.n	8009822 <pow+0x4a>
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	4620      	mov	r0, r4
 80098ea:	4629      	mov	r1, r5
 80098ec:	f7f7 f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d096      	beq.n	8009822 <pow+0x4a>
 80098f4:	4640      	mov	r0, r8
 80098f6:	4649      	mov	r1, r9
 80098f8:	f001 f857 	bl	800a9aa <finite>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d090      	beq.n	8009822 <pow+0x4a>
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	f001 f851 	bl	800a9aa <finite>
 8009908:	2800      	cmp	r0, #0
 800990a:	d08a      	beq.n	8009822 <pow+0x4a>
 800990c:	f7fd f86c 	bl	80069e8 <__errno>
 8009910:	2322      	movs	r3, #34	; 0x22
 8009912:	2400      	movs	r4, #0
 8009914:	2500      	movs	r5, #0
 8009916:	6003      	str	r3, [r0, #0]
 8009918:	e783      	b.n	8009822 <pow+0x4a>
 800991a:	2400      	movs	r4, #0
 800991c:	4d03      	ldr	r5, [pc, #12]	; (800992c <pow+0x154>)
 800991e:	e780      	b.n	8009822 <pow+0x4a>
 8009920:	200001dc 	.word	0x200001dc
 8009924:	fff00000 	.word	0xfff00000
 8009928:	7ff00000 	.word	0x7ff00000
 800992c:	3ff00000 	.word	0x3ff00000

08009930 <sqrt>:
 8009930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009932:	4606      	mov	r6, r0
 8009934:	460f      	mov	r7, r1
 8009936:	f000 ff89 	bl	800a84c <__ieee754_sqrt>
 800993a:	4b12      	ldr	r3, [pc, #72]	; (8009984 <sqrt+0x54>)
 800993c:	4604      	mov	r4, r0
 800993e:	f993 3000 	ldrsb.w	r3, [r3]
 8009942:	460d      	mov	r5, r1
 8009944:	3301      	adds	r3, #1
 8009946:	d019      	beq.n	800997c <sqrt+0x4c>
 8009948:	4632      	mov	r2, r6
 800994a:	463b      	mov	r3, r7
 800994c:	4630      	mov	r0, r6
 800994e:	4639      	mov	r1, r7
 8009950:	f7f7 f85c 	bl	8000a0c <__aeabi_dcmpun>
 8009954:	b990      	cbnz	r0, 800997c <sqrt+0x4c>
 8009956:	2200      	movs	r2, #0
 8009958:	2300      	movs	r3, #0
 800995a:	4630      	mov	r0, r6
 800995c:	4639      	mov	r1, r7
 800995e:	f7f7 f82d 	bl	80009bc <__aeabi_dcmplt>
 8009962:	b158      	cbz	r0, 800997c <sqrt+0x4c>
 8009964:	f7fd f840 	bl	80069e8 <__errno>
 8009968:	2321      	movs	r3, #33	; 0x21
 800996a:	2200      	movs	r2, #0
 800996c:	6003      	str	r3, [r0, #0]
 800996e:	2300      	movs	r3, #0
 8009970:	4610      	mov	r0, r2
 8009972:	4619      	mov	r1, r3
 8009974:	f7f6 feda 	bl	800072c <__aeabi_ddiv>
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	4620      	mov	r0, r4
 800997e:	4629      	mov	r1, r5
 8009980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009982:	bf00      	nop
 8009984:	200001dc 	.word	0x200001dc

08009988 <__ieee754_acos>:
 8009988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	4cb2      	ldr	r4, [pc, #712]	; (8009c58 <__ieee754_acos+0x2d0>)
 800998e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009992:	42a3      	cmp	r3, r4
 8009994:	4607      	mov	r7, r0
 8009996:	460e      	mov	r6, r1
 8009998:	dd16      	ble.n	80099c8 <__ieee754_acos+0x40>
 800999a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800999e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80099a2:	4303      	orrs	r3, r0
 80099a4:	d107      	bne.n	80099b6 <__ieee754_acos+0x2e>
 80099a6:	2900      	cmp	r1, #0
 80099a8:	f300 8202 	bgt.w	8009db0 <__ieee754_acos+0x428>
 80099ac:	a190      	add	r1, pc, #576	; (adr r1, 8009bf0 <__ieee754_acos+0x268>)
 80099ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	f7f6 fbd5 	bl	8000168 <__aeabi_dsub>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	f7f6 feb3 	bl	800072c <__aeabi_ddiv>
 80099c6:	e7f4      	b.n	80099b2 <__ieee754_acos+0x2a>
 80099c8:	4ca4      	ldr	r4, [pc, #656]	; (8009c5c <__ieee754_acos+0x2d4>)
 80099ca:	42a3      	cmp	r3, r4
 80099cc:	f300 8083 	bgt.w	8009ad6 <__ieee754_acos+0x14e>
 80099d0:	4aa3      	ldr	r2, [pc, #652]	; (8009c60 <__ieee754_acos+0x2d8>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	f340 81ef 	ble.w	8009db6 <__ieee754_acos+0x42e>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	f7f6 fd7c 	bl	80004d8 <__aeabi_dmul>
 80099e0:	a385      	add	r3, pc, #532	; (adr r3, 8009bf8 <__ieee754_acos+0x270>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	4604      	mov	r4, r0
 80099e8:	460d      	mov	r5, r1
 80099ea:	f7f6 fd75 	bl	80004d8 <__aeabi_dmul>
 80099ee:	a384      	add	r3, pc, #528	; (adr r3, 8009c00 <__ieee754_acos+0x278>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f7f6 fbba 	bl	800016c <__adddf3>
 80099f8:	4622      	mov	r2, r4
 80099fa:	462b      	mov	r3, r5
 80099fc:	f7f6 fd6c 	bl	80004d8 <__aeabi_dmul>
 8009a00:	a381      	add	r3, pc, #516	; (adr r3, 8009c08 <__ieee754_acos+0x280>)
 8009a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a06:	f7f6 fbaf 	bl	8000168 <__aeabi_dsub>
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	462b      	mov	r3, r5
 8009a0e:	f7f6 fd63 	bl	80004d8 <__aeabi_dmul>
 8009a12:	a37f      	add	r3, pc, #508	; (adr r3, 8009c10 <__ieee754_acos+0x288>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f7f6 fba8 	bl	800016c <__adddf3>
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	462b      	mov	r3, r5
 8009a20:	f7f6 fd5a 	bl	80004d8 <__aeabi_dmul>
 8009a24:	a37c      	add	r3, pc, #496	; (adr r3, 8009c18 <__ieee754_acos+0x290>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f7f6 fb9d 	bl	8000168 <__aeabi_dsub>
 8009a2e:	4622      	mov	r2, r4
 8009a30:	462b      	mov	r3, r5
 8009a32:	f7f6 fd51 	bl	80004d8 <__aeabi_dmul>
 8009a36:	a37a      	add	r3, pc, #488	; (adr r3, 8009c20 <__ieee754_acos+0x298>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f7f6 fb96 	bl	800016c <__adddf3>
 8009a40:	4622      	mov	r2, r4
 8009a42:	462b      	mov	r3, r5
 8009a44:	f7f6 fd48 	bl	80004d8 <__aeabi_dmul>
 8009a48:	a377      	add	r3, pc, #476	; (adr r3, 8009c28 <__ieee754_acos+0x2a0>)
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	4680      	mov	r8, r0
 8009a50:	4689      	mov	r9, r1
 8009a52:	4620      	mov	r0, r4
 8009a54:	4629      	mov	r1, r5
 8009a56:	f7f6 fd3f 	bl	80004d8 <__aeabi_dmul>
 8009a5a:	a375      	add	r3, pc, #468	; (adr r3, 8009c30 <__ieee754_acos+0x2a8>)
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f7f6 fb82 	bl	8000168 <__aeabi_dsub>
 8009a64:	4622      	mov	r2, r4
 8009a66:	462b      	mov	r3, r5
 8009a68:	f7f6 fd36 	bl	80004d8 <__aeabi_dmul>
 8009a6c:	a372      	add	r3, pc, #456	; (adr r3, 8009c38 <__ieee754_acos+0x2b0>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f7f6 fb7b 	bl	800016c <__adddf3>
 8009a76:	4622      	mov	r2, r4
 8009a78:	462b      	mov	r3, r5
 8009a7a:	f7f6 fd2d 	bl	80004d8 <__aeabi_dmul>
 8009a7e:	a370      	add	r3, pc, #448	; (adr r3, 8009c40 <__ieee754_acos+0x2b8>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f7f6 fb70 	bl	8000168 <__aeabi_dsub>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	f7f6 fd24 	bl	80004d8 <__aeabi_dmul>
 8009a90:	2200      	movs	r2, #0
 8009a92:	4b74      	ldr	r3, [pc, #464]	; (8009c64 <__ieee754_acos+0x2dc>)
 8009a94:	f7f6 fb6a 	bl	800016c <__adddf3>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	f7f6 fe44 	bl	800072c <__aeabi_ddiv>
 8009aa4:	463a      	mov	r2, r7
 8009aa6:	4633      	mov	r3, r6
 8009aa8:	f7f6 fd16 	bl	80004d8 <__aeabi_dmul>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	a165      	add	r1, pc, #404	; (adr r1, 8009c48 <__ieee754_acos+0x2c0>)
 8009ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ab6:	f7f6 fb57 	bl	8000168 <__aeabi_dsub>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4638      	mov	r0, r7
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	f7f6 fb51 	bl	8000168 <__aeabi_dsub>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	a161      	add	r1, pc, #388	; (adr r1, 8009c50 <__ieee754_acos+0x2c8>)
 8009acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ad0:	f7f6 fb4a 	bl	8000168 <__aeabi_dsub>
 8009ad4:	e76d      	b.n	80099b2 <__ieee754_acos+0x2a>
 8009ad6:	2900      	cmp	r1, #0
 8009ad8:	f280 80c8 	bge.w	8009c6c <__ieee754_acos+0x2e4>
 8009adc:	2200      	movs	r2, #0
 8009ade:	4b61      	ldr	r3, [pc, #388]	; (8009c64 <__ieee754_acos+0x2dc>)
 8009ae0:	f7f6 fb44 	bl	800016c <__adddf3>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	4b60      	ldr	r3, [pc, #384]	; (8009c68 <__ieee754_acos+0x2e0>)
 8009ae8:	f7f6 fcf6 	bl	80004d8 <__aeabi_dmul>
 8009aec:	a342      	add	r3, pc, #264	; (adr r3, 8009bf8 <__ieee754_acos+0x270>)
 8009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af2:	4604      	mov	r4, r0
 8009af4:	460d      	mov	r5, r1
 8009af6:	f7f6 fcef 	bl	80004d8 <__aeabi_dmul>
 8009afa:	a341      	add	r3, pc, #260	; (adr r3, 8009c00 <__ieee754_acos+0x278>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f7f6 fb34 	bl	800016c <__adddf3>
 8009b04:	4622      	mov	r2, r4
 8009b06:	462b      	mov	r3, r5
 8009b08:	f7f6 fce6 	bl	80004d8 <__aeabi_dmul>
 8009b0c:	a33e      	add	r3, pc, #248	; (adr r3, 8009c08 <__ieee754_acos+0x280>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fb29 	bl	8000168 <__aeabi_dsub>
 8009b16:	4622      	mov	r2, r4
 8009b18:	462b      	mov	r3, r5
 8009b1a:	f7f6 fcdd 	bl	80004d8 <__aeabi_dmul>
 8009b1e:	a33c      	add	r3, pc, #240	; (adr r3, 8009c10 <__ieee754_acos+0x288>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fb22 	bl	800016c <__adddf3>
 8009b28:	4622      	mov	r2, r4
 8009b2a:	462b      	mov	r3, r5
 8009b2c:	f7f6 fcd4 	bl	80004d8 <__aeabi_dmul>
 8009b30:	a339      	add	r3, pc, #228	; (adr r3, 8009c18 <__ieee754_acos+0x290>)
 8009b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b36:	f7f6 fb17 	bl	8000168 <__aeabi_dsub>
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	462b      	mov	r3, r5
 8009b3e:	f7f6 fccb 	bl	80004d8 <__aeabi_dmul>
 8009b42:	a337      	add	r3, pc, #220	; (adr r3, 8009c20 <__ieee754_acos+0x298>)
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f7f6 fb10 	bl	800016c <__adddf3>
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	462b      	mov	r3, r5
 8009b50:	f7f6 fcc2 	bl	80004d8 <__aeabi_dmul>
 8009b54:	4680      	mov	r8, r0
 8009b56:	4689      	mov	r9, r1
 8009b58:	4620      	mov	r0, r4
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	f000 fe76 	bl	800a84c <__ieee754_sqrt>
 8009b60:	a331      	add	r3, pc, #196	; (adr r3, 8009c28 <__ieee754_acos+0x2a0>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	4606      	mov	r6, r0
 8009b68:	460f      	mov	r7, r1
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7f6 fcb3 	bl	80004d8 <__aeabi_dmul>
 8009b72:	a32f      	add	r3, pc, #188	; (adr r3, 8009c30 <__ieee754_acos+0x2a8>)
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f7f6 faf6 	bl	8000168 <__aeabi_dsub>
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	462b      	mov	r3, r5
 8009b80:	f7f6 fcaa 	bl	80004d8 <__aeabi_dmul>
 8009b84:	a32c      	add	r3, pc, #176	; (adr r3, 8009c38 <__ieee754_acos+0x2b0>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	f7f6 faef 	bl	800016c <__adddf3>
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	f7f6 fca1 	bl	80004d8 <__aeabi_dmul>
 8009b96:	a32a      	add	r3, pc, #168	; (adr r3, 8009c40 <__ieee754_acos+0x2b8>)
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f7f6 fae4 	bl	8000168 <__aeabi_dsub>
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	f7f6 fc98 	bl	80004d8 <__aeabi_dmul>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	4b2e      	ldr	r3, [pc, #184]	; (8009c64 <__ieee754_acos+0x2dc>)
 8009bac:	f7f6 fade 	bl	800016c <__adddf3>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	f7f6 fdb8 	bl	800072c <__aeabi_ddiv>
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	463b      	mov	r3, r7
 8009bc0:	f7f6 fc8a 	bl	80004d8 <__aeabi_dmul>
 8009bc4:	a320      	add	r3, pc, #128	; (adr r3, 8009c48 <__ieee754_acos+0x2c0>)
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	f7f6 facd 	bl	8000168 <__aeabi_dsub>
 8009bce:	4632      	mov	r2, r6
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	f7f6 facb 	bl	800016c <__adddf3>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	f7f6 fac7 	bl	800016c <__adddf3>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	a103      	add	r1, pc, #12	; (adr r1, 8009bf0 <__ieee754_acos+0x268>)
 8009be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be8:	e772      	b.n	8009ad0 <__ieee754_acos+0x148>
 8009bea:	bf00      	nop
 8009bec:	f3af 8000 	nop.w
 8009bf0:	54442d18 	.word	0x54442d18
 8009bf4:	400921fb 	.word	0x400921fb
 8009bf8:	0dfdf709 	.word	0x0dfdf709
 8009bfc:	3f023de1 	.word	0x3f023de1
 8009c00:	7501b288 	.word	0x7501b288
 8009c04:	3f49efe0 	.word	0x3f49efe0
 8009c08:	b5688f3b 	.word	0xb5688f3b
 8009c0c:	3fa48228 	.word	0x3fa48228
 8009c10:	0e884455 	.word	0x0e884455
 8009c14:	3fc9c155 	.word	0x3fc9c155
 8009c18:	03eb6f7d 	.word	0x03eb6f7d
 8009c1c:	3fd4d612 	.word	0x3fd4d612
 8009c20:	55555555 	.word	0x55555555
 8009c24:	3fc55555 	.word	0x3fc55555
 8009c28:	b12e9282 	.word	0xb12e9282
 8009c2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009c30:	1b8d0159 	.word	0x1b8d0159
 8009c34:	3fe6066c 	.word	0x3fe6066c
 8009c38:	9c598ac8 	.word	0x9c598ac8
 8009c3c:	40002ae5 	.word	0x40002ae5
 8009c40:	1c8a2d4b 	.word	0x1c8a2d4b
 8009c44:	40033a27 	.word	0x40033a27
 8009c48:	33145c07 	.word	0x33145c07
 8009c4c:	3c91a626 	.word	0x3c91a626
 8009c50:	54442d18 	.word	0x54442d18
 8009c54:	3ff921fb 	.word	0x3ff921fb
 8009c58:	3fefffff 	.word	0x3fefffff
 8009c5c:	3fdfffff 	.word	0x3fdfffff
 8009c60:	3c600000 	.word	0x3c600000
 8009c64:	3ff00000 	.word	0x3ff00000
 8009c68:	3fe00000 	.word	0x3fe00000
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	460b      	mov	r3, r1
 8009c70:	2000      	movs	r0, #0
 8009c72:	4969      	ldr	r1, [pc, #420]	; (8009e18 <__ieee754_acos+0x490>)
 8009c74:	f7f6 fa78 	bl	8000168 <__aeabi_dsub>
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4b68      	ldr	r3, [pc, #416]	; (8009e1c <__ieee754_acos+0x494>)
 8009c7c:	f7f6 fc2c 	bl	80004d8 <__aeabi_dmul>
 8009c80:	4604      	mov	r4, r0
 8009c82:	460d      	mov	r5, r1
 8009c84:	f000 fde2 	bl	800a84c <__ieee754_sqrt>
 8009c88:	a34d      	add	r3, pc, #308	; (adr r3, 8009dc0 <__ieee754_acos+0x438>)
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	4689      	mov	r9, r1
 8009c90:	4680      	mov	r8, r0
 8009c92:	4629      	mov	r1, r5
 8009c94:	4620      	mov	r0, r4
 8009c96:	f7f6 fc1f 	bl	80004d8 <__aeabi_dmul>
 8009c9a:	a34b      	add	r3, pc, #300	; (adr r3, 8009dc8 <__ieee754_acos+0x440>)
 8009c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca0:	f7f6 fa64 	bl	800016c <__adddf3>
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	f7f6 fc16 	bl	80004d8 <__aeabi_dmul>
 8009cac:	a348      	add	r3, pc, #288	; (adr r3, 8009dd0 <__ieee754_acos+0x448>)
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	f7f6 fa59 	bl	8000168 <__aeabi_dsub>
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	462b      	mov	r3, r5
 8009cba:	f7f6 fc0d 	bl	80004d8 <__aeabi_dmul>
 8009cbe:	a346      	add	r3, pc, #280	; (adr r3, 8009dd8 <__ieee754_acos+0x450>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	f7f6 fa52 	bl	800016c <__adddf3>
 8009cc8:	4622      	mov	r2, r4
 8009cca:	462b      	mov	r3, r5
 8009ccc:	f7f6 fc04 	bl	80004d8 <__aeabi_dmul>
 8009cd0:	a343      	add	r3, pc, #268	; (adr r3, 8009de0 <__ieee754_acos+0x458>)
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	f7f6 fa47 	bl	8000168 <__aeabi_dsub>
 8009cda:	4622      	mov	r2, r4
 8009cdc:	462b      	mov	r3, r5
 8009cde:	f7f6 fbfb 	bl	80004d8 <__aeabi_dmul>
 8009ce2:	a341      	add	r3, pc, #260	; (adr r3, 8009de8 <__ieee754_acos+0x460>)
 8009ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce8:	f7f6 fa40 	bl	800016c <__adddf3>
 8009cec:	4622      	mov	r2, r4
 8009cee:	462b      	mov	r3, r5
 8009cf0:	f7f6 fbf2 	bl	80004d8 <__aeabi_dmul>
 8009cf4:	a33e      	add	r3, pc, #248	; (adr r3, 8009df0 <__ieee754_acos+0x468>)
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	4682      	mov	sl, r0
 8009cfc:	468b      	mov	fp, r1
 8009cfe:	4620      	mov	r0, r4
 8009d00:	4629      	mov	r1, r5
 8009d02:	f7f6 fbe9 	bl	80004d8 <__aeabi_dmul>
 8009d06:	a33c      	add	r3, pc, #240	; (adr r3, 8009df8 <__ieee754_acos+0x470>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 fa2c 	bl	8000168 <__aeabi_dsub>
 8009d10:	4622      	mov	r2, r4
 8009d12:	462b      	mov	r3, r5
 8009d14:	f7f6 fbe0 	bl	80004d8 <__aeabi_dmul>
 8009d18:	a339      	add	r3, pc, #228	; (adr r3, 8009e00 <__ieee754_acos+0x478>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f7f6 fa25 	bl	800016c <__adddf3>
 8009d22:	4622      	mov	r2, r4
 8009d24:	462b      	mov	r3, r5
 8009d26:	f7f6 fbd7 	bl	80004d8 <__aeabi_dmul>
 8009d2a:	a337      	add	r3, pc, #220	; (adr r3, 8009e08 <__ieee754_acos+0x480>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f7f6 fa1a 	bl	8000168 <__aeabi_dsub>
 8009d34:	4622      	mov	r2, r4
 8009d36:	462b      	mov	r3, r5
 8009d38:	f7f6 fbce 	bl	80004d8 <__aeabi_dmul>
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4b36      	ldr	r3, [pc, #216]	; (8009e18 <__ieee754_acos+0x490>)
 8009d40:	f7f6 fa14 	bl	800016c <__adddf3>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4650      	mov	r0, sl
 8009d4a:	4659      	mov	r1, fp
 8009d4c:	f7f6 fcee 	bl	800072c <__aeabi_ddiv>
 8009d50:	4642      	mov	r2, r8
 8009d52:	464b      	mov	r3, r9
 8009d54:	f7f6 fbc0 	bl	80004d8 <__aeabi_dmul>
 8009d58:	2600      	movs	r6, #0
 8009d5a:	4682      	mov	sl, r0
 8009d5c:	468b      	mov	fp, r1
 8009d5e:	4632      	mov	r2, r6
 8009d60:	464b      	mov	r3, r9
 8009d62:	4630      	mov	r0, r6
 8009d64:	4649      	mov	r1, r9
 8009d66:	f7f6 fbb7 	bl	80004d8 <__aeabi_dmul>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4620      	mov	r0, r4
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7f6 f9f9 	bl	8000168 <__aeabi_dsub>
 8009d76:	4632      	mov	r2, r6
 8009d78:	4604      	mov	r4, r0
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	464b      	mov	r3, r9
 8009d7e:	4640      	mov	r0, r8
 8009d80:	4649      	mov	r1, r9
 8009d82:	f7f6 f9f3 	bl	800016c <__adddf3>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7f6 fccd 	bl	800072c <__aeabi_ddiv>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4650      	mov	r0, sl
 8009d98:	4659      	mov	r1, fp
 8009d9a:	f7f6 f9e7 	bl	800016c <__adddf3>
 8009d9e:	4632      	mov	r2, r6
 8009da0:	464b      	mov	r3, r9
 8009da2:	f7f6 f9e3 	bl	800016c <__adddf3>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	f7f6 f9df 	bl	800016c <__adddf3>
 8009dae:	e600      	b.n	80099b2 <__ieee754_acos+0x2a>
 8009db0:	2000      	movs	r0, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	e5fd      	b.n	80099b2 <__ieee754_acos+0x2a>
 8009db6:	a116      	add	r1, pc, #88	; (adr r1, 8009e10 <__ieee754_acos+0x488>)
 8009db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dbc:	e5f9      	b.n	80099b2 <__ieee754_acos+0x2a>
 8009dbe:	bf00      	nop
 8009dc0:	0dfdf709 	.word	0x0dfdf709
 8009dc4:	3f023de1 	.word	0x3f023de1
 8009dc8:	7501b288 	.word	0x7501b288
 8009dcc:	3f49efe0 	.word	0x3f49efe0
 8009dd0:	b5688f3b 	.word	0xb5688f3b
 8009dd4:	3fa48228 	.word	0x3fa48228
 8009dd8:	0e884455 	.word	0x0e884455
 8009ddc:	3fc9c155 	.word	0x3fc9c155
 8009de0:	03eb6f7d 	.word	0x03eb6f7d
 8009de4:	3fd4d612 	.word	0x3fd4d612
 8009de8:	55555555 	.word	0x55555555
 8009dec:	3fc55555 	.word	0x3fc55555
 8009df0:	b12e9282 	.word	0xb12e9282
 8009df4:	3fb3b8c5 	.word	0x3fb3b8c5
 8009df8:	1b8d0159 	.word	0x1b8d0159
 8009dfc:	3fe6066c 	.word	0x3fe6066c
 8009e00:	9c598ac8 	.word	0x9c598ac8
 8009e04:	40002ae5 	.word	0x40002ae5
 8009e08:	1c8a2d4b 	.word	0x1c8a2d4b
 8009e0c:	40033a27 	.word	0x40033a27
 8009e10:	54442d18 	.word	0x54442d18
 8009e14:	3ff921fb 	.word	0x3ff921fb
 8009e18:	3ff00000 	.word	0x3ff00000
 8009e1c:	3fe00000 	.word	0x3fe00000

08009e20 <__ieee754_pow>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	b093      	sub	sp, #76	; 0x4c
 8009e26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e2a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8009e2e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009e32:	ea55 0302 	orrs.w	r3, r5, r2
 8009e36:	4607      	mov	r7, r0
 8009e38:	4688      	mov	r8, r1
 8009e3a:	f000 84bf 	beq.w	800a7bc <__ieee754_pow+0x99c>
 8009e3e:	4b7e      	ldr	r3, [pc, #504]	; (800a038 <__ieee754_pow+0x218>)
 8009e40:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009e44:	429c      	cmp	r4, r3
 8009e46:	4689      	mov	r9, r1
 8009e48:	4682      	mov	sl, r0
 8009e4a:	dc09      	bgt.n	8009e60 <__ieee754_pow+0x40>
 8009e4c:	d103      	bne.n	8009e56 <__ieee754_pow+0x36>
 8009e4e:	b978      	cbnz	r0, 8009e70 <__ieee754_pow+0x50>
 8009e50:	42a5      	cmp	r5, r4
 8009e52:	dd02      	ble.n	8009e5a <__ieee754_pow+0x3a>
 8009e54:	e00c      	b.n	8009e70 <__ieee754_pow+0x50>
 8009e56:	429d      	cmp	r5, r3
 8009e58:	dc02      	bgt.n	8009e60 <__ieee754_pow+0x40>
 8009e5a:	429d      	cmp	r5, r3
 8009e5c:	d10e      	bne.n	8009e7c <__ieee754_pow+0x5c>
 8009e5e:	b16a      	cbz	r2, 8009e7c <__ieee754_pow+0x5c>
 8009e60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009e64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009e68:	ea54 030a 	orrs.w	r3, r4, sl
 8009e6c:	f000 84a6 	beq.w	800a7bc <__ieee754_pow+0x99c>
 8009e70:	4872      	ldr	r0, [pc, #456]	; (800a03c <__ieee754_pow+0x21c>)
 8009e72:	b013      	add	sp, #76	; 0x4c
 8009e74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	f000 bd9e 	b.w	800a9b8 <nan>
 8009e7c:	f1b9 0f00 	cmp.w	r9, #0
 8009e80:	da39      	bge.n	8009ef6 <__ieee754_pow+0xd6>
 8009e82:	4b6f      	ldr	r3, [pc, #444]	; (800a040 <__ieee754_pow+0x220>)
 8009e84:	429d      	cmp	r5, r3
 8009e86:	dc54      	bgt.n	8009f32 <__ieee754_pow+0x112>
 8009e88:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009e8c:	429d      	cmp	r5, r3
 8009e8e:	f340 84a6 	ble.w	800a7de <__ieee754_pow+0x9be>
 8009e92:	152b      	asrs	r3, r5, #20
 8009e94:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e98:	2b14      	cmp	r3, #20
 8009e9a:	dd0f      	ble.n	8009ebc <__ieee754_pow+0x9c>
 8009e9c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009ea0:	fa22 f103 	lsr.w	r1, r2, r3
 8009ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	f040 8498 	bne.w	800a7de <__ieee754_pow+0x9be>
 8009eae:	f001 0101 	and.w	r1, r1, #1
 8009eb2:	f1c1 0302 	rsb	r3, r1, #2
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	b182      	cbz	r2, 8009edc <__ieee754_pow+0xbc>
 8009eba:	e05e      	b.n	8009f7a <__ieee754_pow+0x15a>
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	d15a      	bne.n	8009f76 <__ieee754_pow+0x156>
 8009ec0:	f1c3 0314 	rsb	r3, r3, #20
 8009ec4:	fa45 f103 	asr.w	r1, r5, r3
 8009ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ecc:	42ab      	cmp	r3, r5
 8009ece:	f040 8483 	bne.w	800a7d8 <__ieee754_pow+0x9b8>
 8009ed2:	f001 0101 	and.w	r1, r1, #1
 8009ed6:	f1c1 0302 	rsb	r3, r1, #2
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	4b59      	ldr	r3, [pc, #356]	; (800a044 <__ieee754_pow+0x224>)
 8009ede:	429d      	cmp	r5, r3
 8009ee0:	d130      	bne.n	8009f44 <__ieee754_pow+0x124>
 8009ee2:	2e00      	cmp	r6, #0
 8009ee4:	f280 8474 	bge.w	800a7d0 <__ieee754_pow+0x9b0>
 8009ee8:	463a      	mov	r2, r7
 8009eea:	4643      	mov	r3, r8
 8009eec:	2000      	movs	r0, #0
 8009eee:	4955      	ldr	r1, [pc, #340]	; (800a044 <__ieee754_pow+0x224>)
 8009ef0:	f7f6 fc1c 	bl	800072c <__aeabi_ddiv>
 8009ef4:	e02f      	b.n	8009f56 <__ieee754_pow+0x136>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	d13d      	bne.n	8009f7a <__ieee754_pow+0x15a>
 8009efe:	4b4e      	ldr	r3, [pc, #312]	; (800a038 <__ieee754_pow+0x218>)
 8009f00:	429d      	cmp	r5, r3
 8009f02:	d1eb      	bne.n	8009edc <__ieee754_pow+0xbc>
 8009f04:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009f08:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009f0c:	ea53 030a 	orrs.w	r3, r3, sl
 8009f10:	f000 8454 	beq.w	800a7bc <__ieee754_pow+0x99c>
 8009f14:	4b4c      	ldr	r3, [pc, #304]	; (800a048 <__ieee754_pow+0x228>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	dd0d      	ble.n	8009f36 <__ieee754_pow+0x116>
 8009f1a:	2e00      	cmp	r6, #0
 8009f1c:	f280 8454 	bge.w	800a7c8 <__ieee754_pow+0x9a8>
 8009f20:	f04f 0b00 	mov.w	fp, #0
 8009f24:	f04f 0c00 	mov.w	ip, #0
 8009f28:	4658      	mov	r0, fp
 8009f2a:	4661      	mov	r1, ip
 8009f2c:	b013      	add	sp, #76	; 0x4c
 8009f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f32:	2302      	movs	r3, #2
 8009f34:	e7e0      	b.n	8009ef8 <__ieee754_pow+0xd8>
 8009f36:	2e00      	cmp	r6, #0
 8009f38:	daf2      	bge.n	8009f20 <__ieee754_pow+0x100>
 8009f3a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009f3e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009f42:	e7f1      	b.n	8009f28 <__ieee754_pow+0x108>
 8009f44:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009f48:	d108      	bne.n	8009f5c <__ieee754_pow+0x13c>
 8009f4a:	463a      	mov	r2, r7
 8009f4c:	4643      	mov	r3, r8
 8009f4e:	4638      	mov	r0, r7
 8009f50:	4641      	mov	r1, r8
 8009f52:	f7f6 fac1 	bl	80004d8 <__aeabi_dmul>
 8009f56:	4683      	mov	fp, r0
 8009f58:	468c      	mov	ip, r1
 8009f5a:	e7e5      	b.n	8009f28 <__ieee754_pow+0x108>
 8009f5c:	4b3b      	ldr	r3, [pc, #236]	; (800a04c <__ieee754_pow+0x22c>)
 8009f5e:	429e      	cmp	r6, r3
 8009f60:	d10b      	bne.n	8009f7a <__ieee754_pow+0x15a>
 8009f62:	f1b9 0f00 	cmp.w	r9, #0
 8009f66:	db08      	blt.n	8009f7a <__ieee754_pow+0x15a>
 8009f68:	4638      	mov	r0, r7
 8009f6a:	4641      	mov	r1, r8
 8009f6c:	b013      	add	sp, #76	; 0x4c
 8009f6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f72:	f000 bc6b 	b.w	800a84c <__ieee754_sqrt>
 8009f76:	2300      	movs	r3, #0
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	4641      	mov	r1, r8
 8009f7e:	f000 fd11 	bl	800a9a4 <fabs>
 8009f82:	4683      	mov	fp, r0
 8009f84:	468c      	mov	ip, r1
 8009f86:	f1ba 0f00 	cmp.w	sl, #0
 8009f8a:	d129      	bne.n	8009fe0 <__ieee754_pow+0x1c0>
 8009f8c:	b124      	cbz	r4, 8009f98 <__ieee754_pow+0x178>
 8009f8e:	4b2d      	ldr	r3, [pc, #180]	; (800a044 <__ieee754_pow+0x224>)
 8009f90:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d123      	bne.n	8009fe0 <__ieee754_pow+0x1c0>
 8009f98:	2e00      	cmp	r6, #0
 8009f9a:	da07      	bge.n	8009fac <__ieee754_pow+0x18c>
 8009f9c:	465a      	mov	r2, fp
 8009f9e:	4663      	mov	r3, ip
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	4928      	ldr	r1, [pc, #160]	; (800a044 <__ieee754_pow+0x224>)
 8009fa4:	f7f6 fbc2 	bl	800072c <__aeabi_ddiv>
 8009fa8:	4683      	mov	fp, r0
 8009faa:	468c      	mov	ip, r1
 8009fac:	f1b9 0f00 	cmp.w	r9, #0
 8009fb0:	daba      	bge.n	8009f28 <__ieee754_pow+0x108>
 8009fb2:	9b00      	ldr	r3, [sp, #0]
 8009fb4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009fb8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009fbc:	4323      	orrs	r3, r4
 8009fbe:	d108      	bne.n	8009fd2 <__ieee754_pow+0x1b2>
 8009fc0:	465a      	mov	r2, fp
 8009fc2:	4663      	mov	r3, ip
 8009fc4:	4658      	mov	r0, fp
 8009fc6:	4661      	mov	r1, ip
 8009fc8:	f7f6 f8ce 	bl	8000168 <__aeabi_dsub>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	e78e      	b.n	8009ef0 <__ieee754_pow+0xd0>
 8009fd2:	9b00      	ldr	r3, [sp, #0]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d1a7      	bne.n	8009f28 <__ieee754_pow+0x108>
 8009fd8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009fdc:	469c      	mov	ip, r3
 8009fde:	e7a3      	b.n	8009f28 <__ieee754_pow+0x108>
 8009fe0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8009fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fea:	9b00      	ldr	r3, [sp, #0]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	d104      	bne.n	8009ffa <__ieee754_pow+0x1da>
 8009ff0:	463a      	mov	r2, r7
 8009ff2:	4643      	mov	r3, r8
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	4641      	mov	r1, r8
 8009ff8:	e7e6      	b.n	8009fc8 <__ieee754_pow+0x1a8>
 8009ffa:	4b15      	ldr	r3, [pc, #84]	; (800a050 <__ieee754_pow+0x230>)
 8009ffc:	429d      	cmp	r5, r3
 8009ffe:	f340 80f9 	ble.w	800a1f4 <__ieee754_pow+0x3d4>
 800a002:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a006:	429d      	cmp	r5, r3
 800a008:	4b0f      	ldr	r3, [pc, #60]	; (800a048 <__ieee754_pow+0x228>)
 800a00a:	dd09      	ble.n	800a020 <__ieee754_pow+0x200>
 800a00c:	429c      	cmp	r4, r3
 800a00e:	dc0c      	bgt.n	800a02a <__ieee754_pow+0x20a>
 800a010:	2e00      	cmp	r6, #0
 800a012:	da85      	bge.n	8009f20 <__ieee754_pow+0x100>
 800a014:	a306      	add	r3, pc, #24	; (adr r3, 800a030 <__ieee754_pow+0x210>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	4610      	mov	r0, r2
 800a01c:	4619      	mov	r1, r3
 800a01e:	e798      	b.n	8009f52 <__ieee754_pow+0x132>
 800a020:	429c      	cmp	r4, r3
 800a022:	dbf5      	blt.n	800a010 <__ieee754_pow+0x1f0>
 800a024:	4b07      	ldr	r3, [pc, #28]	; (800a044 <__ieee754_pow+0x224>)
 800a026:	429c      	cmp	r4, r3
 800a028:	dd14      	ble.n	800a054 <__ieee754_pow+0x234>
 800a02a:	2e00      	cmp	r6, #0
 800a02c:	dcf2      	bgt.n	800a014 <__ieee754_pow+0x1f4>
 800a02e:	e777      	b.n	8009f20 <__ieee754_pow+0x100>
 800a030:	8800759c 	.word	0x8800759c
 800a034:	7e37e43c 	.word	0x7e37e43c
 800a038:	7ff00000 	.word	0x7ff00000
 800a03c:	0800b100 	.word	0x0800b100
 800a040:	433fffff 	.word	0x433fffff
 800a044:	3ff00000 	.word	0x3ff00000
 800a048:	3fefffff 	.word	0x3fefffff
 800a04c:	3fe00000 	.word	0x3fe00000
 800a050:	41e00000 	.word	0x41e00000
 800a054:	4661      	mov	r1, ip
 800a056:	2200      	movs	r2, #0
 800a058:	4658      	mov	r0, fp
 800a05a:	4b61      	ldr	r3, [pc, #388]	; (800a1e0 <__ieee754_pow+0x3c0>)
 800a05c:	f7f6 f884 	bl	8000168 <__aeabi_dsub>
 800a060:	a355      	add	r3, pc, #340	; (adr r3, 800a1b8 <__ieee754_pow+0x398>)
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	4604      	mov	r4, r0
 800a068:	460d      	mov	r5, r1
 800a06a:	f7f6 fa35 	bl	80004d8 <__aeabi_dmul>
 800a06e:	a354      	add	r3, pc, #336	; (adr r3, 800a1c0 <__ieee754_pow+0x3a0>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	4606      	mov	r6, r0
 800a076:	460f      	mov	r7, r1
 800a078:	4620      	mov	r0, r4
 800a07a:	4629      	mov	r1, r5
 800a07c:	f7f6 fa2c 	bl	80004d8 <__aeabi_dmul>
 800a080:	2200      	movs	r2, #0
 800a082:	4682      	mov	sl, r0
 800a084:	468b      	mov	fp, r1
 800a086:	4620      	mov	r0, r4
 800a088:	4629      	mov	r1, r5
 800a08a:	4b56      	ldr	r3, [pc, #344]	; (800a1e4 <__ieee754_pow+0x3c4>)
 800a08c:	f7f6 fa24 	bl	80004d8 <__aeabi_dmul>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	a14c      	add	r1, pc, #304	; (adr r1, 800a1c8 <__ieee754_pow+0x3a8>)
 800a096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a09a:	f7f6 f865 	bl	8000168 <__aeabi_dsub>
 800a09e:	4622      	mov	r2, r4
 800a0a0:	462b      	mov	r3, r5
 800a0a2:	f7f6 fa19 	bl	80004d8 <__aeabi_dmul>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	494e      	ldr	r1, [pc, #312]	; (800a1e8 <__ieee754_pow+0x3c8>)
 800a0ae:	f7f6 f85b 	bl	8000168 <__aeabi_dsub>
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	4689      	mov	r9, r1
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	4629      	mov	r1, r5
 800a0be:	f7f6 fa0b 	bl	80004d8 <__aeabi_dmul>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	f7f6 fa05 	bl	80004d8 <__aeabi_dmul>
 800a0ce:	a340      	add	r3, pc, #256	; (adr r3, 800a1d0 <__ieee754_pow+0x3b0>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 fa00 	bl	80004d8 <__aeabi_dmul>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4650      	mov	r0, sl
 800a0de:	4659      	mov	r1, fp
 800a0e0:	f7f6 f842 	bl	8000168 <__aeabi_dsub>
 800a0e4:	f04f 0a00 	mov.w	sl, #0
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	f7f6 f83a 	bl	800016c <__adddf3>
 800a0f8:	4632      	mov	r2, r6
 800a0fa:	463b      	mov	r3, r7
 800a0fc:	4650      	mov	r0, sl
 800a0fe:	468b      	mov	fp, r1
 800a100:	f7f6 f832 	bl	8000168 <__aeabi_dsub>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	4620      	mov	r0, r4
 800a10a:	4629      	mov	r1, r5
 800a10c:	f7f6 f82c 	bl	8000168 <__aeabi_dsub>
 800a110:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a114:	9b00      	ldr	r3, [sp, #0]
 800a116:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a118:	3b01      	subs	r3, #1
 800a11a:	4313      	orrs	r3, r2
 800a11c:	f04f 0600 	mov.w	r6, #0
 800a120:	f04f 0200 	mov.w	r2, #0
 800a124:	bf0c      	ite	eq
 800a126:	4b31      	ldreq	r3, [pc, #196]	; (800a1ec <__ieee754_pow+0x3cc>)
 800a128:	4b2d      	ldrne	r3, [pc, #180]	; (800a1e0 <__ieee754_pow+0x3c0>)
 800a12a:	4604      	mov	r4, r0
 800a12c:	460d      	mov	r5, r1
 800a12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a132:	e9cd 2300 	strd	r2, r3, [sp]
 800a136:	4632      	mov	r2, r6
 800a138:	463b      	mov	r3, r7
 800a13a:	f7f6 f815 	bl	8000168 <__aeabi_dsub>
 800a13e:	4652      	mov	r2, sl
 800a140:	465b      	mov	r3, fp
 800a142:	f7f6 f9c9 	bl	80004d8 <__aeabi_dmul>
 800a146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a14a:	4680      	mov	r8, r0
 800a14c:	4689      	mov	r9, r1
 800a14e:	4620      	mov	r0, r4
 800a150:	4629      	mov	r1, r5
 800a152:	f7f6 f9c1 	bl	80004d8 <__aeabi_dmul>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4640      	mov	r0, r8
 800a15c:	4649      	mov	r1, r9
 800a15e:	f7f6 f805 	bl	800016c <__adddf3>
 800a162:	4632      	mov	r2, r6
 800a164:	463b      	mov	r3, r7
 800a166:	4680      	mov	r8, r0
 800a168:	4689      	mov	r9, r1
 800a16a:	4650      	mov	r0, sl
 800a16c:	4659      	mov	r1, fp
 800a16e:	f7f6 f9b3 	bl	80004d8 <__aeabi_dmul>
 800a172:	4604      	mov	r4, r0
 800a174:	460d      	mov	r5, r1
 800a176:	460b      	mov	r3, r1
 800a178:	4602      	mov	r2, r0
 800a17a:	4649      	mov	r1, r9
 800a17c:	4640      	mov	r0, r8
 800a17e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a182:	f7f5 fff3 	bl	800016c <__adddf3>
 800a186:	4b1a      	ldr	r3, [pc, #104]	; (800a1f0 <__ieee754_pow+0x3d0>)
 800a188:	4682      	mov	sl, r0
 800a18a:	4299      	cmp	r1, r3
 800a18c:	460f      	mov	r7, r1
 800a18e:	460e      	mov	r6, r1
 800a190:	f340 82ed 	ble.w	800a76e <__ieee754_pow+0x94e>
 800a194:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a198:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a19c:	4303      	orrs	r3, r0
 800a19e:	f000 81e7 	beq.w	800a570 <__ieee754_pow+0x750>
 800a1a2:	a30d      	add	r3, pc, #52	; (adr r3, 800a1d8 <__ieee754_pow+0x3b8>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ac:	f7f6 f994 	bl	80004d8 <__aeabi_dmul>
 800a1b0:	a309      	add	r3, pc, #36	; (adr r3, 800a1d8 <__ieee754_pow+0x3b8>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	e6cc      	b.n	8009f52 <__ieee754_pow+0x132>
 800a1b8:	60000000 	.word	0x60000000
 800a1bc:	3ff71547 	.word	0x3ff71547
 800a1c0:	f85ddf44 	.word	0xf85ddf44
 800a1c4:	3e54ae0b 	.word	0x3e54ae0b
 800a1c8:	55555555 	.word	0x55555555
 800a1cc:	3fd55555 	.word	0x3fd55555
 800a1d0:	652b82fe 	.word	0x652b82fe
 800a1d4:	3ff71547 	.word	0x3ff71547
 800a1d8:	8800759c 	.word	0x8800759c
 800a1dc:	7e37e43c 	.word	0x7e37e43c
 800a1e0:	3ff00000 	.word	0x3ff00000
 800a1e4:	3fd00000 	.word	0x3fd00000
 800a1e8:	3fe00000 	.word	0x3fe00000
 800a1ec:	bff00000 	.word	0xbff00000
 800a1f0:	408fffff 	.word	0x408fffff
 800a1f4:	4bd4      	ldr	r3, [pc, #848]	; (800a548 <__ieee754_pow+0x728>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	ea09 0303 	and.w	r3, r9, r3
 800a1fc:	b943      	cbnz	r3, 800a210 <__ieee754_pow+0x3f0>
 800a1fe:	4658      	mov	r0, fp
 800a200:	4661      	mov	r1, ip
 800a202:	4bd2      	ldr	r3, [pc, #840]	; (800a54c <__ieee754_pow+0x72c>)
 800a204:	f7f6 f968 	bl	80004d8 <__aeabi_dmul>
 800a208:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a20c:	4683      	mov	fp, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	1523      	asrs	r3, r4, #20
 800a212:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a216:	4413      	add	r3, r2
 800a218:	930b      	str	r3, [sp, #44]	; 0x2c
 800a21a:	4bcd      	ldr	r3, [pc, #820]	; (800a550 <__ieee754_pow+0x730>)
 800a21c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a220:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a224:	429c      	cmp	r4, r3
 800a226:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a22a:	dd08      	ble.n	800a23e <__ieee754_pow+0x41e>
 800a22c:	4bc9      	ldr	r3, [pc, #804]	; (800a554 <__ieee754_pow+0x734>)
 800a22e:	429c      	cmp	r4, r3
 800a230:	f340 819c 	ble.w	800a56c <__ieee754_pow+0x74c>
 800a234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a236:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a23a:	3301      	adds	r3, #1
 800a23c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a23e:	2600      	movs	r6, #0
 800a240:	00f3      	lsls	r3, r6, #3
 800a242:	930d      	str	r3, [sp, #52]	; 0x34
 800a244:	4bc4      	ldr	r3, [pc, #784]	; (800a558 <__ieee754_pow+0x738>)
 800a246:	4658      	mov	r0, fp
 800a248:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a24c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a250:	4629      	mov	r1, r5
 800a252:	461a      	mov	r2, r3
 800a254:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a258:	4623      	mov	r3, r4
 800a25a:	f7f5 ff85 	bl	8000168 <__aeabi_dsub>
 800a25e:	46da      	mov	sl, fp
 800a260:	462b      	mov	r3, r5
 800a262:	4652      	mov	r2, sl
 800a264:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a268:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a26c:	f7f5 ff7e 	bl	800016c <__adddf3>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	2000      	movs	r0, #0
 800a276:	49b9      	ldr	r1, [pc, #740]	; (800a55c <__ieee754_pow+0x73c>)
 800a278:	f7f6 fa58 	bl	800072c <__aeabi_ddiv>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a284:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a288:	f7f6 f926 	bl	80004d8 <__aeabi_dmul>
 800a28c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a290:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a294:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a298:	2300      	movs	r3, #0
 800a29a:	2200      	movs	r2, #0
 800a29c:	46ab      	mov	fp, r5
 800a29e:	106d      	asrs	r5, r5, #1
 800a2a0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a2aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a2ae:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a2b2:	4640      	mov	r0, r8
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	4614      	mov	r4, r2
 800a2b8:	461d      	mov	r5, r3
 800a2ba:	f7f6 f90d 	bl	80004d8 <__aeabi_dmul>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a2c6:	f7f5 ff4f 	bl	8000168 <__aeabi_dsub>
 800a2ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	460f      	mov	r7, r1
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	f7f5 ff47 	bl	8000168 <__aeabi_dsub>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4650      	mov	r0, sl
 800a2e0:	4659      	mov	r1, fp
 800a2e2:	f7f5 ff41 	bl	8000168 <__aeabi_dsub>
 800a2e6:	4642      	mov	r2, r8
 800a2e8:	464b      	mov	r3, r9
 800a2ea:	f7f6 f8f5 	bl	80004d8 <__aeabi_dmul>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	f7f5 ff37 	bl	8000168 <__aeabi_dsub>
 800a2fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2fe:	f7f6 f8eb 	bl	80004d8 <__aeabi_dmul>
 800a302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a306:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a30a:	4610      	mov	r0, r2
 800a30c:	4619      	mov	r1, r3
 800a30e:	f7f6 f8e3 	bl	80004d8 <__aeabi_dmul>
 800a312:	a37b      	add	r3, pc, #492	; (adr r3, 800a500 <__ieee754_pow+0x6e0>)
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	4604      	mov	r4, r0
 800a31a:	460d      	mov	r5, r1
 800a31c:	f7f6 f8dc 	bl	80004d8 <__aeabi_dmul>
 800a320:	a379      	add	r3, pc, #484	; (adr r3, 800a508 <__ieee754_pow+0x6e8>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	f7f5 ff21 	bl	800016c <__adddf3>
 800a32a:	4622      	mov	r2, r4
 800a32c:	462b      	mov	r3, r5
 800a32e:	f7f6 f8d3 	bl	80004d8 <__aeabi_dmul>
 800a332:	a377      	add	r3, pc, #476	; (adr r3, 800a510 <__ieee754_pow+0x6f0>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f7f5 ff18 	bl	800016c <__adddf3>
 800a33c:	4622      	mov	r2, r4
 800a33e:	462b      	mov	r3, r5
 800a340:	f7f6 f8ca 	bl	80004d8 <__aeabi_dmul>
 800a344:	a374      	add	r3, pc, #464	; (adr r3, 800a518 <__ieee754_pow+0x6f8>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f7f5 ff0f 	bl	800016c <__adddf3>
 800a34e:	4622      	mov	r2, r4
 800a350:	462b      	mov	r3, r5
 800a352:	f7f6 f8c1 	bl	80004d8 <__aeabi_dmul>
 800a356:	a372      	add	r3, pc, #456	; (adr r3, 800a520 <__ieee754_pow+0x700>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f7f5 ff06 	bl	800016c <__adddf3>
 800a360:	4622      	mov	r2, r4
 800a362:	462b      	mov	r3, r5
 800a364:	f7f6 f8b8 	bl	80004d8 <__aeabi_dmul>
 800a368:	a36f      	add	r3, pc, #444	; (adr r3, 800a528 <__ieee754_pow+0x708>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f7f5 fefd 	bl	800016c <__adddf3>
 800a372:	4622      	mov	r2, r4
 800a374:	4606      	mov	r6, r0
 800a376:	460f      	mov	r7, r1
 800a378:	462b      	mov	r3, r5
 800a37a:	4620      	mov	r0, r4
 800a37c:	4629      	mov	r1, r5
 800a37e:	f7f6 f8ab 	bl	80004d8 <__aeabi_dmul>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4630      	mov	r0, r6
 800a388:	4639      	mov	r1, r7
 800a38a:	f7f6 f8a5 	bl	80004d8 <__aeabi_dmul>
 800a38e:	4604      	mov	r4, r0
 800a390:	460d      	mov	r5, r1
 800a392:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a396:	4642      	mov	r2, r8
 800a398:	464b      	mov	r3, r9
 800a39a:	f7f5 fee7 	bl	800016c <__adddf3>
 800a39e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3a2:	f7f6 f899 	bl	80004d8 <__aeabi_dmul>
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	462b      	mov	r3, r5
 800a3aa:	f7f5 fedf 	bl	800016c <__adddf3>
 800a3ae:	4642      	mov	r2, r8
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	460f      	mov	r7, r1
 800a3b4:	464b      	mov	r3, r9
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	f7f6 f88d 	bl	80004d8 <__aeabi_dmul>
 800a3be:	2200      	movs	r2, #0
 800a3c0:	4b67      	ldr	r3, [pc, #412]	; (800a560 <__ieee754_pow+0x740>)
 800a3c2:	4682      	mov	sl, r0
 800a3c4:	468b      	mov	fp, r1
 800a3c6:	f7f5 fed1 	bl	800016c <__adddf3>
 800a3ca:	4632      	mov	r2, r6
 800a3cc:	463b      	mov	r3, r7
 800a3ce:	f7f5 fecd 	bl	800016c <__adddf3>
 800a3d2:	9c04      	ldr	r4, [sp, #16]
 800a3d4:	460d      	mov	r5, r1
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4640      	mov	r0, r8
 800a3dc:	4649      	mov	r1, r9
 800a3de:	f7f6 f87b 	bl	80004d8 <__aeabi_dmul>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4680      	mov	r8, r0
 800a3e6:	4689      	mov	r9, r1
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	4b5c      	ldr	r3, [pc, #368]	; (800a560 <__ieee754_pow+0x740>)
 800a3ee:	f7f5 febb 	bl	8000168 <__aeabi_dsub>
 800a3f2:	4652      	mov	r2, sl
 800a3f4:	465b      	mov	r3, fp
 800a3f6:	f7f5 feb7 	bl	8000168 <__aeabi_dsub>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4630      	mov	r0, r6
 800a400:	4639      	mov	r1, r7
 800a402:	f7f5 feb1 	bl	8000168 <__aeabi_dsub>
 800a406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a40a:	f7f6 f865 	bl	80004d8 <__aeabi_dmul>
 800a40e:	4622      	mov	r2, r4
 800a410:	4606      	mov	r6, r0
 800a412:	460f      	mov	r7, r1
 800a414:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a418:	462b      	mov	r3, r5
 800a41a:	f7f6 f85d 	bl	80004d8 <__aeabi_dmul>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4630      	mov	r0, r6
 800a424:	4639      	mov	r1, r7
 800a426:	f7f5 fea1 	bl	800016c <__adddf3>
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4640      	mov	r0, r8
 800a434:	4649      	mov	r1, r9
 800a436:	f7f5 fe99 	bl	800016c <__adddf3>
 800a43a:	a33d      	add	r3, pc, #244	; (adr r3, 800a530 <__ieee754_pow+0x710>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	9c04      	ldr	r4, [sp, #16]
 800a442:	460d      	mov	r5, r1
 800a444:	4620      	mov	r0, r4
 800a446:	f7f6 f847 	bl	80004d8 <__aeabi_dmul>
 800a44a:	4642      	mov	r2, r8
 800a44c:	464b      	mov	r3, r9
 800a44e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a452:	4620      	mov	r0, r4
 800a454:	4629      	mov	r1, r5
 800a456:	f7f5 fe87 	bl	8000168 <__aeabi_dsub>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4630      	mov	r0, r6
 800a460:	4639      	mov	r1, r7
 800a462:	f7f5 fe81 	bl	8000168 <__aeabi_dsub>
 800a466:	a334      	add	r3, pc, #208	; (adr r3, 800a538 <__ieee754_pow+0x718>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f7f6 f834 	bl	80004d8 <__aeabi_dmul>
 800a470:	a333      	add	r3, pc, #204	; (adr r3, 800a540 <__ieee754_pow+0x720>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	4606      	mov	r6, r0
 800a478:	460f      	mov	r7, r1
 800a47a:	4620      	mov	r0, r4
 800a47c:	4629      	mov	r1, r5
 800a47e:	f7f6 f82b 	bl	80004d8 <__aeabi_dmul>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4630      	mov	r0, r6
 800a488:	4639      	mov	r1, r7
 800a48a:	f7f5 fe6f 	bl	800016c <__adddf3>
 800a48e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a490:	4b34      	ldr	r3, [pc, #208]	; (800a564 <__ieee754_pow+0x744>)
 800a492:	4413      	add	r3, r2
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f7f5 fe68 	bl	800016c <__adddf3>
 800a49c:	4680      	mov	r8, r0
 800a49e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a4a0:	4689      	mov	r9, r1
 800a4a2:	f7f5 ffaf 	bl	8000404 <__aeabi_i2d>
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4ac:	4b2e      	ldr	r3, [pc, #184]	; (800a568 <__ieee754_pow+0x748>)
 800a4ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a4b8:	4642      	mov	r2, r8
 800a4ba:	464b      	mov	r3, r9
 800a4bc:	f7f5 fe56 	bl	800016c <__adddf3>
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	f7f5 fe52 	bl	800016c <__adddf3>
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	f7f5 fe4e 	bl	800016c <__adddf3>
 800a4d0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	462b      	mov	r3, r5
 800a4d8:	4650      	mov	r0, sl
 800a4da:	468b      	mov	fp, r1
 800a4dc:	f7f5 fe44 	bl	8000168 <__aeabi_dsub>
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	f7f5 fe40 	bl	8000168 <__aeabi_dsub>
 800a4e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4ec:	f7f5 fe3c 	bl	8000168 <__aeabi_dsub>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	e608      	b.n	800a10c <__ieee754_pow+0x2ec>
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w
 800a500:	4a454eef 	.word	0x4a454eef
 800a504:	3fca7e28 	.word	0x3fca7e28
 800a508:	93c9db65 	.word	0x93c9db65
 800a50c:	3fcd864a 	.word	0x3fcd864a
 800a510:	a91d4101 	.word	0xa91d4101
 800a514:	3fd17460 	.word	0x3fd17460
 800a518:	518f264d 	.word	0x518f264d
 800a51c:	3fd55555 	.word	0x3fd55555
 800a520:	db6fabff 	.word	0xdb6fabff
 800a524:	3fdb6db6 	.word	0x3fdb6db6
 800a528:	33333303 	.word	0x33333303
 800a52c:	3fe33333 	.word	0x3fe33333
 800a530:	e0000000 	.word	0xe0000000
 800a534:	3feec709 	.word	0x3feec709
 800a538:	dc3a03fd 	.word	0xdc3a03fd
 800a53c:	3feec709 	.word	0x3feec709
 800a540:	145b01f5 	.word	0x145b01f5
 800a544:	be3e2fe0 	.word	0xbe3e2fe0
 800a548:	7ff00000 	.word	0x7ff00000
 800a54c:	43400000 	.word	0x43400000
 800a550:	0003988e 	.word	0x0003988e
 800a554:	000bb679 	.word	0x000bb679
 800a558:	0800b270 	.word	0x0800b270
 800a55c:	3ff00000 	.word	0x3ff00000
 800a560:	40080000 	.word	0x40080000
 800a564:	0800b290 	.word	0x0800b290
 800a568:	0800b280 	.word	0x0800b280
 800a56c:	2601      	movs	r6, #1
 800a56e:	e667      	b.n	800a240 <__ieee754_pow+0x420>
 800a570:	a39d      	add	r3, pc, #628	; (adr r3, 800a7e8 <__ieee754_pow+0x9c8>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	4640      	mov	r0, r8
 800a578:	4649      	mov	r1, r9
 800a57a:	f7f5 fdf7 	bl	800016c <__adddf3>
 800a57e:	4622      	mov	r2, r4
 800a580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a584:	462b      	mov	r3, r5
 800a586:	4650      	mov	r0, sl
 800a588:	4639      	mov	r1, r7
 800a58a:	f7f5 fded 	bl	8000168 <__aeabi_dsub>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a596:	f7f6 fa2f 	bl	80009f8 <__aeabi_dcmpgt>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f47f ae01 	bne.w	800a1a2 <__ieee754_pow+0x382>
 800a5a0:	4aa5      	ldr	r2, [pc, #660]	; (800a838 <__ieee754_pow+0xa18>)
 800a5a2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	f340 8103 	ble.w	800a7b2 <__ieee754_pow+0x992>
 800a5ac:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	151b      	asrs	r3, r3, #20
 800a5b4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a5b8:	fa4a f303 	asr.w	r3, sl, r3
 800a5bc:	4433      	add	r3, r6
 800a5be:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a5c2:	4f9e      	ldr	r7, [pc, #632]	; (800a83c <__ieee754_pow+0xa1c>)
 800a5c4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a5c8:	4117      	asrs	r7, r2
 800a5ca:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a5ce:	ea23 0107 	bic.w	r1, r3, r7
 800a5d2:	f1c2 0214 	rsb	r2, r2, #20
 800a5d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a5da:	460b      	mov	r3, r1
 800a5dc:	fa4a fa02 	asr.w	sl, sl, r2
 800a5e0:	2e00      	cmp	r6, #0
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	bfb8      	it	lt
 800a5ea:	f1ca 0a00 	rsblt	sl, sl, #0
 800a5ee:	f7f5 fdbb 	bl	8000168 <__aeabi_dsub>
 800a5f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5fa:	2400      	movs	r4, #0
 800a5fc:	4642      	mov	r2, r8
 800a5fe:	464b      	mov	r3, r9
 800a600:	f7f5 fdb4 	bl	800016c <__adddf3>
 800a604:	a37a      	add	r3, pc, #488	; (adr r3, 800a7f0 <__ieee754_pow+0x9d0>)
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	4620      	mov	r0, r4
 800a60c:	460d      	mov	r5, r1
 800a60e:	f7f5 ff63 	bl	80004d8 <__aeabi_dmul>
 800a612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a616:	4606      	mov	r6, r0
 800a618:	460f      	mov	r7, r1
 800a61a:	4620      	mov	r0, r4
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7f5 fda3 	bl	8000168 <__aeabi_dsub>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	4640      	mov	r0, r8
 800a628:	4649      	mov	r1, r9
 800a62a:	f7f5 fd9d 	bl	8000168 <__aeabi_dsub>
 800a62e:	a372      	add	r3, pc, #456	; (adr r3, 800a7f8 <__ieee754_pow+0x9d8>)
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	f7f5 ff50 	bl	80004d8 <__aeabi_dmul>
 800a638:	a371      	add	r3, pc, #452	; (adr r3, 800a800 <__ieee754_pow+0x9e0>)
 800a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63e:	4680      	mov	r8, r0
 800a640:	4689      	mov	r9, r1
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	f7f5 ff47 	bl	80004d8 <__aeabi_dmul>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4640      	mov	r0, r8
 800a650:	4649      	mov	r1, r9
 800a652:	f7f5 fd8b 	bl	800016c <__adddf3>
 800a656:	4604      	mov	r4, r0
 800a658:	460d      	mov	r5, r1
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4630      	mov	r0, r6
 800a660:	4639      	mov	r1, r7
 800a662:	f7f5 fd83 	bl	800016c <__adddf3>
 800a666:	4632      	mov	r2, r6
 800a668:	463b      	mov	r3, r7
 800a66a:	4680      	mov	r8, r0
 800a66c:	4689      	mov	r9, r1
 800a66e:	f7f5 fd7b 	bl	8000168 <__aeabi_dsub>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4620      	mov	r0, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	f7f5 fd75 	bl	8000168 <__aeabi_dsub>
 800a67e:	4642      	mov	r2, r8
 800a680:	4606      	mov	r6, r0
 800a682:	460f      	mov	r7, r1
 800a684:	464b      	mov	r3, r9
 800a686:	4640      	mov	r0, r8
 800a688:	4649      	mov	r1, r9
 800a68a:	f7f5 ff25 	bl	80004d8 <__aeabi_dmul>
 800a68e:	a35e      	add	r3, pc, #376	; (adr r3, 800a808 <__ieee754_pow+0x9e8>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	4604      	mov	r4, r0
 800a696:	460d      	mov	r5, r1
 800a698:	f7f5 ff1e 	bl	80004d8 <__aeabi_dmul>
 800a69c:	a35c      	add	r3, pc, #368	; (adr r3, 800a810 <__ieee754_pow+0x9f0>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f7f5 fd61 	bl	8000168 <__aeabi_dsub>
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	f7f5 ff15 	bl	80004d8 <__aeabi_dmul>
 800a6ae:	a35a      	add	r3, pc, #360	; (adr r3, 800a818 <__ieee754_pow+0x9f8>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7f5 fd5a 	bl	800016c <__adddf3>
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	f7f5 ff0c 	bl	80004d8 <__aeabi_dmul>
 800a6c0:	a357      	add	r3, pc, #348	; (adr r3, 800a820 <__ieee754_pow+0xa00>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f7f5 fd4f 	bl	8000168 <__aeabi_dsub>
 800a6ca:	4622      	mov	r2, r4
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	f7f5 ff03 	bl	80004d8 <__aeabi_dmul>
 800a6d2:	a355      	add	r3, pc, #340	; (adr r3, 800a828 <__ieee754_pow+0xa08>)
 800a6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d8:	f7f5 fd48 	bl	800016c <__adddf3>
 800a6dc:	4622      	mov	r2, r4
 800a6de:	462b      	mov	r3, r5
 800a6e0:	f7f5 fefa 	bl	80004d8 <__aeabi_dmul>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f5 fd3c 	bl	8000168 <__aeabi_dsub>
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	f7f5 feec 	bl	80004d8 <__aeabi_dmul>
 800a700:	2200      	movs	r2, #0
 800a702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a70a:	4620      	mov	r0, r4
 800a70c:	4629      	mov	r1, r5
 800a70e:	f7f5 fd2b 	bl	8000168 <__aeabi_dsub>
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a71a:	f7f6 f807 	bl	800072c <__aeabi_ddiv>
 800a71e:	4632      	mov	r2, r6
 800a720:	4604      	mov	r4, r0
 800a722:	460d      	mov	r5, r1
 800a724:	463b      	mov	r3, r7
 800a726:	4640      	mov	r0, r8
 800a728:	4649      	mov	r1, r9
 800a72a:	f7f5 fed5 	bl	80004d8 <__aeabi_dmul>
 800a72e:	4632      	mov	r2, r6
 800a730:	463b      	mov	r3, r7
 800a732:	f7f5 fd1b 	bl	800016c <__adddf3>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4620      	mov	r0, r4
 800a73c:	4629      	mov	r1, r5
 800a73e:	f7f5 fd13 	bl	8000168 <__aeabi_dsub>
 800a742:	4642      	mov	r2, r8
 800a744:	464b      	mov	r3, r9
 800a746:	f7f5 fd0f 	bl	8000168 <__aeabi_dsub>
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	2000      	movs	r0, #0
 800a750:	493b      	ldr	r1, [pc, #236]	; (800a840 <__ieee754_pow+0xa20>)
 800a752:	f7f5 fd09 	bl	8000168 <__aeabi_dsub>
 800a756:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a75a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a75e:	da2b      	bge.n	800a7b8 <__ieee754_pow+0x998>
 800a760:	4652      	mov	r2, sl
 800a762:	f000 f9b9 	bl	800aad8 <scalbn>
 800a766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a76a:	f7ff bbf2 	b.w	8009f52 <__ieee754_pow+0x132>
 800a76e:	4b35      	ldr	r3, [pc, #212]	; (800a844 <__ieee754_pow+0xa24>)
 800a770:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a774:	429f      	cmp	r7, r3
 800a776:	f77f af13 	ble.w	800a5a0 <__ieee754_pow+0x780>
 800a77a:	4b33      	ldr	r3, [pc, #204]	; (800a848 <__ieee754_pow+0xa28>)
 800a77c:	440b      	add	r3, r1
 800a77e:	4303      	orrs	r3, r0
 800a780:	d00b      	beq.n	800a79a <__ieee754_pow+0x97a>
 800a782:	a32b      	add	r3, pc, #172	; (adr r3, 800a830 <__ieee754_pow+0xa10>)
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a78c:	f7f5 fea4 	bl	80004d8 <__aeabi_dmul>
 800a790:	a327      	add	r3, pc, #156	; (adr r3, 800a830 <__ieee754_pow+0xa10>)
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	f7ff bbdc 	b.w	8009f52 <__ieee754_pow+0x132>
 800a79a:	4622      	mov	r2, r4
 800a79c:	462b      	mov	r3, r5
 800a79e:	f7f5 fce3 	bl	8000168 <__aeabi_dsub>
 800a7a2:	4642      	mov	r2, r8
 800a7a4:	464b      	mov	r3, r9
 800a7a6:	f7f6 f91d 	bl	80009e4 <__aeabi_dcmpge>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	f43f aef8 	beq.w	800a5a0 <__ieee754_pow+0x780>
 800a7b0:	e7e7      	b.n	800a782 <__ieee754_pow+0x962>
 800a7b2:	f04f 0a00 	mov.w	sl, #0
 800a7b6:	e71e      	b.n	800a5f6 <__ieee754_pow+0x7d6>
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	e7d4      	b.n	800a766 <__ieee754_pow+0x946>
 800a7bc:	f04f 0b00 	mov.w	fp, #0
 800a7c0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a840 <__ieee754_pow+0xa20>
 800a7c4:	f7ff bbb0 	b.w	8009f28 <__ieee754_pow+0x108>
 800a7c8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a7cc:	f7ff bbac 	b.w	8009f28 <__ieee754_pow+0x108>
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	4641      	mov	r1, r8
 800a7d4:	f7ff bbbf 	b.w	8009f56 <__ieee754_pow+0x136>
 800a7d8:	9200      	str	r2, [sp, #0]
 800a7da:	f7ff bb7f 	b.w	8009edc <__ieee754_pow+0xbc>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f7ff bb69 	b.w	8009eb6 <__ieee754_pow+0x96>
 800a7e4:	f3af 8000 	nop.w
 800a7e8:	652b82fe 	.word	0x652b82fe
 800a7ec:	3c971547 	.word	0x3c971547
 800a7f0:	00000000 	.word	0x00000000
 800a7f4:	3fe62e43 	.word	0x3fe62e43
 800a7f8:	fefa39ef 	.word	0xfefa39ef
 800a7fc:	3fe62e42 	.word	0x3fe62e42
 800a800:	0ca86c39 	.word	0x0ca86c39
 800a804:	be205c61 	.word	0xbe205c61
 800a808:	72bea4d0 	.word	0x72bea4d0
 800a80c:	3e663769 	.word	0x3e663769
 800a810:	c5d26bf1 	.word	0xc5d26bf1
 800a814:	3ebbbd41 	.word	0x3ebbbd41
 800a818:	af25de2c 	.word	0xaf25de2c
 800a81c:	3f11566a 	.word	0x3f11566a
 800a820:	16bebd93 	.word	0x16bebd93
 800a824:	3f66c16c 	.word	0x3f66c16c
 800a828:	5555553e 	.word	0x5555553e
 800a82c:	3fc55555 	.word	0x3fc55555
 800a830:	c2f8f359 	.word	0xc2f8f359
 800a834:	01a56e1f 	.word	0x01a56e1f
 800a838:	3fe00000 	.word	0x3fe00000
 800a83c:	000fffff 	.word	0x000fffff
 800a840:	3ff00000 	.word	0x3ff00000
 800a844:	4090cbff 	.word	0x4090cbff
 800a848:	3f6f3400 	.word	0x3f6f3400

0800a84c <__ieee754_sqrt>:
 800a84c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a9a0 <__ieee754_sqrt+0x154>
 800a850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a854:	ea3c 0c01 	bics.w	ip, ip, r1
 800a858:	460b      	mov	r3, r1
 800a85a:	4606      	mov	r6, r0
 800a85c:	460d      	mov	r5, r1
 800a85e:	460a      	mov	r2, r1
 800a860:	4607      	mov	r7, r0
 800a862:	4604      	mov	r4, r0
 800a864:	d10e      	bne.n	800a884 <__ieee754_sqrt+0x38>
 800a866:	4602      	mov	r2, r0
 800a868:	f7f5 fe36 	bl	80004d8 <__aeabi_dmul>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4630      	mov	r0, r6
 800a872:	4629      	mov	r1, r5
 800a874:	f7f5 fc7a 	bl	800016c <__adddf3>
 800a878:	4606      	mov	r6, r0
 800a87a:	460d      	mov	r5, r1
 800a87c:	4630      	mov	r0, r6
 800a87e:	4629      	mov	r1, r5
 800a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a884:	2900      	cmp	r1, #0
 800a886:	dc0d      	bgt.n	800a8a4 <__ieee754_sqrt+0x58>
 800a888:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a88c:	ea5c 0707 	orrs.w	r7, ip, r7
 800a890:	d0f4      	beq.n	800a87c <__ieee754_sqrt+0x30>
 800a892:	b139      	cbz	r1, 800a8a4 <__ieee754_sqrt+0x58>
 800a894:	4602      	mov	r2, r0
 800a896:	f7f5 fc67 	bl	8000168 <__aeabi_dsub>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	f7f5 ff45 	bl	800072c <__aeabi_ddiv>
 800a8a2:	e7e9      	b.n	800a878 <__ieee754_sqrt+0x2c>
 800a8a4:	1512      	asrs	r2, r2, #20
 800a8a6:	d074      	beq.n	800a992 <__ieee754_sqrt+0x146>
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	07d5      	lsls	r5, r2, #31
 800a8ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8b0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800a8b4:	bf5e      	ittt	pl
 800a8b6:	0fe3      	lsrpl	r3, r4, #31
 800a8b8:	0064      	lslpl	r4, r4, #1
 800a8ba:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800a8be:	0fe3      	lsrs	r3, r4, #31
 800a8c0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a8c4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a8c8:	2516      	movs	r5, #22
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a8d0:	1076      	asrs	r6, r6, #1
 800a8d2:	0064      	lsls	r4, r4, #1
 800a8d4:	188f      	adds	r7, r1, r2
 800a8d6:	429f      	cmp	r7, r3
 800a8d8:	bfde      	ittt	le
 800a8da:	1bdb      	suble	r3, r3, r7
 800a8dc:	18b9      	addle	r1, r7, r2
 800a8de:	1880      	addle	r0, r0, r2
 800a8e0:	005b      	lsls	r3, r3, #1
 800a8e2:	3d01      	subs	r5, #1
 800a8e4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a8e8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a8ec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a8f0:	d1f0      	bne.n	800a8d4 <__ieee754_sqrt+0x88>
 800a8f2:	462a      	mov	r2, r5
 800a8f4:	f04f 0e20 	mov.w	lr, #32
 800a8f8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a8fc:	428b      	cmp	r3, r1
 800a8fe:	eb07 0c05 	add.w	ip, r7, r5
 800a902:	dc02      	bgt.n	800a90a <__ieee754_sqrt+0xbe>
 800a904:	d113      	bne.n	800a92e <__ieee754_sqrt+0xe2>
 800a906:	45a4      	cmp	ip, r4
 800a908:	d811      	bhi.n	800a92e <__ieee754_sqrt+0xe2>
 800a90a:	f1bc 0f00 	cmp.w	ip, #0
 800a90e:	eb0c 0507 	add.w	r5, ip, r7
 800a912:	da43      	bge.n	800a99c <__ieee754_sqrt+0x150>
 800a914:	2d00      	cmp	r5, #0
 800a916:	db41      	blt.n	800a99c <__ieee754_sqrt+0x150>
 800a918:	f101 0801 	add.w	r8, r1, #1
 800a91c:	1a5b      	subs	r3, r3, r1
 800a91e:	4641      	mov	r1, r8
 800a920:	45a4      	cmp	ip, r4
 800a922:	bf88      	it	hi
 800a924:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800a928:	eba4 040c 	sub.w	r4, r4, ip
 800a92c:	443a      	add	r2, r7
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	f1be 0e01 	subs.w	lr, lr, #1
 800a934:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a938:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800a93c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a940:	d1dc      	bne.n	800a8fc <__ieee754_sqrt+0xb0>
 800a942:	4323      	orrs	r3, r4
 800a944:	d006      	beq.n	800a954 <__ieee754_sqrt+0x108>
 800a946:	1c54      	adds	r4, r2, #1
 800a948:	bf0b      	itete	eq
 800a94a:	4672      	moveq	r2, lr
 800a94c:	3201      	addne	r2, #1
 800a94e:	3001      	addeq	r0, #1
 800a950:	f022 0201 	bicne.w	r2, r2, #1
 800a954:	1043      	asrs	r3, r0, #1
 800a956:	07c1      	lsls	r1, r0, #31
 800a958:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a95c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a960:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a964:	bf48      	it	mi
 800a966:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a96a:	4610      	mov	r0, r2
 800a96c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a970:	e782      	b.n	800a878 <__ieee754_sqrt+0x2c>
 800a972:	0ae3      	lsrs	r3, r4, #11
 800a974:	3915      	subs	r1, #21
 800a976:	0564      	lsls	r4, r4, #21
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0fa      	beq.n	800a972 <__ieee754_sqrt+0x126>
 800a97c:	02de      	lsls	r6, r3, #11
 800a97e:	d50a      	bpl.n	800a996 <__ieee754_sqrt+0x14a>
 800a980:	f1c2 0020 	rsb	r0, r2, #32
 800a984:	fa24 f000 	lsr.w	r0, r4, r0
 800a988:	1e55      	subs	r5, r2, #1
 800a98a:	4094      	lsls	r4, r2
 800a98c:	4303      	orrs	r3, r0
 800a98e:	1b4a      	subs	r2, r1, r5
 800a990:	e78a      	b.n	800a8a8 <__ieee754_sqrt+0x5c>
 800a992:	4611      	mov	r1, r2
 800a994:	e7f0      	b.n	800a978 <__ieee754_sqrt+0x12c>
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	3201      	adds	r2, #1
 800a99a:	e7ef      	b.n	800a97c <__ieee754_sqrt+0x130>
 800a99c:	4688      	mov	r8, r1
 800a99e:	e7bd      	b.n	800a91c <__ieee754_sqrt+0xd0>
 800a9a0:	7ff00000 	.word	0x7ff00000

0800a9a4 <fabs>:
 800a9a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a9a8:	4770      	bx	lr

0800a9aa <finite>:
 800a9aa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a9ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a9b2:	0fc0      	lsrs	r0, r0, #31
 800a9b4:	4770      	bx	lr
	...

0800a9b8 <nan>:
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	4901      	ldr	r1, [pc, #4]	; (800a9c0 <nan+0x8>)
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	7ff80000 	.word	0x7ff80000

0800a9c4 <rint>:
 800a9c4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800a9c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ca:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800a9ce:	2f13      	cmp	r7, #19
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800a9dc:	dc59      	bgt.n	800aa92 <rint+0xce>
 800a9de:	2f00      	cmp	r7, #0
 800a9e0:	da2a      	bge.n	800aa38 <rint+0x74>
 800a9e2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a9e6:	4301      	orrs	r1, r0
 800a9e8:	d022      	beq.n	800aa30 <rint+0x6c>
 800a9ea:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800a9ee:	4301      	orrs	r1, r0
 800a9f0:	424d      	negs	r5, r1
 800a9f2:	430d      	orrs	r5, r1
 800a9f4:	4936      	ldr	r1, [pc, #216]	; (800aad0 <rint+0x10c>)
 800a9f6:	0c5c      	lsrs	r4, r3, #17
 800a9f8:	0b2d      	lsrs	r5, r5, #12
 800a9fa:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800a9fe:	0464      	lsls	r4, r4, #17
 800aa00:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aa04:	ea45 0304 	orr.w	r3, r5, r4
 800aa08:	e9d1 4500 	ldrd	r4, r5, [r1]
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	4629      	mov	r1, r5
 800aa10:	f7f5 fbac 	bl	800016c <__adddf3>
 800aa14:	e9cd 0100 	strd	r0, r1, [sp]
 800aa18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa1c:	462b      	mov	r3, r5
 800aa1e:	4622      	mov	r2, r4
 800aa20:	f7f5 fba2 	bl	8000168 <__aeabi_dsub>
 800aa24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa28:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4610      	mov	r0, r2
 800aa32:	4619      	mov	r1, r3
 800aa34:	b003      	add	sp, #12
 800aa36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa38:	4926      	ldr	r1, [pc, #152]	; (800aad4 <rint+0x110>)
 800aa3a:	4139      	asrs	r1, r7
 800aa3c:	ea03 0001 	and.w	r0, r3, r1
 800aa40:	4310      	orrs	r0, r2
 800aa42:	d0f5      	beq.n	800aa30 <rint+0x6c>
 800aa44:	084b      	lsrs	r3, r1, #1
 800aa46:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800aa4a:	ea52 0501 	orrs.w	r5, r2, r1
 800aa4e:	d00c      	beq.n	800aa6a <rint+0xa6>
 800aa50:	ea24 0303 	bic.w	r3, r4, r3
 800aa54:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800aa58:	2f13      	cmp	r7, #19
 800aa5a:	bf0c      	ite	eq
 800aa5c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800aa60:	2500      	movne	r5, #0
 800aa62:	fa44 f707 	asr.w	r7, r4, r7
 800aa66:	ea43 0407 	orr.w	r4, r3, r7
 800aa6a:	4919      	ldr	r1, [pc, #100]	; (800aad0 <rint+0x10c>)
 800aa6c:	4623      	mov	r3, r4
 800aa6e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800aa72:	462a      	mov	r2, r5
 800aa74:	e9d6 4500 	ldrd	r4, r5, [r6]
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	f7f5 fb76 	bl	800016c <__adddf3>
 800aa80:	e9cd 0100 	strd	r0, r1, [sp]
 800aa84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa88:	4622      	mov	r2, r4
 800aa8a:	462b      	mov	r3, r5
 800aa8c:	f7f5 fb6c 	bl	8000168 <__aeabi_dsub>
 800aa90:	e7cc      	b.n	800aa2c <rint+0x68>
 800aa92:	2f33      	cmp	r7, #51	; 0x33
 800aa94:	dd05      	ble.n	800aaa2 <rint+0xde>
 800aa96:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800aa9a:	d1c9      	bne.n	800aa30 <rint+0x6c>
 800aa9c:	f7f5 fb66 	bl	800016c <__adddf3>
 800aaa0:	e7c4      	b.n	800aa2c <rint+0x68>
 800aaa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aaa6:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800aaaa:	fa21 f10c 	lsr.w	r1, r1, ip
 800aaae:	4208      	tst	r0, r1
 800aab0:	d0be      	beq.n	800aa30 <rint+0x6c>
 800aab2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800aab6:	bf18      	it	ne
 800aab8:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800aabc:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800aac0:	bf1e      	ittt	ne
 800aac2:	ea20 0303 	bicne.w	r3, r0, r3
 800aac6:	fa45 fc0c 	asrne.w	ip, r5, ip
 800aaca:	ea43 050c 	orrne.w	r5, r3, ip
 800aace:	e7cc      	b.n	800aa6a <rint+0xa6>
 800aad0:	0800b2a0 	.word	0x0800b2a0
 800aad4:	000fffff 	.word	0x000fffff

0800aad8 <scalbn>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800aade:	4604      	mov	r4, r0
 800aae0:	460d      	mov	r5, r1
 800aae2:	4617      	mov	r7, r2
 800aae4:	460b      	mov	r3, r1
 800aae6:	b996      	cbnz	r6, 800ab0e <scalbn+0x36>
 800aae8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aaec:	4303      	orrs	r3, r0
 800aaee:	d039      	beq.n	800ab64 <scalbn+0x8c>
 800aaf0:	4b35      	ldr	r3, [pc, #212]	; (800abc8 <scalbn+0xf0>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f7f5 fcf0 	bl	80004d8 <__aeabi_dmul>
 800aaf8:	4b34      	ldr	r3, [pc, #208]	; (800abcc <scalbn+0xf4>)
 800aafa:	4604      	mov	r4, r0
 800aafc:	429f      	cmp	r7, r3
 800aafe:	460d      	mov	r5, r1
 800ab00:	da0f      	bge.n	800ab22 <scalbn+0x4a>
 800ab02:	a32d      	add	r3, pc, #180	; (adr r3, 800abb8 <scalbn+0xe0>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f7f5 fce6 	bl	80004d8 <__aeabi_dmul>
 800ab0c:	e006      	b.n	800ab1c <scalbn+0x44>
 800ab0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ab12:	4296      	cmp	r6, r2
 800ab14:	d10a      	bne.n	800ab2c <scalbn+0x54>
 800ab16:	4602      	mov	r2, r0
 800ab18:	f7f5 fb28 	bl	800016c <__adddf3>
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	460d      	mov	r5, r1
 800ab20:	e020      	b.n	800ab64 <scalbn+0x8c>
 800ab22:	460b      	mov	r3, r1
 800ab24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ab28:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ab2c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ab30:	19b9      	adds	r1, r7, r6
 800ab32:	4291      	cmp	r1, r2
 800ab34:	dd0e      	ble.n	800ab54 <scalbn+0x7c>
 800ab36:	a322      	add	r3, pc, #136	; (adr r3, 800abc0 <scalbn+0xe8>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ab40:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ab44:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ab48:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ab4c:	4820      	ldr	r0, [pc, #128]	; (800abd0 <scalbn+0xf8>)
 800ab4e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ab52:	e7d9      	b.n	800ab08 <scalbn+0x30>
 800ab54:	2900      	cmp	r1, #0
 800ab56:	dd08      	ble.n	800ab6a <scalbn+0x92>
 800ab58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ab64:	4620      	mov	r0, r4
 800ab66:	4629      	mov	r1, r5
 800ab68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab6a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ab6e:	da16      	bge.n	800ab9e <scalbn+0xc6>
 800ab70:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab74:	429f      	cmp	r7, r3
 800ab76:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ab7a:	dd08      	ble.n	800ab8e <scalbn+0xb6>
 800ab7c:	4c15      	ldr	r4, [pc, #84]	; (800abd4 <scalbn+0xfc>)
 800ab7e:	4814      	ldr	r0, [pc, #80]	; (800abd0 <scalbn+0xf8>)
 800ab80:	f363 74df 	bfi	r4, r3, #31, #1
 800ab84:	a30e      	add	r3, pc, #56	; (adr r3, 800abc0 <scalbn+0xe8>)
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	e7bc      	b.n	800ab08 <scalbn+0x30>
 800ab8e:	4c12      	ldr	r4, [pc, #72]	; (800abd8 <scalbn+0x100>)
 800ab90:	4812      	ldr	r0, [pc, #72]	; (800abdc <scalbn+0x104>)
 800ab92:	f363 74df 	bfi	r4, r3, #31, #1
 800ab96:	a308      	add	r3, pc, #32	; (adr r3, 800abb8 <scalbn+0xe0>)
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	e7f5      	b.n	800ab8a <scalbn+0xb2>
 800ab9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aba2:	3136      	adds	r1, #54	; 0x36
 800aba4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aba8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800abac:	4620      	mov	r0, r4
 800abae:	4629      	mov	r1, r5
 800abb0:	2200      	movs	r2, #0
 800abb2:	4b0b      	ldr	r3, [pc, #44]	; (800abe0 <scalbn+0x108>)
 800abb4:	e7a8      	b.n	800ab08 <scalbn+0x30>
 800abb6:	bf00      	nop
 800abb8:	c2f8f359 	.word	0xc2f8f359
 800abbc:	01a56e1f 	.word	0x01a56e1f
 800abc0:	8800759c 	.word	0x8800759c
 800abc4:	7e37e43c 	.word	0x7e37e43c
 800abc8:	43500000 	.word	0x43500000
 800abcc:	ffff3cb0 	.word	0xffff3cb0
 800abd0:	8800759c 	.word	0x8800759c
 800abd4:	7e37e43c 	.word	0x7e37e43c
 800abd8:	01a56e1f 	.word	0x01a56e1f
 800abdc:	c2f8f359 	.word	0xc2f8f359
 800abe0:	3c900000 	.word	0x3c900000

0800abe4 <_init>:
 800abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe6:	bf00      	nop
 800abe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abea:	bc08      	pop	{r3}
 800abec:	469e      	mov	lr, r3
 800abee:	4770      	bx	lr

0800abf0 <_fini>:
 800abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf2:	bf00      	nop
 800abf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf6:	bc08      	pop	{r3}
 800abf8:	469e      	mov	lr, r3
 800abfa:	4770      	bx	lr
