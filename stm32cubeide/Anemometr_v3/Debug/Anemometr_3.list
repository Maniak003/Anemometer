
Anemometr_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800ac90  0800ac90  0001ac90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b328  0800b328  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b328  0800b328  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b328  0800b328  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b328  0800b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb8  200001e0  0800b510  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d98  0800b510  00020d98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e7c  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003031  00000000  00000000  00037085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab62  00000000  00000000  0003c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163e2  00000000  00000000  0005727a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f7d  00000000  00000000  0006d65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001035d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006894  00000000  00000000  0010362c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ac74 	.word	0x0800ac74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800ac74 	.word	0x0800ac74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <DHCP_time_handler+0x18>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a03      	ldr	r2, [pc, #12]	; (8001094 <DHCP_time_handler+0x18>)
 8001088:	6013      	str	r3, [r2, #0]
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200001fc 	.word	0x200001fc

08001098 <rwFlash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void rwFlash(uint8_t rwFlag) {
 8001098:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800109c:	b08e      	sub	sp, #56	; 0x38
 800109e:	af02      	add	r7, sp, #8
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	uint32_t pageAdr = 0x800FC00; //.
 80010a4:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <rwFlash+0x230>)
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 80010ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b0:	4a86      	ldr	r2, [pc, #536]	; (80012cc <rwFlash+0x234>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d103      	bne.n	80010be <rwFlash+0x26>
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 80b1 	bne.w	8001220 <rwFlash+0x188>
		magicKey = 0x12349876;
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <rwFlash+0x234>)
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rwFlag == 0) { // For first initial
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10f      	bne.n	80010e8 <rwFlash+0x50>
			C_13 = CALIBRATE_START;
 80010c8:	4b81      	ldr	r3, [pc, #516]	; (80012d0 <rwFlash+0x238>)
 80010ca:	f649 4240 	movw	r2, #40000	; 0x9c40
 80010ce:	801a      	strh	r2, [r3, #0]
			C_24 = CALIBRATE_START;
 80010d0:	4b80      	ldr	r3, [pc, #512]	; (80012d4 <rwFlash+0x23c>)
 80010d2:	f649 4240 	movw	r2, #40000	; 0x9c40
 80010d6:	801a      	strh	r2, [r3, #0]
			DX1.f = 1;
 80010d8:	4b7f      	ldr	r3, [pc, #508]	; (80012d8 <rwFlash+0x240>)
 80010da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010de:	601a      	str	r2, [r3, #0]
			//DX2.f = 1;
			DY1.f = 1;
 80010e0:	4b7e      	ldr	r3, [pc, #504]	; (80012dc <rwFlash+0x244>)
 80010e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010e6:	601a      	str	r2, [r3, #0]
			//DY2.f = 1;
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
		EraseInitStruct.PageAddress = pageAdr; //
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbPages     = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]

		flash_ok = HAL_ERROR;
 80010f8:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <rwFlash+0x248>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 80010fe:	e005      	b.n	800110c <rwFlash+0x74>
		  flash_ok = HAL_FLASH_Unlock();
 8001100:	f002 fc0e 	bl	8003920 <HAL_FLASH_Unlock>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b75      	ldr	r3, [pc, #468]	; (80012e0 <rwFlash+0x248>)
 800110a:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 800110c:	4b74      	ldr	r3, [pc, #464]	; (80012e0 <rwFlash+0x248>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f5      	bne.n	8001100 <rwFlash+0x68>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fce6 	bl	8003af0 <HAL_FLASHEx_Erase>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d16b      	bne.n	8001202 <rwFlash+0x16a>
			dataForSave = (uint64_t) magicKey;
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	461a      	mov	r2, r3
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	e9c7 2308 	strd	r2, r3, [r7, #32]
			flash_ok = HAL_ERROR;
 8001136:	4b6a      	ldr	r3, [pc, #424]	; (80012e0 <rwFlash+0x248>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800113c:	e009      	b.n	8001152 <rwFlash+0xba>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key
 800113e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001144:	2003      	movs	r0, #3
 8001146:	f002 fb7b 	bl	8003840 <HAL_FLASH_Program>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b64      	ldr	r3, [pc, #400]	; (80012e0 <rwFlash+0x248>)
 8001150:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001152:	4b63      	ldr	r3, [pc, #396]	; (80012e0 <rwFlash+0x248>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f1      	bne.n	800113e <rwFlash+0xa6>
			}
			dataForSave = (uint64_t) (C_13 | ((uint64_t) C_24 << 16));
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <rwFlash+0x238>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29a      	uxth	r2, r3
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	495b      	ldr	r1, [pc, #364]	; (80012d4 <rwFlash+0x23c>)
 8001166:	8809      	ldrh	r1, [r1, #0]
 8001168:	b288      	uxth	r0, r1
 800116a:	f04f 0100 	mov.w	r1, #0
 800116e:	0c05      	lsrs	r5, r0, #16
 8001170:	0404      	lsls	r4, r0, #16
 8001172:	ea42 0804 	orr.w	r8, r2, r4
 8001176:	ea43 0905 	orr.w	r9, r3, r5
 800117a:	e9c7 8908 	strd	r8, r9, [r7, #32]
			flash_ok = HAL_ERROR;
 800117e:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <rwFlash+0x248>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001184:	e00b      	b.n	800119e <rwFlash+0x106>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 16, dataForSave); // Write C_12 C_34 C_14 C_23
 8001186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001188:	f103 0110 	add.w	r1, r3, #16
 800118c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001190:	2003      	movs	r0, #3
 8001192:	f002 fb55 	bl	8003840 <HAL_FLASH_Program>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <rwFlash+0x248>)
 800119c:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <rwFlash+0x248>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1ef      	bne.n	8001186 <rwFlash+0xee>
			}
			flash_ok = HAL_ERROR;
 80011a6:	4b4e      	ldr	r3, [pc, #312]	; (80012e0 <rwFlash+0x248>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011ac:	e00e      	b.n	80011cc <rwFlash+0x134>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 24, DX1.u); // Write DX1
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	f103 0118 	add.w	r1, r3, #24
 80011b4:	4b48      	ldr	r3, [pc, #288]	; (80012d8 <rwFlash+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	2002      	movs	r0, #2
 80011c0:	f002 fb3e 	bl	8003840 <HAL_FLASH_Program>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <rwFlash+0x248>)
 80011ca:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011cc:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <rwFlash+0x248>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1ec      	bne.n	80011ae <rwFlash+0x116>
			}
			//flash_ok = HAL_ERROR;
			//while(flash_ok != HAL_OK){
			//	flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 28, DX2.u); // Write DX2
			//}
			flash_ok = HAL_ERROR;
 80011d4:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <rwFlash+0x248>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011da:	e00e      	b.n	80011fa <rwFlash+0x162>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 32, DY1.u); // Write DY1
 80011dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011de:	f103 0120 	add.w	r1, r3, #32
 80011e2:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <rwFlash+0x244>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	2002      	movs	r0, #2
 80011ee:	f002 fb27 	bl	8003840 <HAL_FLASH_Program>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <rwFlash+0x248>)
 80011f8:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011fa:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <rwFlash+0x248>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ec      	bne.n	80011dc <rwFlash+0x144>
			//while(flash_ok != HAL_OK){
			//	flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 36, DY2.u); // Write DY2
			//}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <rwFlash+0x248>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8001208:	e005      	b.n	8001216 <rwFlash+0x17e>
			flash_ok = HAL_FLASH_Lock();
 800120a:	f002 fbaf 	bl	800396c <HAL_FLASH_Lock>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <rwFlash+0x248>)
 8001214:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <rwFlash+0x248>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f5      	bne.n	800120a <rwFlash+0x172>
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 800121e:	e04d      	b.n	80012bc <rwFlash+0x224>
		}
	} else {
		/* Задержки измерения в каналах */
		C_13 = *(__IO uint16_t*) (pageAdr + 16);
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	3310      	adds	r3, #16
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <rwFlash+0x238>)
 800122a:	801a      	strh	r2, [r3, #0]
		C_24 = *(__IO uint16_t*) (pageAdr + 18);
 800122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122e:	3312      	adds	r3, #18
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <rwFlash+0x23c>)
 8001236:	801a      	strh	r2, [r3, #0]
		//C_31 = *(__IO uint16_t*) (pageAdr + 20);
		//C_42 = *(__IO uint16_t*) (pageAdr + 22);
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8001238:	22c8      	movs	r2, #200	; 0xc8
 800123a:	2100      	movs	r1, #0
 800123c:	4829      	ldr	r0, [pc, #164]	; (80012e4 <rwFlash+0x24c>)
 800123e:	f005 fc45 	bl	8006acc <memset>
		sprintf(SndBuffer, "C_13: %5d, C_24: %5d  \r\n", C_13, C_24);
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <rwFlash+0x238>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <rwFlash+0x23c>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4926      	ldr	r1, [pc, #152]	; (80012e8 <rwFlash+0x250>)
 800124e:	4825      	ldr	r0, [pc, #148]	; (80012e4 <rwFlash+0x24c>)
 8001250:	f006 f8a4 	bl	800739c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	22c8      	movs	r2, #200	; 0xc8
 800125a:	4922      	ldr	r1, [pc, #136]	; (80012e4 <rwFlash+0x24c>)
 800125c:	4823      	ldr	r0, [pc, #140]	; (80012ec <rwFlash+0x254>)
 800125e:	f005 f9ff 	bl	8006660 <HAL_UART_Transmit>

		/* Поправочные коэффициенты */
		DX1.u = *(__IO uint32_t*) (pageAdr + 24);
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	3318      	adds	r3, #24
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <rwFlash+0x240>)
 800126a:	6013      	str	r3, [r2, #0]
		//DX2.u = *(__IO uint32_t*) (pageAdr + 28);
		DY1.u = *(__IO uint32_t*) (pageAdr + 32);
 800126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126e:	3320      	adds	r3, #32
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <rwFlash+0x244>)
 8001274:	6013      	str	r3, [r2, #0]
		//DY2.u = *(__IO uint32_t*) (pageAdr + 36);
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8001276:	22c8      	movs	r2, #200	; 0xc8
 8001278:	2100      	movs	r1, #0
 800127a:	481a      	ldr	r0, [pc, #104]	; (80012e4 <rwFlash+0x24c>)
 800127c:	f005 fc26 	bl	8006acc <memset>
		sprintf(SndBuffer, "DX1: %7.6f, DY1: %7.6f \r\n", DX1.f, DY1.f);
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <rwFlash+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8cf 	bl	8000428 <__aeabi_f2d>
 800128a:	4604      	mov	r4, r0
 800128c:	460d      	mov	r5, r1
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <rwFlash+0x244>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f8c8 	bl	8000428 <__aeabi_f2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	e9cd 2300 	strd	r2, r3, [sp]
 80012a0:	4622      	mov	r2, r4
 80012a2:	462b      	mov	r3, r5
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <rwFlash+0x258>)
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <rwFlash+0x24c>)
 80012a8:	f006 f878 	bl	800739c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	22c8      	movs	r2, #200	; 0xc8
 80012b2:	490c      	ldr	r1, [pc, #48]	; (80012e4 <rwFlash+0x24c>)
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <rwFlash+0x254>)
 80012b6:	f005 f9d3 	bl	8006660 <HAL_UART_Transmit>
	}
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3730      	adds	r7, #48	; 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012c6:	bf00      	nop
 80012c8:	0800fc00 	.word	0x0800fc00
 80012cc:	12349876 	.word	0x12349876
 80012d0:	200006e0 	.word	0x200006e0
 80012d4:	20000334 	.word	0x20000334
 80012d8:	200002e8 	.word	0x200002e8
 80012dc:	200002f8 	.word	0x200002f8
 80012e0:	20000d5c 	.word	0x20000d5c
 80012e4:	2000020c 	.word	0x2000020c
 80012e8:	0800ac90 	.word	0x0800ac90
 80012ec:	20000c80 	.word	0x20000c80
 80012f0:	0800acac 	.word	0x0800acac

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f8:	b0a1      	sub	sp, #132	; 0x84
 80012fa:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fc:	f002 f916 	bl	800352c <HAL_Init>

  /* USER CODE BEGIN Init */
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
			(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) ? "Yes" : "No",
 8001300:	4b56      	ldr	r3, [pc, #344]	; (800145c <main+0x168>)
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001304:	2b00      	cmp	r3, #0
 8001306:	da01      	bge.n	800130c <main+0x18>
 8001308:	4c55      	ldr	r4, [pc, #340]	; (8001460 <main+0x16c>)
 800130a:	e000      	b.n	800130e <main+0x1a>
 800130c:	4c55      	ldr	r4, [pc, #340]	; (8001464 <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) ? "Yes" : "No",
 800130e:	4b53      	ldr	r3, [pc, #332]	; (800145c <main+0x168>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <main+0x2a>
 800131a:	4d51      	ldr	r5, [pc, #324]	; (8001460 <main+0x16c>)
 800131c:	e000      	b.n	8001320 <main+0x2c>
 800131e:	4d51      	ldr	r5, [pc, #324]	; (8001464 <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) ? "Yes" : "No",
 8001320:	4b4e      	ldr	r3, [pc, #312]	; (800145c <main+0x168>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <main+0x3c>
 800132c:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <main+0x16c>)
 800132e:	e000      	b.n	8001332 <main+0x3e>
 8001330:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) ? "Yes" : "No",
 8001332:	4a4a      	ldr	r2, [pc, #296]	; (800145c <main+0x168>)
 8001334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001336:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800133a:	2a00      	cmp	r2, #0
 800133c:	d001      	beq.n	8001342 <main+0x4e>
 800133e:	4a48      	ldr	r2, [pc, #288]	; (8001460 <main+0x16c>)
 8001340:	e000      	b.n	8001344 <main+0x50>
 8001342:	4a48      	ldr	r2, [pc, #288]	; (8001464 <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) ? "Yes" : "No",
 8001344:	4945      	ldr	r1, [pc, #276]	; (800145c <main+0x168>)
 8001346:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001348:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800134c:	2900      	cmp	r1, #0
 800134e:	d001      	beq.n	8001354 <main+0x60>
 8001350:	4943      	ldr	r1, [pc, #268]	; (8001460 <main+0x16c>)
 8001352:	e000      	b.n	8001356 <main+0x62>
 8001354:	4943      	ldr	r1, [pc, #268]	; (8001464 <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) ? "Yes" : "No");
 8001356:	4841      	ldr	r0, [pc, #260]	; (800145c <main+0x168>)
 8001358:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800135a:	f000 6000 	and.w	r0, r0, #134217728	; 0x8000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800135e:	2800      	cmp	r0, #0
 8001360:	d001      	beq.n	8001366 <main+0x72>
 8001362:	483f      	ldr	r0, [pc, #252]	; (8001460 <main+0x16c>)
 8001364:	e000      	b.n	8001368 <main+0x74>
 8001366:	483f      	ldr	r0, [pc, #252]	; (8001464 <main+0x170>)
 8001368:	9003      	str	r0, [sp, #12]
 800136a:	9102      	str	r1, [sp, #8]
 800136c:	9201      	str	r2, [sp, #4]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	462b      	mov	r3, r5
 8001372:	4622      	mov	r2, r4
 8001374:	493c      	ldr	r1, [pc, #240]	; (8001468 <main+0x174>)
 8001376:	483d      	ldr	r0, [pc, #244]	; (800146c <main+0x178>)
 8001378:	f006 f810 	bl	800739c <siprintf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 fcd4 	bl	8001d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f001 f81c 	bl	80023bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001384:	f000 fff0 	bl	8002368 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001388:	f000 fd90 	bl	8001eac <MX_TIM1_Init>
  MX_TIM4_Init();
 800138c:	f000 ff9e 	bl	80022cc <MX_TIM4_Init>
  MX_TIM3_Init();
 8001390:	f000 ff08 	bl	80021a4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001394:	f000 fe70 	bl	8002078 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001398:	f000 fd0a 	bl	8001db0 <MX_I2C1_Init>
  MX_SPI2_Init();
 800139c:	f000 fd50 	bl	8001e40 <MX_SPI2_Init>
  MX_IWDG_Init();
 80013a0:	f000 fd34 	bl	8001e0c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	4831      	ldr	r0, [pc, #196]	; (8001470 <main+0x17c>)
 80013aa:	f002 fdcd 	bl	8003f48 <HAL_GPIO_WritePin>
  readyFlag = TRUE;
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <main+0x180>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
  //sumCounter2 = 0;
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b8:	22c8      	movs	r2, #200	; 0xc8
 80013ba:	492c      	ldr	r1, [pc, #176]	; (800146c <main+0x178>)
 80013bc:	482e      	ldr	r0, [pc, #184]	; (8001478 <main+0x184>)
 80013be:	f005 f94f 	bl	8006660 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_START_TEXT, sizeof(INIT_START_TEXT), HAL_MAX_DELAY);
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c6:	2212      	movs	r2, #18
 80013c8:	492c      	ldr	r1, [pc, #176]	; (800147c <main+0x188>)
 80013ca:	482b      	ldr	r0, [pc, #172]	; (8001478 <main+0x184>)
 80013cc:	f005 f948 	bl	8006660 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(SCSN_GPIO_Port, SCSN_Pin, GPIO_PIN_SET);
  HAL_Delay(2000);
  init_w5500();
#else
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_RESET);	// Reset W5500
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d6:	4826      	ldr	r0, [pc, #152]	; (8001470 <main+0x17c>)
 80013d8:	f002 fdb6 	bl	8003f48 <HAL_GPIO_WritePin>
#endif
  rwFlash(0);		// Чтение параметров калибровки из Flash.
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fe5b 	bl	8001098 <rwFlash>

  /* Таймер задержки запуска измерения */
  receiversOff
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <main+0x18c>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	4a26      	ldr	r2, [pc, #152]	; (8001480 <main+0x18c>)
 80013e8:	f043 031e 	orr.w	r3, r3, #30
 80013ec:	60d3      	str	r3, [r2, #12]
  C_13 = CALIBRATE_START;
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <main+0x190>)
 80013f0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80013f4:	801a      	strh	r2, [r3, #0]
  TIM3->ARR = C_13; 		// Коррекция для таймера запуска измерения Z13
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <main+0x190>)
 80013f8:	881a      	ldrh	r2, [r3, #0]
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <main+0x194>)
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
  /*
   * calibrateMode == 0 -- Нормальный режим
   * calibrateMode > 0 -- Режим калибровки
   */
  calibrateMode = 0;
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <main+0x198>)
 8001400:	2200      	movs	r2, #0
 8001402:	801a      	strh	r2, [r3, #0]
  test_flag = FALSE;
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <main+0x19c>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
  Xsum = 0;
 800140a:	4922      	ldr	r1, [pc, #136]	; (8001494 <main+0x1a0>)
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 8001418:	491f      	ldr	r1, [pc, #124]	; (8001498 <main+0x1a4>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
  Vmax = 0;
 8001426:	491d      	ldr	r1, [pc, #116]	; (800149c <main+0x1a8>)
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2300 	strd	r2, r3, [r1]
  firstTime = TRUE;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <main+0x1ac>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
  currentMode = 0;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <main+0x1b0>)
 800143c:	2200      	movs	r2, #0
 800143e:	801a      	strh	r2, [r3, #0]
  STOP_CAPTURE
 8001440:	2100      	movs	r1, #0
 8001442:	4819      	ldr	r0, [pc, #100]	; (80014a8 <main+0x1b4>)
 8001444:	f003 ff5a 	bl	80052fc <HAL_TIM_IC_Stop_IT>
 8001448:	2104      	movs	r1, #4
 800144a:	4817      	ldr	r0, [pc, #92]	; (80014a8 <main+0x1b4>)
 800144c:	f003 ff56 	bl	80052fc <HAL_TIM_IC_Stop_IT>
  measCount = 0;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <main+0x1b8>)
 8001452:	2200      	movs	r2, #0
 8001454:	801a      	strh	r2, [r3, #0]
  /*
   *	Очистка массива результатов.
   */
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
 800145a:	e038      	b.n	80014ce <main+0x1da>
 800145c:	40021000 	.word	0x40021000
 8001460:	0800acc8 	.word	0x0800acc8
 8001464:	0800accc 	.word	0x0800accc
 8001468:	0800acd0 	.word	0x0800acd0
 800146c:	2000020c 	.word	0x2000020c
 8001470:	40010800 	.word	0x40010800
 8001474:	200002ec 	.word	0x200002ec
 8001478:	20000c80 	.word	0x20000c80
 800147c:	0800ad14 	.word	0x0800ad14
 8001480:	40010c00 	.word	0x40010c00
 8001484:	200006e0 	.word	0x200006e0
 8001488:	40000400 	.word	0x40000400
 800148c:	20000878 	.word	0x20000878
 8001490:	20000398 	.word	0x20000398
 8001494:	20000390 	.word	0x20000390
 8001498:	200002f0 	.word	0x200002f0
 800149c:	20000308 	.word	0x20000308
 80014a0:	20000b24 	.word	0x20000b24
 80014a4:	200006d0 	.word	0x200006d0
 80014a8:	20000d10 	.word	0x20000d10
 80014ac:	20000310 	.word	0x20000310
	  resul_arrayX1[ii] = 0;
 80014b0:	4a92      	ldr	r2, [pc, #584]	; (80016fc <main+0x408>)
 80014b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b4:	f04f 0100 	mov.w	r1, #0
 80014b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  resul_arrayY1[ii] = 0;
 80014bc:	4a90      	ldr	r2, [pc, #576]	; (8001700 <main+0x40c>)
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	f04f 0100 	mov.w	r1, #0
 80014c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 80014c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ca:	3301      	adds	r3, #1
 80014cc:	637b      	str	r3, [r7, #52]	; 0x34
 80014ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d0:	2b63      	cmp	r3, #99	; 0x63
 80014d2:	dded      	ble.n	80014b0 <main+0x1bc>
  }
  calibrate13 = FALSE;
 80014d4:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <main+0x410>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
  calibrate24 = FALSE;
 80014da:	4b8b      	ldr	r3, [pc, #556]	; (8001708 <main+0x414>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_FINISH_TEXT, sizeof(INIT_FINISH_TEXT), HAL_MAX_DELAY);
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e4:	2213      	movs	r2, #19
 80014e6:	4989      	ldr	r1, [pc, #548]	; (800170c <main+0x418>)
 80014e8:	4889      	ldr	r0, [pc, #548]	; (8001710 <main+0x41c>)
 80014ea:	f005 f8b9 	bl	8006660 <HAL_UART_Transmit>


  HAL_TIM_Base_Start_IT(&htim3);
 80014ee:	4889      	ldr	r0, [pc, #548]	; (8001714 <main+0x420>)
 80014f0:	f003 fbc8 	bl	8004c84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80014f4:	4888      	ldr	r0, [pc, #544]	; (8001718 <main+0x424>)
 80014f6:	f003 fbc5 	bl	8004c84 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  V = 0;
 80014fa:	4988      	ldr	r1, [pc, #544]	; (800171c <main+0x428>)
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9c1 2300 	strd	r2, r3, [r1]
  Xsum = 0;
 8001508:	4985      	ldr	r1, [pc, #532]	; (8001720 <main+0x42c>)
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 8001516:	4983      	ldr	r1, [pc, #524]	; (8001724 <main+0x430>)
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9c1 2300 	strd	r2, r3, [r1]
  Vmaxfin = 0;
 8001524:	4980      	ldr	r1, [pc, #512]	; (8001728 <main+0x434>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	e9c1 2300 	strd	r2, r3, [r1]
  Xmaxfin = 0;
 8001532:	497e      	ldr	r1, [pc, #504]	; (800172c <main+0x438>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c1 2300 	strd	r2, r3, [r1]
  Ymaxfin = 0;
 8001540:	497b      	ldr	r1, [pc, #492]	; (8001730 <main+0x43c>)
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9c1 2300 	strd	r2, r3, [r1]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	4878      	ldr	r0, [pc, #480]	; (8001734 <main+0x440>)
 8001554:	f002 fcf8 	bl	8003f48 <HAL_GPIO_WritePin>
  while (1)
  {
	  if (readyFlag) {
 8001558:	4b77      	ldr	r3, [pc, #476]	; (8001738 <main+0x444>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 82d8 	beq.w	8001b12 <main+0x81e>
		  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8001562:	4b76      	ldr	r3, [pc, #472]	; (800173c <main+0x448>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a75      	ldr	r2, [pc, #468]	; (800173c <main+0x448>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6013      	str	r3, [r2, #0]
		  HAL_IWDG_Refresh(&hiwdg);
 800156e:	4874      	ldr	r0, [pc, #464]	; (8001740 <main+0x44c>)
 8001570:	f002 fe88 	bl	8004284 <HAL_IWDG_Refresh>
		  readyFlag = FALSE;
 8001574:	4b70      	ldr	r3, [pc, #448]	; (8001738 <main+0x444>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
		  if (calibrateMode > 0) {
 800157a:	4b72      	ldr	r3, [pc, #456]	; (8001744 <main+0x450>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8256 	beq.w	8001a30 <main+0x73c>
			  /* Процедура калибровки */
			  if (( calibrate13 || calibrate24 ) && (calibrateCount < CALIBRATE_MAX_COUNT)) {
 8001584:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <main+0x410>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d104      	bne.n	8001596 <main+0x2a2>
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <main+0x414>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 813e 	beq.w	8001812 <main+0x51e>
 8001596:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <main+0x454>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800159e:	f080 8138 	bcs.w	8001812 <main+0x51e>
				  memset(SndBuffer, 0, sizeof(SndBuffer));
 80015a2:	22c8      	movs	r2, #200	; 0xc8
 80015a4:	2100      	movs	r1, #0
 80015a6:	4869      	ldr	r0, [pc, #420]	; (800174c <main+0x458>)
 80015a8:	f005 fa90 	bl	8006acc <memset>
				  if (test_flag) {
 80015ac:	4b68      	ldr	r3, [pc, #416]	; (8001750 <main+0x45c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d032      	beq.n	800161a <main+0x326>
					  sprintf(SndBuffer, "Z13-Z31:%5.0f, Z42-Z24:%5.0f   \r",
							  resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80015b4:	4b52      	ldr	r3, [pc, #328]	; (8001700 <main+0x40c>)
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	4b66      	ldr	r3, [pc, #408]	; (8001754 <main+0x460>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a66      	ldr	r2, [pc, #408]	; (8001758 <main+0x464>)
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fb6e 	bl	8000ca4 <__aeabi_fmul>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff fa5f 	bl	8000a90 <__aeabi_fsub>
 80015d2:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13-Z31:%5.0f, Z42-Z24:%5.0f   \r",
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff27 	bl	8000428 <__aeabi_f2d>
 80015da:	4604      	mov	r4, r0
 80015dc:	460d      	mov	r5, r1
							  resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 80015de:	4b47      	ldr	r3, [pc, #284]	; (80016fc <main+0x408>)
 80015e0:	681e      	ldr	r6, [r3, #0]
 80015e2:	4b5e      	ldr	r3, [pc, #376]	; (800175c <main+0x468>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a5e      	ldr	r2, [pc, #376]	; (8001760 <main+0x46c>)
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fb59 	bl	8000ca4 <__aeabi_fmul>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4619      	mov	r1, r3
 80015f6:	4630      	mov	r0, r6
 80015f8:	f7ff fa4a 	bl	8000a90 <__aeabi_fsub>
 80015fc:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13-Z31:%5.0f, Z42-Z24:%5.0f   \r",
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff12 	bl	8000428 <__aeabi_f2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	e9cd 2300 	strd	r2, r3, [sp]
 800160c:	4622      	mov	r2, r4
 800160e:	462b      	mov	r3, r5
 8001610:	4954      	ldr	r1, [pc, #336]	; (8001764 <main+0x470>)
 8001612:	484e      	ldr	r0, [pc, #312]	; (800174c <main+0x458>)
 8001614:	f005 fec2 	bl	800739c <siprintf>
 8001618:	e027      	b.n	800166a <main+0x376>
				  } else {
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <main+0x40c>)
 800161c:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff02 	bl	8000428 <__aeabi_f2d>
 8001624:	4682      	mov	sl, r0
 8001626:	468b      	mov	fp, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8001628:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <main+0x460>)
 800162a:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fefb 	bl	8000428 <__aeabi_f2d>
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <main+0x408>)
 8001638:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fef4 	bl	8000428 <__aeabi_f2d>
 8001640:	4680      	mov	r8, r0
 8001642:	4689      	mov	r9, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8001644:	4b45      	ldr	r3, [pc, #276]	; (800175c <main+0x468>)
 8001646:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe feed 	bl	8000428 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001656:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800165a:	e9cd 4500 	strd	r4, r5, [sp]
 800165e:	4652      	mov	r2, sl
 8001660:	465b      	mov	r3, fp
 8001662:	4941      	ldr	r1, [pc, #260]	; (8001768 <main+0x474>)
 8001664:	4839      	ldr	r0, [pc, #228]	; (800174c <main+0x458>)
 8001666:	f005 fe99 	bl	800739c <siprintf>
				  }
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	22c8      	movs	r2, #200	; 0xc8
 8001670:	4936      	ldr	r1, [pc, #216]	; (800174c <main+0x458>)
 8001672:	4827      	ldr	r0, [pc, #156]	; (8001710 <main+0x41c>)
 8001674:	f004 fff4 	bl	8006660 <HAL_UART_Transmit>
				  /* Y */
				  if (! test_flag) {
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <main+0x45c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f083 0301 	eor.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80bb 	beq.w	80017fe <main+0x50a>
					  if ( calibrate13 && (abs(resul_arrayY1[0] + resul_arrayY2[0] - 1600) > CALIBRATE_ACURACY) ) {
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <main+0x410>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d071      	beq.n	8001774 <main+0x480>
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <main+0x40c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <main+0x460>)
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f9fa 	bl	8000a94 <__addsf3>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4932      	ldr	r1, [pc, #200]	; (800176c <main+0x478>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff f9f3 	bl	8000a90 <__aeabi_fsub>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fcbf 	bl	8001030 <__aeabi_f2iz>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bfb8      	it	lt
 80016b8:	425b      	neglt	r3, r3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	dd5a      	ble.n	8001774 <main+0x480>
						  if (resul_arrayY1[0] + resul_arrayY2[0] > 1600) {
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <main+0x40c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a24      	ldr	r2, [pc, #144]	; (8001754 <main+0x460>)
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f9e3 	bl	8000a94 <__addsf3>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4926      	ldr	r1, [pc, #152]	; (800176c <main+0x478>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fca2 	bl	800101c <__aeabi_fcmpgt>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <main+0x3f8>
							  C_13++;
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <main+0x47c>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <main+0x47c>)
 80016e8:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] + resul_arrayY2[0] > 1600) {
 80016ea:	e046      	b.n	800177a <main+0x486>
						  } else {
							  C_13--;
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <main+0x47c>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <main+0x47c>)
 80016f6:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] + resul_arrayY2[0] > 1600) {
 80016f8:	e03f      	b.n	800177a <main+0x486>
 80016fa:	bf00      	nop
 80016fc:	20000540 	.word	0x20000540
 8001700:	2000039c 	.word	0x2000039c
 8001704:	20000336 	.word	0x20000336
 8001708:	2000053c 	.word	0x2000053c
 800170c:	0800ad28 	.word	0x0800ad28
 8001710:	20000c80 	.word	0x20000c80
 8001714:	20000c38 	.word	0x20000c38
 8001718:	20000b88 	.word	0x20000b88
 800171c:	20000380 	.word	0x20000380
 8001720:	20000390 	.word	0x20000390
 8001724:	200002f0 	.word	0x200002f0
 8001728:	20000300 	.word	0x20000300
 800172c:	20000880 	.word	0x20000880
 8001730:	20000530 	.word	0x20000530
 8001734:	40010800 	.word	0x40010800
 8001738:	200002ec 	.word	0x200002ec
 800173c:	e000e010 	.word	0xe000e010
 8001740:	20000c24 	.word	0x20000c24
 8001744:	20000878 	.word	0x20000878
 8001748:	2000087a 	.word	0x2000087a
 800174c:	2000020c 	.word	0x2000020c
 8001750:	20000398 	.word	0x20000398
 8001754:	20000888 	.word	0x20000888
 8001758:	200002f8 	.word	0x200002f8
 800175c:	200006e4 	.word	0x200006e4
 8001760:	200002e8 	.word	0x200002e8
 8001764:	0800ad3c 	.word	0x0800ad3c
 8001768:	0800ad60 	.word	0x0800ad60
 800176c:	44c80000 	.word	0x44c80000
 8001770:	200006e0 	.word	0x200006e0
						  }
					  } else {
						  calibrate13 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y1
 8001774:	4b94      	ldr	r3, [pc, #592]	; (80019c8 <main+0x6d4>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
					  }
					  /* X */
					  if ( calibrate24 && (abs(resul_arrayX1[0] + resul_arrayX2[0] - 1600) > CALIBRATE_ACURACY) ) {
 800177a:	4b94      	ldr	r3, [pc, #592]	; (80019cc <main+0x6d8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d034      	beq.n	80017ec <main+0x4f8>
 8001782:	4b93      	ldr	r3, [pc, #588]	; (80019d0 <main+0x6dc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a93      	ldr	r2, [pc, #588]	; (80019d4 <main+0x6e0>)
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f981 	bl	8000a94 <__addsf3>
 8001792:	4603      	mov	r3, r0
 8001794:	4990      	ldr	r1, [pc, #576]	; (80019d8 <main+0x6e4>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f97a 	bl	8000a90 <__aeabi_fsub>
 800179c:	4603      	mov	r3, r0
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fc46 	bl	8001030 <__aeabi_f2iz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bfb8      	it	lt
 80017aa:	425b      	neglt	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	dd1d      	ble.n	80017ec <main+0x4f8>
						  if (resul_arrayX1[0] + resul_arrayX2[0] > 1600) {
 80017b0:	4b87      	ldr	r3, [pc, #540]	; (80019d0 <main+0x6dc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a87      	ldr	r2, [pc, #540]	; (80019d4 <main+0x6e0>)
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f96a 	bl	8000a94 <__addsf3>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4985      	ldr	r1, [pc, #532]	; (80019d8 <main+0x6e4>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc29 	bl	800101c <__aeabi_fcmpgt>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <main+0x4ea>
							  C_24++;
 80017d0:	4b82      	ldr	r3, [pc, #520]	; (80019dc <main+0x6e8>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b80      	ldr	r3, [pc, #512]	; (80019dc <main+0x6e8>)
 80017da:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] + resul_arrayX2[0] > 1600) {
 80017dc:	e009      	b.n	80017f2 <main+0x4fe>
						  } else {
							  C_24--;
 80017de:	4b7f      	ldr	r3, [pc, #508]	; (80019dc <main+0x6e8>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b7d      	ldr	r3, [pc, #500]	; (80019dc <main+0x6e8>)
 80017e8:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] + resul_arrayX2[0] > 1600) {
 80017ea:	e002      	b.n	80017f2 <main+0x4fe>
						  }
					  } else {
						  calibrate24 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y2
 80017ec:	4b77      	ldr	r3, [pc, #476]	; (80019cc <main+0x6d8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
					  }
					  calibrateCount++;
 80017f2:	4b7b      	ldr	r3, [pc, #492]	; (80019e0 <main+0x6ec>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <main+0x6ec>)
 80017fc:	801a      	strh	r2, [r3, #0]
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 80017fe:	4b79      	ldr	r3, [pc, #484]	; (80019e4 <main+0x6f0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a78      	ldr	r2, [pc, #480]	; (80019e4 <main+0x6f0>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 800180a:	4877      	ldr	r0, [pc, #476]	; (80019e8 <main+0x6f4>)
 800180c:	f003 fa3a 	bl	8004c84 <HAL_TIM_Base_Start_IT>
 8001810:	e17f      	b.n	8001b12 <main+0x81e>
			  } else {
				  if (calibrateCount >= CALIBRATE_MAX_COUNT) {
 8001812:	4b73      	ldr	r3, [pc, #460]	; (80019e0 <main+0x6ec>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800181a:	d308      	bcc.n	800182e <main+0x53a>
					  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_TOUT, sizeof(CALIBRATE_ERROR_TOUT), 1000);
 800181c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001820:	221f      	movs	r2, #31
 8001822:	4972      	ldr	r1, [pc, #456]	; (80019ec <main+0x6f8>)
 8001824:	4872      	ldr	r0, [pc, #456]	; (80019f0 <main+0x6fc>)
 8001826:	f004 ff1b 	bl	8006660 <HAL_UART_Transmit>
					  /* System restart if calibrate error. */
					  HAL_NVIC_SystemReset();
 800182a:	f001 fff8 	bl	800381e <HAL_NVIC_SystemReset>
				  }
				  if (calibrateMode > 0) {
 800182e:	4b71      	ldr	r3, [pc, #452]	; (80019f4 <main+0x700>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80bd 	beq.w	80019b2 <main+0x6be>
					  ZX1 = ZX1 + (float) resul_arrayX1[0];
 8001838:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <main+0x6dc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <main+0x704>)
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f926 	bl	8000a94 <__addsf3>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <main+0x704>)
 800184e:	601a      	str	r2, [r3, #0]
					  ZX2 = ZX2 + (float) resul_arrayX2[0];
 8001850:	4b60      	ldr	r3, [pc, #384]	; (80019d4 <main+0x6e0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a69      	ldr	r2, [pc, #420]	; (80019fc <main+0x708>)
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f91a 	bl	8000a94 <__addsf3>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b65      	ldr	r3, [pc, #404]	; (80019fc <main+0x708>)
 8001866:	601a      	str	r2, [r3, #0]
					  ZY1 = ZY1 + (float) resul_arrayY1[0];
 8001868:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <main+0x70c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a65      	ldr	r2, [pc, #404]	; (8001a04 <main+0x710>)
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f90e 	bl	8000a94 <__addsf3>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <main+0x710>)
 800187e:	601a      	str	r2, [r3, #0]
					  ZY2 = ZY2 + (float) resul_arrayY2[0];
 8001880:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <main+0x714>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a61      	ldr	r2, [pc, #388]	; (8001a0c <main+0x718>)
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f902 	bl	8000a94 <__addsf3>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <main+0x718>)
 8001896:	601a      	str	r2, [r3, #0]
					  calibrateMode--;
 8001898:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <main+0x700>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <main+0x700>)
 80018a2:	801a      	strh	r2, [r3, #0]
					  if (calibrateMode == 0) {
 80018a4:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <main+0x700>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 8082 	bne.w	80019b2 <main+0x6be>
						  /* Вычисление поправок */
						  DX1.f = ZX1 / ZX2;
 80018ae:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <main+0x704>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a52      	ldr	r2, [pc, #328]	; (80019fc <main+0x708>)
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff faa7 	bl	8000e0c <__aeabi_fdiv>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <main+0x71c>)
 80018c4:	601a      	str	r2, [r3, #0]
						  DY1.f = ZY1 / ZY2;
 80018c6:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <main+0x710>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a50      	ldr	r2, [pc, #320]	; (8001a0c <main+0x718>)
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fa9b 	bl	8000e0c <__aeabi_fdiv>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4b4e      	ldr	r3, [pc, #312]	; (8001a14 <main+0x720>)
 80018dc:	601a      	str	r2, [r3, #0]
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 80018de:	22c8      	movs	r2, #200	; 0xc8
 80018e0:	2100      	movs	r1, #0
 80018e2:	484d      	ldr	r0, [pc, #308]	; (8001a18 <main+0x724>)
 80018e4:	f005 f8f2 	bl	8006acc <memset>
						  sprintf(SndBuffer, "\r\nCalibrate complite.\r\nC_13:%5d, C_24:%5d\r\n", C_13, C_24);
 80018e8:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <main+0x728>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <main+0x6e8>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	494b      	ldr	r1, [pc, #300]	; (8001a20 <main+0x72c>)
 80018f4:	4848      	ldr	r0, [pc, #288]	; (8001a18 <main+0x724>)
 80018f6:	f005 fd51 	bl	800739c <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	22c8      	movs	r2, #200	; 0xc8
 8001900:	4945      	ldr	r1, [pc, #276]	; (8001a18 <main+0x724>)
 8001902:	483b      	ldr	r0, [pc, #236]	; (80019f0 <main+0x6fc>)
 8001904:	f004 feac 	bl	8006660 <HAL_UART_Transmit>
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001908:	22c8      	movs	r2, #200	; 0xc8
 800190a:	2100      	movs	r1, #0
 800190c:	4842      	ldr	r0, [pc, #264]	; (8001a18 <main+0x724>)
 800190e:	f005 f8dd 	bl	8006acc <memset>
						  sprintf(SndBuffer, "DX1:%5.4f, DY1:%5.4f\r\n\r\n", DX1.f, DY1.f);
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <main+0x71c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd86 	bl	8000428 <__aeabi_f2d>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	4b3c      	ldr	r3, [pc, #240]	; (8001a14 <main+0x720>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fd7f 	bl	8000428 <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	e9cd 2300 	strd	r2, r3, [sp]
 8001932:	4622      	mov	r2, r4
 8001934:	462b      	mov	r3, r5
 8001936:	493b      	ldr	r1, [pc, #236]	; (8001a24 <main+0x730>)
 8001938:	4837      	ldr	r0, [pc, #220]	; (8001a18 <main+0x724>)
 800193a:	f005 fd2f 	bl	800739c <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	22c8      	movs	r2, #200	; 0xc8
 8001944:	4934      	ldr	r1, [pc, #208]	; (8001a18 <main+0x724>)
 8001946:	482a      	ldr	r0, [pc, #168]	; (80019f0 <main+0x6fc>)
 8001948:	f004 fe8a 	bl	8006660 <HAL_UART_Transmit>
						  if (abs(DX1.f) < 2 && abs(DY1.f) < 2) {
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <main+0x71c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fb6d 	bl	8001030 <__aeabi_f2iz>
 8001956:	4603      	mov	r3, r0
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800195c:	db1c      	blt.n	8001998 <main+0x6a4>
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <main+0x71c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fb64 	bl	8001030 <__aeabi_f2iz>
 8001968:	4603      	mov	r3, r0
 800196a:	2b01      	cmp	r3, #1
 800196c:	dc14      	bgt.n	8001998 <main+0x6a4>
 800196e:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <main+0x720>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fb5c 	bl	8001030 <__aeabi_f2iz>
 8001978:	4603      	mov	r3, r0
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800197e:	db0b      	blt.n	8001998 <main+0x6a4>
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <main+0x720>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb53 	bl	8001030 <__aeabi_f2iz>
 800198a:	4603      	mov	r3, r0
 800198c:	2b01      	cmp	r3, #1
 800198e:	dc03      	bgt.n	8001998 <main+0x6a4>
							  rwFlash(1);  // Запись данных калибровки во Flash.
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff fb81 	bl	8001098 <rwFlash>
 8001996:	e006      	b.n	80019a6 <main+0x6b2>
						  } else {
							  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_RANGE, sizeof(CALIBRATE_ERROR_RANGE), 1000);
 8001998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199c:	222a      	movs	r2, #42	; 0x2a
 800199e:	4922      	ldr	r1, [pc, #136]	; (8001a28 <main+0x734>)
 80019a0:	4813      	ldr	r0, [pc, #76]	; (80019f0 <main+0x6fc>)
 80019a2:	f004 fe5d 	bl	8006660 <HAL_UART_Transmit>
						  }
						  calibrateCount = 0;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <main+0x6ec>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	801a      	strh	r2, [r3, #0]
						  firstTime = TRUE;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <main+0x738>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
					  }
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <main+0x6f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <main+0x6f0>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 80019be:	480a      	ldr	r0, [pc, #40]	; (80019e8 <main+0x6f4>)
 80019c0:	f003 f960 	bl	8004c84 <HAL_TIM_Base_Start_IT>
 80019c4:	e0a5      	b.n	8001b12 <main+0x81e>
 80019c6:	bf00      	nop
 80019c8:	20000336 	.word	0x20000336
 80019cc:	2000053c 	.word	0x2000053c
 80019d0:	20000540 	.word	0x20000540
 80019d4:	200006e4 	.word	0x200006e4
 80019d8:	44c80000 	.word	0x44c80000
 80019dc:	20000334 	.word	0x20000334
 80019e0:	2000087a 	.word	0x2000087a
 80019e4:	e000e010 	.word	0xe000e010
 80019e8:	20000b88 	.word	0x20000b88
 80019ec:	0800ad90 	.word	0x0800ad90
 80019f0:	20000c80 	.word	0x20000c80
 80019f4:	20000878 	.word	0x20000878
 80019f8:	20000330 	.word	0x20000330
 80019fc:	20000538 	.word	0x20000538
 8001a00:	2000039c 	.word	0x2000039c
 8001a04:	20000874 	.word	0x20000874
 8001a08:	20000888 	.word	0x20000888
 8001a0c:	20000b18 	.word	0x20000b18
 8001a10:	200002e8 	.word	0x200002e8
 8001a14:	200002f8 	.word	0x200002f8
 8001a18:	2000020c 	.word	0x2000020c
 8001a1c:	200006e0 	.word	0x200006e0
 8001a20:	0800adb0 	.word	0x0800adb0
 8001a24:	0800addc 	.word	0x0800addc
 8001a28:	0800adf8 	.word	0x0800adf8
 8001a2c:	20000b24 	.word	0x20000b24
					  sendToZabbix(net_info.zabbix, ZabbixHostName, "ALTIM_MAXSPEED", Vmaxfin);
				  }
			  }
			#endif
			  //HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
			  if ( ! firstTime ) {
 8001a30:	4b98      	ldr	r3, [pc, #608]	; (8001c94 <main+0x9a0>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	f083 0301 	eor.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d05d      	beq.n	8001afa <main+0x806>
				  sprintf(SndBuffer, "V:%5.2f, X:%5.2f, Y:%5.2f, Vmax:%5.2f, Xmax:%5.2f, Ymax:%5.2f, A:%3.0f, T:%5.2f, P:%8.3f, H:%5.2f   \r",
 8001a3e:	4b96      	ldr	r3, [pc, #600]	; (8001c98 <main+0x9a4>)
 8001a40:	cb18      	ldmia	r3, {r3, r4}
 8001a42:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8001a46:	4b95      	ldr	r3, [pc, #596]	; (8001c9c <main+0x9a8>)
 8001a48:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001a4c:	4b94      	ldr	r3, [pc, #592]	; (8001ca0 <main+0x9ac>)
 8001a4e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001a52:	e9c7 1208 	strd	r1, r2, [r7, #32]
 8001a56:	4b93      	ldr	r3, [pc, #588]	; (8001ca4 <main+0x9b0>)
 8001a58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a5c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001a60:	4b91      	ldr	r3, [pc, #580]	; (8001ca8 <main+0x9b4>)
 8001a62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a66:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001a6a:	4b90      	ldr	r3, [pc, #576]	; (8001cac <main+0x9b8>)
 8001a6c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001a70:	e9c7 5602 	strd	r5, r6, [r7, #8]
 8001a74:	4b8e      	ldr	r3, [pc, #568]	; (8001cb0 <main+0x9bc>)
 8001a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a7a:	e9c7 8900 	strd	r8, r9, [r7]
 8001a7e:	4b8d      	ldr	r3, [pc, #564]	; (8001cb4 <main+0x9c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fcd0 	bl	8000428 <__aeabi_f2d>
 8001a88:	4680      	mov	r8, r0
 8001a8a:	4689      	mov	r9, r1
 8001a8c:	4b8a      	ldr	r3, [pc, #552]	; (8001cb8 <main+0x9c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fcc9 	bl	8000428 <__aeabi_f2d>
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
 8001a9a:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <main+0x9c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcc2 	bl	8000428 <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001aac:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001ab0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001ab4:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001ab8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001abc:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001ac0:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8001ac4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ac8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001acc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001ad4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001ad8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001adc:	e9cd ab00 	strd	sl, fp, [sp]
 8001ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ae4:	4976      	ldr	r1, [pc, #472]	; (8001cc0 <main+0x9cc>)
 8001ae6:	4877      	ldr	r0, [pc, #476]	; (8001cc4 <main+0x9d0>)
 8001ae8:	f005 fc58 	bl	800739c <siprintf>
						  V, Xsum, Ysum, Vmaxfin, Xmaxfin, Ymaxfin, A, temperature, pressure, humidity);
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af0:	22c8      	movs	r2, #200	; 0xc8
 8001af2:	4974      	ldr	r1, [pc, #464]	; (8001cc4 <main+0x9d0>)
 8001af4:	4874      	ldr	r0, [pc, #464]	; (8001cc8 <main+0x9d4>)
 8001af6:	f004 fdb3 	bl	8006660 <HAL_UART_Transmit>
			  }
			  firstTime = FALSE;
 8001afa:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <main+0x9a0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001b00:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <main+0x9d8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a71      	ldr	r2, [pc, #452]	; (8001ccc <main+0x9d8>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]
				#endif
			  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8001b0c:	4870      	ldr	r0, [pc, #448]	; (8001cd0 <main+0x9dc>)
 8001b0e:	f003 f8b9 	bl	8004c84 <HAL_TIM_Base_Start_IT>


	  /*
	   * Подготовка запуска процедуры калибровки
	   */
	  if(HAL_UART_Receive(&huart1, (uint8_t *) uart_buffer, 1, 10) ) {
 8001b12:	230a      	movs	r3, #10
 8001b14:	2201      	movs	r2, #1
 8001b16:	496f      	ldr	r1, [pc, #444]	; (8001cd4 <main+0x9e0>)
 8001b18:	486b      	ldr	r0, [pc, #428]	; (8001cc8 <main+0x9d4>)
 8001b1a:	f004 fe33 	bl	8006784 <HAL_UART_Receive>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f43f ad19 	beq.w	8001558 <main+0x264>
		  if (uart_buffer[0] == 'c' ) {  // Клавиша c нажата ?
 8001b26:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <main+0x9e0>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b63      	cmp	r3, #99	; 0x63
 8001b2c:	d153      	bne.n	8001bd6 <main+0x8e2>
			  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_TEXT, sizeof(CALIBRATE_TEXT), 1000);
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	2216      	movs	r2, #22
 8001b34:	4968      	ldr	r1, [pc, #416]	; (8001cd8 <main+0x9e4>)
 8001b36:	4864      	ldr	r0, [pc, #400]	; (8001cc8 <main+0x9d4>)
 8001b38:	f004 fd92 	bl	8006660 <HAL_UART_Transmit>
			  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001b3c:	4864      	ldr	r0, [pc, #400]	; (8001cd0 <main+0x9dc>)
 8001b3e:	f003 f8f3 	bl	8004d28 <HAL_TIM_Base_Stop_IT>
			  STOP_CAPTURE
 8001b42:	2100      	movs	r1, #0
 8001b44:	4865      	ldr	r0, [pc, #404]	; (8001cdc <main+0x9e8>)
 8001b46:	f003 fbd9 	bl	80052fc <HAL_TIM_IC_Stop_IT>
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	4863      	ldr	r0, [pc, #396]	; (8001cdc <main+0x9e8>)
 8001b4e:	f003 fbd5 	bl	80052fc <HAL_TIM_IC_Stop_IT>
			  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001b52:	22c8      	movs	r2, #200	; 0xc8
 8001b54:	2100      	movs	r1, #0
 8001b56:	485b      	ldr	r0, [pc, #364]	; (8001cc4 <main+0x9d0>)
 8001b58:	f004 ffb8 	bl	8006acc <memset>
			  calibrate13 = TRUE;
 8001b5c:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <main+0x9ec>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
			  calibrate24 = TRUE;
 8001b62:	4b60      	ldr	r3, [pc, #384]	; (8001ce4 <main+0x9f0>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
			  test_flag = FALSE;
 8001b68:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <main+0x9f4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
			  calibrateCount = 0;
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <main+0x9f8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	801a      	strh	r2, [r3, #0]
			  C_13 = CALIBRATE_START;
 8001b74:	4b5e      	ldr	r3, [pc, #376]	; (8001cf0 <main+0x9fc>)
 8001b76:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001b7a:	801a      	strh	r2, [r3, #0]
			  C_24 = CALIBRATE_START;
 8001b7c:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <main+0xa00>)
 8001b7e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001b82:	801a      	strh	r2, [r3, #0]
			  ZX1 = 0;
 8001b84:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <main+0xa04>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
			  ZX2 = 0;
 8001b8c:	4b5b      	ldr	r3, [pc, #364]	; (8001cfc <main+0xa08>)
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
			  ZY1 = 0;
 8001b94:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <main+0xa0c>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
			  ZY2 = 0;
 8001b9c:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <main+0xa10>)
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
			  DX1.f = 0;
 8001ba4:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <main+0xa14>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
			  DY1.f = 0;
 8001bac:	4b57      	ldr	r3, [pc, #348]	; (8001d0c <main+0xa18>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
			  test_cnt = 0;
 8001bb4:	4b56      	ldr	r3, [pc, #344]	; (8001d10 <main+0xa1c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
			  calibrateMode = MEASSURE_COUNT * CALIBRATE_TIMES;
 8001bba:	4b56      	ldr	r3, [pc, #344]	; (8001d14 <main+0xa20>)
 8001bbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bc0:	801a      	strh	r2, [r3, #0]
			  currentMode = 0;
 8001bc2:	4b55      	ldr	r3, [pc, #340]	; (8001d18 <main+0xa24>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	801a      	strh	r2, [r3, #0]
			  measCount = 0;
 8001bc8:	4b54      	ldr	r3, [pc, #336]	; (8001d1c <main+0xa28>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	801a      	strh	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001bce:	4840      	ldr	r0, [pc, #256]	; (8001cd0 <main+0x9dc>)
 8001bd0:	f003 f858 	bl	8004c84 <HAL_TIM_Base_Start_IT>
 8001bd4:	e059      	b.n	8001c8a <main+0x996>
		  } else {
			  if (uart_buffer[0] == 't' ) {		// Test
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <main+0x9e0>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b74      	cmp	r3, #116	; 0x74
 8001bdc:	d127      	bne.n	8001c2e <main+0x93a>
				  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001bde:	483c      	ldr	r0, [pc, #240]	; (8001cd0 <main+0x9dc>)
 8001be0:	f003 f8a2 	bl	8004d28 <HAL_TIM_Base_Stop_IT>
				  STOP_CAPTURE
 8001be4:	2100      	movs	r1, #0
 8001be6:	483d      	ldr	r0, [pc, #244]	; (8001cdc <main+0x9e8>)
 8001be8:	f003 fb88 	bl	80052fc <HAL_TIM_IC_Stop_IT>
 8001bec:	2104      	movs	r1, #4
 8001bee:	483b      	ldr	r0, [pc, #236]	; (8001cdc <main+0x9e8>)
 8001bf0:	f003 fb84 	bl	80052fc <HAL_TIM_IC_Stop_IT>
				  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TEXT, sizeof(TEST_TEXT), 1000);
 8001bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	4949      	ldr	r1, [pc, #292]	; (8001d20 <main+0xa2c>)
 8001bfc:	4832      	ldr	r0, [pc, #200]	; (8001cc8 <main+0x9d4>)
 8001bfe:	f004 fd2f 	bl	8006660 <HAL_UART_Transmit>
				  calibrateMode = 1;
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <main+0xa20>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	801a      	strh	r2, [r3, #0]
				  calibrateCount = 0;
 8001c08:	4b38      	ldr	r3, [pc, #224]	; (8001cec <main+0x9f8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	801a      	strh	r2, [r3, #0]
				  test_flag = TRUE;
 8001c0e:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <main+0x9f4>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
				  calibrate13 = TRUE;
 8001c14:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <main+0x9ec>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
				  calibrate24 = TRUE;
 8001c1a:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <main+0x9f0>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
				  measCount = 0;
 8001c20:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <main+0xa28>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	801a      	strh	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001c26:	482a      	ldr	r0, [pc, #168]	; (8001cd0 <main+0x9dc>)
 8001c28:	f003 f82c 	bl	8004c84 <HAL_TIM_Base_Start_IT>
 8001c2c:	e02d      	b.n	8001c8a <main+0x996>
			  } else {
				  if (uart_buffer[0] == 'r' ) {		// Terminate calibration && test
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <main+0x9e0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b72      	cmp	r3, #114	; 0x72
 8001c34:	d129      	bne.n	8001c8a <main+0x996>
					  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001c36:	4826      	ldr	r0, [pc, #152]	; (8001cd0 <main+0x9dc>)
 8001c38:	f003 f876 	bl	8004d28 <HAL_TIM_Base_Stop_IT>
					  STOP_CAPTURE
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4827      	ldr	r0, [pc, #156]	; (8001cdc <main+0x9e8>)
 8001c40:	f003 fb5c 	bl	80052fc <HAL_TIM_IC_Stop_IT>
 8001c44:	2104      	movs	r1, #4
 8001c46:	4825      	ldr	r0, [pc, #148]	; (8001cdc <main+0x9e8>)
 8001c48:	f003 fb58 	bl	80052fc <HAL_TIM_IC_Stop_IT>
					  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TERMINATE, sizeof(TEST_TERMINATE), 1000);
 8001c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c50:	2221      	movs	r2, #33	; 0x21
 8001c52:	4934      	ldr	r1, [pc, #208]	; (8001d24 <main+0xa30>)
 8001c54:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <main+0x9d4>)
 8001c56:	f004 fd03 	bl	8006660 <HAL_UART_Transmit>
					  test_flag = 0;
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <main+0x9f4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
					  calibrate13 = TRUE;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <main+0x9ec>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
					  calibrate24 = TRUE;
 8001c66:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <main+0x9f0>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
					  calibrateMode = 0;
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <main+0xa20>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	801a      	strh	r2, [r3, #0]
					  calibrateCount = 0;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <main+0x9f8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	801a      	strh	r2, [r3, #0]
					  measCount = 0;
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <main+0xa28>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
					  rwFlash(0);		// Чтение параметров калибровки из Flash.
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7ff fa0a 	bl	8001098 <rwFlash>
					  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001c84:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <main+0x9dc>)
 8001c86:	f002 fffd 	bl	8004c84 <HAL_TIM_Base_Start_IT>
				  }
			  }
		  }
		  uart_buffer[0] = 0x00;
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <main+0x9e0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
	  if (readyFlag) {
 8001c90:	e462      	b.n	8001558 <main+0x264>
 8001c92:	bf00      	nop
 8001c94:	20000b24 	.word	0x20000b24
 8001c98:	20000380 	.word	0x20000380
 8001c9c:	20000390 	.word	0x20000390
 8001ca0:	200002f0 	.word	0x200002f0
 8001ca4:	20000300 	.word	0x20000300
 8001ca8:	20000880 	.word	0x20000880
 8001cac:	20000530 	.word	0x20000530
 8001cb0:	20000318 	.word	0x20000318
 8001cb4:	20000340 	.word	0x20000340
 8001cb8:	20000350 	.word	0x20000350
 8001cbc:	2000037c 	.word	0x2000037c
 8001cc0:	0800ae24 	.word	0x0800ae24
 8001cc4:	2000020c 	.word	0x2000020c
 8001cc8:	20000c80 	.word	0x20000c80
 8001ccc:	e000e010 	.word	0xe000e010
 8001cd0:	20000b88 	.word	0x20000b88
 8001cd4:	20000200 	.word	0x20000200
 8001cd8:	0800ae8c 	.word	0x0800ae8c
 8001cdc:	20000d10 	.word	0x20000d10
 8001ce0:	20000336 	.word	0x20000336
 8001ce4:	2000053c 	.word	0x2000053c
 8001ce8:	20000398 	.word	0x20000398
 8001cec:	2000087a 	.word	0x2000087a
 8001cf0:	200006e0 	.word	0x200006e0
 8001cf4:	20000334 	.word	0x20000334
 8001cf8:	20000330 	.word	0x20000330
 8001cfc:	20000538 	.word	0x20000538
 8001d00:	20000874 	.word	0x20000874
 8001d04:	20000b18 	.word	0x20000b18
 8001d08:	200002e8 	.word	0x200002e8
 8001d0c:	200002f8 	.word	0x200002f8
 8001d10:	20000b1c 	.word	0x20000b1c
 8001d14:	20000878 	.word	0x20000878
 8001d18:	200006d0 	.word	0x200006d0
 8001d1c:	20000310 	.word	0x20000310
 8001d20:	0800aea4 	.word	0x0800aea4
 8001d24:	0800aeb4 	.word	0x0800aeb4

08001d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b090      	sub	sp, #64	; 0x40
 8001d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	2228      	movs	r2, #40	; 0x28
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f004 fec8 	bl	8006acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d52:	2310      	movs	r3, #16
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d56:	2301      	movs	r3, #1
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001d62:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fa99 	bl	80042a4 <HAL_RCC_OscConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001d78:	f000 fc5a 	bl	8002630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d80:	2302      	movs	r3, #2
 8001d82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	2102      	movs	r1, #2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f002 fd04 	bl	80047a4 <HAL_RCC_ClockConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001da2:	f000 fc45 	bl	8002630 <Error_Handler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3740      	adds	r7, #64	; 0x40
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001db6:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <MX_I2C1_Init+0x54>)
 8001db8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <MX_I2C1_Init+0x58>)
 8001dbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <MX_I2C1_Init+0x50>)
 8001dee:	f002 f8c3 	bl	8003f78 <HAL_I2C_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001df8:	f000 fc1a 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000bd0 	.word	0x20000bd0
 8001e04:	40005400 	.word	0x40005400
 8001e08:	000186a0 	.word	0x000186a0

08001e0c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_IWDG_Init+0x2c>)
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <MX_IWDG_Init+0x30>)
 8001e14:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <MX_IWDG_Init+0x2c>)
 8001e18:	2205      	movs	r2, #5
 8001e1a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_IWDG_Init+0x2c>)
 8001e1e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e22:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_IWDG_Init+0x2c>)
 8001e26:	f002 f9eb 	bl	8004200 <HAL_IWDG_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001e30:	f000 fbfe 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000c24 	.word	0x20000c24
 8001e3c:	40003000 	.word	0x40003000

08001e40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e46:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <MX_SPI2_Init+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e90:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <MX_SPI2_Init+0x64>)
 8001e92:	f002 fe23 	bl	8004adc <HAL_SPI_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e9c:	f000 fbc8 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000b30 	.word	0x20000b30
 8001ea8:	40003800 	.word	0x40003800

08001eac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b096      	sub	sp, #88	; 0x58
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
 8001eda:	615a      	str	r2, [r3, #20]
 8001edc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 fdf1 	bl	8006acc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eea:	4b61      	ldr	r3, [pc, #388]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001eec:	4a61      	ldr	r2, [pc, #388]	; (8002074 <MX_TIM1_Init+0x1c8>)
 8001eee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ef0:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 810;
 8001efc:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001efe:	f240 322a 	movw	r2, #810	; 0x32a
 8001f02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f04:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 91;
 8001f0a:	4b59      	ldr	r3, [pc, #356]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001f0c:	225b      	movs	r2, #91	; 0x5b
 8001f0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f10:	4b57      	ldr	r3, [pc, #348]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f16:	4856      	ldr	r0, [pc, #344]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001f18:	f002 fe64 	bl	8004be4 <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f22:	f000 fb85 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f30:	4619      	mov	r1, r3
 8001f32:	484f      	ldr	r0, [pc, #316]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001f34:	f003 fcd8 	bl	80058e8 <HAL_TIM_ConfigClockSource>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f3e:	f000 fb77 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001f42:	484b      	ldr	r0, [pc, #300]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001f44:	f002 ff1e 	bl	8004d84 <HAL_TIM_OC_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f4e:	f000 fb6f 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001f52:	2108      	movs	r1, #8
 8001f54:	4846      	ldr	r0, [pc, #280]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001f56:	f003 fa79 	bl	800544c <HAL_TIM_OnePulse_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001f60:	f000 fb66 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001f64:	2330      	movs	r3, #48	; 0x30
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f70:	4619      	mov	r1, r3
 8001f72:	483f      	ldr	r0, [pc, #252]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001f74:	f004 fa66 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001f7e:	f000 fb57 	bl	8002630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001f82:	2330      	movs	r3, #48	; 0x30
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4832      	ldr	r0, [pc, #200]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001fa8:	f003 fbb2 	bl	8005710 <HAL_TIM_OC_ConfigChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8001fb2:	f000 fb3d 	bl	8002630 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0208 	orr.w	r2, r2, #8
 8001fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fca:	2204      	movs	r2, #4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4828      	ldr	r0, [pc, #160]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001fd0:	f003 fb9e 	bl	8005710 <HAL_TIM_OC_ConfigChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8001fda:	f000 fb29 	bl	8002630 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699a      	ldr	r2, [r3, #24]
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	481e      	ldr	r0, [pc, #120]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8001ff8:	f003 fb8a 	bl	8005710 <HAL_TIM_OC_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002002:	f000 fb15 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	220c      	movs	r2, #12
 800200c:	4619      	mov	r1, r3
 800200e:	4818      	ldr	r0, [pc, #96]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8002010:	f003 fb7e 	bl	8005710 <HAL_TIM_OC_ConfigChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800201a:	f000 fb09 	bl	8002630 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800202c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002046:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4807      	ldr	r0, [pc, #28]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8002052:	f004 fa55 	bl	8006500 <HAL_TIMEx_ConfigBreakDeadTime>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 800205c:	f000 fae8 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <MX_TIM1_Init+0x1c4>)
 8002062:	f000 fc49 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8002066:	bf00      	nop
 8002068:	3758      	adds	r7, #88	; 0x58
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000cc8 	.word	0x20000cc8
 8002074:	40012c00 	.word	0x40012c00

08002078 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b090      	sub	sp, #64	; 0x40
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <MX_TIM2_Init+0x128>)
 80020b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <MX_TIM2_Init+0x128>)
 80020bc:	2200      	movs	r2, #0
 80020be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c0:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <MX_TIM2_Init+0x128>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80020c6:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <MX_TIM2_Init+0x128>)
 80020c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <MX_TIM2_Init+0x128>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020d4:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <MX_TIM2_Init+0x128>)
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020da:	4831      	ldr	r0, [pc, #196]	; (80021a0 <MX_TIM2_Init+0x128>)
 80020dc:	f002 fd82 	bl	8004be4 <HAL_TIM_Base_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80020e6:	f000 faa3 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f4:	4619      	mov	r1, r3
 80020f6:	482a      	ldr	r0, [pc, #168]	; (80021a0 <MX_TIM2_Init+0x128>)
 80020f8:	f003 fbf6 	bl	80058e8 <HAL_TIM_ConfigClockSource>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002102:	f000 fa95 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002106:	4826      	ldr	r0, [pc, #152]	; (80021a0 <MX_TIM2_Init+0x128>)
 8002108:	f002 ff9a 	bl	8005040 <HAL_TIM_IC_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002112:	f000 fa8d 	bl	8002630 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002116:	2304      	movs	r3, #4
 8002118:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800211a:	2320      	movs	r3, #32
 800211c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	481e      	ldr	r0, [pc, #120]	; (80021a0 <MX_TIM2_Init+0x128>)
 8002126:	f003 fca3 	bl	8005a70 <HAL_TIM_SlaveConfigSynchro>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002130:	f000 fa7e 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4817      	ldr	r0, [pc, #92]	; (80021a0 <MX_TIM2_Init+0x128>)
 8002144:	f004 f97e 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800214e:	f000 fa6f 	bl	8002630 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002156:	2301      	movs	r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	4619      	mov	r1, r3
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <MX_TIM2_Init+0x128>)
 800216a:	f003 fb29 	bl	80057c0 <HAL_TIM_IC_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8002174:	f000 fa5c 	bl	8002630 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002178:	2302      	movs	r3, #2
 800217a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800217c:	2302      	movs	r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2204      	movs	r2, #4
 8002184:	4619      	mov	r1, r3
 8002186:	4806      	ldr	r0, [pc, #24]	; (80021a0 <MX_TIM2_Init+0x128>)
 8002188:	f003 fb1a 	bl	80057c0 <HAL_TIM_IC_ConfigChannel>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8002192:	f000 fa4d 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	3740      	adds	r7, #64	; 0x40
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000d10 	.word	0x20000d10

080021a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b092      	sub	sp, #72	; 0x48
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d2:	463b      	mov	r3, r7
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
 80021e0:	615a      	str	r2, [r3, #20]
 80021e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021e4:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <MX_TIM3_Init+0x120>)
 80021e6:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <MX_TIM3_Init+0x124>)
 80021e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021ea:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <MX_TIM3_Init+0x120>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <MX_TIM3_Init+0x120>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 80021f6:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <MX_TIM3_Init+0x120>)
 80021f8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80021fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fe:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <MX_TIM3_Init+0x120>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <MX_TIM3_Init+0x120>)
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800220a:	482e      	ldr	r0, [pc, #184]	; (80022c4 <MX_TIM3_Init+0x120>)
 800220c:	f002 fcea 	bl	8004be4 <HAL_TIM_Base_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002216:	f000 fa0b 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002220:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002224:	4619      	mov	r1, r3
 8002226:	4827      	ldr	r0, [pc, #156]	; (80022c4 <MX_TIM3_Init+0x120>)
 8002228:	f003 fb5e 	bl	80058e8 <HAL_TIM_ConfigClockSource>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002232:	f000 f9fd 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002236:	4823      	ldr	r0, [pc, #140]	; (80022c4 <MX_TIM3_Init+0x120>)
 8002238:	f002 fda4 	bl	8004d84 <HAL_TIM_OC_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8002242:	f000 f9f5 	bl	8002630 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8002246:	2108      	movs	r1, #8
 8002248:	481e      	ldr	r0, [pc, #120]	; (80022c4 <MX_TIM3_Init+0x120>)
 800224a:	f003 f8ff 	bl	800544c <HAL_TIM_OnePulse_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002254:	f000 f9ec 	bl	8002630 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002258:	2306      	movs	r3, #6
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4817      	ldr	r0, [pc, #92]	; (80022c4 <MX_TIM3_Init+0x120>)
 8002268:	f003 fc02 	bl	8005a70 <HAL_TIM_SlaveConfigSynchro>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8002272:	f000 f9dd 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8002276:	2330      	movs	r3, #48	; 0x30
 8002278:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	4619      	mov	r1, r3
 8002284:	480f      	ldr	r0, [pc, #60]	; (80022c4 <MX_TIM3_Init+0x120>)
 8002286:	f004 f8dd 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002290:	f000 f9ce 	bl	8002630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002294:	2310      	movs	r3, #16
 8002296:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	4619      	mov	r1, r3
 80022aa:	4806      	ldr	r0, [pc, #24]	; (80022c4 <MX_TIM3_Init+0x120>)
 80022ac:	f003 fa30 	bl	8005710 <HAL_TIM_OC_ConfigChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80022b6:	f000 f9bb 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	3748      	adds	r7, #72	; 0x48
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000c38 	.word	0x20000c38
 80022c8:	40000400 	.word	0x40000400

080022cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d2:	f107 0308 	add.w	r3, r7, #8
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	463b      	mov	r3, r7
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <MX_TIM4_Init+0x94>)
 80022ea:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <MX_TIM4_Init+0x98>)
 80022ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <MX_TIM4_Init+0x94>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <MX_TIM4_Init+0x94>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <MX_TIM4_Init+0x94>)
 80022fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002300:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <MX_TIM4_Init+0x94>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <MX_TIM4_Init+0x94>)
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800230e:	4814      	ldr	r0, [pc, #80]	; (8002360 <MX_TIM4_Init+0x94>)
 8002310:	f002 fc68 	bl	8004be4 <HAL_TIM_Base_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800231a:	f000 f989 	bl	8002630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	4619      	mov	r1, r3
 800232a:	480d      	ldr	r0, [pc, #52]	; (8002360 <MX_TIM4_Init+0x94>)
 800232c:	f003 fadc 	bl	80058e8 <HAL_TIM_ConfigClockSource>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002336:	f000 f97b 	bl	8002630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800233a:	2320      	movs	r3, #32
 800233c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	4619      	mov	r1, r3
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_TIM4_Init+0x94>)
 8002348:	f004 f87c 	bl	8006444 <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002352:	f000 f96d 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000b88 	.word	0x20000b88
 8002364:	40000800 	.word	0x40000800

08002368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <MX_USART1_UART_Init+0x50>)
 8002370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 8002374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 800238e:	220c      	movs	r2, #12
 8002390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_USART1_UART_Init+0x4c>)
 80023a0:	f004 f911 	bl	80065c6 <HAL_UART_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023aa:	f000 f941 	bl	8002630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000c80 	.word	0x20000c80
 80023b8:	40013800 	.word	0x40013800

080023bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <MX_GPIO_Init+0xb8>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a27      	ldr	r2, [pc, #156]	; (8002474 <MX_GPIO_Init+0xb8>)
 80023d6:	f043 0320 	orr.w	r3, r3, #32
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <MX_GPIO_Init+0xb8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <MX_GPIO_Init+0xb8>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a21      	ldr	r2, [pc, #132]	; (8002474 <MX_GPIO_Init+0xb8>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6193      	str	r3, [r2, #24]
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <MX_GPIO_Init+0xb8>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <MX_GPIO_Init+0xb8>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <MX_GPIO_Init+0xb8>)
 8002406:	f043 0308 	orr.w	r3, r3, #8
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <MX_GPIO_Init+0xb8>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|nRst_Pin, GPIO_PIN_RESET);
 8002418:	2200      	movs	r2, #0
 800241a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 800241e:	4816      	ldr	r0, [pc, #88]	; (8002478 <MX_GPIO_Init+0xbc>)
 8002420:	f001 fd92 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 8002424:	2200      	movs	r2, #0
 8002426:	f241 011e 	movw	r1, #4126	; 0x101e
 800242a:	4814      	ldr	r0, [pc, #80]	; (800247c <MX_GPIO_Init+0xc0>)
 800242c:	f001 fd8c 	bl	8003f48 <HAL_GPIO_WritePin>
                          |Z4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin nRst_Pin */
  GPIO_InitStruct.Pin = LED_Pin|nRst_Pin;
 8002430:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8002434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2302      	movs	r3, #2
 8002440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	4619      	mov	r1, r3
 8002448:	480b      	ldr	r0, [pc, #44]	; (8002478 <MX_GPIO_Init+0xbc>)
 800244a:	f001 fbf9 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z1_Pin Z2_Pin SCSN_Pin Z3_Pin
                           Z4_Pin */
  GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 800244e:	f241 031e 	movw	r3, #4126	; 0x101e
 8002452:	613b      	str	r3, [r7, #16]
                          |Z4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2302      	movs	r3, #2
 800245e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	4619      	mov	r1, r3
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <MX_GPIO_Init+0xc0>)
 8002468:	f001 fbea 	bl	8003c40 <HAL_GPIO_Init>

}
 800246c:	bf00      	nop
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	40010800 	.word	0x40010800
 800247c:	40010c00 	.word	0x40010c00

08002480 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim) {
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	if (runFlag > 0) {								// Разрешено измерение ?
 8002488:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_TIM_IC_CaptureCallback+0x17c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80af 	beq.w	80025f0 <HAL_TIM_IC_CaptureCallback+0x170>
		if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249a:	f040 80a9 	bne.w	80025f0 <HAL_TIM_IC_CaptureCallback+0x170>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7f1b      	ldrb	r3, [r3, #28]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d004      	beq.n	80024b0 <HAL_TIM_IC_CaptureCallback+0x30>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7f1b      	ldrb	r3, [r3, #28]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	f040 80a0 	bne.w	80025f0 <HAL_TIM_IC_CaptureCallback+0x170>
			if ((runFlag < COUNT_FRONT) || ((GPIOA->IDR & GPIO_PIN_0) != 0) ) {  // Ждем фронт первого импульса, дальше обрабатываем все импульсы.
 80024b0:	4b52      	ldr	r3, [pc, #328]	; (80025fc <HAL_TIM_IC_CaptureCallback+0x17c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d906      	bls.n	80024c6 <HAL_TIM_IC_CaptureCallback+0x46>
 80024b8:	4b51      	ldr	r3, [pc, #324]	; (8002600 <HAL_TIM_IC_CaptureCallback+0x180>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8095 	beq.w	80025f0 <HAL_TIM_IC_CaptureCallback+0x170>
				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ) {  // Активен фронт
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7f1b      	ldrb	r3, [r3, #28]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d10c      	bne.n	80024e8 <HAL_TIM_IC_CaptureCallback+0x68>
					front_sum = front_sum + (uint16_t) (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1) & 0x0FFFF);
 80024ce:	2100      	movs	r1, #0
 80024d0:	484c      	ldr	r0, [pc, #304]	; (8002604 <HAL_TIM_IC_CaptureCallback+0x184>)
 80024d2:	f003 fb0f 	bl	8005af4 <HAL_TIM_ReadCapturedValue>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b4b      	ldr	r3, [pc, #300]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b49      	ldr	r3, [pc, #292]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_TIM_IC_CaptureCallback+0x80>
				} else {   // Активен спад
					front_sum = front_sum + (uint16_t) (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2) & 0x0FFFF);
 80024e8:	2104      	movs	r1, #4
 80024ea:	4846      	ldr	r0, [pc, #280]	; (8002604 <HAL_TIM_IC_CaptureCallback+0x184>)
 80024ec:	f003 fb02 	bl	8005af4 <HAL_TIM_ReadCapturedValue>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b44      	ldr	r3, [pc, #272]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	4b42      	ldr	r3, [pc, #264]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 80024fe:	801a      	strh	r2, [r3, #0]
				}
				runFlag--;
 8002500:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3b01      	subs	r3, #1
 8002506:	4a3d      	ldr	r2, [pc, #244]	; (80025fc <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002508:	6013      	str	r3, [r2, #0]
				if (runFlag == 0) {
 800250a:	4b3c      	ldr	r3, [pc, #240]	; (80025fc <HAL_TIM_IC_CaptureCallback+0x17c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d16e      	bne.n	80025f0 <HAL_TIM_IC_CaptureCallback+0x170>
					//LED_PULSE
					STOP_CAPTURE
 8002512:	2100      	movs	r1, #0
 8002514:	483b      	ldr	r0, [pc, #236]	; (8002604 <HAL_TIM_IC_CaptureCallback+0x184>)
 8002516:	f002 fef1 	bl	80052fc <HAL_TIM_IC_Stop_IT>
 800251a:	2104      	movs	r1, #4
 800251c:	4839      	ldr	r0, [pc, #228]	; (8002604 <HAL_TIM_IC_CaptureCallback+0x184>)
 800251e:	f002 feed 	bl	80052fc <HAL_TIM_IC_Stop_IT>
					front_sum = front_sum / COUNT_FRONT - 3600;  // Расчитываем задержку от средины импульсов
 8002522:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	4a39      	ldr	r2, [pc, #228]	; (800260c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	b29b      	uxth	r3, r3
 8002530:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b34      	ldr	r3, [pc, #208]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 8002538:	801a      	strh	r2, [r3, #0]
					if (front_sum > 1500) {		// Ошибка измерения.
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002542:	4293      	cmp	r3, r2
 8002544:	d903      	bls.n	800254e <HAL_TIM_IC_CaptureCallback+0xce>
						front_sum = 1500;		// Значение необходимое для калибровки.
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 8002548:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800254c:	801a      	strh	r2, [r3, #0]
					}
					/* Отключим все мультиплексоры */
					receiversOff
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	4a2f      	ldr	r2, [pc, #188]	; (8002610 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002554:	f043 031e 	orr.w	r3, r3, #30
 8002558:	60d3      	str	r3, [r2, #12]
					//runFlag = 0;
					#ifdef SYSTICK_DISABLE
						SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 800255a:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <HAL_TIM_IC_CaptureCallback+0x194>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2d      	ldr	r2, [pc, #180]	; (8002614 <HAL_TIM_IC_CaptureCallback+0x194>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6013      	str	r3, [r2, #0]
					#endif
					switch (currentMode) {
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_TIM_IC_CaptureCallback+0x198>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	3b01      	subs	r3, #1
 800256c:	2b03      	cmp	r3, #3
 800256e:	d840      	bhi.n	80025f2 <HAL_TIM_IC_CaptureCallback+0x172>
 8002570:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	08002589 	.word	0x08002589
 800257c:	080025a3 	.word	0x080025a3
 8002580:	080025bd 	.word	0x080025bd
 8002584:	080025d7 	.word	0x080025d7
						case 1: { // Z1 > Z3, Z13
							resul_arrayY1[measCount] = front_sum;
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	4a23      	ldr	r2, [pc, #140]	; (800261c <HAL_TIM_IC_CaptureCallback+0x19c>)
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	4614      	mov	r4, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fb2e 	bl	8000bf4 <__aeabi_ui2f>
 8002598:	4603      	mov	r3, r0
 800259a:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 800259c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80025a0:	e027      	b.n	80025f2 <HAL_TIM_IC_CaptureCallback+0x172>
						}
						case 2: { // Z3 > Z1, Z31
							resul_arrayY2[measCount] = front_sum;
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	4a1d      	ldr	r2, [pc, #116]	; (800261c <HAL_TIM_IC_CaptureCallback+0x19c>)
 80025a8:	8812      	ldrh	r2, [r2, #0]
 80025aa:	4614      	mov	r4, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fb21 	bl	8000bf4 <__aeabi_ui2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 80025b6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80025ba:	e01a      	b.n	80025f2 <HAL_TIM_IC_CaptureCallback+0x172>
						}
						case 3: { // Z2 > Z4 Z24
							resul_arrayX1[measCount] = front_sum;
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	4a16      	ldr	r2, [pc, #88]	; (800261c <HAL_TIM_IC_CaptureCallback+0x19c>)
 80025c2:	8812      	ldrh	r2, [r2, #0]
 80025c4:	4614      	mov	r4, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fb14 	bl	8000bf4 <__aeabi_ui2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 80025d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80025d4:	e00d      	b.n	80025f2 <HAL_TIM_IC_CaptureCallback+0x172>
						}
						case 4: { // Z4 > Z2 Z42
							resul_arrayX2[measCount] = front_sum;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_TIM_IC_CaptureCallback+0x188>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	4a10      	ldr	r2, [pc, #64]	; (800261c <HAL_TIM_IC_CaptureCallback+0x19c>)
 80025dc:	8812      	ldrh	r2, [r2, #0]
 80025de:	4614      	mov	r4, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fb07 	bl	8000bf4 <__aeabi_ui2f>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_TIM_IC_CaptureCallback+0x1ac>)
 80025ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80025ee:	e000      	b.n	80025f2 <HAL_TIM_IC_CaptureCallback+0x172>
						}
					}
				}
 80025f0:	bf00      	nop
			}
		}
	}
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd90      	pop	{r4, r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000388 	.word	0x20000388
 8002600:	40010800 	.word	0x40010800
 8002604:	20000d10 	.word	0x20000d10
 8002608:	20000378 	.word	0x20000378
 800260c:	cccccccd 	.word	0xcccccccd
 8002610:	40010c00 	.word	0x40010c00
 8002614:	e000e010 	.word	0xe000e010
 8002618:	200006d0 	.word	0x200006d0
 800261c:	20000310 	.word	0x20000310
 8002620:	2000039c 	.word	0x2000039c
 8002624:	20000888 	.word	0x20000888
 8002628:	20000540 	.word	0x20000540
 800262c:	200006e4 	.word	0x200006e4

08002630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002634:	b672      	cpsid	i
}
 8002636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002638:	e7fe      	b.n	8002638 <Error_Handler+0x8>
	...

0800263c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_MspInit+0x5c>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	4a14      	ldr	r2, [pc, #80]	; (8002698 <HAL_MspInit+0x5c>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6193      	str	r3, [r2, #24]
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_MspInit+0x5c>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_MspInit+0x5c>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <HAL_MspInit+0x5c>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_MspInit+0x5c>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_MspInit+0x60>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_MspInit+0x60>)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	40021000 	.word	0x40021000
 800269c:	40010000 	.word	0x40010000

080026a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <HAL_I2C_MspInit+0x90>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d132      	bne.n	8002726 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c0:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <HAL_I2C_MspInit+0x94>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <HAL_I2C_MspInit+0x94>)
 80026c6:	f043 0308 	orr.w	r3, r3, #8
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_I2C_MspInit+0x94>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026de:	2312      	movs	r3, #18
 80026e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	4619      	mov	r1, r3
 80026ec:	4812      	ldr	r0, [pc, #72]	; (8002738 <HAL_I2C_MspInit+0x98>)
 80026ee:	f001 faa7 	bl	8003c40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_I2C_MspInit+0x9c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <HAL_I2C_MspInit+0x9c>)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_I2C_MspInit+0x94>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_I2C_MspInit+0x94>)
 8002714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_I2C_MspInit+0x94>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40005400 	.word	0x40005400
 8002734:	40021000 	.word	0x40021000
 8002738:	40010c00 	.word	0x40010c00
 800273c:	40010000 	.word	0x40010000

08002740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_SPI_MspInit+0x8c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d131      	bne.n	80027c4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_SPI_MspInit+0x90>)
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_SPI_MspInit+0x90>)
 8002766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276a:	61d3      	str	r3, [r2, #28]
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <HAL_SPI_MspInit+0x90>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_SPI_MspInit+0x90>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <HAL_SPI_MspInit+0x90>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_SPI_MspInit+0x90>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002790:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002794:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279a:	2303      	movs	r3, #3
 800279c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279e:	f107 0310 	add.w	r3, r7, #16
 80027a2:	4619      	mov	r1, r3
 80027a4:	480b      	ldr	r0, [pc, #44]	; (80027d4 <HAL_SPI_MspInit+0x94>)
 80027a6:	f001 fa4b 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	4619      	mov	r1, r3
 80027be:	4805      	ldr	r0, [pc, #20]	; (80027d4 <HAL_SPI_MspInit+0x94>)
 80027c0:	f001 fa3e 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027c4:	bf00      	nop
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40003800 	.word	0x40003800
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40010c00 	.word	0x40010c00

080027d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0320 	add.w	r3, r7, #32
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3c      	ldr	r2, [pc, #240]	; (80028e4 <HAL_TIM_Base_MspInit+0x10c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d10c      	bne.n	8002812 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a3a      	ldr	r2, [pc, #232]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 80027fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002810:	e064      	b.n	80028dc <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281a:	d12c      	bne.n	8002876 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800281c:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	4a31      	ldr	r2, [pc, #196]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	61d3      	str	r3, [r2, #28]
 8002828:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a2b      	ldr	r2, [pc, #172]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800284c:	2301      	movs	r3, #1
 800284e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002858:	f107 0320 	add.w	r3, r7, #32
 800285c:	4619      	mov	r1, r3
 800285e:	4823      	ldr	r0, [pc, #140]	; (80028ec <HAL_TIM_Base_MspInit+0x114>)
 8002860:	f001 f9ee 	bl	8003c40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	2100      	movs	r1, #0
 8002868:	201c      	movs	r0, #28
 800286a:	f000 ffae 	bl	80037ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800286e:	201c      	movs	r0, #28
 8002870:	f000 ffc7 	bl	8003802 <HAL_NVIC_EnableIRQ>
}
 8002874:	e032      	b.n	80028dc <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_TIM_Base_MspInit+0x118>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d114      	bne.n	80028aa <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 8002886:	f043 0302 	orr.w	r3, r3, #2
 800288a:	61d3      	str	r3, [r2, #28]
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	201d      	movs	r0, #29
 800289e:	f000 ff94 	bl	80037ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028a2:	201d      	movs	r0, #29
 80028a4:	f000 ffad 	bl	8003802 <HAL_NVIC_EnableIRQ>
}
 80028a8:	e018      	b.n	80028dc <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_TIM_Base_MspInit+0x11c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d113      	bne.n	80028dc <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	61d3      	str	r3, [r2, #28]
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_TIM_Base_MspInit+0x110>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2100      	movs	r1, #0
 80028d0:	201e      	movs	r0, #30
 80028d2:	f000 ff7a 	bl	80037ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028d6:	201e      	movs	r0, #30
 80028d8:	f000 ff93 	bl	8003802 <HAL_NVIC_EnableIRQ>
}
 80028dc:	bf00      	nop
 80028de:	3730      	adds	r7, #48	; 0x30
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40010800 	.word	0x40010800
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800

080028f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a10      	ldr	r2, [pc, #64]	; (8002954 <HAL_TIM_MspPostInit+0x5c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d118      	bne.n	800294a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <HAL_TIM_MspPostInit+0x60>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <HAL_TIM_MspPostInit+0x60>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <HAL_TIM_MspPostInit+0x60>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTZ1_Pin|OUTZ2_Pin|OUTZ3_Pin|OUTZ4_Pin;
 8002930:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4619      	mov	r1, r3
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <HAL_TIM_MspPostInit+0x64>)
 8002946:	f001 f97b 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800294a:	bf00      	nop
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40010800 	.word	0x40010800

08002960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_UART_MspInit+0xa4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d13d      	bne.n	80029fc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	4a20      	ldr	r2, [pc, #128]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 8002986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800298a:	6193      	str	r3, [r2, #24]
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	6193      	str	r3, [r2, #24]
 80029a4:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <HAL_UART_MspInit+0xa8>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029b0:	2340      	movs	r3, #64	; 0x40
 80029b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	4812      	ldr	r0, [pc, #72]	; (8002a0c <HAL_UART_MspInit+0xac>)
 80029c4:	f001 f93c 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	480c      	ldr	r0, [pc, #48]	; (8002a0c <HAL_UART_MspInit+0xac>)
 80029dc:	f001 f930 	bl	8003c40 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_UART_MspInit+0xb0>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_UART_MspInit+0xb0>)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010c00 	.word	0x40010c00
 8002a10:	40010000 	.word	0x40010000

08002a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <NMI_Handler+0x4>

08002a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <HardFault_Handler+0x4>

08002a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <MemManage_Handler+0x4>

08002a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2a:	e7fe      	b.n	8002a2a <BusFault_Handler+0x4>

08002a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <UsageFault_Handler+0x4>

08002a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
	...

08002a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <SysTick_Handler+0x2c>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <SysTick_Handler+0x2c>)
 8002a66:	801a      	strh	r2, [r3, #0]
	if(ticks >= 1000) {
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <SysTick_Handler+0x2c>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a70:	d304      	bcc.n	8002a7c <SysTick_Handler+0x24>
		DHCP_time_handler();
 8002a72:	f7fe fb03 	bl	800107c <DHCP_time_handler>
		ticks = 0;
 8002a76:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <SysTick_Handler+0x2c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a7c:	f000 fd9c 	bl	80035b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200002d4 	.word	0x200002d4

08002a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <TIM2_IRQHandler+0x10>)
 8002a8e:	f002 fd36 	bl	80054fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000d10 	.word	0x20000d10

08002a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_TIM_Base_Stop_IT(&htim3);
	runFlag = COUNT_FRONT;		// Сработал таймер сброса таймера захвата, начинаем измерение.
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <TIM3_IRQHandler+0x14>)
 8002aa2:	220a      	movs	r2, #10
 8002aa4:	601a      	str	r2, [r3, #0]
	//LED_PULSE
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002aa6:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <TIM3_IRQHandler+0x18>)
 8002aa8:	f002 fd29 	bl	80054fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000388 	.word	0x20000388
 8002ab4:	20000c38 	.word	0x20000c38

08002ab8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ab8:	b5b0      	push	{r4, r5, r7, lr}
 8002aba:	b092      	sub	sp, #72	; 0x48
 8002abc:	af00      	add	r7, sp, #0
	#else
	double Vm[3];
	uint8_t countV;
	#endif
	#ifdef SYSTICK_DISABLE
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <TIM4_IRQHandler+0x228>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a87      	ldr	r2, [pc, #540]	; (8002ce0 <TIM4_IRQHandler+0x228>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6013      	str	r3, [r2, #0]
	#endif

		front_sum = 0;
 8002aca:	4b86      	ldr	r3, [pc, #536]	; (8002ce4 <TIM4_IRQHandler+0x22c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	801a      	strh	r2, [r3, #0]
		runFlag = 0;
 8002ad0:	4b85      	ldr	r3, [pc, #532]	; (8002ce8 <TIM4_IRQHandler+0x230>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4884      	ldr	r0, [pc, #528]	; (8002cec <TIM4_IRQHandler+0x234>)
 8002ada:	f002 fa4d 	bl	8004f78 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8002ade:	2104      	movs	r1, #4
 8002ae0:	4882      	ldr	r0, [pc, #520]	; (8002cec <TIM4_IRQHandler+0x234>)
 8002ae2:	f002 fa49 	bl	8004f78 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8002ae6:	2108      	movs	r1, #8
 8002ae8:	4880      	ldr	r0, [pc, #512]	; (8002cec <TIM4_IRQHandler+0x234>)
 8002aea:	f002 fa45 	bl	8004f78 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8002aee:	210c      	movs	r1, #12
 8002af0:	487e      	ldr	r0, [pc, #504]	; (8002cec <TIM4_IRQHandler+0x234>)
 8002af2:	f002 fa41 	bl	8004f78 <HAL_TIM_OC_Stop>

		/* Отключим все мультиплексоры */
		receiversOff
 8002af6:	4b7e      	ldr	r3, [pc, #504]	; (8002cf0 <TIM4_IRQHandler+0x238>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a7d      	ldr	r2, [pc, #500]	; (8002cf0 <TIM4_IRQHandler+0x238>)
 8002afc:	f043 031e 	orr.w	r3, r3, #30
 8002b00:	60d3      	str	r3, [r2, #12]
		STOP_CAPTURE	// If not stop in callback.
 8002b02:	2100      	movs	r1, #0
 8002b04:	487b      	ldr	r0, [pc, #492]	; (8002cf4 <TIM4_IRQHandler+0x23c>)
 8002b06:	f002 fbf9 	bl	80052fc <HAL_TIM_IC_Stop_IT>
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	4879      	ldr	r0, [pc, #484]	; (8002cf4 <TIM4_IRQHandler+0x23c>)
 8002b0e:	f002 fbf5 	bl	80052fc <HAL_TIM_IC_Stop_IT>
		/* Set all timer channels for output mode */
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002b12:	4b79      	ldr	r3, [pc, #484]	; (8002cf8 <TIM4_IRQHandler+0x240>)
 8002b14:	685b      	ldr	r3, [r3, #4]
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8002b16:	f423 436e 	bic.w	r3, r3, #60928	; 0xee00
 8002b1a:	f023 03ee 	bic.w	r3, r3, #238	; 0xee
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002b1e:	4a76      	ldr	r2, [pc, #472]	; (8002cf8 <TIM4_IRQHandler+0x240>)
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8002b20:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8002b24:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002b28:	6053      	str	r3, [r2, #4]

		/* Управление циклом опроса */
		if (currentMode >= CHANNELS) {
 8002b2a:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <TIM4_IRQHandler+0x244>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d908      	bls.n	8002b44 <TIM4_IRQHandler+0x8c>
			currentMode = 0;
 8002b32:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <TIM4_IRQHandler+0x244>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	801a      	strh	r2, [r3, #0]
			measCount++;  // Следующее измерение.
 8002b38:	4b71      	ldr	r3, [pc, #452]	; (8002d00 <TIM4_IRQHandler+0x248>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <TIM4_IRQHandler+0x248>)
 8002b42:	801a      	strh	r2, [r3, #0]
		}
		//LED_PULSE
		if ((measCount == MEASSURE_COUNT) && (calibrateMode == 0)) {
 8002b44:	4b6e      	ldr	r3, [pc, #440]	; (8002d00 <TIM4_IRQHandler+0x248>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	f040 833f 	bne.w	80031cc <TIM4_IRQHandler+0x714>
 8002b4e:	4b6d      	ldr	r3, [pc, #436]	; (8002d04 <TIM4_IRQHandler+0x24c>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 833a 	bne.w	80031cc <TIM4_IRQHandler+0x714>
			//LED_PULSE
			//HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
			#ifdef SYSTICK_DISABLE
			SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8002b58:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <TIM4_IRQHandler+0x228>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a60      	ldr	r2, [pc, #384]	; (8002ce0 <TIM4_IRQHandler+0x228>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6013      	str	r3, [r2, #0]
			#endif
			HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 8002b64:	4868      	ldr	r0, [pc, #416]	; (8002d08 <TIM4_IRQHandler+0x250>)
 8002b66:	f002 f8df 	bl	8004d28 <HAL_TIM_Base_Stop_IT>
			Vmax = 0;
 8002b6a:	4968      	ldr	r1, [pc, #416]	; (8002d0c <TIM4_IRQHandler+0x254>)
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	e9c1 2300 	strd	r2, r3, [r1]
			Xmax = 0;
 8002b78:	4965      	ldr	r1, [pc, #404]	; (8002d10 <TIM4_IRQHandler+0x258>)
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9c1 2300 	strd	r2, r3, [r1]
			Ymax = 0;
 8002b86:	4963      	ldr	r1, [pc, #396]	; (8002d14 <TIM4_IRQHandler+0x25c>)
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum1 = 0;
 8002b94:	4960      	ldr	r1, [pc, #384]	; (8002d18 <TIM4_IRQHandler+0x260>)
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum1 = 0;
 8002ba2:	495e      	ldr	r1, [pc, #376]	; (8002d1c <TIM4_IRQHandler+0x264>)
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9c1 2300 	strd	r2, r3, [r1]
			#ifdef MEDIAN_FILTER_ENABLE
			/* Фильтр для всех значений */
			X1m[0] = 0; X1m[1] = 0; X1m[2] = 0; countX1 = 0;
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			Y1m[0] = 0; Y1m[1] = 0; Y1m[2] = 0; countY1 = 0;
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9c7 2300 	strd	r2, r3, [r7]
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			#else
			/* Фильтр только для максимальной скорости */
			Vm[0] = 0; Vm[1] = 0; Vm[2] = 0; countV = 0;
			#endif
			//LED_PULSE
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 8002c04:	2314      	movs	r3, #20
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
 8002c08:	e1cf      	b.n	8002faa <TIM4_IRQHandler+0x4f2>
				// Медианный фильтр для X
				#ifdef MEDIAN_FILTER_ENABLE
				X1m[countX1] = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
 8002c0a:	4a45      	ldr	r2, [pc, #276]	; (8002d20 <TIM4_IRQHandler+0x268>)
 8002c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002c12:	4a44      	ldr	r2, [pc, #272]	; (8002d24 <TIM4_IRQHandler+0x26c>)
 8002c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	4a43      	ldr	r2, [pc, #268]	; (8002d28 <TIM4_IRQHandler+0x270>)
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe f83f 	bl	8000ca4 <__aeabi_fmul>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7fd ff30 	bl	8000a90 <__aeabi_fsub>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fbf6 	bl	8000428 <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	00e1      	lsls	r1, r4, #3
 8002c42:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c46:	4401      	add	r1, r0
 8002c48:	3930      	subs	r1, #48	; 0x30
 8002c4a:	e9c1 2300 	strd	r2, r3, [r1]
				if (++countX1 >= 3) countX1 = 0;
 8002c4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c52:	3301      	adds	r3, #1
 8002c54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002c58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d902      	bls.n	8002c66 <TIM4_IRQHandler+0x1ae>
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				XX1 = (X1m[0] < X1m[1]) ? ((X1m[1] < X1m[2]) ? X1m[1] : ((X1m[2] < X1m[0]) ? X1m[0] : X1m[2])) : ((X1m[0] < X1m[2]) ? X1m[0] : ((X1m[2] < X1m[1]) ? X1m[1] : X1m[2]));
 8002c66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c6e:	f7fd fea5 	bl	80009bc <__aeabi_dcmplt>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01a      	beq.n	8002cae <TIM4_IRQHandler+0x1f6>
 8002c78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c80:	f7fd fe9c 	bl	80009bc <__aeabi_dcmplt>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <TIM4_IRQHandler+0x1d8>
 8002c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c8e:	e04f      	b.n	8002d30 <TIM4_IRQHandler+0x278>
 8002c90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c98:	f7fd fe90 	bl	80009bc <__aeabi_dcmplt>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <TIM4_IRQHandler+0x1f0>
 8002ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca6:	e043      	b.n	8002d30 <TIM4_IRQHandler+0x278>
 8002ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cac:	e040      	b.n	8002d30 <TIM4_IRQHandler+0x278>
 8002cae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cb6:	f7fd fe81 	bl	80009bc <__aeabi_dcmplt>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <TIM4_IRQHandler+0x20e>
 8002cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc4:	e034      	b.n	8002d30 <TIM4_IRQHandler+0x278>
 8002cc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cce:	f7fd fe75 	bl	80009bc <__aeabi_dcmplt>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d029      	beq.n	8002d2c <TIM4_IRQHandler+0x274>
 8002cd8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cdc:	e028      	b.n	8002d30 <TIM4_IRQHandler+0x278>
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010
 8002ce4:	20000378 	.word	0x20000378
 8002ce8:	20000388 	.word	0x20000388
 8002cec:	20000cc8 	.word	0x20000cc8
 8002cf0:	40010c00 	.word	0x40010c00
 8002cf4:	20000d10 	.word	0x20000d10
 8002cf8:	40010800 	.word	0x40010800
 8002cfc:	200006d0 	.word	0x200006d0
 8002d00:	20000310 	.word	0x20000310
 8002d04:	20000878 	.word	0x20000878
 8002d08:	20000b88 	.word	0x20000b88
 8002d0c:	20000308 	.word	0x20000308
 8002d10:	20000320 	.word	0x20000320
 8002d14:	200006d8 	.word	0x200006d8
 8002d18:	20000328 	.word	0x20000328
 8002d1c:	20000348 	.word	0x20000348
 8002d20:	20000540 	.word	0x20000540
 8002d24:	200006e4 	.word	0x200006e4
 8002d28:	200002e8 	.word	0x200002e8
 8002d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d30:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				#else
				XX1 = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
				#endif
				Xsum1 = Xsum1 + XX1;
 8002d34:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <TIM4_IRQHandler+0x368>)
 8002d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d3e:	f7fd fa15 	bl	800016c <__adddf3>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4936      	ldr	r1, [pc, #216]	; (8002e20 <TIM4_IRQHandler+0x368>)
 8002d48:	e9c1 2300 	strd	r2, r3, [r1]

				// Медианный фильтр для Y
				#ifdef MEDIAN_FILTER_ENABLE
				Y1m[countY1] = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
 8002d4c:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <TIM4_IRQHandler+0x36c>)
 8002d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002d54:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <TIM4_IRQHandler+0x370>)
 8002d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5c:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <TIM4_IRQHandler+0x374>)
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd ff9e 	bl	8000ca4 <__aeabi_fmul>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7fd fe8f 	bl	8000a90 <__aeabi_fsub>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fb55 	bl	8000428 <__aeabi_f2d>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	00e1      	lsls	r1, r4, #3
 8002d84:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002d88:	4401      	add	r1, r0
 8002d8a:	3948      	subs	r1, #72	; 0x48
 8002d8c:	e9c1 2300 	strd	r2, r3, [r1]
				if (++countY1 >= 3) countY1 = 0;
 8002d90:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d94:	3301      	adds	r3, #1
 8002d96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002d9a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d902      	bls.n	8002da8 <TIM4_IRQHandler+0x2f0>
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				YY1 = (Y1m[0] < Y1m[1]) ? ((Y1m[1] < Y1m[2]) ? Y1m[1] : ((Y1m[2] < Y1m[0]) ? Y1m[0] : Y1m[2])) : ((Y1m[0] < Y1m[2]) ? Y1m[0] : ((Y1m[2] < Y1m[1]) ? Y1m[1] : Y1m[2]));
 8002da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db0:	f7fd fe04 	bl	80009bc <__aeabi_dcmplt>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01a      	beq.n	8002df0 <TIM4_IRQHandler+0x338>
 8002dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dc2:	f7fd fdfb 	bl	80009bc <__aeabi_dcmplt>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <TIM4_IRQHandler+0x31a>
 8002dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd0:	e030      	b.n	8002e34 <TIM4_IRQHandler+0x37c>
 8002dd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dda:	f7fd fdef 	bl	80009bc <__aeabi_dcmplt>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <TIM4_IRQHandler+0x332>
 8002de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002de8:	e024      	b.n	8002e34 <TIM4_IRQHandler+0x37c>
 8002dea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dee:	e021      	b.n	8002e34 <TIM4_IRQHandler+0x37c>
 8002df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002df4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002df8:	f7fd fde0 	bl	80009bc <__aeabi_dcmplt>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <TIM4_IRQHandler+0x350>
 8002e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e06:	e015      	b.n	8002e34 <TIM4_IRQHandler+0x37c>
 8002e08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e10:	f7fd fdd4 	bl	80009bc <__aeabi_dcmplt>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <TIM4_IRQHandler+0x378>
 8002e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e1e:	e009      	b.n	8002e34 <TIM4_IRQHandler+0x37c>
 8002e20:	20000328 	.word	0x20000328
 8002e24:	2000039c 	.word	0x2000039c
 8002e28:	20000888 	.word	0x20000888
 8002e2c:	200002f8 	.word	0x200002f8
 8002e30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e34:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				#else
				YY1 = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
				#endif
				Ysum1 = Ysum1 + YY1;
 8002e38:	4baf      	ldr	r3, [pc, #700]	; (80030f8 <TIM4_IRQHandler+0x640>)
 8002e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e42:	f7fd f993 	bl	800016c <__adddf3>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	49ab      	ldr	r1, [pc, #684]	; (80030f8 <TIM4_IRQHandler+0x640>)
 8002e4c:	e9c1 2300 	strd	r2, r3, [r1]

				X = XX1;
 8002e50:	49aa      	ldr	r1, [pc, #680]	; (80030fc <TIM4_IRQHandler+0x644>)
 8002e52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e56:	e9c1 2300 	strd	r2, r3, [r1]
				Y = YY1;
 8002e5a:	49a9      	ldr	r1, [pc, #676]	; (8003100 <TIM4_IRQHandler+0x648>)
 8002e5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e60:	e9c1 2300 	strd	r2, r3, [r1]
				V = sqrt(pow(X, 2) + pow(Y, 2));
 8002e64:	4ba5      	ldr	r3, [pc, #660]	; (80030fc <TIM4_IRQHandler+0x644>)
 8002e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e72:	f006 fcf9 	bl	8009868 <pow>
 8002e76:	4604      	mov	r4, r0
 8002e78:	460d      	mov	r5, r1
 8002e7a:	4ba1      	ldr	r3, [pc, #644]	; (8003100 <TIM4_IRQHandler+0x648>)
 8002e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e88:	f006 fcee 	bl	8009868 <pow>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4620      	mov	r0, r4
 8002e92:	4629      	mov	r1, r5
 8002e94:	f7fd f96a 	bl	800016c <__adddf3>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f006 fd8e 	bl	80099c0 <sqrt>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4996      	ldr	r1, [pc, #600]	; (8003104 <TIM4_IRQHandler+0x64c>)
 8002eaa:	e9c1 2300 	strd	r2, r3, [r1]
				Vm[countV] = V;
				if (++countV >= 3) countV = 0;
				V = (Vm[0] < Vm[1]) ? ((Vm[1] < Vm[2]) ? Vm[1] : ((Vm[2] < Vm[0]) ? Vm[0] : Vm[2])) : ((Vm[0] < Vm[2]) ? Vm[0] : ((Vm[2] < Vm[1]) ? Vm[1] : Vm[2]));
				#endif

				if ( V > Vmax) {
 8002eae:	4b95      	ldr	r3, [pc, #596]	; (8003104 <TIM4_IRQHandler+0x64c>)
 8002eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb4:	4b94      	ldr	r3, [pc, #592]	; (8003108 <TIM4_IRQHandler+0x650>)
 8002eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eba:	f7fd fd9d 	bl	80009f8 <__aeabi_dcmpgt>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <TIM4_IRQHandler+0x418>
					Vmax = V;
 8002ec4:	4b8f      	ldr	r3, [pc, #572]	; (8003104 <TIM4_IRQHandler+0x64c>)
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	498f      	ldr	r1, [pc, #572]	; (8003108 <TIM4_IRQHandler+0x650>)
 8002ecc:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(X) > Xmax) {
 8002ed0:	4b8a      	ldr	r3, [pc, #552]	; (80030fc <TIM4_IRQHandler+0x644>)
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7fd fdad 	bl	8000a38 <__aeabi_d2iz>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bfb8      	it	lt
 8002ee4:	425b      	neglt	r3, r3
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fa8c 	bl	8000404 <__aeabi_i2d>
 8002eec:	4b87      	ldr	r3, [pc, #540]	; (800310c <TIM4_IRQHandler+0x654>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f7fd fd81 	bl	80009f8 <__aeabi_dcmpgt>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <TIM4_IRQHandler+0x46a>
					Xmax = abs(X);
 8002efc:	4b7f      	ldr	r3, [pc, #508]	; (80030fc <TIM4_IRQHandler+0x644>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fd97 	bl	8000a38 <__aeabi_d2iz>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bfb8      	it	lt
 8002f10:	425b      	neglt	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fa76 	bl	8000404 <__aeabi_i2d>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	497b      	ldr	r1, [pc, #492]	; (800310c <TIM4_IRQHandler+0x654>)
 8002f1e:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(Y) > Ymax) {
 8002f22:	4b77      	ldr	r3, [pc, #476]	; (8003100 <TIM4_IRQHandler+0x648>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f7fd fd84 	bl	8000a38 <__aeabi_d2iz>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bfb8      	it	lt
 8002f36:	425b      	neglt	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fa63 	bl	8000404 <__aeabi_i2d>
 8002f3e:	4b74      	ldr	r3, [pc, #464]	; (8003110 <TIM4_IRQHandler+0x658>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fd58 	bl	80009f8 <__aeabi_dcmpgt>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d012      	beq.n	8002f74 <TIM4_IRQHandler+0x4bc>
					Ymax = abs(Y);
 8002f4e:	4b6c      	ldr	r3, [pc, #432]	; (8003100 <TIM4_IRQHandler+0x648>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fd6e 	bl	8000a38 <__aeabi_d2iz>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bfb8      	it	lt
 8002f62:	425b      	neglt	r3, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fa4d 	bl	8000404 <__aeabi_i2d>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4968      	ldr	r1, [pc, #416]	; (8003110 <TIM4_IRQHandler+0x658>)
 8002f70:	e9c1 2300 	strd	r2, r3, [r1]
				}
				resul_arrayX1[ii] = 0;
 8002f74:	4a67      	ldr	r2, [pc, #412]	; (8003114 <TIM4_IRQHandler+0x65c>)
 8002f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayX2[ii] = 0;
 8002f80:	4a65      	ldr	r2, [pc, #404]	; (8003118 <TIM4_IRQHandler+0x660>)
 8002f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY1[ii] = 0;
 8002f8c:	4a63      	ldr	r2, [pc, #396]	; (800311c <TIM4_IRQHandler+0x664>)
 8002f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY2[ii] = 0;
 8002f98:	4a61      	ldr	r2, [pc, #388]	; (8003120 <TIM4_IRQHandler+0x668>)
 8002f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9c:	f04f 0100 	mov.w	r1, #0
 8002fa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 8002fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8002faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fac:	2b63      	cmp	r3, #99	; 0x63
 8002fae:	f77f ae2c 	ble.w	8002c0a <TIM4_IRQHandler+0x152>
			}
			Xsum = Xsum1;
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <TIM4_IRQHandler+0x66c>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	495b      	ldr	r1, [pc, #364]	; (8003128 <TIM4_IRQHandler+0x670>)
 8002fba:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по X
 8002fbe:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <TIM4_IRQHandler+0x670>)
 8002fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	4b58      	ldr	r3, [pc, #352]	; (800312c <TIM4_IRQHandler+0x674>)
 8002fca:	f7fd fbaf 	bl	800072c <__aeabi_ddiv>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4955      	ldr	r1, [pc, #340]	; (8003128 <TIM4_IRQHandler+0x670>)
 8002fd4:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / SPEED_CALIBRATE;	// Скорость по X
 8002fd8:	4b53      	ldr	r3, [pc, #332]	; (8003128 <TIM4_IRQHandler+0x670>)
 8002fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fde:	a344      	add	r3, pc, #272	; (adr r3, 80030f0 <TIM4_IRQHandler+0x638>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd fba2 	bl	800072c <__aeabi_ddiv>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	494e      	ldr	r1, [pc, #312]	; (8003128 <TIM4_IRQHandler+0x670>)
 8002fee:	e9c1 2300 	strd	r2, r3, [r1]

			Ysum = Ysum1;
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <TIM4_IRQHandler+0x640>)
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	494d      	ldr	r1, [pc, #308]	; (8003130 <TIM4_IRQHandler+0x678>)
 8002ffa:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по Y
 8002ffe:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <TIM4_IRQHandler+0x678>)
 8003000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	4b48      	ldr	r3, [pc, #288]	; (800312c <TIM4_IRQHandler+0x674>)
 800300a:	f7fd fb8f 	bl	800072c <__aeabi_ddiv>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4947      	ldr	r1, [pc, #284]	; (8003130 <TIM4_IRQHandler+0x678>)
 8003014:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / SPEED_CALIBRATE;	// Скорость по Y
 8003018:	4b45      	ldr	r3, [pc, #276]	; (8003130 <TIM4_IRQHandler+0x678>)
 800301a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800301e:	a334      	add	r3, pc, #208	; (adr r3, 80030f0 <TIM4_IRQHandler+0x638>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd fb82 	bl	800072c <__aeabi_ddiv>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4940      	ldr	r1, [pc, #256]	; (8003130 <TIM4_IRQHandler+0x678>)
 800302e:	e9c1 2300 	strd	r2, r3, [r1]

			Vmaxfin = Vmax / SPEED_CALIBRATE;	// Максимальная скорость за время MEASSURE_COUNT
 8003032:	4b35      	ldr	r3, [pc, #212]	; (8003108 <TIM4_IRQHandler+0x650>)
 8003034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003038:	a32d      	add	r3, pc, #180	; (adr r3, 80030f0 <TIM4_IRQHandler+0x638>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd fb75 	bl	800072c <__aeabi_ddiv>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	493b      	ldr	r1, [pc, #236]	; (8003134 <TIM4_IRQHandler+0x67c>)
 8003048:	e9c1 2300 	strd	r2, r3, [r1]
			Xmaxfin = Xmax / SPEED_CALIBRATE;
 800304c:	4b2f      	ldr	r3, [pc, #188]	; (800310c <TIM4_IRQHandler+0x654>)
 800304e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003052:	a327      	add	r3, pc, #156	; (adr r3, 80030f0 <TIM4_IRQHandler+0x638>)
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f7fd fb68 	bl	800072c <__aeabi_ddiv>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4935      	ldr	r1, [pc, #212]	; (8003138 <TIM4_IRQHandler+0x680>)
 8003062:	e9c1 2300 	strd	r2, r3, [r1]
			Ymaxfin = Ymax / SPEED_CALIBRATE;
 8003066:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <TIM4_IRQHandler+0x658>)
 8003068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800306c:	a320      	add	r3, pc, #128	; (adr r3, 80030f0 <TIM4_IRQHandler+0x638>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	f7fd fb5b 	bl	800072c <__aeabi_ddiv>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4930      	ldr	r1, [pc, #192]	; (800313c <TIM4_IRQHandler+0x684>)
 800307c:	e9c1 2300 	strd	r2, r3, [r1]
			V = sqrt(pow(Xsum, 2) + pow(Ysum, 2));  // Скалярное значение скорости
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <TIM4_IRQHandler+0x670>)
 8003082:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800308e:	f006 fbeb 	bl	8009868 <pow>
 8003092:	4604      	mov	r4, r0
 8003094:	460d      	mov	r5, r1
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <TIM4_IRQHandler+0x678>)
 8003098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a4:	f006 fbe0 	bl	8009868 <pow>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4620      	mov	r0, r4
 80030ae:	4629      	mov	r1, r5
 80030b0:	f7fd f85c 	bl	800016c <__adddf3>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	f006 fc80 	bl	80099c0 <sqrt>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	490f      	ldr	r1, [pc, #60]	; (8003104 <TIM4_IRQHandler+0x64c>)
 80030c6:	e9c1 2300 	strd	r2, r3, [r1]
			if ( V == 0) {
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <TIM4_IRQHandler+0x64c>)
 80030cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	f7fd fc66 	bl	80009a8 <__aeabi_dcmpeq>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d033      	beq.n	800314a <TIM4_IRQHandler+0x692>
			  A = 0;
 80030e2:	4917      	ldr	r1, [pc, #92]	; (8003140 <TIM4_IRQHandler+0x688>)
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e02a      	b.n	8003144 <TIM4_IRQHandler+0x68c>
 80030ee:	bf00      	nop
 80030f0:	e0000000 	.word	0xe0000000
 80030f4:	40451851 	.word	0x40451851
 80030f8:	20000348 	.word	0x20000348
 80030fc:	20000b28 	.word	0x20000b28
 8003100:	20000338 	.word	0x20000338
 8003104:	20000380 	.word	0x20000380
 8003108:	20000308 	.word	0x20000308
 800310c:	20000320 	.word	0x20000320
 8003110:	200006d8 	.word	0x200006d8
 8003114:	20000540 	.word	0x20000540
 8003118:	200006e4 	.word	0x200006e4
 800311c:	2000039c 	.word	0x2000039c
 8003120:	20000888 	.word	0x20000888
 8003124:	20000328 	.word	0x20000328
 8003128:	20000390 	.word	0x20000390
 800312c:	40540000 	.word	0x40540000
 8003130:	200002f0 	.word	0x200002f0
 8003134:	20000300 	.word	0x20000300
 8003138:	20000880 	.word	0x20000880
 800313c:	20000530 	.word	0x20000530
 8003140:	20000318 	.word	0x20000318
 8003144:	e9c1 2300 	strd	r2, r3, [r1]
 8003148:	e039      	b.n	80031be <TIM4_IRQHandler+0x706>
			} else {
				A = acos( Ysum / V ) * 180 / 3.1415926; // Угол
 800314a:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <TIM4_IRQHandler+0x850>)
 800314c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003150:	4b6e      	ldr	r3, [pc, #440]	; (800330c <TIM4_IRQHandler+0x854>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f7fd fae9 	bl	800072c <__aeabi_ddiv>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	f006 fb53 	bl	800980c <acos>
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	4b69      	ldr	r3, [pc, #420]	; (8003310 <TIM4_IRQHandler+0x858>)
 800316c:	f7fd f9b4 	bl	80004d8 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	a361      	add	r3, pc, #388	; (adr r3, 8003300 <TIM4_IRQHandler+0x848>)
 800317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317e:	f7fd fad5 	bl	800072c <__aeabi_ddiv>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4963      	ldr	r1, [pc, #396]	; (8003314 <TIM4_IRQHandler+0x85c>)
 8003188:	e9c1 2300 	strd	r2, r3, [r1]
				if (Xsum < 0) {
 800318c:	4b62      	ldr	r3, [pc, #392]	; (8003318 <TIM4_IRQHandler+0x860>)
 800318e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	f7fd fc0f 	bl	80009bc <__aeabi_dcmplt>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00c      	beq.n	80031be <TIM4_IRQHandler+0x706>
					A = 360 - A; // III, IV квадранты
 80031a4:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <TIM4_IRQHandler+0x85c>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	f04f 0000 	mov.w	r0, #0
 80031ae:	495b      	ldr	r1, [pc, #364]	; (800331c <TIM4_IRQHandler+0x864>)
 80031b0:	f7fc ffda 	bl	8000168 <__aeabi_dsub>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4956      	ldr	r1, [pc, #344]	; (8003314 <TIM4_IRQHandler+0x85c>)
 80031ba:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			measCount = 0;
 80031be:	4b58      	ldr	r3, [pc, #352]	; (8003320 <TIM4_IRQHandler+0x868>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	801a      	strh	r2, [r3, #0]
			readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <TIM4_IRQHandler+0x86c>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e091      	b.n	80032f0 <TIM4_IRQHandler+0x838>
		} else {
			if ((calibrateMode > 0) && (measCount == 1)) {  // Режим калибровки/тестирования
 80031cc:	4b56      	ldr	r3, [pc, #344]	; (8003328 <TIM4_IRQHandler+0x870>)
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <TIM4_IRQHandler+0x744>
 80031d4:	4b52      	ldr	r3, [pc, #328]	; (8003320 <TIM4_IRQHandler+0x868>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10f      	bne.n	80031fc <TIM4_IRQHandler+0x744>
				HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 80031dc:	4853      	ldr	r0, [pc, #332]	; (800332c <TIM4_IRQHandler+0x874>)
 80031de:	f001 fda3 	bl	8004d28 <HAL_TIM_Base_Stop_IT>
				measCount = 0;
 80031e2:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <TIM4_IRQHandler+0x868>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	801a      	strh	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
					SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 80031e8:	4b51      	ldr	r3, [pc, #324]	; (8003330 <TIM4_IRQHandler+0x878>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a50      	ldr	r2, [pc, #320]	; (8003330 <TIM4_IRQHandler+0x878>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]
				#endif
				readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 80031f4:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <TIM4_IRQHandler+0x86c>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e079      	b.n	80032f0 <TIM4_IRQHandler+0x838>
			} else {
				switch (currentMode++) {
 80031fc:	4b4d      	ldr	r3, [pc, #308]	; (8003334 <TIM4_IRQHandler+0x87c>)
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	b291      	uxth	r1, r2
 8003204:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <TIM4_IRQHandler+0x87c>)
 8003206:	8011      	strh	r1, [r2, #0]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d869      	bhi.n	80032e0 <TIM4_IRQHandler+0x828>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <TIM4_IRQHandler+0x75c>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003225 	.word	0x08003225
 8003218:	0800325f 	.word	0x0800325f
 800321c:	0800328d 	.word	0x0800328d
 8003220:	080032b3 	.word	0x080032b3
					case 0: { 					// Z1 (transmit) > Z3 (receive) Y1
						LED_PULSE
 8003224:	2201      	movs	r2, #1
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	4843      	ldr	r0, [pc, #268]	; (8003338 <TIM4_IRQHandler+0x880>)
 800322a:	f000 fe8d 	bl	8003f48 <HAL_GPIO_WritePin>
 800322e:	2200      	movs	r2, #0
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	4841      	ldr	r0, [pc, #260]	; (8003338 <TIM4_IRQHandler+0x880>)
 8003234:	f000 fe88 	bl	8003f48 <HAL_GPIO_WritePin>
						setZ3receive 			// Turn on multiplexer for input Z2 channel.
 8003238:	4b40      	ldr	r3, [pc, #256]	; (800333c <TIM4_IRQHandler+0x884>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a3f      	ldr	r2, [pc, #252]	; (800333c <TIM4_IRQHandler+0x884>)
 800323e:	f023 0308 	bic.w	r3, r3, #8
 8003242:	60d3      	str	r3, [r2, #12]
 8003244:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <TIM4_IRQHandler+0x880>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800324c:	4a3a      	ldr	r2, [pc, #232]	; (8003338 <TIM4_IRQHandler+0x880>)
 800324e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003252:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1); // Генерация для пьезокристалла в 1 канале
 8003254:	2100      	movs	r1, #0
 8003256:	483a      	ldr	r0, [pc, #232]	; (8003340 <TIM4_IRQHandler+0x888>)
 8003258:	f001 fdec 	bl	8004e34 <HAL_TIM_OC_Start>
						break;
 800325c:	e040      	b.n	80032e0 <TIM4_IRQHandler+0x828>
					}
					case 1: { 					// Z3 (transmit) > Z1 (receive) Y2
						//LED_PULSE
						TIM3->ARR = C_24; 		// Коррекция для таймера запуска измерения Z24, Z42
 800325e:	4b39      	ldr	r3, [pc, #228]	; (8003344 <TIM4_IRQHandler+0x88c>)
 8003260:	881a      	ldrh	r2, [r3, #0]
 8003262:	4b39      	ldr	r3, [pc, #228]	; (8003348 <TIM4_IRQHandler+0x890>)
 8003264:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ1receive 			// Turn on multiplexer for input Z1 channel.
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <TIM4_IRQHandler+0x884>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	4a34      	ldr	r2, [pc, #208]	; (800333c <TIM4_IRQHandler+0x884>)
 800326c:	f023 0302 	bic.w	r3, r3, #2
 8003270:	60d3      	str	r3, [r2, #12]
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <TIM4_IRQHandler+0x880>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f023 030f 	bic.w	r3, r3, #15
 800327a:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <TIM4_IRQHandler+0x880>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // Генерация для пьезокристалла в 3 канале
 8003282:	2108      	movs	r1, #8
 8003284:	482e      	ldr	r0, [pc, #184]	; (8003340 <TIM4_IRQHandler+0x888>)
 8003286:	f001 fdd5 	bl	8004e34 <HAL_TIM_OC_Start>
						break;
 800328a:	e029      	b.n	80032e0 <TIM4_IRQHandler+0x828>
					}
					case 2: { 					// Z2 (transmit) > Z4 (receive) X1
						//LED_PULSE
						setZ4receive 			// Turn on multiplexer for input Z4 channel.
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <TIM4_IRQHandler+0x884>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <TIM4_IRQHandler+0x884>)
 8003292:	f023 0310 	bic.w	r3, r3, #16
 8003296:	60d3      	str	r3, [r2, #12]
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <TIM4_IRQHandler+0x880>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a0:	4a25      	ldr	r2, [pc, #148]	; (8003338 <TIM4_IRQHandler+0x880>)
 80032a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a6:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);	// Генерация для пьезокристалла в 2 канале
 80032a8:	2104      	movs	r1, #4
 80032aa:	4825      	ldr	r0, [pc, #148]	; (8003340 <TIM4_IRQHandler+0x888>)
 80032ac:	f001 fdc2 	bl	8004e34 <HAL_TIM_OC_Start>
						break;
 80032b0:	e016      	b.n	80032e0 <TIM4_IRQHandler+0x828>
					}
					case 3: { 					// Z4 (transmit) > Z3 (receive) X2
						//LED_PULSE
						TIM3->ARR = C_13; 		// Коррекция для таймера запуска измерения Z13, Z31
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <TIM4_IRQHandler+0x894>)
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <TIM4_IRQHandler+0x890>)
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ2receive 			// Turn on multiplexer for input Z3 channel.
 80032ba:	4b20      	ldr	r3, [pc, #128]	; (800333c <TIM4_IRQHandler+0x884>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <TIM4_IRQHandler+0x884>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	60d3      	str	r3, [r2, #12]
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <TIM4_IRQHandler+0x880>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ce:	4a1a      	ldr	r2, [pc, #104]	; (8003338 <TIM4_IRQHandler+0x880>)
 80032d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d4:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);	// Генерация для пьезокристалла в 4 канале
 80032d6:	210c      	movs	r1, #12
 80032d8:	4819      	ldr	r0, [pc, #100]	; (8003340 <TIM4_IRQHandler+0x888>)
 80032da:	f001 fdab 	bl	8004e34 <HAL_TIM_OC_Start>
						break;
 80032de:	bf00      	nop
					}
				}
				/* Запускаем таймер захвата */
				START_CAPTURE
 80032e0:	2100      	movs	r1, #0
 80032e2:	481b      	ldr	r0, [pc, #108]	; (8003350 <TIM4_IRQHandler+0x898>)
 80032e4:	f001 ff04 	bl	80050f0 <HAL_TIM_IC_Start_IT>
 80032e8:	2104      	movs	r1, #4
 80032ea:	4819      	ldr	r0, [pc, #100]	; (8003350 <TIM4_IRQHandler+0x898>)
 80032ec:	f001 ff00 	bl	80050f0 <HAL_TIM_IC_Start_IT>
			}
		}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80032f0:	480e      	ldr	r0, [pc, #56]	; (800332c <TIM4_IRQHandler+0x874>)
 80032f2:	f002 f904 	bl	80054fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	3748      	adds	r7, #72	; 0x48
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bdb0      	pop	{r4, r5, r7, pc}
 80032fe:	bf00      	nop
 8003300:	4d12d84a 	.word	0x4d12d84a
 8003304:	400921fb 	.word	0x400921fb
 8003308:	200002f0 	.word	0x200002f0
 800330c:	20000380 	.word	0x20000380
 8003310:	40668000 	.word	0x40668000
 8003314:	20000318 	.word	0x20000318
 8003318:	20000390 	.word	0x20000390
 800331c:	40768000 	.word	0x40768000
 8003320:	20000310 	.word	0x20000310
 8003324:	200002ec 	.word	0x200002ec
 8003328:	20000878 	.word	0x20000878
 800332c:	20000b88 	.word	0x20000b88
 8003330:	e000e010 	.word	0xe000e010
 8003334:	200006d0 	.word	0x200006d0
 8003338:	40010800 	.word	0x40010800
 800333c:	40010c00 	.word	0x40010c00
 8003340:	20000cc8 	.word	0x20000cc8
 8003344:	20000334 	.word	0x20000334
 8003348:	40000400 	.word	0x40000400
 800334c:	200006e0 	.word	0x200006e0
 8003350:	20000d10 	.word	0x20000d10

08003354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
	return 1;
 8003358:	2301      	movs	r3, #1
}
 800335a:	4618      	mov	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <_kill>:

int _kill(int pid, int sig)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800336c:	f003 fb84 	bl	8006a78 <__errno>
 8003370:	4603      	mov	r3, r0
 8003372:	2216      	movs	r2, #22
 8003374:	601a      	str	r2, [r3, #0]
	return -1;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <_exit>:

void _exit (int status)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800338a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffe7 	bl	8003362 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003394:	e7fe      	b.n	8003394 <_exit+0x12>

08003396 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e00a      	b.n	80033be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033a8:	f3af 8000 	nop.w
 80033ac:	4601      	mov	r1, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	60ba      	str	r2, [r7, #8]
 80033b4:	b2ca      	uxtb	r2, r1
 80033b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	3301      	adds	r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	dbf0      	blt.n	80033a8 <_read+0x12>
	}

return len;
 80033c6:	687b      	ldr	r3, [r7, #4]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e009      	b.n	80033f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	60ba      	str	r2, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3301      	adds	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	dbf1      	blt.n	80033e2 <_write+0x12>
	}
	return len;
 80033fe:	687b      	ldr	r3, [r7, #4]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <_close>:

int _close(int file)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	return -1;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800342e:	605a      	str	r2, [r3, #4]
	return 0;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <_isatty>:

int _isatty(int file)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	return 1;
 8003444:	2301      	movs	r3, #1
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
	return 0;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <_sbrk+0x5c>)
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <_sbrk+0x60>)
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800347c:	4b13      	ldr	r3, [pc, #76]	; (80034cc <_sbrk+0x64>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <_sbrk+0x64>)
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <_sbrk+0x68>)
 8003488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	429a      	cmp	r2, r3
 8003496:	d207      	bcs.n	80034a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003498:	f003 faee 	bl	8006a78 <__errno>
 800349c:	4603      	mov	r3, r0
 800349e:	220c      	movs	r2, #12
 80034a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034a6:	e009      	b.n	80034bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <_sbrk+0x64>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <_sbrk+0x64>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	4a05      	ldr	r2, [pc, #20]	; (80034cc <_sbrk+0x64>)
 80034b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ba:	68fb      	ldr	r3, [r7, #12]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20005000 	.word	0x20005000
 80034c8:	00000400 	.word	0x00000400
 80034cc:	200002d8 	.word	0x200002d8
 80034d0:	20000d98 	.word	0x20000d98

080034d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e0:	480c      	ldr	r0, [pc, #48]	; (8003514 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034e2:	490d      	ldr	r1, [pc, #52]	; (8003518 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e8:	e002      	b.n	80034f0 <LoopCopyDataInit>

080034ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ee:	3304      	adds	r3, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f4:	d3f9      	bcc.n	80034ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034f8:	4c0a      	ldr	r4, [pc, #40]	; (8003524 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034fc:	e001      	b.n	8003502 <LoopFillZerobss>

080034fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003500:	3204      	adds	r2, #4

08003502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003504:	d3fb      	bcc.n	80034fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003506:	f7ff ffe5 	bl	80034d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800350a:	f003 fabb 	bl	8006a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800350e:	f7fd fef1 	bl	80012f4 <main>
  bx lr
 8003512:	4770      	bx	lr
  ldr r0, =_sdata
 8003514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003518:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800351c:	0800b330 	.word	0x0800b330
  ldr r2, =_sbss
 8003520:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003524:	20000d98 	.word	0x20000d98

08003528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003528:	e7fe      	b.n	8003528 <ADC1_2_IRQHandler>
	...

0800352c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_Init+0x28>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_Init+0x28>)
 8003536:	f043 0310 	orr.w	r3, r3, #16
 800353a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800353c:	2003      	movs	r0, #3
 800353e:	f000 f939 	bl	80037b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003542:	2000      	movs	r0, #0
 8003544:	f000 f808 	bl	8003558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003548:	f7ff f878 	bl	800263c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40022000 	.word	0x40022000

08003558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_InitTick+0x54>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_InitTick+0x58>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800356e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f955 	bl	8003826 <HAL_SYSTICK_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e00e      	b.n	80035a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b0f      	cmp	r3, #15
 800358a:	d80a      	bhi.n	80035a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800358c:	2200      	movs	r2, #0
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003594:	f000 f919 	bl	80037ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003598:	4a06      	ldr	r2, [pc, #24]	; (80035b4 <HAL_InitTick+0x5c>)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000000 	.word	0x20000000
 80035b0:	20000008 	.word	0x20000008
 80035b4:	20000004 	.word	0x20000004

080035b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_IncTick+0x1c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_IncTick+0x20>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	4a03      	ldr	r2, [pc, #12]	; (80035d8 <HAL_IncTick+0x20>)
 80035ca:	6013      	str	r3, [r2, #0]
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	20000008 	.word	0x20000008
 80035d8:	20000d60 	.word	0x20000d60

080035dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return uwTick;
 80035e0:	4b02      	ldr	r3, [pc, #8]	; (80035ec <HAL_GetTick+0x10>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	20000d60 	.word	0x20000d60

080035f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800360c:	4013      	ands	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800361c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003622:	4a04      	ldr	r2, [pc, #16]	; (8003634 <__NVIC_SetPriorityGrouping+0x44>)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	60d3      	str	r3, [r2, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <__NVIC_GetPriorityGrouping+0x18>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	f003 0307 	and.w	r3, r3, #7
}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	2b00      	cmp	r3, #0
 8003664:	db0b      	blt.n	800367e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	4906      	ldr	r1, [pc, #24]	; (8003688 <__NVIC_EnableIRQ+0x34>)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2001      	movs	r0, #1
 8003676:	fa00 f202 	lsl.w	r2, r0, r2
 800367a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	e000e100 	.word	0xe000e100

0800368c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	6039      	str	r1, [r7, #0]
 8003696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369c:	2b00      	cmp	r3, #0
 800369e:	db0a      	blt.n	80036b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	490c      	ldr	r1, [pc, #48]	; (80036d8 <__NVIC_SetPriority+0x4c>)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	0112      	lsls	r2, r2, #4
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	440b      	add	r3, r1
 80036b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b4:	e00a      	b.n	80036cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4908      	ldr	r1, [pc, #32]	; (80036dc <__NVIC_SetPriority+0x50>)
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	3b04      	subs	r3, #4
 80036c4:	0112      	lsls	r2, r2, #4
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	440b      	add	r3, r1
 80036ca:	761a      	strb	r2, [r3, #24]
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000e100 	.word	0xe000e100
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f1c3 0307 	rsb	r3, r3, #7
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	bf28      	it	cs
 80036fe:	2304      	movcs	r3, #4
 8003700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3304      	adds	r3, #4
 8003706:	2b06      	cmp	r3, #6
 8003708:	d902      	bls.n	8003710 <NVIC_EncodePriority+0x30>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3b03      	subs	r3, #3
 800370e:	e000      	b.n	8003712 <NVIC_EncodePriority+0x32>
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43da      	mvns	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	401a      	ands	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	43d9      	mvns	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003738:	4313      	orrs	r3, r2
         );
}
 800373a:	4618      	mov	r0, r3
 800373c:	3724      	adds	r7, #36	; 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003748:	f3bf 8f4f 	dsb	sy
}
 800374c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <__NVIC_SystemReset+0x24>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003756:	4904      	ldr	r1, [pc, #16]	; (8003768 <__NVIC_SystemReset+0x24>)
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <__NVIC_SystemReset+0x28>)
 800375a:	4313      	orrs	r3, r2
 800375c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800375e:	f3bf 8f4f 	dsb	sy
}
 8003762:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003764:	bf00      	nop
 8003766:	e7fd      	b.n	8003764 <__NVIC_SystemReset+0x20>
 8003768:	e000ed00 	.word	0xe000ed00
 800376c:	05fa0004 	.word	0x05fa0004

08003770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b01      	subs	r3, #1
 800377c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003780:	d301      	bcc.n	8003786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003782:	2301      	movs	r3, #1
 8003784:	e00f      	b.n	80037a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <SysTick_Config+0x40>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800378e:	210f      	movs	r1, #15
 8003790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003794:	f7ff ff7a 	bl	800368c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <SysTick_Config+0x40>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <SysTick_Config+0x40>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	e000e010 	.word	0xe000e010

080037b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff17 	bl	80035f0 <__NVIC_SetPriorityGrouping>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4603      	mov	r3, r0
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037dc:	f7ff ff2c 	bl	8003638 <__NVIC_GetPriorityGrouping>
 80037e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	6978      	ldr	r0, [r7, #20]
 80037e8:	f7ff ff7a 	bl	80036e0 <NVIC_EncodePriority>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff49 	bl	800368c <__NVIC_SetPriority>
}
 80037fa:	bf00      	nop
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800380c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff1f 	bl	8003654 <__NVIC_EnableIRQ>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003822:	f7ff ff8f 	bl	8003744 <__NVIC_SystemReset>

08003826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ff9e 	bl	8003770 <SysTick_Config>
 8003834:	4603      	mov	r3, r0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800385a:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_FLASH_Program+0xd8>)
 800385c:	7e1b      	ldrb	r3, [r3, #24]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_FLASH_Program+0x26>
 8003862:	2302      	movs	r3, #2
 8003864:	e054      	b.n	8003910 <HAL_FLASH_Program+0xd0>
 8003866:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_FLASH_Program+0xd8>)
 8003868:	2201      	movs	r2, #1
 800386a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800386c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003870:	f000 f8a8 	bl	80039c4 <FLASH_WaitForLastOperation>
 8003874:	4603      	mov	r3, r0
 8003876:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d144      	bne.n	8003908 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d102      	bne.n	800388a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003884:	2301      	movs	r3, #1
 8003886:	757b      	strb	r3, [r7, #21]
 8003888:	e007      	b.n	800389a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d102      	bne.n	8003896 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003890:	2302      	movs	r3, #2
 8003892:	757b      	strb	r3, [r7, #21]
 8003894:	e001      	b.n	800389a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003896:	2304      	movs	r3, #4
 8003898:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800389a:	2300      	movs	r3, #0
 800389c:	75bb      	strb	r3, [r7, #22]
 800389e:	e02d      	b.n	80038fc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80038a0:	7dbb      	ldrb	r3, [r7, #22]
 80038a2:	005a      	lsls	r2, r3, #1
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	eb02 0c03 	add.w	ip, r2, r3
 80038aa:	7dbb      	ldrb	r3, [r7, #22]
 80038ac:	0119      	lsls	r1, r3, #4
 80038ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b2:	f1c1 0620 	rsb	r6, r1, #32
 80038b6:	f1a1 0020 	sub.w	r0, r1, #32
 80038ba:	fa22 f401 	lsr.w	r4, r2, r1
 80038be:	fa03 f606 	lsl.w	r6, r3, r6
 80038c2:	4334      	orrs	r4, r6
 80038c4:	fa23 f000 	lsr.w	r0, r3, r0
 80038c8:	4304      	orrs	r4, r0
 80038ca:	fa23 f501 	lsr.w	r5, r3, r1
 80038ce:	b2a3      	uxth	r3, r4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4660      	mov	r0, ip
 80038d4:	f000 f85a 	bl	800398c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038dc:	f000 f872 	bl	80039c4 <FLASH_WaitForLastOperation>
 80038e0:	4603      	mov	r3, r0
 80038e2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <HAL_FLASH_Program+0xdc>)
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	4a0c      	ldr	r2, [pc, #48]	; (800391c <HAL_FLASH_Program+0xdc>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80038f6:	7dbb      	ldrb	r3, [r7, #22]
 80038f8:	3301      	adds	r3, #1
 80038fa:	75bb      	strb	r3, [r7, #22]
 80038fc:	7dba      	ldrb	r2, [r7, #22]
 80038fe:	7d7b      	ldrb	r3, [r7, #21]
 8003900:	429a      	cmp	r2, r3
 8003902:	d3cd      	bcc.n	80038a0 <HAL_FLASH_Program+0x60>
 8003904:	e000      	b.n	8003908 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003906:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_FLASH_Program+0xd8>)
 800390a:	2200      	movs	r2, #0
 800390c:	761a      	strb	r2, [r3, #24]

  return status;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003910:	4618      	mov	r0, r3
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003918:	20000d68 	.word	0x20000d68
 800391c:	40022000 	.word	0x40022000

08003920 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <HAL_FLASH_Unlock+0x40>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_FLASH_Unlock+0x40>)
 8003938:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <HAL_FLASH_Unlock+0x44>)
 800393a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800393c:	4b08      	ldr	r3, [pc, #32]	; (8003960 <HAL_FLASH_Unlock+0x40>)
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_FLASH_Unlock+0x48>)
 8003940:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_FLASH_Unlock+0x40>)
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003952:	79fb      	ldrb	r3, [r7, #7]
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40022000 	.word	0x40022000
 8003964:	45670123 	.word	0x45670123
 8003968:	cdef89ab 	.word	0xcdef89ab

0800396c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_FLASH_Lock+0x1c>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <HAL_FLASH_Lock+0x1c>)
 8003976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40022000 	.word	0x40022000

0800398c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003998:	4b08      	ldr	r3, [pc, #32]	; (80039bc <FLASH_Program_HalfWord+0x30>)
 800399a:	2200      	movs	r2, #0
 800399c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <FLASH_Program_HalfWord+0x34>)
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <FLASH_Program_HalfWord+0x34>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	887a      	ldrh	r2, [r7, #2]
 80039ae:	801a      	strh	r2, [r3, #0]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000d68 	.word	0x20000d68
 80039c0:	40022000 	.word	0x40022000

080039c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80039cc:	f7ff fe06 	bl	80035dc <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80039d2:	e010      	b.n	80039f6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039da:	d00c      	beq.n	80039f6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <FLASH_WaitForLastOperation+0x2e>
 80039e2:	f7ff fdfb 	bl	80035dc <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d201      	bcs.n	80039f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e025      	b.n	8003a42 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <FLASH_WaitForLastOperation+0x88>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e8      	bne.n	80039d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <FLASH_WaitForLastOperation+0x88>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <FLASH_WaitForLastOperation+0x88>)
 8003a10:	2220      	movs	r2, #32
 8003a12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a14:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <FLASH_WaitForLastOperation+0x88>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <FLASH_WaitForLastOperation+0x88>)
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <FLASH_WaitForLastOperation+0x88>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a38:	f000 f80a 	bl	8003a50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40022000 	.word	0x40022000

08003a50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <FLASH_SetErrorCode+0x98>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <FLASH_SetErrorCode+0x9c>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <FLASH_SetErrorCode+0x9c>)
 8003a70:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f043 0310 	orr.w	r3, r3, #16
 8003a78:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <FLASH_SetErrorCode+0x98>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <FLASH_SetErrorCode+0x9c>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	4a17      	ldr	r2, [pc, #92]	; (8003aec <FLASH_SetErrorCode+0x9c>)
 8003a90:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f043 0304 	orr.w	r3, r3, #4
 8003a98:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <FLASH_SetErrorCode+0x98>)
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <FLASH_SetErrorCode+0x9c>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <FLASH_SetErrorCode+0x9c>)
 8003ab0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <FLASH_SetErrorCode+0x98>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <FLASH_SetErrorCode+0x98>)
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f240 1201 	movw	r2, #257	; 0x101
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d106      	bne.n	8003ad6 <FLASH_SetErrorCode+0x86>
 8003ac8:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <FLASH_SetErrorCode+0x98>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4a06      	ldr	r2, [pc, #24]	; (8003ae8 <FLASH_SetErrorCode+0x98>)
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	61d3      	str	r3, [r2, #28]
}  
 8003ad4:	e002      	b.n	8003adc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003ad6:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <FLASH_SetErrorCode+0x98>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60d3      	str	r3, [r2, #12]
}  
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40022000 	.word	0x40022000
 8003aec:	20000d68 	.word	0x20000d68

08003af0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b02:	4b2f      	ldr	r3, [pc, #188]	; (8003bc0 <HAL_FLASHEx_Erase+0xd0>)
 8003b04:	7e1b      	ldrb	r3, [r3, #24]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_FLASHEx_Erase+0x1e>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e053      	b.n	8003bb6 <HAL_FLASHEx_Erase+0xc6>
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <HAL_FLASHEx_Erase+0xd0>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d116      	bne.n	8003b4a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b20:	f7ff ff50 	bl	80039c4 <FLASH_WaitForLastOperation>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d141      	bne.n	8003bae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f000 f84c 	bl	8003bc8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b34:	f7ff ff46 	bl	80039c4 <FLASH_WaitForLastOperation>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b3c:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <HAL_FLASHEx_Erase+0xd4>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	4a20      	ldr	r2, [pc, #128]	; (8003bc4 <HAL_FLASHEx_Erase+0xd4>)
 8003b42:	f023 0304 	bic.w	r3, r3, #4
 8003b46:	6113      	str	r3, [r2, #16]
 8003b48:	e031      	b.n	8003bae <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b4e:	f7ff ff39 	bl	80039c4 <FLASH_WaitForLastOperation>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d12a      	bne.n	8003bae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b5e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	e019      	b.n	8003b9c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003b68:	68b8      	ldr	r0, [r7, #8]
 8003b6a:	f000 f849 	bl	8003c00 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b72:	f7ff ff27 	bl	80039c4 <FLASH_WaitForLastOperation>
 8003b76:	4603      	mov	r3, r0
 8003b78:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_FLASHEx_Erase+0xd4>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <HAL_FLASHEx_Erase+0xd4>)
 8003b80:	f023 0302 	bic.w	r3, r3, #2
 8003b84:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	601a      	str	r2, [r3, #0]
            break;
 8003b92:	e00c      	b.n	8003bae <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b9a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	029a      	lsls	r2, r3, #10
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d3dc      	bcc.n	8003b68 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <HAL_FLASHEx_Erase+0xd0>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	761a      	strb	r2, [r3, #24]

  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000d68 	.word	0x20000d68
 8003bc4:	40022000 	.word	0x40022000

08003bc8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <FLASH_MassErase+0x30>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <FLASH_MassErase+0x34>)
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <FLASH_MassErase+0x34>)
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <FLASH_MassErase+0x34>)
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	4a05      	ldr	r2, [pc, #20]	; (8003bfc <FLASH_MassErase+0x34>)
 8003be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	20000d68 	.word	0x20000d68
 8003bfc:	40022000 	.word	0x40022000

08003c00 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <FLASH_PageErase+0x38>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <FLASH_PageErase+0x3c>)
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <FLASH_PageErase+0x3c>)
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c1a:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <FLASH_PageErase+0x3c>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <FLASH_PageErase+0x3c>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <FLASH_PageErase+0x3c>)
 8003c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000d68 	.word	0x20000d68
 8003c3c:	40022000 	.word	0x40022000

08003c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b08b      	sub	sp, #44	; 0x2c
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c52:	e169      	b.n	8003f28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c54:	2201      	movs	r2, #1
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	f040 8158 	bne.w	8003f22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4a9a      	ldr	r2, [pc, #616]	; (8003ee0 <HAL_GPIO_Init+0x2a0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d05e      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003c7c:	4a98      	ldr	r2, [pc, #608]	; (8003ee0 <HAL_GPIO_Init+0x2a0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d875      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003c82:	4a98      	ldr	r2, [pc, #608]	; (8003ee4 <HAL_GPIO_Init+0x2a4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d058      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003c88:	4a96      	ldr	r2, [pc, #600]	; (8003ee4 <HAL_GPIO_Init+0x2a4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d86f      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003c8e:	4a96      	ldr	r2, [pc, #600]	; (8003ee8 <HAL_GPIO_Init+0x2a8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d052      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003c94:	4a94      	ldr	r2, [pc, #592]	; (8003ee8 <HAL_GPIO_Init+0x2a8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d869      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003c9a:	4a94      	ldr	r2, [pc, #592]	; (8003eec <HAL_GPIO_Init+0x2ac>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d04c      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003ca0:	4a92      	ldr	r2, [pc, #584]	; (8003eec <HAL_GPIO_Init+0x2ac>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d863      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003ca6:	4a92      	ldr	r2, [pc, #584]	; (8003ef0 <HAL_GPIO_Init+0x2b0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d046      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
 8003cac:	4a90      	ldr	r2, [pc, #576]	; (8003ef0 <HAL_GPIO_Init+0x2b0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d85d      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003cb2:	2b12      	cmp	r3, #18
 8003cb4:	d82a      	bhi.n	8003d0c <HAL_GPIO_Init+0xcc>
 8003cb6:	2b12      	cmp	r3, #18
 8003cb8:	d859      	bhi.n	8003d6e <HAL_GPIO_Init+0x12e>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_GPIO_Init+0x80>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003d3b 	.word	0x08003d3b
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003d27 	.word	0x08003d27
 8003ccc:	08003d69 	.word	0x08003d69
 8003cd0:	08003d6f 	.word	0x08003d6f
 8003cd4:	08003d6f 	.word	0x08003d6f
 8003cd8:	08003d6f 	.word	0x08003d6f
 8003cdc:	08003d6f 	.word	0x08003d6f
 8003ce0:	08003d6f 	.word	0x08003d6f
 8003ce4:	08003d6f 	.word	0x08003d6f
 8003ce8:	08003d6f 	.word	0x08003d6f
 8003cec:	08003d6f 	.word	0x08003d6f
 8003cf0:	08003d6f 	.word	0x08003d6f
 8003cf4:	08003d6f 	.word	0x08003d6f
 8003cf8:	08003d6f 	.word	0x08003d6f
 8003cfc:	08003d6f 	.word	0x08003d6f
 8003d00:	08003d6f 	.word	0x08003d6f
 8003d04:	08003d1d 	.word	0x08003d1d
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	4a79      	ldr	r2, [pc, #484]	; (8003ef4 <HAL_GPIO_Init+0x2b4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d12:	e02c      	b.n	8003d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	623b      	str	r3, [r7, #32]
          break;
 8003d1a:	e029      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	623b      	str	r3, [r7, #32]
          break;
 8003d24:	e024      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	623b      	str	r3, [r7, #32]
          break;
 8003d2e:	e01f      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	330c      	adds	r3, #12
 8003d36:	623b      	str	r3, [r7, #32]
          break;
 8003d38:	e01a      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d42:	2304      	movs	r3, #4
 8003d44:	623b      	str	r3, [r7, #32]
          break;
 8003d46:	e013      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d50:	2308      	movs	r3, #8
 8003d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	611a      	str	r2, [r3, #16]
          break;
 8003d5a:	e009      	b.n	8003d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	615a      	str	r2, [r3, #20]
          break;
 8003d66:	e003      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	623b      	str	r3, [r7, #32]
          break;
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x130>
          break;
 8003d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2bff      	cmp	r3, #255	; 0xff
 8003d74:	d801      	bhi.n	8003d7a <HAL_GPIO_Init+0x13a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	e001      	b.n	8003d7e <HAL_GPIO_Init+0x13e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2bff      	cmp	r3, #255	; 0xff
 8003d84:	d802      	bhi.n	8003d8c <HAL_GPIO_Init+0x14c>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	e002      	b.n	8003d92 <HAL_GPIO_Init+0x152>
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	3b08      	subs	r3, #8
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	210f      	movs	r1, #15
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	401a      	ands	r2, r3
 8003da4:	6a39      	ldr	r1, [r7, #32]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	431a      	orrs	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80b1 	beq.w	8003f22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dc0:	4b4d      	ldr	r3, [pc, #308]	; (8003ef8 <HAL_GPIO_Init+0x2b8>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4a4c      	ldr	r2, [pc, #304]	; (8003ef8 <HAL_GPIO_Init+0x2b8>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6193      	str	r3, [r2, #24]
 8003dcc:	4b4a      	ldr	r3, [pc, #296]	; (8003ef8 <HAL_GPIO_Init+0x2b8>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dd8:	4a48      	ldr	r2, [pc, #288]	; (8003efc <HAL_GPIO_Init+0x2bc>)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	220f      	movs	r2, #15
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a40      	ldr	r2, [pc, #256]	; (8003f00 <HAL_GPIO_Init+0x2c0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_GPIO_Init+0x1ec>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <HAL_GPIO_Init+0x2c4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00d      	beq.n	8003e28 <HAL_GPIO_Init+0x1e8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3e      	ldr	r2, [pc, #248]	; (8003f08 <HAL_GPIO_Init+0x2c8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <HAL_GPIO_Init+0x1e4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3d      	ldr	r2, [pc, #244]	; (8003f0c <HAL_GPIO_Init+0x2cc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_GPIO_Init+0x1e0>
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e20:	2304      	movs	r3, #4
 8003e22:	e004      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e002      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_GPIO_Init+0x1ee>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	f002 0203 	and.w	r2, r2, #3
 8003e34:	0092      	lsls	r2, r2, #2
 8003e36:	4093      	lsls	r3, r2
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e3e:	492f      	ldr	r1, [pc, #188]	; (8003efc <HAL_GPIO_Init+0x2bc>)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d006      	beq.n	8003e66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	492c      	ldr	r1, [pc, #176]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
 8003e64:	e006      	b.n	8003e74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e66:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	4928      	ldr	r1, [pc, #160]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4922      	ldr	r1, [pc, #136]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	491e      	ldr	r1, [pc, #120]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d006      	beq.n	8003eb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4918      	ldr	r1, [pc, #96]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003eb6:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	4914      	ldr	r1, [pc, #80]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d021      	beq.n	8003f14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <HAL_GPIO_Init+0x2d0>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60cb      	str	r3, [r1, #12]
 8003edc:	e021      	b.n	8003f22 <HAL_GPIO_Init+0x2e2>
 8003ede:	bf00      	nop
 8003ee0:	10320000 	.word	0x10320000
 8003ee4:	10310000 	.word	0x10310000
 8003ee8:	10220000 	.word	0x10220000
 8003eec:	10210000 	.word	0x10210000
 8003ef0:	10120000 	.word	0x10120000
 8003ef4:	10110000 	.word	0x10110000
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010800 	.word	0x40010800
 8003f04:	40010c00 	.word	0x40010c00
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40011400 	.word	0x40011400
 8003f10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	4909      	ldr	r1, [pc, #36]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	3301      	adds	r3, #1
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f47f ae8e 	bne.w	8003c54 <HAL_GPIO_Init+0x14>
  }
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	372c      	adds	r7, #44	; 0x2c
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	40010400 	.word	0x40010400

08003f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
 8003f54:	4613      	mov	r3, r2
 8003f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f58:	787b      	ldrb	r3, [r7, #1]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f64:	e003      	b.n	8003f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f66:	887b      	ldrh	r3, [r7, #2]
 8003f68:	041a      	lsls	r2, r3, #16
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	611a      	str	r2, [r3, #16]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e12b      	b.n	80041e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fe fb7e 	bl	80026a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f000 fd38 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4a81      	ldr	r2, [pc, #516]	; (80041ec <HAL_I2C_Init+0x274>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d807      	bhi.n	8003ffc <HAL_I2C_Init+0x84>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a80      	ldr	r2, [pc, #512]	; (80041f0 <HAL_I2C_Init+0x278>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bf94      	ite	ls
 8003ff4:	2301      	movls	r3, #1
 8003ff6:	2300      	movhi	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e006      	b.n	800400a <HAL_I2C_Init+0x92>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <HAL_I2C_Init+0x27c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	bf94      	ite	ls
 8004004:	2301      	movls	r3, #1
 8004006:	2300      	movhi	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0e7      	b.n	80041e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a78      	ldr	r2, [pc, #480]	; (80041f8 <HAL_I2C_Init+0x280>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0c9b      	lsrs	r3, r3, #18
 800401c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a6a      	ldr	r2, [pc, #424]	; (80041ec <HAL_I2C_Init+0x274>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d802      	bhi.n	800404c <HAL_I2C_Init+0xd4>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3301      	adds	r3, #1
 800404a:	e009      	b.n	8004060 <HAL_I2C_Init+0xe8>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	4a69      	ldr	r2, [pc, #420]	; (80041fc <HAL_I2C_Init+0x284>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	3301      	adds	r3, #1
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	430b      	orrs	r3, r1
 8004066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	495c      	ldr	r1, [pc, #368]	; (80041ec <HAL_I2C_Init+0x274>)
 800407c:	428b      	cmp	r3, r1
 800407e:	d819      	bhi.n	80040b4 <HAL_I2C_Init+0x13c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1e59      	subs	r1, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	fbb1 f3f3 	udiv	r3, r1, r3
 800408e:	1c59      	adds	r1, r3, #1
 8004090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004094:	400b      	ands	r3, r1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_I2C_Init+0x138>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1e59      	subs	r1, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ae:	e051      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 80040b0:	2304      	movs	r3, #4
 80040b2:	e04f      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d111      	bne.n	80040e0 <HAL_I2C_Init+0x168>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1e58      	subs	r0, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e012      	b.n	8004106 <HAL_I2C_Init+0x18e>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1e58      	subs	r0, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	0099      	lsls	r1, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Init+0x196>
 800410a:	2301      	movs	r3, #1
 800410c:	e022      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10e      	bne.n	8004134 <HAL_I2C_Init+0x1bc>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e58      	subs	r0, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6859      	ldr	r1, [r3, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	440b      	add	r3, r1
 8004124:	fbb0 f3f3 	udiv	r3, r0, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004132:	e00f      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1e58      	subs	r0, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	0099      	lsls	r1, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	6809      	ldr	r1, [r1, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69da      	ldr	r2, [r3, #28]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6911      	ldr	r1, [r2, #16]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68d2      	ldr	r2, [r2, #12]
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	430b      	orrs	r3, r1
 8004196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	000186a0 	.word	0x000186a0
 80041f0:	001e847f 	.word	0x001e847f
 80041f4:	003d08ff 	.word	0x003d08ff
 80041f8:	431bde83 	.word	0x431bde83
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e034      	b.n	800427c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800421a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f245 5255 	movw	r2, #21845	; 0x5555
 8004224:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6852      	ldr	r2, [r2, #4]
 800422e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6892      	ldr	r2, [r2, #8]
 8004238:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800423a:	f7ff f9cf 	bl	80035dc <HAL_GetTick>
 800423e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004240:	e00f      	b.n	8004262 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004242:	f7ff f9cb 	bl	80035dc <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b27      	cmp	r3, #39	; 0x27
 800424e:	d908      	bls.n	8004262 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e00c      	b.n	800427c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e8      	bne.n	8004242 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004278:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004294:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e26c      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8087 	beq.w	80043d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042c4:	4b92      	ldr	r3, [pc, #584]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d00c      	beq.n	80042ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042d0:	4b8f      	ldr	r3, [pc, #572]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d112      	bne.n	8004302 <HAL_RCC_OscConfig+0x5e>
 80042dc:	4b8c      	ldr	r3, [pc, #560]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d10b      	bne.n	8004302 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ea:	4b89      	ldr	r3, [pc, #548]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d06c      	beq.n	80043d0 <HAL_RCC_OscConfig+0x12c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d168      	bne.n	80043d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e246      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430a:	d106      	bne.n	800431a <HAL_RCC_OscConfig+0x76>
 800430c:	4b80      	ldr	r3, [pc, #512]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a7f      	ldr	r2, [pc, #508]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e02e      	b.n	8004378 <HAL_RCC_OscConfig+0xd4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10c      	bne.n	800433c <HAL_RCC_OscConfig+0x98>
 8004322:	4b7b      	ldr	r3, [pc, #492]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a7a      	ldr	r2, [pc, #488]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b78      	ldr	r3, [pc, #480]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a77      	ldr	r2, [pc, #476]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e01d      	b.n	8004378 <HAL_RCC_OscConfig+0xd4>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004344:	d10c      	bne.n	8004360 <HAL_RCC_OscConfig+0xbc>
 8004346:	4b72      	ldr	r3, [pc, #456]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a71      	ldr	r2, [pc, #452]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800434c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	4b6f      	ldr	r3, [pc, #444]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a6e      	ldr	r2, [pc, #440]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e00b      	b.n	8004378 <HAL_RCC_OscConfig+0xd4>
 8004360:	4b6b      	ldr	r3, [pc, #428]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6a      	ldr	r2, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	4b68      	ldr	r3, [pc, #416]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a67      	ldr	r2, [pc, #412]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004376:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d013      	beq.n	80043a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7ff f92c 	bl	80035dc <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004388:	f7ff f928 	bl	80035dc <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e1fa      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0xe4>
 80043a6:	e014      	b.n	80043d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7ff f918 	bl	80035dc <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b0:	f7ff f914 	bl	80035dc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	; 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1e6      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	4b53      	ldr	r3, [pc, #332]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x10c>
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d063      	beq.n	80044a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043de:	4b4c      	ldr	r3, [pc, #304]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043ea:	4b49      	ldr	r3, [pc, #292]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d11c      	bne.n	8004430 <HAL_RCC_OscConfig+0x18c>
 80043f6:	4b46      	ldr	r3, [pc, #280]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d116      	bne.n	8004430 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004402:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_RCC_OscConfig+0x176>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e1ba      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441a:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4939      	ldr	r1, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442e:	e03a      	b.n	80044a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004438:	4b36      	ldr	r3, [pc, #216]	; (8004514 <HAL_RCC_OscConfig+0x270>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7ff f8cd 	bl	80035dc <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004446:	f7ff f8c9 	bl	80035dc <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e19b      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004464:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4927      	ldr	r1, [pc, #156]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
 8004478:	e015      	b.n	80044a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <HAL_RCC_OscConfig+0x270>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7ff f8ac 	bl	80035dc <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004488:	f7ff f8a8 	bl	80035dc <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e17a      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d03a      	beq.n	8004528 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d019      	beq.n	80044ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <HAL_RCC_OscConfig+0x274>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c0:	f7ff f88c 	bl	80035dc <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c8:	f7ff f888 	bl	80035dc <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e15a      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044e6:	2001      	movs	r0, #1
 80044e8:	f000 fada 	bl	8004aa0 <RCC_Delay>
 80044ec:	e01c      	b.n	8004528 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <HAL_RCC_OscConfig+0x274>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f4:	f7ff f872 	bl	80035dc <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044fa:	e00f      	b.n	800451c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fc:	f7ff f86e 	bl	80035dc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d908      	bls.n	800451c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e140      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	42420000 	.word	0x42420000
 8004518:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800451c:	4b9e      	ldr	r3, [pc, #632]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e9      	bne.n	80044fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80a6 	beq.w	8004682 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004536:	2300      	movs	r3, #0
 8004538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453a:	4b97      	ldr	r3, [pc, #604]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10d      	bne.n	8004562 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	4b94      	ldr	r3, [pc, #592]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	4a93      	ldr	r2, [pc, #588]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004550:	61d3      	str	r3, [r2, #28]
 8004552:	4b91      	ldr	r3, [pc, #580]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b8e      	ldr	r3, [pc, #568]	; (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d118      	bne.n	80045a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456e:	4b8b      	ldr	r3, [pc, #556]	; (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a8a      	ldr	r2, [pc, #552]	; (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457a:	f7ff f82f 	bl	80035dc <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004582:	f7ff f82b 	bl	80035dc <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0fd      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	4b81      	ldr	r3, [pc, #516]	; (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x312>
 80045a8:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4a7a      	ldr	r2, [pc, #488]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6213      	str	r3, [r2, #32]
 80045b4:	e02d      	b.n	8004612 <HAL_RCC_OscConfig+0x36e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x334>
 80045be:	4b76      	ldr	r3, [pc, #472]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	4a75      	ldr	r2, [pc, #468]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6213      	str	r3, [r2, #32]
 80045ca:	4b73      	ldr	r3, [pc, #460]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4a72      	ldr	r2, [pc, #456]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	6213      	str	r3, [r2, #32]
 80045d6:	e01c      	b.n	8004612 <HAL_RCC_OscConfig+0x36e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d10c      	bne.n	80045fa <HAL_RCC_OscConfig+0x356>
 80045e0:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	4a6c      	ldr	r2, [pc, #432]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045e6:	f043 0304 	orr.w	r3, r3, #4
 80045ea:	6213      	str	r3, [r2, #32]
 80045ec:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	4a69      	ldr	r2, [pc, #420]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	6213      	str	r3, [r2, #32]
 80045f8:	e00b      	b.n	8004612 <HAL_RCC_OscConfig+0x36e>
 80045fa:	4b67      	ldr	r3, [pc, #412]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4a66      	ldr	r2, [pc, #408]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	6213      	str	r3, [r2, #32]
 8004606:	4b64      	ldr	r3, [pc, #400]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	4a63      	ldr	r2, [pc, #396]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800460c:	f023 0304 	bic.w	r3, r3, #4
 8004610:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d015      	beq.n	8004646 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461a:	f7fe ffdf 	bl	80035dc <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004620:	e00a      	b.n	8004638 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7fe ffdb 	bl	80035dc <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e0ab      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	4b57      	ldr	r3, [pc, #348]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ee      	beq.n	8004622 <HAL_RCC_OscConfig+0x37e>
 8004644:	e014      	b.n	8004670 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004646:	f7fe ffc9 	bl	80035dc <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fe ffc5 	bl	80035dc <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e095      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004664:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ee      	bne.n	800464e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d105      	bne.n	8004682 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004676:	4b48      	ldr	r3, [pc, #288]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	4a47      	ldr	r2, [pc, #284]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800467c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004680:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8081 	beq.w	800478e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800468c:	4b42      	ldr	r3, [pc, #264]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b08      	cmp	r3, #8
 8004696:	d061      	beq.n	800475c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d146      	bne.n	800472e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a0:	4b3f      	ldr	r3, [pc, #252]	; (80047a0 <HAL_RCC_OscConfig+0x4fc>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a6:	f7fe ff99 	bl	80035dc <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ae:	f7fe ff95 	bl	80035dc <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e067      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c0:	4b35      	ldr	r3, [pc, #212]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f0      	bne.n	80046ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d4:	d108      	bne.n	80046e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046d6:	4b30      	ldr	r3, [pc, #192]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	492d      	ldr	r1, [pc, #180]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e8:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a19      	ldr	r1, [r3, #32]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	430b      	orrs	r3, r1
 80046fa:	4927      	ldr	r1, [pc, #156]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004700:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <HAL_RCC_OscConfig+0x4fc>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fe ff69 	bl	80035dc <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470e:	f7fe ff65 	bl	80035dc <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e037      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x46a>
 800472c:	e02f      	b.n	800478e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472e:	4b1c      	ldr	r3, [pc, #112]	; (80047a0 <HAL_RCC_OscConfig+0x4fc>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004734:	f7fe ff52 	bl	80035dc <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473c:	f7fe ff4e 	bl	80035dc <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e020      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x498>
 800475a:	e018      	b.n	800478e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e013      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_OscConfig+0x4f4>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40021000 	.word	0x40021000
 800479c:	40007000 	.word	0x40007000
 80047a0:	42420060 	.word	0x42420060

080047a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0d0      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d910      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b67      	ldr	r3, [pc, #412]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	4965      	ldr	r1, [pc, #404]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800480a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004822:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d040      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d115      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e073      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06b      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b39      	ldr	r3, [pc, #228]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4936      	ldr	r1, [pc, #216]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004894:	f7fe fea2 	bl	80035dc <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fe fe9e 	bl	80035dc <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e053      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d210      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 0207 	bic.w	r2, r3, #7
 80048da:	4922      	ldr	r1, [pc, #136]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1cc>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1d0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fe00 	bl	8003558 <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40022000 	.word	0x40022000
 8004968:	40021000 	.word	0x40021000
 800496c:	0800aee8 	.word	0x0800aee8
 8004970:	20000000 	.word	0x20000000
 8004974:	20000004 	.word	0x20000004

08004978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	b490      	push	{r4, r7}
 800497a:	b08a      	sub	sp, #40	; 0x28
 800497c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800497e:	4b2a      	ldr	r3, [pc, #168]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004980:	1d3c      	adds	r4, r7, #4
 8004982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004988:	f240 2301 	movw	r3, #513	; 0x201
 800498c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049a2:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d002      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d003      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0x46>
 80049b6:	e02d      	b.n	8004a14 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049b8:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ba:	623b      	str	r3, [r7, #32]
      break;
 80049bc:	e02d      	b.n	8004a1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	0c9b      	lsrs	r3, r3, #18
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049ca:	4413      	add	r3, r2
 80049cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d013      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049dc:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0c5b      	lsrs	r3, r3, #17
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049ea:	4413      	add	r3, r2
 80049ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	4a0e      	ldr	r2, [pc, #56]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f6:	fb02 f203 	mul.w	r2, r2, r3
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
 8004a02:	e004      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	623b      	str	r3, [r7, #32]
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a16:	623b      	str	r3, [r7, #32]
      break;
 8004a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3728      	adds	r7, #40	; 0x28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc90      	pop	{r4, r7}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	0800aed8 	.word	0x0800aed8
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	00f42400 	.word	0x00f42400
 8004a34:	003d0900 	.word	0x003d0900
 8004a38:	007a1200 	.word	0x007a1200

08004a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a40:	4b02      	ldr	r3, [pc, #8]	; (8004a4c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	20000000 	.word	0x20000000

08004a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a54:	f7ff fff2 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4903      	ldr	r1, [pc, #12]	; (8004a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	0800aef8 	.word	0x0800aef8

08004a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a7c:	f7ff ffde 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	0adb      	lsrs	r3, r3, #11
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4903      	ldr	r1, [pc, #12]	; (8004a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	0800aef8 	.word	0x0800aef8

08004aa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <RCC_Delay+0x34>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <RCC_Delay+0x38>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	0a5b      	lsrs	r3, r3, #9
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004abc:	bf00      	nop
  }
  while (Delay --);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1e5a      	subs	r2, r3, #1
 8004ac2:	60fa      	str	r2, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f9      	bne.n	8004abc <RCC_Delay+0x1c>
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	10624dd3 	.word	0x10624dd3

08004adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e076      	b.n	8004bdc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afe:	d009      	beq.n	8004b14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	61da      	str	r2, [r3, #28]
 8004b06:	e005      	b.n	8004b14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd fe06 	bl	8002740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	ea42 0103 	orr.w	r1, r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	0c1a      	lsrs	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f002 0204 	and.w	r2, r2, #4
 8004bba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e041      	b.n	8004c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fd fde4 	bl	80027d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f000 ffce 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d001      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e03a      	b.n	8004d12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a18      	ldr	r2, [pc, #96]	; (8004d1c <HAL_TIM_Base_Start_IT+0x98>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x58>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x58>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a14      	ldr	r2, [pc, #80]	; (8004d20 <HAL_TIM_Base_Start_IT+0x9c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0x58>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a13      	ldr	r2, [pc, #76]	; (8004d24 <HAL_TIM_Base_Start_IT+0xa0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d111      	bne.n	8004d00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d010      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	e007      	b.n	8004d10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800

08004d28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10f      	bne.n	8004d70 <HAL_TIM_Base_Stop_IT+0x48>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6a1a      	ldr	r2, [r3, #32]
 8004d56:	f240 4344 	movw	r3, #1092	; 0x444
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_Base_Stop_IT+0x48>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e041      	b.n	8004e1a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f839 	bl	8004e22 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 fefe 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_TIM_OC_Start+0x24>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e022      	b.n	8004e9e <HAL_TIM_OC_Start+0x6a>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d109      	bne.n	8004e72 <HAL_TIM_OC_Start+0x3e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	e015      	b.n	8004e9e <HAL_TIM_OC_Start+0x6a>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d109      	bne.n	8004e8c <HAL_TIM_OC_Start+0x58>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e008      	b.n	8004e9e <HAL_TIM_OC_Start+0x6a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e05e      	b.n	8004f64 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_OC_Start+0x82>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb4:	e013      	b.n	8004ede <HAL_TIM_OC_Start+0xaa>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_OC_Start+0x92>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec4:	e00b      	b.n	8004ede <HAL_TIM_OC_Start+0xaa>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_OC_Start+0xa2>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed4:	e003      	b.n	8004ede <HAL_TIM_OC_Start+0xaa>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 fa87 	bl	80063fa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1e      	ldr	r2, [pc, #120]	; (8004f6c <HAL_TIM_OC_Start+0x138>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d107      	bne.n	8004f06 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_TIM_OC_Start+0x138>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00e      	beq.n	8004f2e <HAL_TIM_OC_Start+0xfa>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d009      	beq.n	8004f2e <HAL_TIM_OC_Start+0xfa>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <HAL_TIM_OC_Start+0x13c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_TIM_OC_Start+0xfa>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a12      	ldr	r2, [pc, #72]	; (8004f74 <HAL_TIM_OC_Start+0x140>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d010      	beq.n	8004f62 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	e007      	b.n	8004f62 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800

08004f78 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 fa35 	bl	80063fa <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <HAL_TIM_OC_Stop+0xc4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d117      	bne.n	8004fca <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10f      	bne.n	8004fca <HAL_TIM_OC_Stop+0x52>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	f240 4344 	movw	r3, #1092	; 0x444
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d107      	bne.n	8004fca <HAL_TIM_OC_Stop+0x52>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10f      	bne.n	8004ffa <HAL_TIM_OC_Stop+0x82>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6a1a      	ldr	r2, [r3, #32]
 8004fe0:	f240 4344 	movw	r3, #1092	; 0x444
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d107      	bne.n	8004ffa <HAL_TIM_OC_Stop+0x82>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_OC_Stop+0x92>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005008:	e013      	b.n	8005032 <HAL_TIM_OC_Stop+0xba>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d104      	bne.n	800501a <HAL_TIM_OC_Stop+0xa2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005018:	e00b      	b.n	8005032 <HAL_TIM_OC_Stop+0xba>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d104      	bne.n	800502a <HAL_TIM_OC_Stop+0xb2>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005028:	e003      	b.n	8005032 <HAL_TIM_OC_Stop+0xba>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40012c00 	.word	0x40012c00

08005040 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e041      	b.n	80050d6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f839 	bl	80050de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f000 fda0 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <HAL_TIM_IC_Start_IT+0x1a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005106:	b2db      	uxtb	r3, r3
 8005108:	e013      	b.n	8005132 <HAL_TIM_IC_Start_IT+0x42>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d104      	bne.n	800511a <HAL_TIM_IC_Start_IT+0x2a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005116:	b2db      	uxtb	r3, r3
 8005118:	e00b      	b.n	8005132 <HAL_TIM_IC_Start_IT+0x42>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b08      	cmp	r3, #8
 800511e:	d104      	bne.n	800512a <HAL_TIM_IC_Start_IT+0x3a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005126:	b2db      	uxtb	r3, r3
 8005128:	e003      	b.n	8005132 <HAL_TIM_IC_Start_IT+0x42>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005130:	b2db      	uxtb	r3, r3
 8005132:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d104      	bne.n	8005144 <HAL_TIM_IC_Start_IT+0x54>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e013      	b.n	800516c <HAL_TIM_IC_Start_IT+0x7c>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d104      	bne.n	8005154 <HAL_TIM_IC_Start_IT+0x64>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e00b      	b.n	800516c <HAL_TIM_IC_Start_IT+0x7c>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b08      	cmp	r3, #8
 8005158:	d104      	bne.n	8005164 <HAL_TIM_IC_Start_IT+0x74>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005160:	b2db      	uxtb	r3, r3
 8005162:	e003      	b.n	800516c <HAL_TIM_IC_Start_IT+0x7c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800516a:	b2db      	uxtb	r3, r3
 800516c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005174:	7bbb      	ldrb	r3, [r7, #14]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d001      	beq.n	800517e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0b3      	b.n	80052e6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <HAL_TIM_IC_Start_IT+0x9e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800518c:	e013      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0xc6>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b04      	cmp	r3, #4
 8005192:	d104      	bne.n	800519e <HAL_TIM_IC_Start_IT+0xae>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800519c:	e00b      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0xc6>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_IC_Start_IT+0xbe>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ac:	e003      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0xc6>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_IC_Start_IT+0xd6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c4:	e013      	b.n	80051ee <HAL_TIM_IC_Start_IT+0xfe>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_IC_Start_IT+0xe6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d4:	e00b      	b.n	80051ee <HAL_TIM_IC_Start_IT+0xfe>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_IC_Start_IT+0xf6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e4:	e003      	b.n	80051ee <HAL_TIM_IC_Start_IT+0xfe>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	d841      	bhi.n	8005278 <HAL_TIM_IC_Start_IT+0x188>
 80051f4:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <HAL_TIM_IC_Start_IT+0x10c>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	08005231 	.word	0x08005231
 8005200:	08005279 	.word	0x08005279
 8005204:	08005279 	.word	0x08005279
 8005208:	08005279 	.word	0x08005279
 800520c:	08005243 	.word	0x08005243
 8005210:	08005279 	.word	0x08005279
 8005214:	08005279 	.word	0x08005279
 8005218:	08005279 	.word	0x08005279
 800521c:	08005255 	.word	0x08005255
 8005220:	08005279 	.word	0x08005279
 8005224:	08005279 	.word	0x08005279
 8005228:	08005279 	.word	0x08005279
 800522c:	08005267 	.word	0x08005267
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0202 	orr.w	r2, r2, #2
 800523e:	60da      	str	r2, [r3, #12]
      break;
 8005240:	e01b      	b.n	800527a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0204 	orr.w	r2, r2, #4
 8005250:	60da      	str	r2, [r3, #12]
      break;
 8005252:	e012      	b.n	800527a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0208 	orr.w	r2, r2, #8
 8005262:	60da      	str	r2, [r3, #12]
      break;
 8005264:	e009      	b.n	800527a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0210 	orr.w	r2, r2, #16
 8005274:	60da      	str	r2, [r3, #12]
      break;
 8005276:	e000      	b.n	800527a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005278:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2201      	movs	r2, #1
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f001 f8b9 	bl	80063fa <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <HAL_TIM_IC_Start_IT+0x200>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00e      	beq.n	80052b0 <HAL_TIM_IC_Start_IT+0x1c0>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d009      	beq.n	80052b0 <HAL_TIM_IC_Start_IT+0x1c0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <HAL_TIM_IC_Start_IT+0x204>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <HAL_TIM_IC_Start_IT+0x1c0>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <HAL_TIM_IC_Start_IT+0x208>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d111      	bne.n	80052d4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b06      	cmp	r3, #6
 80052c0:	d010      	beq.n	80052e4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d2:	e007      	b.n	80052e4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40012c00 	.word	0x40012c00
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800

080052fc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b0c      	cmp	r3, #12
 800530a:	d841      	bhi.n	8005390 <HAL_TIM_IC_Stop_IT+0x94>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <HAL_TIM_IC_Stop_IT+0x18>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005349 	.word	0x08005349
 8005318:	08005391 	.word	0x08005391
 800531c:	08005391 	.word	0x08005391
 8005320:	08005391 	.word	0x08005391
 8005324:	0800535b 	.word	0x0800535b
 8005328:	08005391 	.word	0x08005391
 800532c:	08005391 	.word	0x08005391
 8005330:	08005391 	.word	0x08005391
 8005334:	0800536d 	.word	0x0800536d
 8005338:	08005391 	.word	0x08005391
 800533c:	08005391 	.word	0x08005391
 8005340:	08005391 	.word	0x08005391
 8005344:	0800537f 	.word	0x0800537f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0202 	bic.w	r2, r2, #2
 8005356:	60da      	str	r2, [r3, #12]
      break;
 8005358:	e01b      	b.n	8005392 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0204 	bic.w	r2, r2, #4
 8005368:	60da      	str	r2, [r3, #12]
      break;
 800536a:	e012      	b.n	8005392 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0208 	bic.w	r2, r2, #8
 800537a:	60da      	str	r2, [r3, #12]
      break;
 800537c:	e009      	b.n	8005392 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0210 	bic.w	r2, r2, #16
 800538c:	60da      	str	r2, [r3, #12]
      break;
 800538e:	e000      	b.n	8005392 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8005390:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f001 f82d 	bl	80063fa <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6a1a      	ldr	r2, [r3, #32]
 80053a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10f      	bne.n	80053d0 <HAL_TIM_IC_Stop_IT+0xd4>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6a1a      	ldr	r2, [r3, #32]
 80053b6:	f240 4344 	movw	r3, #1092	; 0x444
 80053ba:	4013      	ands	r3, r2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d107      	bne.n	80053d0 <HAL_TIM_IC_Stop_IT+0xd4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <HAL_TIM_IC_Stop_IT+0xe4>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053de:	e013      	b.n	8005408 <HAL_TIM_IC_Stop_IT+0x10c>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d104      	bne.n	80053f0 <HAL_TIM_IC_Stop_IT+0xf4>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ee:	e00b      	b.n	8005408 <HAL_TIM_IC_Stop_IT+0x10c>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d104      	bne.n	8005400 <HAL_TIM_IC_Stop_IT+0x104>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fe:	e003      	b.n	8005408 <HAL_TIM_IC_Stop_IT+0x10c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <HAL_TIM_IC_Stop_IT+0x11c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005416:	e013      	b.n	8005440 <HAL_TIM_IC_Stop_IT+0x144>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b04      	cmp	r3, #4
 800541c:	d104      	bne.n	8005428 <HAL_TIM_IC_Stop_IT+0x12c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005426:	e00b      	b.n	8005440 <HAL_TIM_IC_Stop_IT+0x144>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b08      	cmp	r3, #8
 800542c:	d104      	bne.n	8005438 <HAL_TIM_IC_Stop_IT+0x13c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005436:	e003      	b.n	8005440 <HAL_TIM_IC_Stop_IT+0x144>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop

0800544c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e041      	b.n	80054e4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f839 	bl	80054ec <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f000 fb99 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0208 	bic.w	r2, r2, #8
 80054a0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6819      	ldr	r1, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b02      	cmp	r3, #2
 8005512:	d122      	bne.n	800555a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d11b      	bne.n	800555a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0202 	mvn.w	r2, #2
 800552a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7fc ff9d 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 8005546:	e005      	b.n	8005554 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fb20 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fb26 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b04      	cmp	r3, #4
 8005566:	d122      	bne.n	80055ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b04      	cmp	r3, #4
 8005574:	d11b      	bne.n	80055ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f06f 0204 	mvn.w	r2, #4
 800557e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fc ff73 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 800559a:	e005      	b.n	80055a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 faf6 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fafc 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d122      	bne.n	8005602 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d11b      	bne.n	8005602 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f06f 0208 	mvn.w	r2, #8
 80055d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2204      	movs	r2, #4
 80055d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7fc ff49 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 80055ee:	e005      	b.n	80055fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 facc 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fad2 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b10      	cmp	r3, #16
 800560e:	d122      	bne.n	8005656 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b10      	cmp	r3, #16
 800561c:	d11b      	bne.n	8005656 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f06f 0210 	mvn.w	r2, #16
 8005626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2208      	movs	r2, #8
 800562c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7fc ff1f 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 8005642:	e005      	b.n	8005650 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 faa2 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 faa8 	bl	8005ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b01      	cmp	r3, #1
 8005662:	d10e      	bne.n	8005682 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d107      	bne.n	8005682 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0201 	mvn.w	r2, #1
 800567a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa7d 	bl	8005b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568c:	2b80      	cmp	r3, #128	; 0x80
 800568e:	d10e      	bne.n	80056ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d107      	bne.n	80056ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 ff83 	bl	80065b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d10e      	bne.n	80056da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d107      	bne.n	80056da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa6c 	bl	8005bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d10e      	bne.n	8005706 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d107      	bne.n	8005706 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f06f 0220 	mvn.w	r2, #32
 80056fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 ff4e 	bl	80065a2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005726:	2302      	movs	r3, #2
 8005728:	e046      	b.n	80057b8 <HAL_TIM_OC_ConfigChannel+0xa8>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b0c      	cmp	r3, #12
 8005736:	d839      	bhi.n	80057ac <HAL_TIM_OC_ConfigChannel+0x9c>
 8005738:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <HAL_TIM_OC_ConfigChannel+0x30>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005775 	.word	0x08005775
 8005744:	080057ad 	.word	0x080057ad
 8005748:	080057ad 	.word	0x080057ad
 800574c:	080057ad 	.word	0x080057ad
 8005750:	08005783 	.word	0x08005783
 8005754:	080057ad 	.word	0x080057ad
 8005758:	080057ad 	.word	0x080057ad
 800575c:	080057ad 	.word	0x080057ad
 8005760:	08005791 	.word	0x08005791
 8005764:	080057ad 	.word	0x080057ad
 8005768:	080057ad 	.word	0x080057ad
 800576c:	080057ad 	.word	0x080057ad
 8005770:	0800579f 	.word	0x0800579f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fa84 	bl	8005c88 <TIM_OC1_SetConfig>
      break;
 8005780:	e015      	b.n	80057ae <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fae3 	bl	8005d54 <TIM_OC2_SetConfig>
      break;
 800578e:	e00e      	b.n	80057ae <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fb46 	bl	8005e28 <TIM_OC3_SetConfig>
      break;
 800579c:	e007      	b.n	80057ae <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fba9 	bl	8005efc <TIM_OC4_SetConfig>
      break;
 80057aa:	e000      	b.n	80057ae <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80057ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_TIM_IC_ConfigChannel+0x1a>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e082      	b.n	80058e0 <HAL_TIM_IC_ConfigChannel+0x120>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d11b      	bne.n	8005820 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f000 fc5c 	bl	80060b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 020c 	bic.w	r2, r2, #12
 800580a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6999      	ldr	r1, [r3, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	619a      	str	r2, [r3, #24]
 800581e:	e05a      	b.n	80058d6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b04      	cmp	r3, #4
 8005824:	d11c      	bne.n	8005860 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f000 fcc5 	bl	80061c4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005848:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6999      	ldr	r1, [r3, #24]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	021a      	lsls	r2, r3, #8
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	619a      	str	r2, [r3, #24]
 800585e:	e03a      	b.n	80058d6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b08      	cmp	r3, #8
 8005864:	d11b      	bne.n	800589e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6819      	ldr	r1, [r3, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f000 fd10 	bl	800629a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 020c 	bic.w	r2, r2, #12
 8005888:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69d9      	ldr	r1, [r3, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	61da      	str	r2, [r3, #28]
 800589c:	e01b      	b.n	80058d6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6819      	ldr	r1, [r3, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f000 fd2f 	bl	8006310 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69d9      	ldr	r1, [r3, #28]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	021a      	lsls	r2, r3, #8
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIM_ConfigClockSource+0x18>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e0b3      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x180>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800591e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005926:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005938:	d03e      	beq.n	80059b8 <HAL_TIM_ConfigClockSource+0xd0>
 800593a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593e:	f200 8087 	bhi.w	8005a50 <HAL_TIM_ConfigClockSource+0x168>
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005946:	f000 8085 	beq.w	8005a54 <HAL_TIM_ConfigClockSource+0x16c>
 800594a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594e:	d87f      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x168>
 8005950:	2b70      	cmp	r3, #112	; 0x70
 8005952:	d01a      	beq.n	800598a <HAL_TIM_ConfigClockSource+0xa2>
 8005954:	2b70      	cmp	r3, #112	; 0x70
 8005956:	d87b      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x168>
 8005958:	2b60      	cmp	r3, #96	; 0x60
 800595a:	d050      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x116>
 800595c:	2b60      	cmp	r3, #96	; 0x60
 800595e:	d877      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x168>
 8005960:	2b50      	cmp	r3, #80	; 0x50
 8005962:	d03c      	beq.n	80059de <HAL_TIM_ConfigClockSource+0xf6>
 8005964:	2b50      	cmp	r3, #80	; 0x50
 8005966:	d873      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x168>
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d058      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x136>
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d86f      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x168>
 8005970:	2b30      	cmp	r3, #48	; 0x30
 8005972:	d064      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x156>
 8005974:	2b30      	cmp	r3, #48	; 0x30
 8005976:	d86b      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x168>
 8005978:	2b20      	cmp	r3, #32
 800597a:	d060      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x156>
 800597c:	2b20      	cmp	r3, #32
 800597e:	d867      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x168>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d05c      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x156>
 8005984:	2b10      	cmp	r3, #16
 8005986:	d05a      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005988:	e062      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6899      	ldr	r1, [r3, #8]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f000 fd0f 	bl	80063bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	609a      	str	r2, [r3, #8]
      break;
 80059b6:	e04e      	b.n	8005a56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	6899      	ldr	r1, [r3, #8]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f000 fcf8 	bl	80063bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059da:	609a      	str	r2, [r3, #8]
      break;
 80059dc:	e03b      	b.n	8005a56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6859      	ldr	r1, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f000 fbbc 	bl	8006168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2150      	movs	r1, #80	; 0x50
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fcc6 	bl	8006388 <TIM_ITRx_SetConfig>
      break;
 80059fc:	e02b      	b.n	8005a56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6859      	ldr	r1, [r3, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 fc16 	bl	800623c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2160      	movs	r1, #96	; 0x60
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fcb6 	bl	8006388 <TIM_ITRx_SetConfig>
      break;
 8005a1c:	e01b      	b.n	8005a56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 fb9c 	bl	8006168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2140      	movs	r1, #64	; 0x40
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fca6 	bl	8006388 <TIM_ITRx_SetConfig>
      break;
 8005a3c:	e00b      	b.n	8005a56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f000 fc9d 	bl	8006388 <TIM_ITRx_SetConfig>
        break;
 8005a4e:	e002      	b.n	8005a56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e031      	b.n	8005aec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fa7c 	bl	8005f98 <TIM_SlaveTimer_SetConfig>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e018      	b.n	8005aec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ad8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	d831      	bhi.n	8005b6c <HAL_TIM_ReadCapturedValue+0x78>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005b6d 	.word	0x08005b6d
 8005b18:	08005b6d 	.word	0x08005b6d
 8005b1c:	08005b6d 	.word	0x08005b6d
 8005b20:	08005b4f 	.word	0x08005b4f
 8005b24:	08005b6d 	.word	0x08005b6d
 8005b28:	08005b6d 	.word	0x08005b6d
 8005b2c:	08005b6d 	.word	0x08005b6d
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b6d 	.word	0x08005b6d
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005b6d 	.word	0x08005b6d
 8005b40:	08005b63 	.word	0x08005b63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4a:	60fb      	str	r3, [r7, #12]

      break;
 8005b4c:	e00f      	b.n	8005b6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	60fb      	str	r3, [r7, #12]

      break;
 8005b56:	e00a      	b.n	8005b6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	60fb      	str	r3, [r7, #12]

      break;
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	60fb      	str	r3, [r7, #12]

      break;
 8005b6a:	e000      	b.n	8005b6e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b6c:	bf00      	nop
  }

  return tmpreg;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop

08005b7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr

08005b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a29      	ldr	r2, [pc, #164]	; (8005c7c <TIM_Base_SetConfig+0xb8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <TIM_Base_SetConfig+0x30>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be2:	d007      	beq.n	8005bf4 <TIM_Base_SetConfig+0x30>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a26      	ldr	r2, [pc, #152]	; (8005c80 <TIM_Base_SetConfig+0xbc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_Base_SetConfig+0x30>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a25      	ldr	r2, [pc, #148]	; (8005c84 <TIM_Base_SetConfig+0xc0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d108      	bne.n	8005c06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <TIM_Base_SetConfig+0xb8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_Base_SetConfig+0x62>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0x62>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <TIM_Base_SetConfig+0xbc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0x62>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <TIM_Base_SetConfig+0xc0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a07      	ldr	r2, [pc, #28]	; (8005c7c <TIM_Base_SetConfig+0xb8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d103      	bne.n	8005c6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	615a      	str	r2, [r3, #20]
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40000800 	.word	0x40000800

08005c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f023 0201 	bic.w	r2, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 0302 	bic.w	r3, r3, #2
 8005cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <TIM_OC1_SetConfig+0xc8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d10c      	bne.n	8005cfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0308 	bic.w	r3, r3, #8
 8005cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 0304 	bic.w	r3, r3, #4
 8005cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a13      	ldr	r2, [pc, #76]	; (8005d50 <TIM_OC1_SetConfig+0xc8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d111      	bne.n	8005d2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	621a      	str	r2, [r3, #32]
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40012c00 	.word	0x40012c00

08005d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0210 	bic.w	r2, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f023 0320 	bic.w	r3, r3, #32
 8005d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <TIM_OC2_SetConfig+0xd0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d10d      	bne.n	8005dd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a14      	ldr	r2, [pc, #80]	; (8005e24 <TIM_OC2_SetConfig+0xd0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d113      	bne.n	8005e00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr
 8005e24:	40012c00 	.word	0x40012c00

08005e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1d      	ldr	r2, [pc, #116]	; (8005ef8 <TIM_OC3_SetConfig+0xd0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10d      	bne.n	8005ea2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a14      	ldr	r2, [pc, #80]	; (8005ef8 <TIM_OC3_SetConfig+0xd0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d113      	bne.n	8005ed2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	621a      	str	r2, [r3, #32]
}
 8005eec:	bf00      	nop
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40012c00 	.word	0x40012c00

08005efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	031b      	lsls	r3, r3, #12
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a0f      	ldr	r2, [pc, #60]	; (8005f94 <TIM_OC4_SetConfig+0x98>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d109      	bne.n	8005f70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	019b      	lsls	r3, r3, #6
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	40012c00 	.word	0x40012c00

08005f98 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f023 0307 	bic.w	r3, r3, #7
 8005fc2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b70      	cmp	r3, #112	; 0x70
 8005fdc:	d01a      	beq.n	8006014 <TIM_SlaveTimer_SetConfig+0x7c>
 8005fde:	2b70      	cmp	r3, #112	; 0x70
 8005fe0:	d860      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005fe2:	2b60      	cmp	r3, #96	; 0x60
 8005fe4:	d054      	beq.n	8006090 <TIM_SlaveTimer_SetConfig+0xf8>
 8005fe6:	2b60      	cmp	r3, #96	; 0x60
 8005fe8:	d85c      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005fea:	2b50      	cmp	r3, #80	; 0x50
 8005fec:	d046      	beq.n	800607c <TIM_SlaveTimer_SetConfig+0xe4>
 8005fee:	2b50      	cmp	r3, #80	; 0x50
 8005ff0:	d858      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d019      	beq.n	800602a <TIM_SlaveTimer_SetConfig+0x92>
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d854      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ffa:	2b30      	cmp	r3, #48	; 0x30
 8005ffc:	d054      	beq.n	80060a8 <TIM_SlaveTimer_SetConfig+0x110>
 8005ffe:	2b30      	cmp	r3, #48	; 0x30
 8006000:	d850      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x10c>
 8006002:	2b20      	cmp	r3, #32
 8006004:	d050      	beq.n	80060a8 <TIM_SlaveTimer_SetConfig+0x110>
 8006006:	2b20      	cmp	r3, #32
 8006008:	d84c      	bhi.n	80060a4 <TIM_SlaveTimer_SetConfig+0x10c>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d04c      	beq.n	80060a8 <TIM_SlaveTimer_SetConfig+0x110>
 800600e:	2b10      	cmp	r3, #16
 8006010:	d04a      	beq.n	80060a8 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006012:	e047      	b.n	80060a4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68d9      	ldr	r1, [r3, #12]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f000 f9ca 	bl	80063bc <TIM_ETR_SetConfig>
      break;
 8006028:	e03f      	b.n	80060aa <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b05      	cmp	r3, #5
 8006030:	d101      	bne.n	8006036 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e03a      	b.n	80060ac <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6a1a      	ldr	r2, [r3, #32]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	621a      	str	r2, [r3, #32]
      break;
 800607a:	e016      	b.n	80060aa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	6899      	ldr	r1, [r3, #8]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	461a      	mov	r2, r3
 800608a:	f000 f86d 	bl	8006168 <TIM_TI1_ConfigInputStage>
      break;
 800608e:	e00c      	b.n	80060aa <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6899      	ldr	r1, [r3, #8]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	461a      	mov	r2, r3
 800609e:	f000 f8cd 	bl	800623c <TIM_TI2_ConfigInputStage>
      break;
 80060a2:	e002      	b.n	80060aa <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80060a8:	bf00      	nop
  }
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a1f      	ldr	r2, [pc, #124]	; (800615c <TIM_TI1_SetConfig+0xa8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00b      	beq.n	80060fa <TIM_TI1_SetConfig+0x46>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d007      	beq.n	80060fa <TIM_TI1_SetConfig+0x46>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <TIM_TI1_SetConfig+0xac>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_TI1_SetConfig+0x46>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a1b      	ldr	r2, [pc, #108]	; (8006164 <TIM_TI1_SetConfig+0xb0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d101      	bne.n	80060fe <TIM_TI1_SetConfig+0x4a>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <TIM_TI1_SetConfig+0x4c>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0303 	bic.w	r3, r3, #3
 800610a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e003      	b.n	800611e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	b2db      	uxtb	r3, r3
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f023 030a 	bic.w	r3, r3, #10
 8006138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f003 030a 	and.w	r3, r3, #10
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr
 800615c:	40012c00 	.word	0x40012c00
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800

08006168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f023 0201 	bic.w	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 030a 	bic.w	r3, r3, #10
 80061a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f023 0210 	bic.w	r2, r3, #16
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006202:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	031b      	lsls	r3, r3, #12
 8006208:	b29b      	uxth	r3, r3
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006216:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	621a      	str	r2, [r3, #32]
}
 8006232:	bf00      	nop
 8006234:	371c      	adds	r7, #28
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f023 0210 	bic.w	r2, r3, #16
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006266:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	031b      	lsls	r3, r3, #12
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	621a      	str	r2, [r3, #32]
}
 8006290:	bf00      	nop
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr

0800629a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0303 	bic.w	r3, r3, #3
 80062c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	621a      	str	r2, [r3, #32]
}
 8006306:	bf00      	nop
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800634e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	031b      	lsls	r3, r3, #12
 8006354:	b29b      	uxth	r3, r3
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006362:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	031b      	lsls	r3, r3, #12
 8006368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	bc80      	pop	{r7}
 8006386:	4770      	bx	lr

08006388 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f043 0307 	orr.w	r3, r3, #7
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	609a      	str	r2, [r3, #8]
}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	021a      	lsls	r2, r3, #8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	431a      	orrs	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr

080063fa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b087      	sub	sp, #28
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	2201      	movs	r2, #1
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a1a      	ldr	r2, [r3, #32]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	43db      	mvns	r3, r3
 800641c:	401a      	ands	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1a      	ldr	r2, [r3, #32]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	fa01 f303 	lsl.w	r3, r1, r3
 8006432:	431a      	orrs	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	621a      	str	r2, [r3, #32]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr
	...

08006444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006458:	2302      	movs	r3, #2
 800645a:	e046      	b.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a8:	d009      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a12      	ldr	r2, [pc, #72]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a10      	ldr	r2, [pc, #64]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d10c      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800

08006500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006518:	2302      	movs	r3, #2
 800651a:	e03d      	b.n	8006598 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr

080065a2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr

080065c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e03f      	b.n	8006658 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fc f9b7 	bl	8002960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2224      	movs	r2, #36	; 0x24
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006608:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f9a6 	bl	800695c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800661e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695a      	ldr	r2, [r3, #20]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800662e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800663e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	; 0x28
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	4613      	mov	r3, r2
 800666e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b20      	cmp	r3, #32
 800667e:	d17c      	bne.n	800677a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_UART_Transmit+0x2c>
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e075      	b.n	800677c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_UART_Transmit+0x3e>
 800669a:	2302      	movs	r3, #2
 800669c:	e06e      	b.n	800677c <HAL_UART_Transmit+0x11c>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2221      	movs	r2, #33	; 0x21
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066b4:	f7fc ff92 	bl	80035dc <HAL_GetTick>
 80066b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	88fa      	ldrh	r2, [r7, #6]
 80066be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ce:	d108      	bne.n	80066e2 <HAL_UART_Transmit+0x82>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d104      	bne.n	80066e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e003      	b.n	80066ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066f2:	e02a      	b.n	800674a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2200      	movs	r2, #0
 80066fc:	2180      	movs	r1, #128	; 0x80
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f8e2 	bl	80068c8 <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e036      	b.n	800677c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006722:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	3302      	adds	r3, #2
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	e007      	b.n	800673c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	781a      	ldrb	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3301      	adds	r3, #1
 800673a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1cf      	bne.n	80066f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2200      	movs	r2, #0
 800675c:	2140      	movs	r1, #64	; 0x40
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f8b2 	bl	80068c8 <UART_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e006      	b.n	800677c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	e000      	b.n	800677c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800677a:	2302      	movs	r3, #2
  }
}
 800677c:	4618      	mov	r0, r3
 800677e:	3720      	adds	r7, #32
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af02      	add	r7, sp, #8
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	4613      	mov	r3, r2
 8006792:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	f040 808c 	bne.w	80068be <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_UART_Receive+0x2e>
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e084      	b.n	80068c0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_UART_Receive+0x40>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e07d      	b.n	80068c0 <HAL_UART_Receive+0x13c>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2222      	movs	r2, #34	; 0x22
 80067d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067e0:	f7fc fefc 	bl	80035dc <HAL_GetTick>
 80067e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	88fa      	ldrh	r2, [r7, #6]
 80067ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	d108      	bne.n	800680e <HAL_UART_Receive+0x8a>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	e003      	b.n	8006816 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800681e:	e043      	b.n	80068a8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2200      	movs	r2, #0
 8006828:	2120      	movs	r1, #32
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 f84c 	bl	80068c8 <UART_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e042      	b.n	80068c0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10c      	bne.n	800685a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684c:	b29a      	uxth	r2, r3
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	3302      	adds	r3, #2
 8006856:	61bb      	str	r3, [r7, #24]
 8006858:	e01f      	b.n	800689a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006862:	d007      	beq.n	8006874 <HAL_UART_Receive+0xf0>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <HAL_UART_Receive+0xfe>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d106      	bne.n	8006882 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e008      	b.n	8006894 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688e:	b2da      	uxtb	r2, r3
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	3301      	adds	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1b6      	bne.n	8006820 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e000      	b.n	80068c0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80068be:	2302      	movs	r3, #2
  }
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d8:	e02c      	b.n	8006934 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e0:	d028      	beq.n	8006934 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068e8:	f7fc fe78 	bl	80035dc <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d21d      	bcs.n	8006934 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006906:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e00f      	b.n	8006954 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	bf0c      	ite	eq
 8006944:	2301      	moveq	r3, #1
 8006946:	2300      	movne	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	429a      	cmp	r2, r3
 8006950:	d0c3      	beq.n	80068da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006996:	f023 030c 	bic.w	r3, r3, #12
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	430b      	orrs	r3, r1
 80069a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a2c      	ldr	r2, [pc, #176]	; (8006a70 <UART_SetConfig+0x114>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d103      	bne.n	80069cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069c4:	f7fe f858 	bl	8004a78 <HAL_RCC_GetPCLK2Freq>
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	e002      	b.n	80069d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069cc:	f7fe f840 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 80069d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009a      	lsls	r2, r3, #2
 80069dc:	441a      	add	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e8:	4a22      	ldr	r2, [pc, #136]	; (8006a74 <UART_SetConfig+0x118>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	0119      	lsls	r1, r3, #4
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009a      	lsls	r2, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <UART_SetConfig+0x118>)
 8006a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	2064      	movs	r0, #100	; 0x64
 8006a12:	fb00 f303 	mul.w	r3, r0, r3
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	3332      	adds	r3, #50	; 0x32
 8006a1c:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <UART_SetConfig+0x118>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a28:	4419      	add	r1, r3
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	009a      	lsls	r2, r3, #2
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <UART_SetConfig+0x118>)
 8006a42:	fba3 0302 	umull	r0, r3, r3, r2
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	2064      	movs	r0, #100	; 0x64
 8006a4a:	fb00 f303 	mul.w	r3, r0, r3
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	3332      	adds	r3, #50	; 0x32
 8006a54:	4a07      	ldr	r2, [pc, #28]	; (8006a74 <UART_SetConfig+0x118>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	f003 020f 	and.w	r2, r3, #15
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	440a      	add	r2, r1
 8006a66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40013800 	.word	0x40013800
 8006a74:	51eb851f 	.word	0x51eb851f

08006a78 <__errno>:
 8006a78:	4b01      	ldr	r3, [pc, #4]	; (8006a80 <__errno+0x8>)
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	2000000c 	.word	0x2000000c

08006a84 <__libc_init_array>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	2600      	movs	r6, #0
 8006a88:	4d0c      	ldr	r5, [pc, #48]	; (8006abc <__libc_init_array+0x38>)
 8006a8a:	4c0d      	ldr	r4, [pc, #52]	; (8006ac0 <__libc_init_array+0x3c>)
 8006a8c:	1b64      	subs	r4, r4, r5
 8006a8e:	10a4      	asrs	r4, r4, #2
 8006a90:	42a6      	cmp	r6, r4
 8006a92:	d109      	bne.n	8006aa8 <__libc_init_array+0x24>
 8006a94:	f004 f8ee 	bl	800ac74 <_init>
 8006a98:	2600      	movs	r6, #0
 8006a9a:	4d0a      	ldr	r5, [pc, #40]	; (8006ac4 <__libc_init_array+0x40>)
 8006a9c:	4c0a      	ldr	r4, [pc, #40]	; (8006ac8 <__libc_init_array+0x44>)
 8006a9e:	1b64      	subs	r4, r4, r5
 8006aa0:	10a4      	asrs	r4, r4, #2
 8006aa2:	42a6      	cmp	r6, r4
 8006aa4:	d105      	bne.n	8006ab2 <__libc_init_array+0x2e>
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aac:	4798      	blx	r3
 8006aae:	3601      	adds	r6, #1
 8006ab0:	e7ee      	b.n	8006a90 <__libc_init_array+0xc>
 8006ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab6:	4798      	blx	r3
 8006ab8:	3601      	adds	r6, #1
 8006aba:	e7f2      	b.n	8006aa2 <__libc_init_array+0x1e>
 8006abc:	0800b328 	.word	0x0800b328
 8006ac0:	0800b328 	.word	0x0800b328
 8006ac4:	0800b328 	.word	0x0800b328
 8006ac8:	0800b32c 	.word	0x0800b32c

08006acc <memset>:
 8006acc:	4603      	mov	r3, r0
 8006ace:	4402      	add	r2, r0
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d100      	bne.n	8006ad6 <memset+0xa>
 8006ad4:	4770      	bx	lr
 8006ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8006ada:	e7f9      	b.n	8006ad0 <memset+0x4>

08006adc <__cvt>:
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae2:	461f      	mov	r7, r3
 8006ae4:	bfbb      	ittet	lt
 8006ae6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006aea:	461f      	movlt	r7, r3
 8006aec:	2300      	movge	r3, #0
 8006aee:	232d      	movlt	r3, #45	; 0x2d
 8006af0:	b088      	sub	sp, #32
 8006af2:	4614      	mov	r4, r2
 8006af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006af6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006af8:	7013      	strb	r3, [r2, #0]
 8006afa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006afc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006b00:	f023 0820 	bic.w	r8, r3, #32
 8006b04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b08:	d005      	beq.n	8006b16 <__cvt+0x3a>
 8006b0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b0e:	d100      	bne.n	8006b12 <__cvt+0x36>
 8006b10:	3501      	adds	r5, #1
 8006b12:	2302      	movs	r3, #2
 8006b14:	e000      	b.n	8006b18 <__cvt+0x3c>
 8006b16:	2303      	movs	r3, #3
 8006b18:	aa07      	add	r2, sp, #28
 8006b1a:	9204      	str	r2, [sp, #16]
 8006b1c:	aa06      	add	r2, sp, #24
 8006b1e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b22:	e9cd 3500 	strd	r3, r5, [sp]
 8006b26:	4622      	mov	r2, r4
 8006b28:	463b      	mov	r3, r7
 8006b2a:	f000 fce5 	bl	80074f8 <_dtoa_r>
 8006b2e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b32:	4606      	mov	r6, r0
 8006b34:	d102      	bne.n	8006b3c <__cvt+0x60>
 8006b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b38:	07db      	lsls	r3, r3, #31
 8006b3a:	d522      	bpl.n	8006b82 <__cvt+0xa6>
 8006b3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b40:	eb06 0905 	add.w	r9, r6, r5
 8006b44:	d110      	bne.n	8006b68 <__cvt+0x8c>
 8006b46:	7833      	ldrb	r3, [r6, #0]
 8006b48:	2b30      	cmp	r3, #48	; 0x30
 8006b4a:	d10a      	bne.n	8006b62 <__cvt+0x86>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2300      	movs	r3, #0
 8006b50:	4620      	mov	r0, r4
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 ff28 	bl	80009a8 <__aeabi_dcmpeq>
 8006b58:	b918      	cbnz	r0, 8006b62 <__cvt+0x86>
 8006b5a:	f1c5 0501 	rsb	r5, r5, #1
 8006b5e:	f8ca 5000 	str.w	r5, [sl]
 8006b62:	f8da 3000 	ldr.w	r3, [sl]
 8006b66:	4499      	add	r9, r3
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 ff1a 	bl	80009a8 <__aeabi_dcmpeq>
 8006b74:	b108      	cbz	r0, 8006b7a <__cvt+0x9e>
 8006b76:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b7a:	2230      	movs	r2, #48	; 0x30
 8006b7c:	9b07      	ldr	r3, [sp, #28]
 8006b7e:	454b      	cmp	r3, r9
 8006b80:	d307      	bcc.n	8006b92 <__cvt+0xb6>
 8006b82:	4630      	mov	r0, r6
 8006b84:	9b07      	ldr	r3, [sp, #28]
 8006b86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b88:	1b9b      	subs	r3, r3, r6
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	b008      	add	sp, #32
 8006b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b92:	1c59      	adds	r1, r3, #1
 8006b94:	9107      	str	r1, [sp, #28]
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e7f0      	b.n	8006b7c <__cvt+0xa0>

08006b9a <__exponent>:
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b9e:	2900      	cmp	r1, #0
 8006ba0:	f803 2b02 	strb.w	r2, [r3], #2
 8006ba4:	bfb6      	itet	lt
 8006ba6:	222d      	movlt	r2, #45	; 0x2d
 8006ba8:	222b      	movge	r2, #43	; 0x2b
 8006baa:	4249      	neglt	r1, r1
 8006bac:	2909      	cmp	r1, #9
 8006bae:	7042      	strb	r2, [r0, #1]
 8006bb0:	dd2b      	ble.n	8006c0a <__exponent+0x70>
 8006bb2:	f10d 0407 	add.w	r4, sp, #7
 8006bb6:	46a4      	mov	ip, r4
 8006bb8:	270a      	movs	r7, #10
 8006bba:	fb91 f6f7 	sdiv	r6, r1, r7
 8006bbe:	460a      	mov	r2, r1
 8006bc0:	46a6      	mov	lr, r4
 8006bc2:	fb07 1516 	mls	r5, r7, r6, r1
 8006bc6:	2a63      	cmp	r2, #99	; 0x63
 8006bc8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006bcc:	4631      	mov	r1, r6
 8006bce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006bd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006bd6:	dcf0      	bgt.n	8006bba <__exponent+0x20>
 8006bd8:	3130      	adds	r1, #48	; 0x30
 8006bda:	f1ae 0502 	sub.w	r5, lr, #2
 8006bde:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006be2:	4629      	mov	r1, r5
 8006be4:	1c44      	adds	r4, r0, #1
 8006be6:	4561      	cmp	r1, ip
 8006be8:	d30a      	bcc.n	8006c00 <__exponent+0x66>
 8006bea:	f10d 0209 	add.w	r2, sp, #9
 8006bee:	eba2 020e 	sub.w	r2, r2, lr
 8006bf2:	4565      	cmp	r5, ip
 8006bf4:	bf88      	it	hi
 8006bf6:	2200      	movhi	r2, #0
 8006bf8:	4413      	add	r3, r2
 8006bfa:	1a18      	subs	r0, r3, r0
 8006bfc:	b003      	add	sp, #12
 8006bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c04:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c08:	e7ed      	b.n	8006be6 <__exponent+0x4c>
 8006c0a:	2330      	movs	r3, #48	; 0x30
 8006c0c:	3130      	adds	r1, #48	; 0x30
 8006c0e:	7083      	strb	r3, [r0, #2]
 8006c10:	70c1      	strb	r1, [r0, #3]
 8006c12:	1d03      	adds	r3, r0, #4
 8006c14:	e7f1      	b.n	8006bfa <__exponent+0x60>
	...

08006c18 <_printf_float>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	b091      	sub	sp, #68	; 0x44
 8006c1e:	460c      	mov	r4, r1
 8006c20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006c24:	4616      	mov	r6, r2
 8006c26:	461f      	mov	r7, r3
 8006c28:	4605      	mov	r5, r0
 8006c2a:	f001 fa53 	bl	80080d4 <_localeconv_r>
 8006c2e:	6803      	ldr	r3, [r0, #0]
 8006c30:	4618      	mov	r0, r3
 8006c32:	9309      	str	r3, [sp, #36]	; 0x24
 8006c34:	f7f9 fa8c 	bl	8000150 <strlen>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8006c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c40:	900a      	str	r0, [sp, #40]	; 0x28
 8006c42:	3307      	adds	r3, #7
 8006c44:	f023 0307 	bic.w	r3, r3, #7
 8006c48:	f103 0208 	add.w	r2, r3, #8
 8006c4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006c50:	f8d4 b000 	ldr.w	fp, [r4]
 8006c54:	f8c8 2000 	str.w	r2, [r8]
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c60:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006c64:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c6e:	4640      	mov	r0, r8
 8006c70:	4b9c      	ldr	r3, [pc, #624]	; (8006ee4 <_printf_float+0x2cc>)
 8006c72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c74:	f7f9 feca 	bl	8000a0c <__aeabi_dcmpun>
 8006c78:	bb70      	cbnz	r0, 8006cd8 <_printf_float+0xc0>
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4b98      	ldr	r3, [pc, #608]	; (8006ee4 <_printf_float+0x2cc>)
 8006c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c84:	f7f9 fea4 	bl	80009d0 <__aeabi_dcmple>
 8006c88:	bb30      	cbnz	r0, 8006cd8 <_printf_float+0xc0>
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4640      	mov	r0, r8
 8006c90:	4651      	mov	r1, sl
 8006c92:	f7f9 fe93 	bl	80009bc <__aeabi_dcmplt>
 8006c96:	b110      	cbz	r0, 8006c9e <_printf_float+0x86>
 8006c98:	232d      	movs	r3, #45	; 0x2d
 8006c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c9e:	4b92      	ldr	r3, [pc, #584]	; (8006ee8 <_printf_float+0x2d0>)
 8006ca0:	4892      	ldr	r0, [pc, #584]	; (8006eec <_printf_float+0x2d4>)
 8006ca2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006ca6:	bf94      	ite	ls
 8006ca8:	4698      	movls	r8, r3
 8006caa:	4680      	movhi	r8, r0
 8006cac:	2303      	movs	r3, #3
 8006cae:	f04f 0a00 	mov.w	sl, #0
 8006cb2:	6123      	str	r3, [r4, #16]
 8006cb4:	f02b 0304 	bic.w	r3, fp, #4
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	4633      	mov	r3, r6
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	9700      	str	r7, [sp, #0]
 8006cc2:	aa0f      	add	r2, sp, #60	; 0x3c
 8006cc4:	f000 f9d4 	bl	8007070 <_printf_common>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	f040 8090 	bne.w	8006dee <_printf_float+0x1d6>
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd2:	b011      	add	sp, #68	; 0x44
 8006cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd8:	4642      	mov	r2, r8
 8006cda:	4653      	mov	r3, sl
 8006cdc:	4640      	mov	r0, r8
 8006cde:	4651      	mov	r1, sl
 8006ce0:	f7f9 fe94 	bl	8000a0c <__aeabi_dcmpun>
 8006ce4:	b148      	cbz	r0, 8006cfa <_printf_float+0xe2>
 8006ce6:	f1ba 0f00 	cmp.w	sl, #0
 8006cea:	bfb8      	it	lt
 8006cec:	232d      	movlt	r3, #45	; 0x2d
 8006cee:	4880      	ldr	r0, [pc, #512]	; (8006ef0 <_printf_float+0x2d8>)
 8006cf0:	bfb8      	it	lt
 8006cf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cf6:	4b7f      	ldr	r3, [pc, #508]	; (8006ef4 <_printf_float+0x2dc>)
 8006cf8:	e7d3      	b.n	8006ca2 <_printf_float+0x8a>
 8006cfa:	6863      	ldr	r3, [r4, #4]
 8006cfc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	d142      	bne.n	8006d8a <_printf_float+0x172>
 8006d04:	2306      	movs	r3, #6
 8006d06:	6063      	str	r3, [r4, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	9206      	str	r2, [sp, #24]
 8006d0c:	aa0e      	add	r2, sp, #56	; 0x38
 8006d0e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006d12:	aa0d      	add	r2, sp, #52	; 0x34
 8006d14:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006d18:	9203      	str	r2, [sp, #12]
 8006d1a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006d1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d22:	6023      	str	r3, [r4, #0]
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	4642      	mov	r2, r8
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	4653      	mov	r3, sl
 8006d2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006d30:	f7ff fed4 	bl	8006adc <__cvt>
 8006d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d36:	4680      	mov	r8, r0
 8006d38:	2947      	cmp	r1, #71	; 0x47
 8006d3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d3c:	d108      	bne.n	8006d50 <_printf_float+0x138>
 8006d3e:	1cc8      	adds	r0, r1, #3
 8006d40:	db02      	blt.n	8006d48 <_printf_float+0x130>
 8006d42:	6863      	ldr	r3, [r4, #4]
 8006d44:	4299      	cmp	r1, r3
 8006d46:	dd40      	ble.n	8006dca <_printf_float+0x1b2>
 8006d48:	f1a9 0902 	sub.w	r9, r9, #2
 8006d4c:	fa5f f989 	uxtb.w	r9, r9
 8006d50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d54:	d81f      	bhi.n	8006d96 <_printf_float+0x17e>
 8006d56:	464a      	mov	r2, r9
 8006d58:	3901      	subs	r1, #1
 8006d5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d5e:	910d      	str	r1, [sp, #52]	; 0x34
 8006d60:	f7ff ff1b 	bl	8006b9a <__exponent>
 8006d64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d66:	4682      	mov	sl, r0
 8006d68:	1813      	adds	r3, r2, r0
 8006d6a:	2a01      	cmp	r2, #1
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	dc02      	bgt.n	8006d76 <_printf_float+0x15e>
 8006d70:	6822      	ldr	r2, [r4, #0]
 8006d72:	07d2      	lsls	r2, r2, #31
 8006d74:	d501      	bpl.n	8006d7a <_printf_float+0x162>
 8006d76:	3301      	adds	r3, #1
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d09b      	beq.n	8006cba <_printf_float+0xa2>
 8006d82:	232d      	movs	r3, #45	; 0x2d
 8006d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d88:	e797      	b.n	8006cba <_printf_float+0xa2>
 8006d8a:	2947      	cmp	r1, #71	; 0x47
 8006d8c:	d1bc      	bne.n	8006d08 <_printf_float+0xf0>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1ba      	bne.n	8006d08 <_printf_float+0xf0>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e7b7      	b.n	8006d06 <_printf_float+0xee>
 8006d96:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d9a:	d118      	bne.n	8006dce <_printf_float+0x1b6>
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	6863      	ldr	r3, [r4, #4]
 8006da0:	dd0b      	ble.n	8006dba <_printf_float+0x1a2>
 8006da2:	6121      	str	r1, [r4, #16]
 8006da4:	b913      	cbnz	r3, 8006dac <_printf_float+0x194>
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	07d0      	lsls	r0, r2, #31
 8006daa:	d502      	bpl.n	8006db2 <_printf_float+0x19a>
 8006dac:	3301      	adds	r3, #1
 8006dae:	440b      	add	r3, r1
 8006db0:	6123      	str	r3, [r4, #16]
 8006db2:	f04f 0a00 	mov.w	sl, #0
 8006db6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006db8:	e7df      	b.n	8006d7a <_printf_float+0x162>
 8006dba:	b913      	cbnz	r3, 8006dc2 <_printf_float+0x1aa>
 8006dbc:	6822      	ldr	r2, [r4, #0]
 8006dbe:	07d2      	lsls	r2, r2, #31
 8006dc0:	d501      	bpl.n	8006dc6 <_printf_float+0x1ae>
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	e7f4      	b.n	8006db0 <_printf_float+0x198>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e7f2      	b.n	8006db0 <_printf_float+0x198>
 8006dca:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	db05      	blt.n	8006de0 <_printf_float+0x1c8>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	6121      	str	r1, [r4, #16]
 8006dd8:	07d8      	lsls	r0, r3, #31
 8006dda:	d5ea      	bpl.n	8006db2 <_printf_float+0x19a>
 8006ddc:	1c4b      	adds	r3, r1, #1
 8006dde:	e7e7      	b.n	8006db0 <_printf_float+0x198>
 8006de0:	2900      	cmp	r1, #0
 8006de2:	bfcc      	ite	gt
 8006de4:	2201      	movgt	r2, #1
 8006de6:	f1c1 0202 	rsble	r2, r1, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	e7e0      	b.n	8006db0 <_printf_float+0x198>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	055a      	lsls	r2, r3, #21
 8006df2:	d407      	bmi.n	8006e04 <_printf_float+0x1ec>
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	4642      	mov	r2, r8
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	47b8      	blx	r7
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d12b      	bne.n	8006e5a <_printf_float+0x242>
 8006e02:	e764      	b.n	8006cce <_printf_float+0xb6>
 8006e04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e08:	f240 80dd 	bls.w	8006fc6 <_printf_float+0x3ae>
 8006e0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e10:	2200      	movs	r2, #0
 8006e12:	2300      	movs	r3, #0
 8006e14:	f7f9 fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d033      	beq.n	8006e84 <_printf_float+0x26c>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4628      	mov	r0, r5
 8006e22:	4a35      	ldr	r2, [pc, #212]	; (8006ef8 <_printf_float+0x2e0>)
 8006e24:	47b8      	blx	r7
 8006e26:	3001      	adds	r0, #1
 8006e28:	f43f af51 	beq.w	8006cce <_printf_float+0xb6>
 8006e2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e30:	429a      	cmp	r2, r3
 8006e32:	db02      	blt.n	8006e3a <_printf_float+0x222>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	07d8      	lsls	r0, r3, #31
 8006e38:	d50f      	bpl.n	8006e5a <_printf_float+0x242>
 8006e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	f43f af42 	beq.w	8006cce <_printf_float+0xb6>
 8006e4a:	f04f 0800 	mov.w	r8, #0
 8006e4e:	f104 091a 	add.w	r9, r4, #26
 8006e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e54:	3b01      	subs	r3, #1
 8006e56:	4543      	cmp	r3, r8
 8006e58:	dc09      	bgt.n	8006e6e <_printf_float+0x256>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	079b      	lsls	r3, r3, #30
 8006e5e:	f100 8102 	bmi.w	8007066 <_printf_float+0x44e>
 8006e62:	68e0      	ldr	r0, [r4, #12]
 8006e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e66:	4298      	cmp	r0, r3
 8006e68:	bfb8      	it	lt
 8006e6a:	4618      	movlt	r0, r3
 8006e6c:	e731      	b.n	8006cd2 <_printf_float+0xba>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	464a      	mov	r2, r9
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	f43f af28 	beq.w	8006cce <_printf_float+0xb6>
 8006e7e:	f108 0801 	add.w	r8, r8, #1
 8006e82:	e7e6      	b.n	8006e52 <_printf_float+0x23a>
 8006e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	dc38      	bgt.n	8006efc <_printf_float+0x2e4>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	4628      	mov	r0, r5
 8006e90:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <_printf_float+0x2e0>)
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f af1a 	beq.w	8006cce <_printf_float+0xb6>
 8006e9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	d102      	bne.n	8006ea8 <_printf_float+0x290>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	07d9      	lsls	r1, r3, #31
 8006ea6:	d5d8      	bpl.n	8006e5a <_printf_float+0x242>
 8006ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eac:	4631      	mov	r1, r6
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b8      	blx	r7
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	f43f af0b 	beq.w	8006cce <_printf_float+0xb6>
 8006eb8:	f04f 0900 	mov.w	r9, #0
 8006ebc:	f104 0a1a 	add.w	sl, r4, #26
 8006ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec2:	425b      	negs	r3, r3
 8006ec4:	454b      	cmp	r3, r9
 8006ec6:	dc01      	bgt.n	8006ecc <_printf_float+0x2b4>
 8006ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eca:	e794      	b.n	8006df6 <_printf_float+0x1de>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	4652      	mov	r2, sl
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	47b8      	blx	r7
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f43f aef9 	beq.w	8006cce <_printf_float+0xb6>
 8006edc:	f109 0901 	add.w	r9, r9, #1
 8006ee0:	e7ee      	b.n	8006ec0 <_printf_float+0x2a8>
 8006ee2:	bf00      	nop
 8006ee4:	7fefffff 	.word	0x7fefffff
 8006ee8:	0800af04 	.word	0x0800af04
 8006eec:	0800af08 	.word	0x0800af08
 8006ef0:	0800af10 	.word	0x0800af10
 8006ef4:	0800af0c 	.word	0x0800af0c
 8006ef8:	0800af14 	.word	0x0800af14
 8006efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006efe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f00:	429a      	cmp	r2, r3
 8006f02:	bfa8      	it	ge
 8006f04:	461a      	movge	r2, r3
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	4691      	mov	r9, r2
 8006f0a:	dc37      	bgt.n	8006f7c <_printf_float+0x364>
 8006f0c:	f04f 0b00 	mov.w	fp, #0
 8006f10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f14:	f104 021a 	add.w	r2, r4, #26
 8006f18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f1c:	ebaa 0309 	sub.w	r3, sl, r9
 8006f20:	455b      	cmp	r3, fp
 8006f22:	dc33      	bgt.n	8006f8c <_printf_float+0x374>
 8006f24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	db3b      	blt.n	8006fa4 <_printf_float+0x38c>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	07da      	lsls	r2, r3, #31
 8006f30:	d438      	bmi.n	8006fa4 <_printf_float+0x38c>
 8006f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f36:	eba2 030a 	sub.w	r3, r2, sl
 8006f3a:	eba2 0901 	sub.w	r9, r2, r1
 8006f3e:	4599      	cmp	r9, r3
 8006f40:	bfa8      	it	ge
 8006f42:	4699      	movge	r9, r3
 8006f44:	f1b9 0f00 	cmp.w	r9, #0
 8006f48:	dc34      	bgt.n	8006fb4 <_printf_float+0x39c>
 8006f4a:	f04f 0800 	mov.w	r8, #0
 8006f4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f52:	f104 0a1a 	add.w	sl, r4, #26
 8006f56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f5a:	1a9b      	subs	r3, r3, r2
 8006f5c:	eba3 0309 	sub.w	r3, r3, r9
 8006f60:	4543      	cmp	r3, r8
 8006f62:	f77f af7a 	ble.w	8006e5a <_printf_float+0x242>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4652      	mov	r2, sl
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f aeac 	beq.w	8006cce <_printf_float+0xb6>
 8006f76:	f108 0801 	add.w	r8, r8, #1
 8006f7a:	e7ec      	b.n	8006f56 <_printf_float+0x33e>
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4642      	mov	r2, r8
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	d1c0      	bne.n	8006f0c <_printf_float+0x2f4>
 8006f8a:	e6a0      	b.n	8006cce <_printf_float+0xb6>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	4631      	mov	r1, r6
 8006f90:	4628      	mov	r0, r5
 8006f92:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	f43f ae99 	beq.w	8006cce <_printf_float+0xb6>
 8006f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f9e:	f10b 0b01 	add.w	fp, fp, #1
 8006fa2:	e7b9      	b.n	8006f18 <_printf_float+0x300>
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006faa:	4628      	mov	r0, r5
 8006fac:	47b8      	blx	r7
 8006fae:	3001      	adds	r0, #1
 8006fb0:	d1bf      	bne.n	8006f32 <_printf_float+0x31a>
 8006fb2:	e68c      	b.n	8006cce <_printf_float+0xb6>
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	4628      	mov	r0, r5
 8006fba:	eb08 020a 	add.w	r2, r8, sl
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d1c2      	bne.n	8006f4a <_printf_float+0x332>
 8006fc4:	e683      	b.n	8006cce <_printf_float+0xb6>
 8006fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fc8:	2a01      	cmp	r2, #1
 8006fca:	dc01      	bgt.n	8006fd0 <_printf_float+0x3b8>
 8006fcc:	07db      	lsls	r3, r3, #31
 8006fce:	d537      	bpl.n	8007040 <_printf_float+0x428>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	f43f ae77 	beq.w	8006cce <_printf_float+0xb6>
 8006fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	f43f ae6f 	beq.w	8006cce <_printf_float+0xb6>
 8006ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f7f9 fcd6 	bl	80009a8 <__aeabi_dcmpeq>
 8006ffc:	b9d8      	cbnz	r0, 8007036 <_printf_float+0x41e>
 8006ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007000:	f108 0201 	add.w	r2, r8, #1
 8007004:	3b01      	subs	r3, #1
 8007006:	4631      	mov	r1, r6
 8007008:	4628      	mov	r0, r5
 800700a:	47b8      	blx	r7
 800700c:	3001      	adds	r0, #1
 800700e:	d10e      	bne.n	800702e <_printf_float+0x416>
 8007010:	e65d      	b.n	8006cce <_printf_float+0xb6>
 8007012:	2301      	movs	r3, #1
 8007014:	464a      	mov	r2, r9
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	47b8      	blx	r7
 800701c:	3001      	adds	r0, #1
 800701e:	f43f ae56 	beq.w	8006cce <_printf_float+0xb6>
 8007022:	f108 0801 	add.w	r8, r8, #1
 8007026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007028:	3b01      	subs	r3, #1
 800702a:	4543      	cmp	r3, r8
 800702c:	dcf1      	bgt.n	8007012 <_printf_float+0x3fa>
 800702e:	4653      	mov	r3, sl
 8007030:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007034:	e6e0      	b.n	8006df8 <_printf_float+0x1e0>
 8007036:	f04f 0800 	mov.w	r8, #0
 800703a:	f104 091a 	add.w	r9, r4, #26
 800703e:	e7f2      	b.n	8007026 <_printf_float+0x40e>
 8007040:	2301      	movs	r3, #1
 8007042:	4642      	mov	r2, r8
 8007044:	e7df      	b.n	8007006 <_printf_float+0x3ee>
 8007046:	2301      	movs	r3, #1
 8007048:	464a      	mov	r2, r9
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	f43f ae3c 	beq.w	8006cce <_printf_float+0xb6>
 8007056:	f108 0801 	add.w	r8, r8, #1
 800705a:	68e3      	ldr	r3, [r4, #12]
 800705c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800705e:	1a5b      	subs	r3, r3, r1
 8007060:	4543      	cmp	r3, r8
 8007062:	dcf0      	bgt.n	8007046 <_printf_float+0x42e>
 8007064:	e6fd      	b.n	8006e62 <_printf_float+0x24a>
 8007066:	f04f 0800 	mov.w	r8, #0
 800706a:	f104 0919 	add.w	r9, r4, #25
 800706e:	e7f4      	b.n	800705a <_printf_float+0x442>

08007070 <_printf_common>:
 8007070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007074:	4616      	mov	r6, r2
 8007076:	4699      	mov	r9, r3
 8007078:	688a      	ldr	r2, [r1, #8]
 800707a:	690b      	ldr	r3, [r1, #16]
 800707c:	4607      	mov	r7, r0
 800707e:	4293      	cmp	r3, r2
 8007080:	bfb8      	it	lt
 8007082:	4613      	movlt	r3, r2
 8007084:	6033      	str	r3, [r6, #0]
 8007086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800708a:	460c      	mov	r4, r1
 800708c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007090:	b10a      	cbz	r2, 8007096 <_printf_common+0x26>
 8007092:	3301      	adds	r3, #1
 8007094:	6033      	str	r3, [r6, #0]
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	0699      	lsls	r1, r3, #26
 800709a:	bf42      	ittt	mi
 800709c:	6833      	ldrmi	r3, [r6, #0]
 800709e:	3302      	addmi	r3, #2
 80070a0:	6033      	strmi	r3, [r6, #0]
 80070a2:	6825      	ldr	r5, [r4, #0]
 80070a4:	f015 0506 	ands.w	r5, r5, #6
 80070a8:	d106      	bne.n	80070b8 <_printf_common+0x48>
 80070aa:	f104 0a19 	add.w	sl, r4, #25
 80070ae:	68e3      	ldr	r3, [r4, #12]
 80070b0:	6832      	ldr	r2, [r6, #0]
 80070b2:	1a9b      	subs	r3, r3, r2
 80070b4:	42ab      	cmp	r3, r5
 80070b6:	dc28      	bgt.n	800710a <_printf_common+0x9a>
 80070b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070bc:	1e13      	subs	r3, r2, #0
 80070be:	6822      	ldr	r2, [r4, #0]
 80070c0:	bf18      	it	ne
 80070c2:	2301      	movne	r3, #1
 80070c4:	0692      	lsls	r2, r2, #26
 80070c6:	d42d      	bmi.n	8007124 <_printf_common+0xb4>
 80070c8:	4649      	mov	r1, r9
 80070ca:	4638      	mov	r0, r7
 80070cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070d0:	47c0      	blx	r8
 80070d2:	3001      	adds	r0, #1
 80070d4:	d020      	beq.n	8007118 <_printf_common+0xa8>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	68e5      	ldr	r5, [r4, #12]
 80070da:	f003 0306 	and.w	r3, r3, #6
 80070de:	2b04      	cmp	r3, #4
 80070e0:	bf18      	it	ne
 80070e2:	2500      	movne	r5, #0
 80070e4:	6832      	ldr	r2, [r6, #0]
 80070e6:	f04f 0600 	mov.w	r6, #0
 80070ea:	68a3      	ldr	r3, [r4, #8]
 80070ec:	bf08      	it	eq
 80070ee:	1aad      	subeq	r5, r5, r2
 80070f0:	6922      	ldr	r2, [r4, #16]
 80070f2:	bf08      	it	eq
 80070f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070f8:	4293      	cmp	r3, r2
 80070fa:	bfc4      	itt	gt
 80070fc:	1a9b      	subgt	r3, r3, r2
 80070fe:	18ed      	addgt	r5, r5, r3
 8007100:	341a      	adds	r4, #26
 8007102:	42b5      	cmp	r5, r6
 8007104:	d11a      	bne.n	800713c <_printf_common+0xcc>
 8007106:	2000      	movs	r0, #0
 8007108:	e008      	b.n	800711c <_printf_common+0xac>
 800710a:	2301      	movs	r3, #1
 800710c:	4652      	mov	r2, sl
 800710e:	4649      	mov	r1, r9
 8007110:	4638      	mov	r0, r7
 8007112:	47c0      	blx	r8
 8007114:	3001      	adds	r0, #1
 8007116:	d103      	bne.n	8007120 <_printf_common+0xb0>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007120:	3501      	adds	r5, #1
 8007122:	e7c4      	b.n	80070ae <_printf_common+0x3e>
 8007124:	2030      	movs	r0, #48	; 0x30
 8007126:	18e1      	adds	r1, r4, r3
 8007128:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007132:	4422      	add	r2, r4
 8007134:	3302      	adds	r3, #2
 8007136:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800713a:	e7c5      	b.n	80070c8 <_printf_common+0x58>
 800713c:	2301      	movs	r3, #1
 800713e:	4622      	mov	r2, r4
 8007140:	4649      	mov	r1, r9
 8007142:	4638      	mov	r0, r7
 8007144:	47c0      	blx	r8
 8007146:	3001      	adds	r0, #1
 8007148:	d0e6      	beq.n	8007118 <_printf_common+0xa8>
 800714a:	3601      	adds	r6, #1
 800714c:	e7d9      	b.n	8007102 <_printf_common+0x92>
	...

08007150 <_printf_i>:
 8007150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	7e27      	ldrb	r7, [r4, #24]
 8007158:	4691      	mov	r9, r2
 800715a:	2f78      	cmp	r7, #120	; 0x78
 800715c:	4680      	mov	r8, r0
 800715e:	469a      	mov	sl, r3
 8007160:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007162:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007166:	d807      	bhi.n	8007178 <_printf_i+0x28>
 8007168:	2f62      	cmp	r7, #98	; 0x62
 800716a:	d80a      	bhi.n	8007182 <_printf_i+0x32>
 800716c:	2f00      	cmp	r7, #0
 800716e:	f000 80d9 	beq.w	8007324 <_printf_i+0x1d4>
 8007172:	2f58      	cmp	r7, #88	; 0x58
 8007174:	f000 80a4 	beq.w	80072c0 <_printf_i+0x170>
 8007178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800717c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007180:	e03a      	b.n	80071f8 <_printf_i+0xa8>
 8007182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007186:	2b15      	cmp	r3, #21
 8007188:	d8f6      	bhi.n	8007178 <_printf_i+0x28>
 800718a:	a001      	add	r0, pc, #4	; (adr r0, 8007190 <_printf_i+0x40>)
 800718c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007190:	080071e9 	.word	0x080071e9
 8007194:	080071fd 	.word	0x080071fd
 8007198:	08007179 	.word	0x08007179
 800719c:	08007179 	.word	0x08007179
 80071a0:	08007179 	.word	0x08007179
 80071a4:	08007179 	.word	0x08007179
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	08007179 	.word	0x08007179
 80071b0:	08007179 	.word	0x08007179
 80071b4:	08007179 	.word	0x08007179
 80071b8:	08007179 	.word	0x08007179
 80071bc:	0800730b 	.word	0x0800730b
 80071c0:	0800722d 	.word	0x0800722d
 80071c4:	080072ed 	.word	0x080072ed
 80071c8:	08007179 	.word	0x08007179
 80071cc:	08007179 	.word	0x08007179
 80071d0:	0800732d 	.word	0x0800732d
 80071d4:	08007179 	.word	0x08007179
 80071d8:	0800722d 	.word	0x0800722d
 80071dc:	08007179 	.word	0x08007179
 80071e0:	08007179 	.word	0x08007179
 80071e4:	080072f5 	.word	0x080072f5
 80071e8:	680b      	ldr	r3, [r1, #0]
 80071ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071ee:	1d1a      	adds	r2, r3, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	600a      	str	r2, [r1, #0]
 80071f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0a4      	b.n	8007346 <_printf_i+0x1f6>
 80071fc:	6825      	ldr	r5, [r4, #0]
 80071fe:	6808      	ldr	r0, [r1, #0]
 8007200:	062e      	lsls	r6, r5, #24
 8007202:	f100 0304 	add.w	r3, r0, #4
 8007206:	d50a      	bpl.n	800721e <_printf_i+0xce>
 8007208:	6805      	ldr	r5, [r0, #0]
 800720a:	600b      	str	r3, [r1, #0]
 800720c:	2d00      	cmp	r5, #0
 800720e:	da03      	bge.n	8007218 <_printf_i+0xc8>
 8007210:	232d      	movs	r3, #45	; 0x2d
 8007212:	426d      	negs	r5, r5
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007218:	230a      	movs	r3, #10
 800721a:	485e      	ldr	r0, [pc, #376]	; (8007394 <_printf_i+0x244>)
 800721c:	e019      	b.n	8007252 <_printf_i+0x102>
 800721e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007222:	6805      	ldr	r5, [r0, #0]
 8007224:	600b      	str	r3, [r1, #0]
 8007226:	bf18      	it	ne
 8007228:	b22d      	sxthne	r5, r5
 800722a:	e7ef      	b.n	800720c <_printf_i+0xbc>
 800722c:	680b      	ldr	r3, [r1, #0]
 800722e:	6825      	ldr	r5, [r4, #0]
 8007230:	1d18      	adds	r0, r3, #4
 8007232:	6008      	str	r0, [r1, #0]
 8007234:	0628      	lsls	r0, r5, #24
 8007236:	d501      	bpl.n	800723c <_printf_i+0xec>
 8007238:	681d      	ldr	r5, [r3, #0]
 800723a:	e002      	b.n	8007242 <_printf_i+0xf2>
 800723c:	0669      	lsls	r1, r5, #25
 800723e:	d5fb      	bpl.n	8007238 <_printf_i+0xe8>
 8007240:	881d      	ldrh	r5, [r3, #0]
 8007242:	2f6f      	cmp	r7, #111	; 0x6f
 8007244:	bf0c      	ite	eq
 8007246:	2308      	moveq	r3, #8
 8007248:	230a      	movne	r3, #10
 800724a:	4852      	ldr	r0, [pc, #328]	; (8007394 <_printf_i+0x244>)
 800724c:	2100      	movs	r1, #0
 800724e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007252:	6866      	ldr	r6, [r4, #4]
 8007254:	2e00      	cmp	r6, #0
 8007256:	bfa8      	it	ge
 8007258:	6821      	ldrge	r1, [r4, #0]
 800725a:	60a6      	str	r6, [r4, #8]
 800725c:	bfa4      	itt	ge
 800725e:	f021 0104 	bicge.w	r1, r1, #4
 8007262:	6021      	strge	r1, [r4, #0]
 8007264:	b90d      	cbnz	r5, 800726a <_printf_i+0x11a>
 8007266:	2e00      	cmp	r6, #0
 8007268:	d04d      	beq.n	8007306 <_printf_i+0x1b6>
 800726a:	4616      	mov	r6, r2
 800726c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007270:	fb03 5711 	mls	r7, r3, r1, r5
 8007274:	5dc7      	ldrb	r7, [r0, r7]
 8007276:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800727a:	462f      	mov	r7, r5
 800727c:	42bb      	cmp	r3, r7
 800727e:	460d      	mov	r5, r1
 8007280:	d9f4      	bls.n	800726c <_printf_i+0x11c>
 8007282:	2b08      	cmp	r3, #8
 8007284:	d10b      	bne.n	800729e <_printf_i+0x14e>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	07df      	lsls	r7, r3, #31
 800728a:	d508      	bpl.n	800729e <_printf_i+0x14e>
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	6861      	ldr	r1, [r4, #4]
 8007290:	4299      	cmp	r1, r3
 8007292:	bfde      	ittt	le
 8007294:	2330      	movle	r3, #48	; 0x30
 8007296:	f806 3c01 	strble.w	r3, [r6, #-1]
 800729a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800729e:	1b92      	subs	r2, r2, r6
 80072a0:	6122      	str	r2, [r4, #16]
 80072a2:	464b      	mov	r3, r9
 80072a4:	4621      	mov	r1, r4
 80072a6:	4640      	mov	r0, r8
 80072a8:	f8cd a000 	str.w	sl, [sp]
 80072ac:	aa03      	add	r2, sp, #12
 80072ae:	f7ff fedf 	bl	8007070 <_printf_common>
 80072b2:	3001      	adds	r0, #1
 80072b4:	d14c      	bne.n	8007350 <_printf_i+0x200>
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ba:	b004      	add	sp, #16
 80072bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c0:	4834      	ldr	r0, [pc, #208]	; (8007394 <_printf_i+0x244>)
 80072c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072c6:	680e      	ldr	r6, [r1, #0]
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80072ce:	061f      	lsls	r7, r3, #24
 80072d0:	600e      	str	r6, [r1, #0]
 80072d2:	d514      	bpl.n	80072fe <_printf_i+0x1ae>
 80072d4:	07d9      	lsls	r1, r3, #31
 80072d6:	bf44      	itt	mi
 80072d8:	f043 0320 	orrmi.w	r3, r3, #32
 80072dc:	6023      	strmi	r3, [r4, #0]
 80072de:	b91d      	cbnz	r5, 80072e8 <_printf_i+0x198>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	f023 0320 	bic.w	r3, r3, #32
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	2310      	movs	r3, #16
 80072ea:	e7af      	b.n	800724c <_printf_i+0xfc>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	f043 0320 	orr.w	r3, r3, #32
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	2378      	movs	r3, #120	; 0x78
 80072f6:	4828      	ldr	r0, [pc, #160]	; (8007398 <_printf_i+0x248>)
 80072f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072fc:	e7e3      	b.n	80072c6 <_printf_i+0x176>
 80072fe:	065e      	lsls	r6, r3, #25
 8007300:	bf48      	it	mi
 8007302:	b2ad      	uxthmi	r5, r5
 8007304:	e7e6      	b.n	80072d4 <_printf_i+0x184>
 8007306:	4616      	mov	r6, r2
 8007308:	e7bb      	b.n	8007282 <_printf_i+0x132>
 800730a:	680b      	ldr	r3, [r1, #0]
 800730c:	6826      	ldr	r6, [r4, #0]
 800730e:	1d1d      	adds	r5, r3, #4
 8007310:	6960      	ldr	r0, [r4, #20]
 8007312:	600d      	str	r5, [r1, #0]
 8007314:	0635      	lsls	r5, r6, #24
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	d501      	bpl.n	800731e <_printf_i+0x1ce>
 800731a:	6018      	str	r0, [r3, #0]
 800731c:	e002      	b.n	8007324 <_printf_i+0x1d4>
 800731e:	0671      	lsls	r1, r6, #25
 8007320:	d5fb      	bpl.n	800731a <_printf_i+0x1ca>
 8007322:	8018      	strh	r0, [r3, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	4616      	mov	r6, r2
 8007328:	6123      	str	r3, [r4, #16]
 800732a:	e7ba      	b.n	80072a2 <_printf_i+0x152>
 800732c:	680b      	ldr	r3, [r1, #0]
 800732e:	1d1a      	adds	r2, r3, #4
 8007330:	600a      	str	r2, [r1, #0]
 8007332:	681e      	ldr	r6, [r3, #0]
 8007334:	2100      	movs	r1, #0
 8007336:	4630      	mov	r0, r6
 8007338:	6862      	ldr	r2, [r4, #4]
 800733a:	f000 fed7 	bl	80080ec <memchr>
 800733e:	b108      	cbz	r0, 8007344 <_printf_i+0x1f4>
 8007340:	1b80      	subs	r0, r0, r6
 8007342:	6060      	str	r0, [r4, #4]
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	2300      	movs	r3, #0
 800734a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800734e:	e7a8      	b.n	80072a2 <_printf_i+0x152>
 8007350:	4632      	mov	r2, r6
 8007352:	4649      	mov	r1, r9
 8007354:	4640      	mov	r0, r8
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	47d0      	blx	sl
 800735a:	3001      	adds	r0, #1
 800735c:	d0ab      	beq.n	80072b6 <_printf_i+0x166>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	079b      	lsls	r3, r3, #30
 8007362:	d413      	bmi.n	800738c <_printf_i+0x23c>
 8007364:	68e0      	ldr	r0, [r4, #12]
 8007366:	9b03      	ldr	r3, [sp, #12]
 8007368:	4298      	cmp	r0, r3
 800736a:	bfb8      	it	lt
 800736c:	4618      	movlt	r0, r3
 800736e:	e7a4      	b.n	80072ba <_printf_i+0x16a>
 8007370:	2301      	movs	r3, #1
 8007372:	4632      	mov	r2, r6
 8007374:	4649      	mov	r1, r9
 8007376:	4640      	mov	r0, r8
 8007378:	47d0      	blx	sl
 800737a:	3001      	adds	r0, #1
 800737c:	d09b      	beq.n	80072b6 <_printf_i+0x166>
 800737e:	3501      	adds	r5, #1
 8007380:	68e3      	ldr	r3, [r4, #12]
 8007382:	9903      	ldr	r1, [sp, #12]
 8007384:	1a5b      	subs	r3, r3, r1
 8007386:	42ab      	cmp	r3, r5
 8007388:	dcf2      	bgt.n	8007370 <_printf_i+0x220>
 800738a:	e7eb      	b.n	8007364 <_printf_i+0x214>
 800738c:	2500      	movs	r5, #0
 800738e:	f104 0619 	add.w	r6, r4, #25
 8007392:	e7f5      	b.n	8007380 <_printf_i+0x230>
 8007394:	0800af16 	.word	0x0800af16
 8007398:	0800af27 	.word	0x0800af27

0800739c <siprintf>:
 800739c:	b40e      	push	{r1, r2, r3}
 800739e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073a2:	b500      	push	{lr}
 80073a4:	b09c      	sub	sp, #112	; 0x70
 80073a6:	ab1d      	add	r3, sp, #116	; 0x74
 80073a8:	9002      	str	r0, [sp, #8]
 80073aa:	9006      	str	r0, [sp, #24]
 80073ac:	9107      	str	r1, [sp, #28]
 80073ae:	9104      	str	r1, [sp, #16]
 80073b0:	4808      	ldr	r0, [pc, #32]	; (80073d4 <siprintf+0x38>)
 80073b2:	4909      	ldr	r1, [pc, #36]	; (80073d8 <siprintf+0x3c>)
 80073b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b8:	9105      	str	r1, [sp, #20]
 80073ba:	6800      	ldr	r0, [r0, #0]
 80073bc:	a902      	add	r1, sp, #8
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	f001 fb42 	bl	8008a48 <_svfiprintf_r>
 80073c4:	2200      	movs	r2, #0
 80073c6:	9b02      	ldr	r3, [sp, #8]
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	b01c      	add	sp, #112	; 0x70
 80073cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d0:	b003      	add	sp, #12
 80073d2:	4770      	bx	lr
 80073d4:	2000000c 	.word	0x2000000c
 80073d8:	ffff0208 	.word	0xffff0208

080073dc <quorem>:
 80073dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	6903      	ldr	r3, [r0, #16]
 80073e2:	690c      	ldr	r4, [r1, #16]
 80073e4:	4607      	mov	r7, r0
 80073e6:	42a3      	cmp	r3, r4
 80073e8:	f2c0 8083 	blt.w	80074f2 <quorem+0x116>
 80073ec:	3c01      	subs	r4, #1
 80073ee:	f100 0514 	add.w	r5, r0, #20
 80073f2:	f101 0814 	add.w	r8, r1, #20
 80073f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007404:	3301      	adds	r3, #1
 8007406:	429a      	cmp	r2, r3
 8007408:	fbb2 f6f3 	udiv	r6, r2, r3
 800740c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007410:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007414:	d332      	bcc.n	800747c <quorem+0xa0>
 8007416:	f04f 0e00 	mov.w	lr, #0
 800741a:	4640      	mov	r0, r8
 800741c:	46ac      	mov	ip, r5
 800741e:	46f2      	mov	sl, lr
 8007420:	f850 2b04 	ldr.w	r2, [r0], #4
 8007424:	b293      	uxth	r3, r2
 8007426:	fb06 e303 	mla	r3, r6, r3, lr
 800742a:	0c12      	lsrs	r2, r2, #16
 800742c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007430:	fb06 e202 	mla	r2, r6, r2, lr
 8007434:	b29b      	uxth	r3, r3
 8007436:	ebaa 0303 	sub.w	r3, sl, r3
 800743a:	f8dc a000 	ldr.w	sl, [ip]
 800743e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007442:	fa1f fa8a 	uxth.w	sl, sl
 8007446:	4453      	add	r3, sl
 8007448:	fa1f fa82 	uxth.w	sl, r2
 800744c:	f8dc 2000 	ldr.w	r2, [ip]
 8007450:	4581      	cmp	r9, r0
 8007452:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007456:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007460:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007464:	f84c 3b04 	str.w	r3, [ip], #4
 8007468:	d2da      	bcs.n	8007420 <quorem+0x44>
 800746a:	f855 300b 	ldr.w	r3, [r5, fp]
 800746e:	b92b      	cbnz	r3, 800747c <quorem+0xa0>
 8007470:	9b01      	ldr	r3, [sp, #4]
 8007472:	3b04      	subs	r3, #4
 8007474:	429d      	cmp	r5, r3
 8007476:	461a      	mov	r2, r3
 8007478:	d32f      	bcc.n	80074da <quorem+0xfe>
 800747a:	613c      	str	r4, [r7, #16]
 800747c:	4638      	mov	r0, r7
 800747e:	f001 f8cb 	bl	8008618 <__mcmp>
 8007482:	2800      	cmp	r0, #0
 8007484:	db25      	blt.n	80074d2 <quorem+0xf6>
 8007486:	4628      	mov	r0, r5
 8007488:	f04f 0c00 	mov.w	ip, #0
 800748c:	3601      	adds	r6, #1
 800748e:	f858 1b04 	ldr.w	r1, [r8], #4
 8007492:	f8d0 e000 	ldr.w	lr, [r0]
 8007496:	b28b      	uxth	r3, r1
 8007498:	ebac 0303 	sub.w	r3, ip, r3
 800749c:	fa1f f28e 	uxth.w	r2, lr
 80074a0:	4413      	add	r3, r2
 80074a2:	0c0a      	lsrs	r2, r1, #16
 80074a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074b2:	45c1      	cmp	r9, r8
 80074b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074b8:	f840 3b04 	str.w	r3, [r0], #4
 80074bc:	d2e7      	bcs.n	800748e <quorem+0xb2>
 80074be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074c6:	b922      	cbnz	r2, 80074d2 <quorem+0xf6>
 80074c8:	3b04      	subs	r3, #4
 80074ca:	429d      	cmp	r5, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	d30a      	bcc.n	80074e6 <quorem+0x10a>
 80074d0:	613c      	str	r4, [r7, #16]
 80074d2:	4630      	mov	r0, r6
 80074d4:	b003      	add	sp, #12
 80074d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074da:	6812      	ldr	r2, [r2, #0]
 80074dc:	3b04      	subs	r3, #4
 80074de:	2a00      	cmp	r2, #0
 80074e0:	d1cb      	bne.n	800747a <quorem+0x9e>
 80074e2:	3c01      	subs	r4, #1
 80074e4:	e7c6      	b.n	8007474 <quorem+0x98>
 80074e6:	6812      	ldr	r2, [r2, #0]
 80074e8:	3b04      	subs	r3, #4
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d1f0      	bne.n	80074d0 <quorem+0xf4>
 80074ee:	3c01      	subs	r4, #1
 80074f0:	e7eb      	b.n	80074ca <quorem+0xee>
 80074f2:	2000      	movs	r0, #0
 80074f4:	e7ee      	b.n	80074d4 <quorem+0xf8>
	...

080074f8 <_dtoa_r>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	4616      	mov	r6, r2
 80074fe:	461f      	mov	r7, r3
 8007500:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007502:	b099      	sub	sp, #100	; 0x64
 8007504:	4605      	mov	r5, r0
 8007506:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800750a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800750e:	b974      	cbnz	r4, 800752e <_dtoa_r+0x36>
 8007510:	2010      	movs	r0, #16
 8007512:	f000 fde3 	bl	80080dc <malloc>
 8007516:	4602      	mov	r2, r0
 8007518:	6268      	str	r0, [r5, #36]	; 0x24
 800751a:	b920      	cbnz	r0, 8007526 <_dtoa_r+0x2e>
 800751c:	21ea      	movs	r1, #234	; 0xea
 800751e:	4bae      	ldr	r3, [pc, #696]	; (80077d8 <_dtoa_r+0x2e0>)
 8007520:	48ae      	ldr	r0, [pc, #696]	; (80077dc <_dtoa_r+0x2e4>)
 8007522:	f001 fba1 	bl	8008c68 <__assert_func>
 8007526:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800752a:	6004      	str	r4, [r0, #0]
 800752c:	60c4      	str	r4, [r0, #12]
 800752e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007530:	6819      	ldr	r1, [r3, #0]
 8007532:	b151      	cbz	r1, 800754a <_dtoa_r+0x52>
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	2301      	movs	r3, #1
 8007538:	4093      	lsls	r3, r2
 800753a:	604a      	str	r2, [r1, #4]
 800753c:	608b      	str	r3, [r1, #8]
 800753e:	4628      	mov	r0, r5
 8007540:	f000 fe30 	bl	80081a4 <_Bfree>
 8007544:	2200      	movs	r2, #0
 8007546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	1e3b      	subs	r3, r7, #0
 800754c:	bfaf      	iteee	ge
 800754e:	2300      	movge	r3, #0
 8007550:	2201      	movlt	r2, #1
 8007552:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007556:	9305      	strlt	r3, [sp, #20]
 8007558:	bfa8      	it	ge
 800755a:	f8c8 3000 	strge.w	r3, [r8]
 800755e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007562:	4b9f      	ldr	r3, [pc, #636]	; (80077e0 <_dtoa_r+0x2e8>)
 8007564:	bfb8      	it	lt
 8007566:	f8c8 2000 	strlt.w	r2, [r8]
 800756a:	ea33 0309 	bics.w	r3, r3, r9
 800756e:	d119      	bne.n	80075a4 <_dtoa_r+0xac>
 8007570:	f242 730f 	movw	r3, #9999	; 0x270f
 8007574:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800757c:	4333      	orrs	r3, r6
 800757e:	f000 8580 	beq.w	8008082 <_dtoa_r+0xb8a>
 8007582:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007584:	b953      	cbnz	r3, 800759c <_dtoa_r+0xa4>
 8007586:	4b97      	ldr	r3, [pc, #604]	; (80077e4 <_dtoa_r+0x2ec>)
 8007588:	e022      	b.n	80075d0 <_dtoa_r+0xd8>
 800758a:	4b97      	ldr	r3, [pc, #604]	; (80077e8 <_dtoa_r+0x2f0>)
 800758c:	9308      	str	r3, [sp, #32]
 800758e:	3308      	adds	r3, #8
 8007590:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	9808      	ldr	r0, [sp, #32]
 8007596:	b019      	add	sp, #100	; 0x64
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759c:	4b91      	ldr	r3, [pc, #580]	; (80077e4 <_dtoa_r+0x2ec>)
 800759e:	9308      	str	r3, [sp, #32]
 80075a0:	3303      	adds	r3, #3
 80075a2:	e7f5      	b.n	8007590 <_dtoa_r+0x98>
 80075a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80075a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80075ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075b0:	2200      	movs	r2, #0
 80075b2:	2300      	movs	r3, #0
 80075b4:	f7f9 f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80075b8:	4680      	mov	r8, r0
 80075ba:	b158      	cbz	r0, 80075d4 <_dtoa_r+0xdc>
 80075bc:	2301      	movs	r3, #1
 80075be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8559 	beq.w	800807c <_dtoa_r+0xb84>
 80075ca:	4888      	ldr	r0, [pc, #544]	; (80077ec <_dtoa_r+0x2f4>)
 80075cc:	6018      	str	r0, [r3, #0]
 80075ce:	1e43      	subs	r3, r0, #1
 80075d0:	9308      	str	r3, [sp, #32]
 80075d2:	e7df      	b.n	8007594 <_dtoa_r+0x9c>
 80075d4:	ab16      	add	r3, sp, #88	; 0x58
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	ab17      	add	r3, sp, #92	; 0x5c
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	4628      	mov	r0, r5
 80075de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80075e2:	f001 f8c5 	bl	8008770 <__d2b>
 80075e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80075ea:	4682      	mov	sl, r0
 80075ec:	2c00      	cmp	r4, #0
 80075ee:	d07e      	beq.n	80076ee <_dtoa_r+0x1f6>
 80075f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80075fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007602:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007606:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800760a:	2200      	movs	r2, #0
 800760c:	4b78      	ldr	r3, [pc, #480]	; (80077f0 <_dtoa_r+0x2f8>)
 800760e:	f7f8 fdab 	bl	8000168 <__aeabi_dsub>
 8007612:	a36b      	add	r3, pc, #428	; (adr r3, 80077c0 <_dtoa_r+0x2c8>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f7f8 ff5e 	bl	80004d8 <__aeabi_dmul>
 800761c:	a36a      	add	r3, pc, #424	; (adr r3, 80077c8 <_dtoa_r+0x2d0>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f7f8 fda3 	bl	800016c <__adddf3>
 8007626:	4606      	mov	r6, r0
 8007628:	4620      	mov	r0, r4
 800762a:	460f      	mov	r7, r1
 800762c:	f7f8 feea 	bl	8000404 <__aeabi_i2d>
 8007630:	a367      	add	r3, pc, #412	; (adr r3, 80077d0 <_dtoa_r+0x2d8>)
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	f7f8 ff4f 	bl	80004d8 <__aeabi_dmul>
 800763a:	4602      	mov	r2, r0
 800763c:	460b      	mov	r3, r1
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f8 fd93 	bl	800016c <__adddf3>
 8007646:	4606      	mov	r6, r0
 8007648:	460f      	mov	r7, r1
 800764a:	f7f9 f9f5 	bl	8000a38 <__aeabi_d2iz>
 800764e:	2200      	movs	r2, #0
 8007650:	4681      	mov	r9, r0
 8007652:	2300      	movs	r3, #0
 8007654:	4630      	mov	r0, r6
 8007656:	4639      	mov	r1, r7
 8007658:	f7f9 f9b0 	bl	80009bc <__aeabi_dcmplt>
 800765c:	b148      	cbz	r0, 8007672 <_dtoa_r+0x17a>
 800765e:	4648      	mov	r0, r9
 8007660:	f7f8 fed0 	bl	8000404 <__aeabi_i2d>
 8007664:	4632      	mov	r2, r6
 8007666:	463b      	mov	r3, r7
 8007668:	f7f9 f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800766c:	b908      	cbnz	r0, 8007672 <_dtoa_r+0x17a>
 800766e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007672:	f1b9 0f16 	cmp.w	r9, #22
 8007676:	d857      	bhi.n	8007728 <_dtoa_r+0x230>
 8007678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800767c:	4b5d      	ldr	r3, [pc, #372]	; (80077f4 <_dtoa_r+0x2fc>)
 800767e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f9 f999 	bl	80009bc <__aeabi_dcmplt>
 800768a:	2800      	cmp	r0, #0
 800768c:	d04e      	beq.n	800772c <_dtoa_r+0x234>
 800768e:	2300      	movs	r3, #0
 8007690:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007694:	930f      	str	r3, [sp, #60]	; 0x3c
 8007696:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007698:	1b1c      	subs	r4, r3, r4
 800769a:	1e63      	subs	r3, r4, #1
 800769c:	9309      	str	r3, [sp, #36]	; 0x24
 800769e:	bf49      	itett	mi
 80076a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80076a4:	2300      	movpl	r3, #0
 80076a6:	9306      	strmi	r3, [sp, #24]
 80076a8:	2300      	movmi	r3, #0
 80076aa:	bf54      	ite	pl
 80076ac:	9306      	strpl	r3, [sp, #24]
 80076ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80076b0:	f1b9 0f00 	cmp.w	r9, #0
 80076b4:	db3c      	blt.n	8007730 <_dtoa_r+0x238>
 80076b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80076bc:	444b      	add	r3, r9
 80076be:	9309      	str	r3, [sp, #36]	; 0x24
 80076c0:	2300      	movs	r3, #0
 80076c2:	930a      	str	r3, [sp, #40]	; 0x28
 80076c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076c6:	2b09      	cmp	r3, #9
 80076c8:	d86c      	bhi.n	80077a4 <_dtoa_r+0x2ac>
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	bfc4      	itt	gt
 80076ce:	3b04      	subgt	r3, #4
 80076d0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80076d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076d4:	bfc8      	it	gt
 80076d6:	2400      	movgt	r4, #0
 80076d8:	f1a3 0302 	sub.w	r3, r3, #2
 80076dc:	bfd8      	it	le
 80076de:	2401      	movle	r4, #1
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	f200 808b 	bhi.w	80077fc <_dtoa_r+0x304>
 80076e6:	e8df f003 	tbb	[pc, r3]
 80076ea:	4f2d      	.short	0x4f2d
 80076ec:	5b4d      	.short	0x5b4d
 80076ee:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80076f2:	441c      	add	r4, r3
 80076f4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	bfc3      	ittte	gt
 80076fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007700:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007704:	fa09 f303 	lslgt.w	r3, r9, r3
 8007708:	f1c3 0320 	rsble	r3, r3, #32
 800770c:	bfc6      	itte	gt
 800770e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007712:	4318      	orrgt	r0, r3
 8007714:	fa06 f003 	lslle.w	r0, r6, r3
 8007718:	f7f8 fe64 	bl	80003e4 <__aeabi_ui2d>
 800771c:	2301      	movs	r3, #1
 800771e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007722:	3c01      	subs	r4, #1
 8007724:	9313      	str	r3, [sp, #76]	; 0x4c
 8007726:	e770      	b.n	800760a <_dtoa_r+0x112>
 8007728:	2301      	movs	r3, #1
 800772a:	e7b3      	b.n	8007694 <_dtoa_r+0x19c>
 800772c:	900f      	str	r0, [sp, #60]	; 0x3c
 800772e:	e7b2      	b.n	8007696 <_dtoa_r+0x19e>
 8007730:	9b06      	ldr	r3, [sp, #24]
 8007732:	eba3 0309 	sub.w	r3, r3, r9
 8007736:	9306      	str	r3, [sp, #24]
 8007738:	f1c9 0300 	rsb	r3, r9, #0
 800773c:	930a      	str	r3, [sp, #40]	; 0x28
 800773e:	2300      	movs	r3, #0
 8007740:	930e      	str	r3, [sp, #56]	; 0x38
 8007742:	e7bf      	b.n	80076c4 <_dtoa_r+0x1cc>
 8007744:	2300      	movs	r3, #0
 8007746:	930b      	str	r3, [sp, #44]	; 0x2c
 8007748:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800774a:	2b00      	cmp	r3, #0
 800774c:	dc59      	bgt.n	8007802 <_dtoa_r+0x30a>
 800774e:	f04f 0b01 	mov.w	fp, #1
 8007752:	465b      	mov	r3, fp
 8007754:	f8cd b008 	str.w	fp, [sp, #8]
 8007758:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800775c:	2200      	movs	r2, #0
 800775e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007760:	6042      	str	r2, [r0, #4]
 8007762:	2204      	movs	r2, #4
 8007764:	f102 0614 	add.w	r6, r2, #20
 8007768:	429e      	cmp	r6, r3
 800776a:	6841      	ldr	r1, [r0, #4]
 800776c:	d94f      	bls.n	800780e <_dtoa_r+0x316>
 800776e:	4628      	mov	r0, r5
 8007770:	f000 fcd8 	bl	8008124 <_Balloc>
 8007774:	9008      	str	r0, [sp, #32]
 8007776:	2800      	cmp	r0, #0
 8007778:	d14d      	bne.n	8007816 <_dtoa_r+0x31e>
 800777a:	4602      	mov	r2, r0
 800777c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007780:	4b1d      	ldr	r3, [pc, #116]	; (80077f8 <_dtoa_r+0x300>)
 8007782:	e6cd      	b.n	8007520 <_dtoa_r+0x28>
 8007784:	2301      	movs	r3, #1
 8007786:	e7de      	b.n	8007746 <_dtoa_r+0x24e>
 8007788:	2300      	movs	r3, #0
 800778a:	930b      	str	r3, [sp, #44]	; 0x2c
 800778c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800778e:	eb09 0b03 	add.w	fp, r9, r3
 8007792:	f10b 0301 	add.w	r3, fp, #1
 8007796:	2b01      	cmp	r3, #1
 8007798:	9302      	str	r3, [sp, #8]
 800779a:	bfb8      	it	lt
 800779c:	2301      	movlt	r3, #1
 800779e:	e7dd      	b.n	800775c <_dtoa_r+0x264>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e7f2      	b.n	800778a <_dtoa_r+0x292>
 80077a4:	2401      	movs	r4, #1
 80077a6:	2300      	movs	r3, #0
 80077a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80077aa:	9322      	str	r3, [sp, #136]	; 0x88
 80077ac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80077b0:	2200      	movs	r2, #0
 80077b2:	2312      	movs	r3, #18
 80077b4:	f8cd b008 	str.w	fp, [sp, #8]
 80077b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80077ba:	e7cf      	b.n	800775c <_dtoa_r+0x264>
 80077bc:	f3af 8000 	nop.w
 80077c0:	636f4361 	.word	0x636f4361
 80077c4:	3fd287a7 	.word	0x3fd287a7
 80077c8:	8b60c8b3 	.word	0x8b60c8b3
 80077cc:	3fc68a28 	.word	0x3fc68a28
 80077d0:	509f79fb 	.word	0x509f79fb
 80077d4:	3fd34413 	.word	0x3fd34413
 80077d8:	0800af45 	.word	0x0800af45
 80077dc:	0800af5c 	.word	0x0800af5c
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	0800af41 	.word	0x0800af41
 80077e8:	0800af38 	.word	0x0800af38
 80077ec:	0800af15 	.word	0x0800af15
 80077f0:	3ff80000 	.word	0x3ff80000
 80077f4:	0800b058 	.word	0x0800b058
 80077f8:	0800afbb 	.word	0x0800afbb
 80077fc:	2301      	movs	r3, #1
 80077fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007800:	e7d4      	b.n	80077ac <_dtoa_r+0x2b4>
 8007802:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007806:	465b      	mov	r3, fp
 8007808:	f8cd b008 	str.w	fp, [sp, #8]
 800780c:	e7a6      	b.n	800775c <_dtoa_r+0x264>
 800780e:	3101      	adds	r1, #1
 8007810:	6041      	str	r1, [r0, #4]
 8007812:	0052      	lsls	r2, r2, #1
 8007814:	e7a6      	b.n	8007764 <_dtoa_r+0x26c>
 8007816:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007818:	9a08      	ldr	r2, [sp, #32]
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	9b02      	ldr	r3, [sp, #8]
 800781e:	2b0e      	cmp	r3, #14
 8007820:	f200 80a8 	bhi.w	8007974 <_dtoa_r+0x47c>
 8007824:	2c00      	cmp	r4, #0
 8007826:	f000 80a5 	beq.w	8007974 <_dtoa_r+0x47c>
 800782a:	f1b9 0f00 	cmp.w	r9, #0
 800782e:	dd34      	ble.n	800789a <_dtoa_r+0x3a2>
 8007830:	4a9a      	ldr	r2, [pc, #616]	; (8007a9c <_dtoa_r+0x5a4>)
 8007832:	f009 030f 	and.w	r3, r9, #15
 8007836:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800783a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800783e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007842:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007846:	ea4f 1429 	mov.w	r4, r9, asr #4
 800784a:	d016      	beq.n	800787a <_dtoa_r+0x382>
 800784c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007850:	4b93      	ldr	r3, [pc, #588]	; (8007aa0 <_dtoa_r+0x5a8>)
 8007852:	2703      	movs	r7, #3
 8007854:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007858:	f7f8 ff68 	bl	800072c <__aeabi_ddiv>
 800785c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007860:	f004 040f 	and.w	r4, r4, #15
 8007864:	4e8e      	ldr	r6, [pc, #568]	; (8007aa0 <_dtoa_r+0x5a8>)
 8007866:	b954      	cbnz	r4, 800787e <_dtoa_r+0x386>
 8007868:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800786c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007870:	f7f8 ff5c 	bl	800072c <__aeabi_ddiv>
 8007874:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007878:	e029      	b.n	80078ce <_dtoa_r+0x3d6>
 800787a:	2702      	movs	r7, #2
 800787c:	e7f2      	b.n	8007864 <_dtoa_r+0x36c>
 800787e:	07e1      	lsls	r1, r4, #31
 8007880:	d508      	bpl.n	8007894 <_dtoa_r+0x39c>
 8007882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007886:	e9d6 2300 	ldrd	r2, r3, [r6]
 800788a:	f7f8 fe25 	bl	80004d8 <__aeabi_dmul>
 800788e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007892:	3701      	adds	r7, #1
 8007894:	1064      	asrs	r4, r4, #1
 8007896:	3608      	adds	r6, #8
 8007898:	e7e5      	b.n	8007866 <_dtoa_r+0x36e>
 800789a:	f000 80a5 	beq.w	80079e8 <_dtoa_r+0x4f0>
 800789e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078a2:	f1c9 0400 	rsb	r4, r9, #0
 80078a6:	4b7d      	ldr	r3, [pc, #500]	; (8007a9c <_dtoa_r+0x5a4>)
 80078a8:	f004 020f 	and.w	r2, r4, #15
 80078ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f7f8 fe10 	bl	80004d8 <__aeabi_dmul>
 80078b8:	2702      	movs	r7, #2
 80078ba:	2300      	movs	r3, #0
 80078bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078c0:	4e77      	ldr	r6, [pc, #476]	; (8007aa0 <_dtoa_r+0x5a8>)
 80078c2:	1124      	asrs	r4, r4, #4
 80078c4:	2c00      	cmp	r4, #0
 80078c6:	f040 8084 	bne.w	80079d2 <_dtoa_r+0x4da>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1d2      	bne.n	8007874 <_dtoa_r+0x37c>
 80078ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 808b 	beq.w	80079ec <_dtoa_r+0x4f4>
 80078d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80078da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80078de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078e2:	2200      	movs	r2, #0
 80078e4:	4b6f      	ldr	r3, [pc, #444]	; (8007aa4 <_dtoa_r+0x5ac>)
 80078e6:	f7f9 f869 	bl	80009bc <__aeabi_dcmplt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d07e      	beq.n	80079ec <_dtoa_r+0x4f4>
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d07b      	beq.n	80079ec <_dtoa_r+0x4f4>
 80078f4:	f1bb 0f00 	cmp.w	fp, #0
 80078f8:	dd38      	ble.n	800796c <_dtoa_r+0x474>
 80078fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078fe:	2200      	movs	r2, #0
 8007900:	4b69      	ldr	r3, [pc, #420]	; (8007aa8 <_dtoa_r+0x5b0>)
 8007902:	f7f8 fde9 	bl	80004d8 <__aeabi_dmul>
 8007906:	465c      	mov	r4, fp
 8007908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800790c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8007910:	3701      	adds	r7, #1
 8007912:	4638      	mov	r0, r7
 8007914:	f7f8 fd76 	bl	8000404 <__aeabi_i2d>
 8007918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800791c:	f7f8 fddc 	bl	80004d8 <__aeabi_dmul>
 8007920:	2200      	movs	r2, #0
 8007922:	4b62      	ldr	r3, [pc, #392]	; (8007aac <_dtoa_r+0x5b4>)
 8007924:	f7f8 fc22 	bl	800016c <__adddf3>
 8007928:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800792c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007930:	9611      	str	r6, [sp, #68]	; 0x44
 8007932:	2c00      	cmp	r4, #0
 8007934:	d15d      	bne.n	80079f2 <_dtoa_r+0x4fa>
 8007936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800793a:	2200      	movs	r2, #0
 800793c:	4b5c      	ldr	r3, [pc, #368]	; (8007ab0 <_dtoa_r+0x5b8>)
 800793e:	f7f8 fc13 	bl	8000168 <__aeabi_dsub>
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800794a:	4633      	mov	r3, r6
 800794c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800794e:	f7f9 f853 	bl	80009f8 <__aeabi_dcmpgt>
 8007952:	2800      	cmp	r0, #0
 8007954:	f040 829e 	bne.w	8007e94 <_dtoa_r+0x99c>
 8007958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800795c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800795e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007962:	f7f9 f82b 	bl	80009bc <__aeabi_dcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	f040 8292 	bne.w	8007e90 <_dtoa_r+0x998>
 800796c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007970:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007976:	2b00      	cmp	r3, #0
 8007978:	f2c0 8153 	blt.w	8007c22 <_dtoa_r+0x72a>
 800797c:	f1b9 0f0e 	cmp.w	r9, #14
 8007980:	f300 814f 	bgt.w	8007c22 <_dtoa_r+0x72a>
 8007984:	4b45      	ldr	r3, [pc, #276]	; (8007a9c <_dtoa_r+0x5a4>)
 8007986:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800798a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800798e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007992:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007994:	2b00      	cmp	r3, #0
 8007996:	f280 80db 	bge.w	8007b50 <_dtoa_r+0x658>
 800799a:	9b02      	ldr	r3, [sp, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f300 80d7 	bgt.w	8007b50 <_dtoa_r+0x658>
 80079a2:	f040 8274 	bne.w	8007e8e <_dtoa_r+0x996>
 80079a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079aa:	2200      	movs	r2, #0
 80079ac:	4b40      	ldr	r3, [pc, #256]	; (8007ab0 <_dtoa_r+0x5b8>)
 80079ae:	f7f8 fd93 	bl	80004d8 <__aeabi_dmul>
 80079b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079b6:	f7f9 f815 	bl	80009e4 <__aeabi_dcmpge>
 80079ba:	9c02      	ldr	r4, [sp, #8]
 80079bc:	4626      	mov	r6, r4
 80079be:	2800      	cmp	r0, #0
 80079c0:	f040 824a 	bne.w	8007e58 <_dtoa_r+0x960>
 80079c4:	2331      	movs	r3, #49	; 0x31
 80079c6:	9f08      	ldr	r7, [sp, #32]
 80079c8:	f109 0901 	add.w	r9, r9, #1
 80079cc:	f807 3b01 	strb.w	r3, [r7], #1
 80079d0:	e246      	b.n	8007e60 <_dtoa_r+0x968>
 80079d2:	07e2      	lsls	r2, r4, #31
 80079d4:	d505      	bpl.n	80079e2 <_dtoa_r+0x4ea>
 80079d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079da:	f7f8 fd7d 	bl	80004d8 <__aeabi_dmul>
 80079de:	2301      	movs	r3, #1
 80079e0:	3701      	adds	r7, #1
 80079e2:	1064      	asrs	r4, r4, #1
 80079e4:	3608      	adds	r6, #8
 80079e6:	e76d      	b.n	80078c4 <_dtoa_r+0x3cc>
 80079e8:	2702      	movs	r7, #2
 80079ea:	e770      	b.n	80078ce <_dtoa_r+0x3d6>
 80079ec:	46c8      	mov	r8, r9
 80079ee:	9c02      	ldr	r4, [sp, #8]
 80079f0:	e78f      	b.n	8007912 <_dtoa_r+0x41a>
 80079f2:	9908      	ldr	r1, [sp, #32]
 80079f4:	4b29      	ldr	r3, [pc, #164]	; (8007a9c <_dtoa_r+0x5a4>)
 80079f6:	4421      	add	r1, r4
 80079f8:	9112      	str	r1, [sp, #72]	; 0x48
 80079fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a00:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a04:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a08:	2900      	cmp	r1, #0
 8007a0a:	d055      	beq.n	8007ab8 <_dtoa_r+0x5c0>
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	4929      	ldr	r1, [pc, #164]	; (8007ab4 <_dtoa_r+0x5bc>)
 8007a10:	f7f8 fe8c 	bl	800072c <__aeabi_ddiv>
 8007a14:	463b      	mov	r3, r7
 8007a16:	4632      	mov	r2, r6
 8007a18:	f7f8 fba6 	bl	8000168 <__aeabi_dsub>
 8007a1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a20:	9f08      	ldr	r7, [sp, #32]
 8007a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a26:	f7f9 f807 	bl	8000a38 <__aeabi_d2iz>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	f7f8 fcea 	bl	8000404 <__aeabi_i2d>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a38:	f7f8 fb96 	bl	8000168 <__aeabi_dsub>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	3430      	adds	r4, #48	; 0x30
 8007a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a4a:	f807 4b01 	strb.w	r4, [r7], #1
 8007a4e:	f7f8 ffb5 	bl	80009bc <__aeabi_dcmplt>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d174      	bne.n	8007b40 <_dtoa_r+0x648>
 8007a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	4911      	ldr	r1, [pc, #68]	; (8007aa4 <_dtoa_r+0x5ac>)
 8007a5e:	f7f8 fb83 	bl	8000168 <__aeabi_dsub>
 8007a62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a66:	f7f8 ffa9 	bl	80009bc <__aeabi_dcmplt>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f040 80b6 	bne.w	8007bdc <_dtoa_r+0x6e4>
 8007a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a72:	429f      	cmp	r7, r3
 8007a74:	f43f af7a 	beq.w	800796c <_dtoa_r+0x474>
 8007a78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <_dtoa_r+0x5b0>)
 8007a80:	f7f8 fd2a 	bl	80004d8 <__aeabi_dmul>
 8007a84:	2200      	movs	r2, #0
 8007a86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a8e:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <_dtoa_r+0x5b0>)
 8007a90:	f7f8 fd22 	bl	80004d8 <__aeabi_dmul>
 8007a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a98:	e7c3      	b.n	8007a22 <_dtoa_r+0x52a>
 8007a9a:	bf00      	nop
 8007a9c:	0800b058 	.word	0x0800b058
 8007aa0:	0800b030 	.word	0x0800b030
 8007aa4:	3ff00000 	.word	0x3ff00000
 8007aa8:	40240000 	.word	0x40240000
 8007aac:	401c0000 	.word	0x401c0000
 8007ab0:	40140000 	.word	0x40140000
 8007ab4:	3fe00000 	.word	0x3fe00000
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	f7f8 fd0c 	bl	80004d8 <__aeabi_dmul>
 8007ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ac6:	9c08      	ldr	r4, [sp, #32]
 8007ac8:	9314      	str	r3, [sp, #80]	; 0x50
 8007aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ace:	f7f8 ffb3 	bl	8000a38 <__aeabi_d2iz>
 8007ad2:	9015      	str	r0, [sp, #84]	; 0x54
 8007ad4:	f7f8 fc96 	bl	8000404 <__aeabi_i2d>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ae0:	f7f8 fb42 	bl	8000168 <__aeabi_dsub>
 8007ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	3330      	adds	r3, #48	; 0x30
 8007aea:	f804 3b01 	strb.w	r3, [r4], #1
 8007aee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007af0:	460f      	mov	r7, r1
 8007af2:	429c      	cmp	r4, r3
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	d124      	bne.n	8007b44 <_dtoa_r+0x64c>
 8007afa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007afe:	4bb3      	ldr	r3, [pc, #716]	; (8007dcc <_dtoa_r+0x8d4>)
 8007b00:	f7f8 fb34 	bl	800016c <__adddf3>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	f7f8 ff74 	bl	80009f8 <__aeabi_dcmpgt>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d162      	bne.n	8007bda <_dtoa_r+0x6e2>
 8007b14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b18:	2000      	movs	r0, #0
 8007b1a:	49ac      	ldr	r1, [pc, #688]	; (8007dcc <_dtoa_r+0x8d4>)
 8007b1c:	f7f8 fb24 	bl	8000168 <__aeabi_dsub>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4630      	mov	r0, r6
 8007b26:	4639      	mov	r1, r7
 8007b28:	f7f8 ff48 	bl	80009bc <__aeabi_dcmplt>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f43f af1d 	beq.w	800796c <_dtoa_r+0x474>
 8007b32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007b34:	1e7b      	subs	r3, r7, #1
 8007b36:	9314      	str	r3, [sp, #80]	; 0x50
 8007b38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007b3c:	2b30      	cmp	r3, #48	; 0x30
 8007b3e:	d0f8      	beq.n	8007b32 <_dtoa_r+0x63a>
 8007b40:	46c1      	mov	r9, r8
 8007b42:	e03a      	b.n	8007bba <_dtoa_r+0x6c2>
 8007b44:	4ba2      	ldr	r3, [pc, #648]	; (8007dd0 <_dtoa_r+0x8d8>)
 8007b46:	f7f8 fcc7 	bl	80004d8 <__aeabi_dmul>
 8007b4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b4e:	e7bc      	b.n	8007aca <_dtoa_r+0x5d2>
 8007b50:	9f08      	ldr	r7, [sp, #32]
 8007b52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b5a:	f7f8 fde7 	bl	800072c <__aeabi_ddiv>
 8007b5e:	f7f8 ff6b 	bl	8000a38 <__aeabi_d2iz>
 8007b62:	4604      	mov	r4, r0
 8007b64:	f7f8 fc4e 	bl	8000404 <__aeabi_i2d>
 8007b68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b6c:	f7f8 fcb4 	bl	80004d8 <__aeabi_dmul>
 8007b70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007b74:	460b      	mov	r3, r1
 8007b76:	4602      	mov	r2, r0
 8007b78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b7c:	f7f8 faf4 	bl	8000168 <__aeabi_dsub>
 8007b80:	f807 6b01 	strb.w	r6, [r7], #1
 8007b84:	9e08      	ldr	r6, [sp, #32]
 8007b86:	9b02      	ldr	r3, [sp, #8]
 8007b88:	1bbe      	subs	r6, r7, r6
 8007b8a:	42b3      	cmp	r3, r6
 8007b8c:	d13a      	bne.n	8007c04 <_dtoa_r+0x70c>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	f7f8 faeb 	bl	800016c <__adddf3>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ba2:	f7f8 ff29 	bl	80009f8 <__aeabi_dcmpgt>
 8007ba6:	bb58      	cbnz	r0, 8007c00 <_dtoa_r+0x708>
 8007ba8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bb0:	f7f8 fefa 	bl	80009a8 <__aeabi_dcmpeq>
 8007bb4:	b108      	cbz	r0, 8007bba <_dtoa_r+0x6c2>
 8007bb6:	07e1      	lsls	r1, r4, #31
 8007bb8:	d422      	bmi.n	8007c00 <_dtoa_r+0x708>
 8007bba:	4628      	mov	r0, r5
 8007bbc:	4651      	mov	r1, sl
 8007bbe:	f000 faf1 	bl	80081a4 <_Bfree>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	703b      	strb	r3, [r7, #0]
 8007bc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007bc8:	f109 0001 	add.w	r0, r9, #1
 8007bcc:	6018      	str	r0, [r3, #0]
 8007bce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f43f acdf 	beq.w	8007594 <_dtoa_r+0x9c>
 8007bd6:	601f      	str	r7, [r3, #0]
 8007bd8:	e4dc      	b.n	8007594 <_dtoa_r+0x9c>
 8007bda:	4627      	mov	r7, r4
 8007bdc:	463b      	mov	r3, r7
 8007bde:	461f      	mov	r7, r3
 8007be0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007be4:	2a39      	cmp	r2, #57	; 0x39
 8007be6:	d107      	bne.n	8007bf8 <_dtoa_r+0x700>
 8007be8:	9a08      	ldr	r2, [sp, #32]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d1f7      	bne.n	8007bde <_dtoa_r+0x6e6>
 8007bee:	2230      	movs	r2, #48	; 0x30
 8007bf0:	9908      	ldr	r1, [sp, #32]
 8007bf2:	f108 0801 	add.w	r8, r8, #1
 8007bf6:	700a      	strb	r2, [r1, #0]
 8007bf8:	781a      	ldrb	r2, [r3, #0]
 8007bfa:	3201      	adds	r2, #1
 8007bfc:	701a      	strb	r2, [r3, #0]
 8007bfe:	e79f      	b.n	8007b40 <_dtoa_r+0x648>
 8007c00:	46c8      	mov	r8, r9
 8007c02:	e7eb      	b.n	8007bdc <_dtoa_r+0x6e4>
 8007c04:	2200      	movs	r2, #0
 8007c06:	4b72      	ldr	r3, [pc, #456]	; (8007dd0 <_dtoa_r+0x8d8>)
 8007c08:	f7f8 fc66 	bl	80004d8 <__aeabi_dmul>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c14:	2200      	movs	r2, #0
 8007c16:	2300      	movs	r3, #0
 8007c18:	f7f8 fec6 	bl	80009a8 <__aeabi_dcmpeq>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d098      	beq.n	8007b52 <_dtoa_r+0x65a>
 8007c20:	e7cb      	b.n	8007bba <_dtoa_r+0x6c2>
 8007c22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	f000 80cd 	beq.w	8007dc4 <_dtoa_r+0x8cc>
 8007c2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c2c:	2a01      	cmp	r2, #1
 8007c2e:	f300 80af 	bgt.w	8007d90 <_dtoa_r+0x898>
 8007c32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	f000 80a7 	beq.w	8007d88 <_dtoa_r+0x890>
 8007c3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c40:	9f06      	ldr	r7, [sp, #24]
 8007c42:	9a06      	ldr	r2, [sp, #24]
 8007c44:	2101      	movs	r1, #1
 8007c46:	441a      	add	r2, r3
 8007c48:	9206      	str	r2, [sp, #24]
 8007c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	441a      	add	r2, r3
 8007c50:	9209      	str	r2, [sp, #36]	; 0x24
 8007c52:	f000 fb61 	bl	8008318 <__i2b>
 8007c56:	4606      	mov	r6, r0
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	dd0c      	ble.n	8007c76 <_dtoa_r+0x77e>
 8007c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	dd09      	ble.n	8007c76 <_dtoa_r+0x77e>
 8007c62:	42bb      	cmp	r3, r7
 8007c64:	bfa8      	it	ge
 8007c66:	463b      	movge	r3, r7
 8007c68:	9a06      	ldr	r2, [sp, #24]
 8007c6a:	1aff      	subs	r7, r7, r3
 8007c6c:	1ad2      	subs	r2, r2, r3
 8007c6e:	9206      	str	r2, [sp, #24]
 8007c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	9309      	str	r3, [sp, #36]	; 0x24
 8007c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c78:	b1f3      	cbz	r3, 8007cb8 <_dtoa_r+0x7c0>
 8007c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80a9 	beq.w	8007dd4 <_dtoa_r+0x8dc>
 8007c82:	2c00      	cmp	r4, #0
 8007c84:	dd10      	ble.n	8007ca8 <_dtoa_r+0x7b0>
 8007c86:	4631      	mov	r1, r6
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f000 fbfe 	bl	800848c <__pow5mult>
 8007c90:	4652      	mov	r2, sl
 8007c92:	4601      	mov	r1, r0
 8007c94:	4606      	mov	r6, r0
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 fb54 	bl	8008344 <__multiply>
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	4651      	mov	r1, sl
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 fa7f 	bl	80081a4 <_Bfree>
 8007ca6:	46c2      	mov	sl, r8
 8007ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007caa:	1b1a      	subs	r2, r3, r4
 8007cac:	d004      	beq.n	8007cb8 <_dtoa_r+0x7c0>
 8007cae:	4651      	mov	r1, sl
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f000 fbeb 	bl	800848c <__pow5mult>
 8007cb6:	4682      	mov	sl, r0
 8007cb8:	2101      	movs	r1, #1
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f000 fb2c 	bl	8008318 <__i2b>
 8007cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f340 8087 	ble.w	8007dd8 <_dtoa_r+0x8e0>
 8007cca:	461a      	mov	r2, r3
 8007ccc:	4601      	mov	r1, r0
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f000 fbdc 	bl	800848c <__pow5mult>
 8007cd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	f340 8080 	ble.w	8007dde <_dtoa_r+0x8e6>
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ce8:	6918      	ldr	r0, [r3, #16]
 8007cea:	f000 fac7 	bl	800827c <__hi0bits>
 8007cee:	f1c0 0020 	rsb	r0, r0, #32
 8007cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf4:	4418      	add	r0, r3
 8007cf6:	f010 001f 	ands.w	r0, r0, #31
 8007cfa:	f000 8092 	beq.w	8007e22 <_dtoa_r+0x92a>
 8007cfe:	f1c0 0320 	rsb	r3, r0, #32
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	f340 808a 	ble.w	8007e1c <_dtoa_r+0x924>
 8007d08:	f1c0 001c 	rsb	r0, r0, #28
 8007d0c:	9b06      	ldr	r3, [sp, #24]
 8007d0e:	4407      	add	r7, r0
 8007d10:	4403      	add	r3, r0
 8007d12:	9306      	str	r3, [sp, #24]
 8007d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d16:	4403      	add	r3, r0
 8007d18:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1a:	9b06      	ldr	r3, [sp, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dd05      	ble.n	8007d2c <_dtoa_r+0x834>
 8007d20:	4651      	mov	r1, sl
 8007d22:	461a      	mov	r2, r3
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 fc0b 	bl	8008540 <__lshift>
 8007d2a:	4682      	mov	sl, r0
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dd05      	ble.n	8007d3e <_dtoa_r+0x846>
 8007d32:	4621      	mov	r1, r4
 8007d34:	461a      	mov	r2, r3
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 fc02 	bl	8008540 <__lshift>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d070      	beq.n	8007e26 <_dtoa_r+0x92e>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4650      	mov	r0, sl
 8007d48:	f000 fc66 	bl	8008618 <__mcmp>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	da6a      	bge.n	8007e26 <_dtoa_r+0x92e>
 8007d50:	2300      	movs	r3, #0
 8007d52:	4651      	mov	r1, sl
 8007d54:	220a      	movs	r2, #10
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 fa46 	bl	80081e8 <__multadd>
 8007d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d5e:	4682      	mov	sl, r0
 8007d60:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8193 	beq.w	8008090 <_dtoa_r+0xb98>
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	220a      	movs	r2, #10
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 fa39 	bl	80081e8 <__multadd>
 8007d76:	f1bb 0f00 	cmp.w	fp, #0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	f300 8093 	bgt.w	8007ea6 <_dtoa_r+0x9ae>
 8007d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	dc57      	bgt.n	8007e36 <_dtoa_r+0x93e>
 8007d86:	e08e      	b.n	8007ea6 <_dtoa_r+0x9ae>
 8007d88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d8a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d8e:	e756      	b.n	8007c3e <_dtoa_r+0x746>
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	1e5c      	subs	r4, r3, #1
 8007d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d96:	42a3      	cmp	r3, r4
 8007d98:	bfb7      	itett	lt
 8007d9a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d9c:	1b1c      	subge	r4, r3, r4
 8007d9e:	1ae2      	sublt	r2, r4, r3
 8007da0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007da2:	bfbe      	ittt	lt
 8007da4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007da6:	189b      	addlt	r3, r3, r2
 8007da8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007daa:	9b02      	ldr	r3, [sp, #8]
 8007dac:	bfb8      	it	lt
 8007dae:	2400      	movlt	r4, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bfbb      	ittet	lt
 8007db4:	9b06      	ldrlt	r3, [sp, #24]
 8007db6:	9a02      	ldrlt	r2, [sp, #8]
 8007db8:	9f06      	ldrge	r7, [sp, #24]
 8007dba:	1a9f      	sublt	r7, r3, r2
 8007dbc:	bfac      	ite	ge
 8007dbe:	9b02      	ldrge	r3, [sp, #8]
 8007dc0:	2300      	movlt	r3, #0
 8007dc2:	e73e      	b.n	8007c42 <_dtoa_r+0x74a>
 8007dc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dc6:	9f06      	ldr	r7, [sp, #24]
 8007dc8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007dca:	e745      	b.n	8007c58 <_dtoa_r+0x760>
 8007dcc:	3fe00000 	.word	0x3fe00000
 8007dd0:	40240000 	.word	0x40240000
 8007dd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dd6:	e76a      	b.n	8007cae <_dtoa_r+0x7b6>
 8007dd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	dc19      	bgt.n	8007e12 <_dtoa_r+0x91a>
 8007dde:	9b04      	ldr	r3, [sp, #16]
 8007de0:	b9bb      	cbnz	r3, 8007e12 <_dtoa_r+0x91a>
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007de8:	b99b      	cbnz	r3, 8007e12 <_dtoa_r+0x91a>
 8007dea:	9b05      	ldr	r3, [sp, #20]
 8007dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007df0:	0d1b      	lsrs	r3, r3, #20
 8007df2:	051b      	lsls	r3, r3, #20
 8007df4:	b183      	cbz	r3, 8007e18 <_dtoa_r+0x920>
 8007df6:	f04f 0801 	mov.w	r8, #1
 8007dfa:	9b06      	ldr	r3, [sp, #24]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	9306      	str	r3, [sp, #24]
 8007e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e02:	3301      	adds	r3, #1
 8007e04:	9309      	str	r3, [sp, #36]	; 0x24
 8007e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f47f af6a 	bne.w	8007ce2 <_dtoa_r+0x7ea>
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e76f      	b.n	8007cf2 <_dtoa_r+0x7fa>
 8007e12:	f04f 0800 	mov.w	r8, #0
 8007e16:	e7f6      	b.n	8007e06 <_dtoa_r+0x90e>
 8007e18:	4698      	mov	r8, r3
 8007e1a:	e7f4      	b.n	8007e06 <_dtoa_r+0x90e>
 8007e1c:	f43f af7d 	beq.w	8007d1a <_dtoa_r+0x822>
 8007e20:	4618      	mov	r0, r3
 8007e22:	301c      	adds	r0, #28
 8007e24:	e772      	b.n	8007d0c <_dtoa_r+0x814>
 8007e26:	9b02      	ldr	r3, [sp, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	dc36      	bgt.n	8007e9a <_dtoa_r+0x9a2>
 8007e2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	dd33      	ble.n	8007e9a <_dtoa_r+0x9a2>
 8007e32:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007e36:	f1bb 0f00 	cmp.w	fp, #0
 8007e3a:	d10d      	bne.n	8007e58 <_dtoa_r+0x960>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	465b      	mov	r3, fp
 8007e40:	2205      	movs	r2, #5
 8007e42:	4628      	mov	r0, r5
 8007e44:	f000 f9d0 	bl	80081e8 <__multadd>
 8007e48:	4601      	mov	r1, r0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	f000 fbe3 	bl	8008618 <__mcmp>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	f73f adb6 	bgt.w	80079c4 <_dtoa_r+0x4cc>
 8007e58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e5a:	9f08      	ldr	r7, [sp, #32]
 8007e5c:	ea6f 0903 	mvn.w	r9, r3
 8007e60:	f04f 0800 	mov.w	r8, #0
 8007e64:	4621      	mov	r1, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 f99c 	bl	80081a4 <_Bfree>
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	f43f aea4 	beq.w	8007bba <_dtoa_r+0x6c2>
 8007e72:	f1b8 0f00 	cmp.w	r8, #0
 8007e76:	d005      	beq.n	8007e84 <_dtoa_r+0x98c>
 8007e78:	45b0      	cmp	r8, r6
 8007e7a:	d003      	beq.n	8007e84 <_dtoa_r+0x98c>
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 f990 	bl	80081a4 <_Bfree>
 8007e84:	4631      	mov	r1, r6
 8007e86:	4628      	mov	r0, r5
 8007e88:	f000 f98c 	bl	80081a4 <_Bfree>
 8007e8c:	e695      	b.n	8007bba <_dtoa_r+0x6c2>
 8007e8e:	2400      	movs	r4, #0
 8007e90:	4626      	mov	r6, r4
 8007e92:	e7e1      	b.n	8007e58 <_dtoa_r+0x960>
 8007e94:	46c1      	mov	r9, r8
 8007e96:	4626      	mov	r6, r4
 8007e98:	e594      	b.n	80079c4 <_dtoa_r+0x4cc>
 8007e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e9c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80fc 	beq.w	800809e <_dtoa_r+0xba6>
 8007ea6:	2f00      	cmp	r7, #0
 8007ea8:	dd05      	ble.n	8007eb6 <_dtoa_r+0x9be>
 8007eaa:	4631      	mov	r1, r6
 8007eac:	463a      	mov	r2, r7
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 fb46 	bl	8008540 <__lshift>
 8007eb4:	4606      	mov	r6, r0
 8007eb6:	f1b8 0f00 	cmp.w	r8, #0
 8007eba:	d05c      	beq.n	8007f76 <_dtoa_r+0xa7e>
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	6871      	ldr	r1, [r6, #4]
 8007ec0:	f000 f930 	bl	8008124 <_Balloc>
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	b928      	cbnz	r0, 8007ed4 <_dtoa_r+0x9dc>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ece:	4b7e      	ldr	r3, [pc, #504]	; (80080c8 <_dtoa_r+0xbd0>)
 8007ed0:	f7ff bb26 	b.w	8007520 <_dtoa_r+0x28>
 8007ed4:	6932      	ldr	r2, [r6, #16]
 8007ed6:	f106 010c 	add.w	r1, r6, #12
 8007eda:	3202      	adds	r2, #2
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	300c      	adds	r0, #12
 8007ee0:	f000 f912 	bl	8008108 <memcpy>
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f000 fb29 	bl	8008540 <__lshift>
 8007eee:	46b0      	mov	r8, r6
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	9b08      	ldr	r3, [sp, #32]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	9302      	str	r3, [sp, #8]
 8007ef8:	9b08      	ldr	r3, [sp, #32]
 8007efa:	445b      	add	r3, fp
 8007efc:	930a      	str	r3, [sp, #40]	; 0x28
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	9309      	str	r3, [sp, #36]	; 0x24
 8007f06:	9b02      	ldr	r3, [sp, #8]
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007f10:	f7ff fa64 	bl	80073dc <quorem>
 8007f14:	4603      	mov	r3, r0
 8007f16:	4641      	mov	r1, r8
 8007f18:	3330      	adds	r3, #48	; 0x30
 8007f1a:	9004      	str	r0, [sp, #16]
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f20:	f000 fb7a 	bl	8008618 <__mcmp>
 8007f24:	4632      	mov	r2, r6
 8007f26:	9006      	str	r0, [sp, #24]
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 fb90 	bl	8008650 <__mdiff>
 8007f30:	68c2      	ldr	r2, [r0, #12]
 8007f32:	4607      	mov	r7, r0
 8007f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f36:	bb02      	cbnz	r2, 8007f7a <_dtoa_r+0xa82>
 8007f38:	4601      	mov	r1, r0
 8007f3a:	4650      	mov	r0, sl
 8007f3c:	f000 fb6c 	bl	8008618 <__mcmp>
 8007f40:	4602      	mov	r2, r0
 8007f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f44:	4639      	mov	r1, r7
 8007f46:	4628      	mov	r0, r5
 8007f48:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007f4c:	f000 f92a 	bl	80081a4 <_Bfree>
 8007f50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f54:	9f02      	ldr	r7, [sp, #8]
 8007f56:	ea43 0102 	orr.w	r1, r3, r2
 8007f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f60:	d10d      	bne.n	8007f7e <_dtoa_r+0xa86>
 8007f62:	2b39      	cmp	r3, #57	; 0x39
 8007f64:	d027      	beq.n	8007fb6 <_dtoa_r+0xabe>
 8007f66:	9a06      	ldr	r2, [sp, #24]
 8007f68:	2a00      	cmp	r2, #0
 8007f6a:	dd01      	ble.n	8007f70 <_dtoa_r+0xa78>
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	3331      	adds	r3, #49	; 0x31
 8007f70:	f88b 3000 	strb.w	r3, [fp]
 8007f74:	e776      	b.n	8007e64 <_dtoa_r+0x96c>
 8007f76:	4630      	mov	r0, r6
 8007f78:	e7b9      	b.n	8007eee <_dtoa_r+0x9f6>
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	e7e2      	b.n	8007f44 <_dtoa_r+0xa4c>
 8007f7e:	9906      	ldr	r1, [sp, #24]
 8007f80:	2900      	cmp	r1, #0
 8007f82:	db04      	blt.n	8007f8e <_dtoa_r+0xa96>
 8007f84:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007f86:	4301      	orrs	r1, r0
 8007f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f8a:	4301      	orrs	r1, r0
 8007f8c:	d120      	bne.n	8007fd0 <_dtoa_r+0xad8>
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	ddee      	ble.n	8007f70 <_dtoa_r+0xa78>
 8007f92:	4651      	mov	r1, sl
 8007f94:	2201      	movs	r2, #1
 8007f96:	4628      	mov	r0, r5
 8007f98:	9302      	str	r3, [sp, #8]
 8007f9a:	f000 fad1 	bl	8008540 <__lshift>
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4682      	mov	sl, r0
 8007fa2:	f000 fb39 	bl	8008618 <__mcmp>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	dc02      	bgt.n	8007fb2 <_dtoa_r+0xaba>
 8007fac:	d1e0      	bne.n	8007f70 <_dtoa_r+0xa78>
 8007fae:	07da      	lsls	r2, r3, #31
 8007fb0:	d5de      	bpl.n	8007f70 <_dtoa_r+0xa78>
 8007fb2:	2b39      	cmp	r3, #57	; 0x39
 8007fb4:	d1da      	bne.n	8007f6c <_dtoa_r+0xa74>
 8007fb6:	2339      	movs	r3, #57	; 0x39
 8007fb8:	f88b 3000 	strb.w	r3, [fp]
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	461f      	mov	r7, r3
 8007fc0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	2a39      	cmp	r2, #57	; 0x39
 8007fc8:	d050      	beq.n	800806c <_dtoa_r+0xb74>
 8007fca:	3201      	adds	r2, #1
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e749      	b.n	8007e64 <_dtoa_r+0x96c>
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	dd03      	ble.n	8007fdc <_dtoa_r+0xae4>
 8007fd4:	2b39      	cmp	r3, #57	; 0x39
 8007fd6:	d0ee      	beq.n	8007fb6 <_dtoa_r+0xabe>
 8007fd8:	3301      	adds	r3, #1
 8007fda:	e7c9      	b.n	8007f70 <_dtoa_r+0xa78>
 8007fdc:	9a02      	ldr	r2, [sp, #8]
 8007fde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fe0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007fe4:	428a      	cmp	r2, r1
 8007fe6:	d02a      	beq.n	800803e <_dtoa_r+0xb46>
 8007fe8:	4651      	mov	r1, sl
 8007fea:	2300      	movs	r3, #0
 8007fec:	220a      	movs	r2, #10
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f000 f8fa 	bl	80081e8 <__multadd>
 8007ff4:	45b0      	cmp	r8, r6
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	f04f 020a 	mov.w	r2, #10
 8008000:	4641      	mov	r1, r8
 8008002:	4628      	mov	r0, r5
 8008004:	d107      	bne.n	8008016 <_dtoa_r+0xb1e>
 8008006:	f000 f8ef 	bl	80081e8 <__multadd>
 800800a:	4680      	mov	r8, r0
 800800c:	4606      	mov	r6, r0
 800800e:	9b02      	ldr	r3, [sp, #8]
 8008010:	3301      	adds	r3, #1
 8008012:	9302      	str	r3, [sp, #8]
 8008014:	e777      	b.n	8007f06 <_dtoa_r+0xa0e>
 8008016:	f000 f8e7 	bl	80081e8 <__multadd>
 800801a:	4631      	mov	r1, r6
 800801c:	4680      	mov	r8, r0
 800801e:	2300      	movs	r3, #0
 8008020:	220a      	movs	r2, #10
 8008022:	4628      	mov	r0, r5
 8008024:	f000 f8e0 	bl	80081e8 <__multadd>
 8008028:	4606      	mov	r6, r0
 800802a:	e7f0      	b.n	800800e <_dtoa_r+0xb16>
 800802c:	f1bb 0f00 	cmp.w	fp, #0
 8008030:	bfcc      	ite	gt
 8008032:	465f      	movgt	r7, fp
 8008034:	2701      	movle	r7, #1
 8008036:	f04f 0800 	mov.w	r8, #0
 800803a:	9a08      	ldr	r2, [sp, #32]
 800803c:	4417      	add	r7, r2
 800803e:	4651      	mov	r1, sl
 8008040:	2201      	movs	r2, #1
 8008042:	4628      	mov	r0, r5
 8008044:	9302      	str	r3, [sp, #8]
 8008046:	f000 fa7b 	bl	8008540 <__lshift>
 800804a:	4621      	mov	r1, r4
 800804c:	4682      	mov	sl, r0
 800804e:	f000 fae3 	bl	8008618 <__mcmp>
 8008052:	2800      	cmp	r0, #0
 8008054:	dcb2      	bgt.n	8007fbc <_dtoa_r+0xac4>
 8008056:	d102      	bne.n	800805e <_dtoa_r+0xb66>
 8008058:	9b02      	ldr	r3, [sp, #8]
 800805a:	07db      	lsls	r3, r3, #31
 800805c:	d4ae      	bmi.n	8007fbc <_dtoa_r+0xac4>
 800805e:	463b      	mov	r3, r7
 8008060:	461f      	mov	r7, r3
 8008062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008066:	2a30      	cmp	r2, #48	; 0x30
 8008068:	d0fa      	beq.n	8008060 <_dtoa_r+0xb68>
 800806a:	e6fb      	b.n	8007e64 <_dtoa_r+0x96c>
 800806c:	9a08      	ldr	r2, [sp, #32]
 800806e:	429a      	cmp	r2, r3
 8008070:	d1a5      	bne.n	8007fbe <_dtoa_r+0xac6>
 8008072:	2331      	movs	r3, #49	; 0x31
 8008074:	f109 0901 	add.w	r9, r9, #1
 8008078:	7013      	strb	r3, [r2, #0]
 800807a:	e6f3      	b.n	8007e64 <_dtoa_r+0x96c>
 800807c:	4b13      	ldr	r3, [pc, #76]	; (80080cc <_dtoa_r+0xbd4>)
 800807e:	f7ff baa7 	b.w	80075d0 <_dtoa_r+0xd8>
 8008082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008084:	2b00      	cmp	r3, #0
 8008086:	f47f aa80 	bne.w	800758a <_dtoa_r+0x92>
 800808a:	4b11      	ldr	r3, [pc, #68]	; (80080d0 <_dtoa_r+0xbd8>)
 800808c:	f7ff baa0 	b.w	80075d0 <_dtoa_r+0xd8>
 8008090:	f1bb 0f00 	cmp.w	fp, #0
 8008094:	dc03      	bgt.n	800809e <_dtoa_r+0xba6>
 8008096:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008098:	2b02      	cmp	r3, #2
 800809a:	f73f aecc 	bgt.w	8007e36 <_dtoa_r+0x93e>
 800809e:	9f08      	ldr	r7, [sp, #32]
 80080a0:	4621      	mov	r1, r4
 80080a2:	4650      	mov	r0, sl
 80080a4:	f7ff f99a 	bl	80073dc <quorem>
 80080a8:	9a08      	ldr	r2, [sp, #32]
 80080aa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80080ae:	f807 3b01 	strb.w	r3, [r7], #1
 80080b2:	1aba      	subs	r2, r7, r2
 80080b4:	4593      	cmp	fp, r2
 80080b6:	ddb9      	ble.n	800802c <_dtoa_r+0xb34>
 80080b8:	4651      	mov	r1, sl
 80080ba:	2300      	movs	r3, #0
 80080bc:	220a      	movs	r2, #10
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 f892 	bl	80081e8 <__multadd>
 80080c4:	4682      	mov	sl, r0
 80080c6:	e7eb      	b.n	80080a0 <_dtoa_r+0xba8>
 80080c8:	0800afbb 	.word	0x0800afbb
 80080cc:	0800af14 	.word	0x0800af14
 80080d0:	0800af38 	.word	0x0800af38

080080d4 <_localeconv_r>:
 80080d4:	4800      	ldr	r0, [pc, #0]	; (80080d8 <_localeconv_r+0x4>)
 80080d6:	4770      	bx	lr
 80080d8:	20000160 	.word	0x20000160

080080dc <malloc>:
 80080dc:	4b02      	ldr	r3, [pc, #8]	; (80080e8 <malloc+0xc>)
 80080de:	4601      	mov	r1, r0
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	f000 bbfb 	b.w	80088dc <_malloc_r>
 80080e6:	bf00      	nop
 80080e8:	2000000c 	.word	0x2000000c

080080ec <memchr>:
 80080ec:	4603      	mov	r3, r0
 80080ee:	b510      	push	{r4, lr}
 80080f0:	b2c9      	uxtb	r1, r1
 80080f2:	4402      	add	r2, r0
 80080f4:	4293      	cmp	r3, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	d101      	bne.n	80080fe <memchr+0x12>
 80080fa:	2000      	movs	r0, #0
 80080fc:	e003      	b.n	8008106 <memchr+0x1a>
 80080fe:	7804      	ldrb	r4, [r0, #0]
 8008100:	3301      	adds	r3, #1
 8008102:	428c      	cmp	r4, r1
 8008104:	d1f6      	bne.n	80080f4 <memchr+0x8>
 8008106:	bd10      	pop	{r4, pc}

08008108 <memcpy>:
 8008108:	440a      	add	r2, r1
 800810a:	4291      	cmp	r1, r2
 800810c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008110:	d100      	bne.n	8008114 <memcpy+0xc>
 8008112:	4770      	bx	lr
 8008114:	b510      	push	{r4, lr}
 8008116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811a:	4291      	cmp	r1, r2
 800811c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008120:	d1f9      	bne.n	8008116 <memcpy+0xe>
 8008122:	bd10      	pop	{r4, pc}

08008124 <_Balloc>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008128:	4604      	mov	r4, r0
 800812a:	460d      	mov	r5, r1
 800812c:	b976      	cbnz	r6, 800814c <_Balloc+0x28>
 800812e:	2010      	movs	r0, #16
 8008130:	f7ff ffd4 	bl	80080dc <malloc>
 8008134:	4602      	mov	r2, r0
 8008136:	6260      	str	r0, [r4, #36]	; 0x24
 8008138:	b920      	cbnz	r0, 8008144 <_Balloc+0x20>
 800813a:	2166      	movs	r1, #102	; 0x66
 800813c:	4b17      	ldr	r3, [pc, #92]	; (800819c <_Balloc+0x78>)
 800813e:	4818      	ldr	r0, [pc, #96]	; (80081a0 <_Balloc+0x7c>)
 8008140:	f000 fd92 	bl	8008c68 <__assert_func>
 8008144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008148:	6006      	str	r6, [r0, #0]
 800814a:	60c6      	str	r6, [r0, #12]
 800814c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800814e:	68f3      	ldr	r3, [r6, #12]
 8008150:	b183      	cbz	r3, 8008174 <_Balloc+0x50>
 8008152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800815a:	b9b8      	cbnz	r0, 800818c <_Balloc+0x68>
 800815c:	2101      	movs	r1, #1
 800815e:	fa01 f605 	lsl.w	r6, r1, r5
 8008162:	1d72      	adds	r2, r6, #5
 8008164:	4620      	mov	r0, r4
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	f000 fb5e 	bl	8008828 <_calloc_r>
 800816c:	b160      	cbz	r0, 8008188 <_Balloc+0x64>
 800816e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008172:	e00e      	b.n	8008192 <_Balloc+0x6e>
 8008174:	2221      	movs	r2, #33	; 0x21
 8008176:	2104      	movs	r1, #4
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fb55 	bl	8008828 <_calloc_r>
 800817e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008180:	60f0      	str	r0, [r6, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e4      	bne.n	8008152 <_Balloc+0x2e>
 8008188:	2000      	movs	r0, #0
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	6802      	ldr	r2, [r0, #0]
 800818e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008192:	2300      	movs	r3, #0
 8008194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008198:	e7f7      	b.n	800818a <_Balloc+0x66>
 800819a:	bf00      	nop
 800819c:	0800af45 	.word	0x0800af45
 80081a0:	0800afcc 	.word	0x0800afcc

080081a4 <_Bfree>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081a8:	4605      	mov	r5, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	b976      	cbnz	r6, 80081cc <_Bfree+0x28>
 80081ae:	2010      	movs	r0, #16
 80081b0:	f7ff ff94 	bl	80080dc <malloc>
 80081b4:	4602      	mov	r2, r0
 80081b6:	6268      	str	r0, [r5, #36]	; 0x24
 80081b8:	b920      	cbnz	r0, 80081c4 <_Bfree+0x20>
 80081ba:	218a      	movs	r1, #138	; 0x8a
 80081bc:	4b08      	ldr	r3, [pc, #32]	; (80081e0 <_Bfree+0x3c>)
 80081be:	4809      	ldr	r0, [pc, #36]	; (80081e4 <_Bfree+0x40>)
 80081c0:	f000 fd52 	bl	8008c68 <__assert_func>
 80081c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081c8:	6006      	str	r6, [r0, #0]
 80081ca:	60c6      	str	r6, [r0, #12]
 80081cc:	b13c      	cbz	r4, 80081de <_Bfree+0x3a>
 80081ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081d0:	6862      	ldr	r2, [r4, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081d8:	6021      	str	r1, [r4, #0]
 80081da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	0800af45 	.word	0x0800af45
 80081e4:	0800afcc 	.word	0x0800afcc

080081e8 <__multadd>:
 80081e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ec:	4698      	mov	r8, r3
 80081ee:	460c      	mov	r4, r1
 80081f0:	2300      	movs	r3, #0
 80081f2:	690e      	ldr	r6, [r1, #16]
 80081f4:	4607      	mov	r7, r0
 80081f6:	f101 0014 	add.w	r0, r1, #20
 80081fa:	6805      	ldr	r5, [r0, #0]
 80081fc:	3301      	adds	r3, #1
 80081fe:	b2a9      	uxth	r1, r5
 8008200:	fb02 8101 	mla	r1, r2, r1, r8
 8008204:	0c2d      	lsrs	r5, r5, #16
 8008206:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800820a:	fb02 c505 	mla	r5, r2, r5, ip
 800820e:	b289      	uxth	r1, r1
 8008210:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008214:	429e      	cmp	r6, r3
 8008216:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800821a:	f840 1b04 	str.w	r1, [r0], #4
 800821e:	dcec      	bgt.n	80081fa <__multadd+0x12>
 8008220:	f1b8 0f00 	cmp.w	r8, #0
 8008224:	d022      	beq.n	800826c <__multadd+0x84>
 8008226:	68a3      	ldr	r3, [r4, #8]
 8008228:	42b3      	cmp	r3, r6
 800822a:	dc19      	bgt.n	8008260 <__multadd+0x78>
 800822c:	6861      	ldr	r1, [r4, #4]
 800822e:	4638      	mov	r0, r7
 8008230:	3101      	adds	r1, #1
 8008232:	f7ff ff77 	bl	8008124 <_Balloc>
 8008236:	4605      	mov	r5, r0
 8008238:	b928      	cbnz	r0, 8008246 <__multadd+0x5e>
 800823a:	4602      	mov	r2, r0
 800823c:	21b5      	movs	r1, #181	; 0xb5
 800823e:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <__multadd+0x8c>)
 8008240:	480d      	ldr	r0, [pc, #52]	; (8008278 <__multadd+0x90>)
 8008242:	f000 fd11 	bl	8008c68 <__assert_func>
 8008246:	6922      	ldr	r2, [r4, #16]
 8008248:	f104 010c 	add.w	r1, r4, #12
 800824c:	3202      	adds	r2, #2
 800824e:	0092      	lsls	r2, r2, #2
 8008250:	300c      	adds	r0, #12
 8008252:	f7ff ff59 	bl	8008108 <memcpy>
 8008256:	4621      	mov	r1, r4
 8008258:	4638      	mov	r0, r7
 800825a:	f7ff ffa3 	bl	80081a4 <_Bfree>
 800825e:	462c      	mov	r4, r5
 8008260:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008264:	3601      	adds	r6, #1
 8008266:	f8c3 8014 	str.w	r8, [r3, #20]
 800826a:	6126      	str	r6, [r4, #16]
 800826c:	4620      	mov	r0, r4
 800826e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008272:	bf00      	nop
 8008274:	0800afbb 	.word	0x0800afbb
 8008278:	0800afcc 	.word	0x0800afcc

0800827c <__hi0bits>:
 800827c:	0c02      	lsrs	r2, r0, #16
 800827e:	0412      	lsls	r2, r2, #16
 8008280:	4603      	mov	r3, r0
 8008282:	b9ca      	cbnz	r2, 80082b8 <__hi0bits+0x3c>
 8008284:	0403      	lsls	r3, r0, #16
 8008286:	2010      	movs	r0, #16
 8008288:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800828c:	bf04      	itt	eq
 800828e:	021b      	lsleq	r3, r3, #8
 8008290:	3008      	addeq	r0, #8
 8008292:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008296:	bf04      	itt	eq
 8008298:	011b      	lsleq	r3, r3, #4
 800829a:	3004      	addeq	r0, #4
 800829c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80082a0:	bf04      	itt	eq
 80082a2:	009b      	lsleq	r3, r3, #2
 80082a4:	3002      	addeq	r0, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	db05      	blt.n	80082b6 <__hi0bits+0x3a>
 80082aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80082ae:	f100 0001 	add.w	r0, r0, #1
 80082b2:	bf08      	it	eq
 80082b4:	2020      	moveq	r0, #32
 80082b6:	4770      	bx	lr
 80082b8:	2000      	movs	r0, #0
 80082ba:	e7e5      	b.n	8008288 <__hi0bits+0xc>

080082bc <__lo0bits>:
 80082bc:	6803      	ldr	r3, [r0, #0]
 80082be:	4602      	mov	r2, r0
 80082c0:	f013 0007 	ands.w	r0, r3, #7
 80082c4:	d00b      	beq.n	80082de <__lo0bits+0x22>
 80082c6:	07d9      	lsls	r1, r3, #31
 80082c8:	d422      	bmi.n	8008310 <__lo0bits+0x54>
 80082ca:	0798      	lsls	r0, r3, #30
 80082cc:	bf49      	itett	mi
 80082ce:	085b      	lsrmi	r3, r3, #1
 80082d0:	089b      	lsrpl	r3, r3, #2
 80082d2:	2001      	movmi	r0, #1
 80082d4:	6013      	strmi	r3, [r2, #0]
 80082d6:	bf5c      	itt	pl
 80082d8:	2002      	movpl	r0, #2
 80082da:	6013      	strpl	r3, [r2, #0]
 80082dc:	4770      	bx	lr
 80082de:	b299      	uxth	r1, r3
 80082e0:	b909      	cbnz	r1, 80082e6 <__lo0bits+0x2a>
 80082e2:	2010      	movs	r0, #16
 80082e4:	0c1b      	lsrs	r3, r3, #16
 80082e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082ea:	bf04      	itt	eq
 80082ec:	0a1b      	lsreq	r3, r3, #8
 80082ee:	3008      	addeq	r0, #8
 80082f0:	0719      	lsls	r1, r3, #28
 80082f2:	bf04      	itt	eq
 80082f4:	091b      	lsreq	r3, r3, #4
 80082f6:	3004      	addeq	r0, #4
 80082f8:	0799      	lsls	r1, r3, #30
 80082fa:	bf04      	itt	eq
 80082fc:	089b      	lsreq	r3, r3, #2
 80082fe:	3002      	addeq	r0, #2
 8008300:	07d9      	lsls	r1, r3, #31
 8008302:	d403      	bmi.n	800830c <__lo0bits+0x50>
 8008304:	085b      	lsrs	r3, r3, #1
 8008306:	f100 0001 	add.w	r0, r0, #1
 800830a:	d003      	beq.n	8008314 <__lo0bits+0x58>
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	4770      	bx	lr
 8008310:	2000      	movs	r0, #0
 8008312:	4770      	bx	lr
 8008314:	2020      	movs	r0, #32
 8008316:	4770      	bx	lr

08008318 <__i2b>:
 8008318:	b510      	push	{r4, lr}
 800831a:	460c      	mov	r4, r1
 800831c:	2101      	movs	r1, #1
 800831e:	f7ff ff01 	bl	8008124 <_Balloc>
 8008322:	4602      	mov	r2, r0
 8008324:	b928      	cbnz	r0, 8008332 <__i2b+0x1a>
 8008326:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800832a:	4b04      	ldr	r3, [pc, #16]	; (800833c <__i2b+0x24>)
 800832c:	4804      	ldr	r0, [pc, #16]	; (8008340 <__i2b+0x28>)
 800832e:	f000 fc9b 	bl	8008c68 <__assert_func>
 8008332:	2301      	movs	r3, #1
 8008334:	6144      	str	r4, [r0, #20]
 8008336:	6103      	str	r3, [r0, #16]
 8008338:	bd10      	pop	{r4, pc}
 800833a:	bf00      	nop
 800833c:	0800afbb 	.word	0x0800afbb
 8008340:	0800afcc 	.word	0x0800afcc

08008344 <__multiply>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	4614      	mov	r4, r2
 800834a:	690a      	ldr	r2, [r1, #16]
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	460d      	mov	r5, r1
 8008350:	429a      	cmp	r2, r3
 8008352:	bfbe      	ittt	lt
 8008354:	460b      	movlt	r3, r1
 8008356:	4625      	movlt	r5, r4
 8008358:	461c      	movlt	r4, r3
 800835a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800835e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008362:	68ab      	ldr	r3, [r5, #8]
 8008364:	6869      	ldr	r1, [r5, #4]
 8008366:	eb0a 0709 	add.w	r7, sl, r9
 800836a:	42bb      	cmp	r3, r7
 800836c:	b085      	sub	sp, #20
 800836e:	bfb8      	it	lt
 8008370:	3101      	addlt	r1, #1
 8008372:	f7ff fed7 	bl	8008124 <_Balloc>
 8008376:	b930      	cbnz	r0, 8008386 <__multiply+0x42>
 8008378:	4602      	mov	r2, r0
 800837a:	f240 115d 	movw	r1, #349	; 0x15d
 800837e:	4b41      	ldr	r3, [pc, #260]	; (8008484 <__multiply+0x140>)
 8008380:	4841      	ldr	r0, [pc, #260]	; (8008488 <__multiply+0x144>)
 8008382:	f000 fc71 	bl	8008c68 <__assert_func>
 8008386:	f100 0614 	add.w	r6, r0, #20
 800838a:	4633      	mov	r3, r6
 800838c:	2200      	movs	r2, #0
 800838e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008392:	4543      	cmp	r3, r8
 8008394:	d31e      	bcc.n	80083d4 <__multiply+0x90>
 8008396:	f105 0c14 	add.w	ip, r5, #20
 800839a:	f104 0314 	add.w	r3, r4, #20
 800839e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80083a2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80083a6:	9202      	str	r2, [sp, #8]
 80083a8:	ebac 0205 	sub.w	r2, ip, r5
 80083ac:	3a15      	subs	r2, #21
 80083ae:	f022 0203 	bic.w	r2, r2, #3
 80083b2:	3204      	adds	r2, #4
 80083b4:	f105 0115 	add.w	r1, r5, #21
 80083b8:	458c      	cmp	ip, r1
 80083ba:	bf38      	it	cc
 80083bc:	2204      	movcc	r2, #4
 80083be:	9201      	str	r2, [sp, #4]
 80083c0:	9a02      	ldr	r2, [sp, #8]
 80083c2:	9303      	str	r3, [sp, #12]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d808      	bhi.n	80083da <__multiply+0x96>
 80083c8:	2f00      	cmp	r7, #0
 80083ca:	dc55      	bgt.n	8008478 <__multiply+0x134>
 80083cc:	6107      	str	r7, [r0, #16]
 80083ce:	b005      	add	sp, #20
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d4:	f843 2b04 	str.w	r2, [r3], #4
 80083d8:	e7db      	b.n	8008392 <__multiply+0x4e>
 80083da:	f8b3 a000 	ldrh.w	sl, [r3]
 80083de:	f1ba 0f00 	cmp.w	sl, #0
 80083e2:	d020      	beq.n	8008426 <__multiply+0xe2>
 80083e4:	46b1      	mov	r9, r6
 80083e6:	2200      	movs	r2, #0
 80083e8:	f105 0e14 	add.w	lr, r5, #20
 80083ec:	f85e 4b04 	ldr.w	r4, [lr], #4
 80083f0:	f8d9 b000 	ldr.w	fp, [r9]
 80083f4:	b2a1      	uxth	r1, r4
 80083f6:	fa1f fb8b 	uxth.w	fp, fp
 80083fa:	fb0a b101 	mla	r1, sl, r1, fp
 80083fe:	4411      	add	r1, r2
 8008400:	f8d9 2000 	ldr.w	r2, [r9]
 8008404:	0c24      	lsrs	r4, r4, #16
 8008406:	0c12      	lsrs	r2, r2, #16
 8008408:	fb0a 2404 	mla	r4, sl, r4, r2
 800840c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008410:	b289      	uxth	r1, r1
 8008412:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008416:	45f4      	cmp	ip, lr
 8008418:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800841c:	f849 1b04 	str.w	r1, [r9], #4
 8008420:	d8e4      	bhi.n	80083ec <__multiply+0xa8>
 8008422:	9901      	ldr	r1, [sp, #4]
 8008424:	5072      	str	r2, [r6, r1]
 8008426:	9a03      	ldr	r2, [sp, #12]
 8008428:	3304      	adds	r3, #4
 800842a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800842e:	f1b9 0f00 	cmp.w	r9, #0
 8008432:	d01f      	beq.n	8008474 <__multiply+0x130>
 8008434:	46b6      	mov	lr, r6
 8008436:	f04f 0a00 	mov.w	sl, #0
 800843a:	6834      	ldr	r4, [r6, #0]
 800843c:	f105 0114 	add.w	r1, r5, #20
 8008440:	880a      	ldrh	r2, [r1, #0]
 8008442:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008446:	b2a4      	uxth	r4, r4
 8008448:	fb09 b202 	mla	r2, r9, r2, fp
 800844c:	4492      	add	sl, r2
 800844e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008452:	f84e 4b04 	str.w	r4, [lr], #4
 8008456:	f851 4b04 	ldr.w	r4, [r1], #4
 800845a:	f8be 2000 	ldrh.w	r2, [lr]
 800845e:	0c24      	lsrs	r4, r4, #16
 8008460:	fb09 2404 	mla	r4, r9, r4, r2
 8008464:	458c      	cmp	ip, r1
 8008466:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800846a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800846e:	d8e7      	bhi.n	8008440 <__multiply+0xfc>
 8008470:	9a01      	ldr	r2, [sp, #4]
 8008472:	50b4      	str	r4, [r6, r2]
 8008474:	3604      	adds	r6, #4
 8008476:	e7a3      	b.n	80083c0 <__multiply+0x7c>
 8008478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1a5      	bne.n	80083cc <__multiply+0x88>
 8008480:	3f01      	subs	r7, #1
 8008482:	e7a1      	b.n	80083c8 <__multiply+0x84>
 8008484:	0800afbb 	.word	0x0800afbb
 8008488:	0800afcc 	.word	0x0800afcc

0800848c <__pow5mult>:
 800848c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008490:	4615      	mov	r5, r2
 8008492:	f012 0203 	ands.w	r2, r2, #3
 8008496:	4606      	mov	r6, r0
 8008498:	460f      	mov	r7, r1
 800849a:	d007      	beq.n	80084ac <__pow5mult+0x20>
 800849c:	4c25      	ldr	r4, [pc, #148]	; (8008534 <__pow5mult+0xa8>)
 800849e:	3a01      	subs	r2, #1
 80084a0:	2300      	movs	r3, #0
 80084a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084a6:	f7ff fe9f 	bl	80081e8 <__multadd>
 80084aa:	4607      	mov	r7, r0
 80084ac:	10ad      	asrs	r5, r5, #2
 80084ae:	d03d      	beq.n	800852c <__pow5mult+0xa0>
 80084b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084b2:	b97c      	cbnz	r4, 80084d4 <__pow5mult+0x48>
 80084b4:	2010      	movs	r0, #16
 80084b6:	f7ff fe11 	bl	80080dc <malloc>
 80084ba:	4602      	mov	r2, r0
 80084bc:	6270      	str	r0, [r6, #36]	; 0x24
 80084be:	b928      	cbnz	r0, 80084cc <__pow5mult+0x40>
 80084c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084c4:	4b1c      	ldr	r3, [pc, #112]	; (8008538 <__pow5mult+0xac>)
 80084c6:	481d      	ldr	r0, [pc, #116]	; (800853c <__pow5mult+0xb0>)
 80084c8:	f000 fbce 	bl	8008c68 <__assert_func>
 80084cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084d0:	6004      	str	r4, [r0, #0]
 80084d2:	60c4      	str	r4, [r0, #12]
 80084d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084dc:	b94c      	cbnz	r4, 80084f2 <__pow5mult+0x66>
 80084de:	f240 2171 	movw	r1, #625	; 0x271
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7ff ff18 	bl	8008318 <__i2b>
 80084e8:	2300      	movs	r3, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80084f0:	6003      	str	r3, [r0, #0]
 80084f2:	f04f 0900 	mov.w	r9, #0
 80084f6:	07eb      	lsls	r3, r5, #31
 80084f8:	d50a      	bpl.n	8008510 <__pow5mult+0x84>
 80084fa:	4639      	mov	r1, r7
 80084fc:	4622      	mov	r2, r4
 80084fe:	4630      	mov	r0, r6
 8008500:	f7ff ff20 	bl	8008344 <__multiply>
 8008504:	4680      	mov	r8, r0
 8008506:	4639      	mov	r1, r7
 8008508:	4630      	mov	r0, r6
 800850a:	f7ff fe4b 	bl	80081a4 <_Bfree>
 800850e:	4647      	mov	r7, r8
 8008510:	106d      	asrs	r5, r5, #1
 8008512:	d00b      	beq.n	800852c <__pow5mult+0xa0>
 8008514:	6820      	ldr	r0, [r4, #0]
 8008516:	b938      	cbnz	r0, 8008528 <__pow5mult+0x9c>
 8008518:	4622      	mov	r2, r4
 800851a:	4621      	mov	r1, r4
 800851c:	4630      	mov	r0, r6
 800851e:	f7ff ff11 	bl	8008344 <__multiply>
 8008522:	6020      	str	r0, [r4, #0]
 8008524:	f8c0 9000 	str.w	r9, [r0]
 8008528:	4604      	mov	r4, r0
 800852a:	e7e4      	b.n	80084f6 <__pow5mult+0x6a>
 800852c:	4638      	mov	r0, r7
 800852e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008532:	bf00      	nop
 8008534:	0800b120 	.word	0x0800b120
 8008538:	0800af45 	.word	0x0800af45
 800853c:	0800afcc 	.word	0x0800afcc

08008540 <__lshift>:
 8008540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008544:	460c      	mov	r4, r1
 8008546:	4607      	mov	r7, r0
 8008548:	4691      	mov	r9, r2
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	6849      	ldr	r1, [r1, #4]
 800854e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008558:	f108 0601 	add.w	r6, r8, #1
 800855c:	42b3      	cmp	r3, r6
 800855e:	db0b      	blt.n	8008578 <__lshift+0x38>
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff fddf 	bl	8008124 <_Balloc>
 8008566:	4605      	mov	r5, r0
 8008568:	b948      	cbnz	r0, 800857e <__lshift+0x3e>
 800856a:	4602      	mov	r2, r0
 800856c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008570:	4b27      	ldr	r3, [pc, #156]	; (8008610 <__lshift+0xd0>)
 8008572:	4828      	ldr	r0, [pc, #160]	; (8008614 <__lshift+0xd4>)
 8008574:	f000 fb78 	bl	8008c68 <__assert_func>
 8008578:	3101      	adds	r1, #1
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	e7ee      	b.n	800855c <__lshift+0x1c>
 800857e:	2300      	movs	r3, #0
 8008580:	f100 0114 	add.w	r1, r0, #20
 8008584:	f100 0210 	add.w	r2, r0, #16
 8008588:	4618      	mov	r0, r3
 800858a:	4553      	cmp	r3, sl
 800858c:	db33      	blt.n	80085f6 <__lshift+0xb6>
 800858e:	6920      	ldr	r0, [r4, #16]
 8008590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008594:	f104 0314 	add.w	r3, r4, #20
 8008598:	f019 091f 	ands.w	r9, r9, #31
 800859c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085a4:	d02b      	beq.n	80085fe <__lshift+0xbe>
 80085a6:	468a      	mov	sl, r1
 80085a8:	2200      	movs	r2, #0
 80085aa:	f1c9 0e20 	rsb	lr, r9, #32
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	fa00 f009 	lsl.w	r0, r0, r9
 80085b4:	4302      	orrs	r2, r0
 80085b6:	f84a 2b04 	str.w	r2, [sl], #4
 80085ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80085be:	459c      	cmp	ip, r3
 80085c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80085c4:	d8f3      	bhi.n	80085ae <__lshift+0x6e>
 80085c6:	ebac 0304 	sub.w	r3, ip, r4
 80085ca:	3b15      	subs	r3, #21
 80085cc:	f023 0303 	bic.w	r3, r3, #3
 80085d0:	3304      	adds	r3, #4
 80085d2:	f104 0015 	add.w	r0, r4, #21
 80085d6:	4584      	cmp	ip, r0
 80085d8:	bf38      	it	cc
 80085da:	2304      	movcc	r3, #4
 80085dc:	50ca      	str	r2, [r1, r3]
 80085de:	b10a      	cbz	r2, 80085e4 <__lshift+0xa4>
 80085e0:	f108 0602 	add.w	r6, r8, #2
 80085e4:	3e01      	subs	r6, #1
 80085e6:	4638      	mov	r0, r7
 80085e8:	4621      	mov	r1, r4
 80085ea:	612e      	str	r6, [r5, #16]
 80085ec:	f7ff fdda 	bl	80081a4 <_Bfree>
 80085f0:	4628      	mov	r0, r5
 80085f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80085fa:	3301      	adds	r3, #1
 80085fc:	e7c5      	b.n	800858a <__lshift+0x4a>
 80085fe:	3904      	subs	r1, #4
 8008600:	f853 2b04 	ldr.w	r2, [r3], #4
 8008604:	459c      	cmp	ip, r3
 8008606:	f841 2f04 	str.w	r2, [r1, #4]!
 800860a:	d8f9      	bhi.n	8008600 <__lshift+0xc0>
 800860c:	e7ea      	b.n	80085e4 <__lshift+0xa4>
 800860e:	bf00      	nop
 8008610:	0800afbb 	.word	0x0800afbb
 8008614:	0800afcc 	.word	0x0800afcc

08008618 <__mcmp>:
 8008618:	4603      	mov	r3, r0
 800861a:	690a      	ldr	r2, [r1, #16]
 800861c:	6900      	ldr	r0, [r0, #16]
 800861e:	b530      	push	{r4, r5, lr}
 8008620:	1a80      	subs	r0, r0, r2
 8008622:	d10d      	bne.n	8008640 <__mcmp+0x28>
 8008624:	3314      	adds	r3, #20
 8008626:	3114      	adds	r1, #20
 8008628:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800862c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008630:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008634:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008638:	4295      	cmp	r5, r2
 800863a:	d002      	beq.n	8008642 <__mcmp+0x2a>
 800863c:	d304      	bcc.n	8008648 <__mcmp+0x30>
 800863e:	2001      	movs	r0, #1
 8008640:	bd30      	pop	{r4, r5, pc}
 8008642:	42a3      	cmp	r3, r4
 8008644:	d3f4      	bcc.n	8008630 <__mcmp+0x18>
 8008646:	e7fb      	b.n	8008640 <__mcmp+0x28>
 8008648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800864c:	e7f8      	b.n	8008640 <__mcmp+0x28>
	...

08008650 <__mdiff>:
 8008650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	460c      	mov	r4, r1
 8008656:	4606      	mov	r6, r0
 8008658:	4611      	mov	r1, r2
 800865a:	4620      	mov	r0, r4
 800865c:	4692      	mov	sl, r2
 800865e:	f7ff ffdb 	bl	8008618 <__mcmp>
 8008662:	1e05      	subs	r5, r0, #0
 8008664:	d111      	bne.n	800868a <__mdiff+0x3a>
 8008666:	4629      	mov	r1, r5
 8008668:	4630      	mov	r0, r6
 800866a:	f7ff fd5b 	bl	8008124 <_Balloc>
 800866e:	4602      	mov	r2, r0
 8008670:	b928      	cbnz	r0, 800867e <__mdiff+0x2e>
 8008672:	f240 2132 	movw	r1, #562	; 0x232
 8008676:	4b3c      	ldr	r3, [pc, #240]	; (8008768 <__mdiff+0x118>)
 8008678:	483c      	ldr	r0, [pc, #240]	; (800876c <__mdiff+0x11c>)
 800867a:	f000 faf5 	bl	8008c68 <__assert_func>
 800867e:	2301      	movs	r3, #1
 8008680:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008684:	4610      	mov	r0, r2
 8008686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868a:	bfa4      	itt	ge
 800868c:	4653      	movge	r3, sl
 800868e:	46a2      	movge	sl, r4
 8008690:	4630      	mov	r0, r6
 8008692:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008696:	bfa6      	itte	ge
 8008698:	461c      	movge	r4, r3
 800869a:	2500      	movge	r5, #0
 800869c:	2501      	movlt	r5, #1
 800869e:	f7ff fd41 	bl	8008124 <_Balloc>
 80086a2:	4602      	mov	r2, r0
 80086a4:	b918      	cbnz	r0, 80086ae <__mdiff+0x5e>
 80086a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086aa:	4b2f      	ldr	r3, [pc, #188]	; (8008768 <__mdiff+0x118>)
 80086ac:	e7e4      	b.n	8008678 <__mdiff+0x28>
 80086ae:	f100 0814 	add.w	r8, r0, #20
 80086b2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80086b6:	60c5      	str	r5, [r0, #12]
 80086b8:	f04f 0c00 	mov.w	ip, #0
 80086bc:	f10a 0514 	add.w	r5, sl, #20
 80086c0:	f10a 0010 	add.w	r0, sl, #16
 80086c4:	46c2      	mov	sl, r8
 80086c6:	6926      	ldr	r6, [r4, #16]
 80086c8:	f104 0914 	add.w	r9, r4, #20
 80086cc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80086d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80086d4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80086d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80086dc:	fa1f f18b 	uxth.w	r1, fp
 80086e0:	4461      	add	r1, ip
 80086e2:	fa1f fc83 	uxth.w	ip, r3
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	eba1 010c 	sub.w	r1, r1, ip
 80086ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80086f4:	b289      	uxth	r1, r1
 80086f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80086fa:	454e      	cmp	r6, r9
 80086fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008700:	f84a 3b04 	str.w	r3, [sl], #4
 8008704:	d8e6      	bhi.n	80086d4 <__mdiff+0x84>
 8008706:	1b33      	subs	r3, r6, r4
 8008708:	3b15      	subs	r3, #21
 800870a:	f023 0303 	bic.w	r3, r3, #3
 800870e:	3415      	adds	r4, #21
 8008710:	3304      	adds	r3, #4
 8008712:	42a6      	cmp	r6, r4
 8008714:	bf38      	it	cc
 8008716:	2304      	movcc	r3, #4
 8008718:	441d      	add	r5, r3
 800871a:	4443      	add	r3, r8
 800871c:	461e      	mov	r6, r3
 800871e:	462c      	mov	r4, r5
 8008720:	4574      	cmp	r4, lr
 8008722:	d30e      	bcc.n	8008742 <__mdiff+0xf2>
 8008724:	f10e 0103 	add.w	r1, lr, #3
 8008728:	1b49      	subs	r1, r1, r5
 800872a:	f021 0103 	bic.w	r1, r1, #3
 800872e:	3d03      	subs	r5, #3
 8008730:	45ae      	cmp	lr, r5
 8008732:	bf38      	it	cc
 8008734:	2100      	movcc	r1, #0
 8008736:	4419      	add	r1, r3
 8008738:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800873c:	b18b      	cbz	r3, 8008762 <__mdiff+0x112>
 800873e:	6117      	str	r7, [r2, #16]
 8008740:	e7a0      	b.n	8008684 <__mdiff+0x34>
 8008742:	f854 8b04 	ldr.w	r8, [r4], #4
 8008746:	fa1f f188 	uxth.w	r1, r8
 800874a:	4461      	add	r1, ip
 800874c:	1408      	asrs	r0, r1, #16
 800874e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008752:	b289      	uxth	r1, r1
 8008754:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008758:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800875c:	f846 1b04 	str.w	r1, [r6], #4
 8008760:	e7de      	b.n	8008720 <__mdiff+0xd0>
 8008762:	3f01      	subs	r7, #1
 8008764:	e7e8      	b.n	8008738 <__mdiff+0xe8>
 8008766:	bf00      	nop
 8008768:	0800afbb 	.word	0x0800afbb
 800876c:	0800afcc 	.word	0x0800afcc

08008770 <__d2b>:
 8008770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008774:	2101      	movs	r1, #1
 8008776:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800877a:	4690      	mov	r8, r2
 800877c:	461d      	mov	r5, r3
 800877e:	f7ff fcd1 	bl	8008124 <_Balloc>
 8008782:	4604      	mov	r4, r0
 8008784:	b930      	cbnz	r0, 8008794 <__d2b+0x24>
 8008786:	4602      	mov	r2, r0
 8008788:	f240 310a 	movw	r1, #778	; 0x30a
 800878c:	4b24      	ldr	r3, [pc, #144]	; (8008820 <__d2b+0xb0>)
 800878e:	4825      	ldr	r0, [pc, #148]	; (8008824 <__d2b+0xb4>)
 8008790:	f000 fa6a 	bl	8008c68 <__assert_func>
 8008794:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008798:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800879c:	bb2d      	cbnz	r5, 80087ea <__d2b+0x7a>
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	f1b8 0300 	subs.w	r3, r8, #0
 80087a4:	d026      	beq.n	80087f4 <__d2b+0x84>
 80087a6:	4668      	mov	r0, sp
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	f7ff fd87 	bl	80082bc <__lo0bits>
 80087ae:	9900      	ldr	r1, [sp, #0]
 80087b0:	b1f0      	cbz	r0, 80087f0 <__d2b+0x80>
 80087b2:	9a01      	ldr	r2, [sp, #4]
 80087b4:	f1c0 0320 	rsb	r3, r0, #32
 80087b8:	fa02 f303 	lsl.w	r3, r2, r3
 80087bc:	430b      	orrs	r3, r1
 80087be:	40c2      	lsrs	r2, r0
 80087c0:	6163      	str	r3, [r4, #20]
 80087c2:	9201      	str	r2, [sp, #4]
 80087c4:	9b01      	ldr	r3, [sp, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bf14      	ite	ne
 80087ca:	2102      	movne	r1, #2
 80087cc:	2101      	moveq	r1, #1
 80087ce:	61a3      	str	r3, [r4, #24]
 80087d0:	6121      	str	r1, [r4, #16]
 80087d2:	b1c5      	cbz	r5, 8008806 <__d2b+0x96>
 80087d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087d8:	4405      	add	r5, r0
 80087da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087de:	603d      	str	r5, [r7, #0]
 80087e0:	6030      	str	r0, [r6, #0]
 80087e2:	4620      	mov	r0, r4
 80087e4:	b002      	add	sp, #8
 80087e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087ee:	e7d6      	b.n	800879e <__d2b+0x2e>
 80087f0:	6161      	str	r1, [r4, #20]
 80087f2:	e7e7      	b.n	80087c4 <__d2b+0x54>
 80087f4:	a801      	add	r0, sp, #4
 80087f6:	f7ff fd61 	bl	80082bc <__lo0bits>
 80087fa:	2101      	movs	r1, #1
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	6121      	str	r1, [r4, #16]
 8008800:	6163      	str	r3, [r4, #20]
 8008802:	3020      	adds	r0, #32
 8008804:	e7e5      	b.n	80087d2 <__d2b+0x62>
 8008806:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800880a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800880e:	6038      	str	r0, [r7, #0]
 8008810:	6918      	ldr	r0, [r3, #16]
 8008812:	f7ff fd33 	bl	800827c <__hi0bits>
 8008816:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800881a:	6031      	str	r1, [r6, #0]
 800881c:	e7e1      	b.n	80087e2 <__d2b+0x72>
 800881e:	bf00      	nop
 8008820:	0800afbb 	.word	0x0800afbb
 8008824:	0800afcc 	.word	0x0800afcc

08008828 <_calloc_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	fb02 f501 	mul.w	r5, r2, r1
 800882e:	4629      	mov	r1, r5
 8008830:	f000 f854 	bl	80088dc <_malloc_r>
 8008834:	4604      	mov	r4, r0
 8008836:	b118      	cbz	r0, 8008840 <_calloc_r+0x18>
 8008838:	462a      	mov	r2, r5
 800883a:	2100      	movs	r1, #0
 800883c:	f7fe f946 	bl	8006acc <memset>
 8008840:	4620      	mov	r0, r4
 8008842:	bd38      	pop	{r3, r4, r5, pc}

08008844 <_free_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4605      	mov	r5, r0
 8008848:	2900      	cmp	r1, #0
 800884a:	d043      	beq.n	80088d4 <_free_r+0x90>
 800884c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008850:	1f0c      	subs	r4, r1, #4
 8008852:	2b00      	cmp	r3, #0
 8008854:	bfb8      	it	lt
 8008856:	18e4      	addlt	r4, r4, r3
 8008858:	f000 fa62 	bl	8008d20 <__malloc_lock>
 800885c:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <_free_r+0x94>)
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	4610      	mov	r0, r2
 8008862:	b933      	cbnz	r3, 8008872 <_free_r+0x2e>
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	6014      	str	r4, [r2, #0]
 8008868:	4628      	mov	r0, r5
 800886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886e:	f000 ba5d 	b.w	8008d2c <__malloc_unlock>
 8008872:	42a3      	cmp	r3, r4
 8008874:	d90a      	bls.n	800888c <_free_r+0x48>
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	1862      	adds	r2, r4, r1
 800887a:	4293      	cmp	r3, r2
 800887c:	bf01      	itttt	eq
 800887e:	681a      	ldreq	r2, [r3, #0]
 8008880:	685b      	ldreq	r3, [r3, #4]
 8008882:	1852      	addeq	r2, r2, r1
 8008884:	6022      	streq	r2, [r4, #0]
 8008886:	6063      	str	r3, [r4, #4]
 8008888:	6004      	str	r4, [r0, #0]
 800888a:	e7ed      	b.n	8008868 <_free_r+0x24>
 800888c:	461a      	mov	r2, r3
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	b10b      	cbz	r3, 8008896 <_free_r+0x52>
 8008892:	42a3      	cmp	r3, r4
 8008894:	d9fa      	bls.n	800888c <_free_r+0x48>
 8008896:	6811      	ldr	r1, [r2, #0]
 8008898:	1850      	adds	r0, r2, r1
 800889a:	42a0      	cmp	r0, r4
 800889c:	d10b      	bne.n	80088b6 <_free_r+0x72>
 800889e:	6820      	ldr	r0, [r4, #0]
 80088a0:	4401      	add	r1, r0
 80088a2:	1850      	adds	r0, r2, r1
 80088a4:	4283      	cmp	r3, r0
 80088a6:	6011      	str	r1, [r2, #0]
 80088a8:	d1de      	bne.n	8008868 <_free_r+0x24>
 80088aa:	6818      	ldr	r0, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	4401      	add	r1, r0
 80088b0:	6011      	str	r1, [r2, #0]
 80088b2:	6053      	str	r3, [r2, #4]
 80088b4:	e7d8      	b.n	8008868 <_free_r+0x24>
 80088b6:	d902      	bls.n	80088be <_free_r+0x7a>
 80088b8:	230c      	movs	r3, #12
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	e7d4      	b.n	8008868 <_free_r+0x24>
 80088be:	6820      	ldr	r0, [r4, #0]
 80088c0:	1821      	adds	r1, r4, r0
 80088c2:	428b      	cmp	r3, r1
 80088c4:	bf01      	itttt	eq
 80088c6:	6819      	ldreq	r1, [r3, #0]
 80088c8:	685b      	ldreq	r3, [r3, #4]
 80088ca:	1809      	addeq	r1, r1, r0
 80088cc:	6021      	streq	r1, [r4, #0]
 80088ce:	6063      	str	r3, [r4, #4]
 80088d0:	6054      	str	r4, [r2, #4]
 80088d2:	e7c9      	b.n	8008868 <_free_r+0x24>
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	bf00      	nop
 80088d8:	200002dc 	.word	0x200002dc

080088dc <_malloc_r>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	1ccd      	adds	r5, r1, #3
 80088e0:	f025 0503 	bic.w	r5, r5, #3
 80088e4:	3508      	adds	r5, #8
 80088e6:	2d0c      	cmp	r5, #12
 80088e8:	bf38      	it	cc
 80088ea:	250c      	movcc	r5, #12
 80088ec:	2d00      	cmp	r5, #0
 80088ee:	4606      	mov	r6, r0
 80088f0:	db01      	blt.n	80088f6 <_malloc_r+0x1a>
 80088f2:	42a9      	cmp	r1, r5
 80088f4:	d903      	bls.n	80088fe <_malloc_r+0x22>
 80088f6:	230c      	movs	r3, #12
 80088f8:	6033      	str	r3, [r6, #0]
 80088fa:	2000      	movs	r0, #0
 80088fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088fe:	f000 fa0f 	bl	8008d20 <__malloc_lock>
 8008902:	4921      	ldr	r1, [pc, #132]	; (8008988 <_malloc_r+0xac>)
 8008904:	680a      	ldr	r2, [r1, #0]
 8008906:	4614      	mov	r4, r2
 8008908:	b99c      	cbnz	r4, 8008932 <_malloc_r+0x56>
 800890a:	4f20      	ldr	r7, [pc, #128]	; (800898c <_malloc_r+0xb0>)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	b923      	cbnz	r3, 800891a <_malloc_r+0x3e>
 8008910:	4621      	mov	r1, r4
 8008912:	4630      	mov	r0, r6
 8008914:	f000 f998 	bl	8008c48 <_sbrk_r>
 8008918:	6038      	str	r0, [r7, #0]
 800891a:	4629      	mov	r1, r5
 800891c:	4630      	mov	r0, r6
 800891e:	f000 f993 	bl	8008c48 <_sbrk_r>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d123      	bne.n	800896e <_malloc_r+0x92>
 8008926:	230c      	movs	r3, #12
 8008928:	4630      	mov	r0, r6
 800892a:	6033      	str	r3, [r6, #0]
 800892c:	f000 f9fe 	bl	8008d2c <__malloc_unlock>
 8008930:	e7e3      	b.n	80088fa <_malloc_r+0x1e>
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	1b5b      	subs	r3, r3, r5
 8008936:	d417      	bmi.n	8008968 <_malloc_r+0x8c>
 8008938:	2b0b      	cmp	r3, #11
 800893a:	d903      	bls.n	8008944 <_malloc_r+0x68>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	441c      	add	r4, r3
 8008940:	6025      	str	r5, [r4, #0]
 8008942:	e004      	b.n	800894e <_malloc_r+0x72>
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	42a2      	cmp	r2, r4
 8008948:	bf0c      	ite	eq
 800894a:	600b      	streq	r3, [r1, #0]
 800894c:	6053      	strne	r3, [r2, #4]
 800894e:	4630      	mov	r0, r6
 8008950:	f000 f9ec 	bl	8008d2c <__malloc_unlock>
 8008954:	f104 000b 	add.w	r0, r4, #11
 8008958:	1d23      	adds	r3, r4, #4
 800895a:	f020 0007 	bic.w	r0, r0, #7
 800895e:	1ac2      	subs	r2, r0, r3
 8008960:	d0cc      	beq.n	80088fc <_malloc_r+0x20>
 8008962:	1a1b      	subs	r3, r3, r0
 8008964:	50a3      	str	r3, [r4, r2]
 8008966:	e7c9      	b.n	80088fc <_malloc_r+0x20>
 8008968:	4622      	mov	r2, r4
 800896a:	6864      	ldr	r4, [r4, #4]
 800896c:	e7cc      	b.n	8008908 <_malloc_r+0x2c>
 800896e:	1cc4      	adds	r4, r0, #3
 8008970:	f024 0403 	bic.w	r4, r4, #3
 8008974:	42a0      	cmp	r0, r4
 8008976:	d0e3      	beq.n	8008940 <_malloc_r+0x64>
 8008978:	1a21      	subs	r1, r4, r0
 800897a:	4630      	mov	r0, r6
 800897c:	f000 f964 	bl	8008c48 <_sbrk_r>
 8008980:	3001      	adds	r0, #1
 8008982:	d1dd      	bne.n	8008940 <_malloc_r+0x64>
 8008984:	e7cf      	b.n	8008926 <_malloc_r+0x4a>
 8008986:	bf00      	nop
 8008988:	200002dc 	.word	0x200002dc
 800898c:	200002e0 	.word	0x200002e0

08008990 <__ssputs_r>:
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	688e      	ldr	r6, [r1, #8]
 8008996:	4682      	mov	sl, r0
 8008998:	429e      	cmp	r6, r3
 800899a:	460c      	mov	r4, r1
 800899c:	4690      	mov	r8, r2
 800899e:	461f      	mov	r7, r3
 80089a0:	d838      	bhi.n	8008a14 <__ssputs_r+0x84>
 80089a2:	898a      	ldrh	r2, [r1, #12]
 80089a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089a8:	d032      	beq.n	8008a10 <__ssputs_r+0x80>
 80089aa:	6825      	ldr	r5, [r4, #0]
 80089ac:	6909      	ldr	r1, [r1, #16]
 80089ae:	3301      	adds	r3, #1
 80089b0:	eba5 0901 	sub.w	r9, r5, r1
 80089b4:	6965      	ldr	r5, [r4, #20]
 80089b6:	444b      	add	r3, r9
 80089b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089c0:	106d      	asrs	r5, r5, #1
 80089c2:	429d      	cmp	r5, r3
 80089c4:	bf38      	it	cc
 80089c6:	461d      	movcc	r5, r3
 80089c8:	0553      	lsls	r3, r2, #21
 80089ca:	d531      	bpl.n	8008a30 <__ssputs_r+0xa0>
 80089cc:	4629      	mov	r1, r5
 80089ce:	f7ff ff85 	bl	80088dc <_malloc_r>
 80089d2:	4606      	mov	r6, r0
 80089d4:	b950      	cbnz	r0, 80089ec <__ssputs_r+0x5c>
 80089d6:	230c      	movs	r3, #12
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089dc:	f8ca 3000 	str.w	r3, [sl]
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ec:	464a      	mov	r2, r9
 80089ee:	6921      	ldr	r1, [r4, #16]
 80089f0:	f7ff fb8a 	bl	8008108 <memcpy>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	6126      	str	r6, [r4, #16]
 8008a02:	444e      	add	r6, r9
 8008a04:	6026      	str	r6, [r4, #0]
 8008a06:	463e      	mov	r6, r7
 8008a08:	6165      	str	r5, [r4, #20]
 8008a0a:	eba5 0509 	sub.w	r5, r5, r9
 8008a0e:	60a5      	str	r5, [r4, #8]
 8008a10:	42be      	cmp	r6, r7
 8008a12:	d900      	bls.n	8008a16 <__ssputs_r+0x86>
 8008a14:	463e      	mov	r6, r7
 8008a16:	4632      	mov	r2, r6
 8008a18:	4641      	mov	r1, r8
 8008a1a:	6820      	ldr	r0, [r4, #0]
 8008a1c:	f000 f966 	bl	8008cec <memmove>
 8008a20:	68a3      	ldr	r3, [r4, #8]
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	1b9b      	subs	r3, r3, r6
 8008a26:	4432      	add	r2, r6
 8008a28:	2000      	movs	r0, #0
 8008a2a:	60a3      	str	r3, [r4, #8]
 8008a2c:	6022      	str	r2, [r4, #0]
 8008a2e:	e7db      	b.n	80089e8 <__ssputs_r+0x58>
 8008a30:	462a      	mov	r2, r5
 8008a32:	f000 f981 	bl	8008d38 <_realloc_r>
 8008a36:	4606      	mov	r6, r0
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d1e1      	bne.n	8008a00 <__ssputs_r+0x70>
 8008a3c:	4650      	mov	r0, sl
 8008a3e:	6921      	ldr	r1, [r4, #16]
 8008a40:	f7ff ff00 	bl	8008844 <_free_r>
 8008a44:	e7c7      	b.n	80089d6 <__ssputs_r+0x46>
	...

08008a48 <_svfiprintf_r>:
 8008a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	4698      	mov	r8, r3
 8008a4e:	898b      	ldrh	r3, [r1, #12]
 8008a50:	4607      	mov	r7, r0
 8008a52:	061b      	lsls	r3, r3, #24
 8008a54:	460d      	mov	r5, r1
 8008a56:	4614      	mov	r4, r2
 8008a58:	b09d      	sub	sp, #116	; 0x74
 8008a5a:	d50e      	bpl.n	8008a7a <_svfiprintf_r+0x32>
 8008a5c:	690b      	ldr	r3, [r1, #16]
 8008a5e:	b963      	cbnz	r3, 8008a7a <_svfiprintf_r+0x32>
 8008a60:	2140      	movs	r1, #64	; 0x40
 8008a62:	f7ff ff3b 	bl	80088dc <_malloc_r>
 8008a66:	6028      	str	r0, [r5, #0]
 8008a68:	6128      	str	r0, [r5, #16]
 8008a6a:	b920      	cbnz	r0, 8008a76 <_svfiprintf_r+0x2e>
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a74:	e0d1      	b.n	8008c1a <_svfiprintf_r+0x1d2>
 8008a76:	2340      	movs	r3, #64	; 0x40
 8008a78:	616b      	str	r3, [r5, #20]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a7e:	2320      	movs	r3, #32
 8008a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a84:	2330      	movs	r3, #48	; 0x30
 8008a86:	f04f 0901 	mov.w	r9, #1
 8008a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c34 <_svfiprintf_r+0x1ec>
 8008a92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a96:	4623      	mov	r3, r4
 8008a98:	469a      	mov	sl, r3
 8008a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9e:	b10a      	cbz	r2, 8008aa4 <_svfiprintf_r+0x5c>
 8008aa0:	2a25      	cmp	r2, #37	; 0x25
 8008aa2:	d1f9      	bne.n	8008a98 <_svfiprintf_r+0x50>
 8008aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa8:	d00b      	beq.n	8008ac2 <_svfiprintf_r+0x7a>
 8008aaa:	465b      	mov	r3, fp
 8008aac:	4622      	mov	r2, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff ff6d 	bl	8008990 <__ssputs_r>
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	f000 80aa 	beq.w	8008c10 <_svfiprintf_r+0x1c8>
 8008abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008abe:	445a      	add	r2, fp
 8008ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 80a2 	beq.w	8008c10 <_svfiprintf_r+0x1c8>
 8008acc:	2300      	movs	r3, #0
 8008ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad6:	f10a 0a01 	add.w	sl, sl, #1
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	9307      	str	r3, [sp, #28]
 8008ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ae4:	4654      	mov	r4, sl
 8008ae6:	2205      	movs	r2, #5
 8008ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aec:	4851      	ldr	r0, [pc, #324]	; (8008c34 <_svfiprintf_r+0x1ec>)
 8008aee:	f7ff fafd 	bl	80080ec <memchr>
 8008af2:	9a04      	ldr	r2, [sp, #16]
 8008af4:	b9d8      	cbnz	r0, 8008b2e <_svfiprintf_r+0xe6>
 8008af6:	06d0      	lsls	r0, r2, #27
 8008af8:	bf44      	itt	mi
 8008afa:	2320      	movmi	r3, #32
 8008afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b00:	0711      	lsls	r1, r2, #28
 8008b02:	bf44      	itt	mi
 8008b04:	232b      	movmi	r3, #43	; 0x2b
 8008b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b10:	d015      	beq.n	8008b3e <_svfiprintf_r+0xf6>
 8008b12:	4654      	mov	r4, sl
 8008b14:	2000      	movs	r0, #0
 8008b16:	f04f 0c0a 	mov.w	ip, #10
 8008b1a:	9a07      	ldr	r2, [sp, #28]
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b22:	3b30      	subs	r3, #48	; 0x30
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d94e      	bls.n	8008bc6 <_svfiprintf_r+0x17e>
 8008b28:	b1b0      	cbz	r0, 8008b58 <_svfiprintf_r+0x110>
 8008b2a:	9207      	str	r2, [sp, #28]
 8008b2c:	e014      	b.n	8008b58 <_svfiprintf_r+0x110>
 8008b2e:	eba0 0308 	sub.w	r3, r0, r8
 8008b32:	fa09 f303 	lsl.w	r3, r9, r3
 8008b36:	4313      	orrs	r3, r2
 8008b38:	46a2      	mov	sl, r4
 8008b3a:	9304      	str	r3, [sp, #16]
 8008b3c:	e7d2      	b.n	8008ae4 <_svfiprintf_r+0x9c>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	1d19      	adds	r1, r3, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	9103      	str	r1, [sp, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfbb      	ittet	lt
 8008b4a:	425b      	neglt	r3, r3
 8008b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b50:	9307      	strge	r3, [sp, #28]
 8008b52:	9307      	strlt	r3, [sp, #28]
 8008b54:	bfb8      	it	lt
 8008b56:	9204      	strlt	r2, [sp, #16]
 8008b58:	7823      	ldrb	r3, [r4, #0]
 8008b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b5c:	d10c      	bne.n	8008b78 <_svfiprintf_r+0x130>
 8008b5e:	7863      	ldrb	r3, [r4, #1]
 8008b60:	2b2a      	cmp	r3, #42	; 0x2a
 8008b62:	d135      	bne.n	8008bd0 <_svfiprintf_r+0x188>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	3402      	adds	r4, #2
 8008b68:	1d1a      	adds	r2, r3, #4
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	9203      	str	r2, [sp, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	bfb8      	it	lt
 8008b72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b76:	9305      	str	r3, [sp, #20]
 8008b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c44 <_svfiprintf_r+0x1fc>
 8008b7c:	2203      	movs	r2, #3
 8008b7e:	4650      	mov	r0, sl
 8008b80:	7821      	ldrb	r1, [r4, #0]
 8008b82:	f7ff fab3 	bl	80080ec <memchr>
 8008b86:	b140      	cbz	r0, 8008b9a <_svfiprintf_r+0x152>
 8008b88:	2340      	movs	r3, #64	; 0x40
 8008b8a:	eba0 000a 	sub.w	r0, r0, sl
 8008b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	3401      	adds	r4, #1
 8008b96:	4303      	orrs	r3, r0
 8008b98:	9304      	str	r3, [sp, #16]
 8008b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9e:	2206      	movs	r2, #6
 8008ba0:	4825      	ldr	r0, [pc, #148]	; (8008c38 <_svfiprintf_r+0x1f0>)
 8008ba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ba6:	f7ff faa1 	bl	80080ec <memchr>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d038      	beq.n	8008c20 <_svfiprintf_r+0x1d8>
 8008bae:	4b23      	ldr	r3, [pc, #140]	; (8008c3c <_svfiprintf_r+0x1f4>)
 8008bb0:	bb1b      	cbnz	r3, 8008bfa <_svfiprintf_r+0x1b2>
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	3307      	adds	r3, #7
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	3308      	adds	r3, #8
 8008bbc:	9303      	str	r3, [sp, #12]
 8008bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc0:	4433      	add	r3, r6
 8008bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc4:	e767      	b.n	8008a96 <_svfiprintf_r+0x4e>
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	2001      	movs	r0, #1
 8008bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bce:	e7a5      	b.n	8008b1c <_svfiprintf_r+0xd4>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f04f 0c0a 	mov.w	ip, #10
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	3401      	adds	r4, #1
 8008bda:	9305      	str	r3, [sp, #20]
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be2:	3a30      	subs	r2, #48	; 0x30
 8008be4:	2a09      	cmp	r2, #9
 8008be6:	d903      	bls.n	8008bf0 <_svfiprintf_r+0x1a8>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0c5      	beq.n	8008b78 <_svfiprintf_r+0x130>
 8008bec:	9105      	str	r1, [sp, #20]
 8008bee:	e7c3      	b.n	8008b78 <_svfiprintf_r+0x130>
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bf8:	e7f0      	b.n	8008bdc <_svfiprintf_r+0x194>
 8008bfa:	ab03      	add	r3, sp, #12
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	462a      	mov	r2, r5
 8008c00:	4638      	mov	r0, r7
 8008c02:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <_svfiprintf_r+0x1f8>)
 8008c04:	a904      	add	r1, sp, #16
 8008c06:	f7fe f807 	bl	8006c18 <_printf_float>
 8008c0a:	1c42      	adds	r2, r0, #1
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	d1d6      	bne.n	8008bbe <_svfiprintf_r+0x176>
 8008c10:	89ab      	ldrh	r3, [r5, #12]
 8008c12:	065b      	lsls	r3, r3, #25
 8008c14:	f53f af2c 	bmi.w	8008a70 <_svfiprintf_r+0x28>
 8008c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c1a:	b01d      	add	sp, #116	; 0x74
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	ab03      	add	r3, sp, #12
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	462a      	mov	r2, r5
 8008c26:	4638      	mov	r0, r7
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <_svfiprintf_r+0x1f8>)
 8008c2a:	a904      	add	r1, sp, #16
 8008c2c:	f7fe fa90 	bl	8007150 <_printf_i>
 8008c30:	e7eb      	b.n	8008c0a <_svfiprintf_r+0x1c2>
 8008c32:	bf00      	nop
 8008c34:	0800b12c 	.word	0x0800b12c
 8008c38:	0800b136 	.word	0x0800b136
 8008c3c:	08006c19 	.word	0x08006c19
 8008c40:	08008991 	.word	0x08008991
 8008c44:	0800b132 	.word	0x0800b132

08008c48 <_sbrk_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4d05      	ldr	r5, [pc, #20]	; (8008c64 <_sbrk_r+0x1c>)
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7fa fc08 	bl	8003468 <_sbrk>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_sbrk_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_sbrk_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	20000d88 	.word	0x20000d88

08008c68 <__assert_func>:
 8008c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c6a:	4614      	mov	r4, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <__assert_func+0x2c>)
 8008c70:	4605      	mov	r5, r0
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68d8      	ldr	r0, [r3, #12]
 8008c76:	b14c      	cbz	r4, 8008c8c <__assert_func+0x24>
 8008c78:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <__assert_func+0x30>)
 8008c7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c7e:	9100      	str	r1, [sp, #0]
 8008c80:	462b      	mov	r3, r5
 8008c82:	4906      	ldr	r1, [pc, #24]	; (8008c9c <__assert_func+0x34>)
 8008c84:	f000 f80e 	bl	8008ca4 <fiprintf>
 8008c88:	f000 faa2 	bl	80091d0 <abort>
 8008c8c:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <__assert_func+0x38>)
 8008c8e:	461c      	mov	r4, r3
 8008c90:	e7f3      	b.n	8008c7a <__assert_func+0x12>
 8008c92:	bf00      	nop
 8008c94:	2000000c 	.word	0x2000000c
 8008c98:	0800b13d 	.word	0x0800b13d
 8008c9c:	0800b14a 	.word	0x0800b14a
 8008ca0:	0800b178 	.word	0x0800b178

08008ca4 <fiprintf>:
 8008ca4:	b40e      	push	{r1, r2, r3}
 8008ca6:	b503      	push	{r0, r1, lr}
 8008ca8:	4601      	mov	r1, r0
 8008caa:	ab03      	add	r3, sp, #12
 8008cac:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <fiprintf+0x20>)
 8008cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb2:	6800      	ldr	r0, [r0, #0]
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	f000 f88d 	bl	8008dd4 <_vfiprintf_r>
 8008cba:	b002      	add	sp, #8
 8008cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc0:	b003      	add	sp, #12
 8008cc2:	4770      	bx	lr
 8008cc4:	2000000c 	.word	0x2000000c

08008cc8 <__ascii_mbtowc>:
 8008cc8:	b082      	sub	sp, #8
 8008cca:	b901      	cbnz	r1, 8008cce <__ascii_mbtowc+0x6>
 8008ccc:	a901      	add	r1, sp, #4
 8008cce:	b142      	cbz	r2, 8008ce2 <__ascii_mbtowc+0x1a>
 8008cd0:	b14b      	cbz	r3, 8008ce6 <__ascii_mbtowc+0x1e>
 8008cd2:	7813      	ldrb	r3, [r2, #0]
 8008cd4:	600b      	str	r3, [r1, #0]
 8008cd6:	7812      	ldrb	r2, [r2, #0]
 8008cd8:	1e10      	subs	r0, r2, #0
 8008cda:	bf18      	it	ne
 8008cdc:	2001      	movne	r0, #1
 8008cde:	b002      	add	sp, #8
 8008ce0:	4770      	bx	lr
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	e7fb      	b.n	8008cde <__ascii_mbtowc+0x16>
 8008ce6:	f06f 0001 	mvn.w	r0, #1
 8008cea:	e7f8      	b.n	8008cde <__ascii_mbtowc+0x16>

08008cec <memmove>:
 8008cec:	4288      	cmp	r0, r1
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	eb01 0402 	add.w	r4, r1, r2
 8008cf4:	d902      	bls.n	8008cfc <memmove+0x10>
 8008cf6:	4284      	cmp	r4, r0
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	d807      	bhi.n	8008d0c <memmove+0x20>
 8008cfc:	1e43      	subs	r3, r0, #1
 8008cfe:	42a1      	cmp	r1, r4
 8008d00:	d008      	beq.n	8008d14 <memmove+0x28>
 8008d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d0a:	e7f8      	b.n	8008cfe <memmove+0x12>
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	4402      	add	r2, r0
 8008d10:	428a      	cmp	r2, r1
 8008d12:	d100      	bne.n	8008d16 <memmove+0x2a>
 8008d14:	bd10      	pop	{r4, pc}
 8008d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d1e:	e7f7      	b.n	8008d10 <memmove+0x24>

08008d20 <__malloc_lock>:
 8008d20:	4801      	ldr	r0, [pc, #4]	; (8008d28 <__malloc_lock+0x8>)
 8008d22:	f000 bc15 	b.w	8009550 <__retarget_lock_acquire_recursive>
 8008d26:	bf00      	nop
 8008d28:	20000d90 	.word	0x20000d90

08008d2c <__malloc_unlock>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	; (8008d34 <__malloc_unlock+0x8>)
 8008d2e:	f000 bc10 	b.w	8009552 <__retarget_lock_release_recursive>
 8008d32:	bf00      	nop
 8008d34:	20000d90 	.word	0x20000d90

08008d38 <_realloc_r>:
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	460e      	mov	r6, r1
 8008d40:	b921      	cbnz	r1, 8008d4c <_realloc_r+0x14>
 8008d42:	4611      	mov	r1, r2
 8008d44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d48:	f7ff bdc8 	b.w	80088dc <_malloc_r>
 8008d4c:	b922      	cbnz	r2, 8008d58 <_realloc_r+0x20>
 8008d4e:	f7ff fd79 	bl	8008844 <_free_r>
 8008d52:	4625      	mov	r5, r4
 8008d54:	4628      	mov	r0, r5
 8008d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d58:	f000 fc60 	bl	800961c <_malloc_usable_size_r>
 8008d5c:	42a0      	cmp	r0, r4
 8008d5e:	d20f      	bcs.n	8008d80 <_realloc_r+0x48>
 8008d60:	4621      	mov	r1, r4
 8008d62:	4638      	mov	r0, r7
 8008d64:	f7ff fdba 	bl	80088dc <_malloc_r>
 8008d68:	4605      	mov	r5, r0
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d0f2      	beq.n	8008d54 <_realloc_r+0x1c>
 8008d6e:	4631      	mov	r1, r6
 8008d70:	4622      	mov	r2, r4
 8008d72:	f7ff f9c9 	bl	8008108 <memcpy>
 8008d76:	4631      	mov	r1, r6
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7ff fd63 	bl	8008844 <_free_r>
 8008d7e:	e7e9      	b.n	8008d54 <_realloc_r+0x1c>
 8008d80:	4635      	mov	r5, r6
 8008d82:	e7e7      	b.n	8008d54 <_realloc_r+0x1c>

08008d84 <__sfputc_r>:
 8008d84:	6893      	ldr	r3, [r2, #8]
 8008d86:	b410      	push	{r4}
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	6093      	str	r3, [r2, #8]
 8008d8e:	da07      	bge.n	8008da0 <__sfputc_r+0x1c>
 8008d90:	6994      	ldr	r4, [r2, #24]
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	db01      	blt.n	8008d9a <__sfputc_r+0x16>
 8008d96:	290a      	cmp	r1, #10
 8008d98:	d102      	bne.n	8008da0 <__sfputc_r+0x1c>
 8008d9a:	bc10      	pop	{r4}
 8008d9c:	f000 b94a 	b.w	8009034 <__swbuf_r>
 8008da0:	6813      	ldr	r3, [r2, #0]
 8008da2:	1c58      	adds	r0, r3, #1
 8008da4:	6010      	str	r0, [r2, #0]
 8008da6:	7019      	strb	r1, [r3, #0]
 8008da8:	4608      	mov	r0, r1
 8008daa:	bc10      	pop	{r4}
 8008dac:	4770      	bx	lr

08008dae <__sfputs_r>:
 8008dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db0:	4606      	mov	r6, r0
 8008db2:	460f      	mov	r7, r1
 8008db4:	4614      	mov	r4, r2
 8008db6:	18d5      	adds	r5, r2, r3
 8008db8:	42ac      	cmp	r4, r5
 8008dba:	d101      	bne.n	8008dc0 <__sfputs_r+0x12>
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e007      	b.n	8008dd0 <__sfputs_r+0x22>
 8008dc0:	463a      	mov	r2, r7
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc8:	f7ff ffdc 	bl	8008d84 <__sfputc_r>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	d1f3      	bne.n	8008db8 <__sfputs_r+0xa>
 8008dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dd4 <_vfiprintf_r>:
 8008dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd8:	460d      	mov	r5, r1
 8008dda:	4614      	mov	r4, r2
 8008ddc:	4698      	mov	r8, r3
 8008dde:	4606      	mov	r6, r0
 8008de0:	b09d      	sub	sp, #116	; 0x74
 8008de2:	b118      	cbz	r0, 8008dec <_vfiprintf_r+0x18>
 8008de4:	6983      	ldr	r3, [r0, #24]
 8008de6:	b90b      	cbnz	r3, 8008dec <_vfiprintf_r+0x18>
 8008de8:	f000 fb14 	bl	8009414 <__sinit>
 8008dec:	4b89      	ldr	r3, [pc, #548]	; (8009014 <_vfiprintf_r+0x240>)
 8008dee:	429d      	cmp	r5, r3
 8008df0:	d11b      	bne.n	8008e2a <_vfiprintf_r+0x56>
 8008df2:	6875      	ldr	r5, [r6, #4]
 8008df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008df6:	07d9      	lsls	r1, r3, #31
 8008df8:	d405      	bmi.n	8008e06 <_vfiprintf_r+0x32>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	059a      	lsls	r2, r3, #22
 8008dfe:	d402      	bmi.n	8008e06 <_vfiprintf_r+0x32>
 8008e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e02:	f000 fba5 	bl	8009550 <__retarget_lock_acquire_recursive>
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	071b      	lsls	r3, r3, #28
 8008e0a:	d501      	bpl.n	8008e10 <_vfiprintf_r+0x3c>
 8008e0c:	692b      	ldr	r3, [r5, #16]
 8008e0e:	b9eb      	cbnz	r3, 8008e4c <_vfiprintf_r+0x78>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 f96e 	bl	80090f4 <__swsetup_r>
 8008e18:	b1c0      	cbz	r0, 8008e4c <_vfiprintf_r+0x78>
 8008e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e1c:	07dc      	lsls	r4, r3, #31
 8008e1e:	d50e      	bpl.n	8008e3e <_vfiprintf_r+0x6a>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e24:	b01d      	add	sp, #116	; 0x74
 8008e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2a:	4b7b      	ldr	r3, [pc, #492]	; (8009018 <_vfiprintf_r+0x244>)
 8008e2c:	429d      	cmp	r5, r3
 8008e2e:	d101      	bne.n	8008e34 <_vfiprintf_r+0x60>
 8008e30:	68b5      	ldr	r5, [r6, #8]
 8008e32:	e7df      	b.n	8008df4 <_vfiprintf_r+0x20>
 8008e34:	4b79      	ldr	r3, [pc, #484]	; (800901c <_vfiprintf_r+0x248>)
 8008e36:	429d      	cmp	r5, r3
 8008e38:	bf08      	it	eq
 8008e3a:	68f5      	ldreq	r5, [r6, #12]
 8008e3c:	e7da      	b.n	8008df4 <_vfiprintf_r+0x20>
 8008e3e:	89ab      	ldrh	r3, [r5, #12]
 8008e40:	0598      	lsls	r0, r3, #22
 8008e42:	d4ed      	bmi.n	8008e20 <_vfiprintf_r+0x4c>
 8008e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e46:	f000 fb84 	bl	8009552 <__retarget_lock_release_recursive>
 8008e4a:	e7e9      	b.n	8008e20 <_vfiprintf_r+0x4c>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e50:	2320      	movs	r3, #32
 8008e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e56:	2330      	movs	r3, #48	; 0x30
 8008e58:	f04f 0901 	mov.w	r9, #1
 8008e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e60:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009020 <_vfiprintf_r+0x24c>
 8008e64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e68:	4623      	mov	r3, r4
 8008e6a:	469a      	mov	sl, r3
 8008e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e70:	b10a      	cbz	r2, 8008e76 <_vfiprintf_r+0xa2>
 8008e72:	2a25      	cmp	r2, #37	; 0x25
 8008e74:	d1f9      	bne.n	8008e6a <_vfiprintf_r+0x96>
 8008e76:	ebba 0b04 	subs.w	fp, sl, r4
 8008e7a:	d00b      	beq.n	8008e94 <_vfiprintf_r+0xc0>
 8008e7c:	465b      	mov	r3, fp
 8008e7e:	4622      	mov	r2, r4
 8008e80:	4629      	mov	r1, r5
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7ff ff93 	bl	8008dae <__sfputs_r>
 8008e88:	3001      	adds	r0, #1
 8008e8a:	f000 80aa 	beq.w	8008fe2 <_vfiprintf_r+0x20e>
 8008e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e90:	445a      	add	r2, fp
 8008e92:	9209      	str	r2, [sp, #36]	; 0x24
 8008e94:	f89a 3000 	ldrb.w	r3, [sl]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 80a2 	beq.w	8008fe2 <_vfiprintf_r+0x20e>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ea8:	f10a 0a01 	add.w	sl, sl, #1
 8008eac:	9304      	str	r3, [sp, #16]
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8008eb6:	4654      	mov	r4, sl
 8008eb8:	2205      	movs	r2, #5
 8008eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ebe:	4858      	ldr	r0, [pc, #352]	; (8009020 <_vfiprintf_r+0x24c>)
 8008ec0:	f7ff f914 	bl	80080ec <memchr>
 8008ec4:	9a04      	ldr	r2, [sp, #16]
 8008ec6:	b9d8      	cbnz	r0, 8008f00 <_vfiprintf_r+0x12c>
 8008ec8:	06d1      	lsls	r1, r2, #27
 8008eca:	bf44      	itt	mi
 8008ecc:	2320      	movmi	r3, #32
 8008ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ed2:	0713      	lsls	r3, r2, #28
 8008ed4:	bf44      	itt	mi
 8008ed6:	232b      	movmi	r3, #43	; 0x2b
 8008ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008edc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ee2:	d015      	beq.n	8008f10 <_vfiprintf_r+0x13c>
 8008ee4:	4654      	mov	r4, sl
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f04f 0c0a 	mov.w	ip, #10
 8008eec:	9a07      	ldr	r2, [sp, #28]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ef4:	3b30      	subs	r3, #48	; 0x30
 8008ef6:	2b09      	cmp	r3, #9
 8008ef8:	d94e      	bls.n	8008f98 <_vfiprintf_r+0x1c4>
 8008efa:	b1b0      	cbz	r0, 8008f2a <_vfiprintf_r+0x156>
 8008efc:	9207      	str	r2, [sp, #28]
 8008efe:	e014      	b.n	8008f2a <_vfiprintf_r+0x156>
 8008f00:	eba0 0308 	sub.w	r3, r0, r8
 8008f04:	fa09 f303 	lsl.w	r3, r9, r3
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	46a2      	mov	sl, r4
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	e7d2      	b.n	8008eb6 <_vfiprintf_r+0xe2>
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	1d19      	adds	r1, r3, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	9103      	str	r1, [sp, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bfbb      	ittet	lt
 8008f1c:	425b      	neglt	r3, r3
 8008f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f22:	9307      	strge	r3, [sp, #28]
 8008f24:	9307      	strlt	r3, [sp, #28]
 8008f26:	bfb8      	it	lt
 8008f28:	9204      	strlt	r2, [sp, #16]
 8008f2a:	7823      	ldrb	r3, [r4, #0]
 8008f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8008f2e:	d10c      	bne.n	8008f4a <_vfiprintf_r+0x176>
 8008f30:	7863      	ldrb	r3, [r4, #1]
 8008f32:	2b2a      	cmp	r3, #42	; 0x2a
 8008f34:	d135      	bne.n	8008fa2 <_vfiprintf_r+0x1ce>
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	3402      	adds	r4, #2
 8008f3a:	1d1a      	adds	r2, r3, #4
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	9203      	str	r2, [sp, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bfb8      	it	lt
 8008f44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f48:	9305      	str	r3, [sp, #20]
 8008f4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009030 <_vfiprintf_r+0x25c>
 8008f4e:	2203      	movs	r2, #3
 8008f50:	4650      	mov	r0, sl
 8008f52:	7821      	ldrb	r1, [r4, #0]
 8008f54:	f7ff f8ca 	bl	80080ec <memchr>
 8008f58:	b140      	cbz	r0, 8008f6c <_vfiprintf_r+0x198>
 8008f5a:	2340      	movs	r3, #64	; 0x40
 8008f5c:	eba0 000a 	sub.w	r0, r0, sl
 8008f60:	fa03 f000 	lsl.w	r0, r3, r0
 8008f64:	9b04      	ldr	r3, [sp, #16]
 8008f66:	3401      	adds	r4, #1
 8008f68:	4303      	orrs	r3, r0
 8008f6a:	9304      	str	r3, [sp, #16]
 8008f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f70:	2206      	movs	r2, #6
 8008f72:	482c      	ldr	r0, [pc, #176]	; (8009024 <_vfiprintf_r+0x250>)
 8008f74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f78:	f7ff f8b8 	bl	80080ec <memchr>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d03f      	beq.n	8009000 <_vfiprintf_r+0x22c>
 8008f80:	4b29      	ldr	r3, [pc, #164]	; (8009028 <_vfiprintf_r+0x254>)
 8008f82:	bb1b      	cbnz	r3, 8008fcc <_vfiprintf_r+0x1f8>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	3307      	adds	r3, #7
 8008f88:	f023 0307 	bic.w	r3, r3, #7
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	9303      	str	r3, [sp, #12]
 8008f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f92:	443b      	add	r3, r7
 8008f94:	9309      	str	r3, [sp, #36]	; 0x24
 8008f96:	e767      	b.n	8008e68 <_vfiprintf_r+0x94>
 8008f98:	460c      	mov	r4, r1
 8008f9a:	2001      	movs	r0, #1
 8008f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fa0:	e7a5      	b.n	8008eee <_vfiprintf_r+0x11a>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f04f 0c0a 	mov.w	ip, #10
 8008fa8:	4619      	mov	r1, r3
 8008faa:	3401      	adds	r4, #1
 8008fac:	9305      	str	r3, [sp, #20]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fb4:	3a30      	subs	r2, #48	; 0x30
 8008fb6:	2a09      	cmp	r2, #9
 8008fb8:	d903      	bls.n	8008fc2 <_vfiprintf_r+0x1ee>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0c5      	beq.n	8008f4a <_vfiprintf_r+0x176>
 8008fbe:	9105      	str	r1, [sp, #20]
 8008fc0:	e7c3      	b.n	8008f4a <_vfiprintf_r+0x176>
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fca:	e7f0      	b.n	8008fae <_vfiprintf_r+0x1da>
 8008fcc:	ab03      	add	r3, sp, #12
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	4b15      	ldr	r3, [pc, #84]	; (800902c <_vfiprintf_r+0x258>)
 8008fd6:	a904      	add	r1, sp, #16
 8008fd8:	f7fd fe1e 	bl	8006c18 <_printf_float>
 8008fdc:	4607      	mov	r7, r0
 8008fde:	1c78      	adds	r0, r7, #1
 8008fe0:	d1d6      	bne.n	8008f90 <_vfiprintf_r+0x1bc>
 8008fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fe4:	07d9      	lsls	r1, r3, #31
 8008fe6:	d405      	bmi.n	8008ff4 <_vfiprintf_r+0x220>
 8008fe8:	89ab      	ldrh	r3, [r5, #12]
 8008fea:	059a      	lsls	r2, r3, #22
 8008fec:	d402      	bmi.n	8008ff4 <_vfiprintf_r+0x220>
 8008fee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ff0:	f000 faaf 	bl	8009552 <__retarget_lock_release_recursive>
 8008ff4:	89ab      	ldrh	r3, [r5, #12]
 8008ff6:	065b      	lsls	r3, r3, #25
 8008ff8:	f53f af12 	bmi.w	8008e20 <_vfiprintf_r+0x4c>
 8008ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ffe:	e711      	b.n	8008e24 <_vfiprintf_r+0x50>
 8009000:	ab03      	add	r3, sp, #12
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	462a      	mov	r2, r5
 8009006:	4630      	mov	r0, r6
 8009008:	4b08      	ldr	r3, [pc, #32]	; (800902c <_vfiprintf_r+0x258>)
 800900a:	a904      	add	r1, sp, #16
 800900c:	f7fe f8a0 	bl	8007150 <_printf_i>
 8009010:	e7e4      	b.n	8008fdc <_vfiprintf_r+0x208>
 8009012:	bf00      	nop
 8009014:	0800b2a4 	.word	0x0800b2a4
 8009018:	0800b2c4 	.word	0x0800b2c4
 800901c:	0800b284 	.word	0x0800b284
 8009020:	0800b12c 	.word	0x0800b12c
 8009024:	0800b136 	.word	0x0800b136
 8009028:	08006c19 	.word	0x08006c19
 800902c:	08008daf 	.word	0x08008daf
 8009030:	0800b132 	.word	0x0800b132

08009034 <__swbuf_r>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	460e      	mov	r6, r1
 8009038:	4614      	mov	r4, r2
 800903a:	4605      	mov	r5, r0
 800903c:	b118      	cbz	r0, 8009046 <__swbuf_r+0x12>
 800903e:	6983      	ldr	r3, [r0, #24]
 8009040:	b90b      	cbnz	r3, 8009046 <__swbuf_r+0x12>
 8009042:	f000 f9e7 	bl	8009414 <__sinit>
 8009046:	4b21      	ldr	r3, [pc, #132]	; (80090cc <__swbuf_r+0x98>)
 8009048:	429c      	cmp	r4, r3
 800904a:	d12b      	bne.n	80090a4 <__swbuf_r+0x70>
 800904c:	686c      	ldr	r4, [r5, #4]
 800904e:	69a3      	ldr	r3, [r4, #24]
 8009050:	60a3      	str	r3, [r4, #8]
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	071a      	lsls	r2, r3, #28
 8009056:	d52f      	bpl.n	80090b8 <__swbuf_r+0x84>
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	b36b      	cbz	r3, 80090b8 <__swbuf_r+0x84>
 800905c:	6923      	ldr	r3, [r4, #16]
 800905e:	6820      	ldr	r0, [r4, #0]
 8009060:	b2f6      	uxtb	r6, r6
 8009062:	1ac0      	subs	r0, r0, r3
 8009064:	6963      	ldr	r3, [r4, #20]
 8009066:	4637      	mov	r7, r6
 8009068:	4283      	cmp	r3, r0
 800906a:	dc04      	bgt.n	8009076 <__swbuf_r+0x42>
 800906c:	4621      	mov	r1, r4
 800906e:	4628      	mov	r0, r5
 8009070:	f000 f93c 	bl	80092ec <_fflush_r>
 8009074:	bb30      	cbnz	r0, 80090c4 <__swbuf_r+0x90>
 8009076:	68a3      	ldr	r3, [r4, #8]
 8009078:	3001      	adds	r0, #1
 800907a:	3b01      	subs	r3, #1
 800907c:	60a3      	str	r3, [r4, #8]
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	6022      	str	r2, [r4, #0]
 8009084:	701e      	strb	r6, [r3, #0]
 8009086:	6963      	ldr	r3, [r4, #20]
 8009088:	4283      	cmp	r3, r0
 800908a:	d004      	beq.n	8009096 <__swbuf_r+0x62>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	07db      	lsls	r3, r3, #31
 8009090:	d506      	bpl.n	80090a0 <__swbuf_r+0x6c>
 8009092:	2e0a      	cmp	r6, #10
 8009094:	d104      	bne.n	80090a0 <__swbuf_r+0x6c>
 8009096:	4621      	mov	r1, r4
 8009098:	4628      	mov	r0, r5
 800909a:	f000 f927 	bl	80092ec <_fflush_r>
 800909e:	b988      	cbnz	r0, 80090c4 <__swbuf_r+0x90>
 80090a0:	4638      	mov	r0, r7
 80090a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a4:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <__swbuf_r+0x9c>)
 80090a6:	429c      	cmp	r4, r3
 80090a8:	d101      	bne.n	80090ae <__swbuf_r+0x7a>
 80090aa:	68ac      	ldr	r4, [r5, #8]
 80090ac:	e7cf      	b.n	800904e <__swbuf_r+0x1a>
 80090ae:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <__swbuf_r+0xa0>)
 80090b0:	429c      	cmp	r4, r3
 80090b2:	bf08      	it	eq
 80090b4:	68ec      	ldreq	r4, [r5, #12]
 80090b6:	e7ca      	b.n	800904e <__swbuf_r+0x1a>
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f81a 	bl	80090f4 <__swsetup_r>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d0cb      	beq.n	800905c <__swbuf_r+0x28>
 80090c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090c8:	e7ea      	b.n	80090a0 <__swbuf_r+0x6c>
 80090ca:	bf00      	nop
 80090cc:	0800b2a4 	.word	0x0800b2a4
 80090d0:	0800b2c4 	.word	0x0800b2c4
 80090d4:	0800b284 	.word	0x0800b284

080090d8 <__ascii_wctomb>:
 80090d8:	4603      	mov	r3, r0
 80090da:	4608      	mov	r0, r1
 80090dc:	b141      	cbz	r1, 80090f0 <__ascii_wctomb+0x18>
 80090de:	2aff      	cmp	r2, #255	; 0xff
 80090e0:	d904      	bls.n	80090ec <__ascii_wctomb+0x14>
 80090e2:	228a      	movs	r2, #138	; 0x8a
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	4770      	bx	lr
 80090ec:	2001      	movs	r0, #1
 80090ee:	700a      	strb	r2, [r1, #0]
 80090f0:	4770      	bx	lr
	...

080090f4 <__swsetup_r>:
 80090f4:	4b32      	ldr	r3, [pc, #200]	; (80091c0 <__swsetup_r+0xcc>)
 80090f6:	b570      	push	{r4, r5, r6, lr}
 80090f8:	681d      	ldr	r5, [r3, #0]
 80090fa:	4606      	mov	r6, r0
 80090fc:	460c      	mov	r4, r1
 80090fe:	b125      	cbz	r5, 800910a <__swsetup_r+0x16>
 8009100:	69ab      	ldr	r3, [r5, #24]
 8009102:	b913      	cbnz	r3, 800910a <__swsetup_r+0x16>
 8009104:	4628      	mov	r0, r5
 8009106:	f000 f985 	bl	8009414 <__sinit>
 800910a:	4b2e      	ldr	r3, [pc, #184]	; (80091c4 <__swsetup_r+0xd0>)
 800910c:	429c      	cmp	r4, r3
 800910e:	d10f      	bne.n	8009130 <__swsetup_r+0x3c>
 8009110:	686c      	ldr	r4, [r5, #4]
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009118:	0719      	lsls	r1, r3, #28
 800911a:	d42c      	bmi.n	8009176 <__swsetup_r+0x82>
 800911c:	06dd      	lsls	r5, r3, #27
 800911e:	d411      	bmi.n	8009144 <__swsetup_r+0x50>
 8009120:	2309      	movs	r3, #9
 8009122:	6033      	str	r3, [r6, #0]
 8009124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800912c:	81a3      	strh	r3, [r4, #12]
 800912e:	e03e      	b.n	80091ae <__swsetup_r+0xba>
 8009130:	4b25      	ldr	r3, [pc, #148]	; (80091c8 <__swsetup_r+0xd4>)
 8009132:	429c      	cmp	r4, r3
 8009134:	d101      	bne.n	800913a <__swsetup_r+0x46>
 8009136:	68ac      	ldr	r4, [r5, #8]
 8009138:	e7eb      	b.n	8009112 <__swsetup_r+0x1e>
 800913a:	4b24      	ldr	r3, [pc, #144]	; (80091cc <__swsetup_r+0xd8>)
 800913c:	429c      	cmp	r4, r3
 800913e:	bf08      	it	eq
 8009140:	68ec      	ldreq	r4, [r5, #12]
 8009142:	e7e6      	b.n	8009112 <__swsetup_r+0x1e>
 8009144:	0758      	lsls	r0, r3, #29
 8009146:	d512      	bpl.n	800916e <__swsetup_r+0x7a>
 8009148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800914a:	b141      	cbz	r1, 800915e <__swsetup_r+0x6a>
 800914c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009150:	4299      	cmp	r1, r3
 8009152:	d002      	beq.n	800915a <__swsetup_r+0x66>
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff fb75 	bl	8008844 <_free_r>
 800915a:	2300      	movs	r3, #0
 800915c:	6363      	str	r3, [r4, #52]	; 0x34
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	2300      	movs	r3, #0
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f043 0308 	orr.w	r3, r3, #8
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	b94b      	cbnz	r3, 800918e <__swsetup_r+0x9a>
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009184:	d003      	beq.n	800918e <__swsetup_r+0x9a>
 8009186:	4621      	mov	r1, r4
 8009188:	4630      	mov	r0, r6
 800918a:	f000 fa07 	bl	800959c <__smakebuf_r>
 800918e:	89a0      	ldrh	r0, [r4, #12]
 8009190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009194:	f010 0301 	ands.w	r3, r0, #1
 8009198:	d00a      	beq.n	80091b0 <__swsetup_r+0xbc>
 800919a:	2300      	movs	r3, #0
 800919c:	60a3      	str	r3, [r4, #8]
 800919e:	6963      	ldr	r3, [r4, #20]
 80091a0:	425b      	negs	r3, r3
 80091a2:	61a3      	str	r3, [r4, #24]
 80091a4:	6923      	ldr	r3, [r4, #16]
 80091a6:	b943      	cbnz	r3, 80091ba <__swsetup_r+0xc6>
 80091a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091ac:	d1ba      	bne.n	8009124 <__swsetup_r+0x30>
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	0781      	lsls	r1, r0, #30
 80091b2:	bf58      	it	pl
 80091b4:	6963      	ldrpl	r3, [r4, #20]
 80091b6:	60a3      	str	r3, [r4, #8]
 80091b8:	e7f4      	b.n	80091a4 <__swsetup_r+0xb0>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e7f7      	b.n	80091ae <__swsetup_r+0xba>
 80091be:	bf00      	nop
 80091c0:	2000000c 	.word	0x2000000c
 80091c4:	0800b2a4 	.word	0x0800b2a4
 80091c8:	0800b2c4 	.word	0x0800b2c4
 80091cc:	0800b284 	.word	0x0800b284

080091d0 <abort>:
 80091d0:	2006      	movs	r0, #6
 80091d2:	b508      	push	{r3, lr}
 80091d4:	f000 fa52 	bl	800967c <raise>
 80091d8:	2001      	movs	r0, #1
 80091da:	f7fa f8d2 	bl	8003382 <_exit>
	...

080091e0 <__sflush_r>:
 80091e0:	898a      	ldrh	r2, [r1, #12]
 80091e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e6:	4605      	mov	r5, r0
 80091e8:	0710      	lsls	r0, r2, #28
 80091ea:	460c      	mov	r4, r1
 80091ec:	d458      	bmi.n	80092a0 <__sflush_r+0xc0>
 80091ee:	684b      	ldr	r3, [r1, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dc05      	bgt.n	8009200 <__sflush_r+0x20>
 80091f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dc02      	bgt.n	8009200 <__sflush_r+0x20>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009202:	2e00      	cmp	r6, #0
 8009204:	d0f9      	beq.n	80091fa <__sflush_r+0x1a>
 8009206:	2300      	movs	r3, #0
 8009208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800920c:	682f      	ldr	r7, [r5, #0]
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	d032      	beq.n	8009278 <__sflush_r+0x98>
 8009212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	075a      	lsls	r2, r3, #29
 8009218:	d505      	bpl.n	8009226 <__sflush_r+0x46>
 800921a:	6863      	ldr	r3, [r4, #4]
 800921c:	1ac0      	subs	r0, r0, r3
 800921e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009220:	b10b      	cbz	r3, 8009226 <__sflush_r+0x46>
 8009222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009224:	1ac0      	subs	r0, r0, r3
 8009226:	2300      	movs	r3, #0
 8009228:	4602      	mov	r2, r0
 800922a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800922c:	4628      	mov	r0, r5
 800922e:	6a21      	ldr	r1, [r4, #32]
 8009230:	47b0      	blx	r6
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	d106      	bne.n	8009246 <__sflush_r+0x66>
 8009238:	6829      	ldr	r1, [r5, #0]
 800923a:	291d      	cmp	r1, #29
 800923c:	d82c      	bhi.n	8009298 <__sflush_r+0xb8>
 800923e:	4a2a      	ldr	r2, [pc, #168]	; (80092e8 <__sflush_r+0x108>)
 8009240:	40ca      	lsrs	r2, r1
 8009242:	07d6      	lsls	r6, r2, #31
 8009244:	d528      	bpl.n	8009298 <__sflush_r+0xb8>
 8009246:	2200      	movs	r2, #0
 8009248:	6062      	str	r2, [r4, #4]
 800924a:	6922      	ldr	r2, [r4, #16]
 800924c:	04d9      	lsls	r1, r3, #19
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	d504      	bpl.n	800925c <__sflush_r+0x7c>
 8009252:	1c42      	adds	r2, r0, #1
 8009254:	d101      	bne.n	800925a <__sflush_r+0x7a>
 8009256:	682b      	ldr	r3, [r5, #0]
 8009258:	b903      	cbnz	r3, 800925c <__sflush_r+0x7c>
 800925a:	6560      	str	r0, [r4, #84]	; 0x54
 800925c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800925e:	602f      	str	r7, [r5, #0]
 8009260:	2900      	cmp	r1, #0
 8009262:	d0ca      	beq.n	80091fa <__sflush_r+0x1a>
 8009264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009268:	4299      	cmp	r1, r3
 800926a:	d002      	beq.n	8009272 <__sflush_r+0x92>
 800926c:	4628      	mov	r0, r5
 800926e:	f7ff fae9 	bl	8008844 <_free_r>
 8009272:	2000      	movs	r0, #0
 8009274:	6360      	str	r0, [r4, #52]	; 0x34
 8009276:	e7c1      	b.n	80091fc <__sflush_r+0x1c>
 8009278:	6a21      	ldr	r1, [r4, #32]
 800927a:	2301      	movs	r3, #1
 800927c:	4628      	mov	r0, r5
 800927e:	47b0      	blx	r6
 8009280:	1c41      	adds	r1, r0, #1
 8009282:	d1c7      	bne.n	8009214 <__sflush_r+0x34>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0c4      	beq.n	8009214 <__sflush_r+0x34>
 800928a:	2b1d      	cmp	r3, #29
 800928c:	d001      	beq.n	8009292 <__sflush_r+0xb2>
 800928e:	2b16      	cmp	r3, #22
 8009290:	d101      	bne.n	8009296 <__sflush_r+0xb6>
 8009292:	602f      	str	r7, [r5, #0]
 8009294:	e7b1      	b.n	80091fa <__sflush_r+0x1a>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	e7ad      	b.n	80091fc <__sflush_r+0x1c>
 80092a0:	690f      	ldr	r7, [r1, #16]
 80092a2:	2f00      	cmp	r7, #0
 80092a4:	d0a9      	beq.n	80091fa <__sflush_r+0x1a>
 80092a6:	0793      	lsls	r3, r2, #30
 80092a8:	bf18      	it	ne
 80092aa:	2300      	movne	r3, #0
 80092ac:	680e      	ldr	r6, [r1, #0]
 80092ae:	bf08      	it	eq
 80092b0:	694b      	ldreq	r3, [r1, #20]
 80092b2:	eba6 0807 	sub.w	r8, r6, r7
 80092b6:	600f      	str	r7, [r1, #0]
 80092b8:	608b      	str	r3, [r1, #8]
 80092ba:	f1b8 0f00 	cmp.w	r8, #0
 80092be:	dd9c      	ble.n	80091fa <__sflush_r+0x1a>
 80092c0:	4643      	mov	r3, r8
 80092c2:	463a      	mov	r2, r7
 80092c4:	4628      	mov	r0, r5
 80092c6:	6a21      	ldr	r1, [r4, #32]
 80092c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092ca:	47b0      	blx	r6
 80092cc:	2800      	cmp	r0, #0
 80092ce:	dc06      	bgt.n	80092de <__sflush_r+0xfe>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092da:	81a3      	strh	r3, [r4, #12]
 80092dc:	e78e      	b.n	80091fc <__sflush_r+0x1c>
 80092de:	4407      	add	r7, r0
 80092e0:	eba8 0800 	sub.w	r8, r8, r0
 80092e4:	e7e9      	b.n	80092ba <__sflush_r+0xda>
 80092e6:	bf00      	nop
 80092e8:	20400001 	.word	0x20400001

080092ec <_fflush_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	690b      	ldr	r3, [r1, #16]
 80092f0:	4605      	mov	r5, r0
 80092f2:	460c      	mov	r4, r1
 80092f4:	b913      	cbnz	r3, 80092fc <_fflush_r+0x10>
 80092f6:	2500      	movs	r5, #0
 80092f8:	4628      	mov	r0, r5
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	b118      	cbz	r0, 8009306 <_fflush_r+0x1a>
 80092fe:	6983      	ldr	r3, [r0, #24]
 8009300:	b90b      	cbnz	r3, 8009306 <_fflush_r+0x1a>
 8009302:	f000 f887 	bl	8009414 <__sinit>
 8009306:	4b14      	ldr	r3, [pc, #80]	; (8009358 <_fflush_r+0x6c>)
 8009308:	429c      	cmp	r4, r3
 800930a:	d11b      	bne.n	8009344 <_fflush_r+0x58>
 800930c:	686c      	ldr	r4, [r5, #4]
 800930e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0ef      	beq.n	80092f6 <_fflush_r+0xa>
 8009316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009318:	07d0      	lsls	r0, r2, #31
 800931a:	d404      	bmi.n	8009326 <_fflush_r+0x3a>
 800931c:	0599      	lsls	r1, r3, #22
 800931e:	d402      	bmi.n	8009326 <_fflush_r+0x3a>
 8009320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009322:	f000 f915 	bl	8009550 <__retarget_lock_acquire_recursive>
 8009326:	4628      	mov	r0, r5
 8009328:	4621      	mov	r1, r4
 800932a:	f7ff ff59 	bl	80091e0 <__sflush_r>
 800932e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009330:	4605      	mov	r5, r0
 8009332:	07da      	lsls	r2, r3, #31
 8009334:	d4e0      	bmi.n	80092f8 <_fflush_r+0xc>
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	059b      	lsls	r3, r3, #22
 800933a:	d4dd      	bmi.n	80092f8 <_fflush_r+0xc>
 800933c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933e:	f000 f908 	bl	8009552 <__retarget_lock_release_recursive>
 8009342:	e7d9      	b.n	80092f8 <_fflush_r+0xc>
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <_fflush_r+0x70>)
 8009346:	429c      	cmp	r4, r3
 8009348:	d101      	bne.n	800934e <_fflush_r+0x62>
 800934a:	68ac      	ldr	r4, [r5, #8]
 800934c:	e7df      	b.n	800930e <_fflush_r+0x22>
 800934e:	4b04      	ldr	r3, [pc, #16]	; (8009360 <_fflush_r+0x74>)
 8009350:	429c      	cmp	r4, r3
 8009352:	bf08      	it	eq
 8009354:	68ec      	ldreq	r4, [r5, #12]
 8009356:	e7da      	b.n	800930e <_fflush_r+0x22>
 8009358:	0800b2a4 	.word	0x0800b2a4
 800935c:	0800b2c4 	.word	0x0800b2c4
 8009360:	0800b284 	.word	0x0800b284

08009364 <std>:
 8009364:	2300      	movs	r3, #0
 8009366:	b510      	push	{r4, lr}
 8009368:	4604      	mov	r4, r0
 800936a:	e9c0 3300 	strd	r3, r3, [r0]
 800936e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009372:	6083      	str	r3, [r0, #8]
 8009374:	8181      	strh	r1, [r0, #12]
 8009376:	6643      	str	r3, [r0, #100]	; 0x64
 8009378:	81c2      	strh	r2, [r0, #14]
 800937a:	6183      	str	r3, [r0, #24]
 800937c:	4619      	mov	r1, r3
 800937e:	2208      	movs	r2, #8
 8009380:	305c      	adds	r0, #92	; 0x5c
 8009382:	f7fd fba3 	bl	8006acc <memset>
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <std+0x38>)
 8009388:	6224      	str	r4, [r4, #32]
 800938a:	6263      	str	r3, [r4, #36]	; 0x24
 800938c:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <std+0x3c>)
 800938e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009390:	4b04      	ldr	r3, [pc, #16]	; (80093a4 <std+0x40>)
 8009392:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009394:	4b04      	ldr	r3, [pc, #16]	; (80093a8 <std+0x44>)
 8009396:	6323      	str	r3, [r4, #48]	; 0x30
 8009398:	bd10      	pop	{r4, pc}
 800939a:	bf00      	nop
 800939c:	080096b5 	.word	0x080096b5
 80093a0:	080096d7 	.word	0x080096d7
 80093a4:	0800970f 	.word	0x0800970f
 80093a8:	08009733 	.word	0x08009733

080093ac <_cleanup_r>:
 80093ac:	4901      	ldr	r1, [pc, #4]	; (80093b4 <_cleanup_r+0x8>)
 80093ae:	f000 b8af 	b.w	8009510 <_fwalk_reent>
 80093b2:	bf00      	nop
 80093b4:	080092ed 	.word	0x080092ed

080093b8 <__sfmoreglue>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	2568      	movs	r5, #104	; 0x68
 80093bc:	1e4a      	subs	r2, r1, #1
 80093be:	4355      	muls	r5, r2
 80093c0:	460e      	mov	r6, r1
 80093c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093c6:	f7ff fa89 	bl	80088dc <_malloc_r>
 80093ca:	4604      	mov	r4, r0
 80093cc:	b140      	cbz	r0, 80093e0 <__sfmoreglue+0x28>
 80093ce:	2100      	movs	r1, #0
 80093d0:	e9c0 1600 	strd	r1, r6, [r0]
 80093d4:	300c      	adds	r0, #12
 80093d6:	60a0      	str	r0, [r4, #8]
 80093d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093dc:	f7fd fb76 	bl	8006acc <memset>
 80093e0:	4620      	mov	r0, r4
 80093e2:	bd70      	pop	{r4, r5, r6, pc}

080093e4 <__sfp_lock_acquire>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__sfp_lock_acquire+0x8>)
 80093e6:	f000 b8b3 	b.w	8009550 <__retarget_lock_acquire_recursive>
 80093ea:	bf00      	nop
 80093ec:	20000d94 	.word	0x20000d94

080093f0 <__sfp_lock_release>:
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <__sfp_lock_release+0x8>)
 80093f2:	f000 b8ae 	b.w	8009552 <__retarget_lock_release_recursive>
 80093f6:	bf00      	nop
 80093f8:	20000d94 	.word	0x20000d94

080093fc <__sinit_lock_acquire>:
 80093fc:	4801      	ldr	r0, [pc, #4]	; (8009404 <__sinit_lock_acquire+0x8>)
 80093fe:	f000 b8a7 	b.w	8009550 <__retarget_lock_acquire_recursive>
 8009402:	bf00      	nop
 8009404:	20000d8f 	.word	0x20000d8f

08009408 <__sinit_lock_release>:
 8009408:	4801      	ldr	r0, [pc, #4]	; (8009410 <__sinit_lock_release+0x8>)
 800940a:	f000 b8a2 	b.w	8009552 <__retarget_lock_release_recursive>
 800940e:	bf00      	nop
 8009410:	20000d8f 	.word	0x20000d8f

08009414 <__sinit>:
 8009414:	b510      	push	{r4, lr}
 8009416:	4604      	mov	r4, r0
 8009418:	f7ff fff0 	bl	80093fc <__sinit_lock_acquire>
 800941c:	69a3      	ldr	r3, [r4, #24]
 800941e:	b11b      	cbz	r3, 8009428 <__sinit+0x14>
 8009420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009424:	f7ff bff0 	b.w	8009408 <__sinit_lock_release>
 8009428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800942c:	6523      	str	r3, [r4, #80]	; 0x50
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <__sinit+0x68>)
 8009430:	4a13      	ldr	r2, [pc, #76]	; (8009480 <__sinit+0x6c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	62a2      	str	r2, [r4, #40]	; 0x28
 8009436:	42a3      	cmp	r3, r4
 8009438:	bf08      	it	eq
 800943a:	2301      	moveq	r3, #1
 800943c:	4620      	mov	r0, r4
 800943e:	bf08      	it	eq
 8009440:	61a3      	streq	r3, [r4, #24]
 8009442:	f000 f81f 	bl	8009484 <__sfp>
 8009446:	6060      	str	r0, [r4, #4]
 8009448:	4620      	mov	r0, r4
 800944a:	f000 f81b 	bl	8009484 <__sfp>
 800944e:	60a0      	str	r0, [r4, #8]
 8009450:	4620      	mov	r0, r4
 8009452:	f000 f817 	bl	8009484 <__sfp>
 8009456:	2200      	movs	r2, #0
 8009458:	2104      	movs	r1, #4
 800945a:	60e0      	str	r0, [r4, #12]
 800945c:	6860      	ldr	r0, [r4, #4]
 800945e:	f7ff ff81 	bl	8009364 <std>
 8009462:	2201      	movs	r2, #1
 8009464:	2109      	movs	r1, #9
 8009466:	68a0      	ldr	r0, [r4, #8]
 8009468:	f7ff ff7c 	bl	8009364 <std>
 800946c:	2202      	movs	r2, #2
 800946e:	2112      	movs	r1, #18
 8009470:	68e0      	ldr	r0, [r4, #12]
 8009472:	f7ff ff77 	bl	8009364 <std>
 8009476:	2301      	movs	r3, #1
 8009478:	61a3      	str	r3, [r4, #24]
 800947a:	e7d1      	b.n	8009420 <__sinit+0xc>
 800947c:	0800af00 	.word	0x0800af00
 8009480:	080093ad 	.word	0x080093ad

08009484 <__sfp>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	4607      	mov	r7, r0
 8009488:	f7ff ffac 	bl	80093e4 <__sfp_lock_acquire>
 800948c:	4b1e      	ldr	r3, [pc, #120]	; (8009508 <__sfp+0x84>)
 800948e:	681e      	ldr	r6, [r3, #0]
 8009490:	69b3      	ldr	r3, [r6, #24]
 8009492:	b913      	cbnz	r3, 800949a <__sfp+0x16>
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff ffbd 	bl	8009414 <__sinit>
 800949a:	3648      	adds	r6, #72	; 0x48
 800949c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	d503      	bpl.n	80094ac <__sfp+0x28>
 80094a4:	6833      	ldr	r3, [r6, #0]
 80094a6:	b30b      	cbz	r3, 80094ec <__sfp+0x68>
 80094a8:	6836      	ldr	r6, [r6, #0]
 80094aa:	e7f7      	b.n	800949c <__sfp+0x18>
 80094ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094b0:	b9d5      	cbnz	r5, 80094e8 <__sfp+0x64>
 80094b2:	4b16      	ldr	r3, [pc, #88]	; (800950c <__sfp+0x88>)
 80094b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094b8:	60e3      	str	r3, [r4, #12]
 80094ba:	6665      	str	r5, [r4, #100]	; 0x64
 80094bc:	f000 f847 	bl	800954e <__retarget_lock_init_recursive>
 80094c0:	f7ff ff96 	bl	80093f0 <__sfp_lock_release>
 80094c4:	2208      	movs	r2, #8
 80094c6:	4629      	mov	r1, r5
 80094c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094d0:	6025      	str	r5, [r4, #0]
 80094d2:	61a5      	str	r5, [r4, #24]
 80094d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094d8:	f7fd faf8 	bl	8006acc <memset>
 80094dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094e4:	4620      	mov	r0, r4
 80094e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e8:	3468      	adds	r4, #104	; 0x68
 80094ea:	e7d9      	b.n	80094a0 <__sfp+0x1c>
 80094ec:	2104      	movs	r1, #4
 80094ee:	4638      	mov	r0, r7
 80094f0:	f7ff ff62 	bl	80093b8 <__sfmoreglue>
 80094f4:	4604      	mov	r4, r0
 80094f6:	6030      	str	r0, [r6, #0]
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d1d5      	bne.n	80094a8 <__sfp+0x24>
 80094fc:	f7ff ff78 	bl	80093f0 <__sfp_lock_release>
 8009500:	230c      	movs	r3, #12
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	e7ee      	b.n	80094e4 <__sfp+0x60>
 8009506:	bf00      	nop
 8009508:	0800af00 	.word	0x0800af00
 800950c:	ffff0001 	.word	0xffff0001

08009510 <_fwalk_reent>:
 8009510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009514:	4606      	mov	r6, r0
 8009516:	4688      	mov	r8, r1
 8009518:	2700      	movs	r7, #0
 800951a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800951e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009522:	f1b9 0901 	subs.w	r9, r9, #1
 8009526:	d505      	bpl.n	8009534 <_fwalk_reent+0x24>
 8009528:	6824      	ldr	r4, [r4, #0]
 800952a:	2c00      	cmp	r4, #0
 800952c:	d1f7      	bne.n	800951e <_fwalk_reent+0xe>
 800952e:	4638      	mov	r0, r7
 8009530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009534:	89ab      	ldrh	r3, [r5, #12]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d907      	bls.n	800954a <_fwalk_reent+0x3a>
 800953a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800953e:	3301      	adds	r3, #1
 8009540:	d003      	beq.n	800954a <_fwalk_reent+0x3a>
 8009542:	4629      	mov	r1, r5
 8009544:	4630      	mov	r0, r6
 8009546:	47c0      	blx	r8
 8009548:	4307      	orrs	r7, r0
 800954a:	3568      	adds	r5, #104	; 0x68
 800954c:	e7e9      	b.n	8009522 <_fwalk_reent+0x12>

0800954e <__retarget_lock_init_recursive>:
 800954e:	4770      	bx	lr

08009550 <__retarget_lock_acquire_recursive>:
 8009550:	4770      	bx	lr

08009552 <__retarget_lock_release_recursive>:
 8009552:	4770      	bx	lr

08009554 <__swhatbuf_r>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	460e      	mov	r6, r1
 8009558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955c:	4614      	mov	r4, r2
 800955e:	2900      	cmp	r1, #0
 8009560:	461d      	mov	r5, r3
 8009562:	b096      	sub	sp, #88	; 0x58
 8009564:	da07      	bge.n	8009576 <__swhatbuf_r+0x22>
 8009566:	2300      	movs	r3, #0
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	89b3      	ldrh	r3, [r6, #12]
 800956c:	061a      	lsls	r2, r3, #24
 800956e:	d410      	bmi.n	8009592 <__swhatbuf_r+0x3e>
 8009570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009574:	e00e      	b.n	8009594 <__swhatbuf_r+0x40>
 8009576:	466a      	mov	r2, sp
 8009578:	f000 f902 	bl	8009780 <_fstat_r>
 800957c:	2800      	cmp	r0, #0
 800957e:	dbf2      	blt.n	8009566 <__swhatbuf_r+0x12>
 8009580:	9a01      	ldr	r2, [sp, #4]
 8009582:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009586:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800958a:	425a      	negs	r2, r3
 800958c:	415a      	adcs	r2, r3
 800958e:	602a      	str	r2, [r5, #0]
 8009590:	e7ee      	b.n	8009570 <__swhatbuf_r+0x1c>
 8009592:	2340      	movs	r3, #64	; 0x40
 8009594:	2000      	movs	r0, #0
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	b016      	add	sp, #88	; 0x58
 800959a:	bd70      	pop	{r4, r5, r6, pc}

0800959c <__smakebuf_r>:
 800959c:	898b      	ldrh	r3, [r1, #12]
 800959e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095a0:	079d      	lsls	r5, r3, #30
 80095a2:	4606      	mov	r6, r0
 80095a4:	460c      	mov	r4, r1
 80095a6:	d507      	bpl.n	80095b8 <__smakebuf_r+0x1c>
 80095a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	6123      	str	r3, [r4, #16]
 80095b0:	2301      	movs	r3, #1
 80095b2:	6163      	str	r3, [r4, #20]
 80095b4:	b002      	add	sp, #8
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	466a      	mov	r2, sp
 80095ba:	ab01      	add	r3, sp, #4
 80095bc:	f7ff ffca 	bl	8009554 <__swhatbuf_r>
 80095c0:	9900      	ldr	r1, [sp, #0]
 80095c2:	4605      	mov	r5, r0
 80095c4:	4630      	mov	r0, r6
 80095c6:	f7ff f989 	bl	80088dc <_malloc_r>
 80095ca:	b948      	cbnz	r0, 80095e0 <__smakebuf_r+0x44>
 80095cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d0:	059a      	lsls	r2, r3, #22
 80095d2:	d4ef      	bmi.n	80095b4 <__smakebuf_r+0x18>
 80095d4:	f023 0303 	bic.w	r3, r3, #3
 80095d8:	f043 0302 	orr.w	r3, r3, #2
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	e7e3      	b.n	80095a8 <__smakebuf_r+0xc>
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <__smakebuf_r+0x7c>)
 80095e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	6020      	str	r0, [r4, #0]
 80095e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	9b00      	ldr	r3, [sp, #0]
 80095f0:	6120      	str	r0, [r4, #16]
 80095f2:	6163      	str	r3, [r4, #20]
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	b15b      	cbz	r3, 8009610 <__smakebuf_r+0x74>
 80095f8:	4630      	mov	r0, r6
 80095fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095fe:	f000 f8d1 	bl	80097a4 <_isatty_r>
 8009602:	b128      	cbz	r0, 8009610 <__smakebuf_r+0x74>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	f023 0303 	bic.w	r3, r3, #3
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	81a3      	strh	r3, [r4, #12]
 8009610:	89a0      	ldrh	r0, [r4, #12]
 8009612:	4305      	orrs	r5, r0
 8009614:	81a5      	strh	r5, [r4, #12]
 8009616:	e7cd      	b.n	80095b4 <__smakebuf_r+0x18>
 8009618:	080093ad 	.word	0x080093ad

0800961c <_malloc_usable_size_r>:
 800961c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009620:	1f18      	subs	r0, r3, #4
 8009622:	2b00      	cmp	r3, #0
 8009624:	bfbc      	itt	lt
 8009626:	580b      	ldrlt	r3, [r1, r0]
 8009628:	18c0      	addlt	r0, r0, r3
 800962a:	4770      	bx	lr

0800962c <_raise_r>:
 800962c:	291f      	cmp	r1, #31
 800962e:	b538      	push	{r3, r4, r5, lr}
 8009630:	4604      	mov	r4, r0
 8009632:	460d      	mov	r5, r1
 8009634:	d904      	bls.n	8009640 <_raise_r+0x14>
 8009636:	2316      	movs	r3, #22
 8009638:	6003      	str	r3, [r0, #0]
 800963a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009642:	b112      	cbz	r2, 800964a <_raise_r+0x1e>
 8009644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009648:	b94b      	cbnz	r3, 800965e <_raise_r+0x32>
 800964a:	4620      	mov	r0, r4
 800964c:	f000 f830 	bl	80096b0 <_getpid_r>
 8009650:	462a      	mov	r2, r5
 8009652:	4601      	mov	r1, r0
 8009654:	4620      	mov	r0, r4
 8009656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800965a:	f000 b817 	b.w	800968c <_kill_r>
 800965e:	2b01      	cmp	r3, #1
 8009660:	d00a      	beq.n	8009678 <_raise_r+0x4c>
 8009662:	1c59      	adds	r1, r3, #1
 8009664:	d103      	bne.n	800966e <_raise_r+0x42>
 8009666:	2316      	movs	r3, #22
 8009668:	6003      	str	r3, [r0, #0]
 800966a:	2001      	movs	r0, #1
 800966c:	e7e7      	b.n	800963e <_raise_r+0x12>
 800966e:	2400      	movs	r4, #0
 8009670:	4628      	mov	r0, r5
 8009672:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009676:	4798      	blx	r3
 8009678:	2000      	movs	r0, #0
 800967a:	e7e0      	b.n	800963e <_raise_r+0x12>

0800967c <raise>:
 800967c:	4b02      	ldr	r3, [pc, #8]	; (8009688 <raise+0xc>)
 800967e:	4601      	mov	r1, r0
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	f7ff bfd3 	b.w	800962c <_raise_r>
 8009686:	bf00      	nop
 8009688:	2000000c 	.word	0x2000000c

0800968c <_kill_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	2300      	movs	r3, #0
 8009690:	4d06      	ldr	r5, [pc, #24]	; (80096ac <_kill_r+0x20>)
 8009692:	4604      	mov	r4, r0
 8009694:	4608      	mov	r0, r1
 8009696:	4611      	mov	r1, r2
 8009698:	602b      	str	r3, [r5, #0]
 800969a:	f7f9 fe62 	bl	8003362 <_kill>
 800969e:	1c43      	adds	r3, r0, #1
 80096a0:	d102      	bne.n	80096a8 <_kill_r+0x1c>
 80096a2:	682b      	ldr	r3, [r5, #0]
 80096a4:	b103      	cbz	r3, 80096a8 <_kill_r+0x1c>
 80096a6:	6023      	str	r3, [r4, #0]
 80096a8:	bd38      	pop	{r3, r4, r5, pc}
 80096aa:	bf00      	nop
 80096ac:	20000d88 	.word	0x20000d88

080096b0 <_getpid_r>:
 80096b0:	f7f9 be50 	b.w	8003354 <_getpid>

080096b4 <__sread>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	460c      	mov	r4, r1
 80096b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096bc:	f000 f894 	bl	80097e8 <_read_r>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	bfab      	itete	ge
 80096c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096c6:	89a3      	ldrhlt	r3, [r4, #12]
 80096c8:	181b      	addge	r3, r3, r0
 80096ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096ce:	bfac      	ite	ge
 80096d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80096d2:	81a3      	strhlt	r3, [r4, #12]
 80096d4:	bd10      	pop	{r4, pc}

080096d6 <__swrite>:
 80096d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096da:	461f      	mov	r7, r3
 80096dc:	898b      	ldrh	r3, [r1, #12]
 80096de:	4605      	mov	r5, r0
 80096e0:	05db      	lsls	r3, r3, #23
 80096e2:	460c      	mov	r4, r1
 80096e4:	4616      	mov	r6, r2
 80096e6:	d505      	bpl.n	80096f4 <__swrite+0x1e>
 80096e8:	2302      	movs	r3, #2
 80096ea:	2200      	movs	r2, #0
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	f000 f868 	bl	80097c4 <_lseek_r>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	4632      	mov	r2, r6
 80096f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096fc:	81a3      	strh	r3, [r4, #12]
 80096fe:	4628      	mov	r0, r5
 8009700:	463b      	mov	r3, r7
 8009702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800970a:	f000 b817 	b.w	800973c <_write_r>

0800970e <__sseek>:
 800970e:	b510      	push	{r4, lr}
 8009710:	460c      	mov	r4, r1
 8009712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009716:	f000 f855 	bl	80097c4 <_lseek_r>
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	bf15      	itete	ne
 8009720:	6560      	strne	r0, [r4, #84]	; 0x54
 8009722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800972a:	81a3      	strheq	r3, [r4, #12]
 800972c:	bf18      	it	ne
 800972e:	81a3      	strhne	r3, [r4, #12]
 8009730:	bd10      	pop	{r4, pc}

08009732 <__sclose>:
 8009732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009736:	f000 b813 	b.w	8009760 <_close_r>
	...

0800973c <_write_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	2200      	movs	r2, #0
 8009746:	4d05      	ldr	r5, [pc, #20]	; (800975c <_write_r+0x20>)
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f7f9 fe40 	bl	80033d0 <_write>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_write_r+0x1e>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_write_r+0x1e>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20000d88 	.word	0x20000d88

08009760 <_close_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	2300      	movs	r3, #0
 8009764:	4d05      	ldr	r5, [pc, #20]	; (800977c <_close_r+0x1c>)
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f9 fe4c 	bl	8003408 <_close>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_close_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_close_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	20000d88 	.word	0x20000d88

08009780 <_fstat_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	2300      	movs	r3, #0
 8009784:	4d06      	ldr	r5, [pc, #24]	; (80097a0 <_fstat_r+0x20>)
 8009786:	4604      	mov	r4, r0
 8009788:	4608      	mov	r0, r1
 800978a:	4611      	mov	r1, r2
 800978c:	602b      	str	r3, [r5, #0]
 800978e:	f7f9 fe46 	bl	800341e <_fstat>
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	d102      	bne.n	800979c <_fstat_r+0x1c>
 8009796:	682b      	ldr	r3, [r5, #0]
 8009798:	b103      	cbz	r3, 800979c <_fstat_r+0x1c>
 800979a:	6023      	str	r3, [r4, #0]
 800979c:	bd38      	pop	{r3, r4, r5, pc}
 800979e:	bf00      	nop
 80097a0:	20000d88 	.word	0x20000d88

080097a4 <_isatty_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	2300      	movs	r3, #0
 80097a8:	4d05      	ldr	r5, [pc, #20]	; (80097c0 <_isatty_r+0x1c>)
 80097aa:	4604      	mov	r4, r0
 80097ac:	4608      	mov	r0, r1
 80097ae:	602b      	str	r3, [r5, #0]
 80097b0:	f7f9 fe44 	bl	800343c <_isatty>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_isatty_r+0x1a>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_isatty_r+0x1a>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20000d88 	.word	0x20000d88

080097c4 <_lseek_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	4611      	mov	r1, r2
 80097cc:	2200      	movs	r2, #0
 80097ce:	4d05      	ldr	r5, [pc, #20]	; (80097e4 <_lseek_r+0x20>)
 80097d0:	602a      	str	r2, [r5, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	f7f9 fe3c 	bl	8003450 <_lseek>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_lseek_r+0x1e>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_lseek_r+0x1e>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	20000d88 	.word	0x20000d88

080097e8 <_read_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4604      	mov	r4, r0
 80097ec:	4608      	mov	r0, r1
 80097ee:	4611      	mov	r1, r2
 80097f0:	2200      	movs	r2, #0
 80097f2:	4d05      	ldr	r5, [pc, #20]	; (8009808 <_read_r+0x20>)
 80097f4:	602a      	str	r2, [r5, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f7f9 fdcd 	bl	8003396 <_read>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_read_r+0x1e>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_read_r+0x1e>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	20000d88 	.word	0x20000d88

0800980c <acos>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	4604      	mov	r4, r0
 8009810:	460d      	mov	r5, r1
 8009812:	f000 f901 	bl	8009a18 <__ieee754_acos>
 8009816:	4b11      	ldr	r3, [pc, #68]	; (800985c <acos+0x50>)
 8009818:	4606      	mov	r6, r0
 800981a:	f993 3000 	ldrsb.w	r3, [r3]
 800981e:	460f      	mov	r7, r1
 8009820:	3301      	adds	r3, #1
 8009822:	d018      	beq.n	8009856 <acos+0x4a>
 8009824:	4622      	mov	r2, r4
 8009826:	462b      	mov	r3, r5
 8009828:	4620      	mov	r0, r4
 800982a:	4629      	mov	r1, r5
 800982c:	f7f7 f8ee 	bl	8000a0c <__aeabi_dcmpun>
 8009830:	b988      	cbnz	r0, 8009856 <acos+0x4a>
 8009832:	4620      	mov	r0, r4
 8009834:	4629      	mov	r1, r5
 8009836:	f001 f8fd 	bl	800aa34 <fabs>
 800983a:	2200      	movs	r2, #0
 800983c:	4b08      	ldr	r3, [pc, #32]	; (8009860 <acos+0x54>)
 800983e:	f7f7 f8db 	bl	80009f8 <__aeabi_dcmpgt>
 8009842:	b140      	cbz	r0, 8009856 <acos+0x4a>
 8009844:	f7fd f918 	bl	8006a78 <__errno>
 8009848:	2321      	movs	r3, #33	; 0x21
 800984a:	6003      	str	r3, [r0, #0]
 800984c:	4805      	ldr	r0, [pc, #20]	; (8009864 <acos+0x58>)
 800984e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009852:	f001 b8f9 	b.w	800aa48 <nan>
 8009856:	4630      	mov	r0, r6
 8009858:	4639      	mov	r1, r7
 800985a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800985c:	200001dc 	.word	0x200001dc
 8009860:	3ff00000 	.word	0x3ff00000
 8009864:	0800b178 	.word	0x0800b178

08009868 <pow>:
 8009868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800986c:	461f      	mov	r7, r3
 800986e:	4680      	mov	r8, r0
 8009870:	4689      	mov	r9, r1
 8009872:	4616      	mov	r6, r2
 8009874:	f000 fb1c 	bl	8009eb0 <__ieee754_pow>
 8009878:	4b4d      	ldr	r3, [pc, #308]	; (80099b0 <pow+0x148>)
 800987a:	4604      	mov	r4, r0
 800987c:	f993 3000 	ldrsb.w	r3, [r3]
 8009880:	460d      	mov	r5, r1
 8009882:	3301      	adds	r3, #1
 8009884:	d015      	beq.n	80098b2 <pow+0x4a>
 8009886:	4632      	mov	r2, r6
 8009888:	463b      	mov	r3, r7
 800988a:	4630      	mov	r0, r6
 800988c:	4639      	mov	r1, r7
 800988e:	f7f7 f8bd 	bl	8000a0c <__aeabi_dcmpun>
 8009892:	b970      	cbnz	r0, 80098b2 <pow+0x4a>
 8009894:	4642      	mov	r2, r8
 8009896:	464b      	mov	r3, r9
 8009898:	4640      	mov	r0, r8
 800989a:	4649      	mov	r1, r9
 800989c:	f7f7 f8b6 	bl	8000a0c <__aeabi_dcmpun>
 80098a0:	2200      	movs	r2, #0
 80098a2:	2300      	movs	r3, #0
 80098a4:	b148      	cbz	r0, 80098ba <pow+0x52>
 80098a6:	4630      	mov	r0, r6
 80098a8:	4639      	mov	r1, r7
 80098aa:	f7f7 f87d 	bl	80009a8 <__aeabi_dcmpeq>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d17b      	bne.n	80099aa <pow+0x142>
 80098b2:	4620      	mov	r0, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ba:	4640      	mov	r0, r8
 80098bc:	4649      	mov	r1, r9
 80098be:	f7f7 f873 	bl	80009a8 <__aeabi_dcmpeq>
 80098c2:	b1e0      	cbz	r0, 80098fe <pow+0x96>
 80098c4:	2200      	movs	r2, #0
 80098c6:	2300      	movs	r3, #0
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	f7f7 f86c 	bl	80009a8 <__aeabi_dcmpeq>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d16a      	bne.n	80099aa <pow+0x142>
 80098d4:	4630      	mov	r0, r6
 80098d6:	4639      	mov	r1, r7
 80098d8:	f001 f8af 	bl	800aa3a <finite>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d0e8      	beq.n	80098b2 <pow+0x4a>
 80098e0:	2200      	movs	r2, #0
 80098e2:	2300      	movs	r3, #0
 80098e4:	4630      	mov	r0, r6
 80098e6:	4639      	mov	r1, r7
 80098e8:	f7f7 f868 	bl	80009bc <__aeabi_dcmplt>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d0e0      	beq.n	80098b2 <pow+0x4a>
 80098f0:	f7fd f8c2 	bl	8006a78 <__errno>
 80098f4:	2321      	movs	r3, #33	; 0x21
 80098f6:	2400      	movs	r4, #0
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	4d2e      	ldr	r5, [pc, #184]	; (80099b4 <pow+0x14c>)
 80098fc:	e7d9      	b.n	80098b2 <pow+0x4a>
 80098fe:	4620      	mov	r0, r4
 8009900:	4629      	mov	r1, r5
 8009902:	f001 f89a 	bl	800aa3a <finite>
 8009906:	bba8      	cbnz	r0, 8009974 <pow+0x10c>
 8009908:	4640      	mov	r0, r8
 800990a:	4649      	mov	r1, r9
 800990c:	f001 f895 	bl	800aa3a <finite>
 8009910:	b380      	cbz	r0, 8009974 <pow+0x10c>
 8009912:	4630      	mov	r0, r6
 8009914:	4639      	mov	r1, r7
 8009916:	f001 f890 	bl	800aa3a <finite>
 800991a:	b358      	cbz	r0, 8009974 <pow+0x10c>
 800991c:	4622      	mov	r2, r4
 800991e:	462b      	mov	r3, r5
 8009920:	4620      	mov	r0, r4
 8009922:	4629      	mov	r1, r5
 8009924:	f7f7 f872 	bl	8000a0c <__aeabi_dcmpun>
 8009928:	b160      	cbz	r0, 8009944 <pow+0xdc>
 800992a:	f7fd f8a5 	bl	8006a78 <__errno>
 800992e:	2321      	movs	r3, #33	; 0x21
 8009930:	2200      	movs	r2, #0
 8009932:	6003      	str	r3, [r0, #0]
 8009934:	2300      	movs	r3, #0
 8009936:	4610      	mov	r0, r2
 8009938:	4619      	mov	r1, r3
 800993a:	f7f6 fef7 	bl	800072c <__aeabi_ddiv>
 800993e:	4604      	mov	r4, r0
 8009940:	460d      	mov	r5, r1
 8009942:	e7b6      	b.n	80098b2 <pow+0x4a>
 8009944:	f7fd f898 	bl	8006a78 <__errno>
 8009948:	2322      	movs	r3, #34	; 0x22
 800994a:	2200      	movs	r2, #0
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	4649      	mov	r1, r9
 8009950:	2300      	movs	r3, #0
 8009952:	4640      	mov	r0, r8
 8009954:	f7f7 f832 	bl	80009bc <__aeabi_dcmplt>
 8009958:	2400      	movs	r4, #0
 800995a:	b148      	cbz	r0, 8009970 <pow+0x108>
 800995c:	4630      	mov	r0, r6
 800995e:	4639      	mov	r1, r7
 8009960:	f001 f878 	bl	800aa54 <rint>
 8009964:	4632      	mov	r2, r6
 8009966:	463b      	mov	r3, r7
 8009968:	f7f7 f81e 	bl	80009a8 <__aeabi_dcmpeq>
 800996c:	2800      	cmp	r0, #0
 800996e:	d0c4      	beq.n	80098fa <pow+0x92>
 8009970:	4d11      	ldr	r5, [pc, #68]	; (80099b8 <pow+0x150>)
 8009972:	e79e      	b.n	80098b2 <pow+0x4a>
 8009974:	2200      	movs	r2, #0
 8009976:	2300      	movs	r3, #0
 8009978:	4620      	mov	r0, r4
 800997a:	4629      	mov	r1, r5
 800997c:	f7f7 f814 	bl	80009a8 <__aeabi_dcmpeq>
 8009980:	2800      	cmp	r0, #0
 8009982:	d096      	beq.n	80098b2 <pow+0x4a>
 8009984:	4640      	mov	r0, r8
 8009986:	4649      	mov	r1, r9
 8009988:	f001 f857 	bl	800aa3a <finite>
 800998c:	2800      	cmp	r0, #0
 800998e:	d090      	beq.n	80098b2 <pow+0x4a>
 8009990:	4630      	mov	r0, r6
 8009992:	4639      	mov	r1, r7
 8009994:	f001 f851 	bl	800aa3a <finite>
 8009998:	2800      	cmp	r0, #0
 800999a:	d08a      	beq.n	80098b2 <pow+0x4a>
 800999c:	f7fd f86c 	bl	8006a78 <__errno>
 80099a0:	2322      	movs	r3, #34	; 0x22
 80099a2:	2400      	movs	r4, #0
 80099a4:	2500      	movs	r5, #0
 80099a6:	6003      	str	r3, [r0, #0]
 80099a8:	e783      	b.n	80098b2 <pow+0x4a>
 80099aa:	2400      	movs	r4, #0
 80099ac:	4d03      	ldr	r5, [pc, #12]	; (80099bc <pow+0x154>)
 80099ae:	e780      	b.n	80098b2 <pow+0x4a>
 80099b0:	200001dc 	.word	0x200001dc
 80099b4:	fff00000 	.word	0xfff00000
 80099b8:	7ff00000 	.word	0x7ff00000
 80099bc:	3ff00000 	.word	0x3ff00000

080099c0 <sqrt>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	4606      	mov	r6, r0
 80099c4:	460f      	mov	r7, r1
 80099c6:	f000 ff89 	bl	800a8dc <__ieee754_sqrt>
 80099ca:	4b12      	ldr	r3, [pc, #72]	; (8009a14 <sqrt+0x54>)
 80099cc:	4604      	mov	r4, r0
 80099ce:	f993 3000 	ldrsb.w	r3, [r3]
 80099d2:	460d      	mov	r5, r1
 80099d4:	3301      	adds	r3, #1
 80099d6:	d019      	beq.n	8009a0c <sqrt+0x4c>
 80099d8:	4632      	mov	r2, r6
 80099da:	463b      	mov	r3, r7
 80099dc:	4630      	mov	r0, r6
 80099de:	4639      	mov	r1, r7
 80099e0:	f7f7 f814 	bl	8000a0c <__aeabi_dcmpun>
 80099e4:	b990      	cbnz	r0, 8009a0c <sqrt+0x4c>
 80099e6:	2200      	movs	r2, #0
 80099e8:	2300      	movs	r3, #0
 80099ea:	4630      	mov	r0, r6
 80099ec:	4639      	mov	r1, r7
 80099ee:	f7f6 ffe5 	bl	80009bc <__aeabi_dcmplt>
 80099f2:	b158      	cbz	r0, 8009a0c <sqrt+0x4c>
 80099f4:	f7fd f840 	bl	8006a78 <__errno>
 80099f8:	2321      	movs	r3, #33	; 0x21
 80099fa:	2200      	movs	r2, #0
 80099fc:	6003      	str	r3, [r0, #0]
 80099fe:	2300      	movs	r3, #0
 8009a00:	4610      	mov	r0, r2
 8009a02:	4619      	mov	r1, r3
 8009a04:	f7f6 fe92 	bl	800072c <__aeabi_ddiv>
 8009a08:	4604      	mov	r4, r0
 8009a0a:	460d      	mov	r5, r1
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	4629      	mov	r1, r5
 8009a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a12:	bf00      	nop
 8009a14:	200001dc 	.word	0x200001dc

08009a18 <__ieee754_acos>:
 8009a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	4cb2      	ldr	r4, [pc, #712]	; (8009ce8 <__ieee754_acos+0x2d0>)
 8009a1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a22:	42a3      	cmp	r3, r4
 8009a24:	4607      	mov	r7, r0
 8009a26:	460e      	mov	r6, r1
 8009a28:	dd16      	ble.n	8009a58 <__ieee754_acos+0x40>
 8009a2a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8009a2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009a32:	4303      	orrs	r3, r0
 8009a34:	d107      	bne.n	8009a46 <__ieee754_acos+0x2e>
 8009a36:	2900      	cmp	r1, #0
 8009a38:	f300 8202 	bgt.w	8009e40 <__ieee754_acos+0x428>
 8009a3c:	a190      	add	r1, pc, #576	; (adr r1, 8009c80 <__ieee754_acos+0x268>)
 8009a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	f7f6 fb8d 	bl	8000168 <__aeabi_dsub>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	f7f6 fe6b 	bl	800072c <__aeabi_ddiv>
 8009a56:	e7f4      	b.n	8009a42 <__ieee754_acos+0x2a>
 8009a58:	4ca4      	ldr	r4, [pc, #656]	; (8009cec <__ieee754_acos+0x2d4>)
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	f300 8083 	bgt.w	8009b66 <__ieee754_acos+0x14e>
 8009a60:	4aa3      	ldr	r2, [pc, #652]	; (8009cf0 <__ieee754_acos+0x2d8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	f340 81ef 	ble.w	8009e46 <__ieee754_acos+0x42e>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	f7f6 fd34 	bl	80004d8 <__aeabi_dmul>
 8009a70:	a385      	add	r3, pc, #532	; (adr r3, 8009c88 <__ieee754_acos+0x270>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	4604      	mov	r4, r0
 8009a78:	460d      	mov	r5, r1
 8009a7a:	f7f6 fd2d 	bl	80004d8 <__aeabi_dmul>
 8009a7e:	a384      	add	r3, pc, #528	; (adr r3, 8009c90 <__ieee754_acos+0x278>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f7f6 fb72 	bl	800016c <__adddf3>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	f7f6 fd24 	bl	80004d8 <__aeabi_dmul>
 8009a90:	a381      	add	r3, pc, #516	; (adr r3, 8009c98 <__ieee754_acos+0x280>)
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	f7f6 fb67 	bl	8000168 <__aeabi_dsub>
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	f7f6 fd1b 	bl	80004d8 <__aeabi_dmul>
 8009aa2:	a37f      	add	r3, pc, #508	; (adr r3, 8009ca0 <__ieee754_acos+0x288>)
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	f7f6 fb60 	bl	800016c <__adddf3>
 8009aac:	4622      	mov	r2, r4
 8009aae:	462b      	mov	r3, r5
 8009ab0:	f7f6 fd12 	bl	80004d8 <__aeabi_dmul>
 8009ab4:	a37c      	add	r3, pc, #496	; (adr r3, 8009ca8 <__ieee754_acos+0x290>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	f7f6 fb55 	bl	8000168 <__aeabi_dsub>
 8009abe:	4622      	mov	r2, r4
 8009ac0:	462b      	mov	r3, r5
 8009ac2:	f7f6 fd09 	bl	80004d8 <__aeabi_dmul>
 8009ac6:	a37a      	add	r3, pc, #488	; (adr r3, 8009cb0 <__ieee754_acos+0x298>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	f7f6 fb4e 	bl	800016c <__adddf3>
 8009ad0:	4622      	mov	r2, r4
 8009ad2:	462b      	mov	r3, r5
 8009ad4:	f7f6 fd00 	bl	80004d8 <__aeabi_dmul>
 8009ad8:	a377      	add	r3, pc, #476	; (adr r3, 8009cb8 <__ieee754_acos+0x2a0>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	4680      	mov	r8, r0
 8009ae0:	4689      	mov	r9, r1
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	f7f6 fcf7 	bl	80004d8 <__aeabi_dmul>
 8009aea:	a375      	add	r3, pc, #468	; (adr r3, 8009cc0 <__ieee754_acos+0x2a8>)
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f7f6 fb3a 	bl	8000168 <__aeabi_dsub>
 8009af4:	4622      	mov	r2, r4
 8009af6:	462b      	mov	r3, r5
 8009af8:	f7f6 fcee 	bl	80004d8 <__aeabi_dmul>
 8009afc:	a372      	add	r3, pc, #456	; (adr r3, 8009cc8 <__ieee754_acos+0x2b0>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f7f6 fb33 	bl	800016c <__adddf3>
 8009b06:	4622      	mov	r2, r4
 8009b08:	462b      	mov	r3, r5
 8009b0a:	f7f6 fce5 	bl	80004d8 <__aeabi_dmul>
 8009b0e:	a370      	add	r3, pc, #448	; (adr r3, 8009cd0 <__ieee754_acos+0x2b8>)
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f7f6 fb28 	bl	8000168 <__aeabi_dsub>
 8009b18:	4622      	mov	r2, r4
 8009b1a:	462b      	mov	r3, r5
 8009b1c:	f7f6 fcdc 	bl	80004d8 <__aeabi_dmul>
 8009b20:	2200      	movs	r2, #0
 8009b22:	4b74      	ldr	r3, [pc, #464]	; (8009cf4 <__ieee754_acos+0x2dc>)
 8009b24:	f7f6 fb22 	bl	800016c <__adddf3>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4640      	mov	r0, r8
 8009b2e:	4649      	mov	r1, r9
 8009b30:	f7f6 fdfc 	bl	800072c <__aeabi_ddiv>
 8009b34:	463a      	mov	r2, r7
 8009b36:	4633      	mov	r3, r6
 8009b38:	f7f6 fcce 	bl	80004d8 <__aeabi_dmul>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	a165      	add	r1, pc, #404	; (adr r1, 8009cd8 <__ieee754_acos+0x2c0>)
 8009b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b46:	f7f6 fb0f 	bl	8000168 <__aeabi_dsub>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4638      	mov	r0, r7
 8009b50:	4631      	mov	r1, r6
 8009b52:	f7f6 fb09 	bl	8000168 <__aeabi_dsub>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	a161      	add	r1, pc, #388	; (adr r1, 8009ce0 <__ieee754_acos+0x2c8>)
 8009b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b60:	f7f6 fb02 	bl	8000168 <__aeabi_dsub>
 8009b64:	e76d      	b.n	8009a42 <__ieee754_acos+0x2a>
 8009b66:	2900      	cmp	r1, #0
 8009b68:	f280 80c8 	bge.w	8009cfc <__ieee754_acos+0x2e4>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4b61      	ldr	r3, [pc, #388]	; (8009cf4 <__ieee754_acos+0x2dc>)
 8009b70:	f7f6 fafc 	bl	800016c <__adddf3>
 8009b74:	2200      	movs	r2, #0
 8009b76:	4b60      	ldr	r3, [pc, #384]	; (8009cf8 <__ieee754_acos+0x2e0>)
 8009b78:	f7f6 fcae 	bl	80004d8 <__aeabi_dmul>
 8009b7c:	a342      	add	r3, pc, #264	; (adr r3, 8009c88 <__ieee754_acos+0x270>)
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	4604      	mov	r4, r0
 8009b84:	460d      	mov	r5, r1
 8009b86:	f7f6 fca7 	bl	80004d8 <__aeabi_dmul>
 8009b8a:	a341      	add	r3, pc, #260	; (adr r3, 8009c90 <__ieee754_acos+0x278>)
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	f7f6 faec 	bl	800016c <__adddf3>
 8009b94:	4622      	mov	r2, r4
 8009b96:	462b      	mov	r3, r5
 8009b98:	f7f6 fc9e 	bl	80004d8 <__aeabi_dmul>
 8009b9c:	a33e      	add	r3, pc, #248	; (adr r3, 8009c98 <__ieee754_acos+0x280>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	f7f6 fae1 	bl	8000168 <__aeabi_dsub>
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	462b      	mov	r3, r5
 8009baa:	f7f6 fc95 	bl	80004d8 <__aeabi_dmul>
 8009bae:	a33c      	add	r3, pc, #240	; (adr r3, 8009ca0 <__ieee754_acos+0x288>)
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	f7f6 fada 	bl	800016c <__adddf3>
 8009bb8:	4622      	mov	r2, r4
 8009bba:	462b      	mov	r3, r5
 8009bbc:	f7f6 fc8c 	bl	80004d8 <__aeabi_dmul>
 8009bc0:	a339      	add	r3, pc, #228	; (adr r3, 8009ca8 <__ieee754_acos+0x290>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	f7f6 facf 	bl	8000168 <__aeabi_dsub>
 8009bca:	4622      	mov	r2, r4
 8009bcc:	462b      	mov	r3, r5
 8009bce:	f7f6 fc83 	bl	80004d8 <__aeabi_dmul>
 8009bd2:	a337      	add	r3, pc, #220	; (adr r3, 8009cb0 <__ieee754_acos+0x298>)
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	f7f6 fac8 	bl	800016c <__adddf3>
 8009bdc:	4622      	mov	r2, r4
 8009bde:	462b      	mov	r3, r5
 8009be0:	f7f6 fc7a 	bl	80004d8 <__aeabi_dmul>
 8009be4:	4680      	mov	r8, r0
 8009be6:	4689      	mov	r9, r1
 8009be8:	4620      	mov	r0, r4
 8009bea:	4629      	mov	r1, r5
 8009bec:	f000 fe76 	bl	800a8dc <__ieee754_sqrt>
 8009bf0:	a331      	add	r3, pc, #196	; (adr r3, 8009cb8 <__ieee754_acos+0x2a0>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460f      	mov	r7, r1
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7f6 fc6b 	bl	80004d8 <__aeabi_dmul>
 8009c02:	a32f      	add	r3, pc, #188	; (adr r3, 8009cc0 <__ieee754_acos+0x2a8>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f7f6 faae 	bl	8000168 <__aeabi_dsub>
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	462b      	mov	r3, r5
 8009c10:	f7f6 fc62 	bl	80004d8 <__aeabi_dmul>
 8009c14:	a32c      	add	r3, pc, #176	; (adr r3, 8009cc8 <__ieee754_acos+0x2b0>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	f7f6 faa7 	bl	800016c <__adddf3>
 8009c1e:	4622      	mov	r2, r4
 8009c20:	462b      	mov	r3, r5
 8009c22:	f7f6 fc59 	bl	80004d8 <__aeabi_dmul>
 8009c26:	a32a      	add	r3, pc, #168	; (adr r3, 8009cd0 <__ieee754_acos+0x2b8>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 fa9c 	bl	8000168 <__aeabi_dsub>
 8009c30:	4622      	mov	r2, r4
 8009c32:	462b      	mov	r3, r5
 8009c34:	f7f6 fc50 	bl	80004d8 <__aeabi_dmul>
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4b2e      	ldr	r3, [pc, #184]	; (8009cf4 <__ieee754_acos+0x2dc>)
 8009c3c:	f7f6 fa96 	bl	800016c <__adddf3>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4640      	mov	r0, r8
 8009c46:	4649      	mov	r1, r9
 8009c48:	f7f6 fd70 	bl	800072c <__aeabi_ddiv>
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	463b      	mov	r3, r7
 8009c50:	f7f6 fc42 	bl	80004d8 <__aeabi_dmul>
 8009c54:	a320      	add	r3, pc, #128	; (adr r3, 8009cd8 <__ieee754_acos+0x2c0>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	f7f6 fa85 	bl	8000168 <__aeabi_dsub>
 8009c5e:	4632      	mov	r2, r6
 8009c60:	463b      	mov	r3, r7
 8009c62:	f7f6 fa83 	bl	800016c <__adddf3>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	f7f6 fa7f 	bl	800016c <__adddf3>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	a103      	add	r1, pc, #12	; (adr r1, 8009c80 <__ieee754_acos+0x268>)
 8009c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c78:	e772      	b.n	8009b60 <__ieee754_acos+0x148>
 8009c7a:	bf00      	nop
 8009c7c:	f3af 8000 	nop.w
 8009c80:	54442d18 	.word	0x54442d18
 8009c84:	400921fb 	.word	0x400921fb
 8009c88:	0dfdf709 	.word	0x0dfdf709
 8009c8c:	3f023de1 	.word	0x3f023de1
 8009c90:	7501b288 	.word	0x7501b288
 8009c94:	3f49efe0 	.word	0x3f49efe0
 8009c98:	b5688f3b 	.word	0xb5688f3b
 8009c9c:	3fa48228 	.word	0x3fa48228
 8009ca0:	0e884455 	.word	0x0e884455
 8009ca4:	3fc9c155 	.word	0x3fc9c155
 8009ca8:	03eb6f7d 	.word	0x03eb6f7d
 8009cac:	3fd4d612 	.word	0x3fd4d612
 8009cb0:	55555555 	.word	0x55555555
 8009cb4:	3fc55555 	.word	0x3fc55555
 8009cb8:	b12e9282 	.word	0xb12e9282
 8009cbc:	3fb3b8c5 	.word	0x3fb3b8c5
 8009cc0:	1b8d0159 	.word	0x1b8d0159
 8009cc4:	3fe6066c 	.word	0x3fe6066c
 8009cc8:	9c598ac8 	.word	0x9c598ac8
 8009ccc:	40002ae5 	.word	0x40002ae5
 8009cd0:	1c8a2d4b 	.word	0x1c8a2d4b
 8009cd4:	40033a27 	.word	0x40033a27
 8009cd8:	33145c07 	.word	0x33145c07
 8009cdc:	3c91a626 	.word	0x3c91a626
 8009ce0:	54442d18 	.word	0x54442d18
 8009ce4:	3ff921fb 	.word	0x3ff921fb
 8009ce8:	3fefffff 	.word	0x3fefffff
 8009cec:	3fdfffff 	.word	0x3fdfffff
 8009cf0:	3c600000 	.word	0x3c600000
 8009cf4:	3ff00000 	.word	0x3ff00000
 8009cf8:	3fe00000 	.word	0x3fe00000
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	2000      	movs	r0, #0
 8009d02:	4969      	ldr	r1, [pc, #420]	; (8009ea8 <__ieee754_acos+0x490>)
 8009d04:	f7f6 fa30 	bl	8000168 <__aeabi_dsub>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4b68      	ldr	r3, [pc, #416]	; (8009eac <__ieee754_acos+0x494>)
 8009d0c:	f7f6 fbe4 	bl	80004d8 <__aeabi_dmul>
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	f000 fde2 	bl	800a8dc <__ieee754_sqrt>
 8009d18:	a34d      	add	r3, pc, #308	; (adr r3, 8009e50 <__ieee754_acos+0x438>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	4689      	mov	r9, r1
 8009d20:	4680      	mov	r8, r0
 8009d22:	4629      	mov	r1, r5
 8009d24:	4620      	mov	r0, r4
 8009d26:	f7f6 fbd7 	bl	80004d8 <__aeabi_dmul>
 8009d2a:	a34b      	add	r3, pc, #300	; (adr r3, 8009e58 <__ieee754_acos+0x440>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f7f6 fa1c 	bl	800016c <__adddf3>
 8009d34:	4622      	mov	r2, r4
 8009d36:	462b      	mov	r3, r5
 8009d38:	f7f6 fbce 	bl	80004d8 <__aeabi_dmul>
 8009d3c:	a348      	add	r3, pc, #288	; (adr r3, 8009e60 <__ieee754_acos+0x448>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 fa11 	bl	8000168 <__aeabi_dsub>
 8009d46:	4622      	mov	r2, r4
 8009d48:	462b      	mov	r3, r5
 8009d4a:	f7f6 fbc5 	bl	80004d8 <__aeabi_dmul>
 8009d4e:	a346      	add	r3, pc, #280	; (adr r3, 8009e68 <__ieee754_acos+0x450>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	f7f6 fa0a 	bl	800016c <__adddf3>
 8009d58:	4622      	mov	r2, r4
 8009d5a:	462b      	mov	r3, r5
 8009d5c:	f7f6 fbbc 	bl	80004d8 <__aeabi_dmul>
 8009d60:	a343      	add	r3, pc, #268	; (adr r3, 8009e70 <__ieee754_acos+0x458>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f7f6 f9ff 	bl	8000168 <__aeabi_dsub>
 8009d6a:	4622      	mov	r2, r4
 8009d6c:	462b      	mov	r3, r5
 8009d6e:	f7f6 fbb3 	bl	80004d8 <__aeabi_dmul>
 8009d72:	a341      	add	r3, pc, #260	; (adr r3, 8009e78 <__ieee754_acos+0x460>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f7f6 f9f8 	bl	800016c <__adddf3>
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	462b      	mov	r3, r5
 8009d80:	f7f6 fbaa 	bl	80004d8 <__aeabi_dmul>
 8009d84:	a33e      	add	r3, pc, #248	; (adr r3, 8009e80 <__ieee754_acos+0x468>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	4682      	mov	sl, r0
 8009d8c:	468b      	mov	fp, r1
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fba1 	bl	80004d8 <__aeabi_dmul>
 8009d96:	a33c      	add	r3, pc, #240	; (adr r3, 8009e88 <__ieee754_acos+0x470>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f7f6 f9e4 	bl	8000168 <__aeabi_dsub>
 8009da0:	4622      	mov	r2, r4
 8009da2:	462b      	mov	r3, r5
 8009da4:	f7f6 fb98 	bl	80004d8 <__aeabi_dmul>
 8009da8:	a339      	add	r3, pc, #228	; (adr r3, 8009e90 <__ieee754_acos+0x478>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f7f6 f9dd 	bl	800016c <__adddf3>
 8009db2:	4622      	mov	r2, r4
 8009db4:	462b      	mov	r3, r5
 8009db6:	f7f6 fb8f 	bl	80004d8 <__aeabi_dmul>
 8009dba:	a337      	add	r3, pc, #220	; (adr r3, 8009e98 <__ieee754_acos+0x480>)
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	f7f6 f9d2 	bl	8000168 <__aeabi_dsub>
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	462b      	mov	r3, r5
 8009dc8:	f7f6 fb86 	bl	80004d8 <__aeabi_dmul>
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4b36      	ldr	r3, [pc, #216]	; (8009ea8 <__ieee754_acos+0x490>)
 8009dd0:	f7f6 f9cc 	bl	800016c <__adddf3>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4650      	mov	r0, sl
 8009dda:	4659      	mov	r1, fp
 8009ddc:	f7f6 fca6 	bl	800072c <__aeabi_ddiv>
 8009de0:	4642      	mov	r2, r8
 8009de2:	464b      	mov	r3, r9
 8009de4:	f7f6 fb78 	bl	80004d8 <__aeabi_dmul>
 8009de8:	2600      	movs	r6, #0
 8009dea:	4682      	mov	sl, r0
 8009dec:	468b      	mov	fp, r1
 8009dee:	4632      	mov	r2, r6
 8009df0:	464b      	mov	r3, r9
 8009df2:	4630      	mov	r0, r6
 8009df4:	4649      	mov	r1, r9
 8009df6:	f7f6 fb6f 	bl	80004d8 <__aeabi_dmul>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4620      	mov	r0, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	f7f6 f9b1 	bl	8000168 <__aeabi_dsub>
 8009e06:	4632      	mov	r2, r6
 8009e08:	4604      	mov	r4, r0
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	464b      	mov	r3, r9
 8009e0e:	4640      	mov	r0, r8
 8009e10:	4649      	mov	r1, r9
 8009e12:	f7f6 f9ab 	bl	800016c <__adddf3>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7f6 fc85 	bl	800072c <__aeabi_ddiv>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4650      	mov	r0, sl
 8009e28:	4659      	mov	r1, fp
 8009e2a:	f7f6 f99f 	bl	800016c <__adddf3>
 8009e2e:	4632      	mov	r2, r6
 8009e30:	464b      	mov	r3, r9
 8009e32:	f7f6 f99b 	bl	800016c <__adddf3>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	f7f6 f997 	bl	800016c <__adddf3>
 8009e3e:	e600      	b.n	8009a42 <__ieee754_acos+0x2a>
 8009e40:	2000      	movs	r0, #0
 8009e42:	2100      	movs	r1, #0
 8009e44:	e5fd      	b.n	8009a42 <__ieee754_acos+0x2a>
 8009e46:	a116      	add	r1, pc, #88	; (adr r1, 8009ea0 <__ieee754_acos+0x488>)
 8009e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e4c:	e5f9      	b.n	8009a42 <__ieee754_acos+0x2a>
 8009e4e:	bf00      	nop
 8009e50:	0dfdf709 	.word	0x0dfdf709
 8009e54:	3f023de1 	.word	0x3f023de1
 8009e58:	7501b288 	.word	0x7501b288
 8009e5c:	3f49efe0 	.word	0x3f49efe0
 8009e60:	b5688f3b 	.word	0xb5688f3b
 8009e64:	3fa48228 	.word	0x3fa48228
 8009e68:	0e884455 	.word	0x0e884455
 8009e6c:	3fc9c155 	.word	0x3fc9c155
 8009e70:	03eb6f7d 	.word	0x03eb6f7d
 8009e74:	3fd4d612 	.word	0x3fd4d612
 8009e78:	55555555 	.word	0x55555555
 8009e7c:	3fc55555 	.word	0x3fc55555
 8009e80:	b12e9282 	.word	0xb12e9282
 8009e84:	3fb3b8c5 	.word	0x3fb3b8c5
 8009e88:	1b8d0159 	.word	0x1b8d0159
 8009e8c:	3fe6066c 	.word	0x3fe6066c
 8009e90:	9c598ac8 	.word	0x9c598ac8
 8009e94:	40002ae5 	.word	0x40002ae5
 8009e98:	1c8a2d4b 	.word	0x1c8a2d4b
 8009e9c:	40033a27 	.word	0x40033a27
 8009ea0:	54442d18 	.word	0x54442d18
 8009ea4:	3ff921fb 	.word	0x3ff921fb
 8009ea8:	3ff00000 	.word	0x3ff00000
 8009eac:	3fe00000 	.word	0x3fe00000

08009eb0 <__ieee754_pow>:
 8009eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	b093      	sub	sp, #76	; 0x4c
 8009eb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009eba:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8009ebe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009ec2:	ea55 0302 	orrs.w	r3, r5, r2
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	4688      	mov	r8, r1
 8009eca:	f000 84bf 	beq.w	800a84c <__ieee754_pow+0x99c>
 8009ece:	4b7e      	ldr	r3, [pc, #504]	; (800a0c8 <__ieee754_pow+0x218>)
 8009ed0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009ed4:	429c      	cmp	r4, r3
 8009ed6:	4689      	mov	r9, r1
 8009ed8:	4682      	mov	sl, r0
 8009eda:	dc09      	bgt.n	8009ef0 <__ieee754_pow+0x40>
 8009edc:	d103      	bne.n	8009ee6 <__ieee754_pow+0x36>
 8009ede:	b978      	cbnz	r0, 8009f00 <__ieee754_pow+0x50>
 8009ee0:	42a5      	cmp	r5, r4
 8009ee2:	dd02      	ble.n	8009eea <__ieee754_pow+0x3a>
 8009ee4:	e00c      	b.n	8009f00 <__ieee754_pow+0x50>
 8009ee6:	429d      	cmp	r5, r3
 8009ee8:	dc02      	bgt.n	8009ef0 <__ieee754_pow+0x40>
 8009eea:	429d      	cmp	r5, r3
 8009eec:	d10e      	bne.n	8009f0c <__ieee754_pow+0x5c>
 8009eee:	b16a      	cbz	r2, 8009f0c <__ieee754_pow+0x5c>
 8009ef0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ef4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ef8:	ea54 030a 	orrs.w	r3, r4, sl
 8009efc:	f000 84a6 	beq.w	800a84c <__ieee754_pow+0x99c>
 8009f00:	4872      	ldr	r0, [pc, #456]	; (800a0cc <__ieee754_pow+0x21c>)
 8009f02:	b013      	add	sp, #76	; 0x4c
 8009f04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f08:	f000 bd9e 	b.w	800aa48 <nan>
 8009f0c:	f1b9 0f00 	cmp.w	r9, #0
 8009f10:	da39      	bge.n	8009f86 <__ieee754_pow+0xd6>
 8009f12:	4b6f      	ldr	r3, [pc, #444]	; (800a0d0 <__ieee754_pow+0x220>)
 8009f14:	429d      	cmp	r5, r3
 8009f16:	dc54      	bgt.n	8009fc2 <__ieee754_pow+0x112>
 8009f18:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009f1c:	429d      	cmp	r5, r3
 8009f1e:	f340 84a6 	ble.w	800a86e <__ieee754_pow+0x9be>
 8009f22:	152b      	asrs	r3, r5, #20
 8009f24:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f28:	2b14      	cmp	r3, #20
 8009f2a:	dd0f      	ble.n	8009f4c <__ieee754_pow+0x9c>
 8009f2c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009f30:	fa22 f103 	lsr.w	r1, r2, r3
 8009f34:	fa01 f303 	lsl.w	r3, r1, r3
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	f040 8498 	bne.w	800a86e <__ieee754_pow+0x9be>
 8009f3e:	f001 0101 	and.w	r1, r1, #1
 8009f42:	f1c1 0302 	rsb	r3, r1, #2
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	b182      	cbz	r2, 8009f6c <__ieee754_pow+0xbc>
 8009f4a:	e05e      	b.n	800a00a <__ieee754_pow+0x15a>
 8009f4c:	2a00      	cmp	r2, #0
 8009f4e:	d15a      	bne.n	800a006 <__ieee754_pow+0x156>
 8009f50:	f1c3 0314 	rsb	r3, r3, #20
 8009f54:	fa45 f103 	asr.w	r1, r5, r3
 8009f58:	fa01 f303 	lsl.w	r3, r1, r3
 8009f5c:	42ab      	cmp	r3, r5
 8009f5e:	f040 8483 	bne.w	800a868 <__ieee754_pow+0x9b8>
 8009f62:	f001 0101 	and.w	r1, r1, #1
 8009f66:	f1c1 0302 	rsb	r3, r1, #2
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	4b59      	ldr	r3, [pc, #356]	; (800a0d4 <__ieee754_pow+0x224>)
 8009f6e:	429d      	cmp	r5, r3
 8009f70:	d130      	bne.n	8009fd4 <__ieee754_pow+0x124>
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	f280 8474 	bge.w	800a860 <__ieee754_pow+0x9b0>
 8009f78:	463a      	mov	r2, r7
 8009f7a:	4643      	mov	r3, r8
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	4955      	ldr	r1, [pc, #340]	; (800a0d4 <__ieee754_pow+0x224>)
 8009f80:	f7f6 fbd4 	bl	800072c <__aeabi_ddiv>
 8009f84:	e02f      	b.n	8009fe6 <__ieee754_pow+0x136>
 8009f86:	2300      	movs	r3, #0
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	2a00      	cmp	r2, #0
 8009f8c:	d13d      	bne.n	800a00a <__ieee754_pow+0x15a>
 8009f8e:	4b4e      	ldr	r3, [pc, #312]	; (800a0c8 <__ieee754_pow+0x218>)
 8009f90:	429d      	cmp	r5, r3
 8009f92:	d1eb      	bne.n	8009f6c <__ieee754_pow+0xbc>
 8009f94:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009f98:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009f9c:	ea53 030a 	orrs.w	r3, r3, sl
 8009fa0:	f000 8454 	beq.w	800a84c <__ieee754_pow+0x99c>
 8009fa4:	4b4c      	ldr	r3, [pc, #304]	; (800a0d8 <__ieee754_pow+0x228>)
 8009fa6:	429c      	cmp	r4, r3
 8009fa8:	dd0d      	ble.n	8009fc6 <__ieee754_pow+0x116>
 8009faa:	2e00      	cmp	r6, #0
 8009fac:	f280 8454 	bge.w	800a858 <__ieee754_pow+0x9a8>
 8009fb0:	f04f 0b00 	mov.w	fp, #0
 8009fb4:	f04f 0c00 	mov.w	ip, #0
 8009fb8:	4658      	mov	r0, fp
 8009fba:	4661      	mov	r1, ip
 8009fbc:	b013      	add	sp, #76	; 0x4c
 8009fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	e7e0      	b.n	8009f88 <__ieee754_pow+0xd8>
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	daf2      	bge.n	8009fb0 <__ieee754_pow+0x100>
 8009fca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009fce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009fd2:	e7f1      	b.n	8009fb8 <__ieee754_pow+0x108>
 8009fd4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009fd8:	d108      	bne.n	8009fec <__ieee754_pow+0x13c>
 8009fda:	463a      	mov	r2, r7
 8009fdc:	4643      	mov	r3, r8
 8009fde:	4638      	mov	r0, r7
 8009fe0:	4641      	mov	r1, r8
 8009fe2:	f7f6 fa79 	bl	80004d8 <__aeabi_dmul>
 8009fe6:	4683      	mov	fp, r0
 8009fe8:	468c      	mov	ip, r1
 8009fea:	e7e5      	b.n	8009fb8 <__ieee754_pow+0x108>
 8009fec:	4b3b      	ldr	r3, [pc, #236]	; (800a0dc <__ieee754_pow+0x22c>)
 8009fee:	429e      	cmp	r6, r3
 8009ff0:	d10b      	bne.n	800a00a <__ieee754_pow+0x15a>
 8009ff2:	f1b9 0f00 	cmp.w	r9, #0
 8009ff6:	db08      	blt.n	800a00a <__ieee754_pow+0x15a>
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	4641      	mov	r1, r8
 8009ffc:	b013      	add	sp, #76	; 0x4c
 8009ffe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a002:	f000 bc6b 	b.w	800a8dc <__ieee754_sqrt>
 800a006:	2300      	movs	r3, #0
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	4638      	mov	r0, r7
 800a00c:	4641      	mov	r1, r8
 800a00e:	f000 fd11 	bl	800aa34 <fabs>
 800a012:	4683      	mov	fp, r0
 800a014:	468c      	mov	ip, r1
 800a016:	f1ba 0f00 	cmp.w	sl, #0
 800a01a:	d129      	bne.n	800a070 <__ieee754_pow+0x1c0>
 800a01c:	b124      	cbz	r4, 800a028 <__ieee754_pow+0x178>
 800a01e:	4b2d      	ldr	r3, [pc, #180]	; (800a0d4 <__ieee754_pow+0x224>)
 800a020:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a024:	429a      	cmp	r2, r3
 800a026:	d123      	bne.n	800a070 <__ieee754_pow+0x1c0>
 800a028:	2e00      	cmp	r6, #0
 800a02a:	da07      	bge.n	800a03c <__ieee754_pow+0x18c>
 800a02c:	465a      	mov	r2, fp
 800a02e:	4663      	mov	r3, ip
 800a030:	2000      	movs	r0, #0
 800a032:	4928      	ldr	r1, [pc, #160]	; (800a0d4 <__ieee754_pow+0x224>)
 800a034:	f7f6 fb7a 	bl	800072c <__aeabi_ddiv>
 800a038:	4683      	mov	fp, r0
 800a03a:	468c      	mov	ip, r1
 800a03c:	f1b9 0f00 	cmp.w	r9, #0
 800a040:	daba      	bge.n	8009fb8 <__ieee754_pow+0x108>
 800a042:	9b00      	ldr	r3, [sp, #0]
 800a044:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a048:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a04c:	4323      	orrs	r3, r4
 800a04e:	d108      	bne.n	800a062 <__ieee754_pow+0x1b2>
 800a050:	465a      	mov	r2, fp
 800a052:	4663      	mov	r3, ip
 800a054:	4658      	mov	r0, fp
 800a056:	4661      	mov	r1, ip
 800a058:	f7f6 f886 	bl	8000168 <__aeabi_dsub>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	e78e      	b.n	8009f80 <__ieee754_pow+0xd0>
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d1a7      	bne.n	8009fb8 <__ieee754_pow+0x108>
 800a068:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a06c:	469c      	mov	ip, r3
 800a06e:	e7a3      	b.n	8009fb8 <__ieee754_pow+0x108>
 800a070:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a074:	3b01      	subs	r3, #1
 800a076:	930c      	str	r3, [sp, #48]	; 0x30
 800a078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a07a:	9b00      	ldr	r3, [sp, #0]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	d104      	bne.n	800a08a <__ieee754_pow+0x1da>
 800a080:	463a      	mov	r2, r7
 800a082:	4643      	mov	r3, r8
 800a084:	4638      	mov	r0, r7
 800a086:	4641      	mov	r1, r8
 800a088:	e7e6      	b.n	800a058 <__ieee754_pow+0x1a8>
 800a08a:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <__ieee754_pow+0x230>)
 800a08c:	429d      	cmp	r5, r3
 800a08e:	f340 80f9 	ble.w	800a284 <__ieee754_pow+0x3d4>
 800a092:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a096:	429d      	cmp	r5, r3
 800a098:	4b0f      	ldr	r3, [pc, #60]	; (800a0d8 <__ieee754_pow+0x228>)
 800a09a:	dd09      	ble.n	800a0b0 <__ieee754_pow+0x200>
 800a09c:	429c      	cmp	r4, r3
 800a09e:	dc0c      	bgt.n	800a0ba <__ieee754_pow+0x20a>
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	da85      	bge.n	8009fb0 <__ieee754_pow+0x100>
 800a0a4:	a306      	add	r3, pc, #24	; (adr r3, 800a0c0 <__ieee754_pow+0x210>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	e798      	b.n	8009fe2 <__ieee754_pow+0x132>
 800a0b0:	429c      	cmp	r4, r3
 800a0b2:	dbf5      	blt.n	800a0a0 <__ieee754_pow+0x1f0>
 800a0b4:	4b07      	ldr	r3, [pc, #28]	; (800a0d4 <__ieee754_pow+0x224>)
 800a0b6:	429c      	cmp	r4, r3
 800a0b8:	dd14      	ble.n	800a0e4 <__ieee754_pow+0x234>
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	dcf2      	bgt.n	800a0a4 <__ieee754_pow+0x1f4>
 800a0be:	e777      	b.n	8009fb0 <__ieee754_pow+0x100>
 800a0c0:	8800759c 	.word	0x8800759c
 800a0c4:	7e37e43c 	.word	0x7e37e43c
 800a0c8:	7ff00000 	.word	0x7ff00000
 800a0cc:	0800b178 	.word	0x0800b178
 800a0d0:	433fffff 	.word	0x433fffff
 800a0d4:	3ff00000 	.word	0x3ff00000
 800a0d8:	3fefffff 	.word	0x3fefffff
 800a0dc:	3fe00000 	.word	0x3fe00000
 800a0e0:	41e00000 	.word	0x41e00000
 800a0e4:	4661      	mov	r1, ip
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	4658      	mov	r0, fp
 800a0ea:	4b61      	ldr	r3, [pc, #388]	; (800a270 <__ieee754_pow+0x3c0>)
 800a0ec:	f7f6 f83c 	bl	8000168 <__aeabi_dsub>
 800a0f0:	a355      	add	r3, pc, #340	; (adr r3, 800a248 <__ieee754_pow+0x398>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	f7f6 f9ed 	bl	80004d8 <__aeabi_dmul>
 800a0fe:	a354      	add	r3, pc, #336	; (adr r3, 800a250 <__ieee754_pow+0x3a0>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	4606      	mov	r6, r0
 800a106:	460f      	mov	r7, r1
 800a108:	4620      	mov	r0, r4
 800a10a:	4629      	mov	r1, r5
 800a10c:	f7f6 f9e4 	bl	80004d8 <__aeabi_dmul>
 800a110:	2200      	movs	r2, #0
 800a112:	4682      	mov	sl, r0
 800a114:	468b      	mov	fp, r1
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	4b56      	ldr	r3, [pc, #344]	; (800a274 <__ieee754_pow+0x3c4>)
 800a11c:	f7f6 f9dc 	bl	80004d8 <__aeabi_dmul>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	a14c      	add	r1, pc, #304	; (adr r1, 800a258 <__ieee754_pow+0x3a8>)
 800a126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a12a:	f7f6 f81d 	bl	8000168 <__aeabi_dsub>
 800a12e:	4622      	mov	r2, r4
 800a130:	462b      	mov	r3, r5
 800a132:	f7f6 f9d1 	bl	80004d8 <__aeabi_dmul>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	2000      	movs	r0, #0
 800a13c:	494e      	ldr	r1, [pc, #312]	; (800a278 <__ieee754_pow+0x3c8>)
 800a13e:	f7f6 f813 	bl	8000168 <__aeabi_dsub>
 800a142:	4622      	mov	r2, r4
 800a144:	462b      	mov	r3, r5
 800a146:	4680      	mov	r8, r0
 800a148:	4689      	mov	r9, r1
 800a14a:	4620      	mov	r0, r4
 800a14c:	4629      	mov	r1, r5
 800a14e:	f7f6 f9c3 	bl	80004d8 <__aeabi_dmul>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4640      	mov	r0, r8
 800a158:	4649      	mov	r1, r9
 800a15a:	f7f6 f9bd 	bl	80004d8 <__aeabi_dmul>
 800a15e:	a340      	add	r3, pc, #256	; (adr r3, 800a260 <__ieee754_pow+0x3b0>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	f7f6 f9b8 	bl	80004d8 <__aeabi_dmul>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4650      	mov	r0, sl
 800a16e:	4659      	mov	r1, fp
 800a170:	f7f5 fffa 	bl	8000168 <__aeabi_dsub>
 800a174:	f04f 0a00 	mov.w	sl, #0
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4604      	mov	r4, r0
 800a17e:	460d      	mov	r5, r1
 800a180:	4630      	mov	r0, r6
 800a182:	4639      	mov	r1, r7
 800a184:	f7f5 fff2 	bl	800016c <__adddf3>
 800a188:	4632      	mov	r2, r6
 800a18a:	463b      	mov	r3, r7
 800a18c:	4650      	mov	r0, sl
 800a18e:	468b      	mov	fp, r1
 800a190:	f7f5 ffea 	bl	8000168 <__aeabi_dsub>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4620      	mov	r0, r4
 800a19a:	4629      	mov	r1, r5
 800a19c:	f7f5 ffe4 	bl	8000168 <__aeabi_dsub>
 800a1a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1a4:	9b00      	ldr	r3, [sp, #0]
 800a1a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	f04f 0600 	mov.w	r6, #0
 800a1b0:	f04f 0200 	mov.w	r2, #0
 800a1b4:	bf0c      	ite	eq
 800a1b6:	4b31      	ldreq	r3, [pc, #196]	; (800a27c <__ieee754_pow+0x3cc>)
 800a1b8:	4b2d      	ldrne	r3, [pc, #180]	; (800a270 <__ieee754_pow+0x3c0>)
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	460d      	mov	r5, r1
 800a1be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c2:	e9cd 2300 	strd	r2, r3, [sp]
 800a1c6:	4632      	mov	r2, r6
 800a1c8:	463b      	mov	r3, r7
 800a1ca:	f7f5 ffcd 	bl	8000168 <__aeabi_dsub>
 800a1ce:	4652      	mov	r2, sl
 800a1d0:	465b      	mov	r3, fp
 800a1d2:	f7f6 f981 	bl	80004d8 <__aeabi_dmul>
 800a1d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1da:	4680      	mov	r8, r0
 800a1dc:	4689      	mov	r9, r1
 800a1de:	4620      	mov	r0, r4
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	f7f5 ffbd 	bl	800016c <__adddf3>
 800a1f2:	4632      	mov	r2, r6
 800a1f4:	463b      	mov	r3, r7
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	4689      	mov	r9, r1
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	f7f6 f96b 	bl	80004d8 <__aeabi_dmul>
 800a202:	4604      	mov	r4, r0
 800a204:	460d      	mov	r5, r1
 800a206:	460b      	mov	r3, r1
 800a208:	4602      	mov	r2, r0
 800a20a:	4649      	mov	r1, r9
 800a20c:	4640      	mov	r0, r8
 800a20e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a212:	f7f5 ffab 	bl	800016c <__adddf3>
 800a216:	4b1a      	ldr	r3, [pc, #104]	; (800a280 <__ieee754_pow+0x3d0>)
 800a218:	4682      	mov	sl, r0
 800a21a:	4299      	cmp	r1, r3
 800a21c:	460f      	mov	r7, r1
 800a21e:	460e      	mov	r6, r1
 800a220:	f340 82ed 	ble.w	800a7fe <__ieee754_pow+0x94e>
 800a224:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a228:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a22c:	4303      	orrs	r3, r0
 800a22e:	f000 81e7 	beq.w	800a600 <__ieee754_pow+0x750>
 800a232:	a30d      	add	r3, pc, #52	; (adr r3, 800a268 <__ieee754_pow+0x3b8>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a23c:	f7f6 f94c 	bl	80004d8 <__aeabi_dmul>
 800a240:	a309      	add	r3, pc, #36	; (adr r3, 800a268 <__ieee754_pow+0x3b8>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	e6cc      	b.n	8009fe2 <__ieee754_pow+0x132>
 800a248:	60000000 	.word	0x60000000
 800a24c:	3ff71547 	.word	0x3ff71547
 800a250:	f85ddf44 	.word	0xf85ddf44
 800a254:	3e54ae0b 	.word	0x3e54ae0b
 800a258:	55555555 	.word	0x55555555
 800a25c:	3fd55555 	.word	0x3fd55555
 800a260:	652b82fe 	.word	0x652b82fe
 800a264:	3ff71547 	.word	0x3ff71547
 800a268:	8800759c 	.word	0x8800759c
 800a26c:	7e37e43c 	.word	0x7e37e43c
 800a270:	3ff00000 	.word	0x3ff00000
 800a274:	3fd00000 	.word	0x3fd00000
 800a278:	3fe00000 	.word	0x3fe00000
 800a27c:	bff00000 	.word	0xbff00000
 800a280:	408fffff 	.word	0x408fffff
 800a284:	4bd4      	ldr	r3, [pc, #848]	; (800a5d8 <__ieee754_pow+0x728>)
 800a286:	2200      	movs	r2, #0
 800a288:	ea09 0303 	and.w	r3, r9, r3
 800a28c:	b943      	cbnz	r3, 800a2a0 <__ieee754_pow+0x3f0>
 800a28e:	4658      	mov	r0, fp
 800a290:	4661      	mov	r1, ip
 800a292:	4bd2      	ldr	r3, [pc, #840]	; (800a5dc <__ieee754_pow+0x72c>)
 800a294:	f7f6 f920 	bl	80004d8 <__aeabi_dmul>
 800a298:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a29c:	4683      	mov	fp, r0
 800a29e:	460c      	mov	r4, r1
 800a2a0:	1523      	asrs	r3, r4, #20
 800a2a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a2a6:	4413      	add	r3, r2
 800a2a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2aa:	4bcd      	ldr	r3, [pc, #820]	; (800a5e0 <__ieee754_pow+0x730>)
 800a2ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a2b0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a2ba:	dd08      	ble.n	800a2ce <__ieee754_pow+0x41e>
 800a2bc:	4bc9      	ldr	r3, [pc, #804]	; (800a5e4 <__ieee754_pow+0x734>)
 800a2be:	429c      	cmp	r4, r3
 800a2c0:	f340 819c 	ble.w	800a5fc <__ieee754_pow+0x74c>
 800a2c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2ce:	2600      	movs	r6, #0
 800a2d0:	00f3      	lsls	r3, r6, #3
 800a2d2:	930d      	str	r3, [sp, #52]	; 0x34
 800a2d4:	4bc4      	ldr	r3, [pc, #784]	; (800a5e8 <__ieee754_pow+0x738>)
 800a2d6:	4658      	mov	r0, fp
 800a2d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	f7f5 ff3d 	bl	8000168 <__aeabi_dsub>
 800a2ee:	46da      	mov	sl, fp
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	4652      	mov	r2, sl
 800a2f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a2f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2fc:	f7f5 ff36 	bl	800016c <__adddf3>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	2000      	movs	r0, #0
 800a306:	49b9      	ldr	r1, [pc, #740]	; (800a5ec <__ieee754_pow+0x73c>)
 800a308:	f7f6 fa10 	bl	800072c <__aeabi_ddiv>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a314:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a318:	f7f6 f8de 	bl	80004d8 <__aeabi_dmul>
 800a31c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a320:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a324:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a328:	2300      	movs	r3, #0
 800a32a:	2200      	movs	r2, #0
 800a32c:	46ab      	mov	fp, r5
 800a32e:	106d      	asrs	r5, r5, #1
 800a330:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a334:	9304      	str	r3, [sp, #16]
 800a336:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a33a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a33e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a342:	4640      	mov	r0, r8
 800a344:	4649      	mov	r1, r9
 800a346:	4614      	mov	r4, r2
 800a348:	461d      	mov	r5, r3
 800a34a:	f7f6 f8c5 	bl	80004d8 <__aeabi_dmul>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a356:	f7f5 ff07 	bl	8000168 <__aeabi_dsub>
 800a35a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a35e:	4606      	mov	r6, r0
 800a360:	460f      	mov	r7, r1
 800a362:	4620      	mov	r0, r4
 800a364:	4629      	mov	r1, r5
 800a366:	f7f5 feff 	bl	8000168 <__aeabi_dsub>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4650      	mov	r0, sl
 800a370:	4659      	mov	r1, fp
 800a372:	f7f5 fef9 	bl	8000168 <__aeabi_dsub>
 800a376:	4642      	mov	r2, r8
 800a378:	464b      	mov	r3, r9
 800a37a:	f7f6 f8ad 	bl	80004d8 <__aeabi_dmul>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4630      	mov	r0, r6
 800a384:	4639      	mov	r1, r7
 800a386:	f7f5 feef 	bl	8000168 <__aeabi_dsub>
 800a38a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a38e:	f7f6 f8a3 	bl	80004d8 <__aeabi_dmul>
 800a392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a396:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a39a:	4610      	mov	r0, r2
 800a39c:	4619      	mov	r1, r3
 800a39e:	f7f6 f89b 	bl	80004d8 <__aeabi_dmul>
 800a3a2:	a37b      	add	r3, pc, #492	; (adr r3, 800a590 <__ieee754_pow+0x6e0>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	f7f6 f894 	bl	80004d8 <__aeabi_dmul>
 800a3b0:	a379      	add	r3, pc, #484	; (adr r3, 800a598 <__ieee754_pow+0x6e8>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	f7f5 fed9 	bl	800016c <__adddf3>
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	462b      	mov	r3, r5
 800a3be:	f7f6 f88b 	bl	80004d8 <__aeabi_dmul>
 800a3c2:	a377      	add	r3, pc, #476	; (adr r3, 800a5a0 <__ieee754_pow+0x6f0>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f7f5 fed0 	bl	800016c <__adddf3>
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	462b      	mov	r3, r5
 800a3d0:	f7f6 f882 	bl	80004d8 <__aeabi_dmul>
 800a3d4:	a374      	add	r3, pc, #464	; (adr r3, 800a5a8 <__ieee754_pow+0x6f8>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	f7f5 fec7 	bl	800016c <__adddf3>
 800a3de:	4622      	mov	r2, r4
 800a3e0:	462b      	mov	r3, r5
 800a3e2:	f7f6 f879 	bl	80004d8 <__aeabi_dmul>
 800a3e6:	a372      	add	r3, pc, #456	; (adr r3, 800a5b0 <__ieee754_pow+0x700>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f7f5 febe 	bl	800016c <__adddf3>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	f7f6 f870 	bl	80004d8 <__aeabi_dmul>
 800a3f8:	a36f      	add	r3, pc, #444	; (adr r3, 800a5b8 <__ieee754_pow+0x708>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	f7f5 feb5 	bl	800016c <__adddf3>
 800a402:	4622      	mov	r2, r4
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	462b      	mov	r3, r5
 800a40a:	4620      	mov	r0, r4
 800a40c:	4629      	mov	r1, r5
 800a40e:	f7f6 f863 	bl	80004d8 <__aeabi_dmul>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4630      	mov	r0, r6
 800a418:	4639      	mov	r1, r7
 800a41a:	f7f6 f85d 	bl	80004d8 <__aeabi_dmul>
 800a41e:	4604      	mov	r4, r0
 800a420:	460d      	mov	r5, r1
 800a422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a426:	4642      	mov	r2, r8
 800a428:	464b      	mov	r3, r9
 800a42a:	f7f5 fe9f 	bl	800016c <__adddf3>
 800a42e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a432:	f7f6 f851 	bl	80004d8 <__aeabi_dmul>
 800a436:	4622      	mov	r2, r4
 800a438:	462b      	mov	r3, r5
 800a43a:	f7f5 fe97 	bl	800016c <__adddf3>
 800a43e:	4642      	mov	r2, r8
 800a440:	4606      	mov	r6, r0
 800a442:	460f      	mov	r7, r1
 800a444:	464b      	mov	r3, r9
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f6 f845 	bl	80004d8 <__aeabi_dmul>
 800a44e:	2200      	movs	r2, #0
 800a450:	4b67      	ldr	r3, [pc, #412]	; (800a5f0 <__ieee754_pow+0x740>)
 800a452:	4682      	mov	sl, r0
 800a454:	468b      	mov	fp, r1
 800a456:	f7f5 fe89 	bl	800016c <__adddf3>
 800a45a:	4632      	mov	r2, r6
 800a45c:	463b      	mov	r3, r7
 800a45e:	f7f5 fe85 	bl	800016c <__adddf3>
 800a462:	9c04      	ldr	r4, [sp, #16]
 800a464:	460d      	mov	r5, r1
 800a466:	4622      	mov	r2, r4
 800a468:	460b      	mov	r3, r1
 800a46a:	4640      	mov	r0, r8
 800a46c:	4649      	mov	r1, r9
 800a46e:	f7f6 f833 	bl	80004d8 <__aeabi_dmul>
 800a472:	2200      	movs	r2, #0
 800a474:	4680      	mov	r8, r0
 800a476:	4689      	mov	r9, r1
 800a478:	4620      	mov	r0, r4
 800a47a:	4629      	mov	r1, r5
 800a47c:	4b5c      	ldr	r3, [pc, #368]	; (800a5f0 <__ieee754_pow+0x740>)
 800a47e:	f7f5 fe73 	bl	8000168 <__aeabi_dsub>
 800a482:	4652      	mov	r2, sl
 800a484:	465b      	mov	r3, fp
 800a486:	f7f5 fe6f 	bl	8000168 <__aeabi_dsub>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4630      	mov	r0, r6
 800a490:	4639      	mov	r1, r7
 800a492:	f7f5 fe69 	bl	8000168 <__aeabi_dsub>
 800a496:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a49a:	f7f6 f81d 	bl	80004d8 <__aeabi_dmul>
 800a49e:	4622      	mov	r2, r4
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	460f      	mov	r7, r1
 800a4a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	f7f6 f815 	bl	80004d8 <__aeabi_dmul>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	f7f5 fe59 	bl	800016c <__adddf3>
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	460f      	mov	r7, r1
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	f7f5 fe51 	bl	800016c <__adddf3>
 800a4ca:	a33d      	add	r3, pc, #244	; (adr r3, 800a5c0 <__ieee754_pow+0x710>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	9c04      	ldr	r4, [sp, #16]
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f7f5 ffff 	bl	80004d8 <__aeabi_dmul>
 800a4da:	4642      	mov	r2, r8
 800a4dc:	464b      	mov	r3, r9
 800a4de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	f7f5 fe3f 	bl	8000168 <__aeabi_dsub>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	4639      	mov	r1, r7
 800a4f2:	f7f5 fe39 	bl	8000168 <__aeabi_dsub>
 800a4f6:	a334      	add	r3, pc, #208	; (adr r3, 800a5c8 <__ieee754_pow+0x718>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f7f5 ffec 	bl	80004d8 <__aeabi_dmul>
 800a500:	a333      	add	r3, pc, #204	; (adr r3, 800a5d0 <__ieee754_pow+0x720>)
 800a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a506:	4606      	mov	r6, r0
 800a508:	460f      	mov	r7, r1
 800a50a:	4620      	mov	r0, r4
 800a50c:	4629      	mov	r1, r5
 800a50e:	f7f5 ffe3 	bl	80004d8 <__aeabi_dmul>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	4630      	mov	r0, r6
 800a518:	4639      	mov	r1, r7
 800a51a:	f7f5 fe27 	bl	800016c <__adddf3>
 800a51e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a520:	4b34      	ldr	r3, [pc, #208]	; (800a5f4 <__ieee754_pow+0x744>)
 800a522:	4413      	add	r3, r2
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f7f5 fe20 	bl	800016c <__adddf3>
 800a52c:	4680      	mov	r8, r0
 800a52e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a530:	4689      	mov	r9, r1
 800a532:	f7f5 ff67 	bl	8000404 <__aeabi_i2d>
 800a536:	4604      	mov	r4, r0
 800a538:	460d      	mov	r5, r1
 800a53a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a53c:	4b2e      	ldr	r3, [pc, #184]	; (800a5f8 <__ieee754_pow+0x748>)
 800a53e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a542:	4413      	add	r3, r2
 800a544:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a548:	4642      	mov	r2, r8
 800a54a:	464b      	mov	r3, r9
 800a54c:	f7f5 fe0e 	bl	800016c <__adddf3>
 800a550:	4632      	mov	r2, r6
 800a552:	463b      	mov	r3, r7
 800a554:	f7f5 fe0a 	bl	800016c <__adddf3>
 800a558:	4622      	mov	r2, r4
 800a55a:	462b      	mov	r3, r5
 800a55c:	f7f5 fe06 	bl	800016c <__adddf3>
 800a560:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a564:	4622      	mov	r2, r4
 800a566:	462b      	mov	r3, r5
 800a568:	4650      	mov	r0, sl
 800a56a:	468b      	mov	fp, r1
 800a56c:	f7f5 fdfc 	bl	8000168 <__aeabi_dsub>
 800a570:	4632      	mov	r2, r6
 800a572:	463b      	mov	r3, r7
 800a574:	f7f5 fdf8 	bl	8000168 <__aeabi_dsub>
 800a578:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a57c:	f7f5 fdf4 	bl	8000168 <__aeabi_dsub>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4640      	mov	r0, r8
 800a586:	4649      	mov	r1, r9
 800a588:	e608      	b.n	800a19c <__ieee754_pow+0x2ec>
 800a58a:	bf00      	nop
 800a58c:	f3af 8000 	nop.w
 800a590:	4a454eef 	.word	0x4a454eef
 800a594:	3fca7e28 	.word	0x3fca7e28
 800a598:	93c9db65 	.word	0x93c9db65
 800a59c:	3fcd864a 	.word	0x3fcd864a
 800a5a0:	a91d4101 	.word	0xa91d4101
 800a5a4:	3fd17460 	.word	0x3fd17460
 800a5a8:	518f264d 	.word	0x518f264d
 800a5ac:	3fd55555 	.word	0x3fd55555
 800a5b0:	db6fabff 	.word	0xdb6fabff
 800a5b4:	3fdb6db6 	.word	0x3fdb6db6
 800a5b8:	33333303 	.word	0x33333303
 800a5bc:	3fe33333 	.word	0x3fe33333
 800a5c0:	e0000000 	.word	0xe0000000
 800a5c4:	3feec709 	.word	0x3feec709
 800a5c8:	dc3a03fd 	.word	0xdc3a03fd
 800a5cc:	3feec709 	.word	0x3feec709
 800a5d0:	145b01f5 	.word	0x145b01f5
 800a5d4:	be3e2fe0 	.word	0xbe3e2fe0
 800a5d8:	7ff00000 	.word	0x7ff00000
 800a5dc:	43400000 	.word	0x43400000
 800a5e0:	0003988e 	.word	0x0003988e
 800a5e4:	000bb679 	.word	0x000bb679
 800a5e8:	0800b2e8 	.word	0x0800b2e8
 800a5ec:	3ff00000 	.word	0x3ff00000
 800a5f0:	40080000 	.word	0x40080000
 800a5f4:	0800b308 	.word	0x0800b308
 800a5f8:	0800b2f8 	.word	0x0800b2f8
 800a5fc:	2601      	movs	r6, #1
 800a5fe:	e667      	b.n	800a2d0 <__ieee754_pow+0x420>
 800a600:	a39d      	add	r3, pc, #628	; (adr r3, 800a878 <__ieee754_pow+0x9c8>)
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	4640      	mov	r0, r8
 800a608:	4649      	mov	r1, r9
 800a60a:	f7f5 fdaf 	bl	800016c <__adddf3>
 800a60e:	4622      	mov	r2, r4
 800a610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a614:	462b      	mov	r3, r5
 800a616:	4650      	mov	r0, sl
 800a618:	4639      	mov	r1, r7
 800a61a:	f7f5 fda5 	bl	8000168 <__aeabi_dsub>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a626:	f7f6 f9e7 	bl	80009f8 <__aeabi_dcmpgt>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	f47f ae01 	bne.w	800a232 <__ieee754_pow+0x382>
 800a630:	4aa5      	ldr	r2, [pc, #660]	; (800a8c8 <__ieee754_pow+0xa18>)
 800a632:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a636:	4293      	cmp	r3, r2
 800a638:	f340 8103 	ble.w	800a842 <__ieee754_pow+0x992>
 800a63c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a640:	2000      	movs	r0, #0
 800a642:	151b      	asrs	r3, r3, #20
 800a644:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a648:	fa4a f303 	asr.w	r3, sl, r3
 800a64c:	4433      	add	r3, r6
 800a64e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a652:	4f9e      	ldr	r7, [pc, #632]	; (800a8cc <__ieee754_pow+0xa1c>)
 800a654:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a658:	4117      	asrs	r7, r2
 800a65a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a65e:	ea23 0107 	bic.w	r1, r3, r7
 800a662:	f1c2 0214 	rsb	r2, r2, #20
 800a666:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a66a:	460b      	mov	r3, r1
 800a66c:	fa4a fa02 	asr.w	sl, sl, r2
 800a670:	2e00      	cmp	r6, #0
 800a672:	4602      	mov	r2, r0
 800a674:	4629      	mov	r1, r5
 800a676:	4620      	mov	r0, r4
 800a678:	bfb8      	it	lt
 800a67a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a67e:	f7f5 fd73 	bl	8000168 <__aeabi_dsub>
 800a682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a68a:	2400      	movs	r4, #0
 800a68c:	4642      	mov	r2, r8
 800a68e:	464b      	mov	r3, r9
 800a690:	f7f5 fd6c 	bl	800016c <__adddf3>
 800a694:	a37a      	add	r3, pc, #488	; (adr r3, 800a880 <__ieee754_pow+0x9d0>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	4620      	mov	r0, r4
 800a69c:	460d      	mov	r5, r1
 800a69e:	f7f5 ff1b 	bl	80004d8 <__aeabi_dmul>
 800a6a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	460f      	mov	r7, r1
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	f7f5 fd5b 	bl	8000168 <__aeabi_dsub>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	f7f5 fd55 	bl	8000168 <__aeabi_dsub>
 800a6be:	a372      	add	r3, pc, #456	; (adr r3, 800a888 <__ieee754_pow+0x9d8>)
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	f7f5 ff08 	bl	80004d8 <__aeabi_dmul>
 800a6c8:	a371      	add	r3, pc, #452	; (adr r3, 800a890 <__ieee754_pow+0x9e0>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	4689      	mov	r9, r1
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	f7f5 feff 	bl	80004d8 <__aeabi_dmul>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f5 fd43 	bl	800016c <__adddf3>
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	460d      	mov	r5, r1
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	f7f5 fd3b 	bl	800016c <__adddf3>
 800a6f6:	4632      	mov	r2, r6
 800a6f8:	463b      	mov	r3, r7
 800a6fa:	4680      	mov	r8, r0
 800a6fc:	4689      	mov	r9, r1
 800a6fe:	f7f5 fd33 	bl	8000168 <__aeabi_dsub>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	4620      	mov	r0, r4
 800a708:	4629      	mov	r1, r5
 800a70a:	f7f5 fd2d 	bl	8000168 <__aeabi_dsub>
 800a70e:	4642      	mov	r2, r8
 800a710:	4606      	mov	r6, r0
 800a712:	460f      	mov	r7, r1
 800a714:	464b      	mov	r3, r9
 800a716:	4640      	mov	r0, r8
 800a718:	4649      	mov	r1, r9
 800a71a:	f7f5 fedd 	bl	80004d8 <__aeabi_dmul>
 800a71e:	a35e      	add	r3, pc, #376	; (adr r3, 800a898 <__ieee754_pow+0x9e8>)
 800a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a724:	4604      	mov	r4, r0
 800a726:	460d      	mov	r5, r1
 800a728:	f7f5 fed6 	bl	80004d8 <__aeabi_dmul>
 800a72c:	a35c      	add	r3, pc, #368	; (adr r3, 800a8a0 <__ieee754_pow+0x9f0>)
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	f7f5 fd19 	bl	8000168 <__aeabi_dsub>
 800a736:	4622      	mov	r2, r4
 800a738:	462b      	mov	r3, r5
 800a73a:	f7f5 fecd 	bl	80004d8 <__aeabi_dmul>
 800a73e:	a35a      	add	r3, pc, #360	; (adr r3, 800a8a8 <__ieee754_pow+0x9f8>)
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	f7f5 fd12 	bl	800016c <__adddf3>
 800a748:	4622      	mov	r2, r4
 800a74a:	462b      	mov	r3, r5
 800a74c:	f7f5 fec4 	bl	80004d8 <__aeabi_dmul>
 800a750:	a357      	add	r3, pc, #348	; (adr r3, 800a8b0 <__ieee754_pow+0xa00>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f5 fd07 	bl	8000168 <__aeabi_dsub>
 800a75a:	4622      	mov	r2, r4
 800a75c:	462b      	mov	r3, r5
 800a75e:	f7f5 febb 	bl	80004d8 <__aeabi_dmul>
 800a762:	a355      	add	r3, pc, #340	; (adr r3, 800a8b8 <__ieee754_pow+0xa08>)
 800a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a768:	f7f5 fd00 	bl	800016c <__adddf3>
 800a76c:	4622      	mov	r2, r4
 800a76e:	462b      	mov	r3, r5
 800a770:	f7f5 feb2 	bl	80004d8 <__aeabi_dmul>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4640      	mov	r0, r8
 800a77a:	4649      	mov	r1, r9
 800a77c:	f7f5 fcf4 	bl	8000168 <__aeabi_dsub>
 800a780:	4604      	mov	r4, r0
 800a782:	460d      	mov	r5, r1
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4640      	mov	r0, r8
 800a78a:	4649      	mov	r1, r9
 800a78c:	f7f5 fea4 	bl	80004d8 <__aeabi_dmul>
 800a790:	2200      	movs	r2, #0
 800a792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a79a:	4620      	mov	r0, r4
 800a79c:	4629      	mov	r1, r5
 800a79e:	f7f5 fce3 	bl	8000168 <__aeabi_dsub>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7aa:	f7f5 ffbf 	bl	800072c <__aeabi_ddiv>
 800a7ae:	4632      	mov	r2, r6
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	460d      	mov	r5, r1
 800a7b4:	463b      	mov	r3, r7
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f5 fe8d 	bl	80004d8 <__aeabi_dmul>
 800a7be:	4632      	mov	r2, r6
 800a7c0:	463b      	mov	r3, r7
 800a7c2:	f7f5 fcd3 	bl	800016c <__adddf3>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	f7f5 fccb 	bl	8000168 <__aeabi_dsub>
 800a7d2:	4642      	mov	r2, r8
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	f7f5 fcc7 	bl	8000168 <__aeabi_dsub>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	2000      	movs	r0, #0
 800a7e0:	493b      	ldr	r1, [pc, #236]	; (800a8d0 <__ieee754_pow+0xa20>)
 800a7e2:	f7f5 fcc1 	bl	8000168 <__aeabi_dsub>
 800a7e6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a7ea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a7ee:	da2b      	bge.n	800a848 <__ieee754_pow+0x998>
 800a7f0:	4652      	mov	r2, sl
 800a7f2:	f000 f9b9 	bl	800ab68 <scalbn>
 800a7f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7fa:	f7ff bbf2 	b.w	8009fe2 <__ieee754_pow+0x132>
 800a7fe:	4b35      	ldr	r3, [pc, #212]	; (800a8d4 <__ieee754_pow+0xa24>)
 800a800:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a804:	429f      	cmp	r7, r3
 800a806:	f77f af13 	ble.w	800a630 <__ieee754_pow+0x780>
 800a80a:	4b33      	ldr	r3, [pc, #204]	; (800a8d8 <__ieee754_pow+0xa28>)
 800a80c:	440b      	add	r3, r1
 800a80e:	4303      	orrs	r3, r0
 800a810:	d00b      	beq.n	800a82a <__ieee754_pow+0x97a>
 800a812:	a32b      	add	r3, pc, #172	; (adr r3, 800a8c0 <__ieee754_pow+0xa10>)
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a81c:	f7f5 fe5c 	bl	80004d8 <__aeabi_dmul>
 800a820:	a327      	add	r3, pc, #156	; (adr r3, 800a8c0 <__ieee754_pow+0xa10>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	f7ff bbdc 	b.w	8009fe2 <__ieee754_pow+0x132>
 800a82a:	4622      	mov	r2, r4
 800a82c:	462b      	mov	r3, r5
 800a82e:	f7f5 fc9b 	bl	8000168 <__aeabi_dsub>
 800a832:	4642      	mov	r2, r8
 800a834:	464b      	mov	r3, r9
 800a836:	f7f6 f8d5 	bl	80009e4 <__aeabi_dcmpge>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	f43f aef8 	beq.w	800a630 <__ieee754_pow+0x780>
 800a840:	e7e7      	b.n	800a812 <__ieee754_pow+0x962>
 800a842:	f04f 0a00 	mov.w	sl, #0
 800a846:	e71e      	b.n	800a686 <__ieee754_pow+0x7d6>
 800a848:	4621      	mov	r1, r4
 800a84a:	e7d4      	b.n	800a7f6 <__ieee754_pow+0x946>
 800a84c:	f04f 0b00 	mov.w	fp, #0
 800a850:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a8d0 <__ieee754_pow+0xa20>
 800a854:	f7ff bbb0 	b.w	8009fb8 <__ieee754_pow+0x108>
 800a858:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a85c:	f7ff bbac 	b.w	8009fb8 <__ieee754_pow+0x108>
 800a860:	4638      	mov	r0, r7
 800a862:	4641      	mov	r1, r8
 800a864:	f7ff bbbf 	b.w	8009fe6 <__ieee754_pow+0x136>
 800a868:	9200      	str	r2, [sp, #0]
 800a86a:	f7ff bb7f 	b.w	8009f6c <__ieee754_pow+0xbc>
 800a86e:	2300      	movs	r3, #0
 800a870:	f7ff bb69 	b.w	8009f46 <__ieee754_pow+0x96>
 800a874:	f3af 8000 	nop.w
 800a878:	652b82fe 	.word	0x652b82fe
 800a87c:	3c971547 	.word	0x3c971547
 800a880:	00000000 	.word	0x00000000
 800a884:	3fe62e43 	.word	0x3fe62e43
 800a888:	fefa39ef 	.word	0xfefa39ef
 800a88c:	3fe62e42 	.word	0x3fe62e42
 800a890:	0ca86c39 	.word	0x0ca86c39
 800a894:	be205c61 	.word	0xbe205c61
 800a898:	72bea4d0 	.word	0x72bea4d0
 800a89c:	3e663769 	.word	0x3e663769
 800a8a0:	c5d26bf1 	.word	0xc5d26bf1
 800a8a4:	3ebbbd41 	.word	0x3ebbbd41
 800a8a8:	af25de2c 	.word	0xaf25de2c
 800a8ac:	3f11566a 	.word	0x3f11566a
 800a8b0:	16bebd93 	.word	0x16bebd93
 800a8b4:	3f66c16c 	.word	0x3f66c16c
 800a8b8:	5555553e 	.word	0x5555553e
 800a8bc:	3fc55555 	.word	0x3fc55555
 800a8c0:	c2f8f359 	.word	0xc2f8f359
 800a8c4:	01a56e1f 	.word	0x01a56e1f
 800a8c8:	3fe00000 	.word	0x3fe00000
 800a8cc:	000fffff 	.word	0x000fffff
 800a8d0:	3ff00000 	.word	0x3ff00000
 800a8d4:	4090cbff 	.word	0x4090cbff
 800a8d8:	3f6f3400 	.word	0x3f6f3400

0800a8dc <__ieee754_sqrt>:
 800a8dc:	f8df c150 	ldr.w	ip, [pc, #336]	; 800aa30 <__ieee754_sqrt+0x154>
 800a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e4:	ea3c 0c01 	bics.w	ip, ip, r1
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	460d      	mov	r5, r1
 800a8ee:	460a      	mov	r2, r1
 800a8f0:	4607      	mov	r7, r0
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	d10e      	bne.n	800a914 <__ieee754_sqrt+0x38>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	f7f5 fdee 	bl	80004d8 <__aeabi_dmul>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4630      	mov	r0, r6
 800a902:	4629      	mov	r1, r5
 800a904:	f7f5 fc32 	bl	800016c <__adddf3>
 800a908:	4606      	mov	r6, r0
 800a90a:	460d      	mov	r5, r1
 800a90c:	4630      	mov	r0, r6
 800a90e:	4629      	mov	r1, r5
 800a910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a914:	2900      	cmp	r1, #0
 800a916:	dc0d      	bgt.n	800a934 <__ieee754_sqrt+0x58>
 800a918:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a91c:	ea5c 0707 	orrs.w	r7, ip, r7
 800a920:	d0f4      	beq.n	800a90c <__ieee754_sqrt+0x30>
 800a922:	b139      	cbz	r1, 800a934 <__ieee754_sqrt+0x58>
 800a924:	4602      	mov	r2, r0
 800a926:	f7f5 fc1f 	bl	8000168 <__aeabi_dsub>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	f7f5 fefd 	bl	800072c <__aeabi_ddiv>
 800a932:	e7e9      	b.n	800a908 <__ieee754_sqrt+0x2c>
 800a934:	1512      	asrs	r2, r2, #20
 800a936:	d074      	beq.n	800aa22 <__ieee754_sqrt+0x146>
 800a938:	2000      	movs	r0, #0
 800a93a:	07d5      	lsls	r5, r2, #31
 800a93c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a940:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800a944:	bf5e      	ittt	pl
 800a946:	0fe3      	lsrpl	r3, r4, #31
 800a948:	0064      	lslpl	r4, r4, #1
 800a94a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800a94e:	0fe3      	lsrs	r3, r4, #31
 800a950:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a954:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a958:	2516      	movs	r5, #22
 800a95a:	4601      	mov	r1, r0
 800a95c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a960:	1076      	asrs	r6, r6, #1
 800a962:	0064      	lsls	r4, r4, #1
 800a964:	188f      	adds	r7, r1, r2
 800a966:	429f      	cmp	r7, r3
 800a968:	bfde      	ittt	le
 800a96a:	1bdb      	suble	r3, r3, r7
 800a96c:	18b9      	addle	r1, r7, r2
 800a96e:	1880      	addle	r0, r0, r2
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	3d01      	subs	r5, #1
 800a974:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a978:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a97c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a980:	d1f0      	bne.n	800a964 <__ieee754_sqrt+0x88>
 800a982:	462a      	mov	r2, r5
 800a984:	f04f 0e20 	mov.w	lr, #32
 800a988:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a98c:	428b      	cmp	r3, r1
 800a98e:	eb07 0c05 	add.w	ip, r7, r5
 800a992:	dc02      	bgt.n	800a99a <__ieee754_sqrt+0xbe>
 800a994:	d113      	bne.n	800a9be <__ieee754_sqrt+0xe2>
 800a996:	45a4      	cmp	ip, r4
 800a998:	d811      	bhi.n	800a9be <__ieee754_sqrt+0xe2>
 800a99a:	f1bc 0f00 	cmp.w	ip, #0
 800a99e:	eb0c 0507 	add.w	r5, ip, r7
 800a9a2:	da43      	bge.n	800aa2c <__ieee754_sqrt+0x150>
 800a9a4:	2d00      	cmp	r5, #0
 800a9a6:	db41      	blt.n	800aa2c <__ieee754_sqrt+0x150>
 800a9a8:	f101 0801 	add.w	r8, r1, #1
 800a9ac:	1a5b      	subs	r3, r3, r1
 800a9ae:	4641      	mov	r1, r8
 800a9b0:	45a4      	cmp	ip, r4
 800a9b2:	bf88      	it	hi
 800a9b4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800a9b8:	eba4 040c 	sub.w	r4, r4, ip
 800a9bc:	443a      	add	r2, r7
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	f1be 0e01 	subs.w	lr, lr, #1
 800a9c4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a9c8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800a9cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a9d0:	d1dc      	bne.n	800a98c <__ieee754_sqrt+0xb0>
 800a9d2:	4323      	orrs	r3, r4
 800a9d4:	d006      	beq.n	800a9e4 <__ieee754_sqrt+0x108>
 800a9d6:	1c54      	adds	r4, r2, #1
 800a9d8:	bf0b      	itete	eq
 800a9da:	4672      	moveq	r2, lr
 800a9dc:	3201      	addne	r2, #1
 800a9de:	3001      	addeq	r0, #1
 800a9e0:	f022 0201 	bicne.w	r2, r2, #1
 800a9e4:	1043      	asrs	r3, r0, #1
 800a9e6:	07c1      	lsls	r1, r0, #31
 800a9e8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a9ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a9f0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a9f4:	bf48      	it	mi
 800a9f6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800aa00:	e782      	b.n	800a908 <__ieee754_sqrt+0x2c>
 800aa02:	0ae3      	lsrs	r3, r4, #11
 800aa04:	3915      	subs	r1, #21
 800aa06:	0564      	lsls	r4, r4, #21
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0fa      	beq.n	800aa02 <__ieee754_sqrt+0x126>
 800aa0c:	02de      	lsls	r6, r3, #11
 800aa0e:	d50a      	bpl.n	800aa26 <__ieee754_sqrt+0x14a>
 800aa10:	f1c2 0020 	rsb	r0, r2, #32
 800aa14:	fa24 f000 	lsr.w	r0, r4, r0
 800aa18:	1e55      	subs	r5, r2, #1
 800aa1a:	4094      	lsls	r4, r2
 800aa1c:	4303      	orrs	r3, r0
 800aa1e:	1b4a      	subs	r2, r1, r5
 800aa20:	e78a      	b.n	800a938 <__ieee754_sqrt+0x5c>
 800aa22:	4611      	mov	r1, r2
 800aa24:	e7f0      	b.n	800aa08 <__ieee754_sqrt+0x12c>
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	3201      	adds	r2, #1
 800aa2a:	e7ef      	b.n	800aa0c <__ieee754_sqrt+0x130>
 800aa2c:	4688      	mov	r8, r1
 800aa2e:	e7bd      	b.n	800a9ac <__ieee754_sqrt+0xd0>
 800aa30:	7ff00000 	.word	0x7ff00000

0800aa34 <fabs>:
 800aa34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aa38:	4770      	bx	lr

0800aa3a <finite>:
 800aa3a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800aa3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800aa42:	0fc0      	lsrs	r0, r0, #31
 800aa44:	4770      	bx	lr
	...

0800aa48 <nan>:
 800aa48:	2000      	movs	r0, #0
 800aa4a:	4901      	ldr	r1, [pc, #4]	; (800aa50 <nan+0x8>)
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	7ff80000 	.word	0x7ff80000

0800aa54 <rint>:
 800aa54:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800aa58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa5a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800aa5e:	2f13      	cmp	r7, #19
 800aa60:	4602      	mov	r2, r0
 800aa62:	460b      	mov	r3, r1
 800aa64:	460c      	mov	r4, r1
 800aa66:	4605      	mov	r5, r0
 800aa68:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800aa6c:	dc59      	bgt.n	800ab22 <rint+0xce>
 800aa6e:	2f00      	cmp	r7, #0
 800aa70:	da2a      	bge.n	800aac8 <rint+0x74>
 800aa72:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aa76:	4301      	orrs	r1, r0
 800aa78:	d022      	beq.n	800aac0 <rint+0x6c>
 800aa7a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800aa7e:	4301      	orrs	r1, r0
 800aa80:	424d      	negs	r5, r1
 800aa82:	430d      	orrs	r5, r1
 800aa84:	4936      	ldr	r1, [pc, #216]	; (800ab60 <rint+0x10c>)
 800aa86:	0c5c      	lsrs	r4, r3, #17
 800aa88:	0b2d      	lsrs	r5, r5, #12
 800aa8a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800aa8e:	0464      	lsls	r4, r4, #17
 800aa90:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aa94:	ea45 0304 	orr.w	r3, r5, r4
 800aa98:	e9d1 4500 	ldrd	r4, r5, [r1]
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	f7f5 fb64 	bl	800016c <__adddf3>
 800aaa4:	e9cd 0100 	strd	r0, r1, [sp]
 800aaa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaac:	462b      	mov	r3, r5
 800aaae:	4622      	mov	r2, r4
 800aab0:	f7f5 fb5a 	bl	8000168 <__aeabi_dsub>
 800aab4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aab8:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4610      	mov	r0, r2
 800aac2:	4619      	mov	r1, r3
 800aac4:	b003      	add	sp, #12
 800aac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac8:	4926      	ldr	r1, [pc, #152]	; (800ab64 <rint+0x110>)
 800aaca:	4139      	asrs	r1, r7
 800aacc:	ea03 0001 	and.w	r0, r3, r1
 800aad0:	4310      	orrs	r0, r2
 800aad2:	d0f5      	beq.n	800aac0 <rint+0x6c>
 800aad4:	084b      	lsrs	r3, r1, #1
 800aad6:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800aada:	ea52 0501 	orrs.w	r5, r2, r1
 800aade:	d00c      	beq.n	800aafa <rint+0xa6>
 800aae0:	ea24 0303 	bic.w	r3, r4, r3
 800aae4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800aae8:	2f13      	cmp	r7, #19
 800aaea:	bf0c      	ite	eq
 800aaec:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800aaf0:	2500      	movne	r5, #0
 800aaf2:	fa44 f707 	asr.w	r7, r4, r7
 800aaf6:	ea43 0407 	orr.w	r4, r3, r7
 800aafa:	4919      	ldr	r1, [pc, #100]	; (800ab60 <rint+0x10c>)
 800aafc:	4623      	mov	r3, r4
 800aafe:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ab02:	462a      	mov	r2, r5
 800ab04:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ab08:	4620      	mov	r0, r4
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	f7f5 fb2e 	bl	800016c <__adddf3>
 800ab10:	e9cd 0100 	strd	r0, r1, [sp]
 800ab14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab18:	4622      	mov	r2, r4
 800ab1a:	462b      	mov	r3, r5
 800ab1c:	f7f5 fb24 	bl	8000168 <__aeabi_dsub>
 800ab20:	e7cc      	b.n	800aabc <rint+0x68>
 800ab22:	2f33      	cmp	r7, #51	; 0x33
 800ab24:	dd05      	ble.n	800ab32 <rint+0xde>
 800ab26:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ab2a:	d1c9      	bne.n	800aac0 <rint+0x6c>
 800ab2c:	f7f5 fb1e 	bl	800016c <__adddf3>
 800ab30:	e7c4      	b.n	800aabc <rint+0x68>
 800ab32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ab36:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800ab3a:	fa21 f10c 	lsr.w	r1, r1, ip
 800ab3e:	4208      	tst	r0, r1
 800ab40:	d0be      	beq.n	800aac0 <rint+0x6c>
 800ab42:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800ab46:	bf18      	it	ne
 800ab48:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800ab4c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800ab50:	bf1e      	ittt	ne
 800ab52:	ea20 0303 	bicne.w	r3, r0, r3
 800ab56:	fa45 fc0c 	asrne.w	ip, r5, ip
 800ab5a:	ea43 050c 	orrne.w	r5, r3, ip
 800ab5e:	e7cc      	b.n	800aafa <rint+0xa6>
 800ab60:	0800b318 	.word	0x0800b318
 800ab64:	000fffff 	.word	0x000fffff

0800ab68 <scalbn>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ab6e:	4604      	mov	r4, r0
 800ab70:	460d      	mov	r5, r1
 800ab72:	4617      	mov	r7, r2
 800ab74:	460b      	mov	r3, r1
 800ab76:	b996      	cbnz	r6, 800ab9e <scalbn+0x36>
 800ab78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab7c:	4303      	orrs	r3, r0
 800ab7e:	d039      	beq.n	800abf4 <scalbn+0x8c>
 800ab80:	4b35      	ldr	r3, [pc, #212]	; (800ac58 <scalbn+0xf0>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	f7f5 fca8 	bl	80004d8 <__aeabi_dmul>
 800ab88:	4b34      	ldr	r3, [pc, #208]	; (800ac5c <scalbn+0xf4>)
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	429f      	cmp	r7, r3
 800ab8e:	460d      	mov	r5, r1
 800ab90:	da0f      	bge.n	800abb2 <scalbn+0x4a>
 800ab92:	a32d      	add	r3, pc, #180	; (adr r3, 800ac48 <scalbn+0xe0>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fc9e 	bl	80004d8 <__aeabi_dmul>
 800ab9c:	e006      	b.n	800abac <scalbn+0x44>
 800ab9e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800aba2:	4296      	cmp	r6, r2
 800aba4:	d10a      	bne.n	800abbc <scalbn+0x54>
 800aba6:	4602      	mov	r2, r0
 800aba8:	f7f5 fae0 	bl	800016c <__adddf3>
 800abac:	4604      	mov	r4, r0
 800abae:	460d      	mov	r5, r1
 800abb0:	e020      	b.n	800abf4 <scalbn+0x8c>
 800abb2:	460b      	mov	r3, r1
 800abb4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800abb8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800abbc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800abc0:	19b9      	adds	r1, r7, r6
 800abc2:	4291      	cmp	r1, r2
 800abc4:	dd0e      	ble.n	800abe4 <scalbn+0x7c>
 800abc6:	a322      	add	r3, pc, #136	; (adr r3, 800ac50 <scalbn+0xe8>)
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800abd0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800abd4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800abd8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800abdc:	4820      	ldr	r0, [pc, #128]	; (800ac60 <scalbn+0xf8>)
 800abde:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800abe2:	e7d9      	b.n	800ab98 <scalbn+0x30>
 800abe4:	2900      	cmp	r1, #0
 800abe6:	dd08      	ble.n	800abfa <scalbn+0x92>
 800abe8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800abec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800abf0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800abf4:	4620      	mov	r0, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abfa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800abfe:	da16      	bge.n	800ac2e <scalbn+0xc6>
 800ac00:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ac04:	429f      	cmp	r7, r3
 800ac06:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ac0a:	dd08      	ble.n	800ac1e <scalbn+0xb6>
 800ac0c:	4c15      	ldr	r4, [pc, #84]	; (800ac64 <scalbn+0xfc>)
 800ac0e:	4814      	ldr	r0, [pc, #80]	; (800ac60 <scalbn+0xf8>)
 800ac10:	f363 74df 	bfi	r4, r3, #31, #1
 800ac14:	a30e      	add	r3, pc, #56	; (adr r3, 800ac50 <scalbn+0xe8>)
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	e7bc      	b.n	800ab98 <scalbn+0x30>
 800ac1e:	4c12      	ldr	r4, [pc, #72]	; (800ac68 <scalbn+0x100>)
 800ac20:	4812      	ldr	r0, [pc, #72]	; (800ac6c <scalbn+0x104>)
 800ac22:	f363 74df 	bfi	r4, r3, #31, #1
 800ac26:	a308      	add	r3, pc, #32	; (adr r3, 800ac48 <scalbn+0xe0>)
 800ac28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2c:	e7f5      	b.n	800ac1a <scalbn+0xb2>
 800ac2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac32:	3136      	adds	r1, #54	; 0x36
 800ac34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	4629      	mov	r1, r5
 800ac40:	2200      	movs	r2, #0
 800ac42:	4b0b      	ldr	r3, [pc, #44]	; (800ac70 <scalbn+0x108>)
 800ac44:	e7a8      	b.n	800ab98 <scalbn+0x30>
 800ac46:	bf00      	nop
 800ac48:	c2f8f359 	.word	0xc2f8f359
 800ac4c:	01a56e1f 	.word	0x01a56e1f
 800ac50:	8800759c 	.word	0x8800759c
 800ac54:	7e37e43c 	.word	0x7e37e43c
 800ac58:	43500000 	.word	0x43500000
 800ac5c:	ffff3cb0 	.word	0xffff3cb0
 800ac60:	8800759c 	.word	0x8800759c
 800ac64:	7e37e43c 	.word	0x7e37e43c
 800ac68:	01a56e1f 	.word	0x01a56e1f
 800ac6c:	c2f8f359 	.word	0xc2f8f359
 800ac70:	3c900000 	.word	0x3c900000

0800ac74 <_init>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	bf00      	nop
 800ac78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7a:	bc08      	pop	{r3}
 800ac7c:	469e      	mov	lr, r3
 800ac7e:	4770      	bx	lr

0800ac80 <_fini>:
 800ac80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac82:	bf00      	nop
 800ac84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac86:	bc08      	pop	{r3}
 800ac88:	469e      	mov	lr, r3
 800ac8a:	4770      	bx	lr
