
Anemometr_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800af80  0800af80  0001af80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b650  0800b650  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b650  0800b650  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b650  0800b650  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b650  0800b650  0001b650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b654  0800b654  0001b654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc0  200001e0  0800b838  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  0800b838  00020da0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fca  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003031  00000000  00000000  000371d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab89  00000000  00000000  0003c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164a4  00000000  00000000  000573f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096051  00000000  00000000  0006d895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001038e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006898  00000000  00000000  0010393c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af64 	.word	0x0800af64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800af64 	.word	0x0800af64

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <DHCP_time_handler+0x18>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a03      	ldr	r2, [pc, #12]	; (8001094 <DHCP_time_handler+0x18>)
 8001088:	6013      	str	r3, [r2, #0]
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	200001fc 	.word	0x200001fc

08001098 <rwFlash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void rwFlash(uint8_t rwFlag) {
 8001098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800109c:	b090      	sub	sp, #64	; 0x40
 800109e:	af02      	add	r7, sp, #8
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
	uint32_t pageAdr = 0x800FC00; //.
 80010a4:	4ba9      	ldr	r3, [pc, #676]	; (800134c <rwFlash+0x2b4>)
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 80010a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	4aa7      	ldr	r2, [pc, #668]	; (8001350 <rwFlash+0x2b8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d103      	bne.n	80010be <rwFlash+0x26>
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 80dd 	bne.w	8001278 <rwFlash+0x1e0>
		magicKey = 0x12349876;
 80010be:	4ba4      	ldr	r3, [pc, #656]	; (8001350 <rwFlash+0x2b8>)
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
		if (rwFlag == 0) { // For first initial
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d117      	bne.n	80010f8 <rwFlash+0x60>
			C_1 = CALIBRATE_START;
 80010c8:	4ba2      	ldr	r3, [pc, #648]	; (8001354 <rwFlash+0x2bc>)
 80010ca:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80010ce:	801a      	strh	r2, [r3, #0]
			C_3 = CALIBRATE_START;
 80010d0:	4ba1      	ldr	r3, [pc, #644]	; (8001358 <rwFlash+0x2c0>)
 80010d2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80010d6:	801a      	strh	r2, [r3, #0]
			C_2 = CALIBRATE_START;
 80010d8:	4ba0      	ldr	r3, [pc, #640]	; (800135c <rwFlash+0x2c4>)
 80010da:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80010de:	801a      	strh	r2, [r3, #0]
			C_4 = CALIBRATE_START;
 80010e0:	4b9f      	ldr	r3, [pc, #636]	; (8001360 <rwFlash+0x2c8>)
 80010e2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80010e6:	801a      	strh	r2, [r3, #0]
			DX1.f = 1;
 80010e8:	4b9e      	ldr	r3, [pc, #632]	; (8001364 <rwFlash+0x2cc>)
 80010ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ee:	601a      	str	r2, [r3, #0]
			//DX2.f = 1;
			DY1.f = 1;
 80010f0:	4b9d      	ldr	r3, [pc, #628]	; (8001368 <rwFlash+0x2d0>)
 80010f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010f6:	601a      	str	r2, [r3, #0]
			//DY2.f = 1;
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.PageAddress = pageAdr; //
 8001100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001102:	623b      	str	r3, [r7, #32]
		EraseInitStruct.NbPages     = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	627b      	str	r3, [r7, #36]	; 0x24

		flash_ok = HAL_ERROR;
 8001108:	4b98      	ldr	r3, [pc, #608]	; (800136c <rwFlash+0x2d4>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 800110e:	e005      	b.n	800111c <rwFlash+0x84>
		  flash_ok = HAL_FLASH_Unlock();
 8001110:	f002 fd7e 	bl	8003c10 <HAL_FLASH_Unlock>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b94      	ldr	r3, [pc, #592]	; (800136c <rwFlash+0x2d4>)
 800111a:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 800111c:	4b93      	ldr	r3, [pc, #588]	; (800136c <rwFlash+0x2d4>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f5      	bne.n	8001110 <rwFlash+0x78>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 8001124:	f107 0214 	add.w	r2, r7, #20
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f002 fe56 	bl	8003de0 <HAL_FLASHEx_Erase>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	f040 808f 	bne.w	800125a <rwFlash+0x1c2>
			dataForSave = (uint64_t) magicKey;
 800113c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800113e:	461a      	mov	r2, r3
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 8001148:	4b88      	ldr	r3, [pc, #544]	; (800136c <rwFlash+0x2d4>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800114e:	e009      	b.n	8001164 <rwFlash+0xcc>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key
 8001150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001154:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001156:	2003      	movs	r0, #3
 8001158:	f002 fcea 	bl	8003b30 <HAL_FLASH_Program>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b82      	ldr	r3, [pc, #520]	; (800136c <rwFlash+0x2d4>)
 8001162:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001164:	4b81      	ldr	r3, [pc, #516]	; (800136c <rwFlash+0x2d4>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f1      	bne.n	8001150 <rwFlash+0xb8>
			}
			dataForSave = (uint64_t) (C_1 | ((uint64_t) C_2 << 16) | ((uint64_t) C_3 << 32) | ((uint64_t) C_4 << 48));
 800116c:	4b79      	ldr	r3, [pc, #484]	; (8001354 <rwFlash+0x2bc>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b29a      	uxth	r2, r3
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	4979      	ldr	r1, [pc, #484]	; (800135c <rwFlash+0x2c4>)
 8001178:	8809      	ldrh	r1, [r1, #0]
 800117a:	b288      	uxth	r0, r1
 800117c:	f04f 0100 	mov.w	r1, #0
 8001180:	ea4f 4b10 	mov.w	fp, r0, lsr #16
 8001184:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8001188:	ea42 080a 	orr.w	r8, r2, sl
 800118c:	ea43 090b 	orr.w	r9, r3, fp
 8001190:	4b71      	ldr	r3, [pc, #452]	; (8001358 <rwFlash+0x2c0>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b298      	uxth	r0, r3
 8001196:	f04f 0100 	mov.w	r1, #0
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	0003      	movs	r3, r0
 80011a4:	2200      	movs	r2, #0
 80011a6:	ea48 0402 	orr.w	r4, r8, r2
 80011aa:	ea49 0503 	orr.w	r5, r9, r3
 80011ae:	4b6c      	ldr	r3, [pc, #432]	; (8001360 <rwFlash+0x2c8>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b298      	uxth	r0, r3
 80011b4:	f04f 0100 	mov.w	r1, #0
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	0403      	lsls	r3, r0, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	ea44 0102 	orr.w	r1, r4, r2
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	432b      	orrs	r3, r5
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011d2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 80011d6:	4b65      	ldr	r3, [pc, #404]	; (800136c <rwFlash+0x2d4>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011dc:	e00b      	b.n	80011f6 <rwFlash+0x15e>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 16, dataForSave); // Write C_12 C_34 C_14 C_23
 80011de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e0:	f103 0110 	add.w	r1, r3, #16
 80011e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011e8:	2003      	movs	r0, #3
 80011ea:	f002 fca1 	bl	8003b30 <HAL_FLASH_Program>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b5e      	ldr	r3, [pc, #376]	; (800136c <rwFlash+0x2d4>)
 80011f4:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <rwFlash+0x2d4>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1ef      	bne.n	80011de <rwFlash+0x146>
			}
			flash_ok = HAL_ERROR;
 80011fe:	4b5b      	ldr	r3, [pc, #364]	; (800136c <rwFlash+0x2d4>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001204:	e00e      	b.n	8001224 <rwFlash+0x18c>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 24, DX1.u); // Write DX1
 8001206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001208:	f103 0118 	add.w	r1, r3, #24
 800120c:	4b55      	ldr	r3, [pc, #340]	; (8001364 <rwFlash+0x2cc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	2002      	movs	r0, #2
 8001218:	f002 fc8a 	bl	8003b30 <HAL_FLASH_Program>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b52      	ldr	r3, [pc, #328]	; (800136c <rwFlash+0x2d4>)
 8001222:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001224:	4b51      	ldr	r3, [pc, #324]	; (800136c <rwFlash+0x2d4>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ec      	bne.n	8001206 <rwFlash+0x16e>
			}
			//flash_ok = HAL_ERROR;
			//while(flash_ok != HAL_OK){
			//	flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 28, DX2.u); // Write DX2
			//}
			flash_ok = HAL_ERROR;
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <rwFlash+0x2d4>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001232:	e00e      	b.n	8001252 <rwFlash+0x1ba>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 32, DY1.u); // Write DY1
 8001234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001236:	f103 0120 	add.w	r1, r3, #32
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <rwFlash+0x2d0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	2002      	movs	r0, #2
 8001246:	f002 fc73 	bl	8003b30 <HAL_FLASH_Program>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <rwFlash+0x2d4>)
 8001250:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <rwFlash+0x2d4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1ec      	bne.n	8001234 <rwFlash+0x19c>
			//while(flash_ok != HAL_OK){
			//	flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 36, DY2.u); // Write DY2
			//}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <rwFlash+0x2d4>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 8001260:	e005      	b.n	800126e <rwFlash+0x1d6>
			flash_ok = HAL_FLASH_Lock();
 8001262:	f002 fcfb 	bl	8003c5c <HAL_FLASH_Lock>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b40      	ldr	r3, [pc, #256]	; (800136c <rwFlash+0x2d4>)
 800126c:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <rwFlash+0x2d4>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f5      	bne.n	8001262 <rwFlash+0x1ca>
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 8001276:	e063      	b.n	8001340 <rwFlash+0x2a8>
		}
	} else {
		/* Задержки измерения в каналах */
		C_1 = *(__IO uint16_t*) (pageAdr + 16);
 8001278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127a:	3310      	adds	r3, #16
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <rwFlash+0x2bc>)
 8001282:	801a      	strh	r2, [r3, #0]
		C_2 = *(__IO uint16_t*) (pageAdr + 18);
 8001284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001286:	3312      	adds	r3, #18
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b33      	ldr	r3, [pc, #204]	; (800135c <rwFlash+0x2c4>)
 800128e:	801a      	strh	r2, [r3, #0]
		C_3 = *(__IO uint16_t*) (pageAdr + 20);
 8001290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001292:	3314      	adds	r3, #20
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <rwFlash+0x2c0>)
 800129a:	801a      	strh	r2, [r3, #0]
		C_4 = *(__IO uint16_t*) (pageAdr + 22);
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	3316      	adds	r3, #22
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <rwFlash+0x2c8>)
 80012a6:	801a      	strh	r2, [r3, #0]
		memset(SndBuffer, 0, sizeof(SndBuffer));
 80012a8:	22c8      	movs	r2, #200	; 0xc8
 80012aa:	2100      	movs	r1, #0
 80012ac:	4830      	ldr	r0, [pc, #192]	; (8001370 <rwFlash+0x2d8>)
 80012ae:	f005 fd83 	bl	8006db8 <memset>
		sprintf(SndBuffer, "C_1: %5d, C_2: %5d, C_3: %5d, C_4: %5d  \r\n", C_1, C_2, C_3, C_4);
 80012b2:	4b28      	ldr	r3, [pc, #160]	; (8001354 <rwFlash+0x2bc>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <rwFlash+0x2c4>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <rwFlash+0x2c0>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <rwFlash+0x2c8>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	4603      	mov	r3, r0
 80012ce:	460a      	mov	r2, r1
 80012d0:	4928      	ldr	r1, [pc, #160]	; (8001374 <rwFlash+0x2dc>)
 80012d2:	4827      	ldr	r0, [pc, #156]	; (8001370 <rwFlash+0x2d8>)
 80012d4:	f006 f9d8 	bl	8007688 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80012d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012dc:	22c8      	movs	r2, #200	; 0xc8
 80012de:	4924      	ldr	r1, [pc, #144]	; (8001370 <rwFlash+0x2d8>)
 80012e0:	4825      	ldr	r0, [pc, #148]	; (8001378 <rwFlash+0x2e0>)
 80012e2:	f005 fb33 	bl	800694c <HAL_UART_Transmit>

		/* Поправочные коэффициенты */
		DX1.u = *(__IO uint32_t*) (pageAdr + 24);
 80012e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e8:	3318      	adds	r3, #24
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <rwFlash+0x2cc>)
 80012ee:	6013      	str	r3, [r2, #0]
		//DX2.u = *(__IO uint32_t*) (pageAdr + 28);
		DY1.u = *(__IO uint32_t*) (pageAdr + 32);
 80012f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f2:	3320      	adds	r3, #32
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <rwFlash+0x2d0>)
 80012f8:	6013      	str	r3, [r2, #0]
		//DY2.u = *(__IO uint32_t*) (pageAdr + 36);
		memset(SndBuffer, 0, sizeof(SndBuffer));
 80012fa:	22c8      	movs	r2, #200	; 0xc8
 80012fc:	2100      	movs	r1, #0
 80012fe:	481c      	ldr	r0, [pc, #112]	; (8001370 <rwFlash+0x2d8>)
 8001300:	f005 fd5a 	bl	8006db8 <memset>
		sprintf(SndBuffer, "DX1: %7.6f, DY1: %7.6f \r\n", DX1.f, DY1.f);
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <rwFlash+0x2cc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f88d 	bl	8000428 <__aeabi_f2d>
 800130e:	4604      	mov	r4, r0
 8001310:	460d      	mov	r5, r1
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <rwFlash+0x2d0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f886 	bl	8000428 <__aeabi_f2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	e9cd 2300 	strd	r2, r3, [sp]
 8001324:	4622      	mov	r2, r4
 8001326:	462b      	mov	r3, r5
 8001328:	4914      	ldr	r1, [pc, #80]	; (800137c <rwFlash+0x2e4>)
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <rwFlash+0x2d8>)
 800132c:	f006 f9ac 	bl	8007688 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001334:	22c8      	movs	r2, #200	; 0xc8
 8001336:	490e      	ldr	r1, [pc, #56]	; (8001370 <rwFlash+0x2d8>)
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <rwFlash+0x2e0>)
 800133a:	f005 fb07 	bl	800694c <HAL_UART_Transmit>
	}
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3738      	adds	r7, #56	; 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800134a:	bf00      	nop
 800134c:	0800fc00 	.word	0x0800fc00
 8001350:	12349876 	.word	0x12349876
 8001354:	20000344 	.word	0x20000344
 8001358:	200006e4 	.word	0x200006e4
 800135c:	2000030c 	.word	0x2000030c
 8001360:	20000310 	.word	0x20000310
 8001364:	200002e8 	.word	0x200002e8
 8001368:	200002f8 	.word	0x200002f8
 800136c:	20000d64 	.word	0x20000d64
 8001370:	2000020c 	.word	0x2000020c
 8001374:	0800af80 	.word	0x0800af80
 8001378:	20000c88 	.word	0x20000c88
 800137c:	0800afac 	.word	0x0800afac

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001384:	b0a1      	sub	sp, #132	; 0x84
 8001386:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f002 fa48 	bl	800381c <HAL_Init>

  /* USER CODE BEGIN Init */
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
			(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) ? "Yes" : "No",
 800138c:	4b66      	ldr	r3, [pc, #408]	; (8001528 <main+0x1a8>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001390:	2b00      	cmp	r3, #0
 8001392:	da01      	bge.n	8001398 <main+0x18>
 8001394:	4c65      	ldr	r4, [pc, #404]	; (800152c <main+0x1ac>)
 8001396:	e000      	b.n	800139a <main+0x1a>
 8001398:	4c65      	ldr	r4, [pc, #404]	; (8001530 <main+0x1b0>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) ? "Yes" : "No",
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <main+0x1a8>)
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <main+0x2a>
 80013a6:	4d61      	ldr	r5, [pc, #388]	; (800152c <main+0x1ac>)
 80013a8:	e000      	b.n	80013ac <main+0x2c>
 80013aa:	4d61      	ldr	r5, [pc, #388]	; (8001530 <main+0x1b0>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) ? "Yes" : "No",
 80013ac:	4b5e      	ldr	r3, [pc, #376]	; (8001528 <main+0x1a8>)
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <main+0x3c>
 80013b8:	4b5c      	ldr	r3, [pc, #368]	; (800152c <main+0x1ac>)
 80013ba:	e000      	b.n	80013be <main+0x3e>
 80013bc:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <main+0x1b0>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) ? "Yes" : "No",
 80013be:	4a5a      	ldr	r2, [pc, #360]	; (8001528 <main+0x1a8>)
 80013c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013c2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	d001      	beq.n	80013ce <main+0x4e>
 80013ca:	4a58      	ldr	r2, [pc, #352]	; (800152c <main+0x1ac>)
 80013cc:	e000      	b.n	80013d0 <main+0x50>
 80013ce:	4a58      	ldr	r2, [pc, #352]	; (8001530 <main+0x1b0>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) ? "Yes" : "No",
 80013d0:	4955      	ldr	r1, [pc, #340]	; (8001528 <main+0x1a8>)
 80013d2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80013d4:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 80013d8:	2900      	cmp	r1, #0
 80013da:	d001      	beq.n	80013e0 <main+0x60>
 80013dc:	4953      	ldr	r1, [pc, #332]	; (800152c <main+0x1ac>)
 80013de:	e000      	b.n	80013e2 <main+0x62>
 80013e0:	4953      	ldr	r1, [pc, #332]	; (8001530 <main+0x1b0>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) ? "Yes" : "No");
 80013e2:	4851      	ldr	r0, [pc, #324]	; (8001528 <main+0x1a8>)
 80013e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80013e6:	f000 6000 	and.w	r0, r0, #134217728	; 0x8000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d001      	beq.n	80013f2 <main+0x72>
 80013ee:	484f      	ldr	r0, [pc, #316]	; (800152c <main+0x1ac>)
 80013f0:	e000      	b.n	80013f4 <main+0x74>
 80013f2:	484f      	ldr	r0, [pc, #316]	; (8001530 <main+0x1b0>)
 80013f4:	9003      	str	r0, [sp, #12]
 80013f6:	9102      	str	r1, [sp, #8]
 80013f8:	9201      	str	r2, [sp, #4]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	462b      	mov	r3, r5
 80013fe:	4622      	mov	r2, r4
 8001400:	494c      	ldr	r1, [pc, #304]	; (8001534 <main+0x1b4>)
 8001402:	484d      	ldr	r0, [pc, #308]	; (8001538 <main+0x1b8>)
 8001404:	f006 f940 	bl	8007688 <siprintf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001408:	f000 fe0e 	bl	8002028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140c:	f001 f95a 	bl	80026c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001410:	f001 f92e 	bl	8002670 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001414:	f000 fece 	bl	80021b4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001418:	f001 f8dc 	bl	80025d4 <MX_TIM4_Init>
  MX_TIM3_Init();
 800141c:	f001 f846 	bl	80024ac <MX_TIM3_Init>
  MX_TIM2_Init();
 8001420:	f000 ffae 	bl	8002380 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001424:	f000 fe48 	bl	80020b8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001428:	f000 fe8e 	bl	8002148 <MX_SPI2_Init>
  MX_IWDG_Init();
 800142c:	f000 fe72 	bl	8002114 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4841      	ldr	r0, [pc, #260]	; (800153c <main+0x1bc>)
 8001436:	f002 feff 	bl	8004238 <HAL_GPIO_WritePin>
  readyFlag = TRUE;
 800143a:	4b41      	ldr	r3, [pc, #260]	; (8001540 <main+0x1c0>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
  //sumCounter2 = 0;
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), HAL_MAX_DELAY);
 8001440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001444:	22c8      	movs	r2, #200	; 0xc8
 8001446:	493c      	ldr	r1, [pc, #240]	; (8001538 <main+0x1b8>)
 8001448:	483e      	ldr	r0, [pc, #248]	; (8001544 <main+0x1c4>)
 800144a:	f005 fa7f 	bl	800694c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_START_TEXT, sizeof(INIT_START_TEXT), HAL_MAX_DELAY);
 800144e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001452:	2212      	movs	r2, #18
 8001454:	493c      	ldr	r1, [pc, #240]	; (8001548 <main+0x1c8>)
 8001456:	483b      	ldr	r0, [pc, #236]	; (8001544 <main+0x1c4>)
 8001458:	f005 fa78 	bl	800694c <HAL_UART_Transmit>
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(SCSN_GPIO_Port, SCSN_Pin, GPIO_PIN_SET);
  HAL_Delay(2000);
  init_w5500();
#else
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_RESET);	// Reset W5500
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001462:	4836      	ldr	r0, [pc, #216]	; (800153c <main+0x1bc>)
 8001464:	f002 fee8 	bl	8004238 <HAL_GPIO_WritePin>
#endif
  rwFlash(0);		// Чтение параметров калибровки из Flash.
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff fe15 	bl	8001098 <rwFlash>

  /* Таймер задержки запуска измерения */
  receiversOff
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <main+0x1cc>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	4a36      	ldr	r2, [pc, #216]	; (800154c <main+0x1cc>)
 8001474:	f043 031e 	orr.w	r3, r3, #30
 8001478:	60d3      	str	r3, [r2, #12]
  //C_13 = CALIBRATE_START;
  if (C_1 == 0) {
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <main+0x1d0>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d103      	bne.n	800148a <main+0x10a>
	  C_1 = CALIBRATE_START;
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <main+0x1d0>)
 8001484:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001488:	801a      	strh	r2, [r3, #0]
  }
  if (C_2 == 0) {
 800148a:	4b32      	ldr	r3, [pc, #200]	; (8001554 <main+0x1d4>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <main+0x11a>
	  C_2 = CALIBRATE_START;
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <main+0x1d4>)
 8001494:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001498:	801a      	strh	r2, [r3, #0]
  }
  if (C_3 == 0) {
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <main+0x1d8>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d103      	bne.n	80014aa <main+0x12a>
	  C_3 = CALIBRATE_START;
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <main+0x1d8>)
 80014a4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80014a8:	801a      	strh	r2, [r3, #0]
  }
  if (C_4 == 0) {
 80014aa:	4b2c      	ldr	r3, [pc, #176]	; (800155c <main+0x1dc>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <main+0x13a>
	  C_4 = CALIBRATE_START;
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <main+0x1dc>)
 80014b4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80014b8:	801a      	strh	r2, [r3, #0]
  }
  TIM3->ARR = C_3; 		// Коррекция для таймера запуска измерения Z13
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <main+0x1d8>)
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <main+0x1e0>)
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  /*
   * calibrateMode == 0 -- Нормальный режим
   * calibrateMode > 0 -- Режим калибровки
   */
  calibrateMode = 0;
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <main+0x1e4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	801a      	strh	r2, [r3, #0]
  test_flag = FALSE;
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <main+0x1e8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
  Xsum = 0;
 80014ce:	4927      	ldr	r1, [pc, #156]	; (800156c <main+0x1ec>)
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 80014dc:	4924      	ldr	r1, [pc, #144]	; (8001570 <main+0x1f0>)
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	e9c1 2300 	strd	r2, r3, [r1]
  Vmax = 0;
 80014ea:	4922      	ldr	r1, [pc, #136]	; (8001574 <main+0x1f4>)
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	e9c1 2300 	strd	r2, r3, [r1]
  firstTime = TRUE;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <main+0x1f8>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
  currentMode = 0;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <main+0x1fc>)
 8001500:	2200      	movs	r2, #0
 8001502:	801a      	strh	r2, [r3, #0]
  STOP_CAPTURE
 8001504:	2100      	movs	r1, #0
 8001506:	481e      	ldr	r0, [pc, #120]	; (8001580 <main+0x200>)
 8001508:	f004 f86e 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
 800150c:	2104      	movs	r1, #4
 800150e:	481c      	ldr	r0, [pc, #112]	; (8001580 <main+0x200>)
 8001510:	f004 f86a 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
  TIM1->ARR = TIM1_PERIOD;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <main+0x204>)
 8001516:	f44f 7248 	mov.w	r2, #800	; 0x320
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  measCount = 0;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <main+0x208>)
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
  /*
   *	Очистка массива результатов.
   */
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 8001522:	2300      	movs	r3, #0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
 8001526:	e04c      	b.n	80015c2 <main+0x242>
 8001528:	40021000 	.word	0x40021000
 800152c:	0800afc8 	.word	0x0800afc8
 8001530:	0800afcc 	.word	0x0800afcc
 8001534:	0800afd0 	.word	0x0800afd0
 8001538:	2000020c 	.word	0x2000020c
 800153c:	40010800 	.word	0x40010800
 8001540:	200002ec 	.word	0x200002ec
 8001544:	20000c88 	.word	0x20000c88
 8001548:	0800b014 	.word	0x0800b014
 800154c:	40010c00 	.word	0x40010c00
 8001550:	20000344 	.word	0x20000344
 8001554:	2000030c 	.word	0x2000030c
 8001558:	200006e4 	.word	0x200006e4
 800155c:	20000310 	.word	0x20000310
 8001560:	40000400 	.word	0x40000400
 8001564:	20000884 	.word	0x20000884
 8001568:	200003b0 	.word	0x200003b0
 800156c:	200003a8 	.word	0x200003a8
 8001570:	200002f0 	.word	0x200002f0
 8001574:	20000318 	.word	0x20000318
 8001578:	20000b2c 	.word	0x20000b2c
 800157c:	200006e6 	.word	0x200006e6
 8001580:	20000d18 	.word	0x20000d18
 8001584:	40012c00 	.word	0x40012c00
 8001588:	20000320 	.word	0x20000320
	  resul_arrayX1[ii] = 0;
 800158c:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <main+0x3f8>)
 800158e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001590:	f04f 0100 	mov.w	r1, #0
 8001594:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  resul_arrayY1[ii] = 0;
 8001598:	4a78      	ldr	r2, [pc, #480]	; (800177c <main+0x3fc>)
 800159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159c:	f04f 0100 	mov.w	r1, #0
 80015a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  resul_arrayX2[ii] = 0;
 80015a4:	4a76      	ldr	r2, [pc, #472]	; (8001780 <main+0x400>)
 80015a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a8:	f04f 0100 	mov.w	r1, #0
 80015ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  resul_arrayY2[ii] = 0;
 80015b0:	4a74      	ldr	r2, [pc, #464]	; (8001784 <main+0x404>)
 80015b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 80015bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015be:	3301      	adds	r3, #1
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
 80015c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c4:	2b63      	cmp	r3, #99	; 0x63
 80015c6:	dde1      	ble.n	800158c <main+0x20c>
  }
  calibrate1 = FALSE;
 80015c8:	4b6f      	ldr	r3, [pc, #444]	; (8001788 <main+0x408>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
  calibrate3 = FALSE;
 80015ce:	4b6f      	ldr	r3, [pc, #444]	; (800178c <main+0x40c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
  calibrate2 = FALSE;
 80015d4:	4b6e      	ldr	r3, [pc, #440]	; (8001790 <main+0x410>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
  calibrate4 = FALSE;
 80015da:	4b6e      	ldr	r3, [pc, #440]	; (8001794 <main+0x414>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_FINISH_TEXT, sizeof(INIT_FINISH_TEXT), HAL_MAX_DELAY);
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e4:	2213      	movs	r2, #19
 80015e6:	496c      	ldr	r1, [pc, #432]	; (8001798 <main+0x418>)
 80015e8:	486c      	ldr	r0, [pc, #432]	; (800179c <main+0x41c>)
 80015ea:	f005 f9af 	bl	800694c <HAL_UART_Transmit>


  HAL_TIM_Base_Start_IT(&htim3);
 80015ee:	486c      	ldr	r0, [pc, #432]	; (80017a0 <main+0x420>)
 80015f0:	f003 fcbe 	bl	8004f70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80015f4:	486b      	ldr	r0, [pc, #428]	; (80017a4 <main+0x424>)
 80015f6:	f003 fcbb 	bl	8004f70 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  V = 0;
 80015fa:	496b      	ldr	r1, [pc, #428]	; (80017a8 <main+0x428>)
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9c1 2300 	strd	r2, r3, [r1]
  Xsum = 0;
 8001608:	4968      	ldr	r1, [pc, #416]	; (80017ac <main+0x42c>)
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 8001616:	4966      	ldr	r1, [pc, #408]	; (80017b0 <main+0x430>)
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9c1 2300 	strd	r2, r3, [r1]
  Vmaxfin = 0;
 8001624:	4963      	ldr	r1, [pc, #396]	; (80017b4 <main+0x434>)
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	e9c1 2300 	strd	r2, r3, [r1]
  Xmaxfin = 0;
 8001632:	4961      	ldr	r1, [pc, #388]	; (80017b8 <main+0x438>)
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9c1 2300 	strd	r2, r3, [r1]
  Ymaxfin = 0;
 8001640:	495e      	ldr	r1, [pc, #376]	; (80017bc <main+0x43c>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9c1 2300 	strd	r2, r3, [r1]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	485b      	ldr	r0, [pc, #364]	; (80017c0 <main+0x440>)
 8001654:	f002 fdf0 	bl	8004238 <HAL_GPIO_WritePin>
  while (1)
  {
	  if (readyFlag) {
 8001658:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <main+0x444>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 839c 	beq.w	8001d9a <main+0xa1a>
		  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8001662:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <main+0x448>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a58      	ldr	r2, [pc, #352]	; (80017c8 <main+0x448>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6013      	str	r3, [r2, #0]
		  HAL_IWDG_Refresh(&hiwdg);
 800166e:	4857      	ldr	r0, [pc, #348]	; (80017cc <main+0x44c>)
 8001670:	f002 ff80 	bl	8004574 <HAL_IWDG_Refresh>
		  readyFlag = FALSE;
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <main+0x444>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
		  if (calibrateMode > 0) {
 800167a:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <main+0x450>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 831a 	beq.w	8001cb8 <main+0x938>
			  /* Процедура калибровки */
			  if (( calibrate1 || calibrate3 || calibrate2 || calibrate4 ) && (calibrateCount < CALIBRATE_MAX_COUNT)) {
 8001684:	4b40      	ldr	r3, [pc, #256]	; (8001788 <main+0x408>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10c      	bne.n	80016a6 <main+0x326>
 800168c:	4b3f      	ldr	r3, [pc, #252]	; (800178c <main+0x40c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d108      	bne.n	80016a6 <main+0x326>
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <main+0x410>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d104      	bne.n	80016a6 <main+0x326>
 800169c:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <main+0x414>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 81f3 	beq.w	8001a8c <main+0x70c>
 80016a6:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <main+0x454>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80016ae:	f080 81ed 	bcs.w	8001a8c <main+0x70c>
				  memset(SndBuffer, 0, sizeof(SndBuffer));
 80016b2:	22c8      	movs	r2, #200	; 0xc8
 80016b4:	2100      	movs	r1, #0
 80016b6:	4848      	ldr	r0, [pc, #288]	; (80017d8 <main+0x458>)
 80016b8:	f005 fb7e 	bl	8006db8 <memset>
				  if (test_flag) {
 80016bc:	4b47      	ldr	r3, [pc, #284]	; (80017dc <main+0x45c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8093 	beq.w	80017ec <main+0x46c>
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <main+0x3fc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe feac 	bl	8000428 <__aeabi_f2d>
 80016d0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <main+0x404>)
 80016d6:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fea5 	bl	8000428 <__aeabi_f2d>
 80016de:	4680      	mov	r8, r0
 80016e0:	4689      	mov	r9, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <main+0x3fc>)
 80016e4:	681c      	ldr	r4, [r3, #0]
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <main+0x404>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a3d      	ldr	r2, [pc, #244]	; (80017e0 <main+0x460>)
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fad7 	bl	8000ca4 <__aeabi_fmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4619      	mov	r1, r3
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff f9c8 	bl	8000a90 <__aeabi_fsub>
 8001700:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fe90 	bl	8000428 <__aeabi_f2d>
 8001708:	4604      	mov	r4, r0
 800170a:	460d      	mov	r5, r1
							  resul_arrayX1[0], resul_arrayX2[0], resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <main+0x3f8>)
 800170e:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fe89 	bl	8000428 <__aeabi_f2d>
 8001716:	4682      	mov	sl, r0
 8001718:	468b      	mov	fp, r1
							  resul_arrayX1[0], resul_arrayX2[0], resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <main+0x400>)
 800171c:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fe82 	bl	8000428 <__aeabi_f2d>
 8001724:	e9c7 0108 	strd	r0, r1, [r7, #32]
							  resul_arrayX1[0], resul_arrayX2[0], resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <main+0x3f8>)
 800172a:	681e      	ldr	r6, [r3, #0]
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <main+0x400>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <main+0x464>)
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fab4 	bl	8000ca4 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	4619      	mov	r1, r3
 8001740:	4630      	mov	r0, r6
 8001742:	f7ff f9a5 	bl	8000a90 <__aeabi_fsub>
 8001746:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13(%4.0f)-Z31(%4.0f):%5.0f, Z42(%4.0f)-Z24(%4.0f):%5.0f   \r",
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe6d 	bl	8000428 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800175a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800175e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001762:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001766:	e9cd 8900 	strd	r8, r9, [sp]
 800176a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800176e:	491e      	ldr	r1, [pc, #120]	; (80017e8 <main+0x468>)
 8001770:	4819      	ldr	r0, [pc, #100]	; (80017d8 <main+0x458>)
 8001772:	f005 ff89 	bl	8007688 <siprintf>
 8001776:	e061      	b.n	800183c <main+0x4bc>
 8001778:	20000554 	.word	0x20000554
 800177c:	200003b4 	.word	0x200003b4
 8001780:	200006f0 	.word	0x200006f0
 8001784:	20000890 	.word	0x20000890
 8001788:	20000354 	.word	0x20000354
 800178c:	20000388 	.word	0x20000388
 8001790:	20000b1f 	.word	0x20000b1f
 8001794:	2000030e 	.word	0x2000030e
 8001798:	0800b028 	.word	0x0800b028
 800179c:	20000c88 	.word	0x20000c88
 80017a0:	20000c40 	.word	0x20000c40
 80017a4:	20000b90 	.word	0x20000b90
 80017a8:	20000398 	.word	0x20000398
 80017ac:	200003a8 	.word	0x200003a8
 80017b0:	200002f0 	.word	0x200002f0
 80017b4:	20000300 	.word	0x20000300
 80017b8:	20000888 	.word	0x20000888
 80017bc:	20000548 	.word	0x20000548
 80017c0:	40010800 	.word	0x40010800
 80017c4:	200002ec 	.word	0x200002ec
 80017c8:	e000e010 	.word	0xe000e010
 80017cc:	20000c2c 	.word	0x20000c2c
 80017d0:	20000884 	.word	0x20000884
 80017d4:	20000886 	.word	0x20000886
 80017d8:	2000020c 	.word	0x2000020c
 80017dc:	200003b0 	.word	0x200003b0
 80017e0:	200002f8 	.word	0x200002f8
 80017e4:	200002e8 	.word	0x200002e8
 80017e8:	0800b03c 	.word	0x0800b03c
				  } else {
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 80017ec:	4b93      	ldr	r3, [pc, #588]	; (8001a3c <main+0x6bc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe19 	bl	8000428 <__aeabi_f2d>
 80017f6:	4682      	mov	sl, r0
 80017f8:	468b      	mov	fp, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 80017fa:	4b91      	ldr	r3, [pc, #580]	; (8001a40 <main+0x6c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe12 	bl	8000428 <__aeabi_f2d>
 8001804:	4604      	mov	r4, r0
 8001806:	460d      	mov	r5, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8001808:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <main+0x6c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe0b 	bl	8000428 <__aeabi_f2d>
 8001812:	4680      	mov	r8, r0
 8001814:	4689      	mov	r9, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8001816:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <main+0x6c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13:%5.0f, Z31:%5.0f, Z42:%5.0f, Z24:%5.0f   \r",
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe04 	bl	8000428 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001828:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800182c:	e9cd 4500 	strd	r4, r5, [sp]
 8001830:	4652      	mov	r2, sl
 8001832:	465b      	mov	r3, fp
 8001834:	4985      	ldr	r1, [pc, #532]	; (8001a4c <main+0x6cc>)
 8001836:	4886      	ldr	r0, [pc, #536]	; (8001a50 <main+0x6d0>)
 8001838:	f005 ff26 	bl	8007688 <siprintf>
				  }
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 800183c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001840:	22c8      	movs	r2, #200	; 0xc8
 8001842:	4983      	ldr	r1, [pc, #524]	; (8001a50 <main+0x6d0>)
 8001844:	4883      	ldr	r0, [pc, #524]	; (8001a54 <main+0x6d4>)
 8001846:	f005 f881 	bl	800694c <HAL_UART_Transmit>
				  if (! test_flag) {
 800184a:	4b83      	ldr	r3, [pc, #524]	; (8001a58 <main+0x6d8>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	f083 0301 	eor.w	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80e6 	beq.w	8001a26 <main+0x6a6>
					  /* Y1 */
					  if ( calibrate1 && (abs(resul_arrayY1[0] - (float) TIM1_PERIOD) > CALIBRATE_ACURACY) ) {
 800185a:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <main+0x6dc>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d030      	beq.n	80018c4 <main+0x544>
 8001862:	4b76      	ldr	r3, [pc, #472]	; (8001a3c <main+0x6bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	497e      	ldr	r1, [pc, #504]	; (8001a60 <main+0x6e0>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f911 	bl	8000a90 <__aeabi_fsub>
 800186e:	4603      	mov	r3, r0
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fbdd 	bl	8001030 <__aeabi_f2iz>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	bfb8      	it	lt
 800187c:	425b      	neglt	r3, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f9bc 	bl	8000bfc <__aeabi_i2f>
 8001884:	4603      	mov	r3, r0
 8001886:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fbc6 	bl	800101c <__aeabi_fcmpgt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d016      	beq.n	80018c4 <main+0x544>
						  if (resul_arrayY1[0] > (float) TIM1_PERIOD) {
 8001896:	4b69      	ldr	r3, [pc, #420]	; (8001a3c <main+0x6bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4971      	ldr	r1, [pc, #452]	; (8001a60 <main+0x6e0>)
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fbbd 	bl	800101c <__aeabi_fcmpgt>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <main+0x536>
							  C_3++;
 80018a8:	4b6e      	ldr	r3, [pc, #440]	; (8001a64 <main+0x6e4>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b6c      	ldr	r3, [pc, #432]	; (8001a64 <main+0x6e4>)
 80018b2:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] > (float) TIM1_PERIOD) {
 80018b4:	e009      	b.n	80018ca <main+0x54a>
						  } else {
							  C_3--;
 80018b6:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <main+0x6e4>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29a      	uxth	r2, r3
 80018be:	4b69      	ldr	r3, [pc, #420]	; (8001a64 <main+0x6e4>)
 80018c0:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] > (float) TIM1_PERIOD) {
 80018c2:	e002      	b.n	80018ca <main+0x54a>
						  }
					  } else {
						  calibrate1 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y1
 80018c4:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <main+0x6dc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
					  }
					  /* Y2 */
					  if ( calibrate3 && (abs(resul_arrayY2[0] - (float) TIM1_PERIOD) > CALIBRATE_ACURACY) ) {
 80018ca:	4b67      	ldr	r3, [pc, #412]	; (8001a68 <main+0x6e8>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d030      	beq.n	8001934 <main+0x5b4>
 80018d2:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <main+0x6c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4962      	ldr	r1, [pc, #392]	; (8001a60 <main+0x6e0>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f8d9 	bl	8000a90 <__aeabi_fsub>
 80018de:	4603      	mov	r3, r0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fba5 	bl	8001030 <__aeabi_f2iz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bfb8      	it	lt
 80018ec:	425b      	neglt	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff f984 	bl	8000bfc <__aeabi_i2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fb8e 	bl	800101c <__aeabi_fcmpgt>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d016      	beq.n	8001934 <main+0x5b4>
						  if (resul_arrayY2[0] > (float) TIM1_PERIOD) {
 8001906:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <main+0x6c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4955      	ldr	r1, [pc, #340]	; (8001a60 <main+0x6e0>)
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fb85 	bl	800101c <__aeabi_fcmpgt>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <main+0x5a6>
							  C_1++;
 8001918:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <main+0x6ec>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <main+0x6ec>)
 8001922:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY2[0] > (float) TIM1_PERIOD) {
 8001924:	e009      	b.n	800193a <main+0x5ba>
						  } else {
							  C_1--;
 8001926:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <main+0x6ec>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <main+0x6ec>)
 8001930:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY2[0] > (float) TIM1_PERIOD) {
 8001932:	e002      	b.n	800193a <main+0x5ba>
						  }
					  } else {
						  calibrate3 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y1
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <main+0x6e8>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
					  }
					  /* X1 */
					  if ( calibrate2 && (abs(resul_arrayX1[0] - (float) TIM1_PERIOD) > CALIBRATE_ACURACY) ) {
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <main+0x6f0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d030      	beq.n	80019a4 <main+0x624>
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <main+0x6c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4946      	ldr	r1, [pc, #280]	; (8001a60 <main+0x6e0>)
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f8a1 	bl	8000a90 <__aeabi_fsub>
 800194e:	4603      	mov	r3, r0
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fb6d 	bl	8001030 <__aeabi_f2iz>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	bfb8      	it	lt
 800195c:	425b      	neglt	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f94c 	bl	8000bfc <__aeabi_i2f>
 8001964:	4603      	mov	r3, r0
 8001966:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fb56 	bl	800101c <__aeabi_fcmpgt>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d016      	beq.n	80019a4 <main+0x624>
						  if (resul_arrayX1[0] > (float) TIM1_PERIOD) {
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <main+0x6c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4939      	ldr	r1, [pc, #228]	; (8001a60 <main+0x6e0>)
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb4d 	bl	800101c <__aeabi_fcmpgt>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <main+0x616>
							  C_4++;
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <main+0x6f4>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <main+0x6f4>)
 8001992:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] > (float) TIM1_PERIOD) {
 8001994:	e009      	b.n	80019aa <main+0x62a>
						  } else {
							  C_4--;
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <main+0x6f4>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	3b01      	subs	r3, #1
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <main+0x6f4>)
 80019a0:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] > (float) TIM1_PERIOD) {
 80019a2:	e002      	b.n	80019aa <main+0x62a>
						  }
					  } else {
						  calibrate2 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y2
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <main+0x6f0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
					  }
					  /* X2 */
					  if ( calibrate4 && (abs(resul_arrayX2[0] - (float) TIM1_PERIOD) > CALIBRATE_ACURACY) ) {
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <main+0x6f8>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d030      	beq.n	8001a14 <main+0x694>
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <main+0x6c8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	492a      	ldr	r1, [pc, #168]	; (8001a60 <main+0x6e0>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f869 	bl	8000a90 <__aeabi_fsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fb35 	bl	8001030 <__aeabi_f2iz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bfb8      	it	lt
 80019cc:	425b      	neglt	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f914 	bl	8000bfc <__aeabi_i2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb1e 	bl	800101c <__aeabi_fcmpgt>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d016      	beq.n	8001a14 <main+0x694>
						  if (resul_arrayX2[0] > (float) TIM1_PERIOD) {
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <main+0x6c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	491d      	ldr	r1, [pc, #116]	; (8001a60 <main+0x6e0>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fb15 	bl	800101c <__aeabi_fcmpgt>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <main+0x686>
							  C_2++;
 80019f8:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <main+0x6fc>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <main+0x6fc>)
 8001a02:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX2[0] > (float) TIM1_PERIOD) {
 8001a04:	e009      	b.n	8001a1a <main+0x69a>
						  } else {
							  C_2--;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <main+0x6fc>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <main+0x6fc>)
 8001a10:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX2[0] > (float) TIM1_PERIOD) {
 8001a12:	e002      	b.n	8001a1a <main+0x69a>
						  }
					  } else {
						  calibrate4 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y2
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <main+0x6f8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
					  }
					  calibrateCount++;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <main+0x700>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <main+0x700>)
 8001a24:	801a      	strh	r2, [r3, #0]
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <main+0x704>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a16      	ldr	r2, [pc, #88]	; (8001a84 <main+0x704>)
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8001a32:	4815      	ldr	r0, [pc, #84]	; (8001a88 <main+0x708>)
 8001a34:	f003 fa9c 	bl	8004f70 <HAL_TIM_Base_Start_IT>
 8001a38:	e1af      	b.n	8001d9a <main+0xa1a>
 8001a3a:	bf00      	nop
 8001a3c:	200003b4 	.word	0x200003b4
 8001a40:	20000890 	.word	0x20000890
 8001a44:	20000554 	.word	0x20000554
 8001a48:	200006f0 	.word	0x200006f0
 8001a4c:	0800b07c 	.word	0x0800b07c
 8001a50:	2000020c 	.word	0x2000020c
 8001a54:	20000c88 	.word	0x20000c88
 8001a58:	200003b0 	.word	0x200003b0
 8001a5c:	20000354 	.word	0x20000354
 8001a60:	44480000 	.word	0x44480000
 8001a64:	200006e4 	.word	0x200006e4
 8001a68:	20000388 	.word	0x20000388
 8001a6c:	20000344 	.word	0x20000344
 8001a70:	20000b1f 	.word	0x20000b1f
 8001a74:	20000310 	.word	0x20000310
 8001a78:	2000030e 	.word	0x2000030e
 8001a7c:	2000030c 	.word	0x2000030c
 8001a80:	20000886 	.word	0x20000886
 8001a84:	e000e010 	.word	0xe000e010
 8001a88:	20000b90 	.word	0x20000b90
			  } else {
				  if (calibrateCount >= CALIBRATE_MAX_COUNT) {
 8001a8c:	4b71      	ldr	r3, [pc, #452]	; (8001c54 <main+0x8d4>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001a94:	d308      	bcc.n	8001aa8 <main+0x728>
					  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_TOUT, sizeof(CALIBRATE_ERROR_TOUT), 1000);
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	496e      	ldr	r1, [pc, #440]	; (8001c58 <main+0x8d8>)
 8001a9e:	486f      	ldr	r0, [pc, #444]	; (8001c5c <main+0x8dc>)
 8001aa0:	f004 ff54 	bl	800694c <HAL_UART_Transmit>
					  /* System restart if calibrate error. */
					  HAL_NVIC_SystemReset();
 8001aa4:	f002 f833 	bl	8003b0e <HAL_NVIC_SystemReset>
				  }
				  if (calibrateMode > 0) {
 8001aa8:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <main+0x8e0>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80c7 	beq.w	8001c40 <main+0x8c0>
					  ZX1 = ZX1 + (float) resul_arrayX1[0];
 8001ab2:	4b6c      	ldr	r3, [pc, #432]	; (8001c64 <main+0x8e4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6c      	ldr	r2, [pc, #432]	; (8001c68 <main+0x8e8>)
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe ffe9 	bl	8000a94 <__addsf3>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <main+0x8e8>)
 8001ac8:	601a      	str	r2, [r3, #0]
					  ZX2 = ZX2 + (float) resul_arrayX2[0];
 8001aca:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <main+0x8ec>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a68      	ldr	r2, [pc, #416]	; (8001c70 <main+0x8f0>)
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe ffdd 	bl	8000a94 <__addsf3>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <main+0x8f0>)
 8001ae0:	601a      	str	r2, [r3, #0]
					  ZY1 = ZY1 + (float) resul_arrayY1[0];
 8001ae2:	4b64      	ldr	r3, [pc, #400]	; (8001c74 <main+0x8f4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a64      	ldr	r2, [pc, #400]	; (8001c78 <main+0x8f8>)
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe ffd1 	bl	8000a94 <__addsf3>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b60      	ldr	r3, [pc, #384]	; (8001c78 <main+0x8f8>)
 8001af8:	601a      	str	r2, [r3, #0]
					  ZY2 = ZY2 + (float) resul_arrayY2[0];
 8001afa:	4b60      	ldr	r3, [pc, #384]	; (8001c7c <main+0x8fc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a60      	ldr	r2, [pc, #384]	; (8001c80 <main+0x900>)
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe ffc5 	bl	8000a94 <__addsf3>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <main+0x900>)
 8001b10:	601a      	str	r2, [r3, #0]
					  calibrateMode--;
 8001b12:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <main+0x8e0>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b51      	ldr	r3, [pc, #324]	; (8001c60 <main+0x8e0>)
 8001b1c:	801a      	strh	r2, [r3, #0]
					  if (calibrateMode == 0) {
 8001b1e:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <main+0x8e0>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 808c 	bne.w	8001c40 <main+0x8c0>
						  /* Вычисление поправок */
						  DX1.f = ZX1 / ZX2;
 8001b28:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <main+0x8e8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <main+0x8f0>)
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f96a 	bl	8000e0c <__aeabi_fdiv>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <main+0x904>)
 8001b3e:	601a      	str	r2, [r3, #0]
						  DY1.f = ZY1 / ZY2;
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <main+0x8f8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a4e      	ldr	r2, [pc, #312]	; (8001c80 <main+0x900>)
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f95e 	bl	8000e0c <__aeabi_fdiv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b4c      	ldr	r3, [pc, #304]	; (8001c88 <main+0x908>)
 8001b56:	601a      	str	r2, [r3, #0]
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001b58:	22c8      	movs	r2, #200	; 0xc8
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	484b      	ldr	r0, [pc, #300]	; (8001c8c <main+0x90c>)
 8001b5e:	f005 f92b 	bl	8006db8 <memset>
						  sprintf(SndBuffer, "\r\nCalibrate complite.\r\nC_1:%5d, C_3:%5d, C_2:%5d, C_4:%5d\r\n", C_1, C_3, C_2, C_4);
 8001b62:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <main+0x910>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <main+0x914>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <main+0x918>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <main+0x91c>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	9200      	str	r2, [sp, #0]
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	460a      	mov	r2, r1
 8001b80:	4947      	ldr	r1, [pc, #284]	; (8001ca0 <main+0x920>)
 8001b82:	4842      	ldr	r0, [pc, #264]	; (8001c8c <main+0x90c>)
 8001b84:	f005 fd80 	bl	8007688 <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8c:	22c8      	movs	r2, #200	; 0xc8
 8001b8e:	493f      	ldr	r1, [pc, #252]	; (8001c8c <main+0x90c>)
 8001b90:	4832      	ldr	r0, [pc, #200]	; (8001c5c <main+0x8dc>)
 8001b92:	f004 fedb 	bl	800694c <HAL_UART_Transmit>
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001b96:	22c8      	movs	r2, #200	; 0xc8
 8001b98:	2100      	movs	r1, #0
 8001b9a:	483c      	ldr	r0, [pc, #240]	; (8001c8c <main+0x90c>)
 8001b9c:	f005 f90c 	bl	8006db8 <memset>
						  sprintf(SndBuffer, "DY1:%5.4f, DX1:%5.4f\r\n\r\n", DY1.f, DX1.f);
 8001ba0:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <main+0x908>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fc3f 	bl	8000428 <__aeabi_f2d>
 8001baa:	4604      	mov	r4, r0
 8001bac:	460d      	mov	r5, r1
 8001bae:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <main+0x904>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc38 	bl	8000428 <__aeabi_f2d>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	e9cd 2300 	strd	r2, r3, [sp]
 8001bc0:	4622      	mov	r2, r4
 8001bc2:	462b      	mov	r3, r5
 8001bc4:	4937      	ldr	r1, [pc, #220]	; (8001ca4 <main+0x924>)
 8001bc6:	4831      	ldr	r0, [pc, #196]	; (8001c8c <main+0x90c>)
 8001bc8:	f005 fd5e 	bl	8007688 <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd0:	22c8      	movs	r2, #200	; 0xc8
 8001bd2:	492e      	ldr	r1, [pc, #184]	; (8001c8c <main+0x90c>)
 8001bd4:	4821      	ldr	r0, [pc, #132]	; (8001c5c <main+0x8dc>)
 8001bd6:	f004 feb9 	bl	800694c <HAL_UART_Transmit>
						  if (abs(DX1.f) < 2 && abs(DY1.f) < 2) {
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <main+0x904>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fa26 	bl	8001030 <__aeabi_f2iz>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bea:	db1c      	blt.n	8001c26 <main+0x8a6>
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <main+0x904>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fa1d 	bl	8001030 <__aeabi_f2iz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	dc14      	bgt.n	8001c26 <main+0x8a6>
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <main+0x908>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fa15 	bl	8001030 <__aeabi_f2iz>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c0c:	db0b      	blt.n	8001c26 <main+0x8a6>
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <main+0x908>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fa0c 	bl	8001030 <__aeabi_f2iz>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	dc03      	bgt.n	8001c26 <main+0x8a6>
							  rwFlash(1);  // Запись данных калибровки во Flash.
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fa3a 	bl	8001098 <rwFlash>
 8001c24:	e006      	b.n	8001c34 <main+0x8b4>
						  } else {
							  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_RANGE, sizeof(CALIBRATE_ERROR_RANGE), 1000);
 8001c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2a:	222a      	movs	r2, #42	; 0x2a
 8001c2c:	491e      	ldr	r1, [pc, #120]	; (8001ca8 <main+0x928>)
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <main+0x8dc>)
 8001c30:	f004 fe8c 	bl	800694c <HAL_UART_Transmit>
						  }
						  calibrateCount = 0;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <main+0x8d4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	801a      	strh	r2, [r3, #0]
						  firstTime = TRUE;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <main+0x92c>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
					  }
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <main+0x930>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <main+0x930>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8001c4c:	4819      	ldr	r0, [pc, #100]	; (8001cb4 <main+0x934>)
 8001c4e:	f003 f98f 	bl	8004f70 <HAL_TIM_Base_Start_IT>
 8001c52:	e0a2      	b.n	8001d9a <main+0xa1a>
 8001c54:	20000886 	.word	0x20000886
 8001c58:	0800b0ac 	.word	0x0800b0ac
 8001c5c:	20000c88 	.word	0x20000c88
 8001c60:	20000884 	.word	0x20000884
 8001c64:	20000554 	.word	0x20000554
 8001c68:	20000340 	.word	0x20000340
 8001c6c:	200006f0 	.word	0x200006f0
 8001c70:	20000550 	.word	0x20000550
 8001c74:	200003b4 	.word	0x200003b4
 8001c78:	20000880 	.word	0x20000880
 8001c7c:	20000890 	.word	0x20000890
 8001c80:	20000b20 	.word	0x20000b20
 8001c84:	200002e8 	.word	0x200002e8
 8001c88:	200002f8 	.word	0x200002f8
 8001c8c:	2000020c 	.word	0x2000020c
 8001c90:	20000344 	.word	0x20000344
 8001c94:	200006e4 	.word	0x200006e4
 8001c98:	2000030c 	.word	0x2000030c
 8001c9c:	20000310 	.word	0x20000310
 8001ca0:	0800b0cc 	.word	0x0800b0cc
 8001ca4:	0800b108 	.word	0x0800b108
 8001ca8:	0800b124 	.word	0x0800b124
 8001cac:	20000b2c 	.word	0x20000b2c
 8001cb0:	e000e010 	.word	0xe000e010
 8001cb4:	20000b90 	.word	0x20000b90
					  sendToZabbix(net_info.zabbix, ZabbixHostName, "ALTIM_MAXSPEED", Vmaxfin);
				  }
			  }
			#endif
			  //HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
			  if ( ! firstTime ) {
 8001cb8:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <main+0xb60>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	f083 0301 	eor.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d05d      	beq.n	8001d82 <main+0xa02>
				  sprintf(SndBuffer, "V:%5.2f, X:%5.2f, Y:%5.2f, Vmax:%5.2f, Xmax:%5.2f, Ymax:%5.2f, A:%3.0f, T:%5.2f, P:%8.3f, H:%5.2f   \r",
 8001cc6:	4b87      	ldr	r3, [pc, #540]	; (8001ee4 <main+0xb64>)
 8001cc8:	cb18      	ldmia	r3, {r3, r4}
 8001cca:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8001cce:	4b86      	ldr	r3, [pc, #536]	; (8001ee8 <main+0xb68>)
 8001cd0:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001cd4:	4b85      	ldr	r3, [pc, #532]	; (8001eec <main+0xb6c>)
 8001cd6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001cda:	e9c7 1208 	strd	r1, r2, [r7, #32]
 8001cde:	4b84      	ldr	r3, [pc, #528]	; (8001ef0 <main+0xb70>)
 8001ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001ce8:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <main+0xb74>)
 8001cea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cee:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001cf2:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <main+0xb78>)
 8001cf4:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001cf8:	e9c7 5602 	strd	r5, r6, [r7, #8]
 8001cfc:	4b7f      	ldr	r3, [pc, #508]	; (8001efc <main+0xb7c>)
 8001cfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001d02:	e9c7 8900 	strd	r8, r9, [r7]
 8001d06:	4b7e      	ldr	r3, [pc, #504]	; (8001f00 <main+0xb80>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fb8c 	bl	8000428 <__aeabi_f2d>
 8001d10:	4680      	mov	r8, r0
 8001d12:	4689      	mov	r9, r1
 8001d14:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <main+0xb84>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fb85 	bl	8000428 <__aeabi_f2d>
 8001d1e:	4604      	mov	r4, r0
 8001d20:	460d      	mov	r5, r1
 8001d22:	4b79      	ldr	r3, [pc, #484]	; (8001f08 <main+0xb88>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fb7e 	bl	8000428 <__aeabi_f2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001d34:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001d38:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001d3c:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001d40:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001d44:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001d48:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8001d4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d50:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001d54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001d5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001d60:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001d64:	e9cd ab00 	strd	sl, fp, [sp]
 8001d68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d6c:	4967      	ldr	r1, [pc, #412]	; (8001f0c <main+0xb8c>)
 8001d6e:	4868      	ldr	r0, [pc, #416]	; (8001f10 <main+0xb90>)
 8001d70:	f005 fc8a 	bl	8007688 <siprintf>
						  V, Xsum, Ysum, Vmaxfin, Xmaxfin, Ymaxfin, A, temperature, pressure, humidity);
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d78:	22c8      	movs	r2, #200	; 0xc8
 8001d7a:	4965      	ldr	r1, [pc, #404]	; (8001f10 <main+0xb90>)
 8001d7c:	4865      	ldr	r0, [pc, #404]	; (8001f14 <main+0xb94>)
 8001d7e:	f004 fde5 	bl	800694c <HAL_UART_Transmit>
			  }
			  firstTime = FALSE;
 8001d82:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <main+0xb60>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001d88:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <main+0xb98>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a62      	ldr	r2, [pc, #392]	; (8001f18 <main+0xb98>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]
				#endif
			  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8001d94:	4861      	ldr	r0, [pc, #388]	; (8001f1c <main+0xb9c>)
 8001d96:	f003 f8eb 	bl	8004f70 <HAL_TIM_Base_Start_IT>


	  /*
	   * Подготовка запуска процедуры калибровки
	   */
	  if(HAL_UART_Receive(&huart1, (uint8_t *) uart_buffer, 1, 10) ) {
 8001d9a:	230a      	movs	r3, #10
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4960      	ldr	r1, [pc, #384]	; (8001f20 <main+0xba0>)
 8001da0:	485c      	ldr	r0, [pc, #368]	; (8001f14 <main+0xb94>)
 8001da2:	f004 fe65 	bl	8006a70 <HAL_UART_Receive>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f43f ac55 	beq.w	8001658 <main+0x2d8>
		  if (uart_buffer[0] == 'c' ) {  // Клавиша c нажата ?
 8001dae:	4b5c      	ldr	r3, [pc, #368]	; (8001f20 <main+0xba0>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b63      	cmp	r3, #99	; 0x63
 8001db4:	d161      	bne.n	8001e7a <main+0xafa>
			  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_TEXT, sizeof(CALIBRATE_TEXT), 1000);
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	2216      	movs	r2, #22
 8001dbc:	4959      	ldr	r1, [pc, #356]	; (8001f24 <main+0xba4>)
 8001dbe:	4855      	ldr	r0, [pc, #340]	; (8001f14 <main+0xb94>)
 8001dc0:	f004 fdc4 	bl	800694c <HAL_UART_Transmit>
			  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001dc4:	4855      	ldr	r0, [pc, #340]	; (8001f1c <main+0xb9c>)
 8001dc6:	f003 f925 	bl	8005014 <HAL_TIM_Base_Stop_IT>
			  STOP_CAPTURE
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4856      	ldr	r0, [pc, #344]	; (8001f28 <main+0xba8>)
 8001dce:	f003 fc0b 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	4854      	ldr	r0, [pc, #336]	; (8001f28 <main+0xba8>)
 8001dd6:	f003 fc07 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
			  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001dda:	22c8      	movs	r2, #200	; 0xc8
 8001ddc:	2100      	movs	r1, #0
 8001dde:	484c      	ldr	r0, [pc, #304]	; (8001f10 <main+0xb90>)
 8001de0:	f004 ffea 	bl	8006db8 <memset>
			  calibrate1 = TRUE;
 8001de4:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <main+0xbac>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
			  calibrate3 = TRUE;
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <main+0xbb0>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
			  calibrate2 = TRUE;
 8001df0:	4b50      	ldr	r3, [pc, #320]	; (8001f34 <main+0xbb4>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
			  calibrate4 = TRUE;
 8001df6:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <main+0xbb8>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
			  test_flag = FALSE;
 8001dfc:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <main+0xbbc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
			  calibrateCount = 0;
 8001e02:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <main+0xbc0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	801a      	strh	r2, [r3, #0]
			  C_1 = CALIBRATE_START;
 8001e08:	4b4e      	ldr	r3, [pc, #312]	; (8001f44 <main+0xbc4>)
 8001e0a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001e0e:	801a      	strh	r2, [r3, #0]
			  C_3 = CALIBRATE_START;
 8001e10:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <main+0xbc8>)
 8001e12:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001e16:	801a      	strh	r2, [r3, #0]
			  C_2 = CALIBRATE_START;
 8001e18:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <main+0xbcc>)
 8001e1a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001e1e:	801a      	strh	r2, [r3, #0]
			  C_4 = CALIBRATE_START;
 8001e20:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <main+0xbd0>)
 8001e22:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001e26:	801a      	strh	r2, [r3, #0]
			  ZX1 = 0;
 8001e28:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <main+0xbd4>)
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
			  ZX2 = 0;
 8001e30:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <main+0xbd8>)
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
			  ZY1 = 0;
 8001e38:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <main+0xbdc>)
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
			  ZY2 = 0;
 8001e40:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <main+0xbe0>)
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
			  DX1.f = 0;
 8001e48:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <main+0xbe4>)
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
			  DY1.f = 0;
 8001e50:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <main+0xbe8>)
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
			  test_cnt = 0;
 8001e58:	4b44      	ldr	r3, [pc, #272]	; (8001f6c <main+0xbec>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	801a      	strh	r2, [r3, #0]
			  calibrateMode = MEASSURE_COUNT * CALIBRATE_TIMES;
 8001e5e:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <main+0xbf0>)
 8001e60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e64:	801a      	strh	r2, [r3, #0]
			  currentMode = 0;
 8001e66:	4b43      	ldr	r3, [pc, #268]	; (8001f74 <main+0xbf4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	801a      	strh	r2, [r3, #0]
			  measCount = 0;
 8001e6c:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <main+0xbf8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	801a      	strh	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001e72:	482a      	ldr	r0, [pc, #168]	; (8001f1c <main+0xb9c>)
 8001e74:	f003 f87c 	bl	8004f70 <HAL_TIM_Base_Start_IT>
 8001e78:	e0b6      	b.n	8001fe8 <main+0xc68>
		  } else {
			  if (uart_buffer[0] == 't' ) {		// Test
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <main+0xba0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b74      	cmp	r3, #116	; 0x74
 8001e80:	d17e      	bne.n	8001f80 <main+0xc00>
				  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001e82:	4826      	ldr	r0, [pc, #152]	; (8001f1c <main+0xb9c>)
 8001e84:	f003 f8c6 	bl	8005014 <HAL_TIM_Base_Stop_IT>
				  STOP_CAPTURE
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4827      	ldr	r0, [pc, #156]	; (8001f28 <main+0xba8>)
 8001e8c:	f003 fbac 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
 8001e90:	2104      	movs	r1, #4
 8001e92:	4825      	ldr	r0, [pc, #148]	; (8001f28 <main+0xba8>)
 8001e94:	f003 fba8 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
				  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TEXT, sizeof(TEST_TEXT), 1000);
 8001e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	4937      	ldr	r1, [pc, #220]	; (8001f7c <main+0xbfc>)
 8001ea0:	481c      	ldr	r0, [pc, #112]	; (8001f14 <main+0xb94>)
 8001ea2:	f004 fd53 	bl	800694c <HAL_UART_Transmit>
				  calibrateMode = 1;
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <main+0xbf0>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	801a      	strh	r2, [r3, #0]
				  calibrateCount = 0;
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <main+0xbc0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	801a      	strh	r2, [r3, #0]
				  test_flag = TRUE;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <main+0xbbc>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
				  calibrate1 = TRUE;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <main+0xbac>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
				  calibrate3 = TRUE;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <main+0xbb0>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
				  calibrate2 = TRUE;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <main+0xbb4>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
				  calibrate4 = TRUE;
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <main+0xbb8>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
				  measCount = 0;
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <main+0xbf8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001ed6:	4811      	ldr	r0, [pc, #68]	; (8001f1c <main+0xb9c>)
 8001ed8:	f003 f84a 	bl	8004f70 <HAL_TIM_Base_Start_IT>
 8001edc:	e084      	b.n	8001fe8 <main+0xc68>
 8001ede:	bf00      	nop
 8001ee0:	20000b2c 	.word	0x20000b2c
 8001ee4:	20000398 	.word	0x20000398
 8001ee8:	200003a8 	.word	0x200003a8
 8001eec:	200002f0 	.word	0x200002f0
 8001ef0:	20000300 	.word	0x20000300
 8001ef4:	20000888 	.word	0x20000888
 8001ef8:	20000548 	.word	0x20000548
 8001efc:	20000328 	.word	0x20000328
 8001f00:	20000350 	.word	0x20000350
 8001f04:	20000360 	.word	0x20000360
 8001f08:	20000390 	.word	0x20000390
 8001f0c:	0800b150 	.word	0x0800b150
 8001f10:	2000020c 	.word	0x2000020c
 8001f14:	20000c88 	.word	0x20000c88
 8001f18:	e000e010 	.word	0xe000e010
 8001f1c:	20000b90 	.word	0x20000b90
 8001f20:	20000200 	.word	0x20000200
 8001f24:	0800b1b8 	.word	0x0800b1b8
 8001f28:	20000d18 	.word	0x20000d18
 8001f2c:	20000354 	.word	0x20000354
 8001f30:	20000388 	.word	0x20000388
 8001f34:	20000b1f 	.word	0x20000b1f
 8001f38:	2000030e 	.word	0x2000030e
 8001f3c:	200003b0 	.word	0x200003b0
 8001f40:	20000886 	.word	0x20000886
 8001f44:	20000344 	.word	0x20000344
 8001f48:	200006e4 	.word	0x200006e4
 8001f4c:	2000030c 	.word	0x2000030c
 8001f50:	20000310 	.word	0x20000310
 8001f54:	20000340 	.word	0x20000340
 8001f58:	20000550 	.word	0x20000550
 8001f5c:	20000880 	.word	0x20000880
 8001f60:	20000b20 	.word	0x20000b20
 8001f64:	200002e8 	.word	0x200002e8
 8001f68:	200002f8 	.word	0x200002f8
 8001f6c:	20000b24 	.word	0x20000b24
 8001f70:	20000884 	.word	0x20000884
 8001f74:	200006e6 	.word	0x200006e6
 8001f78:	20000320 	.word	0x20000320
 8001f7c:	0800b1d0 	.word	0x0800b1d0
			  } else {
				  if (uart_buffer[0] == 'r' ) {		// Terminate calibration && test
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <main+0xc74>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b72      	cmp	r3, #114	; 0x72
 8001f86:	d12f      	bne.n	8001fe8 <main+0xc68>
					  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001f88:	481b      	ldr	r0, [pc, #108]	; (8001ff8 <main+0xc78>)
 8001f8a:	f003 f843 	bl	8005014 <HAL_TIM_Base_Stop_IT>
					  STOP_CAPTURE
 8001f8e:	2100      	movs	r1, #0
 8001f90:	481a      	ldr	r0, [pc, #104]	; (8001ffc <main+0xc7c>)
 8001f92:	f003 fb29 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
 8001f96:	2104      	movs	r1, #4
 8001f98:	4818      	ldr	r0, [pc, #96]	; (8001ffc <main+0xc7c>)
 8001f9a:	f003 fb25 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
					  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TERMINATE, sizeof(TEST_TERMINATE), 1000);
 8001f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa2:	2221      	movs	r2, #33	; 0x21
 8001fa4:	4916      	ldr	r1, [pc, #88]	; (8002000 <main+0xc80>)
 8001fa6:	4817      	ldr	r0, [pc, #92]	; (8002004 <main+0xc84>)
 8001fa8:	f004 fcd0 	bl	800694c <HAL_UART_Transmit>
					  test_flag = 0;
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <main+0xc88>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
					  calibrate1 = TRUE;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <main+0xc8c>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
					  calibrate3 = TRUE;
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <main+0xc90>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
					  calibrate2 = TRUE;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <main+0xc94>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
					  calibrate4 = TRUE;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <main+0xc98>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
					  calibrateMode = 0;
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <main+0xc9c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	801a      	strh	r2, [r3, #0]
					  calibrateCount = 0;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <main+0xca0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	801a      	strh	r2, [r3, #0]
					  measCount = 0;
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <main+0xca4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	801a      	strh	r2, [r3, #0]
					  rwFlash(0);		// Чтение параметров калибровки из Flash.
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff f85b 	bl	8001098 <rwFlash>
					  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <main+0xc78>)
 8001fe4:	f002 ffc4 	bl	8004f70 <HAL_TIM_Base_Start_IT>
				  }
			  }
		  }
		  uart_buffer[0] = 0x00;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <main+0xc74>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
	  if (readyFlag) {
 8001fee:	f7ff bb33 	b.w	8001658 <main+0x2d8>
 8001ff2:	bf00      	nop
 8001ff4:	20000200 	.word	0x20000200
 8001ff8:	20000b90 	.word	0x20000b90
 8001ffc:	20000d18 	.word	0x20000d18
 8002000:	0800b1e0 	.word	0x0800b1e0
 8002004:	20000c88 	.word	0x20000c88
 8002008:	200003b0 	.word	0x200003b0
 800200c:	20000354 	.word	0x20000354
 8002010:	20000388 	.word	0x20000388
 8002014:	20000b1f 	.word	0x20000b1f
 8002018:	2000030e 	.word	0x2000030e
 800201c:	20000884 	.word	0x20000884
 8002020:	20000886 	.word	0x20000886
 8002024:	20000320 	.word	0x20000320

08002028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b090      	sub	sp, #64	; 0x40
 800202c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202e:	f107 0318 	add.w	r3, r7, #24
 8002032:	2228      	movs	r2, #40	; 0x28
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f004 febe 	bl	8006db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800204a:	2309      	movs	r3, #9
 800204c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800204e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002052:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002058:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800205a:	2301      	movs	r3, #1
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800205e:	2301      	movs	r3, #1
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002062:	2302      	movs	r3, #2
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800206c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002070:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002072:	f107 0318 	add.w	r3, r7, #24
 8002076:	4618      	mov	r0, r3
 8002078:	f002 fa8c 	bl	8004594 <HAL_RCC_OscConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002082:	f000 fc49 	bl	8002918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002086:	230f      	movs	r3, #15
 8002088:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800208a:	2302      	movs	r3, #2
 800208c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2102      	movs	r1, #2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 fcf7 	bl	8004a94 <HAL_RCC_ClockConfig>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80020ac:	f000 fc34 	bl	8002918 <Error_Handler>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3740      	adds	r7, #64	; 0x40
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <MX_I2C1_Init+0x50>)
 80020be:	4a13      	ldr	r2, [pc, #76]	; (800210c <MX_I2C1_Init+0x54>)
 80020c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_I2C1_Init+0x50>)
 80020c4:	4a12      	ldr	r2, [pc, #72]	; (8002110 <MX_I2C1_Init+0x58>)
 80020c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_I2C1_Init+0x50>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_I2C1_Init+0x50>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_I2C1_Init+0x50>)
 80020d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <MX_I2C1_Init+0x50>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_I2C1_Init+0x50>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <MX_I2C1_Init+0x50>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_I2C1_Init+0x50>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_I2C1_Init+0x50>)
 80020f6:	f002 f8b7 	bl	8004268 <HAL_I2C_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002100:	f000 fc0a 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000bd8 	.word	0x20000bd8
 800210c:	40005400 	.word	0x40005400
 8002110:	000186a0 	.word	0x000186a0

08002114 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_IWDG_Init+0x2c>)
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <MX_IWDG_Init+0x30>)
 800211c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_IWDG_Init+0x2c>)
 8002120:	2206      	movs	r2, #6
 8002122:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_IWDG_Init+0x2c>)
 8002126:	f640 72ff 	movw	r2, #4095	; 0xfff
 800212a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <MX_IWDG_Init+0x2c>)
 800212e:	f002 f9df 	bl	80044f0 <HAL_IWDG_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002138:	f000 fbee 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000c2c 	.word	0x20000c2c
 8002144:	40003000 	.word	0x40003000

08002148 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <MX_SPI2_Init+0x64>)
 800214e:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <MX_SPI2_Init+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <MX_SPI2_Init+0x64>)
 8002154:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002158:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <MX_SPI2_Init+0x64>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <MX_SPI2_Init+0x64>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_SPI2_Init+0x64>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <MX_SPI2_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MX_SPI2_Init+0x64>)
 8002174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002178:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_SPI2_Init+0x64>)
 800217c:	2200      	movs	r2, #0
 800217e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <MX_SPI2_Init+0x64>)
 8002182:	2200      	movs	r2, #0
 8002184:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_SPI2_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <MX_SPI2_Init+0x64>)
 800218e:	2200      	movs	r2, #0
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_SPI2_Init+0x64>)
 8002194:	220a      	movs	r2, #10
 8002196:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <MX_SPI2_Init+0x64>)
 800219a:	f002 fe15 	bl	8004dc8 <HAL_SPI_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80021a4:	f000 fbb8 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000b38 	.word	0x20000b38
 80021b0:	40003800 	.word	0x40003800

080021b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b096      	sub	sp, #88	; 0x58
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
 80021e2:	615a      	str	r2, [r3, #20]
 80021e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	2220      	movs	r2, #32
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 fde3 	bl	8006db8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021f2:	4b61      	ldr	r3, [pc, #388]	; (8002378 <MX_TIM1_Init+0x1c4>)
 80021f4:	4a61      	ldr	r2, [pc, #388]	; (800237c <MX_TIM1_Init+0x1c8>)
 80021f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021f8:	4b5f      	ldr	r3, [pc, #380]	; (8002378 <MX_TIM1_Init+0x1c4>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b5e      	ldr	r3, [pc, #376]	; (8002378 <MX_TIM1_Init+0x1c4>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 799;
 8002204:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <MX_TIM1_Init+0x1c4>)
 8002206:	f240 321f 	movw	r2, #799	; 0x31f
 800220a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <MX_TIM1_Init+0x1c4>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 91;
 8002212:	4b59      	ldr	r3, [pc, #356]	; (8002378 <MX_TIM1_Init+0x1c4>)
 8002214:	225b      	movs	r2, #91	; 0x5b
 8002216:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002218:	4b57      	ldr	r3, [pc, #348]	; (8002378 <MX_TIM1_Init+0x1c4>)
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800221e:	4856      	ldr	r0, [pc, #344]	; (8002378 <MX_TIM1_Init+0x1c4>)
 8002220:	f002 fe56 	bl	8004ed0 <HAL_TIM_Base_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800222a:	f000 fb75 	bl	8002918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002234:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002238:	4619      	mov	r1, r3
 800223a:	484f      	ldr	r0, [pc, #316]	; (8002378 <MX_TIM1_Init+0x1c4>)
 800223c:	f003 fcca 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002246:	f000 fb67 	bl	8002918 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800224a:	484b      	ldr	r0, [pc, #300]	; (8002378 <MX_TIM1_Init+0x1c4>)
 800224c:	f002 ff10 	bl	8005070 <HAL_TIM_OC_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002256:	f000 fb5f 	bl	8002918 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800225a:	2108      	movs	r1, #8
 800225c:	4846      	ldr	r0, [pc, #280]	; (8002378 <MX_TIM1_Init+0x1c4>)
 800225e:	f003 fa6b 	bl	8005738 <HAL_TIM_OnePulse_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8002268:	f000 fb56 	bl	8002918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800226c:	2320      	movs	r3, #32
 800226e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002278:	4619      	mov	r1, r3
 800227a:	483f      	ldr	r0, [pc, #252]	; (8002378 <MX_TIM1_Init+0x1c4>)
 800227c:	f004 fa58 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002286:	f000 fb47 	bl	8002918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800228a:	2330      	movs	r3, #48	; 0x30
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002292:	2300      	movs	r3, #0
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002296:	2300      	movs	r3, #0
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	2200      	movs	r2, #0
 80022ac:	4619      	mov	r1, r3
 80022ae:	4832      	ldr	r0, [pc, #200]	; (8002378 <MX_TIM1_Init+0x1c4>)
 80022b0:	f003 fba4 	bl	80059fc <HAL_TIM_OC_ConfigChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80022ba:	f000 fb2d 	bl	8002918 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80022be:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <MX_TIM1_Init+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <MX_TIM1_Init+0x1c4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0208 	orr.w	r2, r2, #8
 80022cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	2204      	movs	r2, #4
 80022d4:	4619      	mov	r1, r3
 80022d6:	4828      	ldr	r0, [pc, #160]	; (8002378 <MX_TIM1_Init+0x1c4>)
 80022d8:	f003 fb90 	bl	80059fc <HAL_TIM_OC_ConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 80022e2:	f000 fb19 	bl	8002918 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <MX_TIM1_Init+0x1c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <MX_TIM1_Init+0x1c4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fa:	2208      	movs	r2, #8
 80022fc:	4619      	mov	r1, r3
 80022fe:	481e      	ldr	r0, [pc, #120]	; (8002378 <MX_TIM1_Init+0x1c4>)
 8002300:	f003 fb7c 	bl	80059fc <HAL_TIM_OC_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800230a:	f000 fb05 	bl	8002918 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800230e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002312:	220c      	movs	r2, #12
 8002314:	4619      	mov	r1, r3
 8002316:	4818      	ldr	r0, [pc, #96]	; (8002378 <MX_TIM1_Init+0x1c4>)
 8002318:	f003 fb70 	bl	80059fc <HAL_TIM_OC_ConfigChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002322:	f000 faf9 	bl	8002918 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_TIM1_Init+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <MX_TIM1_Init+0x1c4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002334:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800234a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	4619      	mov	r1, r3
 8002358:	4807      	ldr	r0, [pc, #28]	; (8002378 <MX_TIM1_Init+0x1c4>)
 800235a:	f004 fa47 	bl	80067ec <HAL_TIMEx_ConfigBreakDeadTime>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8002364:	f000 fad8 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <MX_TIM1_Init+0x1c4>)
 800236a:	f000 fc39 	bl	8002be0 <HAL_TIM_MspPostInit>

}
 800236e:	bf00      	nop
 8002370:	3758      	adds	r7, #88	; 0x58
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000cd0 	.word	0x20000cd0
 800237c:	40012c00 	.word	0x40012c00

08002380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b090      	sub	sp, #64	; 0x40
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <MX_TIM2_Init+0x128>)
 80023bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <MX_TIM2_Init+0x128>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <MX_TIM2_Init+0x128>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80023ce:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <MX_TIM2_Init+0x128>)
 80023d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d6:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <MX_TIM2_Init+0x128>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023dc:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <MX_TIM2_Init+0x128>)
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023e2:	4831      	ldr	r0, [pc, #196]	; (80024a8 <MX_TIM2_Init+0x128>)
 80023e4:	f002 fd74 	bl	8004ed0 <HAL_TIM_Base_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80023ee:	f000 fa93 	bl	8002918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023fc:	4619      	mov	r1, r3
 80023fe:	482a      	ldr	r0, [pc, #168]	; (80024a8 <MX_TIM2_Init+0x128>)
 8002400:	f003 fbe8 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800240a:	f000 fa85 	bl	8002918 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800240e:	4826      	ldr	r0, [pc, #152]	; (80024a8 <MX_TIM2_Init+0x128>)
 8002410:	f002 ff8c 	bl	800532c <HAL_TIM_IC_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800241a:	f000 fa7d 	bl	8002918 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800241e:	2304      	movs	r3, #4
 8002420:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8002422:	2320      	movs	r3, #32
 8002424:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	481e      	ldr	r0, [pc, #120]	; (80024a8 <MX_TIM2_Init+0x128>)
 800242e:	f003 fc95 	bl	8005d5c <HAL_TIM_SlaveConfigSynchro>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002438:	f000 fa6e 	bl	8002918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	4817      	ldr	r0, [pc, #92]	; (80024a8 <MX_TIM2_Init+0x128>)
 800244c:	f004 f970 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002456:	f000 fa5f 	bl	8002918 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800245e:	2301      	movs	r3, #1
 8002460:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2200      	movs	r2, #0
 800246e:	4619      	mov	r1, r3
 8002470:	480d      	ldr	r0, [pc, #52]	; (80024a8 <MX_TIM2_Init+0x128>)
 8002472:	f003 fb1b 	bl	8005aac <HAL_TIM_IC_ConfigChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 800247c:	f000 fa4c 	bl	8002918 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002480:	2302      	movs	r3, #2
 8002482:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002484:	2302      	movs	r3, #2
 8002486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2204      	movs	r2, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <MX_TIM2_Init+0x128>)
 8002490:	f003 fb0c 	bl	8005aac <HAL_TIM_IC_ConfigChannel>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 800249a:	f000 fa3d 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	3740      	adds	r7, #64	; 0x40
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000d18 	.word	0x20000d18

080024ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b092      	sub	sp, #72	; 0x48
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80024c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024da:	463b      	mov	r3, r7
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
 80024e8:	615a      	str	r2, [r3, #20]
 80024ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ec:	4b37      	ldr	r3, [pc, #220]	; (80025cc <MX_TIM3_Init+0x120>)
 80024ee:	4a38      	ldr	r2, [pc, #224]	; (80025d0 <MX_TIM3_Init+0x124>)
 80024f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <MX_TIM3_Init+0x120>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f8:	4b34      	ldr	r3, [pc, #208]	; (80025cc <MX_TIM3_Init+0x120>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <MX_TIM3_Init+0x120>)
 8002500:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002504:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <MX_TIM3_Init+0x120>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800250c:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <MX_TIM3_Init+0x120>)
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002512:	482e      	ldr	r0, [pc, #184]	; (80025cc <MX_TIM3_Init+0x120>)
 8002514:	f002 fcdc 	bl	8004ed0 <HAL_TIM_Base_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800251e:	f000 f9fb 	bl	8002918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002526:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800252c:	4619      	mov	r1, r3
 800252e:	4827      	ldr	r0, [pc, #156]	; (80025cc <MX_TIM3_Init+0x120>)
 8002530:	f003 fb50 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800253a:	f000 f9ed 	bl	8002918 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800253e:	4823      	ldr	r0, [pc, #140]	; (80025cc <MX_TIM3_Init+0x120>)
 8002540:	f002 fd96 	bl	8005070 <HAL_TIM_OC_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800254a:	f000 f9e5 	bl	8002918 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800254e:	2108      	movs	r1, #8
 8002550:	481e      	ldr	r0, [pc, #120]	; (80025cc <MX_TIM3_Init+0x120>)
 8002552:	f003 f8f1 	bl	8005738 <HAL_TIM_OnePulse_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800255c:	f000 f9dc 	bl	8002918 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002560:	2306      	movs	r3, #6
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002564:	2300      	movs	r3, #0
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256c:	4619      	mov	r1, r3
 800256e:	4817      	ldr	r0, [pc, #92]	; (80025cc <MX_TIM3_Init+0x120>)
 8002570:	f003 fbf4 	bl	8005d5c <HAL_TIM_SlaveConfigSynchro>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800257a:	f000 f9cd 	bl	8002918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800257e:	2330      	movs	r3, #48	; 0x30
 8002580:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4619      	mov	r1, r3
 800258c:	480f      	ldr	r0, [pc, #60]	; (80025cc <MX_TIM3_Init+0x120>)
 800258e:	f004 f8cf 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002598:	f000 f9be 	bl	8002918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800259c:	2310      	movs	r3, #16
 800259e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ac:	463b      	mov	r3, r7
 80025ae:	2200      	movs	r2, #0
 80025b0:	4619      	mov	r1, r3
 80025b2:	4806      	ldr	r0, [pc, #24]	; (80025cc <MX_TIM3_Init+0x120>)
 80025b4:	f003 fa22 	bl	80059fc <HAL_TIM_OC_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80025be:	f000 f9ab 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	3748      	adds	r7, #72	; 0x48
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000c40 	.word	0x20000c40
 80025d0:	40000400 	.word	0x40000400

080025d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	463b      	mov	r3, r7
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <MX_TIM4_Init+0x94>)
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <MX_TIM4_Init+0x98>)
 80025f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <MX_TIM4_Init+0x94>)
 80025f8:	2206      	movs	r2, #6
 80025fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <MX_TIM4_Init+0x94>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <MX_TIM4_Init+0x94>)
 8002604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002608:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <MX_TIM4_Init+0x94>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002610:	4b15      	ldr	r3, [pc, #84]	; (8002668 <MX_TIM4_Init+0x94>)
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002616:	4814      	ldr	r0, [pc, #80]	; (8002668 <MX_TIM4_Init+0x94>)
 8002618:	f002 fc5a 	bl	8004ed0 <HAL_TIM_Base_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002622:	f000 f979 	bl	8002918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	4619      	mov	r1, r3
 8002632:	480d      	ldr	r0, [pc, #52]	; (8002668 <MX_TIM4_Init+0x94>)
 8002634:	f003 face 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800263e:	f000 f96b 	bl	8002918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002642:	2320      	movs	r3, #32
 8002644:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800264a:	463b      	mov	r3, r7
 800264c:	4619      	mov	r1, r3
 800264e:	4806      	ldr	r0, [pc, #24]	; (8002668 <MX_TIM4_Init+0x94>)
 8002650:	f004 f86e 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800265a:	f000 f95d 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000b90 	.word	0x20000b90
 800266c:	40000800 	.word	0x40000800

08002670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <MX_USART1_UART_Init+0x50>)
 8002678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 800267c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 8002696:	220c      	movs	r2, #12
 8002698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026a6:	4805      	ldr	r0, [pc, #20]	; (80026bc <MX_USART1_UART_Init+0x4c>)
 80026a8:	f004 f903 	bl	80068b2 <HAL_UART_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026b2:	f000 f931 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000c88 	.word	0x20000c88
 80026c0:	40013800 	.word	0x40013800

080026c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ca:	f107 0310 	add.w	r3, r7, #16
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <MX_GPIO_Init+0xb8>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a27      	ldr	r2, [pc, #156]	; (800277c <MX_GPIO_Init+0xb8>)
 80026de:	f043 0320 	orr.w	r3, r3, #32
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <MX_GPIO_Init+0xb8>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <MX_GPIO_Init+0xb8>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <MX_GPIO_Init+0xb8>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <MX_GPIO_Init+0xb8>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <MX_GPIO_Init+0xb8>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a1b      	ldr	r2, [pc, #108]	; (800277c <MX_GPIO_Init+0xb8>)
 800270e:	f043 0308 	orr.w	r3, r3, #8
 8002712:	6193      	str	r3, [r2, #24]
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <MX_GPIO_Init+0xb8>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP_Pin|LED_Pin|nRst_Pin, GPIO_PIN_RESET);
 8002720:	2200      	movs	r2, #0
 8002722:	f241 0184 	movw	r1, #4228	; 0x1084
 8002726:	4816      	ldr	r0, [pc, #88]	; (8002780 <MX_GPIO_Init+0xbc>)
 8002728:	f001 fd86 	bl	8004238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 800272c:	2200      	movs	r2, #0
 800272e:	f241 011e 	movw	r1, #4126	; 0x101e
 8002732:	4814      	ldr	r0, [pc, #80]	; (8002784 <MX_GPIO_Init+0xc0>)
 8002734:	f001 fd80 	bl	8004238 <HAL_GPIO_WritePin>
                          |Z4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TP_Pin LED_Pin nRst_Pin */
  GPIO_InitStruct.Pin = TP_Pin|LED_Pin|nRst_Pin;
 8002738:	f241 0384 	movw	r3, #4228	; 0x1084
 800273c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	2301      	movs	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2302      	movs	r3, #2
 8002748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 0310 	add.w	r3, r7, #16
 800274e:	4619      	mov	r1, r3
 8002750:	480b      	ldr	r0, [pc, #44]	; (8002780 <MX_GPIO_Init+0xbc>)
 8002752:	f001 fbed 	bl	8003f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z1_Pin Z2_Pin SCSN_Pin Z3_Pin
                           Z4_Pin */
  GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 8002756:	f241 031e 	movw	r3, #4126	; 0x101e
 800275a:	613b      	str	r3, [r7, #16]
                          |Z4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275c:	2301      	movs	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2302      	movs	r3, #2
 8002766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4619      	mov	r1, r3
 800276e:	4805      	ldr	r0, [pc, #20]	; (8002784 <MX_GPIO_Init+0xc0>)
 8002770:	f001 fbde 	bl	8003f30 <HAL_GPIO_Init>

}
 8002774:	bf00      	nop
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	40010800 	.word	0x40010800
 8002784:	40010c00 	.word	0x40010c00

08002788 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim) {
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	if (runFlag > 0) {								// Разрешено измерение ?
 8002790:	4b56      	ldr	r3, [pc, #344]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x164>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a3 	beq.w	80028e0 <HAL_TIM_IC_CaptureCallback+0x158>
		if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a2:	f040 809d 	bne.w	80028e0 <HAL_TIM_IC_CaptureCallback+0x158>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	7f1b      	ldrb	r3, [r3, #28]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d004      	beq.n	80027b8 <HAL_TIM_IC_CaptureCallback+0x30>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7f1b      	ldrb	r3, [r3, #28]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	f040 8094 	bne.w	80028e0 <HAL_TIM_IC_CaptureCallback+0x158>
			if ((runFlag < COUNT_FRONT) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) ) {  // Ждем фронт первого импульса, дальше обрабатываем все импульсы.
 80027b8:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x164>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b1b      	cmp	r3, #27
 80027be:	d904      	bls.n	80027ca <HAL_TIM_IC_CaptureCallback+0x42>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	7f1b      	ldrb	r3, [r3, #28]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 808b 	bne.w	80028e0 <HAL_TIM_IC_CaptureCallback+0x158>
				//LED_PULSE
				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ) {  // Активен фронт
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7f1b      	ldrb	r3, [r3, #28]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10b      	bne.n	80027ea <HAL_TIM_IC_CaptureCallback+0x62>
					front_sum = front_sum + (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1) & 0x0FFFF);
 80027d2:	2100      	movs	r1, #0
 80027d4:	4846      	ldr	r0, [pc, #280]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x168>)
 80027d6:	f003 fb03 	bl	8005de0 <HAL_TIM_ReadCapturedValue>
 80027da:	4603      	mov	r3, r0
 80027dc:	b29a      	uxth	r2, r3
 80027de:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a43      	ldr	r2, [pc, #268]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	e00a      	b.n	8002800 <HAL_TIM_IC_CaptureCallback+0x78>
				} else {   // Активен спад
					front_sum = front_sum + (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2) & 0x0FFFF);
 80027ea:	2104      	movs	r1, #4
 80027ec:	4840      	ldr	r0, [pc, #256]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x168>)
 80027ee:	f003 faf7 	bl	8005de0 <HAL_TIM_ReadCapturedValue>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	4a3d      	ldr	r2, [pc, #244]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80027fe:	6013      	str	r3, [r2, #0]
				}
				runFlag--;
 8002800:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x164>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3b01      	subs	r3, #1
 8002806:	4a39      	ldr	r2, [pc, #228]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x164>)
 8002808:	6013      	str	r3, [r2, #0]
				if (runFlag == 0) {  // Измерения закончены ?
 800280a:	4b38      	ldr	r3, [pc, #224]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x164>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d166      	bne.n	80028e0 <HAL_TIM_IC_CaptureCallback+0x158>
					//LED_PULSE
					STOP_CAPTURE  // Таймер больше не нужен, выключаем
 8002812:	2100      	movs	r1, #0
 8002814:	4836      	ldr	r0, [pc, #216]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002816:	f002 fee7 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
 800281a:	2104      	movs	r1, #4
 800281c:	4834      	ldr	r0, [pc, #208]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x168>)
 800281e:	f002 fee3 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
					front_sum = front_sum / COUNT_FRONT - (TIM1_PERIOD * (COUNT_FRONT - 1) / 2);  // Расчитываем задержку от средины импульсов
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	4a33      	ldr	r2, [pc, #204]	; (80028f8 <HAL_TIM_IC_CaptureCallback+0x170>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 8002832:	3b30      	subs	r3, #48	; 0x30
 8002834:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002836:	6013      	str	r3, [r2, #0]
					if (front_sum > 1600) {		// Ошибка измерения.
 8002838:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002840:	d903      	bls.n	800284a <HAL_TIM_IC_CaptureCallback+0xc2>
						front_sum = 1600;		// Значение необходимое для калибровки.
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002844:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002848:	601a      	str	r2, [r3, #0]
					}
					/* Turn off all multiplexer */
					GPIOB->ODR &= ~((1 << Z1Receive) | (1 << Z2Receive) | (1 << Z3Receive) | (1 << Z4Receive));
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <HAL_TIM_IC_CaptureCallback+0x174>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	4a2b      	ldr	r2, [pc, #172]	; (80028fc <HAL_TIM_IC_CaptureCallback+0x174>)
 8002850:	f023 031e 	bic.w	r3, r3, #30
 8002854:	60d3      	str	r3, [r2, #12]
					switch (currentMode) {
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	3b01      	subs	r3, #1
 800285c:	2b03      	cmp	r3, #3
 800285e:	d840      	bhi.n	80028e2 <HAL_TIM_IC_CaptureCallback+0x15a>
 8002860:	a201      	add	r2, pc, #4	; (adr r2, 8002868 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002866:	bf00      	nop
 8002868:	08002879 	.word	0x08002879
 800286c:	08002893 	.word	0x08002893
 8002870:	080028ad 	.word	0x080028ad
 8002874:	080028c7 	.word	0x080028c7
						case 1: { // Z1 > Z3, Z13
							resul_arrayY1[measCount] = front_sum;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a21      	ldr	r2, [pc, #132]	; (8002904 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800287e:	8812      	ldrh	r2, [r2, #0]
 8002880:	4614      	mov	r4, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe f9b6 	bl	8000bf4 <__aeabi_ui2f>
 8002888:	4603      	mov	r3, r0
 800288a:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <HAL_TIM_IC_CaptureCallback+0x180>)
 800288c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 8002890:	e027      	b.n	80028e2 <HAL_TIM_IC_CaptureCallback+0x15a>
						}
						case 2: { // Z3 > Z1, Z31
							resul_arrayY2[measCount] = front_sum;
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8002898:	8812      	ldrh	r2, [r2, #0]
 800289a:	4614      	mov	r4, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe f9a9 	bl	8000bf4 <__aeabi_ui2f>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <HAL_TIM_IC_CaptureCallback+0x184>)
 80028a6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80028aa:	e01a      	b.n	80028e2 <HAL_TIM_IC_CaptureCallback+0x15a>
						}
						case 3: { // Z2 > Z4 Z24
							resul_arrayX1[measCount] = front_sum;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80028b2:	8812      	ldrh	r2, [r2, #0]
 80028b4:	4614      	mov	r4, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe f99c 	bl	8000bf4 <__aeabi_ui2f>
 80028bc:	4603      	mov	r3, r0
 80028be:	4a14      	ldr	r2, [pc, #80]	; (8002910 <HAL_TIM_IC_CaptureCallback+0x188>)
 80028c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80028c4:	e00d      	b.n	80028e2 <HAL_TIM_IC_CaptureCallback+0x15a>
						}
						case 4: { // Z4 > Z2 Z42
							resul_arrayX2[measCount] = front_sum;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80028cc:	8812      	ldrh	r2, [r2, #0]
 80028ce:	4614      	mov	r4, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe f98f 	bl	8000bf4 <__aeabi_ui2f>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80028da:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80028de:	e000      	b.n	80028e2 <HAL_TIM_IC_CaptureCallback+0x15a>
						}
					}
				}
 80028e0:	bf00      	nop
			}
		}
	}
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200003a0 	.word	0x200003a0
 80028f0:	20000d18 	.word	0x20000d18
 80028f4:	2000038c 	.word	0x2000038c
 80028f8:	24924925 	.word	0x24924925
 80028fc:	40010c00 	.word	0x40010c00
 8002900:	200006e6 	.word	0x200006e6
 8002904:	20000320 	.word	0x20000320
 8002908:	200003b4 	.word	0x200003b4
 800290c:	20000890 	.word	0x20000890
 8002910:	20000554 	.word	0x20000554
 8002914:	200006f0 	.word	0x200006f0

08002918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800291c:	b672      	cpsid	i
}
 800291e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002920:	e7fe      	b.n	8002920 <Error_Handler+0x8>
	...

08002924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <HAL_MspInit+0x5c>)
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	4a14      	ldr	r2, [pc, #80]	; (8002980 <HAL_MspInit+0x5c>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6193      	str	r3, [r2, #24]
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_MspInit+0x5c>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <HAL_MspInit+0x5c>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <HAL_MspInit+0x5c>)
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	61d3      	str	r3, [r2, #28]
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <HAL_MspInit+0x5c>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_MspInit+0x60>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_MspInit+0x60>)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000

08002988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_I2C_MspInit+0x90>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d132      	bne.n	8002a0e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c6:	2312      	movs	r3, #18
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	4812      	ldr	r0, [pc, #72]	; (8002a20 <HAL_I2C_MspInit+0x98>)
 80029d6:	f001 faab 	bl	8003f30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_I2C_MspInit+0x9c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <HAL_I2C_MspInit+0x9c>)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 80029fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a00:	61d3      	str	r3, [r2, #28]
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_I2C_MspInit+0x94>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40005400 	.word	0x40005400
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40010c00 	.word	0x40010c00
 8002a24:	40010000 	.word	0x40010000

08002a28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0310 	add.w	r3, r7, #16
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_SPI_MspInit+0x8c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d131      	bne.n	8002aac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_SPI_MspInit+0x90>)
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <HAL_SPI_MspInit+0x90>)
 8002a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a52:	61d3      	str	r3, [r2, #28]
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_SPI_MspInit+0x90>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_SPI_MspInit+0x90>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <HAL_SPI_MspInit+0x90>)
 8002a66:	f043 0308 	orr.w	r3, r3, #8
 8002a6a:	6193      	str	r3, [r2, #24]
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_SPI_MspInit+0x90>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002a78:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002a7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a86:	f107 0310 	add.w	r3, r7, #16
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	480b      	ldr	r0, [pc, #44]	; (8002abc <HAL_SPI_MspInit+0x94>)
 8002a8e:	f001 fa4f 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa0:	f107 0310 	add.w	r3, r7, #16
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <HAL_SPI_MspInit+0x94>)
 8002aa8:	f001 fa42 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002aac:	bf00      	nop
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40003800 	.word	0x40003800
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40010c00 	.word	0x40010c00

08002ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	; 0x30
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 0320 	add.w	r3, r7, #32
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3c      	ldr	r2, [pc, #240]	; (8002bcc <HAL_TIM_Base_MspInit+0x10c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10c      	bne.n	8002afa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002ae6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002af8:	e064      	b.n	8002bc4 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d12c      	bne.n	8002b5e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b04:	4b32      	ldr	r3, [pc, #200]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4a31      	ldr	r2, [pc, #196]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	61d3      	str	r3, [r2, #28]
 8002b10:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b34:	2301      	movs	r3, #1
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	f107 0320 	add.w	r3, r7, #32
 8002b44:	4619      	mov	r1, r3
 8002b46:	4823      	ldr	r0, [pc, #140]	; (8002bd4 <HAL_TIM_Base_MspInit+0x114>)
 8002b48:	f001 f9f2 	bl	8003f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2100      	movs	r1, #0
 8002b50:	201c      	movs	r0, #28
 8002b52:	f000 ffb2 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b56:	201c      	movs	r0, #28
 8002b58:	f000 ffcb 	bl	8003af2 <HAL_NVIC_EnableIRQ>
}
 8002b5c:	e032      	b.n	8002bc4 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_TIM_Base_MspInit+0x118>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d114      	bne.n	8002b92 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	61d3      	str	r3, [r2, #28]
 8002b74:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b80:	2200      	movs	r2, #0
 8002b82:	2100      	movs	r1, #0
 8002b84:	201d      	movs	r0, #29
 8002b86:	f000 ff98 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b8a:	201d      	movs	r0, #29
 8002b8c:	f000 ffb1 	bl	8003af2 <HAL_NVIC_EnableIRQ>
}
 8002b90:	e018      	b.n	8002bc4 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_TIM_Base_MspInit+0x11c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d113      	bne.n	8002bc4 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	61d3      	str	r3, [r2, #28]
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_TIM_Base_MspInit+0x110>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	201e      	movs	r0, #30
 8002bba:	f000 ff7e 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bbe:	201e      	movs	r0, #30
 8002bc0:	f000 ff97 	bl	8003af2 <HAL_NVIC_EnableIRQ>
}
 8002bc4:	bf00      	nop
 8002bc6:	3730      	adds	r7, #48	; 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40010800 	.word	0x40010800
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800

08002be0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_TIM_MspPostInit+0x5c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d118      	bne.n	8002c32 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_TIM_MspPostInit+0x60>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_TIM_MspPostInit+0x60>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	6193      	str	r3, [r2, #24]
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_TIM_MspPostInit+0x60>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTZ1_Pin|OUTZ2_Pin|OUTZ3_Pin|OUTZ4_Pin;
 8002c18:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4805      	ldr	r0, [pc, #20]	; (8002c44 <HAL_TIM_MspPostInit+0x64>)
 8002c2e:	f001 f97f 	bl	8003f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c32:	bf00      	nop
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40010800 	.word	0x40010800

08002c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a22      	ldr	r2, [pc, #136]	; (8002cec <HAL_UART_MspInit+0xa4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d13d      	bne.n	8002ce4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c72:	6193      	str	r3, [r2, #24]
 8002c74:	4b1e      	ldr	r3, [pc, #120]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	6193      	str	r3, [r2, #24]
 8002c8c:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <HAL_UART_MspInit+0xa8>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c98:	2340      	movs	r3, #64	; 0x40
 8002c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4812      	ldr	r0, [pc, #72]	; (8002cf4 <HAL_UART_MspInit+0xac>)
 8002cac:	f001 f940 	bl	8003f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <HAL_UART_MspInit+0xac>)
 8002cc4:	f001 f934 	bl	8003f30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_UART_MspInit+0xb0>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <HAL_UART_MspInit+0xb0>)
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ce4:	bf00      	nop
 8002ce6:	3728      	adds	r7, #40	; 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010c00 	.word	0x40010c00
 8002cf8:	40010000 	.word	0x40010000

08002cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <NMI_Handler+0x4>

08002d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d06:	e7fe      	b.n	8002d06 <HardFault_Handler+0x4>

08002d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <MemManage_Handler+0x4>

08002d0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d12:	e7fe      	b.n	8002d12 <BusFault_Handler+0x4>

08002d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <UsageFault_Handler+0x4>

08002d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
	...

08002d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <SysTick_Handler+0x2c>)
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <SysTick_Handler+0x2c>)
 8002d4e:	801a      	strh	r2, [r3, #0]
	if(ticks >= 1000) {
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <SysTick_Handler+0x2c>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d58:	d304      	bcc.n	8002d64 <SysTick_Handler+0x24>
		DHCP_time_handler();
 8002d5a:	f7fe f98f 	bl	800107c <DHCP_time_handler>
		ticks = 0;
 8002d5e:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <SysTick_Handler+0x2c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d64:	f000 fda0 	bl	80038a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200002d4 	.word	0x200002d4

08002d70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d74:	4802      	ldr	r0, [pc, #8]	; (8002d80 <TIM2_IRQHandler+0x10>)
 8002d76:	f002 fd38 	bl	80057ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000d18 	.word	0x20000d18

08002d84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_TIM_Base_Stop_IT(&htim3);
	runFlag = COUNT_FRONT;		// Сработал таймер сброса таймера захвата, начинаем измерение.
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <TIM3_IRQHandler+0x14>)
 8002d8a:	221c      	movs	r2, #28
 8002d8c:	601a      	str	r2, [r3, #0]
	//LED_PULSE
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d8e:	4803      	ldr	r0, [pc, #12]	; (8002d9c <TIM3_IRQHandler+0x18>)
 8002d90:	f002 fd2b 	bl	80057ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200003a0 	.word	0x200003a0
 8002d9c:	20000c40 	.word	0x20000c40

08002da0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b092      	sub	sp, #72	; 0x48
 8002da4:	af00      	add	r7, sp, #0
	#else
	double Vm[3];
	uint8_t countV;
	#endif
	#ifdef SYSTICK_DISABLE
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8002da6:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <TIM4_IRQHandler+0x228>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a87      	ldr	r2, [pc, #540]	; (8002fc8 <TIM4_IRQHandler+0x228>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6013      	str	r3, [r2, #0]
	#endif

		front_sum = 0;
 8002db2:	4b86      	ldr	r3, [pc, #536]	; (8002fcc <TIM4_IRQHandler+0x22c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
		runFlag = 0;
 8002db8:	4b85      	ldr	r3, [pc, #532]	; (8002fd0 <TIM4_IRQHandler+0x230>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4884      	ldr	r0, [pc, #528]	; (8002fd4 <TIM4_IRQHandler+0x234>)
 8002dc2:	f002 fa4f 	bl	8005264 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	4882      	ldr	r0, [pc, #520]	; (8002fd4 <TIM4_IRQHandler+0x234>)
 8002dca:	f002 fa4b 	bl	8005264 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8002dce:	2108      	movs	r1, #8
 8002dd0:	4880      	ldr	r0, [pc, #512]	; (8002fd4 <TIM4_IRQHandler+0x234>)
 8002dd2:	f002 fa47 	bl	8005264 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8002dd6:	210c      	movs	r1, #12
 8002dd8:	487e      	ldr	r0, [pc, #504]	; (8002fd4 <TIM4_IRQHandler+0x234>)
 8002dda:	f002 fa43 	bl	8005264 <HAL_TIM_OC_Stop>

		/* Отключим все мультиплексоры */
		receiversOff
 8002dde:	4b7e      	ldr	r3, [pc, #504]	; (8002fd8 <TIM4_IRQHandler+0x238>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4a7d      	ldr	r2, [pc, #500]	; (8002fd8 <TIM4_IRQHandler+0x238>)
 8002de4:	f043 031e 	orr.w	r3, r3, #30
 8002de8:	60d3      	str	r3, [r2, #12]
		STOP_CAPTURE	// If not stop in callback.
 8002dea:	2100      	movs	r1, #0
 8002dec:	487b      	ldr	r0, [pc, #492]	; (8002fdc <TIM4_IRQHandler+0x23c>)
 8002dee:	f002 fbfb 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
 8002df2:	2104      	movs	r1, #4
 8002df4:	4879      	ldr	r0, [pc, #484]	; (8002fdc <TIM4_IRQHandler+0x23c>)
 8002df6:	f002 fbf7 	bl	80055e8 <HAL_TIM_IC_Stop_IT>
		/* Set all timer channels for output mode */
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002dfa:	4b79      	ldr	r3, [pc, #484]	; (8002fe0 <TIM4_IRQHandler+0x240>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8002dfe:	f423 436e 	bic.w	r3, r3, #60928	; 0xee00
 8002e02:	f023 03ee 	bic.w	r3, r3, #238	; 0xee
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002e06:	4a76      	ldr	r2, [pc, #472]	; (8002fe0 <TIM4_IRQHandler+0x240>)
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8002e08:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8002e0c:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002e10:	6053      	str	r3, [r2, #4]

		/* Управление циклом опроса */
		if (currentMode >= CHANNELS) {
 8002e12:	4b74      	ldr	r3, [pc, #464]	; (8002fe4 <TIM4_IRQHandler+0x244>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d908      	bls.n	8002e2c <TIM4_IRQHandler+0x8c>
			currentMode = 0;
 8002e1a:	4b72      	ldr	r3, [pc, #456]	; (8002fe4 <TIM4_IRQHandler+0x244>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	801a      	strh	r2, [r3, #0]
			measCount++;  // Следующее измерение.
 8002e20:	4b71      	ldr	r3, [pc, #452]	; (8002fe8 <TIM4_IRQHandler+0x248>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	4b6f      	ldr	r3, [pc, #444]	; (8002fe8 <TIM4_IRQHandler+0x248>)
 8002e2a:	801a      	strh	r2, [r3, #0]
		}
		//LED_PULSE
		if ((measCount == MEASSURE_COUNT) && (calibrateMode == 0)) {
 8002e2c:	4b6e      	ldr	r3, [pc, #440]	; (8002fe8 <TIM4_IRQHandler+0x248>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	2b64      	cmp	r3, #100	; 0x64
 8002e32:	f040 833f 	bne.w	80034b4 <TIM4_IRQHandler+0x714>
 8002e36:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <TIM4_IRQHandler+0x24c>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 833a 	bne.w	80034b4 <TIM4_IRQHandler+0x714>
			//LED_PULSE
			#ifdef SYSTICK_DISABLE
			SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <TIM4_IRQHandler+0x228>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a60      	ldr	r2, [pc, #384]	; (8002fc8 <TIM4_IRQHandler+0x228>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6013      	str	r3, [r2, #0]
			#endif
			HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 8002e4c:	4868      	ldr	r0, [pc, #416]	; (8002ff0 <TIM4_IRQHandler+0x250>)
 8002e4e:	f002 f8e1 	bl	8005014 <HAL_TIM_Base_Stop_IT>
			Vmax = 0;
 8002e52:	4968      	ldr	r1, [pc, #416]	; (8002ff4 <TIM4_IRQHandler+0x254>)
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9c1 2300 	strd	r2, r3, [r1]
			Xmax = 0;
 8002e60:	4965      	ldr	r1, [pc, #404]	; (8002ff8 <TIM4_IRQHandler+0x258>)
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9c1 2300 	strd	r2, r3, [r1]
			Ymax = 0;
 8002e6e:	4963      	ldr	r1, [pc, #396]	; (8002ffc <TIM4_IRQHandler+0x25c>)
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum1 = 0;
 8002e7c:	4960      	ldr	r1, [pc, #384]	; (8003000 <TIM4_IRQHandler+0x260>)
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum1 = 0;
 8002e8a:	495e      	ldr	r1, [pc, #376]	; (8003004 <TIM4_IRQHandler+0x264>)
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9c1 2300 	strd	r2, r3, [r1]
			#ifdef MEDIAN_FILTER_ENABLE
			/* Фильтр для всех значений */
			X1m[0] = 0; X1m[1] = 0; X1m[2] = 0; countX1 = 0;
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			Y1m[0] = 0; Y1m[1] = 0; Y1m[2] = 0; countY1 = 0;
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	e9c7 2300 	strd	r2, r3, [r7]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			#else
			/* Фильтр только для максимальной скорости */
			Vm[0] = 0; Vm[1] = 0; Vm[2] = 0; countV = 0;
			#endif
			//LED_PULSE
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 8002eec:	2300      	movs	r3, #0
 8002eee:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef0:	e1cf      	b.n	8003292 <TIM4_IRQHandler+0x4f2>
				// Медианный фильтр для X
				#ifdef MEDIAN_FILTER_ENABLE
				X1m[countX1] = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
 8002ef2:	4a45      	ldr	r2, [pc, #276]	; (8003008 <TIM4_IRQHandler+0x268>)
 8002ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002efa:	4a44      	ldr	r2, [pc, #272]	; (800300c <TIM4_IRQHandler+0x26c>)
 8002efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f02:	4a43      	ldr	r2, [pc, #268]	; (8003010 <TIM4_IRQHandler+0x270>)
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fecb 	bl	8000ca4 <__aeabi_fmul>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4619      	mov	r1, r3
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7fd fdbc 	bl	8000a90 <__aeabi_fsub>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fa82 	bl	8000428 <__aeabi_f2d>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	00e1      	lsls	r1, r4, #3
 8002f2a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002f2e:	4401      	add	r1, r0
 8002f30:	3930      	subs	r1, #48	; 0x30
 8002f32:	e9c1 2300 	strd	r2, r3, [r1]
				if (++countX1 >= 3) countX1 = 0;
 8002f36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002f40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <TIM4_IRQHandler+0x1ae>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				XX1 = (X1m[0] < X1m[1]) ? ((X1m[1] < X1m[2]) ? X1m[1] : ((X1m[2] < X1m[0]) ? X1m[0] : X1m[2])) : ((X1m[0] < X1m[2]) ? X1m[0] : ((X1m[2] < X1m[1]) ? X1m[1] : X1m[2]));
 8002f4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f56:	f7fd fd31 	bl	80009bc <__aeabi_dcmplt>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01a      	beq.n	8002f96 <TIM4_IRQHandler+0x1f6>
 8002f60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f68:	f7fd fd28 	bl	80009bc <__aeabi_dcmplt>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <TIM4_IRQHandler+0x1d8>
 8002f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f76:	e04f      	b.n	8003018 <TIM4_IRQHandler+0x278>
 8002f78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f80:	f7fd fd1c 	bl	80009bc <__aeabi_dcmplt>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <TIM4_IRQHandler+0x1f0>
 8002f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f8e:	e043      	b.n	8003018 <TIM4_IRQHandler+0x278>
 8002f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f94:	e040      	b.n	8003018 <TIM4_IRQHandler+0x278>
 8002f96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f9e:	f7fd fd0d 	bl	80009bc <__aeabi_dcmplt>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <TIM4_IRQHandler+0x20e>
 8002fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fac:	e034      	b.n	8003018 <TIM4_IRQHandler+0x278>
 8002fae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fb6:	f7fd fd01 	bl	80009bc <__aeabi_dcmplt>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d029      	beq.n	8003014 <TIM4_IRQHandler+0x274>
 8002fc0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fc4:	e028      	b.n	8003018 <TIM4_IRQHandler+0x278>
 8002fc6:	bf00      	nop
 8002fc8:	e000e010 	.word	0xe000e010
 8002fcc:	2000038c 	.word	0x2000038c
 8002fd0:	200003a0 	.word	0x200003a0
 8002fd4:	20000cd0 	.word	0x20000cd0
 8002fd8:	40010c00 	.word	0x40010c00
 8002fdc:	20000d18 	.word	0x20000d18
 8002fe0:	40010800 	.word	0x40010800
 8002fe4:	200006e6 	.word	0x200006e6
 8002fe8:	20000320 	.word	0x20000320
 8002fec:	20000884 	.word	0x20000884
 8002ff0:	20000b90 	.word	0x20000b90
 8002ff4:	20000318 	.word	0x20000318
 8002ff8:	20000330 	.word	0x20000330
 8002ffc:	200006e8 	.word	0x200006e8
 8003000:	20000338 	.word	0x20000338
 8003004:	20000358 	.word	0x20000358
 8003008:	20000554 	.word	0x20000554
 800300c:	200006f0 	.word	0x200006f0
 8003010:	200002e8 	.word	0x200002e8
 8003014:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003018:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				#else
				XX1 = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
				#endif
				Xsum1 = Xsum1 + XX1;
 800301c:	4b3a      	ldr	r3, [pc, #232]	; (8003108 <TIM4_IRQHandler+0x368>)
 800301e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003022:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003026:	f7fd f8a1 	bl	800016c <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4936      	ldr	r1, [pc, #216]	; (8003108 <TIM4_IRQHandler+0x368>)
 8003030:	e9c1 2300 	strd	r2, r3, [r1]

				// Медианный фильтр для Y
				#ifdef MEDIAN_FILTER_ENABLE
				Y1m[countY1] = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
 8003034:	4a35      	ldr	r2, [pc, #212]	; (800310c <TIM4_IRQHandler+0x36c>)
 8003036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003038:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800303c:	4a34      	ldr	r2, [pc, #208]	; (8003110 <TIM4_IRQHandler+0x370>)
 800303e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003044:	4a33      	ldr	r2, [pc, #204]	; (8003114 <TIM4_IRQHandler+0x374>)
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fe2a 	bl	8000ca4 <__aeabi_fmul>
 8003050:	4603      	mov	r3, r0
 8003052:	4619      	mov	r1, r3
 8003054:	4620      	mov	r0, r4
 8003056:	f7fd fd1b 	bl	8000a90 <__aeabi_fsub>
 800305a:	4603      	mov	r3, r0
 800305c:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd f9e1 	bl	8000428 <__aeabi_f2d>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	00e1      	lsls	r1, r4, #3
 800306c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003070:	4401      	add	r1, r0
 8003072:	3948      	subs	r1, #72	; 0x48
 8003074:	e9c1 2300 	strd	r2, r3, [r1]
				if (++countY1 >= 3) countY1 = 0;
 8003078:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800307c:	3301      	adds	r3, #1
 800307e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003082:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003086:	2b02      	cmp	r3, #2
 8003088:	d902      	bls.n	8003090 <TIM4_IRQHandler+0x2f0>
 800308a:	2300      	movs	r3, #0
 800308c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				YY1 = (Y1m[0] < Y1m[1]) ? ((Y1m[1] < Y1m[2]) ? Y1m[1] : ((Y1m[2] < Y1m[0]) ? Y1m[0] : Y1m[2])) : ((Y1m[0] < Y1m[2]) ? Y1m[0] : ((Y1m[2] < Y1m[1]) ? Y1m[1] : Y1m[2]));
 8003090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003098:	f7fd fc90 	bl	80009bc <__aeabi_dcmplt>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01a      	beq.n	80030d8 <TIM4_IRQHandler+0x338>
 80030a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030aa:	f7fd fc87 	bl	80009bc <__aeabi_dcmplt>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <TIM4_IRQHandler+0x31a>
 80030b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030b8:	e030      	b.n	800311c <TIM4_IRQHandler+0x37c>
 80030ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030c2:	f7fd fc7b 	bl	80009bc <__aeabi_dcmplt>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <TIM4_IRQHandler+0x332>
 80030cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030d0:	e024      	b.n	800311c <TIM4_IRQHandler+0x37c>
 80030d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030d6:	e021      	b.n	800311c <TIM4_IRQHandler+0x37c>
 80030d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030e0:	f7fd fc6c 	bl	80009bc <__aeabi_dcmplt>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <TIM4_IRQHandler+0x350>
 80030ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ee:	e015      	b.n	800311c <TIM4_IRQHandler+0x37c>
 80030f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030f8:	f7fd fc60 	bl	80009bc <__aeabi_dcmplt>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <TIM4_IRQHandler+0x378>
 8003102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003106:	e009      	b.n	800311c <TIM4_IRQHandler+0x37c>
 8003108:	20000338 	.word	0x20000338
 800310c:	200003b4 	.word	0x200003b4
 8003110:	20000890 	.word	0x20000890
 8003114:	200002f8 	.word	0x200002f8
 8003118:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800311c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				#else
				YY1 = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
				#endif
				Ysum1 = Ysum1 + YY1;
 8003120:	4baf      	ldr	r3, [pc, #700]	; (80033e0 <TIM4_IRQHandler+0x640>)
 8003122:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003126:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800312a:	f7fd f81f 	bl	800016c <__adddf3>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	49ab      	ldr	r1, [pc, #684]	; (80033e0 <TIM4_IRQHandler+0x640>)
 8003134:	e9c1 2300 	strd	r2, r3, [r1]

				X = XX1;
 8003138:	49aa      	ldr	r1, [pc, #680]	; (80033e4 <TIM4_IRQHandler+0x644>)
 800313a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800313e:	e9c1 2300 	strd	r2, r3, [r1]
				Y = YY1;
 8003142:	49a9      	ldr	r1, [pc, #676]	; (80033e8 <TIM4_IRQHandler+0x648>)
 8003144:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003148:	e9c1 2300 	strd	r2, r3, [r1]
				V = sqrt(pow(X, 2) + pow(Y, 2));
 800314c:	4ba5      	ldr	r3, [pc, #660]	; (80033e4 <TIM4_IRQHandler+0x644>)
 800314e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800315a:	f006 fcfd 	bl	8009b58 <pow>
 800315e:	4604      	mov	r4, r0
 8003160:	460d      	mov	r5, r1
 8003162:	4ba1      	ldr	r3, [pc, #644]	; (80033e8 <TIM4_IRQHandler+0x648>)
 8003164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003170:	f006 fcf2 	bl	8009b58 <pow>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4620      	mov	r0, r4
 800317a:	4629      	mov	r1, r5
 800317c:	f7fc fff6 	bl	800016c <__adddf3>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	f006 fd92 	bl	8009cb0 <sqrt>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4996      	ldr	r1, [pc, #600]	; (80033ec <TIM4_IRQHandler+0x64c>)
 8003192:	e9c1 2300 	strd	r2, r3, [r1]
				Vm[countV] = V;
				if (++countV >= 3) countV = 0;
				V = (Vm[0] < Vm[1]) ? ((Vm[1] < Vm[2]) ? Vm[1] : ((Vm[2] < Vm[0]) ? Vm[0] : Vm[2])) : ((Vm[0] < Vm[2]) ? Vm[0] : ((Vm[2] < Vm[1]) ? Vm[1] : Vm[2]));
				#endif

				if ( V > Vmax) {
 8003196:	4b95      	ldr	r3, [pc, #596]	; (80033ec <TIM4_IRQHandler+0x64c>)
 8003198:	e9d3 0100 	ldrd	r0, r1, [r3]
 800319c:	4b94      	ldr	r3, [pc, #592]	; (80033f0 <TIM4_IRQHandler+0x650>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f7fd fc29 	bl	80009f8 <__aeabi_dcmpgt>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <TIM4_IRQHandler+0x418>
					Vmax = V;
 80031ac:	4b8f      	ldr	r3, [pc, #572]	; (80033ec <TIM4_IRQHandler+0x64c>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	498f      	ldr	r1, [pc, #572]	; (80033f0 <TIM4_IRQHandler+0x650>)
 80031b4:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(X) > Xmax) {
 80031b8:	4b8a      	ldr	r3, [pc, #552]	; (80033e4 <TIM4_IRQHandler+0x644>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f7fd fc39 	bl	8000a38 <__aeabi_d2iz>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bfb8      	it	lt
 80031cc:	425b      	neglt	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f918 	bl	8000404 <__aeabi_i2d>
 80031d4:	4b87      	ldr	r3, [pc, #540]	; (80033f4 <TIM4_IRQHandler+0x654>)
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f7fd fc0d 	bl	80009f8 <__aeabi_dcmpgt>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <TIM4_IRQHandler+0x46a>
					Xmax = abs(X);
 80031e4:	4b7f      	ldr	r3, [pc, #508]	; (80033e4 <TIM4_IRQHandler+0x644>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	f7fd fc23 	bl	8000a38 <__aeabi_d2iz>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bfb8      	it	lt
 80031f8:	425b      	neglt	r3, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f902 	bl	8000404 <__aeabi_i2d>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	497b      	ldr	r1, [pc, #492]	; (80033f4 <TIM4_IRQHandler+0x654>)
 8003206:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(Y) > Ymax) {
 800320a:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <TIM4_IRQHandler+0x648>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fc10 	bl	8000a38 <__aeabi_d2iz>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	bfb8      	it	lt
 800321e:	425b      	neglt	r3, r3
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd f8ef 	bl	8000404 <__aeabi_i2d>
 8003226:	4b74      	ldr	r3, [pc, #464]	; (80033f8 <TIM4_IRQHandler+0x658>)
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f7fd fbe4 	bl	80009f8 <__aeabi_dcmpgt>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d012      	beq.n	800325c <TIM4_IRQHandler+0x4bc>
					Ymax = abs(Y);
 8003236:	4b6c      	ldr	r3, [pc, #432]	; (80033e8 <TIM4_IRQHandler+0x648>)
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	f7fd fbfa 	bl	8000a38 <__aeabi_d2iz>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	bfb8      	it	lt
 800324a:	425b      	neglt	r3, r3
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd f8d9 	bl	8000404 <__aeabi_i2d>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4968      	ldr	r1, [pc, #416]	; (80033f8 <TIM4_IRQHandler+0x658>)
 8003258:	e9c1 2300 	strd	r2, r3, [r1]
				}
				resul_arrayX1[ii] = 0;
 800325c:	4a67      	ldr	r2, [pc, #412]	; (80033fc <TIM4_IRQHandler+0x65c>)
 800325e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003260:	f04f 0100 	mov.w	r1, #0
 8003264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayX2[ii] = 0;
 8003268:	4a65      	ldr	r2, [pc, #404]	; (8003400 <TIM4_IRQHandler+0x660>)
 800326a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY1[ii] = 0;
 8003274:	4a63      	ldr	r2, [pc, #396]	; (8003404 <TIM4_IRQHandler+0x664>)
 8003276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY2[ii] = 0;
 8003280:	4a61      	ldr	r2, [pc, #388]	; (8003408 <TIM4_IRQHandler+0x668>)
 8003282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 800328c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328e:	3301      	adds	r3, #1
 8003290:	643b      	str	r3, [r7, #64]	; 0x40
 8003292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003294:	2b63      	cmp	r3, #99	; 0x63
 8003296:	f77f ae2c 	ble.w	8002ef2 <TIM4_IRQHandler+0x152>
			}
			Xsum = Xsum1;
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <TIM4_IRQHandler+0x66c>)
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	495b      	ldr	r1, [pc, #364]	; (8003410 <TIM4_IRQHandler+0x670>)
 80032a2:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по X
 80032a6:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <TIM4_IRQHandler+0x670>)
 80032a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	4b58      	ldr	r3, [pc, #352]	; (8003414 <TIM4_IRQHandler+0x674>)
 80032b2:	f7fd fa3b 	bl	800072c <__aeabi_ddiv>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4955      	ldr	r1, [pc, #340]	; (8003410 <TIM4_IRQHandler+0x670>)
 80032bc:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / SPEED_CALIBRATE;	// Скорость по X
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <TIM4_IRQHandler+0x670>)
 80032c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032c6:	a344      	add	r3, pc, #272	; (adr r3, 80033d8 <TIM4_IRQHandler+0x638>)
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f7fd fa2e 	bl	800072c <__aeabi_ddiv>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	494e      	ldr	r1, [pc, #312]	; (8003410 <TIM4_IRQHandler+0x670>)
 80032d6:	e9c1 2300 	strd	r2, r3, [r1]

			Ysum = Ysum1;
 80032da:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <TIM4_IRQHandler+0x640>)
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <TIM4_IRQHandler+0x678>)
 80032e2:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по Y
 80032e6:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <TIM4_IRQHandler+0x678>)
 80032e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	4b48      	ldr	r3, [pc, #288]	; (8003414 <TIM4_IRQHandler+0x674>)
 80032f2:	f7fd fa1b 	bl	800072c <__aeabi_ddiv>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4947      	ldr	r1, [pc, #284]	; (8003418 <TIM4_IRQHandler+0x678>)
 80032fc:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / SPEED_CALIBRATE;	// Скорость по Y
 8003300:	4b45      	ldr	r3, [pc, #276]	; (8003418 <TIM4_IRQHandler+0x678>)
 8003302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003306:	a334      	add	r3, pc, #208	; (adr r3, 80033d8 <TIM4_IRQHandler+0x638>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f7fd fa0e 	bl	800072c <__aeabi_ddiv>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4940      	ldr	r1, [pc, #256]	; (8003418 <TIM4_IRQHandler+0x678>)
 8003316:	e9c1 2300 	strd	r2, r3, [r1]

			Vmaxfin = Vmax / SPEED_CALIBRATE;	// Максимальная скорость за время MEASSURE_COUNT
 800331a:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <TIM4_IRQHandler+0x650>)
 800331c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003320:	a32d      	add	r3, pc, #180	; (adr r3, 80033d8 <TIM4_IRQHandler+0x638>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f7fd fa01 	bl	800072c <__aeabi_ddiv>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	493b      	ldr	r1, [pc, #236]	; (800341c <TIM4_IRQHandler+0x67c>)
 8003330:	e9c1 2300 	strd	r2, r3, [r1]
			Xmaxfin = Xmax / SPEED_CALIBRATE;
 8003334:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <TIM4_IRQHandler+0x654>)
 8003336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800333a:	a327      	add	r3, pc, #156	; (adr r3, 80033d8 <TIM4_IRQHandler+0x638>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f7fd f9f4 	bl	800072c <__aeabi_ddiv>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4935      	ldr	r1, [pc, #212]	; (8003420 <TIM4_IRQHandler+0x680>)
 800334a:	e9c1 2300 	strd	r2, r3, [r1]
			Ymaxfin = Ymax / SPEED_CALIBRATE;
 800334e:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <TIM4_IRQHandler+0x658>)
 8003350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003354:	a320      	add	r3, pc, #128	; (adr r3, 80033d8 <TIM4_IRQHandler+0x638>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f7fd f9e7 	bl	800072c <__aeabi_ddiv>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4930      	ldr	r1, [pc, #192]	; (8003424 <TIM4_IRQHandler+0x684>)
 8003364:	e9c1 2300 	strd	r2, r3, [r1]
			V = sqrt(pow(Xsum, 2) + pow(Ysum, 2));  // Скалярное значение скорости
 8003368:	4b29      	ldr	r3, [pc, #164]	; (8003410 <TIM4_IRQHandler+0x670>)
 800336a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003376:	f006 fbef 	bl	8009b58 <pow>
 800337a:	4604      	mov	r4, r0
 800337c:	460d      	mov	r5, r1
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <TIM4_IRQHandler+0x678>)
 8003380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800338c:	f006 fbe4 	bl	8009b58 <pow>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4620      	mov	r0, r4
 8003396:	4629      	mov	r1, r5
 8003398:	f7fc fee8 	bl	800016c <__adddf3>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	f006 fc84 	bl	8009cb0 <sqrt>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	490f      	ldr	r1, [pc, #60]	; (80033ec <TIM4_IRQHandler+0x64c>)
 80033ae:	e9c1 2300 	strd	r2, r3, [r1]
			if ( V == 0) {
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <TIM4_IRQHandler+0x64c>)
 80033b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	f7fd faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d033      	beq.n	8003432 <TIM4_IRQHandler+0x692>
			  A = 0;
 80033ca:	4917      	ldr	r1, [pc, #92]	; (8003428 <TIM4_IRQHandler+0x688>)
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	e02a      	b.n	800342c <TIM4_IRQHandler+0x68c>
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000
 80033dc:	40476f5c 	.word	0x40476f5c
 80033e0:	20000358 	.word	0x20000358
 80033e4:	20000b30 	.word	0x20000b30
 80033e8:	20000348 	.word	0x20000348
 80033ec:	20000398 	.word	0x20000398
 80033f0:	20000318 	.word	0x20000318
 80033f4:	20000330 	.word	0x20000330
 80033f8:	200006e8 	.word	0x200006e8
 80033fc:	20000554 	.word	0x20000554
 8003400:	200006f0 	.word	0x200006f0
 8003404:	200003b4 	.word	0x200003b4
 8003408:	20000890 	.word	0x20000890
 800340c:	20000338 	.word	0x20000338
 8003410:	200003a8 	.word	0x200003a8
 8003414:	40590000 	.word	0x40590000
 8003418:	200002f0 	.word	0x200002f0
 800341c:	20000300 	.word	0x20000300
 8003420:	20000888 	.word	0x20000888
 8003424:	20000548 	.word	0x20000548
 8003428:	20000328 	.word	0x20000328
 800342c:	e9c1 2300 	strd	r2, r3, [r1]
 8003430:	e039      	b.n	80034a6 <TIM4_IRQHandler+0x706>
			} else {
				A = acos( Ysum / V ) * 180 / 3.1415926; // Угол
 8003432:	4b6f      	ldr	r3, [pc, #444]	; (80035f0 <TIM4_IRQHandler+0x850>)
 8003434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003438:	4b6e      	ldr	r3, [pc, #440]	; (80035f4 <TIM4_IRQHandler+0x854>)
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f7fd f975 	bl	800072c <__aeabi_ddiv>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	f006 fb57 	bl	8009afc <acos>
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	4b69      	ldr	r3, [pc, #420]	; (80035f8 <TIM4_IRQHandler+0x858>)
 8003454:	f7fd f840 	bl	80004d8 <__aeabi_dmul>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	a361      	add	r3, pc, #388	; (adr r3, 80035e8 <TIM4_IRQHandler+0x848>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f7fd f961 	bl	800072c <__aeabi_ddiv>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4963      	ldr	r1, [pc, #396]	; (80035fc <TIM4_IRQHandler+0x85c>)
 8003470:	e9c1 2300 	strd	r2, r3, [r1]
				if (Xsum < 0) {
 8003474:	4b62      	ldr	r3, [pc, #392]	; (8003600 <TIM4_IRQHandler+0x860>)
 8003476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	f7fd fa9b 	bl	80009bc <__aeabi_dcmplt>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00c      	beq.n	80034a6 <TIM4_IRQHandler+0x706>
					A = 360 - A; // III, IV квадранты
 800348c:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <TIM4_IRQHandler+0x85c>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	495b      	ldr	r1, [pc, #364]	; (8003604 <TIM4_IRQHandler+0x864>)
 8003498:	f7fc fe66 	bl	8000168 <__aeabi_dsub>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4956      	ldr	r1, [pc, #344]	; (80035fc <TIM4_IRQHandler+0x85c>)
 80034a2:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			measCount = 0;
 80034a6:	4b58      	ldr	r3, [pc, #352]	; (8003608 <TIM4_IRQHandler+0x868>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	801a      	strh	r2, [r3, #0]
			readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 80034ac:	4b57      	ldr	r3, [pc, #348]	; (800360c <TIM4_IRQHandler+0x86c>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e08f      	b.n	80035d4 <TIM4_IRQHandler+0x834>
		} else {
			if ((calibrateMode > 0) && (measCount == 1)) {  // Режим калибровки/тестирования
 80034b4:	4b56      	ldr	r3, [pc, #344]	; (8003610 <TIM4_IRQHandler+0x870>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <TIM4_IRQHandler+0x744>
 80034bc:	4b52      	ldr	r3, [pc, #328]	; (8003608 <TIM4_IRQHandler+0x868>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10f      	bne.n	80034e4 <TIM4_IRQHandler+0x744>
				HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 80034c4:	4853      	ldr	r0, [pc, #332]	; (8003614 <TIM4_IRQHandler+0x874>)
 80034c6:	f001 fda5 	bl	8005014 <HAL_TIM_Base_Stop_IT>
				measCount = 0;
 80034ca:	4b4f      	ldr	r3, [pc, #316]	; (8003608 <TIM4_IRQHandler+0x868>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	801a      	strh	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
					SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 80034d0:	4b51      	ldr	r3, [pc, #324]	; (8003618 <TIM4_IRQHandler+0x878>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a50      	ldr	r2, [pc, #320]	; (8003618 <TIM4_IRQHandler+0x878>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6013      	str	r3, [r2, #0]
				#endif
				readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 80034dc:	4b4b      	ldr	r3, [pc, #300]	; (800360c <TIM4_IRQHandler+0x86c>)
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e077      	b.n	80035d4 <TIM4_IRQHandler+0x834>
			} else {
				switch (currentMode++) {
 80034e4:	4b4d      	ldr	r3, [pc, #308]	; (800361c <TIM4_IRQHandler+0x87c>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	b291      	uxth	r1, r2
 80034ec:	4a4b      	ldr	r2, [pc, #300]	; (800361c <TIM4_IRQHandler+0x87c>)
 80034ee:	8011      	strh	r1, [r2, #0]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d867      	bhi.n	80035c4 <TIM4_IRQHandler+0x824>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <TIM4_IRQHandler+0x75c>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	0800350d 	.word	0x0800350d
 8003500:	0800353b 	.word	0x0800353b
 8003504:	08003569 	.word	0x08003569
 8003508:	08003597 	.word	0x08003597
					case 0: { 					// Z1 (transmit) > Z3 (receive) Y1
						//LED_PULSE
						TIM3->ARR = C_1; 		// Коррекция для таймера запуска измерения Z13, Z31
 800350c:	4b44      	ldr	r3, [pc, #272]	; (8003620 <TIM4_IRQHandler+0x880>)
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	4b44      	ldr	r3, [pc, #272]	; (8003624 <TIM4_IRQHandler+0x884>)
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ3receive 			// Turn on multiplexer for input Z2 channel.
 8003514:	4b44      	ldr	r3, [pc, #272]	; (8003628 <TIM4_IRQHandler+0x888>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a43      	ldr	r2, [pc, #268]	; (8003628 <TIM4_IRQHandler+0x888>)
 800351a:	f023 0308 	bic.w	r3, r3, #8
 800351e:	60d3      	str	r3, [r2, #12]
 8003520:	4b42      	ldr	r3, [pc, #264]	; (800362c <TIM4_IRQHandler+0x88c>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003528:	4a40      	ldr	r2, [pc, #256]	; (800362c <TIM4_IRQHandler+0x88c>)
 800352a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800352e:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1); // Генерация для пьезокристалла в 1 канале
 8003530:	2100      	movs	r1, #0
 8003532:	483f      	ldr	r0, [pc, #252]	; (8003630 <TIM4_IRQHandler+0x890>)
 8003534:	f001 fdf4 	bl	8005120 <HAL_TIM_OC_Start>
						break;
 8003538:	e044      	b.n	80035c4 <TIM4_IRQHandler+0x824>
					}
					case 1: { 					// Z3 (transmit) > Z1 (receive) Y2
						//LED_PULSE
						TIM3->ARR = C_4; 		// Коррекция для таймера запуска измерения Z24, Z42
 800353a:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <TIM4_IRQHandler+0x894>)
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	4b39      	ldr	r3, [pc, #228]	; (8003624 <TIM4_IRQHandler+0x884>)
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ1receive 			// Turn on multiplexer for input Z1 channel.
 8003542:	4b39      	ldr	r3, [pc, #228]	; (8003628 <TIM4_IRQHandler+0x888>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4a38      	ldr	r2, [pc, #224]	; (8003628 <TIM4_IRQHandler+0x888>)
 8003548:	f023 0302 	bic.w	r3, r3, #2
 800354c:	60d3      	str	r3, [r2, #12]
 800354e:	4b37      	ldr	r3, [pc, #220]	; (800362c <TIM4_IRQHandler+0x88c>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f023 030f 	bic.w	r3, r3, #15
 8003556:	4a35      	ldr	r2, [pc, #212]	; (800362c <TIM4_IRQHandler+0x88c>)
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // Генерация для пьезокристалла в 3 канале
 800355e:	2108      	movs	r1, #8
 8003560:	4833      	ldr	r0, [pc, #204]	; (8003630 <TIM4_IRQHandler+0x890>)
 8003562:	f001 fddd 	bl	8005120 <HAL_TIM_OC_Start>
						break;
 8003566:	e02d      	b.n	80035c4 <TIM4_IRQHandler+0x824>
					}
					case 2: { 					// Z2 (transmit) > Z4 (receive) X1
						//LED_PULSE
						TIM3->ARR = C_2; 		// Коррекция для таймера запуска измерения Z13, Z31
 8003568:	4b33      	ldr	r3, [pc, #204]	; (8003638 <TIM4_IRQHandler+0x898>)
 800356a:	881a      	ldrh	r2, [r3, #0]
 800356c:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <TIM4_IRQHandler+0x884>)
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ4receive 			// Turn on multiplexer for input Z4 channel.
 8003570:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <TIM4_IRQHandler+0x888>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a2c      	ldr	r2, [pc, #176]	; (8003628 <TIM4_IRQHandler+0x888>)
 8003576:	f023 0310 	bic.w	r3, r3, #16
 800357a:	60d3      	str	r3, [r2, #12]
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <TIM4_IRQHandler+0x88c>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003584:	4a29      	ldr	r2, [pc, #164]	; (800362c <TIM4_IRQHandler+0x88c>)
 8003586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358a:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);	// Генерация для пьезокристалла в 2 канале
 800358c:	2104      	movs	r1, #4
 800358e:	4828      	ldr	r0, [pc, #160]	; (8003630 <TIM4_IRQHandler+0x890>)
 8003590:	f001 fdc6 	bl	8005120 <HAL_TIM_OC_Start>
						break;
 8003594:	e016      	b.n	80035c4 <TIM4_IRQHandler+0x824>
					}
					case 3: { 					// Z4 (transmit) > Z3 (receive) X2
						//LED_PULSE
						TIM3->ARR = C_3; 		// Коррекция для таймера запуска измерения Z13, Z31
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <TIM4_IRQHandler+0x89c>)
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <TIM4_IRQHandler+0x884>)
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ2receive 			// Turn on multiplexer for input Z3 channel.
 800359e:	4b22      	ldr	r3, [pc, #136]	; (8003628 <TIM4_IRQHandler+0x888>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4a21      	ldr	r2, [pc, #132]	; (8003628 <TIM4_IRQHandler+0x888>)
 80035a4:	f023 0304 	bic.w	r3, r3, #4
 80035a8:	60d3      	str	r3, [r2, #12]
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <TIM4_IRQHandler+0x88c>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b2:	4a1e      	ldr	r2, [pc, #120]	; (800362c <TIM4_IRQHandler+0x88c>)
 80035b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b8:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);	// Генерация для пьезокристалла в 4 канале
 80035ba:	210c      	movs	r1, #12
 80035bc:	481c      	ldr	r0, [pc, #112]	; (8003630 <TIM4_IRQHandler+0x890>)
 80035be:	f001 fdaf 	bl	8005120 <HAL_TIM_OC_Start>
						break;
 80035c2:	bf00      	nop
					}
				}
				/* Запускаем таймер захвата */
				START_CAPTURE
 80035c4:	2100      	movs	r1, #0
 80035c6:	481e      	ldr	r0, [pc, #120]	; (8003640 <TIM4_IRQHandler+0x8a0>)
 80035c8:	f001 ff08 	bl	80053dc <HAL_TIM_IC_Start_IT>
 80035cc:	2104      	movs	r1, #4
 80035ce:	481c      	ldr	r0, [pc, #112]	; (8003640 <TIM4_IRQHandler+0x8a0>)
 80035d0:	f001 ff04 	bl	80053dc <HAL_TIM_IC_Start_IT>
			}
		}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035d4:	480f      	ldr	r0, [pc, #60]	; (8003614 <TIM4_IRQHandler+0x874>)
 80035d6:	f002 f908 	bl	80057ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	3748      	adds	r7, #72	; 0x48
 80035de:	46bd      	mov	sp, r7
 80035e0:	bdb0      	pop	{r4, r5, r7, pc}
 80035e2:	bf00      	nop
 80035e4:	f3af 8000 	nop.w
 80035e8:	4d12d84a 	.word	0x4d12d84a
 80035ec:	400921fb 	.word	0x400921fb
 80035f0:	200002f0 	.word	0x200002f0
 80035f4:	20000398 	.word	0x20000398
 80035f8:	40668000 	.word	0x40668000
 80035fc:	20000328 	.word	0x20000328
 8003600:	200003a8 	.word	0x200003a8
 8003604:	40768000 	.word	0x40768000
 8003608:	20000320 	.word	0x20000320
 800360c:	200002ec 	.word	0x200002ec
 8003610:	20000884 	.word	0x20000884
 8003614:	20000b90 	.word	0x20000b90
 8003618:	e000e010 	.word	0xe000e010
 800361c:	200006e6 	.word	0x200006e6
 8003620:	20000344 	.word	0x20000344
 8003624:	40000400 	.word	0x40000400
 8003628:	40010c00 	.word	0x40010c00
 800362c:	40010800 	.word	0x40010800
 8003630:	20000cd0 	.word	0x20000cd0
 8003634:	20000310 	.word	0x20000310
 8003638:	2000030c 	.word	0x2000030c
 800363c:	200006e4 	.word	0x200006e4
 8003640:	20000d18 	.word	0x20000d18

08003644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
	return 1;
 8003648:	2301      	movs	r3, #1
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <_kill>:

int _kill(int pid, int sig)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800365c:	f003 fb82 	bl	8006d64 <__errno>
 8003660:	4603      	mov	r3, r0
 8003662:	2216      	movs	r2, #22
 8003664:	601a      	str	r2, [r3, #0]
	return -1;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <_exit>:

void _exit (int status)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800367a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ffe7 	bl	8003652 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003684:	e7fe      	b.n	8003684 <_exit+0x12>

08003686 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e00a      	b.n	80036ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003698:	f3af 8000 	nop.w
 800369c:	4601      	mov	r1, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	60ba      	str	r2, [r7, #8]
 80036a4:	b2ca      	uxtb	r2, r1
 80036a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3301      	adds	r3, #1
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	dbf0      	blt.n	8003698 <_read+0x12>
	}

return len;
 80036b6:	687b      	ldr	r3, [r7, #4]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e009      	b.n	80036e6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	60ba      	str	r2, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3301      	adds	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	dbf1      	blt.n	80036d2 <_write+0x12>
	}
	return len;
 80036ee:	687b      	ldr	r3, [r7, #4]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_close>:

int _close(int file)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	return -1;
 8003700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800371e:	605a      	str	r2, [r3, #4]
	return 0;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <_isatty>:

int _isatty(int file)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	return 1;
 8003734:	2301      	movs	r3, #1
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
	return 0;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <_sbrk+0x5c>)
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <_sbrk+0x60>)
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <_sbrk+0x64>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <_sbrk+0x64>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <_sbrk+0x68>)
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <_sbrk+0x64>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	429a      	cmp	r2, r3
 8003786:	d207      	bcs.n	8003798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003788:	f003 faec 	bl	8006d64 <__errno>
 800378c:	4603      	mov	r3, r0
 800378e:	220c      	movs	r2, #12
 8003790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003796:	e009      	b.n	80037ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <_sbrk+0x64>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <_sbrk+0x64>)
 80037a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20005000 	.word	0x20005000
 80037b8:	00000400 	.word	0x00000400
 80037bc:	200002d8 	.word	0x200002d8
 80037c0:	20000da0 	.word	0x20000da0

080037c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037d0:	480c      	ldr	r0, [pc, #48]	; (8003804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037d2:	490d      	ldr	r1, [pc, #52]	; (8003808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037d8:	e002      	b.n	80037e0 <LoopCopyDataInit>

080037da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037de:	3304      	adds	r3, #4

080037e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037e4:	d3f9      	bcc.n	80037da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037e6:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037e8:	4c0a      	ldr	r4, [pc, #40]	; (8003814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037ec:	e001      	b.n	80037f2 <LoopFillZerobss>

080037ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037f0:	3204      	adds	r2, #4

080037f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037f4:	d3fb      	bcc.n	80037ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037f6:	f7ff ffe5 	bl	80037c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037fa:	f003 fab9 	bl	8006d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037fe:	f7fd fdbf 	bl	8001380 <main>
  bx lr
 8003802:	4770      	bx	lr
  ldr r0, =_sdata
 8003804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003808:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800380c:	0800b658 	.word	0x0800b658
  ldr r2, =_sbss
 8003810:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003814:	20000da0 	.word	0x20000da0

08003818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003818:	e7fe      	b.n	8003818 <ADC1_2_IRQHandler>
	...

0800381c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_Init+0x28>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a07      	ldr	r2, [pc, #28]	; (8003844 <HAL_Init+0x28>)
 8003826:	f043 0310 	orr.w	r3, r3, #16
 800382a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800382c:	2003      	movs	r0, #3
 800382e:	f000 f939 	bl	8003aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003832:	2000      	movs	r0, #0
 8003834:	f000 f808 	bl	8003848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003838:	f7ff f874 	bl	8002924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40022000 	.word	0x40022000

08003848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_InitTick+0x54>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_InitTick+0x58>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800385e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f955 	bl	8003b16 <HAL_SYSTICK_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e00e      	b.n	8003894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d80a      	bhi.n	8003892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800387c:	2200      	movs	r2, #0
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003884:	f000 f919 	bl	8003aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003888:	4a06      	ldr	r2, [pc, #24]	; (80038a4 <HAL_InitTick+0x5c>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000000 	.word	0x20000000
 80038a0:	20000008 	.word	0x20000008
 80038a4:	20000004 	.word	0x20000004

080038a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_IncTick+0x1c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_IncTick+0x20>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	4a03      	ldr	r2, [pc, #12]	; (80038c8 <HAL_IncTick+0x20>)
 80038ba:	6013      	str	r3, [r2, #0]
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	20000008 	.word	0x20000008
 80038c8:	20000d68 	.word	0x20000d68

080038cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return uwTick;
 80038d0:	4b02      	ldr	r3, [pc, #8]	; (80038dc <HAL_GetTick+0x10>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	20000d68 	.word	0x20000d68

080038e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038fc:	4013      	ands	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	60d3      	str	r3, [r2, #12]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <__NVIC_GetPriorityGrouping+0x18>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 0307 	and.w	r3, r3, #7
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db0b      	blt.n	800396e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4906      	ldr	r1, [pc, #24]	; (8003978 <__NVIC_EnableIRQ+0x34>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2001      	movs	r0, #1
 8003966:	fa00 f202 	lsl.w	r2, r0, r2
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100

0800397c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db0a      	blt.n	80039a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	490c      	ldr	r1, [pc, #48]	; (80039c8 <__NVIC_SetPriority+0x4c>)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	440b      	add	r3, r1
 80039a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a4:	e00a      	b.n	80039bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4908      	ldr	r1, [pc, #32]	; (80039cc <__NVIC_SetPriority+0x50>)
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	3b04      	subs	r3, #4
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	440b      	add	r3, r1
 80039ba:	761a      	strb	r2, [r3, #24]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	e000e100 	.word	0xe000e100
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f1c3 0307 	rsb	r3, r3, #7
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	bf28      	it	cs
 80039ee:	2304      	movcs	r3, #4
 80039f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d902      	bls.n	8003a00 <NVIC_EncodePriority+0x30>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3b03      	subs	r3, #3
 80039fe:	e000      	b.n	8003a02 <NVIC_EncodePriority+0x32>
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	401a      	ands	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	43d9      	mvns	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a28:	4313      	orrs	r3, r2
         );
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3724      	adds	r7, #36	; 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a38:	f3bf 8f4f 	dsb	sy
}
 8003a3c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <__NVIC_SystemReset+0x24>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003a46:	4904      	ldr	r1, [pc, #16]	; (8003a58 <__NVIC_SystemReset+0x24>)
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <__NVIC_SystemReset+0x28>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a4e:	f3bf 8f4f 	dsb	sy
}
 8003a52:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <__NVIC_SystemReset+0x20>
 8003a58:	e000ed00 	.word	0xe000ed00
 8003a5c:	05fa0004 	.word	0x05fa0004

08003a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a70:	d301      	bcc.n	8003a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00f      	b.n	8003a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <SysTick_Config+0x40>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a7e:	210f      	movs	r1, #15
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a84:	f7ff ff7a 	bl	800397c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <SysTick_Config+0x40>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8e:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <SysTick_Config+0x40>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	e000e010 	.word	0xe000e010

08003aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff17 	bl	80038e0 <__NVIC_SetPriorityGrouping>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003acc:	f7ff ff2c 	bl	8003928 <__NVIC_GetPriorityGrouping>
 8003ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff7a 	bl	80039d0 <NVIC_EncodePriority>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff49 	bl	800397c <__NVIC_SetPriority>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff1f 	bl	8003944 <__NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003b12:	f7ff ff8f 	bl	8003a34 <__NVIC_SystemReset>

08003b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ff9e 	bl	8003a60 <SysTick_Config>
 8003b24:	4603      	mov	r3, r0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_FLASH_Program+0xd8>)
 8003b4c:	7e1b      	ldrb	r3, [r3, #24]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_FLASH_Program+0x26>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e054      	b.n	8003c00 <HAL_FLASH_Program+0xd0>
 8003b56:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <HAL_FLASH_Program+0xd8>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b60:	f000 f8a8 	bl	8003cb4 <FLASH_WaitForLastOperation>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d144      	bne.n	8003bf8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d102      	bne.n	8003b7a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003b74:	2301      	movs	r3, #1
 8003b76:	757b      	strb	r3, [r7, #21]
 8003b78:	e007      	b.n	8003b8a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d102      	bne.n	8003b86 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003b80:	2302      	movs	r3, #2
 8003b82:	757b      	strb	r3, [r7, #21]
 8003b84:	e001      	b.n	8003b8a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003b86:	2304      	movs	r3, #4
 8003b88:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	75bb      	strb	r3, [r7, #22]
 8003b8e:	e02d      	b.n	8003bec <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003b90:	7dbb      	ldrb	r3, [r7, #22]
 8003b92:	005a      	lsls	r2, r3, #1
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	eb02 0c03 	add.w	ip, r2, r3
 8003b9a:	7dbb      	ldrb	r3, [r7, #22]
 8003b9c:	0119      	lsls	r1, r3, #4
 8003b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ba2:	f1c1 0620 	rsb	r6, r1, #32
 8003ba6:	f1a1 0020 	sub.w	r0, r1, #32
 8003baa:	fa22 f401 	lsr.w	r4, r2, r1
 8003bae:	fa03 f606 	lsl.w	r6, r3, r6
 8003bb2:	4334      	orrs	r4, r6
 8003bb4:	fa23 f000 	lsr.w	r0, r3, r0
 8003bb8:	4304      	orrs	r4, r0
 8003bba:	fa23 f501 	lsr.w	r5, r3, r1
 8003bbe:	b2a3      	uxth	r3, r4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4660      	mov	r0, ip
 8003bc4:	f000 f85a 	bl	8003c7c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bcc:	f000 f872 	bl	8003cb4 <FLASH_WaitForLastOperation>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <HAL_FLASH_Program+0xdc>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <HAL_FLASH_Program+0xdc>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d107      	bne.n	8003bf6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003be6:	7dbb      	ldrb	r3, [r7, #22]
 8003be8:	3301      	adds	r3, #1
 8003bea:	75bb      	strb	r3, [r7, #22]
 8003bec:	7dba      	ldrb	r2, [r7, #22]
 8003bee:	7d7b      	ldrb	r3, [r7, #21]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3cd      	bcc.n	8003b90 <HAL_FLASH_Program+0x60>
 8003bf4:	e000      	b.n	8003bf8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003bf6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_FLASH_Program+0xd8>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	761a      	strb	r2, [r3, #24]

  return status;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c08:	20000d70 	.word	0x20000d70
 8003c0c:	40022000 	.word	0x40022000

08003c10 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_FLASH_Unlock+0x40>)
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <HAL_FLASH_Unlock+0x40>)
 8003c28:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <HAL_FLASH_Unlock+0x44>)
 8003c2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_FLASH_Unlock+0x40>)
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <HAL_FLASH_Unlock+0x48>)
 8003c30:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <HAL_FLASH_Unlock+0x40>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003c42:	79fb      	ldrb	r3, [r7, #7]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40022000 	.word	0x40022000
 8003c54:	45670123 	.word	0x45670123
 8003c58:	cdef89ab 	.word	0xcdef89ab

08003c5c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_FLASH_Lock+0x1c>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_FLASH_Lock+0x1c>)
 8003c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40022000 	.word	0x40022000

08003c7c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <FLASH_Program_HalfWord+0x30>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <FLASH_Program_HalfWord+0x34>)
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <FLASH_Program_HalfWord+0x34>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	887a      	ldrh	r2, [r7, #2]
 8003c9e:	801a      	strh	r2, [r3, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000d70 	.word	0x20000d70
 8003cb0:	40022000 	.word	0x40022000

08003cb4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003cbc:	f7ff fe06 	bl	80038cc <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003cc2:	e010      	b.n	8003ce6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cca:	d00c      	beq.n	8003ce6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <FLASH_WaitForLastOperation+0x2e>
 8003cd2:	f7ff fdfb 	bl	80038cc <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d201      	bcs.n	8003ce6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e025      	b.n	8003d32 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <FLASH_WaitForLastOperation+0x88>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e8      	bne.n	8003cc4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <FLASH_WaitForLastOperation+0x88>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <FLASH_WaitForLastOperation+0x88>)
 8003d00:	2220      	movs	r2, #32
 8003d02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <FLASH_WaitForLastOperation+0x88>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <FLASH_WaitForLastOperation+0x88>)
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <FLASH_WaitForLastOperation+0x88>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d28:	f000 f80a 	bl	8003d40 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40022000 	.word	0x40022000

08003d40 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003d4a:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <FLASH_SetErrorCode+0x98>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <FLASH_SetErrorCode+0x9c>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <FLASH_SetErrorCode+0x9c>)
 8003d60:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f043 0310 	orr.w	r3, r3, #16
 8003d68:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <FLASH_SetErrorCode+0x98>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <FLASH_SetErrorCode+0x9c>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <FLASH_SetErrorCode+0x9c>)
 8003d80:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <FLASH_SetErrorCode+0x98>)
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003d96:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <FLASH_SetErrorCode+0x9c>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	4a0f      	ldr	r2, [pc, #60]	; (8003ddc <FLASH_SetErrorCode+0x9c>)
 8003da0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <FLASH_SetErrorCode+0x98>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <FLASH_SetErrorCode+0x98>)
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f240 1201 	movw	r2, #257	; 0x101
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d106      	bne.n	8003dc6 <FLASH_SetErrorCode+0x86>
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <FLASH_SetErrorCode+0x98>)
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <FLASH_SetErrorCode+0x98>)
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	61d3      	str	r3, [r2, #28]
}  
 8003dc4:	e002      	b.n	8003dcc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003dc6:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <FLASH_SetErrorCode+0x98>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	60d3      	str	r3, [r2, #12]
}  
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40022000 	.word	0x40022000
 8003ddc:	20000d70 	.word	0x20000d70

08003de0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_FLASHEx_Erase+0xd0>)
 8003df4:	7e1b      	ldrb	r3, [r3, #24]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_FLASHEx_Erase+0x1e>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e053      	b.n	8003ea6 <HAL_FLASHEx_Erase+0xc6>
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <HAL_FLASHEx_Erase+0xd0>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d116      	bne.n	8003e3a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e10:	f7ff ff50 	bl	8003cb4 <FLASH_WaitForLastOperation>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d141      	bne.n	8003e9e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f000 f84c 	bl	8003eb8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e24:	f7ff ff46 	bl	8003cb4 <FLASH_WaitForLastOperation>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003e2c:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <HAL_FLASHEx_Erase+0xd4>)
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4a20      	ldr	r2, [pc, #128]	; (8003eb4 <HAL_FLASHEx_Erase+0xd4>)
 8003e32:	f023 0304 	bic.w	r3, r3, #4
 8003e36:	6113      	str	r3, [r2, #16]
 8003e38:	e031      	b.n	8003e9e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e3e:	f7ff ff39 	bl	8003cb4 <FLASH_WaitForLastOperation>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d12a      	bne.n	8003e9e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e4e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	e019      	b.n	8003e8c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003e58:	68b8      	ldr	r0, [r7, #8]
 8003e5a:	f000 f849 	bl	8003ef0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e62:	f7ff ff27 	bl	8003cb4 <FLASH_WaitForLastOperation>
 8003e66:	4603      	mov	r3, r0
 8003e68:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <HAL_FLASHEx_Erase+0xd4>)
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <HAL_FLASHEx_Erase+0xd4>)
 8003e70:	f023 0302 	bic.w	r3, r3, #2
 8003e74:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	601a      	str	r2, [r3, #0]
            break;
 8003e82:	e00c      	b.n	8003e9e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	029a      	lsls	r2, r3, #10
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3dc      	bcc.n	8003e58 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <HAL_FLASHEx_Erase+0xd0>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	761a      	strb	r2, [r3, #24]

  return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000d70 	.word	0x20000d70
 8003eb4:	40022000 	.word	0x40022000

08003eb8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <FLASH_MassErase+0x30>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003ec6:	4b09      	ldr	r3, [pc, #36]	; (8003eec <FLASH_MassErase+0x34>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	4a08      	ldr	r2, [pc, #32]	; (8003eec <FLASH_MassErase+0x34>)
 8003ecc:	f043 0304 	orr.w	r3, r3, #4
 8003ed0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <FLASH_MassErase+0x34>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4a05      	ldr	r2, [pc, #20]	; (8003eec <FLASH_MassErase+0x34>)
 8003ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003edc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	20000d70 	.word	0x20000d70
 8003eec:	40022000 	.word	0x40022000

08003ef0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <FLASH_PageErase+0x38>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <FLASH_PageErase+0x3c>)
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <FLASH_PageErase+0x3c>)
 8003f04:	f043 0302 	orr.w	r3, r3, #2
 8003f08:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <FLASH_PageErase+0x3c>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <FLASH_PageErase+0x3c>)
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <FLASH_PageErase+0x3c>)
 8003f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f1a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000d70 	.word	0x20000d70
 8003f2c:	40022000 	.word	0x40022000

08003f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b08b      	sub	sp, #44	; 0x2c
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f42:	e169      	b.n	8004218 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f44:	2201      	movs	r2, #1
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	f040 8158 	bne.w	8004212 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4a9a      	ldr	r2, [pc, #616]	; (80041d0 <HAL_GPIO_Init+0x2a0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d05e      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f6c:	4a98      	ldr	r2, [pc, #608]	; (80041d0 <HAL_GPIO_Init+0x2a0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d875      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003f72:	4a98      	ldr	r2, [pc, #608]	; (80041d4 <HAL_GPIO_Init+0x2a4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d058      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f78:	4a96      	ldr	r2, [pc, #600]	; (80041d4 <HAL_GPIO_Init+0x2a4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d86f      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003f7e:	4a96      	ldr	r2, [pc, #600]	; (80041d8 <HAL_GPIO_Init+0x2a8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d052      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f84:	4a94      	ldr	r2, [pc, #592]	; (80041d8 <HAL_GPIO_Init+0x2a8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d869      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003f8a:	4a94      	ldr	r2, [pc, #592]	; (80041dc <HAL_GPIO_Init+0x2ac>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d04c      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f90:	4a92      	ldr	r2, [pc, #584]	; (80041dc <HAL_GPIO_Init+0x2ac>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d863      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003f96:	4a92      	ldr	r2, [pc, #584]	; (80041e0 <HAL_GPIO_Init+0x2b0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d046      	beq.n	800402a <HAL_GPIO_Init+0xfa>
 8003f9c:	4a90      	ldr	r2, [pc, #576]	; (80041e0 <HAL_GPIO_Init+0x2b0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d85d      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003fa2:	2b12      	cmp	r3, #18
 8003fa4:	d82a      	bhi.n	8003ffc <HAL_GPIO_Init+0xcc>
 8003fa6:	2b12      	cmp	r3, #18
 8003fa8:	d859      	bhi.n	800405e <HAL_GPIO_Init+0x12e>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <HAL_GPIO_Init+0x80>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	0800402b 	.word	0x0800402b
 8003fb4:	08004005 	.word	0x08004005
 8003fb8:	08004017 	.word	0x08004017
 8003fbc:	08004059 	.word	0x08004059
 8003fc0:	0800405f 	.word	0x0800405f
 8003fc4:	0800405f 	.word	0x0800405f
 8003fc8:	0800405f 	.word	0x0800405f
 8003fcc:	0800405f 	.word	0x0800405f
 8003fd0:	0800405f 	.word	0x0800405f
 8003fd4:	0800405f 	.word	0x0800405f
 8003fd8:	0800405f 	.word	0x0800405f
 8003fdc:	0800405f 	.word	0x0800405f
 8003fe0:	0800405f 	.word	0x0800405f
 8003fe4:	0800405f 	.word	0x0800405f
 8003fe8:	0800405f 	.word	0x0800405f
 8003fec:	0800405f 	.word	0x0800405f
 8003ff0:	0800405f 	.word	0x0800405f
 8003ff4:	0800400d 	.word	0x0800400d
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	4a79      	ldr	r2, [pc, #484]	; (80041e4 <HAL_GPIO_Init+0x2b4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004002:	e02c      	b.n	800405e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	623b      	str	r3, [r7, #32]
          break;
 800400a:	e029      	b.n	8004060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	3304      	adds	r3, #4
 8004012:	623b      	str	r3, [r7, #32]
          break;
 8004014:	e024      	b.n	8004060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	3308      	adds	r3, #8
 800401c:	623b      	str	r3, [r7, #32]
          break;
 800401e:	e01f      	b.n	8004060 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	330c      	adds	r3, #12
 8004026:	623b      	str	r3, [r7, #32]
          break;
 8004028:	e01a      	b.n	8004060 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004032:	2304      	movs	r3, #4
 8004034:	623b      	str	r3, [r7, #32]
          break;
 8004036:	e013      	b.n	8004060 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d105      	bne.n	800404c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004040:	2308      	movs	r3, #8
 8004042:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	611a      	str	r2, [r3, #16]
          break;
 800404a:	e009      	b.n	8004060 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800404c:	2308      	movs	r3, #8
 800404e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	615a      	str	r2, [r3, #20]
          break;
 8004056:	e003      	b.n	8004060 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004058:	2300      	movs	r3, #0
 800405a:	623b      	str	r3, [r7, #32]
          break;
 800405c:	e000      	b.n	8004060 <HAL_GPIO_Init+0x130>
          break;
 800405e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2bff      	cmp	r3, #255	; 0xff
 8004064:	d801      	bhi.n	800406a <HAL_GPIO_Init+0x13a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	e001      	b.n	800406e <HAL_GPIO_Init+0x13e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3304      	adds	r3, #4
 800406e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2bff      	cmp	r3, #255	; 0xff
 8004074:	d802      	bhi.n	800407c <HAL_GPIO_Init+0x14c>
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	e002      	b.n	8004082 <HAL_GPIO_Init+0x152>
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	3b08      	subs	r3, #8
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	210f      	movs	r1, #15
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	401a      	ands	r2, r3
 8004094:	6a39      	ldr	r1, [r7, #32]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	fa01 f303 	lsl.w	r3, r1, r3
 800409c:	431a      	orrs	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80b1 	beq.w	8004212 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040b0:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <HAL_GPIO_Init+0x2b8>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	4a4c      	ldr	r2, [pc, #304]	; (80041e8 <HAL_GPIO_Init+0x2b8>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6193      	str	r3, [r2, #24]
 80040bc:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <HAL_GPIO_Init+0x2b8>)
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040c8:	4a48      	ldr	r2, [pc, #288]	; (80041ec <HAL_GPIO_Init+0x2bc>)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	089b      	lsrs	r3, r3, #2
 80040ce:	3302      	adds	r3, #2
 80040d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	220f      	movs	r2, #15
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a40      	ldr	r2, [pc, #256]	; (80041f0 <HAL_GPIO_Init+0x2c0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <HAL_GPIO_Init+0x1ec>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3f      	ldr	r2, [pc, #252]	; (80041f4 <HAL_GPIO_Init+0x2c4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00d      	beq.n	8004118 <HAL_GPIO_Init+0x1e8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3e      	ldr	r2, [pc, #248]	; (80041f8 <HAL_GPIO_Init+0x2c8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <HAL_GPIO_Init+0x1e4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3d      	ldr	r2, [pc, #244]	; (80041fc <HAL_GPIO_Init+0x2cc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <HAL_GPIO_Init+0x1e0>
 800410c:	2303      	movs	r3, #3
 800410e:	e006      	b.n	800411e <HAL_GPIO_Init+0x1ee>
 8004110:	2304      	movs	r3, #4
 8004112:	e004      	b.n	800411e <HAL_GPIO_Init+0x1ee>
 8004114:	2302      	movs	r3, #2
 8004116:	e002      	b.n	800411e <HAL_GPIO_Init+0x1ee>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_GPIO_Init+0x1ee>
 800411c:	2300      	movs	r3, #0
 800411e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004120:	f002 0203 	and.w	r2, r2, #3
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	4093      	lsls	r3, r2
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800412e:	492f      	ldr	r1, [pc, #188]	; (80041ec <HAL_GPIO_Init+0x2bc>)
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004148:	4b2d      	ldr	r3, [pc, #180]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	492c      	ldr	r1, [pc, #176]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	600b      	str	r3, [r1, #0]
 8004154:	e006      	b.n	8004164 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004156:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	43db      	mvns	r3, r3
 800415e:	4928      	ldr	r1, [pc, #160]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 8004160:	4013      	ands	r3, r2
 8004162:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d006      	beq.n	800417e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004170:	4b23      	ldr	r3, [pc, #140]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4922      	ldr	r1, [pc, #136]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
 800417c:	e006      	b.n	800418c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800417e:	4b20      	ldr	r3, [pc, #128]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	43db      	mvns	r3, r3
 8004186:	491e      	ldr	r1, [pc, #120]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 8004188:	4013      	ands	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d006      	beq.n	80041a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004198:	4b19      	ldr	r3, [pc, #100]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	4918      	ldr	r1, [pc, #96]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	608b      	str	r3, [r1, #8]
 80041a4:	e006      	b.n	80041b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041a6:	4b16      	ldr	r3, [pc, #88]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	4914      	ldr	r1, [pc, #80]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d021      	beq.n	8004204 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	490e      	ldr	r1, [pc, #56]	; (8004200 <HAL_GPIO_Init+0x2d0>)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60cb      	str	r3, [r1, #12]
 80041cc:	e021      	b.n	8004212 <HAL_GPIO_Init+0x2e2>
 80041ce:	bf00      	nop
 80041d0:	10320000 	.word	0x10320000
 80041d4:	10310000 	.word	0x10310000
 80041d8:	10220000 	.word	0x10220000
 80041dc:	10210000 	.word	0x10210000
 80041e0:	10120000 	.word	0x10120000
 80041e4:	10110000 	.word	0x10110000
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40010800 	.word	0x40010800
 80041f4:	40010c00 	.word	0x40010c00
 80041f8:	40011000 	.word	0x40011000
 80041fc:	40011400 	.word	0x40011400
 8004200:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_GPIO_Init+0x304>)
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	43db      	mvns	r3, r3
 800420c:	4909      	ldr	r1, [pc, #36]	; (8004234 <HAL_GPIO_Init+0x304>)
 800420e:	4013      	ands	r3, r2
 8004210:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	3301      	adds	r3, #1
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	fa22 f303 	lsr.w	r3, r2, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	f47f ae8e 	bne.w	8003f44 <HAL_GPIO_Init+0x14>
  }
}
 8004228:	bf00      	nop
 800422a:	bf00      	nop
 800422c:	372c      	adds	r7, #44	; 0x2c
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	40010400 	.word	0x40010400

08004238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
 8004244:	4613      	mov	r3, r2
 8004246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004248:	787b      	ldrb	r3, [r7, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004254:	e003      	b.n	800425e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	041a      	lsls	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e12b      	b.n	80044d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fe fb7a 	bl	8002988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042cc:	f000 fd36 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 80042d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4a81      	ldr	r2, [pc, #516]	; (80044dc <HAL_I2C_Init+0x274>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d807      	bhi.n	80042ec <HAL_I2C_Init+0x84>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a80      	ldr	r2, [pc, #512]	; (80044e0 <HAL_I2C_Init+0x278>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	bf94      	ite	ls
 80042e4:	2301      	movls	r3, #1
 80042e6:	2300      	movhi	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e006      	b.n	80042fa <HAL_I2C_Init+0x92>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a7d      	ldr	r2, [pc, #500]	; (80044e4 <HAL_I2C_Init+0x27c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	bf94      	ite	ls
 80042f4:	2301      	movls	r3, #1
 80042f6:	2300      	movhi	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e0e7      	b.n	80044d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a78      	ldr	r2, [pc, #480]	; (80044e8 <HAL_I2C_Init+0x280>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0c9b      	lsrs	r3, r3, #18
 800430c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a6a      	ldr	r2, [pc, #424]	; (80044dc <HAL_I2C_Init+0x274>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d802      	bhi.n	800433c <HAL_I2C_Init+0xd4>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3301      	adds	r3, #1
 800433a:	e009      	b.n	8004350 <HAL_I2C_Init+0xe8>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	4a69      	ldr	r2, [pc, #420]	; (80044ec <HAL_I2C_Init+0x284>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	3301      	adds	r3, #1
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	495c      	ldr	r1, [pc, #368]	; (80044dc <HAL_I2C_Init+0x274>)
 800436c:	428b      	cmp	r3, r1
 800436e:	d819      	bhi.n	80043a4 <HAL_I2C_Init+0x13c>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1e59      	subs	r1, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fbb1 f3f3 	udiv	r3, r1, r3
 800437e:	1c59      	adds	r1, r3, #1
 8004380:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004384:	400b      	ands	r3, r1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_I2C_Init+0x138>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1e59      	subs	r1, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fbb1 f3f3 	udiv	r3, r1, r3
 8004398:	3301      	adds	r3, #1
 800439a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439e:	e051      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 80043a0:	2304      	movs	r3, #4
 80043a2:	e04f      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d111      	bne.n	80043d0 <HAL_I2C_Init+0x168>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e58      	subs	r0, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	440b      	add	r3, r1
 80043ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e012      	b.n	80043f6 <HAL_I2C_Init+0x18e>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1e58      	subs	r0, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	0099      	lsls	r1, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Init+0x196>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e022      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <HAL_I2C_Init+0x1bc>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1e58      	subs	r0, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	440b      	add	r3, r1
 8004414:	fbb0 f3f3 	udiv	r3, r0, r3
 8004418:	3301      	adds	r3, #1
 800441a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004422:	e00f      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1e58      	subs	r0, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	0099      	lsls	r1, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	fbb0 f3f3 	udiv	r3, r0, r3
 800443a:	3301      	adds	r3, #1
 800443c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	6809      	ldr	r1, [r1, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69da      	ldr	r2, [r3, #28]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6911      	ldr	r1, [r2, #16]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	4311      	orrs	r1, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	430b      	orrs	r3, r1
 8004486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	000186a0 	.word	0x000186a0
 80044e0:	001e847f 	.word	0x001e847f
 80044e4:	003d08ff 	.word	0x003d08ff
 80044e8:	431bde83 	.word	0x431bde83
 80044ec:	10624dd3 	.word	0x10624dd3

080044f0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e034      	b.n	800456c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800450a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f245 5255 	movw	r2, #21845	; 0x5555
 8004514:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6852      	ldr	r2, [r2, #4]
 800451e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6892      	ldr	r2, [r2, #8]
 8004528:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800452a:	f7ff f9cf 	bl	80038cc <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004530:	e00f      	b.n	8004552 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004532:	f7ff f9cb 	bl	80038cc <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b27      	cmp	r3, #39	; 0x27
 800453e:	d908      	bls.n	8004552 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e00c      	b.n	800456c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e8      	bne.n	8004532 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004568:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004584:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
	...

08004594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e26c      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8087 	beq.w	80046c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045b4:	4b92      	ldr	r3, [pc, #584]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d00c      	beq.n	80045da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045c0:	4b8f      	ldr	r3, [pc, #572]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 030c 	and.w	r3, r3, #12
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d112      	bne.n	80045f2 <HAL_RCC_OscConfig+0x5e>
 80045cc:	4b8c      	ldr	r3, [pc, #560]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d10b      	bne.n	80045f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045da:	4b89      	ldr	r3, [pc, #548]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d06c      	beq.n	80046c0 <HAL_RCC_OscConfig+0x12c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d168      	bne.n	80046c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e246      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x76>
 80045fc:	4b80      	ldr	r3, [pc, #512]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a7f      	ldr	r2, [pc, #508]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	e02e      	b.n	8004668 <HAL_RCC_OscConfig+0xd4>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x98>
 8004612:	4b7b      	ldr	r3, [pc, #492]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7a      	ldr	r2, [pc, #488]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	4b78      	ldr	r3, [pc, #480]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a77      	ldr	r2, [pc, #476]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e01d      	b.n	8004668 <HAL_RCC_OscConfig+0xd4>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004634:	d10c      	bne.n	8004650 <HAL_RCC_OscConfig+0xbc>
 8004636:	4b72      	ldr	r3, [pc, #456]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a71      	ldr	r2, [pc, #452]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 800463c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	4b6f      	ldr	r3, [pc, #444]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6e      	ldr	r2, [pc, #440]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e00b      	b.n	8004668 <HAL_RCC_OscConfig+0xd4>
 8004650:	4b6b      	ldr	r3, [pc, #428]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a6a      	ldr	r2, [pc, #424]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	4b68      	ldr	r3, [pc, #416]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a67      	ldr	r2, [pc, #412]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d013      	beq.n	8004698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7ff f92c 	bl	80038cc <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004678:	f7ff f928 	bl	80038cc <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	; 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1fa      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	4b5d      	ldr	r3, [pc, #372]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0xe4>
 8004696:	e014      	b.n	80046c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7ff f918 	bl	80038cc <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a0:	f7ff f914 	bl	80038cc <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e1e6      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b2:	4b53      	ldr	r3, [pc, #332]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x10c>
 80046be:	e000      	b.n	80046c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d063      	beq.n	8004796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ce:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046da:	4b49      	ldr	r3, [pc, #292]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d11c      	bne.n	8004720 <HAL_RCC_OscConfig+0x18c>
 80046e6:	4b46      	ldr	r3, [pc, #280]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d116      	bne.n	8004720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f2:	4b43      	ldr	r3, [pc, #268]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_RCC_OscConfig+0x176>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e1ba      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470a:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4939      	ldr	r1, [pc, #228]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471e:	e03a      	b.n	8004796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d020      	beq.n	800476a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004728:	4b36      	ldr	r3, [pc, #216]	; (8004804 <HAL_RCC_OscConfig+0x270>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7ff f8cd 	bl	80038cc <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004736:	f7ff f8c9 	bl	80038cc <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e19b      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004748:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004754:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	4927      	ldr	r1, [pc, #156]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 8004764:	4313      	orrs	r3, r2
 8004766:	600b      	str	r3, [r1, #0]
 8004768:	e015      	b.n	8004796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800476a:	4b26      	ldr	r3, [pc, #152]	; (8004804 <HAL_RCC_OscConfig+0x270>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7ff f8ac 	bl	80038cc <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004778:	f7ff f8a8 	bl	80038cc <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e17a      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478a:	4b1d      	ldr	r3, [pc, #116]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d03a      	beq.n	8004818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d019      	beq.n	80047de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047aa:	4b17      	ldr	r3, [pc, #92]	; (8004808 <HAL_RCC_OscConfig+0x274>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b0:	f7ff f88c 	bl	80038cc <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b8:	f7ff f888 	bl	80038cc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e15a      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047d6:	2001      	movs	r0, #1
 80047d8:	f000 fad8 	bl	8004d8c <RCC_Delay>
 80047dc:	e01c      	b.n	8004818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <HAL_RCC_OscConfig+0x274>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e4:	f7ff f872 	bl	80038cc <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ea:	e00f      	b.n	800480c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ec:	f7ff f86e 	bl	80038cc <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d908      	bls.n	800480c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e140      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	42420000 	.word	0x42420000
 8004808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480c:	4b9e      	ldr	r3, [pc, #632]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e9      	bne.n	80047ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80a6 	beq.w	8004972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482a:	4b97      	ldr	r3, [pc, #604]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10d      	bne.n	8004852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004836:	4b94      	ldr	r3, [pc, #592]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4a93      	ldr	r2, [pc, #588]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 800483c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004840:	61d3      	str	r3, [r2, #28]
 8004842:	4b91      	ldr	r3, [pc, #580]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800484e:	2301      	movs	r3, #1
 8004850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	4b8e      	ldr	r3, [pc, #568]	; (8004a8c <HAL_RCC_OscConfig+0x4f8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d118      	bne.n	8004890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800485e:	4b8b      	ldr	r3, [pc, #556]	; (8004a8c <HAL_RCC_OscConfig+0x4f8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a8a      	ldr	r2, [pc, #552]	; (8004a8c <HAL_RCC_OscConfig+0x4f8>)
 8004864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800486a:	f7ff f82f 	bl	80038cc <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004872:	f7ff f82b 	bl	80038cc <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b64      	cmp	r3, #100	; 0x64
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e0fd      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004884:	4b81      	ldr	r3, [pc, #516]	; (8004a8c <HAL_RCC_OscConfig+0x4f8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d106      	bne.n	80048a6 <HAL_RCC_OscConfig+0x312>
 8004898:	4b7b      	ldr	r3, [pc, #492]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4a7a      	ldr	r2, [pc, #488]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6213      	str	r3, [r2, #32]
 80048a4:	e02d      	b.n	8004902 <HAL_RCC_OscConfig+0x36e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x334>
 80048ae:	4b76      	ldr	r3, [pc, #472]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	4a75      	ldr	r2, [pc, #468]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	6213      	str	r3, [r2, #32]
 80048ba:	4b73      	ldr	r3, [pc, #460]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	4a72      	ldr	r2, [pc, #456]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	6213      	str	r3, [r2, #32]
 80048c6:	e01c      	b.n	8004902 <HAL_RCC_OscConfig+0x36e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b05      	cmp	r3, #5
 80048ce:	d10c      	bne.n	80048ea <HAL_RCC_OscConfig+0x356>
 80048d0:	4b6d      	ldr	r3, [pc, #436]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	4a6c      	ldr	r2, [pc, #432]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048d6:	f043 0304 	orr.w	r3, r3, #4
 80048da:	6213      	str	r3, [r2, #32]
 80048dc:	4b6a      	ldr	r3, [pc, #424]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	4a69      	ldr	r2, [pc, #420]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6213      	str	r3, [r2, #32]
 80048e8:	e00b      	b.n	8004902 <HAL_RCC_OscConfig+0x36e>
 80048ea:	4b67      	ldr	r3, [pc, #412]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	4a66      	ldr	r2, [pc, #408]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	6213      	str	r3, [r2, #32]
 80048f6:	4b64      	ldr	r3, [pc, #400]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	4a63      	ldr	r2, [pc, #396]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d015      	beq.n	8004936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490a:	f7fe ffdf 	bl	80038cc <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fe ffdb 	bl	80038cc <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0ab      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004928:	4b57      	ldr	r3, [pc, #348]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0ee      	beq.n	8004912 <HAL_RCC_OscConfig+0x37e>
 8004934:	e014      	b.n	8004960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004936:	f7fe ffc9 	bl	80038cc <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493c:	e00a      	b.n	8004954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7fe ffc5 	bl	80038cc <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	f241 3288 	movw	r2, #5000	; 0x1388
 800494c:	4293      	cmp	r3, r2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e095      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004954:	4b4c      	ldr	r3, [pc, #304]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1ee      	bne.n	800493e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d105      	bne.n	8004972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004966:	4b48      	ldr	r3, [pc, #288]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	4a47      	ldr	r2, [pc, #284]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 800496c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8081 	beq.w	8004a7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800497c:	4b42      	ldr	r3, [pc, #264]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d061      	beq.n	8004a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d146      	bne.n	8004a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004990:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCC_OscConfig+0x4fc>)
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004996:	f7fe ff99 	bl	80038cc <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499e:	f7fe ff95 	bl	80038cc <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e067      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b0:	4b35      	ldr	r3, [pc, #212]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f0      	bne.n	800499e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c4:	d108      	bne.n	80049d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049c6:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	492d      	ldr	r1, [pc, #180]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d8:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a19      	ldr	r1, [r3, #32]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	430b      	orrs	r3, r1
 80049ea:	4927      	ldr	r1, [pc, #156]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f0:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <HAL_RCC_OscConfig+0x4fc>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f6:	f7fe ff69 	bl	80038cc <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fe:	f7fe ff65 	bl	80038cc <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e037      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a10:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x46a>
 8004a1c:	e02f      	b.n	8004a7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <HAL_RCC_OscConfig+0x4fc>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a24:	f7fe ff52 	bl	80038cc <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fe ff4e 	bl	80038cc <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e020      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x498>
 8004a4a:	e018      	b.n	8004a7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e013      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCC_OscConfig+0x4f4>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d001      	beq.n	8004a7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40007000 	.word	0x40007000
 8004a90:	42420060 	.word	0x42420060

08004a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0d0      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b6a      	ldr	r3, [pc, #424]	; (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d910      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b67      	ldr	r3, [pc, #412]	; (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 0207 	bic.w	r2, r3, #7
 8004abe:	4965      	ldr	r1, [pc, #404]	; (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b63      	ldr	r3, [pc, #396]	; (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0b8      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af0:	4b59      	ldr	r3, [pc, #356]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4a58      	ldr	r2, [pc, #352]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004afa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b08:	4b53      	ldr	r3, [pc, #332]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a52      	ldr	r2, [pc, #328]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b14:	4b50      	ldr	r3, [pc, #320]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	494d      	ldr	r1, [pc, #308]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d040      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b47      	ldr	r3, [pc, #284]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d115      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e07f      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b52:	4b41      	ldr	r3, [pc, #260]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e073      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b62:	4b3d      	ldr	r3, [pc, #244]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e06b      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b72:	4b39      	ldr	r3, [pc, #228]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f023 0203 	bic.w	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4936      	ldr	r1, [pc, #216]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b84:	f7fe fea2 	bl	80038cc <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8c:	f7fe fe9e 	bl	80038cc <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e053      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 020c 	and.w	r2, r3, #12
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d1eb      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d210      	bcs.n	8004be4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 0207 	bic.w	r2, r3, #7
 8004bca:	4922      	ldr	r1, [pc, #136]	; (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e032      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf0:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4916      	ldr	r1, [pc, #88]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	490e      	ldr	r1, [pc, #56]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c22:	f000 f821 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8004c26:	4602      	mov	r2, r0
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	490a      	ldr	r1, [pc, #40]	; (8004c5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c34:	5ccb      	ldrb	r3, [r1, r3]
 8004c36:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3a:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <HAL_RCC_ClockConfig+0x1cc>)
 8004c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_RCC_ClockConfig+0x1d0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fe00 	bl	8003848 <HAL_InitTick>

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40022000 	.word	0x40022000
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	0800b214 	.word	0x0800b214
 8004c60:	20000000 	.word	0x20000000
 8004c64:	20000004 	.word	0x20000004

08004c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c68:	b490      	push	{r4, r7}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c6e:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c70:	1d3c      	adds	r4, r7, #4
 8004c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c78:	f240 2301 	movw	r3, #513	; 0x201
 8004c7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	2300      	movs	r3, #0
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c92:	4b22      	ldr	r3, [pc, #136]	; (8004d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d002      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d003      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0x46>
 8004ca6:	e02d      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004caa:	623b      	str	r3, [r7, #32]
      break;
 8004cac:	e02d      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	0c9b      	lsrs	r3, r3, #18
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cba:	4413      	add	r3, r2
 8004cbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004cc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d013      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ccc:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	0c5b      	lsrs	r3, r3, #17
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cda:	4413      	add	r3, r2
 8004cdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ce0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ce6:	fb02 f203 	mul.w	r2, r2, r3
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf2:	e004      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	623b      	str	r3, [r7, #32]
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d06:	623b      	str	r3, [r7, #32]
      break;
 8004d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3728      	adds	r7, #40	; 0x28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc90      	pop	{r4, r7}
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	0800b204 	.word	0x0800b204
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	007a1200 	.word	0x007a1200
 8004d24:	003d0900 	.word	0x003d0900

08004d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d2c:	4b02      	ldr	r3, [pc, #8]	; (8004d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	20000000 	.word	0x20000000

08004d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d40:	f7ff fff2 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4903      	ldr	r1, [pc, #12]	; (8004d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	0800b224 	.word	0x0800b224

08004d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d68:	f7ff ffde 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	0adb      	lsrs	r3, r3, #11
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4903      	ldr	r1, [pc, #12]	; (8004d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40021000 	.word	0x40021000
 8004d88:	0800b224 	.word	0x0800b224

08004d8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <RCC_Delay+0x34>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <RCC_Delay+0x38>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	0a5b      	lsrs	r3, r3, #9
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004da8:	bf00      	nop
  }
  while (Delay --);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1e5a      	subs	r2, r3, #1
 8004dae:	60fa      	str	r2, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f9      	bne.n	8004da8 <RCC_Delay+0x1c>
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	20000000 	.word	0x20000000
 8004dc4:	10624dd3 	.word	0x10624dd3

08004dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e076      	b.n	8004ec8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d108      	bne.n	8004df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dea:	d009      	beq.n	8004e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	61da      	str	r2, [r3, #28]
 8004df2:	e005      	b.n	8004e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fd fe04 	bl	8002a28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	ea42 0103 	orr.w	r1, r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	0c1a      	lsrs	r2, r3, #16
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f002 0204 	and.w	r2, r2, #4
 8004ea6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e041      	b.n	8004f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fd fde2 	bl	8002ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f000 ffce 	bl	8005eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d001      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e03a      	b.n	8004ffe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_TIM_Base_Start_IT+0x98>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00e      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x58>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d009      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x58>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a14      	ldr	r2, [pc, #80]	; (800500c <HAL_TIM_Base_Start_IT+0x9c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d004      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x58>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a13      	ldr	r2, [pc, #76]	; (8005010 <HAL_TIM_Base_Start_IT+0xa0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d111      	bne.n	8004fec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b06      	cmp	r3, #6
 8004fd8:	d010      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	e007      	b.n	8004ffc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr
 8005008:	40012c00 	.word	0x40012c00
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800

08005014 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6a1a      	ldr	r2, [r3, #32]
 8005032:	f241 1311 	movw	r3, #4369	; 0x1111
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10f      	bne.n	800505c <HAL_TIM_Base_Stop_IT+0x48>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	f240 4344 	movw	r3, #1092	; 0x444
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d107      	bne.n	800505c <HAL_TIM_Base_Stop_IT+0x48>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e041      	b.n	8005106 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f839 	bl	800510e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f000 fefe 	bl	8005eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d109      	bne.n	8005144 <HAL_TIM_OC_Start+0x24>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	bf14      	ite	ne
 800513c:	2301      	movne	r3, #1
 800513e:	2300      	moveq	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e022      	b.n	800518a <HAL_TIM_OC_Start+0x6a>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d109      	bne.n	800515e <HAL_TIM_OC_Start+0x3e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b01      	cmp	r3, #1
 8005154:	bf14      	ite	ne
 8005156:	2301      	movne	r3, #1
 8005158:	2300      	moveq	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e015      	b.n	800518a <HAL_TIM_OC_Start+0x6a>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d109      	bne.n	8005178 <HAL_TIM_OC_Start+0x58>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e008      	b.n	800518a <HAL_TIM_OC_Start+0x6a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e05e      	b.n	8005250 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_OC_Start+0x82>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	e013      	b.n	80051ca <HAL_TIM_OC_Start+0xaa>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_OC_Start+0x92>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b0:	e00b      	b.n	80051ca <HAL_TIM_OC_Start+0xaa>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_OC_Start+0xa2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c0:	e003      	b.n	80051ca <HAL_TIM_OC_Start+0xaa>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2201      	movs	r2, #1
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f001 fa87 	bl	80066e6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <HAL_TIM_OC_Start+0x138>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d107      	bne.n	80051f2 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a18      	ldr	r2, [pc, #96]	; (8005258 <HAL_TIM_OC_Start+0x138>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00e      	beq.n	800521a <HAL_TIM_OC_Start+0xfa>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d009      	beq.n	800521a <HAL_TIM_OC_Start+0xfa>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a14      	ldr	r2, [pc, #80]	; (800525c <HAL_TIM_OC_Start+0x13c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_TIM_OC_Start+0xfa>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a12      	ldr	r2, [pc, #72]	; (8005260 <HAL_TIM_OC_Start+0x140>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d111      	bne.n	800523e <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b06      	cmp	r3, #6
 800522a:	d010      	beq.n	800524e <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523c:	e007      	b.n	800524e <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800

08005264 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f001 fa35 	bl	80066e6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a29      	ldr	r2, [pc, #164]	; (8005328 <HAL_TIM_OC_Stop+0xc4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d117      	bne.n	80052b6 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005290:	4013      	ands	r3, r2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10f      	bne.n	80052b6 <HAL_TIM_OC_Stop+0x52>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	f240 4344 	movw	r3, #1092	; 0x444
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d107      	bne.n	80052b6 <HAL_TIM_OC_Stop+0x52>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10f      	bne.n	80052e6 <HAL_TIM_OC_Stop+0x82>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	f240 4344 	movw	r3, #1092	; 0x444
 80052d0:	4013      	ands	r3, r2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d107      	bne.n	80052e6 <HAL_TIM_OC_Stop+0x82>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <HAL_TIM_OC_Stop+0x92>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f4:	e013      	b.n	800531e <HAL_TIM_OC_Stop+0xba>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_OC_Stop+0xa2>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005304:	e00b      	b.n	800531e <HAL_TIM_OC_Stop+0xba>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d104      	bne.n	8005316 <HAL_TIM_OC_Stop+0xb2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005314:	e003      	b.n	800531e <HAL_TIM_OC_Stop+0xba>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40012c00 	.word	0x40012c00

0800532c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e041      	b.n	80053c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f839 	bl	80053ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 fda0 	bl	8005eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_IC_Start_IT+0x1a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e013      	b.n	800541e <HAL_TIM_IC_Start_IT+0x42>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_IC_Start_IT+0x2a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005402:	b2db      	uxtb	r3, r3
 8005404:	e00b      	b.n	800541e <HAL_TIM_IC_Start_IT+0x42>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d104      	bne.n	8005416 <HAL_TIM_IC_Start_IT+0x3a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e003      	b.n	800541e <HAL_TIM_IC_Start_IT+0x42>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <HAL_TIM_IC_Start_IT+0x54>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e013      	b.n	8005458 <HAL_TIM_IC_Start_IT+0x7c>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d104      	bne.n	8005440 <HAL_TIM_IC_Start_IT+0x64>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e00b      	b.n	8005458 <HAL_TIM_IC_Start_IT+0x7c>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b08      	cmp	r3, #8
 8005444:	d104      	bne.n	8005450 <HAL_TIM_IC_Start_IT+0x74>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e003      	b.n	8005458 <HAL_TIM_IC_Start_IT+0x7c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005456:	b2db      	uxtb	r3, r3
 8005458:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d102      	bne.n	8005466 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005460:	7bbb      	ldrb	r3, [r7, #14]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d001      	beq.n	800546a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e0b3      	b.n	80055d2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d104      	bne.n	800547a <HAL_TIM_IC_Start_IT+0x9e>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005478:	e013      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0xc6>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b04      	cmp	r3, #4
 800547e:	d104      	bne.n	800548a <HAL_TIM_IC_Start_IT+0xae>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005488:	e00b      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0xc6>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d104      	bne.n	800549a <HAL_TIM_IC_Start_IT+0xbe>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005498:	e003      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0xc6>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_IC_Start_IT+0xd6>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b0:	e013      	b.n	80054da <HAL_TIM_IC_Start_IT+0xfe>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_IC_Start_IT+0xe6>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054c0:	e00b      	b.n	80054da <HAL_TIM_IC_Start_IT+0xfe>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IC_Start_IT+0xf6>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d0:	e003      	b.n	80054da <HAL_TIM_IC_Start_IT+0xfe>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b0c      	cmp	r3, #12
 80054de:	d841      	bhi.n	8005564 <HAL_TIM_IC_Start_IT+0x188>
 80054e0:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <HAL_TIM_IC_Start_IT+0x10c>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	0800551d 	.word	0x0800551d
 80054ec:	08005565 	.word	0x08005565
 80054f0:	08005565 	.word	0x08005565
 80054f4:	08005565 	.word	0x08005565
 80054f8:	0800552f 	.word	0x0800552f
 80054fc:	08005565 	.word	0x08005565
 8005500:	08005565 	.word	0x08005565
 8005504:	08005565 	.word	0x08005565
 8005508:	08005541 	.word	0x08005541
 800550c:	08005565 	.word	0x08005565
 8005510:	08005565 	.word	0x08005565
 8005514:	08005565 	.word	0x08005565
 8005518:	08005553 	.word	0x08005553
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0202 	orr.w	r2, r2, #2
 800552a:	60da      	str	r2, [r3, #12]
      break;
 800552c:	e01b      	b.n	8005566 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0204 	orr.w	r2, r2, #4
 800553c:	60da      	str	r2, [r3, #12]
      break;
 800553e:	e012      	b.n	8005566 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0208 	orr.w	r2, r2, #8
 800554e:	60da      	str	r2, [r3, #12]
      break;
 8005550:	e009      	b.n	8005566 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0210 	orr.w	r2, r2, #16
 8005560:	60da      	str	r2, [r3, #12]
      break;
 8005562:	e000      	b.n	8005566 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005564:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f001 f8b9 	bl	80066e6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a18      	ldr	r2, [pc, #96]	; (80055dc <HAL_TIM_IC_Start_IT+0x200>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00e      	beq.n	800559c <HAL_TIM_IC_Start_IT+0x1c0>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005586:	d009      	beq.n	800559c <HAL_TIM_IC_Start_IT+0x1c0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a14      	ldr	r2, [pc, #80]	; (80055e0 <HAL_TIM_IC_Start_IT+0x204>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_TIM_IC_Start_IT+0x1c0>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <HAL_TIM_IC_Start_IT+0x208>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d111      	bne.n	80055c0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d010      	beq.n	80055d0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055be:	e007      	b.n	80055d0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800

080055e8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d841      	bhi.n	800567c <HAL_TIM_IC_Stop_IT+0x94>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <HAL_TIM_IC_Stop_IT+0x18>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005635 	.word	0x08005635
 8005604:	0800567d 	.word	0x0800567d
 8005608:	0800567d 	.word	0x0800567d
 800560c:	0800567d 	.word	0x0800567d
 8005610:	08005647 	.word	0x08005647
 8005614:	0800567d 	.word	0x0800567d
 8005618:	0800567d 	.word	0x0800567d
 800561c:	0800567d 	.word	0x0800567d
 8005620:	08005659 	.word	0x08005659
 8005624:	0800567d 	.word	0x0800567d
 8005628:	0800567d 	.word	0x0800567d
 800562c:	0800567d 	.word	0x0800567d
 8005630:	0800566b 	.word	0x0800566b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0202 	bic.w	r2, r2, #2
 8005642:	60da      	str	r2, [r3, #12]
      break;
 8005644:	e01b      	b.n	800567e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0204 	bic.w	r2, r2, #4
 8005654:	60da      	str	r2, [r3, #12]
      break;
 8005656:	e012      	b.n	800567e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0208 	bic.w	r2, r2, #8
 8005666:	60da      	str	r2, [r3, #12]
      break;
 8005668:	e009      	b.n	800567e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0210 	bic.w	r2, r2, #16
 8005678:	60da      	str	r2, [r3, #12]
      break;
 800567a:	e000      	b.n	800567e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800567c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f001 f82d 	bl	80066e6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6a1a      	ldr	r2, [r3, #32]
 8005692:	f241 1311 	movw	r3, #4369	; 0x1111
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10f      	bne.n	80056bc <HAL_TIM_IC_Stop_IT+0xd4>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6a1a      	ldr	r2, [r3, #32]
 80056a2:	f240 4344 	movw	r3, #1092	; 0x444
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d107      	bne.n	80056bc <HAL_TIM_IC_Stop_IT+0xd4>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d104      	bne.n	80056cc <HAL_TIM_IC_Stop_IT+0xe4>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ca:	e013      	b.n	80056f4 <HAL_TIM_IC_Stop_IT+0x10c>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d104      	bne.n	80056dc <HAL_TIM_IC_Stop_IT+0xf4>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056da:	e00b      	b.n	80056f4 <HAL_TIM_IC_Stop_IT+0x10c>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d104      	bne.n	80056ec <HAL_TIM_IC_Stop_IT+0x104>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ea:	e003      	b.n	80056f4 <HAL_TIM_IC_Stop_IT+0x10c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <HAL_TIM_IC_Stop_IT+0x11c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005702:	e013      	b.n	800572c <HAL_TIM_IC_Stop_IT+0x144>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b04      	cmp	r3, #4
 8005708:	d104      	bne.n	8005714 <HAL_TIM_IC_Stop_IT+0x12c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005712:	e00b      	b.n	800572c <HAL_TIM_IC_Stop_IT+0x144>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b08      	cmp	r3, #8
 8005718:	d104      	bne.n	8005724 <HAL_TIM_IC_Stop_IT+0x13c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005722:	e003      	b.n	800572c <HAL_TIM_IC_Stop_IT+0x144>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop

08005738 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e041      	b.n	80057d0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f839 	bl	80057d8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2202      	movs	r2, #2
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f000 fb99 	bl	8005eb0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0208 	bic.w	r2, r2, #8
 800578c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr

080057ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d122      	bne.n	8005846 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b02      	cmp	r3, #2
 800580c:	d11b      	bne.n	8005846 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f06f 0202 	mvn.w	r2, #2
 8005816:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7fc ffab 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 8005832:	e005      	b.n	8005840 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fb20 	bl	8005e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fb26 	bl	8005e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b04      	cmp	r3, #4
 8005852:	d122      	bne.n	800589a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b04      	cmp	r3, #4
 8005860:	d11b      	bne.n	800589a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f06f 0204 	mvn.w	r2, #4
 800586a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fc ff81 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 8005886:	e005      	b.n	8005894 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 faf6 	bl	8005e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fafc 	bl	8005e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d122      	bne.n	80058ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d11b      	bne.n	80058ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f06f 0208 	mvn.w	r2, #8
 80058be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2204      	movs	r2, #4
 80058c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7fc ff57 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 80058da:	e005      	b.n	80058e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 facc 	bl	8005e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fad2 	bl	8005e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d122      	bne.n	8005942 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b10      	cmp	r3, #16
 8005908:	d11b      	bne.n	8005942 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f06f 0210 	mvn.w	r2, #16
 8005912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2208      	movs	r2, #8
 8005918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7fc ff2d 	bl	8002788 <HAL_TIM_IC_CaptureCallback>
 800592e:	e005      	b.n	800593c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 faa2 	bl	8005e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 faa8 	bl	8005e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10e      	bne.n	800596e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b01      	cmp	r3, #1
 800595c:	d107      	bne.n	800596e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f06f 0201 	mvn.w	r2, #1
 8005966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa7d 	bl	8005e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d10e      	bne.n	800599a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005986:	2b80      	cmp	r3, #128	; 0x80
 8005988:	d107      	bne.n	800599a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 ff83 	bl	80068a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d10e      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d107      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fa6c 	bl	8005e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d10e      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d107      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f06f 0220 	mvn.w	r2, #32
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 ff4e 	bl	800688e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e046      	b.n	8005aa4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b0c      	cmp	r3, #12
 8005a22:	d839      	bhi.n	8005a98 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <HAL_TIM_OC_ConfigChannel+0x30>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a61 	.word	0x08005a61
 8005a30:	08005a99 	.word	0x08005a99
 8005a34:	08005a99 	.word	0x08005a99
 8005a38:	08005a99 	.word	0x08005a99
 8005a3c:	08005a6f 	.word	0x08005a6f
 8005a40:	08005a99 	.word	0x08005a99
 8005a44:	08005a99 	.word	0x08005a99
 8005a48:	08005a99 	.word	0x08005a99
 8005a4c:	08005a7d 	.word	0x08005a7d
 8005a50:	08005a99 	.word	0x08005a99
 8005a54:	08005a99 	.word	0x08005a99
 8005a58:	08005a99 	.word	0x08005a99
 8005a5c:	08005a8b 	.word	0x08005a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fa84 	bl	8005f74 <TIM_OC1_SetConfig>
      break;
 8005a6c:	e015      	b.n	8005a9a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fae3 	bl	8006040 <TIM_OC2_SetConfig>
      break;
 8005a7a:	e00e      	b.n	8005a9a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fb46 	bl	8006114 <TIM_OC3_SetConfig>
      break;
 8005a88:	e007      	b.n	8005a9a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fba9 	bl	80061e8 <TIM_OC4_SetConfig>
      break;
 8005a96:	e000      	b.n	8005a9a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8005a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e082      	b.n	8005bcc <HAL_TIM_IC_ConfigChannel+0x120>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d11b      	bne.n	8005b0c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6819      	ldr	r1, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f000 fc5c 	bl	80063a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 020c 	bic.w	r2, r2, #12
 8005af6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6999      	ldr	r1, [r3, #24]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	619a      	str	r2, [r3, #24]
 8005b0a:	e05a      	b.n	8005bc2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d11c      	bne.n	8005b4c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6819      	ldr	r1, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f000 fcc5 	bl	80064b0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b34:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6999      	ldr	r1, [r3, #24]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	021a      	lsls	r2, r3, #8
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	619a      	str	r2, [r3, #24]
 8005b4a:	e03a      	b.n	8005bc2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d11b      	bne.n	8005b8a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6819      	ldr	r1, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f000 fd10 	bl	8006586 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 020c 	bic.w	r2, r2, #12
 8005b74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	61da      	str	r2, [r3, #28]
 8005b88:	e01b      	b.n	8005bc2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	6819      	ldr	r1, [r3, #0]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f000 fd2f 	bl	80065fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69d9      	ldr	r1, [r3, #28]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	021a      	lsls	r2, r3, #8
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_ConfigClockSource+0x18>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e0b3      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x180>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c24:	d03e      	beq.n	8005ca4 <HAL_TIM_ConfigClockSource+0xd0>
 8005c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2a:	f200 8087 	bhi.w	8005d3c <HAL_TIM_ConfigClockSource+0x168>
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c32:	f000 8085 	beq.w	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3a:	d87f      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x168>
 8005c3c:	2b70      	cmp	r3, #112	; 0x70
 8005c3e:	d01a      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0xa2>
 8005c40:	2b70      	cmp	r3, #112	; 0x70
 8005c42:	d87b      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x168>
 8005c44:	2b60      	cmp	r3, #96	; 0x60
 8005c46:	d050      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x116>
 8005c48:	2b60      	cmp	r3, #96	; 0x60
 8005c4a:	d877      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x168>
 8005c4c:	2b50      	cmp	r3, #80	; 0x50
 8005c4e:	d03c      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0xf6>
 8005c50:	2b50      	cmp	r3, #80	; 0x50
 8005c52:	d873      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x168>
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d058      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x136>
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d86f      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x168>
 8005c5c:	2b30      	cmp	r3, #48	; 0x30
 8005c5e:	d064      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x156>
 8005c60:	2b30      	cmp	r3, #48	; 0x30
 8005c62:	d86b      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x168>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d060      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x156>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d867      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x168>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05c      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x156>
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d05a      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005c74:	e062      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6899      	ldr	r1, [r3, #8]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f000 fd0f 	bl	80066a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	609a      	str	r2, [r3, #8]
      break;
 8005ca2:	e04e      	b.n	8005d42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	6899      	ldr	r1, [r3, #8]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f000 fcf8 	bl	80066a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc6:	609a      	str	r2, [r3, #8]
      break;
 8005cc8:	e03b      	b.n	8005d42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6859      	ldr	r1, [r3, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f000 fbbc 	bl	8006454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2150      	movs	r1, #80	; 0x50
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fcc6 	bl	8006674 <TIM_ITRx_SetConfig>
      break;
 8005ce8:	e02b      	b.n	8005d42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6859      	ldr	r1, [r3, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f000 fc16 	bl	8006528 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2160      	movs	r1, #96	; 0x60
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fcb6 	bl	8006674 <TIM_ITRx_SetConfig>
      break;
 8005d08:	e01b      	b.n	8005d42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 fb9c 	bl	8006454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2140      	movs	r1, #64	; 0x40
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fca6 	bl	8006674 <TIM_ITRx_SetConfig>
      break;
 8005d28:	e00b      	b.n	8005d42 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f000 fc9d 	bl	8006674 <TIM_ITRx_SetConfig>
        break;
 8005d3a:	e002      	b.n	8005d42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e031      	b.n	8005dd8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa7c 	bl	8006284 <TIM_SlaveTimer_SetConfig>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e018      	b.n	8005dd8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dc4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b0c      	cmp	r3, #12
 8005df2:	d831      	bhi.n	8005e58 <HAL_TIM_ReadCapturedValue+0x78>
 8005df4:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <HAL_TIM_ReadCapturedValue+0x1c>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e31 	.word	0x08005e31
 8005e00:	08005e59 	.word	0x08005e59
 8005e04:	08005e59 	.word	0x08005e59
 8005e08:	08005e59 	.word	0x08005e59
 8005e0c:	08005e3b 	.word	0x08005e3b
 8005e10:	08005e59 	.word	0x08005e59
 8005e14:	08005e59 	.word	0x08005e59
 8005e18:	08005e59 	.word	0x08005e59
 8005e1c:	08005e45 	.word	0x08005e45
 8005e20:	08005e59 	.word	0x08005e59
 8005e24:	08005e59 	.word	0x08005e59
 8005e28:	08005e59 	.word	0x08005e59
 8005e2c:	08005e4f 	.word	0x08005e4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	60fb      	str	r3, [r7, #12]

      break;
 8005e38:	e00f      	b.n	8005e5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	60fb      	str	r3, [r7, #12]

      break;
 8005e42:	e00a      	b.n	8005e5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	60fb      	str	r3, [r7, #12]

      break;
 8005e4c:	e005      	b.n	8005e5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	60fb      	str	r3, [r7, #12]

      break;
 8005e56:	e000      	b.n	8005e5a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e58:	bf00      	nop
  }

  return tmpreg;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop

08005e68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bc80      	pop	{r7}
 8005e9c:	4770      	bx	lr

08005e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a29      	ldr	r2, [pc, #164]	; (8005f68 <TIM_Base_SetConfig+0xb8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <TIM_Base_SetConfig+0x30>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ece:	d007      	beq.n	8005ee0 <TIM_Base_SetConfig+0x30>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <TIM_Base_SetConfig+0xbc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_Base_SetConfig+0x30>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <TIM_Base_SetConfig+0xc0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d108      	bne.n	8005ef2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1c      	ldr	r2, [pc, #112]	; (8005f68 <TIM_Base_SetConfig+0xb8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <TIM_Base_SetConfig+0x62>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d007      	beq.n	8005f12 <TIM_Base_SetConfig+0x62>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <TIM_Base_SetConfig+0xbc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_Base_SetConfig+0x62>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a18      	ldr	r2, [pc, #96]	; (8005f70 <TIM_Base_SetConfig+0xc0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d108      	bne.n	8005f24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <TIM_Base_SetConfig+0xb8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d103      	bne.n	8005f58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	615a      	str	r2, [r3, #20]
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40000400 	.word	0x40000400
 8005f70:	40000800 	.word	0x40000800

08005f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 0302 	bic.w	r3, r3, #2
 8005fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	; (800603c <TIM_OC1_SetConfig+0xc8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d10c      	bne.n	8005fea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f023 0308 	bic.w	r3, r3, #8
 8005fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 0304 	bic.w	r3, r3, #4
 8005fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a13      	ldr	r2, [pc, #76]	; (800603c <TIM_OC1_SetConfig+0xc8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d111      	bne.n	8006016 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40012c00 	.word	0x40012c00

08006040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f023 0210 	bic.w	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0320 	bic.w	r3, r3, #32
 800608a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <TIM_OC2_SetConfig+0xd0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d10d      	bne.n	80060bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a14      	ldr	r2, [pc, #80]	; (8006110 <TIM_OC2_SetConfig+0xd0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d113      	bne.n	80060ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	621a      	str	r2, [r3, #32]
}
 8006106:	bf00      	nop
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr
 8006110:	40012c00 	.word	0x40012c00

08006114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0303 	bic.w	r3, r3, #3
 800614a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800615c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <TIM_OC3_SetConfig+0xd0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d10d      	bne.n	800618e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a14      	ldr	r2, [pc, #80]	; (80061e4 <TIM_OC3_SetConfig+0xd0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d113      	bne.n	80061be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800619c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	621a      	str	r2, [r3, #32]
}
 80061d8:	bf00      	nop
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40012c00 	.word	0x40012c00

080061e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	031b      	lsls	r3, r3, #12
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <TIM_OC4_SetConfig+0x98>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d109      	bne.n	800625c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	019b      	lsls	r3, r3, #6
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00

08006284 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b70      	cmp	r3, #112	; 0x70
 80062c8:	d01a      	beq.n	8006300 <TIM_SlaveTimer_SetConfig+0x7c>
 80062ca:	2b70      	cmp	r3, #112	; 0x70
 80062cc:	d860      	bhi.n	8006390 <TIM_SlaveTimer_SetConfig+0x10c>
 80062ce:	2b60      	cmp	r3, #96	; 0x60
 80062d0:	d054      	beq.n	800637c <TIM_SlaveTimer_SetConfig+0xf8>
 80062d2:	2b60      	cmp	r3, #96	; 0x60
 80062d4:	d85c      	bhi.n	8006390 <TIM_SlaveTimer_SetConfig+0x10c>
 80062d6:	2b50      	cmp	r3, #80	; 0x50
 80062d8:	d046      	beq.n	8006368 <TIM_SlaveTimer_SetConfig+0xe4>
 80062da:	2b50      	cmp	r3, #80	; 0x50
 80062dc:	d858      	bhi.n	8006390 <TIM_SlaveTimer_SetConfig+0x10c>
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d019      	beq.n	8006316 <TIM_SlaveTimer_SetConfig+0x92>
 80062e2:	2b40      	cmp	r3, #64	; 0x40
 80062e4:	d854      	bhi.n	8006390 <TIM_SlaveTimer_SetConfig+0x10c>
 80062e6:	2b30      	cmp	r3, #48	; 0x30
 80062e8:	d054      	beq.n	8006394 <TIM_SlaveTimer_SetConfig+0x110>
 80062ea:	2b30      	cmp	r3, #48	; 0x30
 80062ec:	d850      	bhi.n	8006390 <TIM_SlaveTimer_SetConfig+0x10c>
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d050      	beq.n	8006394 <TIM_SlaveTimer_SetConfig+0x110>
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d84c      	bhi.n	8006390 <TIM_SlaveTimer_SetConfig+0x10c>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d04c      	beq.n	8006394 <TIM_SlaveTimer_SetConfig+0x110>
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d04a      	beq.n	8006394 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80062fe:	e047      	b.n	8006390 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68d9      	ldr	r1, [r3, #12]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f000 f9ca 	bl	80066a8 <TIM_ETR_SetConfig>
      break;
 8006314:	e03f      	b.n	8006396 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b05      	cmp	r3, #5
 800631c:	d101      	bne.n	8006322 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e03a      	b.n	8006398 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006348:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	621a      	str	r2, [r3, #32]
      break;
 8006366:	e016      	b.n	8006396 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	6899      	ldr	r1, [r3, #8]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	461a      	mov	r2, r3
 8006376:	f000 f86d 	bl	8006454 <TIM_TI1_ConfigInputStage>
      break;
 800637a:	e00c      	b.n	8006396 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6899      	ldr	r1, [r3, #8]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	461a      	mov	r2, r3
 800638a:	f000 f8cd 	bl	8006528 <TIM_TI2_ConfigInputStage>
      break;
 800638e:	e002      	b.n	8006396 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006390:	bf00      	nop
 8006392:	e000      	b.n	8006396 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8006394:	bf00      	nop
  }
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	f023 0201 	bic.w	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a1f      	ldr	r2, [pc, #124]	; (8006448 <TIM_TI1_SetConfig+0xa8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00b      	beq.n	80063e6 <TIM_TI1_SetConfig+0x46>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d4:	d007      	beq.n	80063e6 <TIM_TI1_SetConfig+0x46>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a1c      	ldr	r2, [pc, #112]	; (800644c <TIM_TI1_SetConfig+0xac>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_TI1_SetConfig+0x46>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <TIM_TI1_SetConfig+0xb0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <TIM_TI1_SetConfig+0x4a>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <TIM_TI1_SetConfig+0x4c>
 80063ea:	2300      	movs	r3, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	e003      	b.n	800640a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f043 0301 	orr.w	r3, r3, #1
 8006408:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	b2db      	uxtb	r3, r3
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f023 030a 	bic.w	r3, r3, #10
 8006424:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f003 030a 	and.w	r3, r3, #10
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800

08006454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f023 0201 	bic.w	r2, r3, #1
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800647e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f023 030a 	bic.w	r3, r3, #10
 8006490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	621a      	str	r2, [r3, #32]
}
 80064a6:	bf00      	nop
 80064a8:	371c      	adds	r7, #28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0210 	bic.w	r2, r3, #16
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	031b      	lsls	r3, r3, #12
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006502:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	621a      	str	r2, [r3, #32]
}
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr

08006528 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f023 0210 	bic.w	r2, r3, #16
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006552:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	031b      	lsls	r3, r3, #12
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	621a      	str	r2, [r3, #32]
}
 800657c:	bf00      	nop
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr

08006586 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006586:	b480      	push	{r7}
 8006588:	b087      	sub	sp, #28
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	621a      	str	r2, [r3, #32]
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006628:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800663a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	031b      	lsls	r3, r3, #12
 8006640:	b29b      	uxth	r3, r3
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800664e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	031b      	lsls	r3, r3, #12
 8006654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4313      	orrs	r3, r2
 800665c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	f043 0307 	orr.w	r3, r3, #7
 8006696:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	609a      	str	r2, [r3, #8]
}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr

080066a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	021a      	lsls	r2, r3, #8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b087      	sub	sp, #28
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2201      	movs	r2, #1
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1a      	ldr	r2, [r3, #32]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	43db      	mvns	r3, r3
 8006708:	401a      	ands	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1a      	ldr	r2, [r3, #32]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	fa01 f303 	lsl.w	r3, r1, r3
 800671e:	431a      	orrs	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr
	...

08006730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006744:	2302      	movs	r3, #2
 8006746:	e046      	b.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a16      	ldr	r2, [pc, #88]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006794:	d009      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a12      	ldr	r2, [pc, #72]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a10      	ldr	r2, [pc, #64]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d10c      	bne.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr
 80067e0:	40012c00 	.word	0x40012c00
 80067e4:	40000400 	.word	0x40000400
 80067e8:	40000800 	.word	0x40000800

080067ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006804:	2302      	movs	r3, #2
 8006806:	e03d      	b.n	8006884 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	4770      	bx	lr

0800688e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr

080068b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e03f      	b.n	8006944 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fc f9b5 	bl	8002c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2224      	movs	r2, #36	; 0x24
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9a6 	bl	8006c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800690a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800691a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800692a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	; 0x28
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b20      	cmp	r3, #32
 800696a:	d17c      	bne.n	8006a66 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <HAL_UART_Transmit+0x2c>
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e075      	b.n	8006a68 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_UART_Transmit+0x3e>
 8006986:	2302      	movs	r3, #2
 8006988:	e06e      	b.n	8006a68 <HAL_UART_Transmit+0x11c>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2221      	movs	r2, #33	; 0x21
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069a0:	f7fc ff94 	bl	80038cc <HAL_GetTick>
 80069a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	88fa      	ldrh	r2, [r7, #6]
 80069aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ba:	d108      	bne.n	80069ce <HAL_UART_Transmit+0x82>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	e003      	b.n	80069d6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069de:	e02a      	b.n	8006a36 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2200      	movs	r2, #0
 80069e8:	2180      	movs	r1, #128	; 0x80
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f8e2 	bl	8006bb4 <UART_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e036      	b.n	8006a68 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10b      	bne.n	8006a18 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	3302      	adds	r3, #2
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	e007      	b.n	8006a28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	3301      	adds	r3, #1
 8006a26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1cf      	bne.n	80069e0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	2200      	movs	r2, #0
 8006a48:	2140      	movs	r1, #64	; 0x40
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 f8b2 	bl	8006bb4 <UART_WaitOnFlagUntilTimeout>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e006      	b.n	8006a68 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	e000      	b.n	8006a68 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a66:	2302      	movs	r3, #2
  }
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	f040 808c 	bne.w	8006baa <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <HAL_UART_Receive+0x2e>
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e084      	b.n	8006bac <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_UART_Receive+0x40>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e07d      	b.n	8006bac <HAL_UART_Receive+0x13c>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2222      	movs	r2, #34	; 0x22
 8006ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006acc:	f7fc fefe 	bl	80038cc <HAL_GetTick>
 8006ad0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	88fa      	ldrh	r2, [r7, #6]
 8006ad6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	88fa      	ldrh	r2, [r7, #6]
 8006adc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae6:	d108      	bne.n	8006afa <HAL_UART_Receive+0x8a>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	e003      	b.n	8006b02 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b0a:	e043      	b.n	8006b94 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2200      	movs	r2, #0
 8006b14:	2120      	movs	r1, #32
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 f84c 	bl	8006bb4 <UART_WaitOnFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e042      	b.n	8006bac <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10c      	bne.n	8006b46 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	3302      	adds	r3, #2
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e01f      	b.n	8006b86 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4e:	d007      	beq.n	8006b60 <HAL_UART_Receive+0xf0>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <HAL_UART_Receive+0xfe>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e008      	b.n	8006b80 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	3301      	adds	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1b6      	bne.n	8006b0c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e000      	b.n	8006bac <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006baa:	2302      	movs	r3, #2
  }
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc4:	e02c      	b.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bcc:	d028      	beq.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bd4:	f7fc fe7a 	bl	80038cc <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d21d      	bcs.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bf2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695a      	ldr	r2, [r3, #20]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e00f      	b.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	bf0c      	ite	eq
 8006c30:	2301      	moveq	r3, #1
 8006c32:	2300      	movne	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	461a      	mov	r2, r3
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d0c3      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c82:	f023 030c 	bic.w	r3, r3, #12
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a2c      	ldr	r2, [pc, #176]	; (8006d5c <UART_SetConfig+0x114>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d103      	bne.n	8006cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006cb0:	f7fe f858 	bl	8004d64 <HAL_RCC_GetPCLK2Freq>
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	e002      	b.n	8006cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006cb8:	f7fe f840 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8006cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009a      	lsls	r2, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd4:	4a22      	ldr	r2, [pc, #136]	; (8006d60 <UART_SetConfig+0x118>)
 8006cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cda:	095b      	lsrs	r3, r3, #5
 8006cdc:	0119      	lsls	r1, r3, #4
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009a      	lsls	r2, r3, #2
 8006ce8:	441a      	add	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <UART_SetConfig+0x118>)
 8006cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2064      	movs	r0, #100	; 0x64
 8006cfe:	fb00 f303 	mul.w	r3, r0, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	3332      	adds	r3, #50	; 0x32
 8006d08:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <UART_SetConfig+0x118>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d14:	4419      	add	r1, r3
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009a      	lsls	r2, r3, #2
 8006d20:	441a      	add	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <UART_SetConfig+0x118>)
 8006d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	2064      	movs	r0, #100	; 0x64
 8006d36:	fb00 f303 	mul.w	r3, r0, r3
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	3332      	adds	r3, #50	; 0x32
 8006d40:	4a07      	ldr	r2, [pc, #28]	; (8006d60 <UART_SetConfig+0x118>)
 8006d42:	fba2 2303 	umull	r2, r3, r2, r3
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	f003 020f 	and.w	r2, r3, #15
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	440a      	add	r2, r1
 8006d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40013800 	.word	0x40013800
 8006d60:	51eb851f 	.word	0x51eb851f

08006d64 <__errno>:
 8006d64:	4b01      	ldr	r3, [pc, #4]	; (8006d6c <__errno+0x8>)
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	2000000c 	.word	0x2000000c

08006d70 <__libc_init_array>:
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	2600      	movs	r6, #0
 8006d74:	4d0c      	ldr	r5, [pc, #48]	; (8006da8 <__libc_init_array+0x38>)
 8006d76:	4c0d      	ldr	r4, [pc, #52]	; (8006dac <__libc_init_array+0x3c>)
 8006d78:	1b64      	subs	r4, r4, r5
 8006d7a:	10a4      	asrs	r4, r4, #2
 8006d7c:	42a6      	cmp	r6, r4
 8006d7e:	d109      	bne.n	8006d94 <__libc_init_array+0x24>
 8006d80:	f004 f8f0 	bl	800af64 <_init>
 8006d84:	2600      	movs	r6, #0
 8006d86:	4d0a      	ldr	r5, [pc, #40]	; (8006db0 <__libc_init_array+0x40>)
 8006d88:	4c0a      	ldr	r4, [pc, #40]	; (8006db4 <__libc_init_array+0x44>)
 8006d8a:	1b64      	subs	r4, r4, r5
 8006d8c:	10a4      	asrs	r4, r4, #2
 8006d8e:	42a6      	cmp	r6, r4
 8006d90:	d105      	bne.n	8006d9e <__libc_init_array+0x2e>
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d98:	4798      	blx	r3
 8006d9a:	3601      	adds	r6, #1
 8006d9c:	e7ee      	b.n	8006d7c <__libc_init_array+0xc>
 8006d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da2:	4798      	blx	r3
 8006da4:	3601      	adds	r6, #1
 8006da6:	e7f2      	b.n	8006d8e <__libc_init_array+0x1e>
 8006da8:	0800b650 	.word	0x0800b650
 8006dac:	0800b650 	.word	0x0800b650
 8006db0:	0800b650 	.word	0x0800b650
 8006db4:	0800b654 	.word	0x0800b654

08006db8 <memset>:
 8006db8:	4603      	mov	r3, r0
 8006dba:	4402      	add	r2, r0
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d100      	bne.n	8006dc2 <memset+0xa>
 8006dc0:	4770      	bx	lr
 8006dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006dc6:	e7f9      	b.n	8006dbc <memset+0x4>

08006dc8 <__cvt>:
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dce:	461f      	mov	r7, r3
 8006dd0:	bfbb      	ittet	lt
 8006dd2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006dd6:	461f      	movlt	r7, r3
 8006dd8:	2300      	movge	r3, #0
 8006dda:	232d      	movlt	r3, #45	; 0x2d
 8006ddc:	b088      	sub	sp, #32
 8006dde:	4614      	mov	r4, r2
 8006de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006de2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006de4:	7013      	strb	r3, [r2, #0]
 8006de6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006de8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006dec:	f023 0820 	bic.w	r8, r3, #32
 8006df0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006df4:	d005      	beq.n	8006e02 <__cvt+0x3a>
 8006df6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dfa:	d100      	bne.n	8006dfe <__cvt+0x36>
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e000      	b.n	8006e04 <__cvt+0x3c>
 8006e02:	2303      	movs	r3, #3
 8006e04:	aa07      	add	r2, sp, #28
 8006e06:	9204      	str	r2, [sp, #16]
 8006e08:	aa06      	add	r2, sp, #24
 8006e0a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006e0e:	e9cd 3500 	strd	r3, r5, [sp]
 8006e12:	4622      	mov	r2, r4
 8006e14:	463b      	mov	r3, r7
 8006e16:	f000 fce7 	bl	80077e8 <_dtoa_r>
 8006e1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e1e:	4606      	mov	r6, r0
 8006e20:	d102      	bne.n	8006e28 <__cvt+0x60>
 8006e22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e24:	07db      	lsls	r3, r3, #31
 8006e26:	d522      	bpl.n	8006e6e <__cvt+0xa6>
 8006e28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e2c:	eb06 0905 	add.w	r9, r6, r5
 8006e30:	d110      	bne.n	8006e54 <__cvt+0x8c>
 8006e32:	7833      	ldrb	r3, [r6, #0]
 8006e34:	2b30      	cmp	r3, #48	; 0x30
 8006e36:	d10a      	bne.n	8006e4e <__cvt+0x86>
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4639      	mov	r1, r7
 8006e40:	f7f9 fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e44:	b918      	cbnz	r0, 8006e4e <__cvt+0x86>
 8006e46:	f1c5 0501 	rsb	r5, r5, #1
 8006e4a:	f8ca 5000 	str.w	r5, [sl]
 8006e4e:	f8da 3000 	ldr.w	r3, [sl]
 8006e52:	4499      	add	r9, r3
 8006e54:	2200      	movs	r2, #0
 8006e56:	2300      	movs	r3, #0
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	f7f9 fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8006e60:	b108      	cbz	r0, 8006e66 <__cvt+0x9e>
 8006e62:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e66:	2230      	movs	r2, #48	; 0x30
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	454b      	cmp	r3, r9
 8006e6c:	d307      	bcc.n	8006e7e <__cvt+0xb6>
 8006e6e:	4630      	mov	r0, r6
 8006e70:	9b07      	ldr	r3, [sp, #28]
 8006e72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e74:	1b9b      	subs	r3, r3, r6
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	b008      	add	sp, #32
 8006e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7e:	1c59      	adds	r1, r3, #1
 8006e80:	9107      	str	r1, [sp, #28]
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	e7f0      	b.n	8006e68 <__cvt+0xa0>

08006e86 <__exponent>:
 8006e86:	4603      	mov	r3, r0
 8006e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	f803 2b02 	strb.w	r2, [r3], #2
 8006e90:	bfb6      	itet	lt
 8006e92:	222d      	movlt	r2, #45	; 0x2d
 8006e94:	222b      	movge	r2, #43	; 0x2b
 8006e96:	4249      	neglt	r1, r1
 8006e98:	2909      	cmp	r1, #9
 8006e9a:	7042      	strb	r2, [r0, #1]
 8006e9c:	dd2b      	ble.n	8006ef6 <__exponent+0x70>
 8006e9e:	f10d 0407 	add.w	r4, sp, #7
 8006ea2:	46a4      	mov	ip, r4
 8006ea4:	270a      	movs	r7, #10
 8006ea6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006eaa:	460a      	mov	r2, r1
 8006eac:	46a6      	mov	lr, r4
 8006eae:	fb07 1516 	mls	r5, r7, r6, r1
 8006eb2:	2a63      	cmp	r2, #99	; 0x63
 8006eb4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006eb8:	4631      	mov	r1, r6
 8006eba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006ebe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ec2:	dcf0      	bgt.n	8006ea6 <__exponent+0x20>
 8006ec4:	3130      	adds	r1, #48	; 0x30
 8006ec6:	f1ae 0502 	sub.w	r5, lr, #2
 8006eca:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ece:	4629      	mov	r1, r5
 8006ed0:	1c44      	adds	r4, r0, #1
 8006ed2:	4561      	cmp	r1, ip
 8006ed4:	d30a      	bcc.n	8006eec <__exponent+0x66>
 8006ed6:	f10d 0209 	add.w	r2, sp, #9
 8006eda:	eba2 020e 	sub.w	r2, r2, lr
 8006ede:	4565      	cmp	r5, ip
 8006ee0:	bf88      	it	hi
 8006ee2:	2200      	movhi	r2, #0
 8006ee4:	4413      	add	r3, r2
 8006ee6:	1a18      	subs	r0, r3, r0
 8006ee8:	b003      	add	sp, #12
 8006eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ef0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ef4:	e7ed      	b.n	8006ed2 <__exponent+0x4c>
 8006ef6:	2330      	movs	r3, #48	; 0x30
 8006ef8:	3130      	adds	r1, #48	; 0x30
 8006efa:	7083      	strb	r3, [r0, #2]
 8006efc:	70c1      	strb	r1, [r0, #3]
 8006efe:	1d03      	adds	r3, r0, #4
 8006f00:	e7f1      	b.n	8006ee6 <__exponent+0x60>
	...

08006f04 <_printf_float>:
 8006f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	b091      	sub	sp, #68	; 0x44
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006f10:	4616      	mov	r6, r2
 8006f12:	461f      	mov	r7, r3
 8006f14:	4605      	mov	r5, r0
 8006f16:	f001 fa55 	bl	80083c4 <_localeconv_r>
 8006f1a:	6803      	ldr	r3, [r0, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f20:	f7f9 f916 	bl	8000150 <strlen>
 8006f24:	2300      	movs	r3, #0
 8006f26:	930e      	str	r3, [sp, #56]	; 0x38
 8006f28:	f8d8 3000 	ldr.w	r3, [r8]
 8006f2c:	900a      	str	r0, [sp, #40]	; 0x28
 8006f2e:	3307      	adds	r3, #7
 8006f30:	f023 0307 	bic.w	r3, r3, #7
 8006f34:	f103 0208 	add.w	r2, r3, #8
 8006f38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006f3c:	f8d4 b000 	ldr.w	fp, [r4]
 8006f40:	f8c8 2000 	str.w	r2, [r8]
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f4c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006f50:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006f54:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4b9c      	ldr	r3, [pc, #624]	; (80071d0 <_printf_float+0x2cc>)
 8006f5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f60:	f7f9 fd54 	bl	8000a0c <__aeabi_dcmpun>
 8006f64:	bb70      	cbnz	r0, 8006fc4 <_printf_float+0xc0>
 8006f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4b98      	ldr	r3, [pc, #608]	; (80071d0 <_printf_float+0x2cc>)
 8006f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f70:	f7f9 fd2e 	bl	80009d0 <__aeabi_dcmple>
 8006f74:	bb30      	cbnz	r0, 8006fc4 <_printf_float+0xc0>
 8006f76:	2200      	movs	r2, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4651      	mov	r1, sl
 8006f7e:	f7f9 fd1d 	bl	80009bc <__aeabi_dcmplt>
 8006f82:	b110      	cbz	r0, 8006f8a <_printf_float+0x86>
 8006f84:	232d      	movs	r3, #45	; 0x2d
 8006f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8a:	4b92      	ldr	r3, [pc, #584]	; (80071d4 <_printf_float+0x2d0>)
 8006f8c:	4892      	ldr	r0, [pc, #584]	; (80071d8 <_printf_float+0x2d4>)
 8006f8e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f92:	bf94      	ite	ls
 8006f94:	4698      	movls	r8, r3
 8006f96:	4680      	movhi	r8, r0
 8006f98:	2303      	movs	r3, #3
 8006f9a:	f04f 0a00 	mov.w	sl, #0
 8006f9e:	6123      	str	r3, [r4, #16]
 8006fa0:	f02b 0304 	bic.w	r3, fp, #4
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	4633      	mov	r3, r6
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	9700      	str	r7, [sp, #0]
 8006fae:	aa0f      	add	r2, sp, #60	; 0x3c
 8006fb0:	f000 f9d4 	bl	800735c <_printf_common>
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f040 8090 	bne.w	80070da <_printf_float+0x1d6>
 8006fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fbe:	b011      	add	sp, #68	; 0x44
 8006fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	4653      	mov	r3, sl
 8006fc8:	4640      	mov	r0, r8
 8006fca:	4651      	mov	r1, sl
 8006fcc:	f7f9 fd1e 	bl	8000a0c <__aeabi_dcmpun>
 8006fd0:	b148      	cbz	r0, 8006fe6 <_printf_float+0xe2>
 8006fd2:	f1ba 0f00 	cmp.w	sl, #0
 8006fd6:	bfb8      	it	lt
 8006fd8:	232d      	movlt	r3, #45	; 0x2d
 8006fda:	4880      	ldr	r0, [pc, #512]	; (80071dc <_printf_float+0x2d8>)
 8006fdc:	bfb8      	it	lt
 8006fde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fe2:	4b7f      	ldr	r3, [pc, #508]	; (80071e0 <_printf_float+0x2dc>)
 8006fe4:	e7d3      	b.n	8006f8e <_printf_float+0x8a>
 8006fe6:	6863      	ldr	r3, [r4, #4]
 8006fe8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	d142      	bne.n	8007076 <_printf_float+0x172>
 8006ff0:	2306      	movs	r3, #6
 8006ff2:	6063      	str	r3, [r4, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	9206      	str	r2, [sp, #24]
 8006ff8:	aa0e      	add	r2, sp, #56	; 0x38
 8006ffa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006ffe:	aa0d      	add	r2, sp, #52	; 0x34
 8007000:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007004:	9203      	str	r2, [sp, #12]
 8007006:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800700a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	4642      	mov	r2, r8
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4628      	mov	r0, r5
 8007018:	4653      	mov	r3, sl
 800701a:	910b      	str	r1, [sp, #44]	; 0x2c
 800701c:	f7ff fed4 	bl	8006dc8 <__cvt>
 8007020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007022:	4680      	mov	r8, r0
 8007024:	2947      	cmp	r1, #71	; 0x47
 8007026:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007028:	d108      	bne.n	800703c <_printf_float+0x138>
 800702a:	1cc8      	adds	r0, r1, #3
 800702c:	db02      	blt.n	8007034 <_printf_float+0x130>
 800702e:	6863      	ldr	r3, [r4, #4]
 8007030:	4299      	cmp	r1, r3
 8007032:	dd40      	ble.n	80070b6 <_printf_float+0x1b2>
 8007034:	f1a9 0902 	sub.w	r9, r9, #2
 8007038:	fa5f f989 	uxtb.w	r9, r9
 800703c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007040:	d81f      	bhi.n	8007082 <_printf_float+0x17e>
 8007042:	464a      	mov	r2, r9
 8007044:	3901      	subs	r1, #1
 8007046:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800704a:	910d      	str	r1, [sp, #52]	; 0x34
 800704c:	f7ff ff1b 	bl	8006e86 <__exponent>
 8007050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007052:	4682      	mov	sl, r0
 8007054:	1813      	adds	r3, r2, r0
 8007056:	2a01      	cmp	r2, #1
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	dc02      	bgt.n	8007062 <_printf_float+0x15e>
 800705c:	6822      	ldr	r2, [r4, #0]
 800705e:	07d2      	lsls	r2, r2, #31
 8007060:	d501      	bpl.n	8007066 <_printf_float+0x162>
 8007062:	3301      	adds	r3, #1
 8007064:	6123      	str	r3, [r4, #16]
 8007066:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800706a:	2b00      	cmp	r3, #0
 800706c:	d09b      	beq.n	8006fa6 <_printf_float+0xa2>
 800706e:	232d      	movs	r3, #45	; 0x2d
 8007070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007074:	e797      	b.n	8006fa6 <_printf_float+0xa2>
 8007076:	2947      	cmp	r1, #71	; 0x47
 8007078:	d1bc      	bne.n	8006ff4 <_printf_float+0xf0>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1ba      	bne.n	8006ff4 <_printf_float+0xf0>
 800707e:	2301      	movs	r3, #1
 8007080:	e7b7      	b.n	8006ff2 <_printf_float+0xee>
 8007082:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007086:	d118      	bne.n	80070ba <_printf_float+0x1b6>
 8007088:	2900      	cmp	r1, #0
 800708a:	6863      	ldr	r3, [r4, #4]
 800708c:	dd0b      	ble.n	80070a6 <_printf_float+0x1a2>
 800708e:	6121      	str	r1, [r4, #16]
 8007090:	b913      	cbnz	r3, 8007098 <_printf_float+0x194>
 8007092:	6822      	ldr	r2, [r4, #0]
 8007094:	07d0      	lsls	r0, r2, #31
 8007096:	d502      	bpl.n	800709e <_printf_float+0x19a>
 8007098:	3301      	adds	r3, #1
 800709a:	440b      	add	r3, r1
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	f04f 0a00 	mov.w	sl, #0
 80070a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80070a4:	e7df      	b.n	8007066 <_printf_float+0x162>
 80070a6:	b913      	cbnz	r3, 80070ae <_printf_float+0x1aa>
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	07d2      	lsls	r2, r2, #31
 80070ac:	d501      	bpl.n	80070b2 <_printf_float+0x1ae>
 80070ae:	3302      	adds	r3, #2
 80070b0:	e7f4      	b.n	800709c <_printf_float+0x198>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e7f2      	b.n	800709c <_printf_float+0x198>
 80070b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80070ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070bc:	4299      	cmp	r1, r3
 80070be:	db05      	blt.n	80070cc <_printf_float+0x1c8>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	6121      	str	r1, [r4, #16]
 80070c4:	07d8      	lsls	r0, r3, #31
 80070c6:	d5ea      	bpl.n	800709e <_printf_float+0x19a>
 80070c8:	1c4b      	adds	r3, r1, #1
 80070ca:	e7e7      	b.n	800709c <_printf_float+0x198>
 80070cc:	2900      	cmp	r1, #0
 80070ce:	bfcc      	ite	gt
 80070d0:	2201      	movgt	r2, #1
 80070d2:	f1c1 0202 	rsble	r2, r1, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	e7e0      	b.n	800709c <_printf_float+0x198>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	055a      	lsls	r2, r3, #21
 80070de:	d407      	bmi.n	80070f0 <_printf_float+0x1ec>
 80070e0:	6923      	ldr	r3, [r4, #16]
 80070e2:	4642      	mov	r2, r8
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	d12b      	bne.n	8007146 <_printf_float+0x242>
 80070ee:	e764      	b.n	8006fba <_printf_float+0xb6>
 80070f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070f4:	f240 80dd 	bls.w	80072b2 <_printf_float+0x3ae>
 80070f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070fc:	2200      	movs	r2, #0
 80070fe:	2300      	movs	r3, #0
 8007100:	f7f9 fc52 	bl	80009a8 <__aeabi_dcmpeq>
 8007104:	2800      	cmp	r0, #0
 8007106:	d033      	beq.n	8007170 <_printf_float+0x26c>
 8007108:	2301      	movs	r3, #1
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	4a35      	ldr	r2, [pc, #212]	; (80071e4 <_printf_float+0x2e0>)
 8007110:	47b8      	blx	r7
 8007112:	3001      	adds	r0, #1
 8007114:	f43f af51 	beq.w	8006fba <_printf_float+0xb6>
 8007118:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800711c:	429a      	cmp	r2, r3
 800711e:	db02      	blt.n	8007126 <_printf_float+0x222>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	07d8      	lsls	r0, r3, #31
 8007124:	d50f      	bpl.n	8007146 <_printf_float+0x242>
 8007126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	f43f af42 	beq.w	8006fba <_printf_float+0xb6>
 8007136:	f04f 0800 	mov.w	r8, #0
 800713a:	f104 091a 	add.w	r9, r4, #26
 800713e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007140:	3b01      	subs	r3, #1
 8007142:	4543      	cmp	r3, r8
 8007144:	dc09      	bgt.n	800715a <_printf_float+0x256>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	079b      	lsls	r3, r3, #30
 800714a:	f100 8102 	bmi.w	8007352 <_printf_float+0x44e>
 800714e:	68e0      	ldr	r0, [r4, #12]
 8007150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007152:	4298      	cmp	r0, r3
 8007154:	bfb8      	it	lt
 8007156:	4618      	movlt	r0, r3
 8007158:	e731      	b.n	8006fbe <_printf_float+0xba>
 800715a:	2301      	movs	r3, #1
 800715c:	464a      	mov	r2, r9
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	47b8      	blx	r7
 8007164:	3001      	adds	r0, #1
 8007166:	f43f af28 	beq.w	8006fba <_printf_float+0xb6>
 800716a:	f108 0801 	add.w	r8, r8, #1
 800716e:	e7e6      	b.n	800713e <_printf_float+0x23a>
 8007170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007172:	2b00      	cmp	r3, #0
 8007174:	dc38      	bgt.n	80071e8 <_printf_float+0x2e4>
 8007176:	2301      	movs	r3, #1
 8007178:	4631      	mov	r1, r6
 800717a:	4628      	mov	r0, r5
 800717c:	4a19      	ldr	r2, [pc, #100]	; (80071e4 <_printf_float+0x2e0>)
 800717e:	47b8      	blx	r7
 8007180:	3001      	adds	r0, #1
 8007182:	f43f af1a 	beq.w	8006fba <_printf_float+0xb6>
 8007186:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800718a:	4313      	orrs	r3, r2
 800718c:	d102      	bne.n	8007194 <_printf_float+0x290>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	07d9      	lsls	r1, r3, #31
 8007192:	d5d8      	bpl.n	8007146 <_printf_float+0x242>
 8007194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007198:	4631      	mov	r1, r6
 800719a:	4628      	mov	r0, r5
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	f43f af0b 	beq.w	8006fba <_printf_float+0xb6>
 80071a4:	f04f 0900 	mov.w	r9, #0
 80071a8:	f104 0a1a 	add.w	sl, r4, #26
 80071ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ae:	425b      	negs	r3, r3
 80071b0:	454b      	cmp	r3, r9
 80071b2:	dc01      	bgt.n	80071b8 <_printf_float+0x2b4>
 80071b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071b6:	e794      	b.n	80070e2 <_printf_float+0x1de>
 80071b8:	2301      	movs	r3, #1
 80071ba:	4652      	mov	r2, sl
 80071bc:	4631      	mov	r1, r6
 80071be:	4628      	mov	r0, r5
 80071c0:	47b8      	blx	r7
 80071c2:	3001      	adds	r0, #1
 80071c4:	f43f aef9 	beq.w	8006fba <_printf_float+0xb6>
 80071c8:	f109 0901 	add.w	r9, r9, #1
 80071cc:	e7ee      	b.n	80071ac <_printf_float+0x2a8>
 80071ce:	bf00      	nop
 80071d0:	7fefffff 	.word	0x7fefffff
 80071d4:	0800b230 	.word	0x0800b230
 80071d8:	0800b234 	.word	0x0800b234
 80071dc:	0800b23c 	.word	0x0800b23c
 80071e0:	0800b238 	.word	0x0800b238
 80071e4:	0800b240 	.word	0x0800b240
 80071e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071ec:	429a      	cmp	r2, r3
 80071ee:	bfa8      	it	ge
 80071f0:	461a      	movge	r2, r3
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	4691      	mov	r9, r2
 80071f6:	dc37      	bgt.n	8007268 <_printf_float+0x364>
 80071f8:	f04f 0b00 	mov.w	fp, #0
 80071fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007200:	f104 021a 	add.w	r2, r4, #26
 8007204:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007208:	ebaa 0309 	sub.w	r3, sl, r9
 800720c:	455b      	cmp	r3, fp
 800720e:	dc33      	bgt.n	8007278 <_printf_float+0x374>
 8007210:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007214:	429a      	cmp	r2, r3
 8007216:	db3b      	blt.n	8007290 <_printf_float+0x38c>
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	07da      	lsls	r2, r3, #31
 800721c:	d438      	bmi.n	8007290 <_printf_float+0x38c>
 800721e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007220:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007222:	eba2 030a 	sub.w	r3, r2, sl
 8007226:	eba2 0901 	sub.w	r9, r2, r1
 800722a:	4599      	cmp	r9, r3
 800722c:	bfa8      	it	ge
 800722e:	4699      	movge	r9, r3
 8007230:	f1b9 0f00 	cmp.w	r9, #0
 8007234:	dc34      	bgt.n	80072a0 <_printf_float+0x39c>
 8007236:	f04f 0800 	mov.w	r8, #0
 800723a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800723e:	f104 0a1a 	add.w	sl, r4, #26
 8007242:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	eba3 0309 	sub.w	r3, r3, r9
 800724c:	4543      	cmp	r3, r8
 800724e:	f77f af7a 	ble.w	8007146 <_printf_float+0x242>
 8007252:	2301      	movs	r3, #1
 8007254:	4652      	mov	r2, sl
 8007256:	4631      	mov	r1, r6
 8007258:	4628      	mov	r0, r5
 800725a:	47b8      	blx	r7
 800725c:	3001      	adds	r0, #1
 800725e:	f43f aeac 	beq.w	8006fba <_printf_float+0xb6>
 8007262:	f108 0801 	add.w	r8, r8, #1
 8007266:	e7ec      	b.n	8007242 <_printf_float+0x33e>
 8007268:	4613      	mov	r3, r2
 800726a:	4631      	mov	r1, r6
 800726c:	4642      	mov	r2, r8
 800726e:	4628      	mov	r0, r5
 8007270:	47b8      	blx	r7
 8007272:	3001      	adds	r0, #1
 8007274:	d1c0      	bne.n	80071f8 <_printf_float+0x2f4>
 8007276:	e6a0      	b.n	8006fba <_printf_float+0xb6>
 8007278:	2301      	movs	r3, #1
 800727a:	4631      	mov	r1, r6
 800727c:	4628      	mov	r0, r5
 800727e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007280:	47b8      	blx	r7
 8007282:	3001      	adds	r0, #1
 8007284:	f43f ae99 	beq.w	8006fba <_printf_float+0xb6>
 8007288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800728a:	f10b 0b01 	add.w	fp, fp, #1
 800728e:	e7b9      	b.n	8007204 <_printf_float+0x300>
 8007290:	4631      	mov	r1, r6
 8007292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007296:	4628      	mov	r0, r5
 8007298:	47b8      	blx	r7
 800729a:	3001      	adds	r0, #1
 800729c:	d1bf      	bne.n	800721e <_printf_float+0x31a>
 800729e:	e68c      	b.n	8006fba <_printf_float+0xb6>
 80072a0:	464b      	mov	r3, r9
 80072a2:	4631      	mov	r1, r6
 80072a4:	4628      	mov	r0, r5
 80072a6:	eb08 020a 	add.w	r2, r8, sl
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	d1c2      	bne.n	8007236 <_printf_float+0x332>
 80072b0:	e683      	b.n	8006fba <_printf_float+0xb6>
 80072b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072b4:	2a01      	cmp	r2, #1
 80072b6:	dc01      	bgt.n	80072bc <_printf_float+0x3b8>
 80072b8:	07db      	lsls	r3, r3, #31
 80072ba:	d537      	bpl.n	800732c <_printf_float+0x428>
 80072bc:	2301      	movs	r3, #1
 80072be:	4642      	mov	r2, r8
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b8      	blx	r7
 80072c6:	3001      	adds	r0, #1
 80072c8:	f43f ae77 	beq.w	8006fba <_printf_float+0xb6>
 80072cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f ae6f 	beq.w	8006fba <_printf_float+0xb6>
 80072dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072e0:	2200      	movs	r2, #0
 80072e2:	2300      	movs	r3, #0
 80072e4:	f7f9 fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80072e8:	b9d8      	cbnz	r0, 8007322 <_printf_float+0x41e>
 80072ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ec:	f108 0201 	add.w	r2, r8, #1
 80072f0:	3b01      	subs	r3, #1
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	d10e      	bne.n	800731a <_printf_float+0x416>
 80072fc:	e65d      	b.n	8006fba <_printf_float+0xb6>
 80072fe:	2301      	movs	r3, #1
 8007300:	464a      	mov	r2, r9
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	f43f ae56 	beq.w	8006fba <_printf_float+0xb6>
 800730e:	f108 0801 	add.w	r8, r8, #1
 8007312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007314:	3b01      	subs	r3, #1
 8007316:	4543      	cmp	r3, r8
 8007318:	dcf1      	bgt.n	80072fe <_printf_float+0x3fa>
 800731a:	4653      	mov	r3, sl
 800731c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007320:	e6e0      	b.n	80070e4 <_printf_float+0x1e0>
 8007322:	f04f 0800 	mov.w	r8, #0
 8007326:	f104 091a 	add.w	r9, r4, #26
 800732a:	e7f2      	b.n	8007312 <_printf_float+0x40e>
 800732c:	2301      	movs	r3, #1
 800732e:	4642      	mov	r2, r8
 8007330:	e7df      	b.n	80072f2 <_printf_float+0x3ee>
 8007332:	2301      	movs	r3, #1
 8007334:	464a      	mov	r2, r9
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f ae3c 	beq.w	8006fba <_printf_float+0xb6>
 8007342:	f108 0801 	add.w	r8, r8, #1
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800734a:	1a5b      	subs	r3, r3, r1
 800734c:	4543      	cmp	r3, r8
 800734e:	dcf0      	bgt.n	8007332 <_printf_float+0x42e>
 8007350:	e6fd      	b.n	800714e <_printf_float+0x24a>
 8007352:	f04f 0800 	mov.w	r8, #0
 8007356:	f104 0919 	add.w	r9, r4, #25
 800735a:	e7f4      	b.n	8007346 <_printf_float+0x442>

0800735c <_printf_common>:
 800735c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007360:	4616      	mov	r6, r2
 8007362:	4699      	mov	r9, r3
 8007364:	688a      	ldr	r2, [r1, #8]
 8007366:	690b      	ldr	r3, [r1, #16]
 8007368:	4607      	mov	r7, r0
 800736a:	4293      	cmp	r3, r2
 800736c:	bfb8      	it	lt
 800736e:	4613      	movlt	r3, r2
 8007370:	6033      	str	r3, [r6, #0]
 8007372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007376:	460c      	mov	r4, r1
 8007378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800737c:	b10a      	cbz	r2, 8007382 <_printf_common+0x26>
 800737e:	3301      	adds	r3, #1
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	0699      	lsls	r1, r3, #26
 8007386:	bf42      	ittt	mi
 8007388:	6833      	ldrmi	r3, [r6, #0]
 800738a:	3302      	addmi	r3, #2
 800738c:	6033      	strmi	r3, [r6, #0]
 800738e:	6825      	ldr	r5, [r4, #0]
 8007390:	f015 0506 	ands.w	r5, r5, #6
 8007394:	d106      	bne.n	80073a4 <_printf_common+0x48>
 8007396:	f104 0a19 	add.w	sl, r4, #25
 800739a:	68e3      	ldr	r3, [r4, #12]
 800739c:	6832      	ldr	r2, [r6, #0]
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	42ab      	cmp	r3, r5
 80073a2:	dc28      	bgt.n	80073f6 <_printf_common+0x9a>
 80073a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073a8:	1e13      	subs	r3, r2, #0
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	bf18      	it	ne
 80073ae:	2301      	movne	r3, #1
 80073b0:	0692      	lsls	r2, r2, #26
 80073b2:	d42d      	bmi.n	8007410 <_printf_common+0xb4>
 80073b4:	4649      	mov	r1, r9
 80073b6:	4638      	mov	r0, r7
 80073b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073bc:	47c0      	blx	r8
 80073be:	3001      	adds	r0, #1
 80073c0:	d020      	beq.n	8007404 <_printf_common+0xa8>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	68e5      	ldr	r5, [r4, #12]
 80073c6:	f003 0306 	and.w	r3, r3, #6
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	bf18      	it	ne
 80073ce:	2500      	movne	r5, #0
 80073d0:	6832      	ldr	r2, [r6, #0]
 80073d2:	f04f 0600 	mov.w	r6, #0
 80073d6:	68a3      	ldr	r3, [r4, #8]
 80073d8:	bf08      	it	eq
 80073da:	1aad      	subeq	r5, r5, r2
 80073dc:	6922      	ldr	r2, [r4, #16]
 80073de:	bf08      	it	eq
 80073e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073e4:	4293      	cmp	r3, r2
 80073e6:	bfc4      	itt	gt
 80073e8:	1a9b      	subgt	r3, r3, r2
 80073ea:	18ed      	addgt	r5, r5, r3
 80073ec:	341a      	adds	r4, #26
 80073ee:	42b5      	cmp	r5, r6
 80073f0:	d11a      	bne.n	8007428 <_printf_common+0xcc>
 80073f2:	2000      	movs	r0, #0
 80073f4:	e008      	b.n	8007408 <_printf_common+0xac>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4652      	mov	r2, sl
 80073fa:	4649      	mov	r1, r9
 80073fc:	4638      	mov	r0, r7
 80073fe:	47c0      	blx	r8
 8007400:	3001      	adds	r0, #1
 8007402:	d103      	bne.n	800740c <_printf_common+0xb0>
 8007404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800740c:	3501      	adds	r5, #1
 800740e:	e7c4      	b.n	800739a <_printf_common+0x3e>
 8007410:	2030      	movs	r0, #48	; 0x30
 8007412:	18e1      	adds	r1, r4, r3
 8007414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800741e:	4422      	add	r2, r4
 8007420:	3302      	adds	r3, #2
 8007422:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007426:	e7c5      	b.n	80073b4 <_printf_common+0x58>
 8007428:	2301      	movs	r3, #1
 800742a:	4622      	mov	r2, r4
 800742c:	4649      	mov	r1, r9
 800742e:	4638      	mov	r0, r7
 8007430:	47c0      	blx	r8
 8007432:	3001      	adds	r0, #1
 8007434:	d0e6      	beq.n	8007404 <_printf_common+0xa8>
 8007436:	3601      	adds	r6, #1
 8007438:	e7d9      	b.n	80073ee <_printf_common+0x92>
	...

0800743c <_printf_i>:
 800743c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	460c      	mov	r4, r1
 8007442:	7e27      	ldrb	r7, [r4, #24]
 8007444:	4691      	mov	r9, r2
 8007446:	2f78      	cmp	r7, #120	; 0x78
 8007448:	4680      	mov	r8, r0
 800744a:	469a      	mov	sl, r3
 800744c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800744e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007452:	d807      	bhi.n	8007464 <_printf_i+0x28>
 8007454:	2f62      	cmp	r7, #98	; 0x62
 8007456:	d80a      	bhi.n	800746e <_printf_i+0x32>
 8007458:	2f00      	cmp	r7, #0
 800745a:	f000 80d9 	beq.w	8007610 <_printf_i+0x1d4>
 800745e:	2f58      	cmp	r7, #88	; 0x58
 8007460:	f000 80a4 	beq.w	80075ac <_printf_i+0x170>
 8007464:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800746c:	e03a      	b.n	80074e4 <_printf_i+0xa8>
 800746e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007472:	2b15      	cmp	r3, #21
 8007474:	d8f6      	bhi.n	8007464 <_printf_i+0x28>
 8007476:	a001      	add	r0, pc, #4	; (adr r0, 800747c <_printf_i+0x40>)
 8007478:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800747c:	080074d5 	.word	0x080074d5
 8007480:	080074e9 	.word	0x080074e9
 8007484:	08007465 	.word	0x08007465
 8007488:	08007465 	.word	0x08007465
 800748c:	08007465 	.word	0x08007465
 8007490:	08007465 	.word	0x08007465
 8007494:	080074e9 	.word	0x080074e9
 8007498:	08007465 	.word	0x08007465
 800749c:	08007465 	.word	0x08007465
 80074a0:	08007465 	.word	0x08007465
 80074a4:	08007465 	.word	0x08007465
 80074a8:	080075f7 	.word	0x080075f7
 80074ac:	08007519 	.word	0x08007519
 80074b0:	080075d9 	.word	0x080075d9
 80074b4:	08007465 	.word	0x08007465
 80074b8:	08007465 	.word	0x08007465
 80074bc:	08007619 	.word	0x08007619
 80074c0:	08007465 	.word	0x08007465
 80074c4:	08007519 	.word	0x08007519
 80074c8:	08007465 	.word	0x08007465
 80074cc:	08007465 	.word	0x08007465
 80074d0:	080075e1 	.word	0x080075e1
 80074d4:	680b      	ldr	r3, [r1, #0]
 80074d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074da:	1d1a      	adds	r2, r3, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	600a      	str	r2, [r1, #0]
 80074e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0a4      	b.n	8007632 <_printf_i+0x1f6>
 80074e8:	6825      	ldr	r5, [r4, #0]
 80074ea:	6808      	ldr	r0, [r1, #0]
 80074ec:	062e      	lsls	r6, r5, #24
 80074ee:	f100 0304 	add.w	r3, r0, #4
 80074f2:	d50a      	bpl.n	800750a <_printf_i+0xce>
 80074f4:	6805      	ldr	r5, [r0, #0]
 80074f6:	600b      	str	r3, [r1, #0]
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	da03      	bge.n	8007504 <_printf_i+0xc8>
 80074fc:	232d      	movs	r3, #45	; 0x2d
 80074fe:	426d      	negs	r5, r5
 8007500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007504:	230a      	movs	r3, #10
 8007506:	485e      	ldr	r0, [pc, #376]	; (8007680 <_printf_i+0x244>)
 8007508:	e019      	b.n	800753e <_printf_i+0x102>
 800750a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800750e:	6805      	ldr	r5, [r0, #0]
 8007510:	600b      	str	r3, [r1, #0]
 8007512:	bf18      	it	ne
 8007514:	b22d      	sxthne	r5, r5
 8007516:	e7ef      	b.n	80074f8 <_printf_i+0xbc>
 8007518:	680b      	ldr	r3, [r1, #0]
 800751a:	6825      	ldr	r5, [r4, #0]
 800751c:	1d18      	adds	r0, r3, #4
 800751e:	6008      	str	r0, [r1, #0]
 8007520:	0628      	lsls	r0, r5, #24
 8007522:	d501      	bpl.n	8007528 <_printf_i+0xec>
 8007524:	681d      	ldr	r5, [r3, #0]
 8007526:	e002      	b.n	800752e <_printf_i+0xf2>
 8007528:	0669      	lsls	r1, r5, #25
 800752a:	d5fb      	bpl.n	8007524 <_printf_i+0xe8>
 800752c:	881d      	ldrh	r5, [r3, #0]
 800752e:	2f6f      	cmp	r7, #111	; 0x6f
 8007530:	bf0c      	ite	eq
 8007532:	2308      	moveq	r3, #8
 8007534:	230a      	movne	r3, #10
 8007536:	4852      	ldr	r0, [pc, #328]	; (8007680 <_printf_i+0x244>)
 8007538:	2100      	movs	r1, #0
 800753a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800753e:	6866      	ldr	r6, [r4, #4]
 8007540:	2e00      	cmp	r6, #0
 8007542:	bfa8      	it	ge
 8007544:	6821      	ldrge	r1, [r4, #0]
 8007546:	60a6      	str	r6, [r4, #8]
 8007548:	bfa4      	itt	ge
 800754a:	f021 0104 	bicge.w	r1, r1, #4
 800754e:	6021      	strge	r1, [r4, #0]
 8007550:	b90d      	cbnz	r5, 8007556 <_printf_i+0x11a>
 8007552:	2e00      	cmp	r6, #0
 8007554:	d04d      	beq.n	80075f2 <_printf_i+0x1b6>
 8007556:	4616      	mov	r6, r2
 8007558:	fbb5 f1f3 	udiv	r1, r5, r3
 800755c:	fb03 5711 	mls	r7, r3, r1, r5
 8007560:	5dc7      	ldrb	r7, [r0, r7]
 8007562:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007566:	462f      	mov	r7, r5
 8007568:	42bb      	cmp	r3, r7
 800756a:	460d      	mov	r5, r1
 800756c:	d9f4      	bls.n	8007558 <_printf_i+0x11c>
 800756e:	2b08      	cmp	r3, #8
 8007570:	d10b      	bne.n	800758a <_printf_i+0x14e>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	07df      	lsls	r7, r3, #31
 8007576:	d508      	bpl.n	800758a <_printf_i+0x14e>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	6861      	ldr	r1, [r4, #4]
 800757c:	4299      	cmp	r1, r3
 800757e:	bfde      	ittt	le
 8007580:	2330      	movle	r3, #48	; 0x30
 8007582:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007586:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800758a:	1b92      	subs	r2, r2, r6
 800758c:	6122      	str	r2, [r4, #16]
 800758e:	464b      	mov	r3, r9
 8007590:	4621      	mov	r1, r4
 8007592:	4640      	mov	r0, r8
 8007594:	f8cd a000 	str.w	sl, [sp]
 8007598:	aa03      	add	r2, sp, #12
 800759a:	f7ff fedf 	bl	800735c <_printf_common>
 800759e:	3001      	adds	r0, #1
 80075a0:	d14c      	bne.n	800763c <_printf_i+0x200>
 80075a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075a6:	b004      	add	sp, #16
 80075a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ac:	4834      	ldr	r0, [pc, #208]	; (8007680 <_printf_i+0x244>)
 80075ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075b2:	680e      	ldr	r6, [r1, #0]
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80075ba:	061f      	lsls	r7, r3, #24
 80075bc:	600e      	str	r6, [r1, #0]
 80075be:	d514      	bpl.n	80075ea <_printf_i+0x1ae>
 80075c0:	07d9      	lsls	r1, r3, #31
 80075c2:	bf44      	itt	mi
 80075c4:	f043 0320 	orrmi.w	r3, r3, #32
 80075c8:	6023      	strmi	r3, [r4, #0]
 80075ca:	b91d      	cbnz	r5, 80075d4 <_printf_i+0x198>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	f023 0320 	bic.w	r3, r3, #32
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	2310      	movs	r3, #16
 80075d6:	e7af      	b.n	8007538 <_printf_i+0xfc>
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	f043 0320 	orr.w	r3, r3, #32
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	2378      	movs	r3, #120	; 0x78
 80075e2:	4828      	ldr	r0, [pc, #160]	; (8007684 <_printf_i+0x248>)
 80075e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075e8:	e7e3      	b.n	80075b2 <_printf_i+0x176>
 80075ea:	065e      	lsls	r6, r3, #25
 80075ec:	bf48      	it	mi
 80075ee:	b2ad      	uxthmi	r5, r5
 80075f0:	e7e6      	b.n	80075c0 <_printf_i+0x184>
 80075f2:	4616      	mov	r6, r2
 80075f4:	e7bb      	b.n	800756e <_printf_i+0x132>
 80075f6:	680b      	ldr	r3, [r1, #0]
 80075f8:	6826      	ldr	r6, [r4, #0]
 80075fa:	1d1d      	adds	r5, r3, #4
 80075fc:	6960      	ldr	r0, [r4, #20]
 80075fe:	600d      	str	r5, [r1, #0]
 8007600:	0635      	lsls	r5, r6, #24
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	d501      	bpl.n	800760a <_printf_i+0x1ce>
 8007606:	6018      	str	r0, [r3, #0]
 8007608:	e002      	b.n	8007610 <_printf_i+0x1d4>
 800760a:	0671      	lsls	r1, r6, #25
 800760c:	d5fb      	bpl.n	8007606 <_printf_i+0x1ca>
 800760e:	8018      	strh	r0, [r3, #0]
 8007610:	2300      	movs	r3, #0
 8007612:	4616      	mov	r6, r2
 8007614:	6123      	str	r3, [r4, #16]
 8007616:	e7ba      	b.n	800758e <_printf_i+0x152>
 8007618:	680b      	ldr	r3, [r1, #0]
 800761a:	1d1a      	adds	r2, r3, #4
 800761c:	600a      	str	r2, [r1, #0]
 800761e:	681e      	ldr	r6, [r3, #0]
 8007620:	2100      	movs	r1, #0
 8007622:	4630      	mov	r0, r6
 8007624:	6862      	ldr	r2, [r4, #4]
 8007626:	f000 fed9 	bl	80083dc <memchr>
 800762a:	b108      	cbz	r0, 8007630 <_printf_i+0x1f4>
 800762c:	1b80      	subs	r0, r0, r6
 800762e:	6060      	str	r0, [r4, #4]
 8007630:	6863      	ldr	r3, [r4, #4]
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	2300      	movs	r3, #0
 8007636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800763a:	e7a8      	b.n	800758e <_printf_i+0x152>
 800763c:	4632      	mov	r2, r6
 800763e:	4649      	mov	r1, r9
 8007640:	4640      	mov	r0, r8
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	47d0      	blx	sl
 8007646:	3001      	adds	r0, #1
 8007648:	d0ab      	beq.n	80075a2 <_printf_i+0x166>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	079b      	lsls	r3, r3, #30
 800764e:	d413      	bmi.n	8007678 <_printf_i+0x23c>
 8007650:	68e0      	ldr	r0, [r4, #12]
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	4298      	cmp	r0, r3
 8007656:	bfb8      	it	lt
 8007658:	4618      	movlt	r0, r3
 800765a:	e7a4      	b.n	80075a6 <_printf_i+0x16a>
 800765c:	2301      	movs	r3, #1
 800765e:	4632      	mov	r2, r6
 8007660:	4649      	mov	r1, r9
 8007662:	4640      	mov	r0, r8
 8007664:	47d0      	blx	sl
 8007666:	3001      	adds	r0, #1
 8007668:	d09b      	beq.n	80075a2 <_printf_i+0x166>
 800766a:	3501      	adds	r5, #1
 800766c:	68e3      	ldr	r3, [r4, #12]
 800766e:	9903      	ldr	r1, [sp, #12]
 8007670:	1a5b      	subs	r3, r3, r1
 8007672:	42ab      	cmp	r3, r5
 8007674:	dcf2      	bgt.n	800765c <_printf_i+0x220>
 8007676:	e7eb      	b.n	8007650 <_printf_i+0x214>
 8007678:	2500      	movs	r5, #0
 800767a:	f104 0619 	add.w	r6, r4, #25
 800767e:	e7f5      	b.n	800766c <_printf_i+0x230>
 8007680:	0800b242 	.word	0x0800b242
 8007684:	0800b253 	.word	0x0800b253

08007688 <siprintf>:
 8007688:	b40e      	push	{r1, r2, r3}
 800768a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800768e:	b500      	push	{lr}
 8007690:	b09c      	sub	sp, #112	; 0x70
 8007692:	ab1d      	add	r3, sp, #116	; 0x74
 8007694:	9002      	str	r0, [sp, #8]
 8007696:	9006      	str	r0, [sp, #24]
 8007698:	9107      	str	r1, [sp, #28]
 800769a:	9104      	str	r1, [sp, #16]
 800769c:	4808      	ldr	r0, [pc, #32]	; (80076c0 <siprintf+0x38>)
 800769e:	4909      	ldr	r1, [pc, #36]	; (80076c4 <siprintf+0x3c>)
 80076a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a4:	9105      	str	r1, [sp, #20]
 80076a6:	6800      	ldr	r0, [r0, #0]
 80076a8:	a902      	add	r1, sp, #8
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	f001 fb44 	bl	8008d38 <_svfiprintf_r>
 80076b0:	2200      	movs	r2, #0
 80076b2:	9b02      	ldr	r3, [sp, #8]
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	b01c      	add	sp, #112	; 0x70
 80076b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076bc:	b003      	add	sp, #12
 80076be:	4770      	bx	lr
 80076c0:	2000000c 	.word	0x2000000c
 80076c4:	ffff0208 	.word	0xffff0208

080076c8 <quorem>:
 80076c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	6903      	ldr	r3, [r0, #16]
 80076ce:	690c      	ldr	r4, [r1, #16]
 80076d0:	4607      	mov	r7, r0
 80076d2:	42a3      	cmp	r3, r4
 80076d4:	f2c0 8083 	blt.w	80077de <quorem+0x116>
 80076d8:	3c01      	subs	r4, #1
 80076da:	f100 0514 	add.w	r5, r0, #20
 80076de:	f101 0814 	add.w	r8, r1, #20
 80076e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076f0:	3301      	adds	r3, #1
 80076f2:	429a      	cmp	r2, r3
 80076f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80076f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007700:	d332      	bcc.n	8007768 <quorem+0xa0>
 8007702:	f04f 0e00 	mov.w	lr, #0
 8007706:	4640      	mov	r0, r8
 8007708:	46ac      	mov	ip, r5
 800770a:	46f2      	mov	sl, lr
 800770c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007710:	b293      	uxth	r3, r2
 8007712:	fb06 e303 	mla	r3, r6, r3, lr
 8007716:	0c12      	lsrs	r2, r2, #16
 8007718:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800771c:	fb06 e202 	mla	r2, r6, r2, lr
 8007720:	b29b      	uxth	r3, r3
 8007722:	ebaa 0303 	sub.w	r3, sl, r3
 8007726:	f8dc a000 	ldr.w	sl, [ip]
 800772a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800772e:	fa1f fa8a 	uxth.w	sl, sl
 8007732:	4453      	add	r3, sl
 8007734:	fa1f fa82 	uxth.w	sl, r2
 8007738:	f8dc 2000 	ldr.w	r2, [ip]
 800773c:	4581      	cmp	r9, r0
 800773e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007746:	b29b      	uxth	r3, r3
 8007748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800774c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007750:	f84c 3b04 	str.w	r3, [ip], #4
 8007754:	d2da      	bcs.n	800770c <quorem+0x44>
 8007756:	f855 300b 	ldr.w	r3, [r5, fp]
 800775a:	b92b      	cbnz	r3, 8007768 <quorem+0xa0>
 800775c:	9b01      	ldr	r3, [sp, #4]
 800775e:	3b04      	subs	r3, #4
 8007760:	429d      	cmp	r5, r3
 8007762:	461a      	mov	r2, r3
 8007764:	d32f      	bcc.n	80077c6 <quorem+0xfe>
 8007766:	613c      	str	r4, [r7, #16]
 8007768:	4638      	mov	r0, r7
 800776a:	f001 f8cd 	bl	8008908 <__mcmp>
 800776e:	2800      	cmp	r0, #0
 8007770:	db25      	blt.n	80077be <quorem+0xf6>
 8007772:	4628      	mov	r0, r5
 8007774:	f04f 0c00 	mov.w	ip, #0
 8007778:	3601      	adds	r6, #1
 800777a:	f858 1b04 	ldr.w	r1, [r8], #4
 800777e:	f8d0 e000 	ldr.w	lr, [r0]
 8007782:	b28b      	uxth	r3, r1
 8007784:	ebac 0303 	sub.w	r3, ip, r3
 8007788:	fa1f f28e 	uxth.w	r2, lr
 800778c:	4413      	add	r3, r2
 800778e:	0c0a      	lsrs	r2, r1, #16
 8007790:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800779e:	45c1      	cmp	r9, r8
 80077a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077a4:	f840 3b04 	str.w	r3, [r0], #4
 80077a8:	d2e7      	bcs.n	800777a <quorem+0xb2>
 80077aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b2:	b922      	cbnz	r2, 80077be <quorem+0xf6>
 80077b4:	3b04      	subs	r3, #4
 80077b6:	429d      	cmp	r5, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	d30a      	bcc.n	80077d2 <quorem+0x10a>
 80077bc:	613c      	str	r4, [r7, #16]
 80077be:	4630      	mov	r0, r6
 80077c0:	b003      	add	sp, #12
 80077c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	3b04      	subs	r3, #4
 80077ca:	2a00      	cmp	r2, #0
 80077cc:	d1cb      	bne.n	8007766 <quorem+0x9e>
 80077ce:	3c01      	subs	r4, #1
 80077d0:	e7c6      	b.n	8007760 <quorem+0x98>
 80077d2:	6812      	ldr	r2, [r2, #0]
 80077d4:	3b04      	subs	r3, #4
 80077d6:	2a00      	cmp	r2, #0
 80077d8:	d1f0      	bne.n	80077bc <quorem+0xf4>
 80077da:	3c01      	subs	r4, #1
 80077dc:	e7eb      	b.n	80077b6 <quorem+0xee>
 80077de:	2000      	movs	r0, #0
 80077e0:	e7ee      	b.n	80077c0 <quorem+0xf8>
 80077e2:	0000      	movs	r0, r0
 80077e4:	0000      	movs	r0, r0
	...

080077e8 <_dtoa_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	4616      	mov	r6, r2
 80077ee:	461f      	mov	r7, r3
 80077f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80077f2:	b099      	sub	sp, #100	; 0x64
 80077f4:	4605      	mov	r5, r0
 80077f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80077fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80077fe:	b974      	cbnz	r4, 800781e <_dtoa_r+0x36>
 8007800:	2010      	movs	r0, #16
 8007802:	f000 fde3 	bl	80083cc <malloc>
 8007806:	4602      	mov	r2, r0
 8007808:	6268      	str	r0, [r5, #36]	; 0x24
 800780a:	b920      	cbnz	r0, 8007816 <_dtoa_r+0x2e>
 800780c:	21ea      	movs	r1, #234	; 0xea
 800780e:	4bae      	ldr	r3, [pc, #696]	; (8007ac8 <_dtoa_r+0x2e0>)
 8007810:	48ae      	ldr	r0, [pc, #696]	; (8007acc <_dtoa_r+0x2e4>)
 8007812:	f001 fba1 	bl	8008f58 <__assert_func>
 8007816:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800781a:	6004      	str	r4, [r0, #0]
 800781c:	60c4      	str	r4, [r0, #12]
 800781e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007820:	6819      	ldr	r1, [r3, #0]
 8007822:	b151      	cbz	r1, 800783a <_dtoa_r+0x52>
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	2301      	movs	r3, #1
 8007828:	4093      	lsls	r3, r2
 800782a:	604a      	str	r2, [r1, #4]
 800782c:	608b      	str	r3, [r1, #8]
 800782e:	4628      	mov	r0, r5
 8007830:	f000 fe30 	bl	8008494 <_Bfree>
 8007834:	2200      	movs	r2, #0
 8007836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	1e3b      	subs	r3, r7, #0
 800783c:	bfaf      	iteee	ge
 800783e:	2300      	movge	r3, #0
 8007840:	2201      	movlt	r2, #1
 8007842:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007846:	9305      	strlt	r3, [sp, #20]
 8007848:	bfa8      	it	ge
 800784a:	f8c8 3000 	strge.w	r3, [r8]
 800784e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007852:	4b9f      	ldr	r3, [pc, #636]	; (8007ad0 <_dtoa_r+0x2e8>)
 8007854:	bfb8      	it	lt
 8007856:	f8c8 2000 	strlt.w	r2, [r8]
 800785a:	ea33 0309 	bics.w	r3, r3, r9
 800785e:	d119      	bne.n	8007894 <_dtoa_r+0xac>
 8007860:	f242 730f 	movw	r3, #9999	; 0x270f
 8007864:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800786c:	4333      	orrs	r3, r6
 800786e:	f000 8580 	beq.w	8008372 <_dtoa_r+0xb8a>
 8007872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007874:	b953      	cbnz	r3, 800788c <_dtoa_r+0xa4>
 8007876:	4b97      	ldr	r3, [pc, #604]	; (8007ad4 <_dtoa_r+0x2ec>)
 8007878:	e022      	b.n	80078c0 <_dtoa_r+0xd8>
 800787a:	4b97      	ldr	r3, [pc, #604]	; (8007ad8 <_dtoa_r+0x2f0>)
 800787c:	9308      	str	r3, [sp, #32]
 800787e:	3308      	adds	r3, #8
 8007880:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	9808      	ldr	r0, [sp, #32]
 8007886:	b019      	add	sp, #100	; 0x64
 8007888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788c:	4b91      	ldr	r3, [pc, #580]	; (8007ad4 <_dtoa_r+0x2ec>)
 800788e:	9308      	str	r3, [sp, #32]
 8007890:	3303      	adds	r3, #3
 8007892:	e7f5      	b.n	8007880 <_dtoa_r+0x98>
 8007894:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007898:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800789c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078a0:	2200      	movs	r2, #0
 80078a2:	2300      	movs	r3, #0
 80078a4:	f7f9 f880 	bl	80009a8 <__aeabi_dcmpeq>
 80078a8:	4680      	mov	r8, r0
 80078aa:	b158      	cbz	r0, 80078c4 <_dtoa_r+0xdc>
 80078ac:	2301      	movs	r3, #1
 80078ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8559 	beq.w	800836c <_dtoa_r+0xb84>
 80078ba:	4888      	ldr	r0, [pc, #544]	; (8007adc <_dtoa_r+0x2f4>)
 80078bc:	6018      	str	r0, [r3, #0]
 80078be:	1e43      	subs	r3, r0, #1
 80078c0:	9308      	str	r3, [sp, #32]
 80078c2:	e7df      	b.n	8007884 <_dtoa_r+0x9c>
 80078c4:	ab16      	add	r3, sp, #88	; 0x58
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	ab17      	add	r3, sp, #92	; 0x5c
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4628      	mov	r0, r5
 80078ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078d2:	f001 f8c5 	bl	8008a60 <__d2b>
 80078d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80078da:	4682      	mov	sl, r0
 80078dc:	2c00      	cmp	r4, #0
 80078de:	d07e      	beq.n	80079de <_dtoa_r+0x1f6>
 80078e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80078ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80078f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80078f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80078fa:	2200      	movs	r2, #0
 80078fc:	4b78      	ldr	r3, [pc, #480]	; (8007ae0 <_dtoa_r+0x2f8>)
 80078fe:	f7f8 fc33 	bl	8000168 <__aeabi_dsub>
 8007902:	a36b      	add	r3, pc, #428	; (adr r3, 8007ab0 <_dtoa_r+0x2c8>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fde6 	bl	80004d8 <__aeabi_dmul>
 800790c:	a36a      	add	r3, pc, #424	; (adr r3, 8007ab8 <_dtoa_r+0x2d0>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f7f8 fc2b 	bl	800016c <__adddf3>
 8007916:	4606      	mov	r6, r0
 8007918:	4620      	mov	r0, r4
 800791a:	460f      	mov	r7, r1
 800791c:	f7f8 fd72 	bl	8000404 <__aeabi_i2d>
 8007920:	a367      	add	r3, pc, #412	; (adr r3, 8007ac0 <_dtoa_r+0x2d8>)
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f7f8 fdd7 	bl	80004d8 <__aeabi_dmul>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4630      	mov	r0, r6
 8007930:	4639      	mov	r1, r7
 8007932:	f7f8 fc1b 	bl	800016c <__adddf3>
 8007936:	4606      	mov	r6, r0
 8007938:	460f      	mov	r7, r1
 800793a:	f7f9 f87d 	bl	8000a38 <__aeabi_d2iz>
 800793e:	2200      	movs	r2, #0
 8007940:	4681      	mov	r9, r0
 8007942:	2300      	movs	r3, #0
 8007944:	4630      	mov	r0, r6
 8007946:	4639      	mov	r1, r7
 8007948:	f7f9 f838 	bl	80009bc <__aeabi_dcmplt>
 800794c:	b148      	cbz	r0, 8007962 <_dtoa_r+0x17a>
 800794e:	4648      	mov	r0, r9
 8007950:	f7f8 fd58 	bl	8000404 <__aeabi_i2d>
 8007954:	4632      	mov	r2, r6
 8007956:	463b      	mov	r3, r7
 8007958:	f7f9 f826 	bl	80009a8 <__aeabi_dcmpeq>
 800795c:	b908      	cbnz	r0, 8007962 <_dtoa_r+0x17a>
 800795e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007962:	f1b9 0f16 	cmp.w	r9, #22
 8007966:	d857      	bhi.n	8007a18 <_dtoa_r+0x230>
 8007968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800796c:	4b5d      	ldr	r3, [pc, #372]	; (8007ae4 <_dtoa_r+0x2fc>)
 800796e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007976:	f7f9 f821 	bl	80009bc <__aeabi_dcmplt>
 800797a:	2800      	cmp	r0, #0
 800797c:	d04e      	beq.n	8007a1c <_dtoa_r+0x234>
 800797e:	2300      	movs	r3, #0
 8007980:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007984:	930f      	str	r3, [sp, #60]	; 0x3c
 8007986:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007988:	1b1c      	subs	r4, r3, r4
 800798a:	1e63      	subs	r3, r4, #1
 800798c:	9309      	str	r3, [sp, #36]	; 0x24
 800798e:	bf49      	itett	mi
 8007990:	f1c4 0301 	rsbmi	r3, r4, #1
 8007994:	2300      	movpl	r3, #0
 8007996:	9306      	strmi	r3, [sp, #24]
 8007998:	2300      	movmi	r3, #0
 800799a:	bf54      	ite	pl
 800799c:	9306      	strpl	r3, [sp, #24]
 800799e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80079a0:	f1b9 0f00 	cmp.w	r9, #0
 80079a4:	db3c      	blt.n	8007a20 <_dtoa_r+0x238>
 80079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80079ac:	444b      	add	r3, r9
 80079ae:	9309      	str	r3, [sp, #36]	; 0x24
 80079b0:	2300      	movs	r3, #0
 80079b2:	930a      	str	r3, [sp, #40]	; 0x28
 80079b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079b6:	2b09      	cmp	r3, #9
 80079b8:	d86c      	bhi.n	8007a94 <_dtoa_r+0x2ac>
 80079ba:	2b05      	cmp	r3, #5
 80079bc:	bfc4      	itt	gt
 80079be:	3b04      	subgt	r3, #4
 80079c0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80079c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079c4:	bfc8      	it	gt
 80079c6:	2400      	movgt	r4, #0
 80079c8:	f1a3 0302 	sub.w	r3, r3, #2
 80079cc:	bfd8      	it	le
 80079ce:	2401      	movle	r4, #1
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	f200 808b 	bhi.w	8007aec <_dtoa_r+0x304>
 80079d6:	e8df f003 	tbb	[pc, r3]
 80079da:	4f2d      	.short	0x4f2d
 80079dc:	5b4d      	.short	0x5b4d
 80079de:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80079e2:	441c      	add	r4, r3
 80079e4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	bfc3      	ittte	gt
 80079ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079f0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80079f4:	fa09 f303 	lslgt.w	r3, r9, r3
 80079f8:	f1c3 0320 	rsble	r3, r3, #32
 80079fc:	bfc6      	itte	gt
 80079fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a02:	4318      	orrgt	r0, r3
 8007a04:	fa06 f003 	lslle.w	r0, r6, r3
 8007a08:	f7f8 fcec 	bl	80003e4 <__aeabi_ui2d>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007a12:	3c01      	subs	r4, #1
 8007a14:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a16:	e770      	b.n	80078fa <_dtoa_r+0x112>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e7b3      	b.n	8007984 <_dtoa_r+0x19c>
 8007a1c:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a1e:	e7b2      	b.n	8007986 <_dtoa_r+0x19e>
 8007a20:	9b06      	ldr	r3, [sp, #24]
 8007a22:	eba3 0309 	sub.w	r3, r3, r9
 8007a26:	9306      	str	r3, [sp, #24]
 8007a28:	f1c9 0300 	rsb	r3, r9, #0
 8007a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8007a2e:	2300      	movs	r3, #0
 8007a30:	930e      	str	r3, [sp, #56]	; 0x38
 8007a32:	e7bf      	b.n	80079b4 <_dtoa_r+0x1cc>
 8007a34:	2300      	movs	r3, #0
 8007a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dc59      	bgt.n	8007af2 <_dtoa_r+0x30a>
 8007a3e:	f04f 0b01 	mov.w	fp, #1
 8007a42:	465b      	mov	r3, fp
 8007a44:	f8cd b008 	str.w	fp, [sp, #8]
 8007a48:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007a50:	6042      	str	r2, [r0, #4]
 8007a52:	2204      	movs	r2, #4
 8007a54:	f102 0614 	add.w	r6, r2, #20
 8007a58:	429e      	cmp	r6, r3
 8007a5a:	6841      	ldr	r1, [r0, #4]
 8007a5c:	d94f      	bls.n	8007afe <_dtoa_r+0x316>
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 fcd8 	bl	8008414 <_Balloc>
 8007a64:	9008      	str	r0, [sp, #32]
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d14d      	bne.n	8007b06 <_dtoa_r+0x31e>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a70:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <_dtoa_r+0x300>)
 8007a72:	e6cd      	b.n	8007810 <_dtoa_r+0x28>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e7de      	b.n	8007a36 <_dtoa_r+0x24e>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a7e:	eb09 0b03 	add.w	fp, r9, r3
 8007a82:	f10b 0301 	add.w	r3, fp, #1
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	9302      	str	r3, [sp, #8]
 8007a8a:	bfb8      	it	lt
 8007a8c:	2301      	movlt	r3, #1
 8007a8e:	e7dd      	b.n	8007a4c <_dtoa_r+0x264>
 8007a90:	2301      	movs	r3, #1
 8007a92:	e7f2      	b.n	8007a7a <_dtoa_r+0x292>
 8007a94:	2401      	movs	r4, #1
 8007a96:	2300      	movs	r3, #0
 8007a98:	940b      	str	r4, [sp, #44]	; 0x2c
 8007a9a:	9322      	str	r3, [sp, #136]	; 0x88
 8007a9c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2312      	movs	r3, #18
 8007aa4:	f8cd b008 	str.w	fp, [sp, #8]
 8007aa8:	9223      	str	r2, [sp, #140]	; 0x8c
 8007aaa:	e7cf      	b.n	8007a4c <_dtoa_r+0x264>
 8007aac:	f3af 8000 	nop.w
 8007ab0:	636f4361 	.word	0x636f4361
 8007ab4:	3fd287a7 	.word	0x3fd287a7
 8007ab8:	8b60c8b3 	.word	0x8b60c8b3
 8007abc:	3fc68a28 	.word	0x3fc68a28
 8007ac0:	509f79fb 	.word	0x509f79fb
 8007ac4:	3fd34413 	.word	0x3fd34413
 8007ac8:	0800b271 	.word	0x0800b271
 8007acc:	0800b288 	.word	0x0800b288
 8007ad0:	7ff00000 	.word	0x7ff00000
 8007ad4:	0800b26d 	.word	0x0800b26d
 8007ad8:	0800b264 	.word	0x0800b264
 8007adc:	0800b241 	.word	0x0800b241
 8007ae0:	3ff80000 	.word	0x3ff80000
 8007ae4:	0800b380 	.word	0x0800b380
 8007ae8:	0800b2e7 	.word	0x0800b2e7
 8007aec:	2301      	movs	r3, #1
 8007aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007af0:	e7d4      	b.n	8007a9c <_dtoa_r+0x2b4>
 8007af2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007af6:	465b      	mov	r3, fp
 8007af8:	f8cd b008 	str.w	fp, [sp, #8]
 8007afc:	e7a6      	b.n	8007a4c <_dtoa_r+0x264>
 8007afe:	3101      	adds	r1, #1
 8007b00:	6041      	str	r1, [r0, #4]
 8007b02:	0052      	lsls	r2, r2, #1
 8007b04:	e7a6      	b.n	8007a54 <_dtoa_r+0x26c>
 8007b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b08:	9a08      	ldr	r2, [sp, #32]
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	9b02      	ldr	r3, [sp, #8]
 8007b0e:	2b0e      	cmp	r3, #14
 8007b10:	f200 80a8 	bhi.w	8007c64 <_dtoa_r+0x47c>
 8007b14:	2c00      	cmp	r4, #0
 8007b16:	f000 80a5 	beq.w	8007c64 <_dtoa_r+0x47c>
 8007b1a:	f1b9 0f00 	cmp.w	r9, #0
 8007b1e:	dd34      	ble.n	8007b8a <_dtoa_r+0x3a2>
 8007b20:	4a9a      	ldr	r2, [pc, #616]	; (8007d8c <_dtoa_r+0x5a4>)
 8007b22:	f009 030f 	and.w	r3, r9, #15
 8007b26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b2a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007b2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b36:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007b3a:	d016      	beq.n	8007b6a <_dtoa_r+0x382>
 8007b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b40:	4b93      	ldr	r3, [pc, #588]	; (8007d90 <_dtoa_r+0x5a8>)
 8007b42:	2703      	movs	r7, #3
 8007b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b48:	f7f8 fdf0 	bl	800072c <__aeabi_ddiv>
 8007b4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b50:	f004 040f 	and.w	r4, r4, #15
 8007b54:	4e8e      	ldr	r6, [pc, #568]	; (8007d90 <_dtoa_r+0x5a8>)
 8007b56:	b954      	cbnz	r4, 8007b6e <_dtoa_r+0x386>
 8007b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b60:	f7f8 fde4 	bl	800072c <__aeabi_ddiv>
 8007b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b68:	e029      	b.n	8007bbe <_dtoa_r+0x3d6>
 8007b6a:	2702      	movs	r7, #2
 8007b6c:	e7f2      	b.n	8007b54 <_dtoa_r+0x36c>
 8007b6e:	07e1      	lsls	r1, r4, #31
 8007b70:	d508      	bpl.n	8007b84 <_dtoa_r+0x39c>
 8007b72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b7a:	f7f8 fcad 	bl	80004d8 <__aeabi_dmul>
 8007b7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b82:	3701      	adds	r7, #1
 8007b84:	1064      	asrs	r4, r4, #1
 8007b86:	3608      	adds	r6, #8
 8007b88:	e7e5      	b.n	8007b56 <_dtoa_r+0x36e>
 8007b8a:	f000 80a5 	beq.w	8007cd8 <_dtoa_r+0x4f0>
 8007b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b92:	f1c9 0400 	rsb	r4, r9, #0
 8007b96:	4b7d      	ldr	r3, [pc, #500]	; (8007d8c <_dtoa_r+0x5a4>)
 8007b98:	f004 020f 	and.w	r2, r4, #15
 8007b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 fc98 	bl	80004d8 <__aeabi_dmul>
 8007ba8:	2702      	movs	r7, #2
 8007baa:	2300      	movs	r3, #0
 8007bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bb0:	4e77      	ldr	r6, [pc, #476]	; (8007d90 <_dtoa_r+0x5a8>)
 8007bb2:	1124      	asrs	r4, r4, #4
 8007bb4:	2c00      	cmp	r4, #0
 8007bb6:	f040 8084 	bne.w	8007cc2 <_dtoa_r+0x4da>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1d2      	bne.n	8007b64 <_dtoa_r+0x37c>
 8007bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 808b 	beq.w	8007cdc <_dtoa_r+0x4f4>
 8007bc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007bca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007bce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4b6f      	ldr	r3, [pc, #444]	; (8007d94 <_dtoa_r+0x5ac>)
 8007bd6:	f7f8 fef1 	bl	80009bc <__aeabi_dcmplt>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d07e      	beq.n	8007cdc <_dtoa_r+0x4f4>
 8007bde:	9b02      	ldr	r3, [sp, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d07b      	beq.n	8007cdc <_dtoa_r+0x4f4>
 8007be4:	f1bb 0f00 	cmp.w	fp, #0
 8007be8:	dd38      	ble.n	8007c5c <_dtoa_r+0x474>
 8007bea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4b69      	ldr	r3, [pc, #420]	; (8007d98 <_dtoa_r+0x5b0>)
 8007bf2:	f7f8 fc71 	bl	80004d8 <__aeabi_dmul>
 8007bf6:	465c      	mov	r4, fp
 8007bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bfc:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8007c00:	3701      	adds	r7, #1
 8007c02:	4638      	mov	r0, r7
 8007c04:	f7f8 fbfe 	bl	8000404 <__aeabi_i2d>
 8007c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c0c:	f7f8 fc64 	bl	80004d8 <__aeabi_dmul>
 8007c10:	2200      	movs	r2, #0
 8007c12:	4b62      	ldr	r3, [pc, #392]	; (8007d9c <_dtoa_r+0x5b4>)
 8007c14:	f7f8 faaa 	bl	800016c <__adddf3>
 8007c18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c20:	9611      	str	r6, [sp, #68]	; 0x44
 8007c22:	2c00      	cmp	r4, #0
 8007c24:	d15d      	bne.n	8007ce2 <_dtoa_r+0x4fa>
 8007c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	4b5c      	ldr	r3, [pc, #368]	; (8007da0 <_dtoa_r+0x5b8>)
 8007c2e:	f7f8 fa9b 	bl	8000168 <__aeabi_dsub>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c3a:	4633      	mov	r3, r6
 8007c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c3e:	f7f8 fedb 	bl	80009f8 <__aeabi_dcmpgt>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	f040 829e 	bne.w	8008184 <_dtoa_r+0x99c>
 8007c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007c52:	f7f8 feb3 	bl	80009bc <__aeabi_dcmplt>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f040 8292 	bne.w	8008180 <_dtoa_r+0x998>
 8007c5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007c60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f2c0 8153 	blt.w	8007f12 <_dtoa_r+0x72a>
 8007c6c:	f1b9 0f0e 	cmp.w	r9, #14
 8007c70:	f300 814f 	bgt.w	8007f12 <_dtoa_r+0x72a>
 8007c74:	4b45      	ldr	r3, [pc, #276]	; (8007d8c <_dtoa_r+0x5a4>)
 8007c76:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f280 80db 	bge.w	8007e40 <_dtoa_r+0x658>
 8007c8a:	9b02      	ldr	r3, [sp, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f300 80d7 	bgt.w	8007e40 <_dtoa_r+0x658>
 8007c92:	f040 8274 	bne.w	800817e <_dtoa_r+0x996>
 8007c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4b40      	ldr	r3, [pc, #256]	; (8007da0 <_dtoa_r+0x5b8>)
 8007c9e:	f7f8 fc1b 	bl	80004d8 <__aeabi_dmul>
 8007ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ca6:	f7f8 fe9d 	bl	80009e4 <__aeabi_dcmpge>
 8007caa:	9c02      	ldr	r4, [sp, #8]
 8007cac:	4626      	mov	r6, r4
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f040 824a 	bne.w	8008148 <_dtoa_r+0x960>
 8007cb4:	2331      	movs	r3, #49	; 0x31
 8007cb6:	9f08      	ldr	r7, [sp, #32]
 8007cb8:	f109 0901 	add.w	r9, r9, #1
 8007cbc:	f807 3b01 	strb.w	r3, [r7], #1
 8007cc0:	e246      	b.n	8008150 <_dtoa_r+0x968>
 8007cc2:	07e2      	lsls	r2, r4, #31
 8007cc4:	d505      	bpl.n	8007cd2 <_dtoa_r+0x4ea>
 8007cc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007cca:	f7f8 fc05 	bl	80004d8 <__aeabi_dmul>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	3701      	adds	r7, #1
 8007cd2:	1064      	asrs	r4, r4, #1
 8007cd4:	3608      	adds	r6, #8
 8007cd6:	e76d      	b.n	8007bb4 <_dtoa_r+0x3cc>
 8007cd8:	2702      	movs	r7, #2
 8007cda:	e770      	b.n	8007bbe <_dtoa_r+0x3d6>
 8007cdc:	46c8      	mov	r8, r9
 8007cde:	9c02      	ldr	r4, [sp, #8]
 8007ce0:	e78f      	b.n	8007c02 <_dtoa_r+0x41a>
 8007ce2:	9908      	ldr	r1, [sp, #32]
 8007ce4:	4b29      	ldr	r3, [pc, #164]	; (8007d8c <_dtoa_r+0x5a4>)
 8007ce6:	4421      	add	r1, r4
 8007ce8:	9112      	str	r1, [sp, #72]	; 0x48
 8007cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cf0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007cf4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cf8:	2900      	cmp	r1, #0
 8007cfa:	d055      	beq.n	8007da8 <_dtoa_r+0x5c0>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	4929      	ldr	r1, [pc, #164]	; (8007da4 <_dtoa_r+0x5bc>)
 8007d00:	f7f8 fd14 	bl	800072c <__aeabi_ddiv>
 8007d04:	463b      	mov	r3, r7
 8007d06:	4632      	mov	r2, r6
 8007d08:	f7f8 fa2e 	bl	8000168 <__aeabi_dsub>
 8007d0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d10:	9f08      	ldr	r7, [sp, #32]
 8007d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d16:	f7f8 fe8f 	bl	8000a38 <__aeabi_d2iz>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	f7f8 fb72 	bl	8000404 <__aeabi_i2d>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d28:	f7f8 fa1e 	bl	8000168 <__aeabi_dsub>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	3430      	adds	r4, #48	; 0x30
 8007d32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d3a:	f807 4b01 	strb.w	r4, [r7], #1
 8007d3e:	f7f8 fe3d 	bl	80009bc <__aeabi_dcmplt>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d174      	bne.n	8007e30 <_dtoa_r+0x648>
 8007d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	4911      	ldr	r1, [pc, #68]	; (8007d94 <_dtoa_r+0x5ac>)
 8007d4e:	f7f8 fa0b 	bl	8000168 <__aeabi_dsub>
 8007d52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d56:	f7f8 fe31 	bl	80009bc <__aeabi_dcmplt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f040 80b6 	bne.w	8007ecc <_dtoa_r+0x6e4>
 8007d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d62:	429f      	cmp	r7, r3
 8007d64:	f43f af7a 	beq.w	8007c5c <_dtoa_r+0x474>
 8007d68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <_dtoa_r+0x5b0>)
 8007d70:	f7f8 fbb2 	bl	80004d8 <__aeabi_dmul>
 8007d74:	2200      	movs	r2, #0
 8007d76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d7e:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <_dtoa_r+0x5b0>)
 8007d80:	f7f8 fbaa 	bl	80004d8 <__aeabi_dmul>
 8007d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d88:	e7c3      	b.n	8007d12 <_dtoa_r+0x52a>
 8007d8a:	bf00      	nop
 8007d8c:	0800b380 	.word	0x0800b380
 8007d90:	0800b358 	.word	0x0800b358
 8007d94:	3ff00000 	.word	0x3ff00000
 8007d98:	40240000 	.word	0x40240000
 8007d9c:	401c0000 	.word	0x401c0000
 8007da0:	40140000 	.word	0x40140000
 8007da4:	3fe00000 	.word	0x3fe00000
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fb94 	bl	80004d8 <__aeabi_dmul>
 8007db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007db2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007db6:	9c08      	ldr	r4, [sp, #32]
 8007db8:	9314      	str	r3, [sp, #80]	; 0x50
 8007dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dbe:	f7f8 fe3b 	bl	8000a38 <__aeabi_d2iz>
 8007dc2:	9015      	str	r0, [sp, #84]	; 0x54
 8007dc4:	f7f8 fb1e 	bl	8000404 <__aeabi_i2d>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dd0:	f7f8 f9ca 	bl	8000168 <__aeabi_dsub>
 8007dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	3330      	adds	r3, #48	; 0x30
 8007dda:	f804 3b01 	strb.w	r3, [r4], #1
 8007dde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007de0:	460f      	mov	r7, r1
 8007de2:	429c      	cmp	r4, r3
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	d124      	bne.n	8007e34 <_dtoa_r+0x64c>
 8007dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dee:	4bb3      	ldr	r3, [pc, #716]	; (80080bc <_dtoa_r+0x8d4>)
 8007df0:	f7f8 f9bc 	bl	800016c <__adddf3>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4630      	mov	r0, r6
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	f7f8 fdfc 	bl	80009f8 <__aeabi_dcmpgt>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d162      	bne.n	8007eca <_dtoa_r+0x6e2>
 8007e04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e08:	2000      	movs	r0, #0
 8007e0a:	49ac      	ldr	r1, [pc, #688]	; (80080bc <_dtoa_r+0x8d4>)
 8007e0c:	f7f8 f9ac 	bl	8000168 <__aeabi_dsub>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fdd0 	bl	80009bc <__aeabi_dcmplt>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f43f af1d 	beq.w	8007c5c <_dtoa_r+0x474>
 8007e22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e24:	1e7b      	subs	r3, r7, #1
 8007e26:	9314      	str	r3, [sp, #80]	; 0x50
 8007e28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007e2c:	2b30      	cmp	r3, #48	; 0x30
 8007e2e:	d0f8      	beq.n	8007e22 <_dtoa_r+0x63a>
 8007e30:	46c1      	mov	r9, r8
 8007e32:	e03a      	b.n	8007eaa <_dtoa_r+0x6c2>
 8007e34:	4ba2      	ldr	r3, [pc, #648]	; (80080c0 <_dtoa_r+0x8d8>)
 8007e36:	f7f8 fb4f 	bl	80004d8 <__aeabi_dmul>
 8007e3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e3e:	e7bc      	b.n	8007dba <_dtoa_r+0x5d2>
 8007e40:	9f08      	ldr	r7, [sp, #32]
 8007e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e4a:	f7f8 fc6f 	bl	800072c <__aeabi_ddiv>
 8007e4e:	f7f8 fdf3 	bl	8000a38 <__aeabi_d2iz>
 8007e52:	4604      	mov	r4, r0
 8007e54:	f7f8 fad6 	bl	8000404 <__aeabi_i2d>
 8007e58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e5c:	f7f8 fb3c 	bl	80004d8 <__aeabi_dmul>
 8007e60:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007e64:	460b      	mov	r3, r1
 8007e66:	4602      	mov	r2, r0
 8007e68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e6c:	f7f8 f97c 	bl	8000168 <__aeabi_dsub>
 8007e70:	f807 6b01 	strb.w	r6, [r7], #1
 8007e74:	9e08      	ldr	r6, [sp, #32]
 8007e76:	9b02      	ldr	r3, [sp, #8]
 8007e78:	1bbe      	subs	r6, r7, r6
 8007e7a:	42b3      	cmp	r3, r6
 8007e7c:	d13a      	bne.n	8007ef4 <_dtoa_r+0x70c>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	f7f8 f973 	bl	800016c <__adddf3>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e92:	f7f8 fdb1 	bl	80009f8 <__aeabi_dcmpgt>
 8007e96:	bb58      	cbnz	r0, 8007ef0 <_dtoa_r+0x708>
 8007e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea0:	f7f8 fd82 	bl	80009a8 <__aeabi_dcmpeq>
 8007ea4:	b108      	cbz	r0, 8007eaa <_dtoa_r+0x6c2>
 8007ea6:	07e1      	lsls	r1, r4, #31
 8007ea8:	d422      	bmi.n	8007ef0 <_dtoa_r+0x708>
 8007eaa:	4628      	mov	r0, r5
 8007eac:	4651      	mov	r1, sl
 8007eae:	f000 faf1 	bl	8008494 <_Bfree>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	703b      	strb	r3, [r7, #0]
 8007eb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007eb8:	f109 0001 	add.w	r0, r9, #1
 8007ebc:	6018      	str	r0, [r3, #0]
 8007ebe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f43f acdf 	beq.w	8007884 <_dtoa_r+0x9c>
 8007ec6:	601f      	str	r7, [r3, #0]
 8007ec8:	e4dc      	b.n	8007884 <_dtoa_r+0x9c>
 8007eca:	4627      	mov	r7, r4
 8007ecc:	463b      	mov	r3, r7
 8007ece:	461f      	mov	r7, r3
 8007ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ed4:	2a39      	cmp	r2, #57	; 0x39
 8007ed6:	d107      	bne.n	8007ee8 <_dtoa_r+0x700>
 8007ed8:	9a08      	ldr	r2, [sp, #32]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d1f7      	bne.n	8007ece <_dtoa_r+0x6e6>
 8007ede:	2230      	movs	r2, #48	; 0x30
 8007ee0:	9908      	ldr	r1, [sp, #32]
 8007ee2:	f108 0801 	add.w	r8, r8, #1
 8007ee6:	700a      	strb	r2, [r1, #0]
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	3201      	adds	r2, #1
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e79f      	b.n	8007e30 <_dtoa_r+0x648>
 8007ef0:	46c8      	mov	r8, r9
 8007ef2:	e7eb      	b.n	8007ecc <_dtoa_r+0x6e4>
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	4b72      	ldr	r3, [pc, #456]	; (80080c0 <_dtoa_r+0x8d8>)
 8007ef8:	f7f8 faee 	bl	80004d8 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f04:	2200      	movs	r2, #0
 8007f06:	2300      	movs	r3, #0
 8007f08:	f7f8 fd4e 	bl	80009a8 <__aeabi_dcmpeq>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d098      	beq.n	8007e42 <_dtoa_r+0x65a>
 8007f10:	e7cb      	b.n	8007eaa <_dtoa_r+0x6c2>
 8007f12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f14:	2a00      	cmp	r2, #0
 8007f16:	f000 80cd 	beq.w	80080b4 <_dtoa_r+0x8cc>
 8007f1a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f1c:	2a01      	cmp	r2, #1
 8007f1e:	f300 80af 	bgt.w	8008080 <_dtoa_r+0x898>
 8007f22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f24:	2a00      	cmp	r2, #0
 8007f26:	f000 80a7 	beq.w	8008078 <_dtoa_r+0x890>
 8007f2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f30:	9f06      	ldr	r7, [sp, #24]
 8007f32:	9a06      	ldr	r2, [sp, #24]
 8007f34:	2101      	movs	r1, #1
 8007f36:	441a      	add	r2, r3
 8007f38:	9206      	str	r2, [sp, #24]
 8007f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	441a      	add	r2, r3
 8007f40:	9209      	str	r2, [sp, #36]	; 0x24
 8007f42:	f000 fb61 	bl	8008608 <__i2b>
 8007f46:	4606      	mov	r6, r0
 8007f48:	2f00      	cmp	r7, #0
 8007f4a:	dd0c      	ble.n	8007f66 <_dtoa_r+0x77e>
 8007f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dd09      	ble.n	8007f66 <_dtoa_r+0x77e>
 8007f52:	42bb      	cmp	r3, r7
 8007f54:	bfa8      	it	ge
 8007f56:	463b      	movge	r3, r7
 8007f58:	9a06      	ldr	r2, [sp, #24]
 8007f5a:	1aff      	subs	r7, r7, r3
 8007f5c:	1ad2      	subs	r2, r2, r3
 8007f5e:	9206      	str	r2, [sp, #24]
 8007f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	9309      	str	r3, [sp, #36]	; 0x24
 8007f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f68:	b1f3      	cbz	r3, 8007fa8 <_dtoa_r+0x7c0>
 8007f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80a9 	beq.w	80080c4 <_dtoa_r+0x8dc>
 8007f72:	2c00      	cmp	r4, #0
 8007f74:	dd10      	ble.n	8007f98 <_dtoa_r+0x7b0>
 8007f76:	4631      	mov	r1, r6
 8007f78:	4622      	mov	r2, r4
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f000 fbfe 	bl	800877c <__pow5mult>
 8007f80:	4652      	mov	r2, sl
 8007f82:	4601      	mov	r1, r0
 8007f84:	4606      	mov	r6, r0
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 fb54 	bl	8008634 <__multiply>
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	4651      	mov	r1, sl
 8007f90:	4628      	mov	r0, r5
 8007f92:	f000 fa7f 	bl	8008494 <_Bfree>
 8007f96:	46c2      	mov	sl, r8
 8007f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f9a:	1b1a      	subs	r2, r3, r4
 8007f9c:	d004      	beq.n	8007fa8 <_dtoa_r+0x7c0>
 8007f9e:	4651      	mov	r1, sl
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f000 fbeb 	bl	800877c <__pow5mult>
 8007fa6:	4682      	mov	sl, r0
 8007fa8:	2101      	movs	r1, #1
 8007faa:	4628      	mov	r0, r5
 8007fac:	f000 fb2c 	bl	8008608 <__i2b>
 8007fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f340 8087 	ble.w	80080c8 <_dtoa_r+0x8e0>
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 fbdc 	bl	800877c <__pow5mult>
 8007fc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	f340 8080 	ble.w	80080ce <_dtoa_r+0x8e6>
 8007fce:	f04f 0800 	mov.w	r8, #0
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fd8:	6918      	ldr	r0, [r3, #16]
 8007fda:	f000 fac7 	bl	800856c <__hi0bits>
 8007fde:	f1c0 0020 	rsb	r0, r0, #32
 8007fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe4:	4418      	add	r0, r3
 8007fe6:	f010 001f 	ands.w	r0, r0, #31
 8007fea:	f000 8092 	beq.w	8008112 <_dtoa_r+0x92a>
 8007fee:	f1c0 0320 	rsb	r3, r0, #32
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	f340 808a 	ble.w	800810c <_dtoa_r+0x924>
 8007ff8:	f1c0 001c 	rsb	r0, r0, #28
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	4407      	add	r7, r0
 8008000:	4403      	add	r3, r0
 8008002:	9306      	str	r3, [sp, #24]
 8008004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008006:	4403      	add	r3, r0
 8008008:	9309      	str	r3, [sp, #36]	; 0x24
 800800a:	9b06      	ldr	r3, [sp, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	dd05      	ble.n	800801c <_dtoa_r+0x834>
 8008010:	4651      	mov	r1, sl
 8008012:	461a      	mov	r2, r3
 8008014:	4628      	mov	r0, r5
 8008016:	f000 fc0b 	bl	8008830 <__lshift>
 800801a:	4682      	mov	sl, r0
 800801c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	dd05      	ble.n	800802e <_dtoa_r+0x846>
 8008022:	4621      	mov	r1, r4
 8008024:	461a      	mov	r2, r3
 8008026:	4628      	mov	r0, r5
 8008028:	f000 fc02 	bl	8008830 <__lshift>
 800802c:	4604      	mov	r4, r0
 800802e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d070      	beq.n	8008116 <_dtoa_r+0x92e>
 8008034:	4621      	mov	r1, r4
 8008036:	4650      	mov	r0, sl
 8008038:	f000 fc66 	bl	8008908 <__mcmp>
 800803c:	2800      	cmp	r0, #0
 800803e:	da6a      	bge.n	8008116 <_dtoa_r+0x92e>
 8008040:	2300      	movs	r3, #0
 8008042:	4651      	mov	r1, sl
 8008044:	220a      	movs	r2, #10
 8008046:	4628      	mov	r0, r5
 8008048:	f000 fa46 	bl	80084d8 <__multadd>
 800804c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800804e:	4682      	mov	sl, r0
 8008050:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8193 	beq.w	8008380 <_dtoa_r+0xb98>
 800805a:	4631      	mov	r1, r6
 800805c:	2300      	movs	r3, #0
 800805e:	220a      	movs	r2, #10
 8008060:	4628      	mov	r0, r5
 8008062:	f000 fa39 	bl	80084d8 <__multadd>
 8008066:	f1bb 0f00 	cmp.w	fp, #0
 800806a:	4606      	mov	r6, r0
 800806c:	f300 8093 	bgt.w	8008196 <_dtoa_r+0x9ae>
 8008070:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008072:	2b02      	cmp	r3, #2
 8008074:	dc57      	bgt.n	8008126 <_dtoa_r+0x93e>
 8008076:	e08e      	b.n	8008196 <_dtoa_r+0x9ae>
 8008078:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800807a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800807e:	e756      	b.n	8007f2e <_dtoa_r+0x746>
 8008080:	9b02      	ldr	r3, [sp, #8]
 8008082:	1e5c      	subs	r4, r3, #1
 8008084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008086:	42a3      	cmp	r3, r4
 8008088:	bfb7      	itett	lt
 800808a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800808c:	1b1c      	subge	r4, r3, r4
 800808e:	1ae2      	sublt	r2, r4, r3
 8008090:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008092:	bfbe      	ittt	lt
 8008094:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008096:	189b      	addlt	r3, r3, r2
 8008098:	930e      	strlt	r3, [sp, #56]	; 0x38
 800809a:	9b02      	ldr	r3, [sp, #8]
 800809c:	bfb8      	it	lt
 800809e:	2400      	movlt	r4, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bfbb      	ittet	lt
 80080a4:	9b06      	ldrlt	r3, [sp, #24]
 80080a6:	9a02      	ldrlt	r2, [sp, #8]
 80080a8:	9f06      	ldrge	r7, [sp, #24]
 80080aa:	1a9f      	sublt	r7, r3, r2
 80080ac:	bfac      	ite	ge
 80080ae:	9b02      	ldrge	r3, [sp, #8]
 80080b0:	2300      	movlt	r3, #0
 80080b2:	e73e      	b.n	8007f32 <_dtoa_r+0x74a>
 80080b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80080b6:	9f06      	ldr	r7, [sp, #24]
 80080b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80080ba:	e745      	b.n	8007f48 <_dtoa_r+0x760>
 80080bc:	3fe00000 	.word	0x3fe00000
 80080c0:	40240000 	.word	0x40240000
 80080c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080c6:	e76a      	b.n	8007f9e <_dtoa_r+0x7b6>
 80080c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	dc19      	bgt.n	8008102 <_dtoa_r+0x91a>
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	b9bb      	cbnz	r3, 8008102 <_dtoa_r+0x91a>
 80080d2:	9b05      	ldr	r3, [sp, #20]
 80080d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d8:	b99b      	cbnz	r3, 8008102 <_dtoa_r+0x91a>
 80080da:	9b05      	ldr	r3, [sp, #20]
 80080dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080e0:	0d1b      	lsrs	r3, r3, #20
 80080e2:	051b      	lsls	r3, r3, #20
 80080e4:	b183      	cbz	r3, 8008108 <_dtoa_r+0x920>
 80080e6:	f04f 0801 	mov.w	r8, #1
 80080ea:	9b06      	ldr	r3, [sp, #24]
 80080ec:	3301      	adds	r3, #1
 80080ee:	9306      	str	r3, [sp, #24]
 80080f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f2:	3301      	adds	r3, #1
 80080f4:	9309      	str	r3, [sp, #36]	; 0x24
 80080f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f47f af6a 	bne.w	8007fd2 <_dtoa_r+0x7ea>
 80080fe:	2001      	movs	r0, #1
 8008100:	e76f      	b.n	8007fe2 <_dtoa_r+0x7fa>
 8008102:	f04f 0800 	mov.w	r8, #0
 8008106:	e7f6      	b.n	80080f6 <_dtoa_r+0x90e>
 8008108:	4698      	mov	r8, r3
 800810a:	e7f4      	b.n	80080f6 <_dtoa_r+0x90e>
 800810c:	f43f af7d 	beq.w	800800a <_dtoa_r+0x822>
 8008110:	4618      	mov	r0, r3
 8008112:	301c      	adds	r0, #28
 8008114:	e772      	b.n	8007ffc <_dtoa_r+0x814>
 8008116:	9b02      	ldr	r3, [sp, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	dc36      	bgt.n	800818a <_dtoa_r+0x9a2>
 800811c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800811e:	2b02      	cmp	r3, #2
 8008120:	dd33      	ble.n	800818a <_dtoa_r+0x9a2>
 8008122:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008126:	f1bb 0f00 	cmp.w	fp, #0
 800812a:	d10d      	bne.n	8008148 <_dtoa_r+0x960>
 800812c:	4621      	mov	r1, r4
 800812e:	465b      	mov	r3, fp
 8008130:	2205      	movs	r2, #5
 8008132:	4628      	mov	r0, r5
 8008134:	f000 f9d0 	bl	80084d8 <__multadd>
 8008138:	4601      	mov	r1, r0
 800813a:	4604      	mov	r4, r0
 800813c:	4650      	mov	r0, sl
 800813e:	f000 fbe3 	bl	8008908 <__mcmp>
 8008142:	2800      	cmp	r0, #0
 8008144:	f73f adb6 	bgt.w	8007cb4 <_dtoa_r+0x4cc>
 8008148:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800814a:	9f08      	ldr	r7, [sp, #32]
 800814c:	ea6f 0903 	mvn.w	r9, r3
 8008150:	f04f 0800 	mov.w	r8, #0
 8008154:	4621      	mov	r1, r4
 8008156:	4628      	mov	r0, r5
 8008158:	f000 f99c 	bl	8008494 <_Bfree>
 800815c:	2e00      	cmp	r6, #0
 800815e:	f43f aea4 	beq.w	8007eaa <_dtoa_r+0x6c2>
 8008162:	f1b8 0f00 	cmp.w	r8, #0
 8008166:	d005      	beq.n	8008174 <_dtoa_r+0x98c>
 8008168:	45b0      	cmp	r8, r6
 800816a:	d003      	beq.n	8008174 <_dtoa_r+0x98c>
 800816c:	4641      	mov	r1, r8
 800816e:	4628      	mov	r0, r5
 8008170:	f000 f990 	bl	8008494 <_Bfree>
 8008174:	4631      	mov	r1, r6
 8008176:	4628      	mov	r0, r5
 8008178:	f000 f98c 	bl	8008494 <_Bfree>
 800817c:	e695      	b.n	8007eaa <_dtoa_r+0x6c2>
 800817e:	2400      	movs	r4, #0
 8008180:	4626      	mov	r6, r4
 8008182:	e7e1      	b.n	8008148 <_dtoa_r+0x960>
 8008184:	46c1      	mov	r9, r8
 8008186:	4626      	mov	r6, r4
 8008188:	e594      	b.n	8007cb4 <_dtoa_r+0x4cc>
 800818a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 80fc 	beq.w	800838e <_dtoa_r+0xba6>
 8008196:	2f00      	cmp	r7, #0
 8008198:	dd05      	ble.n	80081a6 <_dtoa_r+0x9be>
 800819a:	4631      	mov	r1, r6
 800819c:	463a      	mov	r2, r7
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 fb46 	bl	8008830 <__lshift>
 80081a4:	4606      	mov	r6, r0
 80081a6:	f1b8 0f00 	cmp.w	r8, #0
 80081aa:	d05c      	beq.n	8008266 <_dtoa_r+0xa7e>
 80081ac:	4628      	mov	r0, r5
 80081ae:	6871      	ldr	r1, [r6, #4]
 80081b0:	f000 f930 	bl	8008414 <_Balloc>
 80081b4:	4607      	mov	r7, r0
 80081b6:	b928      	cbnz	r0, 80081c4 <_dtoa_r+0x9dc>
 80081b8:	4602      	mov	r2, r0
 80081ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081be:	4b7e      	ldr	r3, [pc, #504]	; (80083b8 <_dtoa_r+0xbd0>)
 80081c0:	f7ff bb26 	b.w	8007810 <_dtoa_r+0x28>
 80081c4:	6932      	ldr	r2, [r6, #16]
 80081c6:	f106 010c 	add.w	r1, r6, #12
 80081ca:	3202      	adds	r2, #2
 80081cc:	0092      	lsls	r2, r2, #2
 80081ce:	300c      	adds	r0, #12
 80081d0:	f000 f912 	bl	80083f8 <memcpy>
 80081d4:	2201      	movs	r2, #1
 80081d6:	4639      	mov	r1, r7
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 fb29 	bl	8008830 <__lshift>
 80081de:	46b0      	mov	r8, r6
 80081e0:	4606      	mov	r6, r0
 80081e2:	9b08      	ldr	r3, [sp, #32]
 80081e4:	3301      	adds	r3, #1
 80081e6:	9302      	str	r3, [sp, #8]
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	445b      	add	r3, fp
 80081ec:	930a      	str	r3, [sp, #40]	; 0x28
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	9309      	str	r3, [sp, #36]	; 0x24
 80081f6:	9b02      	ldr	r3, [sp, #8]
 80081f8:	4621      	mov	r1, r4
 80081fa:	4650      	mov	r0, sl
 80081fc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008200:	f7ff fa62 	bl	80076c8 <quorem>
 8008204:	4603      	mov	r3, r0
 8008206:	4641      	mov	r1, r8
 8008208:	3330      	adds	r3, #48	; 0x30
 800820a:	9004      	str	r0, [sp, #16]
 800820c:	4650      	mov	r0, sl
 800820e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008210:	f000 fb7a 	bl	8008908 <__mcmp>
 8008214:	4632      	mov	r2, r6
 8008216:	9006      	str	r0, [sp, #24]
 8008218:	4621      	mov	r1, r4
 800821a:	4628      	mov	r0, r5
 800821c:	f000 fb90 	bl	8008940 <__mdiff>
 8008220:	68c2      	ldr	r2, [r0, #12]
 8008222:	4607      	mov	r7, r0
 8008224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008226:	bb02      	cbnz	r2, 800826a <_dtoa_r+0xa82>
 8008228:	4601      	mov	r1, r0
 800822a:	4650      	mov	r0, sl
 800822c:	f000 fb6c 	bl	8008908 <__mcmp>
 8008230:	4602      	mov	r2, r0
 8008232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008234:	4639      	mov	r1, r7
 8008236:	4628      	mov	r0, r5
 8008238:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800823c:	f000 f92a 	bl	8008494 <_Bfree>
 8008240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008244:	9f02      	ldr	r7, [sp, #8]
 8008246:	ea43 0102 	orr.w	r1, r3, r2
 800824a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824c:	430b      	orrs	r3, r1
 800824e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008250:	d10d      	bne.n	800826e <_dtoa_r+0xa86>
 8008252:	2b39      	cmp	r3, #57	; 0x39
 8008254:	d027      	beq.n	80082a6 <_dtoa_r+0xabe>
 8008256:	9a06      	ldr	r2, [sp, #24]
 8008258:	2a00      	cmp	r2, #0
 800825a:	dd01      	ble.n	8008260 <_dtoa_r+0xa78>
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	3331      	adds	r3, #49	; 0x31
 8008260:	f88b 3000 	strb.w	r3, [fp]
 8008264:	e776      	b.n	8008154 <_dtoa_r+0x96c>
 8008266:	4630      	mov	r0, r6
 8008268:	e7b9      	b.n	80081de <_dtoa_r+0x9f6>
 800826a:	2201      	movs	r2, #1
 800826c:	e7e2      	b.n	8008234 <_dtoa_r+0xa4c>
 800826e:	9906      	ldr	r1, [sp, #24]
 8008270:	2900      	cmp	r1, #0
 8008272:	db04      	blt.n	800827e <_dtoa_r+0xa96>
 8008274:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008276:	4301      	orrs	r1, r0
 8008278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800827a:	4301      	orrs	r1, r0
 800827c:	d120      	bne.n	80082c0 <_dtoa_r+0xad8>
 800827e:	2a00      	cmp	r2, #0
 8008280:	ddee      	ble.n	8008260 <_dtoa_r+0xa78>
 8008282:	4651      	mov	r1, sl
 8008284:	2201      	movs	r2, #1
 8008286:	4628      	mov	r0, r5
 8008288:	9302      	str	r3, [sp, #8]
 800828a:	f000 fad1 	bl	8008830 <__lshift>
 800828e:	4621      	mov	r1, r4
 8008290:	4682      	mov	sl, r0
 8008292:	f000 fb39 	bl	8008908 <__mcmp>
 8008296:	2800      	cmp	r0, #0
 8008298:	9b02      	ldr	r3, [sp, #8]
 800829a:	dc02      	bgt.n	80082a2 <_dtoa_r+0xaba>
 800829c:	d1e0      	bne.n	8008260 <_dtoa_r+0xa78>
 800829e:	07da      	lsls	r2, r3, #31
 80082a0:	d5de      	bpl.n	8008260 <_dtoa_r+0xa78>
 80082a2:	2b39      	cmp	r3, #57	; 0x39
 80082a4:	d1da      	bne.n	800825c <_dtoa_r+0xa74>
 80082a6:	2339      	movs	r3, #57	; 0x39
 80082a8:	f88b 3000 	strb.w	r3, [fp]
 80082ac:	463b      	mov	r3, r7
 80082ae:	461f      	mov	r7, r3
 80082b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	2a39      	cmp	r2, #57	; 0x39
 80082b8:	d050      	beq.n	800835c <_dtoa_r+0xb74>
 80082ba:	3201      	adds	r2, #1
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e749      	b.n	8008154 <_dtoa_r+0x96c>
 80082c0:	2a00      	cmp	r2, #0
 80082c2:	dd03      	ble.n	80082cc <_dtoa_r+0xae4>
 80082c4:	2b39      	cmp	r3, #57	; 0x39
 80082c6:	d0ee      	beq.n	80082a6 <_dtoa_r+0xabe>
 80082c8:	3301      	adds	r3, #1
 80082ca:	e7c9      	b.n	8008260 <_dtoa_r+0xa78>
 80082cc:	9a02      	ldr	r2, [sp, #8]
 80082ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082d4:	428a      	cmp	r2, r1
 80082d6:	d02a      	beq.n	800832e <_dtoa_r+0xb46>
 80082d8:	4651      	mov	r1, sl
 80082da:	2300      	movs	r3, #0
 80082dc:	220a      	movs	r2, #10
 80082de:	4628      	mov	r0, r5
 80082e0:	f000 f8fa 	bl	80084d8 <__multadd>
 80082e4:	45b0      	cmp	r8, r6
 80082e6:	4682      	mov	sl, r0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	f04f 020a 	mov.w	r2, #10
 80082f0:	4641      	mov	r1, r8
 80082f2:	4628      	mov	r0, r5
 80082f4:	d107      	bne.n	8008306 <_dtoa_r+0xb1e>
 80082f6:	f000 f8ef 	bl	80084d8 <__multadd>
 80082fa:	4680      	mov	r8, r0
 80082fc:	4606      	mov	r6, r0
 80082fe:	9b02      	ldr	r3, [sp, #8]
 8008300:	3301      	adds	r3, #1
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	e777      	b.n	80081f6 <_dtoa_r+0xa0e>
 8008306:	f000 f8e7 	bl	80084d8 <__multadd>
 800830a:	4631      	mov	r1, r6
 800830c:	4680      	mov	r8, r0
 800830e:	2300      	movs	r3, #0
 8008310:	220a      	movs	r2, #10
 8008312:	4628      	mov	r0, r5
 8008314:	f000 f8e0 	bl	80084d8 <__multadd>
 8008318:	4606      	mov	r6, r0
 800831a:	e7f0      	b.n	80082fe <_dtoa_r+0xb16>
 800831c:	f1bb 0f00 	cmp.w	fp, #0
 8008320:	bfcc      	ite	gt
 8008322:	465f      	movgt	r7, fp
 8008324:	2701      	movle	r7, #1
 8008326:	f04f 0800 	mov.w	r8, #0
 800832a:	9a08      	ldr	r2, [sp, #32]
 800832c:	4417      	add	r7, r2
 800832e:	4651      	mov	r1, sl
 8008330:	2201      	movs	r2, #1
 8008332:	4628      	mov	r0, r5
 8008334:	9302      	str	r3, [sp, #8]
 8008336:	f000 fa7b 	bl	8008830 <__lshift>
 800833a:	4621      	mov	r1, r4
 800833c:	4682      	mov	sl, r0
 800833e:	f000 fae3 	bl	8008908 <__mcmp>
 8008342:	2800      	cmp	r0, #0
 8008344:	dcb2      	bgt.n	80082ac <_dtoa_r+0xac4>
 8008346:	d102      	bne.n	800834e <_dtoa_r+0xb66>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	07db      	lsls	r3, r3, #31
 800834c:	d4ae      	bmi.n	80082ac <_dtoa_r+0xac4>
 800834e:	463b      	mov	r3, r7
 8008350:	461f      	mov	r7, r3
 8008352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008356:	2a30      	cmp	r2, #48	; 0x30
 8008358:	d0fa      	beq.n	8008350 <_dtoa_r+0xb68>
 800835a:	e6fb      	b.n	8008154 <_dtoa_r+0x96c>
 800835c:	9a08      	ldr	r2, [sp, #32]
 800835e:	429a      	cmp	r2, r3
 8008360:	d1a5      	bne.n	80082ae <_dtoa_r+0xac6>
 8008362:	2331      	movs	r3, #49	; 0x31
 8008364:	f109 0901 	add.w	r9, r9, #1
 8008368:	7013      	strb	r3, [r2, #0]
 800836a:	e6f3      	b.n	8008154 <_dtoa_r+0x96c>
 800836c:	4b13      	ldr	r3, [pc, #76]	; (80083bc <_dtoa_r+0xbd4>)
 800836e:	f7ff baa7 	b.w	80078c0 <_dtoa_r+0xd8>
 8008372:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008374:	2b00      	cmp	r3, #0
 8008376:	f47f aa80 	bne.w	800787a <_dtoa_r+0x92>
 800837a:	4b11      	ldr	r3, [pc, #68]	; (80083c0 <_dtoa_r+0xbd8>)
 800837c:	f7ff baa0 	b.w	80078c0 <_dtoa_r+0xd8>
 8008380:	f1bb 0f00 	cmp.w	fp, #0
 8008384:	dc03      	bgt.n	800838e <_dtoa_r+0xba6>
 8008386:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008388:	2b02      	cmp	r3, #2
 800838a:	f73f aecc 	bgt.w	8008126 <_dtoa_r+0x93e>
 800838e:	9f08      	ldr	r7, [sp, #32]
 8008390:	4621      	mov	r1, r4
 8008392:	4650      	mov	r0, sl
 8008394:	f7ff f998 	bl	80076c8 <quorem>
 8008398:	9a08      	ldr	r2, [sp, #32]
 800839a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800839e:	f807 3b01 	strb.w	r3, [r7], #1
 80083a2:	1aba      	subs	r2, r7, r2
 80083a4:	4593      	cmp	fp, r2
 80083a6:	ddb9      	ble.n	800831c <_dtoa_r+0xb34>
 80083a8:	4651      	mov	r1, sl
 80083aa:	2300      	movs	r3, #0
 80083ac:	220a      	movs	r2, #10
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 f892 	bl	80084d8 <__multadd>
 80083b4:	4682      	mov	sl, r0
 80083b6:	e7eb      	b.n	8008390 <_dtoa_r+0xba8>
 80083b8:	0800b2e7 	.word	0x0800b2e7
 80083bc:	0800b240 	.word	0x0800b240
 80083c0:	0800b264 	.word	0x0800b264

080083c4 <_localeconv_r>:
 80083c4:	4800      	ldr	r0, [pc, #0]	; (80083c8 <_localeconv_r+0x4>)
 80083c6:	4770      	bx	lr
 80083c8:	20000160 	.word	0x20000160

080083cc <malloc>:
 80083cc:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <malloc+0xc>)
 80083ce:	4601      	mov	r1, r0
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	f000 bbfb 	b.w	8008bcc <_malloc_r>
 80083d6:	bf00      	nop
 80083d8:	2000000c 	.word	0x2000000c

080083dc <memchr>:
 80083dc:	4603      	mov	r3, r0
 80083de:	b510      	push	{r4, lr}
 80083e0:	b2c9      	uxtb	r1, r1
 80083e2:	4402      	add	r2, r0
 80083e4:	4293      	cmp	r3, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	d101      	bne.n	80083ee <memchr+0x12>
 80083ea:	2000      	movs	r0, #0
 80083ec:	e003      	b.n	80083f6 <memchr+0x1a>
 80083ee:	7804      	ldrb	r4, [r0, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	428c      	cmp	r4, r1
 80083f4:	d1f6      	bne.n	80083e4 <memchr+0x8>
 80083f6:	bd10      	pop	{r4, pc}

080083f8 <memcpy>:
 80083f8:	440a      	add	r2, r1
 80083fa:	4291      	cmp	r1, r2
 80083fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008400:	d100      	bne.n	8008404 <memcpy+0xc>
 8008402:	4770      	bx	lr
 8008404:	b510      	push	{r4, lr}
 8008406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840a:	4291      	cmp	r1, r2
 800840c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008410:	d1f9      	bne.n	8008406 <memcpy+0xe>
 8008412:	bd10      	pop	{r4, pc}

08008414 <_Balloc>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008418:	4604      	mov	r4, r0
 800841a:	460d      	mov	r5, r1
 800841c:	b976      	cbnz	r6, 800843c <_Balloc+0x28>
 800841e:	2010      	movs	r0, #16
 8008420:	f7ff ffd4 	bl	80083cc <malloc>
 8008424:	4602      	mov	r2, r0
 8008426:	6260      	str	r0, [r4, #36]	; 0x24
 8008428:	b920      	cbnz	r0, 8008434 <_Balloc+0x20>
 800842a:	2166      	movs	r1, #102	; 0x66
 800842c:	4b17      	ldr	r3, [pc, #92]	; (800848c <_Balloc+0x78>)
 800842e:	4818      	ldr	r0, [pc, #96]	; (8008490 <_Balloc+0x7c>)
 8008430:	f000 fd92 	bl	8008f58 <__assert_func>
 8008434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008438:	6006      	str	r6, [r0, #0]
 800843a:	60c6      	str	r6, [r0, #12]
 800843c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800843e:	68f3      	ldr	r3, [r6, #12]
 8008440:	b183      	cbz	r3, 8008464 <_Balloc+0x50>
 8008442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800844a:	b9b8      	cbnz	r0, 800847c <_Balloc+0x68>
 800844c:	2101      	movs	r1, #1
 800844e:	fa01 f605 	lsl.w	r6, r1, r5
 8008452:	1d72      	adds	r2, r6, #5
 8008454:	4620      	mov	r0, r4
 8008456:	0092      	lsls	r2, r2, #2
 8008458:	f000 fb5e 	bl	8008b18 <_calloc_r>
 800845c:	b160      	cbz	r0, 8008478 <_Balloc+0x64>
 800845e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008462:	e00e      	b.n	8008482 <_Balloc+0x6e>
 8008464:	2221      	movs	r2, #33	; 0x21
 8008466:	2104      	movs	r1, #4
 8008468:	4620      	mov	r0, r4
 800846a:	f000 fb55 	bl	8008b18 <_calloc_r>
 800846e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008470:	60f0      	str	r0, [r6, #12]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e4      	bne.n	8008442 <_Balloc+0x2e>
 8008478:	2000      	movs	r0, #0
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	6802      	ldr	r2, [r0, #0]
 800847e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008482:	2300      	movs	r3, #0
 8008484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008488:	e7f7      	b.n	800847a <_Balloc+0x66>
 800848a:	bf00      	nop
 800848c:	0800b271 	.word	0x0800b271
 8008490:	0800b2f8 	.word	0x0800b2f8

08008494 <_Bfree>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008498:	4605      	mov	r5, r0
 800849a:	460c      	mov	r4, r1
 800849c:	b976      	cbnz	r6, 80084bc <_Bfree+0x28>
 800849e:	2010      	movs	r0, #16
 80084a0:	f7ff ff94 	bl	80083cc <malloc>
 80084a4:	4602      	mov	r2, r0
 80084a6:	6268      	str	r0, [r5, #36]	; 0x24
 80084a8:	b920      	cbnz	r0, 80084b4 <_Bfree+0x20>
 80084aa:	218a      	movs	r1, #138	; 0x8a
 80084ac:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <_Bfree+0x3c>)
 80084ae:	4809      	ldr	r0, [pc, #36]	; (80084d4 <_Bfree+0x40>)
 80084b0:	f000 fd52 	bl	8008f58 <__assert_func>
 80084b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084b8:	6006      	str	r6, [r0, #0]
 80084ba:	60c6      	str	r6, [r0, #12]
 80084bc:	b13c      	cbz	r4, 80084ce <_Bfree+0x3a>
 80084be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084c0:	6862      	ldr	r2, [r4, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084c8:	6021      	str	r1, [r4, #0]
 80084ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	0800b271 	.word	0x0800b271
 80084d4:	0800b2f8 	.word	0x0800b2f8

080084d8 <__multadd>:
 80084d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084dc:	4698      	mov	r8, r3
 80084de:	460c      	mov	r4, r1
 80084e0:	2300      	movs	r3, #0
 80084e2:	690e      	ldr	r6, [r1, #16]
 80084e4:	4607      	mov	r7, r0
 80084e6:	f101 0014 	add.w	r0, r1, #20
 80084ea:	6805      	ldr	r5, [r0, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	b2a9      	uxth	r1, r5
 80084f0:	fb02 8101 	mla	r1, r2, r1, r8
 80084f4:	0c2d      	lsrs	r5, r5, #16
 80084f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80084fa:	fb02 c505 	mla	r5, r2, r5, ip
 80084fe:	b289      	uxth	r1, r1
 8008500:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008504:	429e      	cmp	r6, r3
 8008506:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800850a:	f840 1b04 	str.w	r1, [r0], #4
 800850e:	dcec      	bgt.n	80084ea <__multadd+0x12>
 8008510:	f1b8 0f00 	cmp.w	r8, #0
 8008514:	d022      	beq.n	800855c <__multadd+0x84>
 8008516:	68a3      	ldr	r3, [r4, #8]
 8008518:	42b3      	cmp	r3, r6
 800851a:	dc19      	bgt.n	8008550 <__multadd+0x78>
 800851c:	6861      	ldr	r1, [r4, #4]
 800851e:	4638      	mov	r0, r7
 8008520:	3101      	adds	r1, #1
 8008522:	f7ff ff77 	bl	8008414 <_Balloc>
 8008526:	4605      	mov	r5, r0
 8008528:	b928      	cbnz	r0, 8008536 <__multadd+0x5e>
 800852a:	4602      	mov	r2, r0
 800852c:	21b5      	movs	r1, #181	; 0xb5
 800852e:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <__multadd+0x8c>)
 8008530:	480d      	ldr	r0, [pc, #52]	; (8008568 <__multadd+0x90>)
 8008532:	f000 fd11 	bl	8008f58 <__assert_func>
 8008536:	6922      	ldr	r2, [r4, #16]
 8008538:	f104 010c 	add.w	r1, r4, #12
 800853c:	3202      	adds	r2, #2
 800853e:	0092      	lsls	r2, r2, #2
 8008540:	300c      	adds	r0, #12
 8008542:	f7ff ff59 	bl	80083f8 <memcpy>
 8008546:	4621      	mov	r1, r4
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff ffa3 	bl	8008494 <_Bfree>
 800854e:	462c      	mov	r4, r5
 8008550:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008554:	3601      	adds	r6, #1
 8008556:	f8c3 8014 	str.w	r8, [r3, #20]
 800855a:	6126      	str	r6, [r4, #16]
 800855c:	4620      	mov	r0, r4
 800855e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008562:	bf00      	nop
 8008564:	0800b2e7 	.word	0x0800b2e7
 8008568:	0800b2f8 	.word	0x0800b2f8

0800856c <__hi0bits>:
 800856c:	0c02      	lsrs	r2, r0, #16
 800856e:	0412      	lsls	r2, r2, #16
 8008570:	4603      	mov	r3, r0
 8008572:	b9ca      	cbnz	r2, 80085a8 <__hi0bits+0x3c>
 8008574:	0403      	lsls	r3, r0, #16
 8008576:	2010      	movs	r0, #16
 8008578:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800857c:	bf04      	itt	eq
 800857e:	021b      	lsleq	r3, r3, #8
 8008580:	3008      	addeq	r0, #8
 8008582:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008586:	bf04      	itt	eq
 8008588:	011b      	lsleq	r3, r3, #4
 800858a:	3004      	addeq	r0, #4
 800858c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008590:	bf04      	itt	eq
 8008592:	009b      	lsleq	r3, r3, #2
 8008594:	3002      	addeq	r0, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	db05      	blt.n	80085a6 <__hi0bits+0x3a>
 800859a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800859e:	f100 0001 	add.w	r0, r0, #1
 80085a2:	bf08      	it	eq
 80085a4:	2020      	moveq	r0, #32
 80085a6:	4770      	bx	lr
 80085a8:	2000      	movs	r0, #0
 80085aa:	e7e5      	b.n	8008578 <__hi0bits+0xc>

080085ac <__lo0bits>:
 80085ac:	6803      	ldr	r3, [r0, #0]
 80085ae:	4602      	mov	r2, r0
 80085b0:	f013 0007 	ands.w	r0, r3, #7
 80085b4:	d00b      	beq.n	80085ce <__lo0bits+0x22>
 80085b6:	07d9      	lsls	r1, r3, #31
 80085b8:	d422      	bmi.n	8008600 <__lo0bits+0x54>
 80085ba:	0798      	lsls	r0, r3, #30
 80085bc:	bf49      	itett	mi
 80085be:	085b      	lsrmi	r3, r3, #1
 80085c0:	089b      	lsrpl	r3, r3, #2
 80085c2:	2001      	movmi	r0, #1
 80085c4:	6013      	strmi	r3, [r2, #0]
 80085c6:	bf5c      	itt	pl
 80085c8:	2002      	movpl	r0, #2
 80085ca:	6013      	strpl	r3, [r2, #0]
 80085cc:	4770      	bx	lr
 80085ce:	b299      	uxth	r1, r3
 80085d0:	b909      	cbnz	r1, 80085d6 <__lo0bits+0x2a>
 80085d2:	2010      	movs	r0, #16
 80085d4:	0c1b      	lsrs	r3, r3, #16
 80085d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80085da:	bf04      	itt	eq
 80085dc:	0a1b      	lsreq	r3, r3, #8
 80085de:	3008      	addeq	r0, #8
 80085e0:	0719      	lsls	r1, r3, #28
 80085e2:	bf04      	itt	eq
 80085e4:	091b      	lsreq	r3, r3, #4
 80085e6:	3004      	addeq	r0, #4
 80085e8:	0799      	lsls	r1, r3, #30
 80085ea:	bf04      	itt	eq
 80085ec:	089b      	lsreq	r3, r3, #2
 80085ee:	3002      	addeq	r0, #2
 80085f0:	07d9      	lsls	r1, r3, #31
 80085f2:	d403      	bmi.n	80085fc <__lo0bits+0x50>
 80085f4:	085b      	lsrs	r3, r3, #1
 80085f6:	f100 0001 	add.w	r0, r0, #1
 80085fa:	d003      	beq.n	8008604 <__lo0bits+0x58>
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	4770      	bx	lr
 8008600:	2000      	movs	r0, #0
 8008602:	4770      	bx	lr
 8008604:	2020      	movs	r0, #32
 8008606:	4770      	bx	lr

08008608 <__i2b>:
 8008608:	b510      	push	{r4, lr}
 800860a:	460c      	mov	r4, r1
 800860c:	2101      	movs	r1, #1
 800860e:	f7ff ff01 	bl	8008414 <_Balloc>
 8008612:	4602      	mov	r2, r0
 8008614:	b928      	cbnz	r0, 8008622 <__i2b+0x1a>
 8008616:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800861a:	4b04      	ldr	r3, [pc, #16]	; (800862c <__i2b+0x24>)
 800861c:	4804      	ldr	r0, [pc, #16]	; (8008630 <__i2b+0x28>)
 800861e:	f000 fc9b 	bl	8008f58 <__assert_func>
 8008622:	2301      	movs	r3, #1
 8008624:	6144      	str	r4, [r0, #20]
 8008626:	6103      	str	r3, [r0, #16]
 8008628:	bd10      	pop	{r4, pc}
 800862a:	bf00      	nop
 800862c:	0800b2e7 	.word	0x0800b2e7
 8008630:	0800b2f8 	.word	0x0800b2f8

08008634 <__multiply>:
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	4614      	mov	r4, r2
 800863a:	690a      	ldr	r2, [r1, #16]
 800863c:	6923      	ldr	r3, [r4, #16]
 800863e:	460d      	mov	r5, r1
 8008640:	429a      	cmp	r2, r3
 8008642:	bfbe      	ittt	lt
 8008644:	460b      	movlt	r3, r1
 8008646:	4625      	movlt	r5, r4
 8008648:	461c      	movlt	r4, r3
 800864a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800864e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008652:	68ab      	ldr	r3, [r5, #8]
 8008654:	6869      	ldr	r1, [r5, #4]
 8008656:	eb0a 0709 	add.w	r7, sl, r9
 800865a:	42bb      	cmp	r3, r7
 800865c:	b085      	sub	sp, #20
 800865e:	bfb8      	it	lt
 8008660:	3101      	addlt	r1, #1
 8008662:	f7ff fed7 	bl	8008414 <_Balloc>
 8008666:	b930      	cbnz	r0, 8008676 <__multiply+0x42>
 8008668:	4602      	mov	r2, r0
 800866a:	f240 115d 	movw	r1, #349	; 0x15d
 800866e:	4b41      	ldr	r3, [pc, #260]	; (8008774 <__multiply+0x140>)
 8008670:	4841      	ldr	r0, [pc, #260]	; (8008778 <__multiply+0x144>)
 8008672:	f000 fc71 	bl	8008f58 <__assert_func>
 8008676:	f100 0614 	add.w	r6, r0, #20
 800867a:	4633      	mov	r3, r6
 800867c:	2200      	movs	r2, #0
 800867e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008682:	4543      	cmp	r3, r8
 8008684:	d31e      	bcc.n	80086c4 <__multiply+0x90>
 8008686:	f105 0c14 	add.w	ip, r5, #20
 800868a:	f104 0314 	add.w	r3, r4, #20
 800868e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008692:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008696:	9202      	str	r2, [sp, #8]
 8008698:	ebac 0205 	sub.w	r2, ip, r5
 800869c:	3a15      	subs	r2, #21
 800869e:	f022 0203 	bic.w	r2, r2, #3
 80086a2:	3204      	adds	r2, #4
 80086a4:	f105 0115 	add.w	r1, r5, #21
 80086a8:	458c      	cmp	ip, r1
 80086aa:	bf38      	it	cc
 80086ac:	2204      	movcc	r2, #4
 80086ae:	9201      	str	r2, [sp, #4]
 80086b0:	9a02      	ldr	r2, [sp, #8]
 80086b2:	9303      	str	r3, [sp, #12]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d808      	bhi.n	80086ca <__multiply+0x96>
 80086b8:	2f00      	cmp	r7, #0
 80086ba:	dc55      	bgt.n	8008768 <__multiply+0x134>
 80086bc:	6107      	str	r7, [r0, #16]
 80086be:	b005      	add	sp, #20
 80086c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c4:	f843 2b04 	str.w	r2, [r3], #4
 80086c8:	e7db      	b.n	8008682 <__multiply+0x4e>
 80086ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80086ce:	f1ba 0f00 	cmp.w	sl, #0
 80086d2:	d020      	beq.n	8008716 <__multiply+0xe2>
 80086d4:	46b1      	mov	r9, r6
 80086d6:	2200      	movs	r2, #0
 80086d8:	f105 0e14 	add.w	lr, r5, #20
 80086dc:	f85e 4b04 	ldr.w	r4, [lr], #4
 80086e0:	f8d9 b000 	ldr.w	fp, [r9]
 80086e4:	b2a1      	uxth	r1, r4
 80086e6:	fa1f fb8b 	uxth.w	fp, fp
 80086ea:	fb0a b101 	mla	r1, sl, r1, fp
 80086ee:	4411      	add	r1, r2
 80086f0:	f8d9 2000 	ldr.w	r2, [r9]
 80086f4:	0c24      	lsrs	r4, r4, #16
 80086f6:	0c12      	lsrs	r2, r2, #16
 80086f8:	fb0a 2404 	mla	r4, sl, r4, r2
 80086fc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008700:	b289      	uxth	r1, r1
 8008702:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008706:	45f4      	cmp	ip, lr
 8008708:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800870c:	f849 1b04 	str.w	r1, [r9], #4
 8008710:	d8e4      	bhi.n	80086dc <__multiply+0xa8>
 8008712:	9901      	ldr	r1, [sp, #4]
 8008714:	5072      	str	r2, [r6, r1]
 8008716:	9a03      	ldr	r2, [sp, #12]
 8008718:	3304      	adds	r3, #4
 800871a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800871e:	f1b9 0f00 	cmp.w	r9, #0
 8008722:	d01f      	beq.n	8008764 <__multiply+0x130>
 8008724:	46b6      	mov	lr, r6
 8008726:	f04f 0a00 	mov.w	sl, #0
 800872a:	6834      	ldr	r4, [r6, #0]
 800872c:	f105 0114 	add.w	r1, r5, #20
 8008730:	880a      	ldrh	r2, [r1, #0]
 8008732:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008736:	b2a4      	uxth	r4, r4
 8008738:	fb09 b202 	mla	r2, r9, r2, fp
 800873c:	4492      	add	sl, r2
 800873e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008742:	f84e 4b04 	str.w	r4, [lr], #4
 8008746:	f851 4b04 	ldr.w	r4, [r1], #4
 800874a:	f8be 2000 	ldrh.w	r2, [lr]
 800874e:	0c24      	lsrs	r4, r4, #16
 8008750:	fb09 2404 	mla	r4, r9, r4, r2
 8008754:	458c      	cmp	ip, r1
 8008756:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800875a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800875e:	d8e7      	bhi.n	8008730 <__multiply+0xfc>
 8008760:	9a01      	ldr	r2, [sp, #4]
 8008762:	50b4      	str	r4, [r6, r2]
 8008764:	3604      	adds	r6, #4
 8008766:	e7a3      	b.n	80086b0 <__multiply+0x7c>
 8008768:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1a5      	bne.n	80086bc <__multiply+0x88>
 8008770:	3f01      	subs	r7, #1
 8008772:	e7a1      	b.n	80086b8 <__multiply+0x84>
 8008774:	0800b2e7 	.word	0x0800b2e7
 8008778:	0800b2f8 	.word	0x0800b2f8

0800877c <__pow5mult>:
 800877c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008780:	4615      	mov	r5, r2
 8008782:	f012 0203 	ands.w	r2, r2, #3
 8008786:	4606      	mov	r6, r0
 8008788:	460f      	mov	r7, r1
 800878a:	d007      	beq.n	800879c <__pow5mult+0x20>
 800878c:	4c25      	ldr	r4, [pc, #148]	; (8008824 <__pow5mult+0xa8>)
 800878e:	3a01      	subs	r2, #1
 8008790:	2300      	movs	r3, #0
 8008792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008796:	f7ff fe9f 	bl	80084d8 <__multadd>
 800879a:	4607      	mov	r7, r0
 800879c:	10ad      	asrs	r5, r5, #2
 800879e:	d03d      	beq.n	800881c <__pow5mult+0xa0>
 80087a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087a2:	b97c      	cbnz	r4, 80087c4 <__pow5mult+0x48>
 80087a4:	2010      	movs	r0, #16
 80087a6:	f7ff fe11 	bl	80083cc <malloc>
 80087aa:	4602      	mov	r2, r0
 80087ac:	6270      	str	r0, [r6, #36]	; 0x24
 80087ae:	b928      	cbnz	r0, 80087bc <__pow5mult+0x40>
 80087b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087b4:	4b1c      	ldr	r3, [pc, #112]	; (8008828 <__pow5mult+0xac>)
 80087b6:	481d      	ldr	r0, [pc, #116]	; (800882c <__pow5mult+0xb0>)
 80087b8:	f000 fbce 	bl	8008f58 <__assert_func>
 80087bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087c0:	6004      	str	r4, [r0, #0]
 80087c2:	60c4      	str	r4, [r0, #12]
 80087c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087cc:	b94c      	cbnz	r4, 80087e2 <__pow5mult+0x66>
 80087ce:	f240 2171 	movw	r1, #625	; 0x271
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7ff ff18 	bl	8008608 <__i2b>
 80087d8:	2300      	movs	r3, #0
 80087da:	4604      	mov	r4, r0
 80087dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80087e0:	6003      	str	r3, [r0, #0]
 80087e2:	f04f 0900 	mov.w	r9, #0
 80087e6:	07eb      	lsls	r3, r5, #31
 80087e8:	d50a      	bpl.n	8008800 <__pow5mult+0x84>
 80087ea:	4639      	mov	r1, r7
 80087ec:	4622      	mov	r2, r4
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7ff ff20 	bl	8008634 <__multiply>
 80087f4:	4680      	mov	r8, r0
 80087f6:	4639      	mov	r1, r7
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7ff fe4b 	bl	8008494 <_Bfree>
 80087fe:	4647      	mov	r7, r8
 8008800:	106d      	asrs	r5, r5, #1
 8008802:	d00b      	beq.n	800881c <__pow5mult+0xa0>
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	b938      	cbnz	r0, 8008818 <__pow5mult+0x9c>
 8008808:	4622      	mov	r2, r4
 800880a:	4621      	mov	r1, r4
 800880c:	4630      	mov	r0, r6
 800880e:	f7ff ff11 	bl	8008634 <__multiply>
 8008812:	6020      	str	r0, [r4, #0]
 8008814:	f8c0 9000 	str.w	r9, [r0]
 8008818:	4604      	mov	r4, r0
 800881a:	e7e4      	b.n	80087e6 <__pow5mult+0x6a>
 800881c:	4638      	mov	r0, r7
 800881e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008822:	bf00      	nop
 8008824:	0800b448 	.word	0x0800b448
 8008828:	0800b271 	.word	0x0800b271
 800882c:	0800b2f8 	.word	0x0800b2f8

08008830 <__lshift>:
 8008830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008834:	460c      	mov	r4, r1
 8008836:	4607      	mov	r7, r0
 8008838:	4691      	mov	r9, r2
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	6849      	ldr	r1, [r1, #4]
 800883e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008842:	68a3      	ldr	r3, [r4, #8]
 8008844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008848:	f108 0601 	add.w	r6, r8, #1
 800884c:	42b3      	cmp	r3, r6
 800884e:	db0b      	blt.n	8008868 <__lshift+0x38>
 8008850:	4638      	mov	r0, r7
 8008852:	f7ff fddf 	bl	8008414 <_Balloc>
 8008856:	4605      	mov	r5, r0
 8008858:	b948      	cbnz	r0, 800886e <__lshift+0x3e>
 800885a:	4602      	mov	r2, r0
 800885c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008860:	4b27      	ldr	r3, [pc, #156]	; (8008900 <__lshift+0xd0>)
 8008862:	4828      	ldr	r0, [pc, #160]	; (8008904 <__lshift+0xd4>)
 8008864:	f000 fb78 	bl	8008f58 <__assert_func>
 8008868:	3101      	adds	r1, #1
 800886a:	005b      	lsls	r3, r3, #1
 800886c:	e7ee      	b.n	800884c <__lshift+0x1c>
 800886e:	2300      	movs	r3, #0
 8008870:	f100 0114 	add.w	r1, r0, #20
 8008874:	f100 0210 	add.w	r2, r0, #16
 8008878:	4618      	mov	r0, r3
 800887a:	4553      	cmp	r3, sl
 800887c:	db33      	blt.n	80088e6 <__lshift+0xb6>
 800887e:	6920      	ldr	r0, [r4, #16]
 8008880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008884:	f104 0314 	add.w	r3, r4, #20
 8008888:	f019 091f 	ands.w	r9, r9, #31
 800888c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008894:	d02b      	beq.n	80088ee <__lshift+0xbe>
 8008896:	468a      	mov	sl, r1
 8008898:	2200      	movs	r2, #0
 800889a:	f1c9 0e20 	rsb	lr, r9, #32
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	fa00 f009 	lsl.w	r0, r0, r9
 80088a4:	4302      	orrs	r2, r0
 80088a6:	f84a 2b04 	str.w	r2, [sl], #4
 80088aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ae:	459c      	cmp	ip, r3
 80088b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80088b4:	d8f3      	bhi.n	800889e <__lshift+0x6e>
 80088b6:	ebac 0304 	sub.w	r3, ip, r4
 80088ba:	3b15      	subs	r3, #21
 80088bc:	f023 0303 	bic.w	r3, r3, #3
 80088c0:	3304      	adds	r3, #4
 80088c2:	f104 0015 	add.w	r0, r4, #21
 80088c6:	4584      	cmp	ip, r0
 80088c8:	bf38      	it	cc
 80088ca:	2304      	movcc	r3, #4
 80088cc:	50ca      	str	r2, [r1, r3]
 80088ce:	b10a      	cbz	r2, 80088d4 <__lshift+0xa4>
 80088d0:	f108 0602 	add.w	r6, r8, #2
 80088d4:	3e01      	subs	r6, #1
 80088d6:	4638      	mov	r0, r7
 80088d8:	4621      	mov	r1, r4
 80088da:	612e      	str	r6, [r5, #16]
 80088dc:	f7ff fdda 	bl	8008494 <_Bfree>
 80088e0:	4628      	mov	r0, r5
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80088ea:	3301      	adds	r3, #1
 80088ec:	e7c5      	b.n	800887a <__lshift+0x4a>
 80088ee:	3904      	subs	r1, #4
 80088f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f4:	459c      	cmp	ip, r3
 80088f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80088fa:	d8f9      	bhi.n	80088f0 <__lshift+0xc0>
 80088fc:	e7ea      	b.n	80088d4 <__lshift+0xa4>
 80088fe:	bf00      	nop
 8008900:	0800b2e7 	.word	0x0800b2e7
 8008904:	0800b2f8 	.word	0x0800b2f8

08008908 <__mcmp>:
 8008908:	4603      	mov	r3, r0
 800890a:	690a      	ldr	r2, [r1, #16]
 800890c:	6900      	ldr	r0, [r0, #16]
 800890e:	b530      	push	{r4, r5, lr}
 8008910:	1a80      	subs	r0, r0, r2
 8008912:	d10d      	bne.n	8008930 <__mcmp+0x28>
 8008914:	3314      	adds	r3, #20
 8008916:	3114      	adds	r1, #20
 8008918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800891c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008928:	4295      	cmp	r5, r2
 800892a:	d002      	beq.n	8008932 <__mcmp+0x2a>
 800892c:	d304      	bcc.n	8008938 <__mcmp+0x30>
 800892e:	2001      	movs	r0, #1
 8008930:	bd30      	pop	{r4, r5, pc}
 8008932:	42a3      	cmp	r3, r4
 8008934:	d3f4      	bcc.n	8008920 <__mcmp+0x18>
 8008936:	e7fb      	b.n	8008930 <__mcmp+0x28>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800893c:	e7f8      	b.n	8008930 <__mcmp+0x28>
	...

08008940 <__mdiff>:
 8008940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	460c      	mov	r4, r1
 8008946:	4606      	mov	r6, r0
 8008948:	4611      	mov	r1, r2
 800894a:	4620      	mov	r0, r4
 800894c:	4692      	mov	sl, r2
 800894e:	f7ff ffdb 	bl	8008908 <__mcmp>
 8008952:	1e05      	subs	r5, r0, #0
 8008954:	d111      	bne.n	800897a <__mdiff+0x3a>
 8008956:	4629      	mov	r1, r5
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff fd5b 	bl	8008414 <_Balloc>
 800895e:	4602      	mov	r2, r0
 8008960:	b928      	cbnz	r0, 800896e <__mdiff+0x2e>
 8008962:	f240 2132 	movw	r1, #562	; 0x232
 8008966:	4b3c      	ldr	r3, [pc, #240]	; (8008a58 <__mdiff+0x118>)
 8008968:	483c      	ldr	r0, [pc, #240]	; (8008a5c <__mdiff+0x11c>)
 800896a:	f000 faf5 	bl	8008f58 <__assert_func>
 800896e:	2301      	movs	r3, #1
 8008970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008974:	4610      	mov	r0, r2
 8008976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897a:	bfa4      	itt	ge
 800897c:	4653      	movge	r3, sl
 800897e:	46a2      	movge	sl, r4
 8008980:	4630      	mov	r0, r6
 8008982:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008986:	bfa6      	itte	ge
 8008988:	461c      	movge	r4, r3
 800898a:	2500      	movge	r5, #0
 800898c:	2501      	movlt	r5, #1
 800898e:	f7ff fd41 	bl	8008414 <_Balloc>
 8008992:	4602      	mov	r2, r0
 8008994:	b918      	cbnz	r0, 800899e <__mdiff+0x5e>
 8008996:	f44f 7110 	mov.w	r1, #576	; 0x240
 800899a:	4b2f      	ldr	r3, [pc, #188]	; (8008a58 <__mdiff+0x118>)
 800899c:	e7e4      	b.n	8008968 <__mdiff+0x28>
 800899e:	f100 0814 	add.w	r8, r0, #20
 80089a2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80089a6:	60c5      	str	r5, [r0, #12]
 80089a8:	f04f 0c00 	mov.w	ip, #0
 80089ac:	f10a 0514 	add.w	r5, sl, #20
 80089b0:	f10a 0010 	add.w	r0, sl, #16
 80089b4:	46c2      	mov	sl, r8
 80089b6:	6926      	ldr	r6, [r4, #16]
 80089b8:	f104 0914 	add.w	r9, r4, #20
 80089bc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80089c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089c4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80089c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80089cc:	fa1f f18b 	uxth.w	r1, fp
 80089d0:	4461      	add	r1, ip
 80089d2:	fa1f fc83 	uxth.w	ip, r3
 80089d6:	0c1b      	lsrs	r3, r3, #16
 80089d8:	eba1 010c 	sub.w	r1, r1, ip
 80089dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80089e4:	b289      	uxth	r1, r1
 80089e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80089ea:	454e      	cmp	r6, r9
 80089ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80089f0:	f84a 3b04 	str.w	r3, [sl], #4
 80089f4:	d8e6      	bhi.n	80089c4 <__mdiff+0x84>
 80089f6:	1b33      	subs	r3, r6, r4
 80089f8:	3b15      	subs	r3, #21
 80089fa:	f023 0303 	bic.w	r3, r3, #3
 80089fe:	3415      	adds	r4, #21
 8008a00:	3304      	adds	r3, #4
 8008a02:	42a6      	cmp	r6, r4
 8008a04:	bf38      	it	cc
 8008a06:	2304      	movcc	r3, #4
 8008a08:	441d      	add	r5, r3
 8008a0a:	4443      	add	r3, r8
 8008a0c:	461e      	mov	r6, r3
 8008a0e:	462c      	mov	r4, r5
 8008a10:	4574      	cmp	r4, lr
 8008a12:	d30e      	bcc.n	8008a32 <__mdiff+0xf2>
 8008a14:	f10e 0103 	add.w	r1, lr, #3
 8008a18:	1b49      	subs	r1, r1, r5
 8008a1a:	f021 0103 	bic.w	r1, r1, #3
 8008a1e:	3d03      	subs	r5, #3
 8008a20:	45ae      	cmp	lr, r5
 8008a22:	bf38      	it	cc
 8008a24:	2100      	movcc	r1, #0
 8008a26:	4419      	add	r1, r3
 8008a28:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a2c:	b18b      	cbz	r3, 8008a52 <__mdiff+0x112>
 8008a2e:	6117      	str	r7, [r2, #16]
 8008a30:	e7a0      	b.n	8008974 <__mdiff+0x34>
 8008a32:	f854 8b04 	ldr.w	r8, [r4], #4
 8008a36:	fa1f f188 	uxth.w	r1, r8
 8008a3a:	4461      	add	r1, ip
 8008a3c:	1408      	asrs	r0, r1, #16
 8008a3e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008a42:	b289      	uxth	r1, r1
 8008a44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a4c:	f846 1b04 	str.w	r1, [r6], #4
 8008a50:	e7de      	b.n	8008a10 <__mdiff+0xd0>
 8008a52:	3f01      	subs	r7, #1
 8008a54:	e7e8      	b.n	8008a28 <__mdiff+0xe8>
 8008a56:	bf00      	nop
 8008a58:	0800b2e7 	.word	0x0800b2e7
 8008a5c:	0800b2f8 	.word	0x0800b2f8

08008a60 <__d2b>:
 8008a60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008a64:	2101      	movs	r1, #1
 8008a66:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008a6a:	4690      	mov	r8, r2
 8008a6c:	461d      	mov	r5, r3
 8008a6e:	f7ff fcd1 	bl	8008414 <_Balloc>
 8008a72:	4604      	mov	r4, r0
 8008a74:	b930      	cbnz	r0, 8008a84 <__d2b+0x24>
 8008a76:	4602      	mov	r2, r0
 8008a78:	f240 310a 	movw	r1, #778	; 0x30a
 8008a7c:	4b24      	ldr	r3, [pc, #144]	; (8008b10 <__d2b+0xb0>)
 8008a7e:	4825      	ldr	r0, [pc, #148]	; (8008b14 <__d2b+0xb4>)
 8008a80:	f000 fa6a 	bl	8008f58 <__assert_func>
 8008a84:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008a88:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008a8c:	bb2d      	cbnz	r5, 8008ada <__d2b+0x7a>
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	f1b8 0300 	subs.w	r3, r8, #0
 8008a94:	d026      	beq.n	8008ae4 <__d2b+0x84>
 8008a96:	4668      	mov	r0, sp
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	f7ff fd87 	bl	80085ac <__lo0bits>
 8008a9e:	9900      	ldr	r1, [sp, #0]
 8008aa0:	b1f0      	cbz	r0, 8008ae0 <__d2b+0x80>
 8008aa2:	9a01      	ldr	r2, [sp, #4]
 8008aa4:	f1c0 0320 	rsb	r3, r0, #32
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	430b      	orrs	r3, r1
 8008aae:	40c2      	lsrs	r2, r0
 8008ab0:	6163      	str	r3, [r4, #20]
 8008ab2:	9201      	str	r2, [sp, #4]
 8008ab4:	9b01      	ldr	r3, [sp, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bf14      	ite	ne
 8008aba:	2102      	movne	r1, #2
 8008abc:	2101      	moveq	r1, #1
 8008abe:	61a3      	str	r3, [r4, #24]
 8008ac0:	6121      	str	r1, [r4, #16]
 8008ac2:	b1c5      	cbz	r5, 8008af6 <__d2b+0x96>
 8008ac4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ac8:	4405      	add	r5, r0
 8008aca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ace:	603d      	str	r5, [r7, #0]
 8008ad0:	6030      	str	r0, [r6, #0]
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	b002      	add	sp, #8
 8008ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ade:	e7d6      	b.n	8008a8e <__d2b+0x2e>
 8008ae0:	6161      	str	r1, [r4, #20]
 8008ae2:	e7e7      	b.n	8008ab4 <__d2b+0x54>
 8008ae4:	a801      	add	r0, sp, #4
 8008ae6:	f7ff fd61 	bl	80085ac <__lo0bits>
 8008aea:	2101      	movs	r1, #1
 8008aec:	9b01      	ldr	r3, [sp, #4]
 8008aee:	6121      	str	r1, [r4, #16]
 8008af0:	6163      	str	r3, [r4, #20]
 8008af2:	3020      	adds	r0, #32
 8008af4:	e7e5      	b.n	8008ac2 <__d2b+0x62>
 8008af6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008afa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008afe:	6038      	str	r0, [r7, #0]
 8008b00:	6918      	ldr	r0, [r3, #16]
 8008b02:	f7ff fd33 	bl	800856c <__hi0bits>
 8008b06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008b0a:	6031      	str	r1, [r6, #0]
 8008b0c:	e7e1      	b.n	8008ad2 <__d2b+0x72>
 8008b0e:	bf00      	nop
 8008b10:	0800b2e7 	.word	0x0800b2e7
 8008b14:	0800b2f8 	.word	0x0800b2f8

08008b18 <_calloc_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	fb02 f501 	mul.w	r5, r2, r1
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f000 f854 	bl	8008bcc <_malloc_r>
 8008b24:	4604      	mov	r4, r0
 8008b26:	b118      	cbz	r0, 8008b30 <_calloc_r+0x18>
 8008b28:	462a      	mov	r2, r5
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	f7fe f944 	bl	8006db8 <memset>
 8008b30:	4620      	mov	r0, r4
 8008b32:	bd38      	pop	{r3, r4, r5, pc}

08008b34 <_free_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4605      	mov	r5, r0
 8008b38:	2900      	cmp	r1, #0
 8008b3a:	d043      	beq.n	8008bc4 <_free_r+0x90>
 8008b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b40:	1f0c      	subs	r4, r1, #4
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bfb8      	it	lt
 8008b46:	18e4      	addlt	r4, r4, r3
 8008b48:	f000 fa62 	bl	8009010 <__malloc_lock>
 8008b4c:	4a1e      	ldr	r2, [pc, #120]	; (8008bc8 <_free_r+0x94>)
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	4610      	mov	r0, r2
 8008b52:	b933      	cbnz	r3, 8008b62 <_free_r+0x2e>
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	6014      	str	r4, [r2, #0]
 8008b58:	4628      	mov	r0, r5
 8008b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b5e:	f000 ba5d 	b.w	800901c <__malloc_unlock>
 8008b62:	42a3      	cmp	r3, r4
 8008b64:	d90a      	bls.n	8008b7c <_free_r+0x48>
 8008b66:	6821      	ldr	r1, [r4, #0]
 8008b68:	1862      	adds	r2, r4, r1
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	bf01      	itttt	eq
 8008b6e:	681a      	ldreq	r2, [r3, #0]
 8008b70:	685b      	ldreq	r3, [r3, #4]
 8008b72:	1852      	addeq	r2, r2, r1
 8008b74:	6022      	streq	r2, [r4, #0]
 8008b76:	6063      	str	r3, [r4, #4]
 8008b78:	6004      	str	r4, [r0, #0]
 8008b7a:	e7ed      	b.n	8008b58 <_free_r+0x24>
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	b10b      	cbz	r3, 8008b86 <_free_r+0x52>
 8008b82:	42a3      	cmp	r3, r4
 8008b84:	d9fa      	bls.n	8008b7c <_free_r+0x48>
 8008b86:	6811      	ldr	r1, [r2, #0]
 8008b88:	1850      	adds	r0, r2, r1
 8008b8a:	42a0      	cmp	r0, r4
 8008b8c:	d10b      	bne.n	8008ba6 <_free_r+0x72>
 8008b8e:	6820      	ldr	r0, [r4, #0]
 8008b90:	4401      	add	r1, r0
 8008b92:	1850      	adds	r0, r2, r1
 8008b94:	4283      	cmp	r3, r0
 8008b96:	6011      	str	r1, [r2, #0]
 8008b98:	d1de      	bne.n	8008b58 <_free_r+0x24>
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	4401      	add	r1, r0
 8008ba0:	6011      	str	r1, [r2, #0]
 8008ba2:	6053      	str	r3, [r2, #4]
 8008ba4:	e7d8      	b.n	8008b58 <_free_r+0x24>
 8008ba6:	d902      	bls.n	8008bae <_free_r+0x7a>
 8008ba8:	230c      	movs	r3, #12
 8008baa:	602b      	str	r3, [r5, #0]
 8008bac:	e7d4      	b.n	8008b58 <_free_r+0x24>
 8008bae:	6820      	ldr	r0, [r4, #0]
 8008bb0:	1821      	adds	r1, r4, r0
 8008bb2:	428b      	cmp	r3, r1
 8008bb4:	bf01      	itttt	eq
 8008bb6:	6819      	ldreq	r1, [r3, #0]
 8008bb8:	685b      	ldreq	r3, [r3, #4]
 8008bba:	1809      	addeq	r1, r1, r0
 8008bbc:	6021      	streq	r1, [r4, #0]
 8008bbe:	6063      	str	r3, [r4, #4]
 8008bc0:	6054      	str	r4, [r2, #4]
 8008bc2:	e7c9      	b.n	8008b58 <_free_r+0x24>
 8008bc4:	bd38      	pop	{r3, r4, r5, pc}
 8008bc6:	bf00      	nop
 8008bc8:	200002dc 	.word	0x200002dc

08008bcc <_malloc_r>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	1ccd      	adds	r5, r1, #3
 8008bd0:	f025 0503 	bic.w	r5, r5, #3
 8008bd4:	3508      	adds	r5, #8
 8008bd6:	2d0c      	cmp	r5, #12
 8008bd8:	bf38      	it	cc
 8008bda:	250c      	movcc	r5, #12
 8008bdc:	2d00      	cmp	r5, #0
 8008bde:	4606      	mov	r6, r0
 8008be0:	db01      	blt.n	8008be6 <_malloc_r+0x1a>
 8008be2:	42a9      	cmp	r1, r5
 8008be4:	d903      	bls.n	8008bee <_malloc_r+0x22>
 8008be6:	230c      	movs	r3, #12
 8008be8:	6033      	str	r3, [r6, #0]
 8008bea:	2000      	movs	r0, #0
 8008bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bee:	f000 fa0f 	bl	8009010 <__malloc_lock>
 8008bf2:	4921      	ldr	r1, [pc, #132]	; (8008c78 <_malloc_r+0xac>)
 8008bf4:	680a      	ldr	r2, [r1, #0]
 8008bf6:	4614      	mov	r4, r2
 8008bf8:	b99c      	cbnz	r4, 8008c22 <_malloc_r+0x56>
 8008bfa:	4f20      	ldr	r7, [pc, #128]	; (8008c7c <_malloc_r+0xb0>)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	b923      	cbnz	r3, 8008c0a <_malloc_r+0x3e>
 8008c00:	4621      	mov	r1, r4
 8008c02:	4630      	mov	r0, r6
 8008c04:	f000 f998 	bl	8008f38 <_sbrk_r>
 8008c08:	6038      	str	r0, [r7, #0]
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f000 f993 	bl	8008f38 <_sbrk_r>
 8008c12:	1c43      	adds	r3, r0, #1
 8008c14:	d123      	bne.n	8008c5e <_malloc_r+0x92>
 8008c16:	230c      	movs	r3, #12
 8008c18:	4630      	mov	r0, r6
 8008c1a:	6033      	str	r3, [r6, #0]
 8008c1c:	f000 f9fe 	bl	800901c <__malloc_unlock>
 8008c20:	e7e3      	b.n	8008bea <_malloc_r+0x1e>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	1b5b      	subs	r3, r3, r5
 8008c26:	d417      	bmi.n	8008c58 <_malloc_r+0x8c>
 8008c28:	2b0b      	cmp	r3, #11
 8008c2a:	d903      	bls.n	8008c34 <_malloc_r+0x68>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	441c      	add	r4, r3
 8008c30:	6025      	str	r5, [r4, #0]
 8008c32:	e004      	b.n	8008c3e <_malloc_r+0x72>
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	42a2      	cmp	r2, r4
 8008c38:	bf0c      	ite	eq
 8008c3a:	600b      	streq	r3, [r1, #0]
 8008c3c:	6053      	strne	r3, [r2, #4]
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f000 f9ec 	bl	800901c <__malloc_unlock>
 8008c44:	f104 000b 	add.w	r0, r4, #11
 8008c48:	1d23      	adds	r3, r4, #4
 8008c4a:	f020 0007 	bic.w	r0, r0, #7
 8008c4e:	1ac2      	subs	r2, r0, r3
 8008c50:	d0cc      	beq.n	8008bec <_malloc_r+0x20>
 8008c52:	1a1b      	subs	r3, r3, r0
 8008c54:	50a3      	str	r3, [r4, r2]
 8008c56:	e7c9      	b.n	8008bec <_malloc_r+0x20>
 8008c58:	4622      	mov	r2, r4
 8008c5a:	6864      	ldr	r4, [r4, #4]
 8008c5c:	e7cc      	b.n	8008bf8 <_malloc_r+0x2c>
 8008c5e:	1cc4      	adds	r4, r0, #3
 8008c60:	f024 0403 	bic.w	r4, r4, #3
 8008c64:	42a0      	cmp	r0, r4
 8008c66:	d0e3      	beq.n	8008c30 <_malloc_r+0x64>
 8008c68:	1a21      	subs	r1, r4, r0
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f000 f964 	bl	8008f38 <_sbrk_r>
 8008c70:	3001      	adds	r0, #1
 8008c72:	d1dd      	bne.n	8008c30 <_malloc_r+0x64>
 8008c74:	e7cf      	b.n	8008c16 <_malloc_r+0x4a>
 8008c76:	bf00      	nop
 8008c78:	200002dc 	.word	0x200002dc
 8008c7c:	200002e0 	.word	0x200002e0

08008c80 <__ssputs_r>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	688e      	ldr	r6, [r1, #8]
 8008c86:	4682      	mov	sl, r0
 8008c88:	429e      	cmp	r6, r3
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	4690      	mov	r8, r2
 8008c8e:	461f      	mov	r7, r3
 8008c90:	d838      	bhi.n	8008d04 <__ssputs_r+0x84>
 8008c92:	898a      	ldrh	r2, [r1, #12]
 8008c94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c98:	d032      	beq.n	8008d00 <__ssputs_r+0x80>
 8008c9a:	6825      	ldr	r5, [r4, #0]
 8008c9c:	6909      	ldr	r1, [r1, #16]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	eba5 0901 	sub.w	r9, r5, r1
 8008ca4:	6965      	ldr	r5, [r4, #20]
 8008ca6:	444b      	add	r3, r9
 8008ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cb0:	106d      	asrs	r5, r5, #1
 8008cb2:	429d      	cmp	r5, r3
 8008cb4:	bf38      	it	cc
 8008cb6:	461d      	movcc	r5, r3
 8008cb8:	0553      	lsls	r3, r2, #21
 8008cba:	d531      	bpl.n	8008d20 <__ssputs_r+0xa0>
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	f7ff ff85 	bl	8008bcc <_malloc_r>
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	b950      	cbnz	r0, 8008cdc <__ssputs_r+0x5c>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ccc:	f8ca 3000 	str.w	r3, [sl]
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cdc:	464a      	mov	r2, r9
 8008cde:	6921      	ldr	r1, [r4, #16]
 8008ce0:	f7ff fb8a 	bl	80083f8 <memcpy>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	6126      	str	r6, [r4, #16]
 8008cf2:	444e      	add	r6, r9
 8008cf4:	6026      	str	r6, [r4, #0]
 8008cf6:	463e      	mov	r6, r7
 8008cf8:	6165      	str	r5, [r4, #20]
 8008cfa:	eba5 0509 	sub.w	r5, r5, r9
 8008cfe:	60a5      	str	r5, [r4, #8]
 8008d00:	42be      	cmp	r6, r7
 8008d02:	d900      	bls.n	8008d06 <__ssputs_r+0x86>
 8008d04:	463e      	mov	r6, r7
 8008d06:	4632      	mov	r2, r6
 8008d08:	4641      	mov	r1, r8
 8008d0a:	6820      	ldr	r0, [r4, #0]
 8008d0c:	f000 f966 	bl	8008fdc <memmove>
 8008d10:	68a3      	ldr	r3, [r4, #8]
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	1b9b      	subs	r3, r3, r6
 8008d16:	4432      	add	r2, r6
 8008d18:	2000      	movs	r0, #0
 8008d1a:	60a3      	str	r3, [r4, #8]
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	e7db      	b.n	8008cd8 <__ssputs_r+0x58>
 8008d20:	462a      	mov	r2, r5
 8008d22:	f000 f981 	bl	8009028 <_realloc_r>
 8008d26:	4606      	mov	r6, r0
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d1e1      	bne.n	8008cf0 <__ssputs_r+0x70>
 8008d2c:	4650      	mov	r0, sl
 8008d2e:	6921      	ldr	r1, [r4, #16]
 8008d30:	f7ff ff00 	bl	8008b34 <_free_r>
 8008d34:	e7c7      	b.n	8008cc6 <__ssputs_r+0x46>
	...

08008d38 <_svfiprintf_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	4698      	mov	r8, r3
 8008d3e:	898b      	ldrh	r3, [r1, #12]
 8008d40:	4607      	mov	r7, r0
 8008d42:	061b      	lsls	r3, r3, #24
 8008d44:	460d      	mov	r5, r1
 8008d46:	4614      	mov	r4, r2
 8008d48:	b09d      	sub	sp, #116	; 0x74
 8008d4a:	d50e      	bpl.n	8008d6a <_svfiprintf_r+0x32>
 8008d4c:	690b      	ldr	r3, [r1, #16]
 8008d4e:	b963      	cbnz	r3, 8008d6a <_svfiprintf_r+0x32>
 8008d50:	2140      	movs	r1, #64	; 0x40
 8008d52:	f7ff ff3b 	bl	8008bcc <_malloc_r>
 8008d56:	6028      	str	r0, [r5, #0]
 8008d58:	6128      	str	r0, [r5, #16]
 8008d5a:	b920      	cbnz	r0, 8008d66 <_svfiprintf_r+0x2e>
 8008d5c:	230c      	movs	r3, #12
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d64:	e0d1      	b.n	8008f0a <_svfiprintf_r+0x1d2>
 8008d66:	2340      	movs	r3, #64	; 0x40
 8008d68:	616b      	str	r3, [r5, #20]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d6e:	2320      	movs	r3, #32
 8008d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d74:	2330      	movs	r3, #48	; 0x30
 8008d76:	f04f 0901 	mov.w	r9, #1
 8008d7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f24 <_svfiprintf_r+0x1ec>
 8008d82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d86:	4623      	mov	r3, r4
 8008d88:	469a      	mov	sl, r3
 8008d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d8e:	b10a      	cbz	r2, 8008d94 <_svfiprintf_r+0x5c>
 8008d90:	2a25      	cmp	r2, #37	; 0x25
 8008d92:	d1f9      	bne.n	8008d88 <_svfiprintf_r+0x50>
 8008d94:	ebba 0b04 	subs.w	fp, sl, r4
 8008d98:	d00b      	beq.n	8008db2 <_svfiprintf_r+0x7a>
 8008d9a:	465b      	mov	r3, fp
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ff6d 	bl	8008c80 <__ssputs_r>
 8008da6:	3001      	adds	r0, #1
 8008da8:	f000 80aa 	beq.w	8008f00 <_svfiprintf_r+0x1c8>
 8008dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dae:	445a      	add	r2, fp
 8008db0:	9209      	str	r2, [sp, #36]	; 0x24
 8008db2:	f89a 3000 	ldrb.w	r3, [sl]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80a2 	beq.w	8008f00 <_svfiprintf_r+0x1c8>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc6:	f10a 0a01 	add.w	sl, sl, #1
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8008dd4:	4654      	mov	r4, sl
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ddc:	4851      	ldr	r0, [pc, #324]	; (8008f24 <_svfiprintf_r+0x1ec>)
 8008dde:	f7ff fafd 	bl	80083dc <memchr>
 8008de2:	9a04      	ldr	r2, [sp, #16]
 8008de4:	b9d8      	cbnz	r0, 8008e1e <_svfiprintf_r+0xe6>
 8008de6:	06d0      	lsls	r0, r2, #27
 8008de8:	bf44      	itt	mi
 8008dea:	2320      	movmi	r3, #32
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df0:	0711      	lsls	r1, r2, #28
 8008df2:	bf44      	itt	mi
 8008df4:	232b      	movmi	r3, #43	; 0x2b
 8008df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008e00:	d015      	beq.n	8008e2e <_svfiprintf_r+0xf6>
 8008e02:	4654      	mov	r4, sl
 8008e04:	2000      	movs	r0, #0
 8008e06:	f04f 0c0a 	mov.w	ip, #10
 8008e0a:	9a07      	ldr	r2, [sp, #28]
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e12:	3b30      	subs	r3, #48	; 0x30
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	d94e      	bls.n	8008eb6 <_svfiprintf_r+0x17e>
 8008e18:	b1b0      	cbz	r0, 8008e48 <_svfiprintf_r+0x110>
 8008e1a:	9207      	str	r2, [sp, #28]
 8008e1c:	e014      	b.n	8008e48 <_svfiprintf_r+0x110>
 8008e1e:	eba0 0308 	sub.w	r3, r0, r8
 8008e22:	fa09 f303 	lsl.w	r3, r9, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	46a2      	mov	sl, r4
 8008e2a:	9304      	str	r3, [sp, #16]
 8008e2c:	e7d2      	b.n	8008dd4 <_svfiprintf_r+0x9c>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	1d19      	adds	r1, r3, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	9103      	str	r1, [sp, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfbb      	ittet	lt
 8008e3a:	425b      	neglt	r3, r3
 8008e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e40:	9307      	strge	r3, [sp, #28]
 8008e42:	9307      	strlt	r3, [sp, #28]
 8008e44:	bfb8      	it	lt
 8008e46:	9204      	strlt	r2, [sp, #16]
 8008e48:	7823      	ldrb	r3, [r4, #0]
 8008e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e4c:	d10c      	bne.n	8008e68 <_svfiprintf_r+0x130>
 8008e4e:	7863      	ldrb	r3, [r4, #1]
 8008e50:	2b2a      	cmp	r3, #42	; 0x2a
 8008e52:	d135      	bne.n	8008ec0 <_svfiprintf_r+0x188>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	3402      	adds	r4, #2
 8008e58:	1d1a      	adds	r2, r3, #4
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	9203      	str	r2, [sp, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfb8      	it	lt
 8008e62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f34 <_svfiprintf_r+0x1fc>
 8008e6c:	2203      	movs	r2, #3
 8008e6e:	4650      	mov	r0, sl
 8008e70:	7821      	ldrb	r1, [r4, #0]
 8008e72:	f7ff fab3 	bl	80083dc <memchr>
 8008e76:	b140      	cbz	r0, 8008e8a <_svfiprintf_r+0x152>
 8008e78:	2340      	movs	r3, #64	; 0x40
 8008e7a:	eba0 000a 	sub.w	r0, r0, sl
 8008e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e82:	9b04      	ldr	r3, [sp, #16]
 8008e84:	3401      	adds	r4, #1
 8008e86:	4303      	orrs	r3, r0
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8e:	2206      	movs	r2, #6
 8008e90:	4825      	ldr	r0, [pc, #148]	; (8008f28 <_svfiprintf_r+0x1f0>)
 8008e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e96:	f7ff faa1 	bl	80083dc <memchr>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d038      	beq.n	8008f10 <_svfiprintf_r+0x1d8>
 8008e9e:	4b23      	ldr	r3, [pc, #140]	; (8008f2c <_svfiprintf_r+0x1f4>)
 8008ea0:	bb1b      	cbnz	r3, 8008eea <_svfiprintf_r+0x1b2>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	3307      	adds	r3, #7
 8008ea6:	f023 0307 	bic.w	r3, r3, #7
 8008eaa:	3308      	adds	r3, #8
 8008eac:	9303      	str	r3, [sp, #12]
 8008eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb0:	4433      	add	r3, r6
 8008eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb4:	e767      	b.n	8008d86 <_svfiprintf_r+0x4e>
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	2001      	movs	r0, #1
 8008eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ebe:	e7a5      	b.n	8008e0c <_svfiprintf_r+0xd4>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f04f 0c0a 	mov.w	ip, #10
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	3401      	adds	r4, #1
 8008eca:	9305      	str	r3, [sp, #20]
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed2:	3a30      	subs	r2, #48	; 0x30
 8008ed4:	2a09      	cmp	r2, #9
 8008ed6:	d903      	bls.n	8008ee0 <_svfiprintf_r+0x1a8>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0c5      	beq.n	8008e68 <_svfiprintf_r+0x130>
 8008edc:	9105      	str	r1, [sp, #20]
 8008ede:	e7c3      	b.n	8008e68 <_svfiprintf_r+0x130>
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee8:	e7f0      	b.n	8008ecc <_svfiprintf_r+0x194>
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <_svfiprintf_r+0x1f8>)
 8008ef4:	a904      	add	r1, sp, #16
 8008ef6:	f7fe f805 	bl	8006f04 <_printf_float>
 8008efa:	1c42      	adds	r2, r0, #1
 8008efc:	4606      	mov	r6, r0
 8008efe:	d1d6      	bne.n	8008eae <_svfiprintf_r+0x176>
 8008f00:	89ab      	ldrh	r3, [r5, #12]
 8008f02:	065b      	lsls	r3, r3, #25
 8008f04:	f53f af2c 	bmi.w	8008d60 <_svfiprintf_r+0x28>
 8008f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f0a:	b01d      	add	sp, #116	; 0x74
 8008f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f10:	ab03      	add	r3, sp, #12
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	462a      	mov	r2, r5
 8008f16:	4638      	mov	r0, r7
 8008f18:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <_svfiprintf_r+0x1f8>)
 8008f1a:	a904      	add	r1, sp, #16
 8008f1c:	f7fe fa8e 	bl	800743c <_printf_i>
 8008f20:	e7eb      	b.n	8008efa <_svfiprintf_r+0x1c2>
 8008f22:	bf00      	nop
 8008f24:	0800b454 	.word	0x0800b454
 8008f28:	0800b45e 	.word	0x0800b45e
 8008f2c:	08006f05 	.word	0x08006f05
 8008f30:	08008c81 	.word	0x08008c81
 8008f34:	0800b45a 	.word	0x0800b45a

08008f38 <_sbrk_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4d05      	ldr	r5, [pc, #20]	; (8008f54 <_sbrk_r+0x1c>)
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	f7fa fc08 	bl	8003758 <_sbrk>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_sbrk_r+0x1a>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_sbrk_r+0x1a>
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20000d90 	.word	0x20000d90

08008f58 <__assert_func>:
 8008f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f5a:	4614      	mov	r4, r2
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <__assert_func+0x2c>)
 8008f60:	4605      	mov	r5, r0
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68d8      	ldr	r0, [r3, #12]
 8008f66:	b14c      	cbz	r4, 8008f7c <__assert_func+0x24>
 8008f68:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <__assert_func+0x30>)
 8008f6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f6e:	9100      	str	r1, [sp, #0]
 8008f70:	462b      	mov	r3, r5
 8008f72:	4906      	ldr	r1, [pc, #24]	; (8008f8c <__assert_func+0x34>)
 8008f74:	f000 f80e 	bl	8008f94 <fiprintf>
 8008f78:	f000 faa2 	bl	80094c0 <abort>
 8008f7c:	4b04      	ldr	r3, [pc, #16]	; (8008f90 <__assert_func+0x38>)
 8008f7e:	461c      	mov	r4, r3
 8008f80:	e7f3      	b.n	8008f6a <__assert_func+0x12>
 8008f82:	bf00      	nop
 8008f84:	2000000c 	.word	0x2000000c
 8008f88:	0800b465 	.word	0x0800b465
 8008f8c:	0800b472 	.word	0x0800b472
 8008f90:	0800b4a0 	.word	0x0800b4a0

08008f94 <fiprintf>:
 8008f94:	b40e      	push	{r1, r2, r3}
 8008f96:	b503      	push	{r0, r1, lr}
 8008f98:	4601      	mov	r1, r0
 8008f9a:	ab03      	add	r3, sp, #12
 8008f9c:	4805      	ldr	r0, [pc, #20]	; (8008fb4 <fiprintf+0x20>)
 8008f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa2:	6800      	ldr	r0, [r0, #0]
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	f000 f88d 	bl	80090c4 <_vfiprintf_r>
 8008faa:	b002      	add	sp, #8
 8008fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fb0:	b003      	add	sp, #12
 8008fb2:	4770      	bx	lr
 8008fb4:	2000000c 	.word	0x2000000c

08008fb8 <__ascii_mbtowc>:
 8008fb8:	b082      	sub	sp, #8
 8008fba:	b901      	cbnz	r1, 8008fbe <__ascii_mbtowc+0x6>
 8008fbc:	a901      	add	r1, sp, #4
 8008fbe:	b142      	cbz	r2, 8008fd2 <__ascii_mbtowc+0x1a>
 8008fc0:	b14b      	cbz	r3, 8008fd6 <__ascii_mbtowc+0x1e>
 8008fc2:	7813      	ldrb	r3, [r2, #0]
 8008fc4:	600b      	str	r3, [r1, #0]
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	1e10      	subs	r0, r2, #0
 8008fca:	bf18      	it	ne
 8008fcc:	2001      	movne	r0, #1
 8008fce:	b002      	add	sp, #8
 8008fd0:	4770      	bx	lr
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	e7fb      	b.n	8008fce <__ascii_mbtowc+0x16>
 8008fd6:	f06f 0001 	mvn.w	r0, #1
 8008fda:	e7f8      	b.n	8008fce <__ascii_mbtowc+0x16>

08008fdc <memmove>:
 8008fdc:	4288      	cmp	r0, r1
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	eb01 0402 	add.w	r4, r1, r2
 8008fe4:	d902      	bls.n	8008fec <memmove+0x10>
 8008fe6:	4284      	cmp	r4, r0
 8008fe8:	4623      	mov	r3, r4
 8008fea:	d807      	bhi.n	8008ffc <memmove+0x20>
 8008fec:	1e43      	subs	r3, r0, #1
 8008fee:	42a1      	cmp	r1, r4
 8008ff0:	d008      	beq.n	8009004 <memmove+0x28>
 8008ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ffa:	e7f8      	b.n	8008fee <memmove+0x12>
 8008ffc:	4601      	mov	r1, r0
 8008ffe:	4402      	add	r2, r0
 8009000:	428a      	cmp	r2, r1
 8009002:	d100      	bne.n	8009006 <memmove+0x2a>
 8009004:	bd10      	pop	{r4, pc}
 8009006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800900a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800900e:	e7f7      	b.n	8009000 <memmove+0x24>

08009010 <__malloc_lock>:
 8009010:	4801      	ldr	r0, [pc, #4]	; (8009018 <__malloc_lock+0x8>)
 8009012:	f000 bc15 	b.w	8009840 <__retarget_lock_acquire_recursive>
 8009016:	bf00      	nop
 8009018:	20000d98 	.word	0x20000d98

0800901c <__malloc_unlock>:
 800901c:	4801      	ldr	r0, [pc, #4]	; (8009024 <__malloc_unlock+0x8>)
 800901e:	f000 bc10 	b.w	8009842 <__retarget_lock_release_recursive>
 8009022:	bf00      	nop
 8009024:	20000d98 	.word	0x20000d98

08009028 <_realloc_r>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	4607      	mov	r7, r0
 800902c:	4614      	mov	r4, r2
 800902e:	460e      	mov	r6, r1
 8009030:	b921      	cbnz	r1, 800903c <_realloc_r+0x14>
 8009032:	4611      	mov	r1, r2
 8009034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009038:	f7ff bdc8 	b.w	8008bcc <_malloc_r>
 800903c:	b922      	cbnz	r2, 8009048 <_realloc_r+0x20>
 800903e:	f7ff fd79 	bl	8008b34 <_free_r>
 8009042:	4625      	mov	r5, r4
 8009044:	4628      	mov	r0, r5
 8009046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009048:	f000 fc60 	bl	800990c <_malloc_usable_size_r>
 800904c:	42a0      	cmp	r0, r4
 800904e:	d20f      	bcs.n	8009070 <_realloc_r+0x48>
 8009050:	4621      	mov	r1, r4
 8009052:	4638      	mov	r0, r7
 8009054:	f7ff fdba 	bl	8008bcc <_malloc_r>
 8009058:	4605      	mov	r5, r0
 800905a:	2800      	cmp	r0, #0
 800905c:	d0f2      	beq.n	8009044 <_realloc_r+0x1c>
 800905e:	4631      	mov	r1, r6
 8009060:	4622      	mov	r2, r4
 8009062:	f7ff f9c9 	bl	80083f8 <memcpy>
 8009066:	4631      	mov	r1, r6
 8009068:	4638      	mov	r0, r7
 800906a:	f7ff fd63 	bl	8008b34 <_free_r>
 800906e:	e7e9      	b.n	8009044 <_realloc_r+0x1c>
 8009070:	4635      	mov	r5, r6
 8009072:	e7e7      	b.n	8009044 <_realloc_r+0x1c>

08009074 <__sfputc_r>:
 8009074:	6893      	ldr	r3, [r2, #8]
 8009076:	b410      	push	{r4}
 8009078:	3b01      	subs	r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	6093      	str	r3, [r2, #8]
 800907e:	da07      	bge.n	8009090 <__sfputc_r+0x1c>
 8009080:	6994      	ldr	r4, [r2, #24]
 8009082:	42a3      	cmp	r3, r4
 8009084:	db01      	blt.n	800908a <__sfputc_r+0x16>
 8009086:	290a      	cmp	r1, #10
 8009088:	d102      	bne.n	8009090 <__sfputc_r+0x1c>
 800908a:	bc10      	pop	{r4}
 800908c:	f000 b94a 	b.w	8009324 <__swbuf_r>
 8009090:	6813      	ldr	r3, [r2, #0]
 8009092:	1c58      	adds	r0, r3, #1
 8009094:	6010      	str	r0, [r2, #0]
 8009096:	7019      	strb	r1, [r3, #0]
 8009098:	4608      	mov	r0, r1
 800909a:	bc10      	pop	{r4}
 800909c:	4770      	bx	lr

0800909e <__sfputs_r>:
 800909e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a0:	4606      	mov	r6, r0
 80090a2:	460f      	mov	r7, r1
 80090a4:	4614      	mov	r4, r2
 80090a6:	18d5      	adds	r5, r2, r3
 80090a8:	42ac      	cmp	r4, r5
 80090aa:	d101      	bne.n	80090b0 <__sfputs_r+0x12>
 80090ac:	2000      	movs	r0, #0
 80090ae:	e007      	b.n	80090c0 <__sfputs_r+0x22>
 80090b0:	463a      	mov	r2, r7
 80090b2:	4630      	mov	r0, r6
 80090b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b8:	f7ff ffdc 	bl	8009074 <__sfputc_r>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d1f3      	bne.n	80090a8 <__sfputs_r+0xa>
 80090c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090c4 <_vfiprintf_r>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	460d      	mov	r5, r1
 80090ca:	4614      	mov	r4, r2
 80090cc:	4698      	mov	r8, r3
 80090ce:	4606      	mov	r6, r0
 80090d0:	b09d      	sub	sp, #116	; 0x74
 80090d2:	b118      	cbz	r0, 80090dc <_vfiprintf_r+0x18>
 80090d4:	6983      	ldr	r3, [r0, #24]
 80090d6:	b90b      	cbnz	r3, 80090dc <_vfiprintf_r+0x18>
 80090d8:	f000 fb14 	bl	8009704 <__sinit>
 80090dc:	4b89      	ldr	r3, [pc, #548]	; (8009304 <_vfiprintf_r+0x240>)
 80090de:	429d      	cmp	r5, r3
 80090e0:	d11b      	bne.n	800911a <_vfiprintf_r+0x56>
 80090e2:	6875      	ldr	r5, [r6, #4]
 80090e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090e6:	07d9      	lsls	r1, r3, #31
 80090e8:	d405      	bmi.n	80090f6 <_vfiprintf_r+0x32>
 80090ea:	89ab      	ldrh	r3, [r5, #12]
 80090ec:	059a      	lsls	r2, r3, #22
 80090ee:	d402      	bmi.n	80090f6 <_vfiprintf_r+0x32>
 80090f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090f2:	f000 fba5 	bl	8009840 <__retarget_lock_acquire_recursive>
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	071b      	lsls	r3, r3, #28
 80090fa:	d501      	bpl.n	8009100 <_vfiprintf_r+0x3c>
 80090fc:	692b      	ldr	r3, [r5, #16]
 80090fe:	b9eb      	cbnz	r3, 800913c <_vfiprintf_r+0x78>
 8009100:	4629      	mov	r1, r5
 8009102:	4630      	mov	r0, r6
 8009104:	f000 f96e 	bl	80093e4 <__swsetup_r>
 8009108:	b1c0      	cbz	r0, 800913c <_vfiprintf_r+0x78>
 800910a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800910c:	07dc      	lsls	r4, r3, #31
 800910e:	d50e      	bpl.n	800912e <_vfiprintf_r+0x6a>
 8009110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009114:	b01d      	add	sp, #116	; 0x74
 8009116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911a:	4b7b      	ldr	r3, [pc, #492]	; (8009308 <_vfiprintf_r+0x244>)
 800911c:	429d      	cmp	r5, r3
 800911e:	d101      	bne.n	8009124 <_vfiprintf_r+0x60>
 8009120:	68b5      	ldr	r5, [r6, #8]
 8009122:	e7df      	b.n	80090e4 <_vfiprintf_r+0x20>
 8009124:	4b79      	ldr	r3, [pc, #484]	; (800930c <_vfiprintf_r+0x248>)
 8009126:	429d      	cmp	r5, r3
 8009128:	bf08      	it	eq
 800912a:	68f5      	ldreq	r5, [r6, #12]
 800912c:	e7da      	b.n	80090e4 <_vfiprintf_r+0x20>
 800912e:	89ab      	ldrh	r3, [r5, #12]
 8009130:	0598      	lsls	r0, r3, #22
 8009132:	d4ed      	bmi.n	8009110 <_vfiprintf_r+0x4c>
 8009134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009136:	f000 fb84 	bl	8009842 <__retarget_lock_release_recursive>
 800913a:	e7e9      	b.n	8009110 <_vfiprintf_r+0x4c>
 800913c:	2300      	movs	r3, #0
 800913e:	9309      	str	r3, [sp, #36]	; 0x24
 8009140:	2320      	movs	r3, #32
 8009142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009146:	2330      	movs	r3, #48	; 0x30
 8009148:	f04f 0901 	mov.w	r9, #1
 800914c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009150:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009310 <_vfiprintf_r+0x24c>
 8009154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009158:	4623      	mov	r3, r4
 800915a:	469a      	mov	sl, r3
 800915c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009160:	b10a      	cbz	r2, 8009166 <_vfiprintf_r+0xa2>
 8009162:	2a25      	cmp	r2, #37	; 0x25
 8009164:	d1f9      	bne.n	800915a <_vfiprintf_r+0x96>
 8009166:	ebba 0b04 	subs.w	fp, sl, r4
 800916a:	d00b      	beq.n	8009184 <_vfiprintf_r+0xc0>
 800916c:	465b      	mov	r3, fp
 800916e:	4622      	mov	r2, r4
 8009170:	4629      	mov	r1, r5
 8009172:	4630      	mov	r0, r6
 8009174:	f7ff ff93 	bl	800909e <__sfputs_r>
 8009178:	3001      	adds	r0, #1
 800917a:	f000 80aa 	beq.w	80092d2 <_vfiprintf_r+0x20e>
 800917e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009180:	445a      	add	r2, fp
 8009182:	9209      	str	r2, [sp, #36]	; 0x24
 8009184:	f89a 3000 	ldrb.w	r3, [sl]
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 80a2 	beq.w	80092d2 <_vfiprintf_r+0x20e>
 800918e:	2300      	movs	r3, #0
 8009190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009198:	f10a 0a01 	add.w	sl, sl, #1
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	9307      	str	r3, [sp, #28]
 80091a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091a4:	931a      	str	r3, [sp, #104]	; 0x68
 80091a6:	4654      	mov	r4, sl
 80091a8:	2205      	movs	r2, #5
 80091aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ae:	4858      	ldr	r0, [pc, #352]	; (8009310 <_vfiprintf_r+0x24c>)
 80091b0:	f7ff f914 	bl	80083dc <memchr>
 80091b4:	9a04      	ldr	r2, [sp, #16]
 80091b6:	b9d8      	cbnz	r0, 80091f0 <_vfiprintf_r+0x12c>
 80091b8:	06d1      	lsls	r1, r2, #27
 80091ba:	bf44      	itt	mi
 80091bc:	2320      	movmi	r3, #32
 80091be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091c2:	0713      	lsls	r3, r2, #28
 80091c4:	bf44      	itt	mi
 80091c6:	232b      	movmi	r3, #43	; 0x2b
 80091c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091cc:	f89a 3000 	ldrb.w	r3, [sl]
 80091d0:	2b2a      	cmp	r3, #42	; 0x2a
 80091d2:	d015      	beq.n	8009200 <_vfiprintf_r+0x13c>
 80091d4:	4654      	mov	r4, sl
 80091d6:	2000      	movs	r0, #0
 80091d8:	f04f 0c0a 	mov.w	ip, #10
 80091dc:	9a07      	ldr	r2, [sp, #28]
 80091de:	4621      	mov	r1, r4
 80091e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091e4:	3b30      	subs	r3, #48	; 0x30
 80091e6:	2b09      	cmp	r3, #9
 80091e8:	d94e      	bls.n	8009288 <_vfiprintf_r+0x1c4>
 80091ea:	b1b0      	cbz	r0, 800921a <_vfiprintf_r+0x156>
 80091ec:	9207      	str	r2, [sp, #28]
 80091ee:	e014      	b.n	800921a <_vfiprintf_r+0x156>
 80091f0:	eba0 0308 	sub.w	r3, r0, r8
 80091f4:	fa09 f303 	lsl.w	r3, r9, r3
 80091f8:	4313      	orrs	r3, r2
 80091fa:	46a2      	mov	sl, r4
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	e7d2      	b.n	80091a6 <_vfiprintf_r+0xe2>
 8009200:	9b03      	ldr	r3, [sp, #12]
 8009202:	1d19      	adds	r1, r3, #4
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	9103      	str	r1, [sp, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	bfbb      	ittet	lt
 800920c:	425b      	neglt	r3, r3
 800920e:	f042 0202 	orrlt.w	r2, r2, #2
 8009212:	9307      	strge	r3, [sp, #28]
 8009214:	9307      	strlt	r3, [sp, #28]
 8009216:	bfb8      	it	lt
 8009218:	9204      	strlt	r2, [sp, #16]
 800921a:	7823      	ldrb	r3, [r4, #0]
 800921c:	2b2e      	cmp	r3, #46	; 0x2e
 800921e:	d10c      	bne.n	800923a <_vfiprintf_r+0x176>
 8009220:	7863      	ldrb	r3, [r4, #1]
 8009222:	2b2a      	cmp	r3, #42	; 0x2a
 8009224:	d135      	bne.n	8009292 <_vfiprintf_r+0x1ce>
 8009226:	9b03      	ldr	r3, [sp, #12]
 8009228:	3402      	adds	r4, #2
 800922a:	1d1a      	adds	r2, r3, #4
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	9203      	str	r2, [sp, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	bfb8      	it	lt
 8009234:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009238:	9305      	str	r3, [sp, #20]
 800923a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009320 <_vfiprintf_r+0x25c>
 800923e:	2203      	movs	r2, #3
 8009240:	4650      	mov	r0, sl
 8009242:	7821      	ldrb	r1, [r4, #0]
 8009244:	f7ff f8ca 	bl	80083dc <memchr>
 8009248:	b140      	cbz	r0, 800925c <_vfiprintf_r+0x198>
 800924a:	2340      	movs	r3, #64	; 0x40
 800924c:	eba0 000a 	sub.w	r0, r0, sl
 8009250:	fa03 f000 	lsl.w	r0, r3, r0
 8009254:	9b04      	ldr	r3, [sp, #16]
 8009256:	3401      	adds	r4, #1
 8009258:	4303      	orrs	r3, r0
 800925a:	9304      	str	r3, [sp, #16]
 800925c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009260:	2206      	movs	r2, #6
 8009262:	482c      	ldr	r0, [pc, #176]	; (8009314 <_vfiprintf_r+0x250>)
 8009264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009268:	f7ff f8b8 	bl	80083dc <memchr>
 800926c:	2800      	cmp	r0, #0
 800926e:	d03f      	beq.n	80092f0 <_vfiprintf_r+0x22c>
 8009270:	4b29      	ldr	r3, [pc, #164]	; (8009318 <_vfiprintf_r+0x254>)
 8009272:	bb1b      	cbnz	r3, 80092bc <_vfiprintf_r+0x1f8>
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	3307      	adds	r3, #7
 8009278:	f023 0307 	bic.w	r3, r3, #7
 800927c:	3308      	adds	r3, #8
 800927e:	9303      	str	r3, [sp, #12]
 8009280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009282:	443b      	add	r3, r7
 8009284:	9309      	str	r3, [sp, #36]	; 0x24
 8009286:	e767      	b.n	8009158 <_vfiprintf_r+0x94>
 8009288:	460c      	mov	r4, r1
 800928a:	2001      	movs	r0, #1
 800928c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009290:	e7a5      	b.n	80091de <_vfiprintf_r+0x11a>
 8009292:	2300      	movs	r3, #0
 8009294:	f04f 0c0a 	mov.w	ip, #10
 8009298:	4619      	mov	r1, r3
 800929a:	3401      	adds	r4, #1
 800929c:	9305      	str	r3, [sp, #20]
 800929e:	4620      	mov	r0, r4
 80092a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092a4:	3a30      	subs	r2, #48	; 0x30
 80092a6:	2a09      	cmp	r2, #9
 80092a8:	d903      	bls.n	80092b2 <_vfiprintf_r+0x1ee>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0c5      	beq.n	800923a <_vfiprintf_r+0x176>
 80092ae:	9105      	str	r1, [sp, #20]
 80092b0:	e7c3      	b.n	800923a <_vfiprintf_r+0x176>
 80092b2:	4604      	mov	r4, r0
 80092b4:	2301      	movs	r3, #1
 80092b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ba:	e7f0      	b.n	800929e <_vfiprintf_r+0x1da>
 80092bc:	ab03      	add	r3, sp, #12
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	462a      	mov	r2, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	4b15      	ldr	r3, [pc, #84]	; (800931c <_vfiprintf_r+0x258>)
 80092c6:	a904      	add	r1, sp, #16
 80092c8:	f7fd fe1c 	bl	8006f04 <_printf_float>
 80092cc:	4607      	mov	r7, r0
 80092ce:	1c78      	adds	r0, r7, #1
 80092d0:	d1d6      	bne.n	8009280 <_vfiprintf_r+0x1bc>
 80092d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d4:	07d9      	lsls	r1, r3, #31
 80092d6:	d405      	bmi.n	80092e4 <_vfiprintf_r+0x220>
 80092d8:	89ab      	ldrh	r3, [r5, #12]
 80092da:	059a      	lsls	r2, r3, #22
 80092dc:	d402      	bmi.n	80092e4 <_vfiprintf_r+0x220>
 80092de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092e0:	f000 faaf 	bl	8009842 <__retarget_lock_release_recursive>
 80092e4:	89ab      	ldrh	r3, [r5, #12]
 80092e6:	065b      	lsls	r3, r3, #25
 80092e8:	f53f af12 	bmi.w	8009110 <_vfiprintf_r+0x4c>
 80092ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ee:	e711      	b.n	8009114 <_vfiprintf_r+0x50>
 80092f0:	ab03      	add	r3, sp, #12
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	462a      	mov	r2, r5
 80092f6:	4630      	mov	r0, r6
 80092f8:	4b08      	ldr	r3, [pc, #32]	; (800931c <_vfiprintf_r+0x258>)
 80092fa:	a904      	add	r1, sp, #16
 80092fc:	f7fe f89e 	bl	800743c <_printf_i>
 8009300:	e7e4      	b.n	80092cc <_vfiprintf_r+0x208>
 8009302:	bf00      	nop
 8009304:	0800b5cc 	.word	0x0800b5cc
 8009308:	0800b5ec 	.word	0x0800b5ec
 800930c:	0800b5ac 	.word	0x0800b5ac
 8009310:	0800b454 	.word	0x0800b454
 8009314:	0800b45e 	.word	0x0800b45e
 8009318:	08006f05 	.word	0x08006f05
 800931c:	0800909f 	.word	0x0800909f
 8009320:	0800b45a 	.word	0x0800b45a

08009324 <__swbuf_r>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	460e      	mov	r6, r1
 8009328:	4614      	mov	r4, r2
 800932a:	4605      	mov	r5, r0
 800932c:	b118      	cbz	r0, 8009336 <__swbuf_r+0x12>
 800932e:	6983      	ldr	r3, [r0, #24]
 8009330:	b90b      	cbnz	r3, 8009336 <__swbuf_r+0x12>
 8009332:	f000 f9e7 	bl	8009704 <__sinit>
 8009336:	4b21      	ldr	r3, [pc, #132]	; (80093bc <__swbuf_r+0x98>)
 8009338:	429c      	cmp	r4, r3
 800933a:	d12b      	bne.n	8009394 <__swbuf_r+0x70>
 800933c:	686c      	ldr	r4, [r5, #4]
 800933e:	69a3      	ldr	r3, [r4, #24]
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	071a      	lsls	r2, r3, #28
 8009346:	d52f      	bpl.n	80093a8 <__swbuf_r+0x84>
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	b36b      	cbz	r3, 80093a8 <__swbuf_r+0x84>
 800934c:	6923      	ldr	r3, [r4, #16]
 800934e:	6820      	ldr	r0, [r4, #0]
 8009350:	b2f6      	uxtb	r6, r6
 8009352:	1ac0      	subs	r0, r0, r3
 8009354:	6963      	ldr	r3, [r4, #20]
 8009356:	4637      	mov	r7, r6
 8009358:	4283      	cmp	r3, r0
 800935a:	dc04      	bgt.n	8009366 <__swbuf_r+0x42>
 800935c:	4621      	mov	r1, r4
 800935e:	4628      	mov	r0, r5
 8009360:	f000 f93c 	bl	80095dc <_fflush_r>
 8009364:	bb30      	cbnz	r0, 80093b4 <__swbuf_r+0x90>
 8009366:	68a3      	ldr	r3, [r4, #8]
 8009368:	3001      	adds	r0, #1
 800936a:	3b01      	subs	r3, #1
 800936c:	60a3      	str	r3, [r4, #8]
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	6022      	str	r2, [r4, #0]
 8009374:	701e      	strb	r6, [r3, #0]
 8009376:	6963      	ldr	r3, [r4, #20]
 8009378:	4283      	cmp	r3, r0
 800937a:	d004      	beq.n	8009386 <__swbuf_r+0x62>
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	07db      	lsls	r3, r3, #31
 8009380:	d506      	bpl.n	8009390 <__swbuf_r+0x6c>
 8009382:	2e0a      	cmp	r6, #10
 8009384:	d104      	bne.n	8009390 <__swbuf_r+0x6c>
 8009386:	4621      	mov	r1, r4
 8009388:	4628      	mov	r0, r5
 800938a:	f000 f927 	bl	80095dc <_fflush_r>
 800938e:	b988      	cbnz	r0, 80093b4 <__swbuf_r+0x90>
 8009390:	4638      	mov	r0, r7
 8009392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009394:	4b0a      	ldr	r3, [pc, #40]	; (80093c0 <__swbuf_r+0x9c>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d101      	bne.n	800939e <__swbuf_r+0x7a>
 800939a:	68ac      	ldr	r4, [r5, #8]
 800939c:	e7cf      	b.n	800933e <__swbuf_r+0x1a>
 800939e:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <__swbuf_r+0xa0>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	bf08      	it	eq
 80093a4:	68ec      	ldreq	r4, [r5, #12]
 80093a6:	e7ca      	b.n	800933e <__swbuf_r+0x1a>
 80093a8:	4621      	mov	r1, r4
 80093aa:	4628      	mov	r0, r5
 80093ac:	f000 f81a 	bl	80093e4 <__swsetup_r>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d0cb      	beq.n	800934c <__swbuf_r+0x28>
 80093b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80093b8:	e7ea      	b.n	8009390 <__swbuf_r+0x6c>
 80093ba:	bf00      	nop
 80093bc:	0800b5cc 	.word	0x0800b5cc
 80093c0:	0800b5ec 	.word	0x0800b5ec
 80093c4:	0800b5ac 	.word	0x0800b5ac

080093c8 <__ascii_wctomb>:
 80093c8:	4603      	mov	r3, r0
 80093ca:	4608      	mov	r0, r1
 80093cc:	b141      	cbz	r1, 80093e0 <__ascii_wctomb+0x18>
 80093ce:	2aff      	cmp	r2, #255	; 0xff
 80093d0:	d904      	bls.n	80093dc <__ascii_wctomb+0x14>
 80093d2:	228a      	movs	r2, #138	; 0x8a
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	4770      	bx	lr
 80093dc:	2001      	movs	r0, #1
 80093de:	700a      	strb	r2, [r1, #0]
 80093e0:	4770      	bx	lr
	...

080093e4 <__swsetup_r>:
 80093e4:	4b32      	ldr	r3, [pc, #200]	; (80094b0 <__swsetup_r+0xcc>)
 80093e6:	b570      	push	{r4, r5, r6, lr}
 80093e8:	681d      	ldr	r5, [r3, #0]
 80093ea:	4606      	mov	r6, r0
 80093ec:	460c      	mov	r4, r1
 80093ee:	b125      	cbz	r5, 80093fa <__swsetup_r+0x16>
 80093f0:	69ab      	ldr	r3, [r5, #24]
 80093f2:	b913      	cbnz	r3, 80093fa <__swsetup_r+0x16>
 80093f4:	4628      	mov	r0, r5
 80093f6:	f000 f985 	bl	8009704 <__sinit>
 80093fa:	4b2e      	ldr	r3, [pc, #184]	; (80094b4 <__swsetup_r+0xd0>)
 80093fc:	429c      	cmp	r4, r3
 80093fe:	d10f      	bne.n	8009420 <__swsetup_r+0x3c>
 8009400:	686c      	ldr	r4, [r5, #4]
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009408:	0719      	lsls	r1, r3, #28
 800940a:	d42c      	bmi.n	8009466 <__swsetup_r+0x82>
 800940c:	06dd      	lsls	r5, r3, #27
 800940e:	d411      	bmi.n	8009434 <__swsetup_r+0x50>
 8009410:	2309      	movs	r3, #9
 8009412:	6033      	str	r3, [r6, #0]
 8009414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	e03e      	b.n	800949e <__swsetup_r+0xba>
 8009420:	4b25      	ldr	r3, [pc, #148]	; (80094b8 <__swsetup_r+0xd4>)
 8009422:	429c      	cmp	r4, r3
 8009424:	d101      	bne.n	800942a <__swsetup_r+0x46>
 8009426:	68ac      	ldr	r4, [r5, #8]
 8009428:	e7eb      	b.n	8009402 <__swsetup_r+0x1e>
 800942a:	4b24      	ldr	r3, [pc, #144]	; (80094bc <__swsetup_r+0xd8>)
 800942c:	429c      	cmp	r4, r3
 800942e:	bf08      	it	eq
 8009430:	68ec      	ldreq	r4, [r5, #12]
 8009432:	e7e6      	b.n	8009402 <__swsetup_r+0x1e>
 8009434:	0758      	lsls	r0, r3, #29
 8009436:	d512      	bpl.n	800945e <__swsetup_r+0x7a>
 8009438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800943a:	b141      	cbz	r1, 800944e <__swsetup_r+0x6a>
 800943c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009440:	4299      	cmp	r1, r3
 8009442:	d002      	beq.n	800944a <__swsetup_r+0x66>
 8009444:	4630      	mov	r0, r6
 8009446:	f7ff fb75 	bl	8008b34 <_free_r>
 800944a:	2300      	movs	r3, #0
 800944c:	6363      	str	r3, [r4, #52]	; 0x34
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009454:	81a3      	strh	r3, [r4, #12]
 8009456:	2300      	movs	r3, #0
 8009458:	6063      	str	r3, [r4, #4]
 800945a:	6923      	ldr	r3, [r4, #16]
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	f043 0308 	orr.w	r3, r3, #8
 8009464:	81a3      	strh	r3, [r4, #12]
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	b94b      	cbnz	r3, 800947e <__swsetup_r+0x9a>
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009474:	d003      	beq.n	800947e <__swsetup_r+0x9a>
 8009476:	4621      	mov	r1, r4
 8009478:	4630      	mov	r0, r6
 800947a:	f000 fa07 	bl	800988c <__smakebuf_r>
 800947e:	89a0      	ldrh	r0, [r4, #12]
 8009480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009484:	f010 0301 	ands.w	r3, r0, #1
 8009488:	d00a      	beq.n	80094a0 <__swsetup_r+0xbc>
 800948a:	2300      	movs	r3, #0
 800948c:	60a3      	str	r3, [r4, #8]
 800948e:	6963      	ldr	r3, [r4, #20]
 8009490:	425b      	negs	r3, r3
 8009492:	61a3      	str	r3, [r4, #24]
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	b943      	cbnz	r3, 80094aa <__swsetup_r+0xc6>
 8009498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800949c:	d1ba      	bne.n	8009414 <__swsetup_r+0x30>
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	0781      	lsls	r1, r0, #30
 80094a2:	bf58      	it	pl
 80094a4:	6963      	ldrpl	r3, [r4, #20]
 80094a6:	60a3      	str	r3, [r4, #8]
 80094a8:	e7f4      	b.n	8009494 <__swsetup_r+0xb0>
 80094aa:	2000      	movs	r0, #0
 80094ac:	e7f7      	b.n	800949e <__swsetup_r+0xba>
 80094ae:	bf00      	nop
 80094b0:	2000000c 	.word	0x2000000c
 80094b4:	0800b5cc 	.word	0x0800b5cc
 80094b8:	0800b5ec 	.word	0x0800b5ec
 80094bc:	0800b5ac 	.word	0x0800b5ac

080094c0 <abort>:
 80094c0:	2006      	movs	r0, #6
 80094c2:	b508      	push	{r3, lr}
 80094c4:	f000 fa52 	bl	800996c <raise>
 80094c8:	2001      	movs	r0, #1
 80094ca:	f7fa f8d2 	bl	8003672 <_exit>
	...

080094d0 <__sflush_r>:
 80094d0:	898a      	ldrh	r2, [r1, #12]
 80094d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d6:	4605      	mov	r5, r0
 80094d8:	0710      	lsls	r0, r2, #28
 80094da:	460c      	mov	r4, r1
 80094dc:	d458      	bmi.n	8009590 <__sflush_r+0xc0>
 80094de:	684b      	ldr	r3, [r1, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	dc05      	bgt.n	80094f0 <__sflush_r+0x20>
 80094e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	dc02      	bgt.n	80094f0 <__sflush_r+0x20>
 80094ea:	2000      	movs	r0, #0
 80094ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094f2:	2e00      	cmp	r6, #0
 80094f4:	d0f9      	beq.n	80094ea <__sflush_r+0x1a>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094fc:	682f      	ldr	r7, [r5, #0]
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	d032      	beq.n	8009568 <__sflush_r+0x98>
 8009502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	075a      	lsls	r2, r3, #29
 8009508:	d505      	bpl.n	8009516 <__sflush_r+0x46>
 800950a:	6863      	ldr	r3, [r4, #4]
 800950c:	1ac0      	subs	r0, r0, r3
 800950e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009510:	b10b      	cbz	r3, 8009516 <__sflush_r+0x46>
 8009512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009514:	1ac0      	subs	r0, r0, r3
 8009516:	2300      	movs	r3, #0
 8009518:	4602      	mov	r2, r0
 800951a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800951c:	4628      	mov	r0, r5
 800951e:	6a21      	ldr	r1, [r4, #32]
 8009520:	47b0      	blx	r6
 8009522:	1c43      	adds	r3, r0, #1
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	d106      	bne.n	8009536 <__sflush_r+0x66>
 8009528:	6829      	ldr	r1, [r5, #0]
 800952a:	291d      	cmp	r1, #29
 800952c:	d82c      	bhi.n	8009588 <__sflush_r+0xb8>
 800952e:	4a2a      	ldr	r2, [pc, #168]	; (80095d8 <__sflush_r+0x108>)
 8009530:	40ca      	lsrs	r2, r1
 8009532:	07d6      	lsls	r6, r2, #31
 8009534:	d528      	bpl.n	8009588 <__sflush_r+0xb8>
 8009536:	2200      	movs	r2, #0
 8009538:	6062      	str	r2, [r4, #4]
 800953a:	6922      	ldr	r2, [r4, #16]
 800953c:	04d9      	lsls	r1, r3, #19
 800953e:	6022      	str	r2, [r4, #0]
 8009540:	d504      	bpl.n	800954c <__sflush_r+0x7c>
 8009542:	1c42      	adds	r2, r0, #1
 8009544:	d101      	bne.n	800954a <__sflush_r+0x7a>
 8009546:	682b      	ldr	r3, [r5, #0]
 8009548:	b903      	cbnz	r3, 800954c <__sflush_r+0x7c>
 800954a:	6560      	str	r0, [r4, #84]	; 0x54
 800954c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800954e:	602f      	str	r7, [r5, #0]
 8009550:	2900      	cmp	r1, #0
 8009552:	d0ca      	beq.n	80094ea <__sflush_r+0x1a>
 8009554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009558:	4299      	cmp	r1, r3
 800955a:	d002      	beq.n	8009562 <__sflush_r+0x92>
 800955c:	4628      	mov	r0, r5
 800955e:	f7ff fae9 	bl	8008b34 <_free_r>
 8009562:	2000      	movs	r0, #0
 8009564:	6360      	str	r0, [r4, #52]	; 0x34
 8009566:	e7c1      	b.n	80094ec <__sflush_r+0x1c>
 8009568:	6a21      	ldr	r1, [r4, #32]
 800956a:	2301      	movs	r3, #1
 800956c:	4628      	mov	r0, r5
 800956e:	47b0      	blx	r6
 8009570:	1c41      	adds	r1, r0, #1
 8009572:	d1c7      	bne.n	8009504 <__sflush_r+0x34>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d0c4      	beq.n	8009504 <__sflush_r+0x34>
 800957a:	2b1d      	cmp	r3, #29
 800957c:	d001      	beq.n	8009582 <__sflush_r+0xb2>
 800957e:	2b16      	cmp	r3, #22
 8009580:	d101      	bne.n	8009586 <__sflush_r+0xb6>
 8009582:	602f      	str	r7, [r5, #0]
 8009584:	e7b1      	b.n	80094ea <__sflush_r+0x1a>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	e7ad      	b.n	80094ec <__sflush_r+0x1c>
 8009590:	690f      	ldr	r7, [r1, #16]
 8009592:	2f00      	cmp	r7, #0
 8009594:	d0a9      	beq.n	80094ea <__sflush_r+0x1a>
 8009596:	0793      	lsls	r3, r2, #30
 8009598:	bf18      	it	ne
 800959a:	2300      	movne	r3, #0
 800959c:	680e      	ldr	r6, [r1, #0]
 800959e:	bf08      	it	eq
 80095a0:	694b      	ldreq	r3, [r1, #20]
 80095a2:	eba6 0807 	sub.w	r8, r6, r7
 80095a6:	600f      	str	r7, [r1, #0]
 80095a8:	608b      	str	r3, [r1, #8]
 80095aa:	f1b8 0f00 	cmp.w	r8, #0
 80095ae:	dd9c      	ble.n	80094ea <__sflush_r+0x1a>
 80095b0:	4643      	mov	r3, r8
 80095b2:	463a      	mov	r2, r7
 80095b4:	4628      	mov	r0, r5
 80095b6:	6a21      	ldr	r1, [r4, #32]
 80095b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095ba:	47b0      	blx	r6
 80095bc:	2800      	cmp	r0, #0
 80095be:	dc06      	bgt.n	80095ce <__sflush_r+0xfe>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ca:	81a3      	strh	r3, [r4, #12]
 80095cc:	e78e      	b.n	80094ec <__sflush_r+0x1c>
 80095ce:	4407      	add	r7, r0
 80095d0:	eba8 0800 	sub.w	r8, r8, r0
 80095d4:	e7e9      	b.n	80095aa <__sflush_r+0xda>
 80095d6:	bf00      	nop
 80095d8:	20400001 	.word	0x20400001

080095dc <_fflush_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	690b      	ldr	r3, [r1, #16]
 80095e0:	4605      	mov	r5, r0
 80095e2:	460c      	mov	r4, r1
 80095e4:	b913      	cbnz	r3, 80095ec <_fflush_r+0x10>
 80095e6:	2500      	movs	r5, #0
 80095e8:	4628      	mov	r0, r5
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	b118      	cbz	r0, 80095f6 <_fflush_r+0x1a>
 80095ee:	6983      	ldr	r3, [r0, #24]
 80095f0:	b90b      	cbnz	r3, 80095f6 <_fflush_r+0x1a>
 80095f2:	f000 f887 	bl	8009704 <__sinit>
 80095f6:	4b14      	ldr	r3, [pc, #80]	; (8009648 <_fflush_r+0x6c>)
 80095f8:	429c      	cmp	r4, r3
 80095fa:	d11b      	bne.n	8009634 <_fflush_r+0x58>
 80095fc:	686c      	ldr	r4, [r5, #4]
 80095fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0ef      	beq.n	80095e6 <_fflush_r+0xa>
 8009606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009608:	07d0      	lsls	r0, r2, #31
 800960a:	d404      	bmi.n	8009616 <_fflush_r+0x3a>
 800960c:	0599      	lsls	r1, r3, #22
 800960e:	d402      	bmi.n	8009616 <_fflush_r+0x3a>
 8009610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009612:	f000 f915 	bl	8009840 <__retarget_lock_acquire_recursive>
 8009616:	4628      	mov	r0, r5
 8009618:	4621      	mov	r1, r4
 800961a:	f7ff ff59 	bl	80094d0 <__sflush_r>
 800961e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009620:	4605      	mov	r5, r0
 8009622:	07da      	lsls	r2, r3, #31
 8009624:	d4e0      	bmi.n	80095e8 <_fflush_r+0xc>
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	059b      	lsls	r3, r3, #22
 800962a:	d4dd      	bmi.n	80095e8 <_fflush_r+0xc>
 800962c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800962e:	f000 f908 	bl	8009842 <__retarget_lock_release_recursive>
 8009632:	e7d9      	b.n	80095e8 <_fflush_r+0xc>
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <_fflush_r+0x70>)
 8009636:	429c      	cmp	r4, r3
 8009638:	d101      	bne.n	800963e <_fflush_r+0x62>
 800963a:	68ac      	ldr	r4, [r5, #8]
 800963c:	e7df      	b.n	80095fe <_fflush_r+0x22>
 800963e:	4b04      	ldr	r3, [pc, #16]	; (8009650 <_fflush_r+0x74>)
 8009640:	429c      	cmp	r4, r3
 8009642:	bf08      	it	eq
 8009644:	68ec      	ldreq	r4, [r5, #12]
 8009646:	e7da      	b.n	80095fe <_fflush_r+0x22>
 8009648:	0800b5cc 	.word	0x0800b5cc
 800964c:	0800b5ec 	.word	0x0800b5ec
 8009650:	0800b5ac 	.word	0x0800b5ac

08009654 <std>:
 8009654:	2300      	movs	r3, #0
 8009656:	b510      	push	{r4, lr}
 8009658:	4604      	mov	r4, r0
 800965a:	e9c0 3300 	strd	r3, r3, [r0]
 800965e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009662:	6083      	str	r3, [r0, #8]
 8009664:	8181      	strh	r1, [r0, #12]
 8009666:	6643      	str	r3, [r0, #100]	; 0x64
 8009668:	81c2      	strh	r2, [r0, #14]
 800966a:	6183      	str	r3, [r0, #24]
 800966c:	4619      	mov	r1, r3
 800966e:	2208      	movs	r2, #8
 8009670:	305c      	adds	r0, #92	; 0x5c
 8009672:	f7fd fba1 	bl	8006db8 <memset>
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <std+0x38>)
 8009678:	6224      	str	r4, [r4, #32]
 800967a:	6263      	str	r3, [r4, #36]	; 0x24
 800967c:	4b04      	ldr	r3, [pc, #16]	; (8009690 <std+0x3c>)
 800967e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009680:	4b04      	ldr	r3, [pc, #16]	; (8009694 <std+0x40>)
 8009682:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009684:	4b04      	ldr	r3, [pc, #16]	; (8009698 <std+0x44>)
 8009686:	6323      	str	r3, [r4, #48]	; 0x30
 8009688:	bd10      	pop	{r4, pc}
 800968a:	bf00      	nop
 800968c:	080099a5 	.word	0x080099a5
 8009690:	080099c7 	.word	0x080099c7
 8009694:	080099ff 	.word	0x080099ff
 8009698:	08009a23 	.word	0x08009a23

0800969c <_cleanup_r>:
 800969c:	4901      	ldr	r1, [pc, #4]	; (80096a4 <_cleanup_r+0x8>)
 800969e:	f000 b8af 	b.w	8009800 <_fwalk_reent>
 80096a2:	bf00      	nop
 80096a4:	080095dd 	.word	0x080095dd

080096a8 <__sfmoreglue>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	2568      	movs	r5, #104	; 0x68
 80096ac:	1e4a      	subs	r2, r1, #1
 80096ae:	4355      	muls	r5, r2
 80096b0:	460e      	mov	r6, r1
 80096b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096b6:	f7ff fa89 	bl	8008bcc <_malloc_r>
 80096ba:	4604      	mov	r4, r0
 80096bc:	b140      	cbz	r0, 80096d0 <__sfmoreglue+0x28>
 80096be:	2100      	movs	r1, #0
 80096c0:	e9c0 1600 	strd	r1, r6, [r0]
 80096c4:	300c      	adds	r0, #12
 80096c6:	60a0      	str	r0, [r4, #8]
 80096c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096cc:	f7fd fb74 	bl	8006db8 <memset>
 80096d0:	4620      	mov	r0, r4
 80096d2:	bd70      	pop	{r4, r5, r6, pc}

080096d4 <__sfp_lock_acquire>:
 80096d4:	4801      	ldr	r0, [pc, #4]	; (80096dc <__sfp_lock_acquire+0x8>)
 80096d6:	f000 b8b3 	b.w	8009840 <__retarget_lock_acquire_recursive>
 80096da:	bf00      	nop
 80096dc:	20000d9c 	.word	0x20000d9c

080096e0 <__sfp_lock_release>:
 80096e0:	4801      	ldr	r0, [pc, #4]	; (80096e8 <__sfp_lock_release+0x8>)
 80096e2:	f000 b8ae 	b.w	8009842 <__retarget_lock_release_recursive>
 80096e6:	bf00      	nop
 80096e8:	20000d9c 	.word	0x20000d9c

080096ec <__sinit_lock_acquire>:
 80096ec:	4801      	ldr	r0, [pc, #4]	; (80096f4 <__sinit_lock_acquire+0x8>)
 80096ee:	f000 b8a7 	b.w	8009840 <__retarget_lock_acquire_recursive>
 80096f2:	bf00      	nop
 80096f4:	20000d97 	.word	0x20000d97

080096f8 <__sinit_lock_release>:
 80096f8:	4801      	ldr	r0, [pc, #4]	; (8009700 <__sinit_lock_release+0x8>)
 80096fa:	f000 b8a2 	b.w	8009842 <__retarget_lock_release_recursive>
 80096fe:	bf00      	nop
 8009700:	20000d97 	.word	0x20000d97

08009704 <__sinit>:
 8009704:	b510      	push	{r4, lr}
 8009706:	4604      	mov	r4, r0
 8009708:	f7ff fff0 	bl	80096ec <__sinit_lock_acquire>
 800970c:	69a3      	ldr	r3, [r4, #24]
 800970e:	b11b      	cbz	r3, 8009718 <__sinit+0x14>
 8009710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009714:	f7ff bff0 	b.w	80096f8 <__sinit_lock_release>
 8009718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800971c:	6523      	str	r3, [r4, #80]	; 0x50
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <__sinit+0x68>)
 8009720:	4a13      	ldr	r2, [pc, #76]	; (8009770 <__sinit+0x6c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	62a2      	str	r2, [r4, #40]	; 0x28
 8009726:	42a3      	cmp	r3, r4
 8009728:	bf08      	it	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	4620      	mov	r0, r4
 800972e:	bf08      	it	eq
 8009730:	61a3      	streq	r3, [r4, #24]
 8009732:	f000 f81f 	bl	8009774 <__sfp>
 8009736:	6060      	str	r0, [r4, #4]
 8009738:	4620      	mov	r0, r4
 800973a:	f000 f81b 	bl	8009774 <__sfp>
 800973e:	60a0      	str	r0, [r4, #8]
 8009740:	4620      	mov	r0, r4
 8009742:	f000 f817 	bl	8009774 <__sfp>
 8009746:	2200      	movs	r2, #0
 8009748:	2104      	movs	r1, #4
 800974a:	60e0      	str	r0, [r4, #12]
 800974c:	6860      	ldr	r0, [r4, #4]
 800974e:	f7ff ff81 	bl	8009654 <std>
 8009752:	2201      	movs	r2, #1
 8009754:	2109      	movs	r1, #9
 8009756:	68a0      	ldr	r0, [r4, #8]
 8009758:	f7ff ff7c 	bl	8009654 <std>
 800975c:	2202      	movs	r2, #2
 800975e:	2112      	movs	r1, #18
 8009760:	68e0      	ldr	r0, [r4, #12]
 8009762:	f7ff ff77 	bl	8009654 <std>
 8009766:	2301      	movs	r3, #1
 8009768:	61a3      	str	r3, [r4, #24]
 800976a:	e7d1      	b.n	8009710 <__sinit+0xc>
 800976c:	0800b22c 	.word	0x0800b22c
 8009770:	0800969d 	.word	0x0800969d

08009774 <__sfp>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	4607      	mov	r7, r0
 8009778:	f7ff ffac 	bl	80096d4 <__sfp_lock_acquire>
 800977c:	4b1e      	ldr	r3, [pc, #120]	; (80097f8 <__sfp+0x84>)
 800977e:	681e      	ldr	r6, [r3, #0]
 8009780:	69b3      	ldr	r3, [r6, #24]
 8009782:	b913      	cbnz	r3, 800978a <__sfp+0x16>
 8009784:	4630      	mov	r0, r6
 8009786:	f7ff ffbd 	bl	8009704 <__sinit>
 800978a:	3648      	adds	r6, #72	; 0x48
 800978c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009790:	3b01      	subs	r3, #1
 8009792:	d503      	bpl.n	800979c <__sfp+0x28>
 8009794:	6833      	ldr	r3, [r6, #0]
 8009796:	b30b      	cbz	r3, 80097dc <__sfp+0x68>
 8009798:	6836      	ldr	r6, [r6, #0]
 800979a:	e7f7      	b.n	800978c <__sfp+0x18>
 800979c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097a0:	b9d5      	cbnz	r5, 80097d8 <__sfp+0x64>
 80097a2:	4b16      	ldr	r3, [pc, #88]	; (80097fc <__sfp+0x88>)
 80097a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097a8:	60e3      	str	r3, [r4, #12]
 80097aa:	6665      	str	r5, [r4, #100]	; 0x64
 80097ac:	f000 f847 	bl	800983e <__retarget_lock_init_recursive>
 80097b0:	f7ff ff96 	bl	80096e0 <__sfp_lock_release>
 80097b4:	2208      	movs	r2, #8
 80097b6:	4629      	mov	r1, r5
 80097b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80097bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80097c0:	6025      	str	r5, [r4, #0]
 80097c2:	61a5      	str	r5, [r4, #24]
 80097c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097c8:	f7fd faf6 	bl	8006db8 <memset>
 80097cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097d4:	4620      	mov	r0, r4
 80097d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d8:	3468      	adds	r4, #104	; 0x68
 80097da:	e7d9      	b.n	8009790 <__sfp+0x1c>
 80097dc:	2104      	movs	r1, #4
 80097de:	4638      	mov	r0, r7
 80097e0:	f7ff ff62 	bl	80096a8 <__sfmoreglue>
 80097e4:	4604      	mov	r4, r0
 80097e6:	6030      	str	r0, [r6, #0]
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d1d5      	bne.n	8009798 <__sfp+0x24>
 80097ec:	f7ff ff78 	bl	80096e0 <__sfp_lock_release>
 80097f0:	230c      	movs	r3, #12
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	e7ee      	b.n	80097d4 <__sfp+0x60>
 80097f6:	bf00      	nop
 80097f8:	0800b22c 	.word	0x0800b22c
 80097fc:	ffff0001 	.word	0xffff0001

08009800 <_fwalk_reent>:
 8009800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009804:	4606      	mov	r6, r0
 8009806:	4688      	mov	r8, r1
 8009808:	2700      	movs	r7, #0
 800980a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800980e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009812:	f1b9 0901 	subs.w	r9, r9, #1
 8009816:	d505      	bpl.n	8009824 <_fwalk_reent+0x24>
 8009818:	6824      	ldr	r4, [r4, #0]
 800981a:	2c00      	cmp	r4, #0
 800981c:	d1f7      	bne.n	800980e <_fwalk_reent+0xe>
 800981e:	4638      	mov	r0, r7
 8009820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009824:	89ab      	ldrh	r3, [r5, #12]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d907      	bls.n	800983a <_fwalk_reent+0x3a>
 800982a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800982e:	3301      	adds	r3, #1
 8009830:	d003      	beq.n	800983a <_fwalk_reent+0x3a>
 8009832:	4629      	mov	r1, r5
 8009834:	4630      	mov	r0, r6
 8009836:	47c0      	blx	r8
 8009838:	4307      	orrs	r7, r0
 800983a:	3568      	adds	r5, #104	; 0x68
 800983c:	e7e9      	b.n	8009812 <_fwalk_reent+0x12>

0800983e <__retarget_lock_init_recursive>:
 800983e:	4770      	bx	lr

08009840 <__retarget_lock_acquire_recursive>:
 8009840:	4770      	bx	lr

08009842 <__retarget_lock_release_recursive>:
 8009842:	4770      	bx	lr

08009844 <__swhatbuf_r>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	460e      	mov	r6, r1
 8009848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984c:	4614      	mov	r4, r2
 800984e:	2900      	cmp	r1, #0
 8009850:	461d      	mov	r5, r3
 8009852:	b096      	sub	sp, #88	; 0x58
 8009854:	da07      	bge.n	8009866 <__swhatbuf_r+0x22>
 8009856:	2300      	movs	r3, #0
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	89b3      	ldrh	r3, [r6, #12]
 800985c:	061a      	lsls	r2, r3, #24
 800985e:	d410      	bmi.n	8009882 <__swhatbuf_r+0x3e>
 8009860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009864:	e00e      	b.n	8009884 <__swhatbuf_r+0x40>
 8009866:	466a      	mov	r2, sp
 8009868:	f000 f902 	bl	8009a70 <_fstat_r>
 800986c:	2800      	cmp	r0, #0
 800986e:	dbf2      	blt.n	8009856 <__swhatbuf_r+0x12>
 8009870:	9a01      	ldr	r2, [sp, #4]
 8009872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800987a:	425a      	negs	r2, r3
 800987c:	415a      	adcs	r2, r3
 800987e:	602a      	str	r2, [r5, #0]
 8009880:	e7ee      	b.n	8009860 <__swhatbuf_r+0x1c>
 8009882:	2340      	movs	r3, #64	; 0x40
 8009884:	2000      	movs	r0, #0
 8009886:	6023      	str	r3, [r4, #0]
 8009888:	b016      	add	sp, #88	; 0x58
 800988a:	bd70      	pop	{r4, r5, r6, pc}

0800988c <__smakebuf_r>:
 800988c:	898b      	ldrh	r3, [r1, #12]
 800988e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009890:	079d      	lsls	r5, r3, #30
 8009892:	4606      	mov	r6, r0
 8009894:	460c      	mov	r4, r1
 8009896:	d507      	bpl.n	80098a8 <__smakebuf_r+0x1c>
 8009898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	6123      	str	r3, [r4, #16]
 80098a0:	2301      	movs	r3, #1
 80098a2:	6163      	str	r3, [r4, #20]
 80098a4:	b002      	add	sp, #8
 80098a6:	bd70      	pop	{r4, r5, r6, pc}
 80098a8:	466a      	mov	r2, sp
 80098aa:	ab01      	add	r3, sp, #4
 80098ac:	f7ff ffca 	bl	8009844 <__swhatbuf_r>
 80098b0:	9900      	ldr	r1, [sp, #0]
 80098b2:	4605      	mov	r5, r0
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff f989 	bl	8008bcc <_malloc_r>
 80098ba:	b948      	cbnz	r0, 80098d0 <__smakebuf_r+0x44>
 80098bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c0:	059a      	lsls	r2, r3, #22
 80098c2:	d4ef      	bmi.n	80098a4 <__smakebuf_r+0x18>
 80098c4:	f023 0303 	bic.w	r3, r3, #3
 80098c8:	f043 0302 	orr.w	r3, r3, #2
 80098cc:	81a3      	strh	r3, [r4, #12]
 80098ce:	e7e3      	b.n	8009898 <__smakebuf_r+0xc>
 80098d0:	4b0d      	ldr	r3, [pc, #52]	; (8009908 <__smakebuf_r+0x7c>)
 80098d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	6020      	str	r0, [r4, #0]
 80098d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	9b00      	ldr	r3, [sp, #0]
 80098e0:	6120      	str	r0, [r4, #16]
 80098e2:	6163      	str	r3, [r4, #20]
 80098e4:	9b01      	ldr	r3, [sp, #4]
 80098e6:	b15b      	cbz	r3, 8009900 <__smakebuf_r+0x74>
 80098e8:	4630      	mov	r0, r6
 80098ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ee:	f000 f8d1 	bl	8009a94 <_isatty_r>
 80098f2:	b128      	cbz	r0, 8009900 <__smakebuf_r+0x74>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	f023 0303 	bic.w	r3, r3, #3
 80098fa:	f043 0301 	orr.w	r3, r3, #1
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	89a0      	ldrh	r0, [r4, #12]
 8009902:	4305      	orrs	r5, r0
 8009904:	81a5      	strh	r5, [r4, #12]
 8009906:	e7cd      	b.n	80098a4 <__smakebuf_r+0x18>
 8009908:	0800969d 	.word	0x0800969d

0800990c <_malloc_usable_size_r>:
 800990c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009910:	1f18      	subs	r0, r3, #4
 8009912:	2b00      	cmp	r3, #0
 8009914:	bfbc      	itt	lt
 8009916:	580b      	ldrlt	r3, [r1, r0]
 8009918:	18c0      	addlt	r0, r0, r3
 800991a:	4770      	bx	lr

0800991c <_raise_r>:
 800991c:	291f      	cmp	r1, #31
 800991e:	b538      	push	{r3, r4, r5, lr}
 8009920:	4604      	mov	r4, r0
 8009922:	460d      	mov	r5, r1
 8009924:	d904      	bls.n	8009930 <_raise_r+0x14>
 8009926:	2316      	movs	r3, #22
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009932:	b112      	cbz	r2, 800993a <_raise_r+0x1e>
 8009934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009938:	b94b      	cbnz	r3, 800994e <_raise_r+0x32>
 800993a:	4620      	mov	r0, r4
 800993c:	f000 f830 	bl	80099a0 <_getpid_r>
 8009940:	462a      	mov	r2, r5
 8009942:	4601      	mov	r1, r0
 8009944:	4620      	mov	r0, r4
 8009946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800994a:	f000 b817 	b.w	800997c <_kill_r>
 800994e:	2b01      	cmp	r3, #1
 8009950:	d00a      	beq.n	8009968 <_raise_r+0x4c>
 8009952:	1c59      	adds	r1, r3, #1
 8009954:	d103      	bne.n	800995e <_raise_r+0x42>
 8009956:	2316      	movs	r3, #22
 8009958:	6003      	str	r3, [r0, #0]
 800995a:	2001      	movs	r0, #1
 800995c:	e7e7      	b.n	800992e <_raise_r+0x12>
 800995e:	2400      	movs	r4, #0
 8009960:	4628      	mov	r0, r5
 8009962:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009966:	4798      	blx	r3
 8009968:	2000      	movs	r0, #0
 800996a:	e7e0      	b.n	800992e <_raise_r+0x12>

0800996c <raise>:
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <raise+0xc>)
 800996e:	4601      	mov	r1, r0
 8009970:	6818      	ldr	r0, [r3, #0]
 8009972:	f7ff bfd3 	b.w	800991c <_raise_r>
 8009976:	bf00      	nop
 8009978:	2000000c 	.word	0x2000000c

0800997c <_kill_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	2300      	movs	r3, #0
 8009980:	4d06      	ldr	r5, [pc, #24]	; (800999c <_kill_r+0x20>)
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	4611      	mov	r1, r2
 8009988:	602b      	str	r3, [r5, #0]
 800998a:	f7f9 fe62 	bl	8003652 <_kill>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	d102      	bne.n	8009998 <_kill_r+0x1c>
 8009992:	682b      	ldr	r3, [r5, #0]
 8009994:	b103      	cbz	r3, 8009998 <_kill_r+0x1c>
 8009996:	6023      	str	r3, [r4, #0]
 8009998:	bd38      	pop	{r3, r4, r5, pc}
 800999a:	bf00      	nop
 800999c:	20000d90 	.word	0x20000d90

080099a0 <_getpid_r>:
 80099a0:	f7f9 be50 	b.w	8003644 <_getpid>

080099a4 <__sread>:
 80099a4:	b510      	push	{r4, lr}
 80099a6:	460c      	mov	r4, r1
 80099a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ac:	f000 f894 	bl	8009ad8 <_read_r>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	bfab      	itete	ge
 80099b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099b6:	89a3      	ldrhlt	r3, [r4, #12]
 80099b8:	181b      	addge	r3, r3, r0
 80099ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099be:	bfac      	ite	ge
 80099c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80099c2:	81a3      	strhlt	r3, [r4, #12]
 80099c4:	bd10      	pop	{r4, pc}

080099c6 <__swrite>:
 80099c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ca:	461f      	mov	r7, r3
 80099cc:	898b      	ldrh	r3, [r1, #12]
 80099ce:	4605      	mov	r5, r0
 80099d0:	05db      	lsls	r3, r3, #23
 80099d2:	460c      	mov	r4, r1
 80099d4:	4616      	mov	r6, r2
 80099d6:	d505      	bpl.n	80099e4 <__swrite+0x1e>
 80099d8:	2302      	movs	r3, #2
 80099da:	2200      	movs	r2, #0
 80099dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e0:	f000 f868 	bl	8009ab4 <_lseek_r>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	4632      	mov	r2, r6
 80099e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	4628      	mov	r0, r5
 80099f0:	463b      	mov	r3, r7
 80099f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099fa:	f000 b817 	b.w	8009a2c <_write_r>

080099fe <__sseek>:
 80099fe:	b510      	push	{r4, lr}
 8009a00:	460c      	mov	r4, r1
 8009a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a06:	f000 f855 	bl	8009ab4 <_lseek_r>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	bf15      	itete	ne
 8009a10:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a1a:	81a3      	strheq	r3, [r4, #12]
 8009a1c:	bf18      	it	ne
 8009a1e:	81a3      	strhne	r3, [r4, #12]
 8009a20:	bd10      	pop	{r4, pc}

08009a22 <__sclose>:
 8009a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a26:	f000 b813 	b.w	8009a50 <_close_r>
	...

08009a2c <_write_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4604      	mov	r4, r0
 8009a30:	4608      	mov	r0, r1
 8009a32:	4611      	mov	r1, r2
 8009a34:	2200      	movs	r2, #0
 8009a36:	4d05      	ldr	r5, [pc, #20]	; (8009a4c <_write_r+0x20>)
 8009a38:	602a      	str	r2, [r5, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	f7f9 fe40 	bl	80036c0 <_write>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_write_r+0x1e>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_write_r+0x1e>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20000d90 	.word	0x20000d90

08009a50 <_close_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	2300      	movs	r3, #0
 8009a54:	4d05      	ldr	r5, [pc, #20]	; (8009a6c <_close_r+0x1c>)
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	f7f9 fe4c 	bl	80036f8 <_close>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_close_r+0x1a>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_close_r+0x1a>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	20000d90 	.word	0x20000d90

08009a70 <_fstat_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	2300      	movs	r3, #0
 8009a74:	4d06      	ldr	r5, [pc, #24]	; (8009a90 <_fstat_r+0x20>)
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	602b      	str	r3, [r5, #0]
 8009a7e:	f7f9 fe46 	bl	800370e <_fstat>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	d102      	bne.n	8009a8c <_fstat_r+0x1c>
 8009a86:	682b      	ldr	r3, [r5, #0]
 8009a88:	b103      	cbz	r3, 8009a8c <_fstat_r+0x1c>
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000d90 	.word	0x20000d90

08009a94 <_isatty_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	2300      	movs	r3, #0
 8009a98:	4d05      	ldr	r5, [pc, #20]	; (8009ab0 <_isatty_r+0x1c>)
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f7f9 fe44 	bl	800372c <_isatty>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_isatty_r+0x1a>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_isatty_r+0x1a>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	20000d90 	.word	0x20000d90

08009ab4 <_lseek_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	4611      	mov	r1, r2
 8009abc:	2200      	movs	r2, #0
 8009abe:	4d05      	ldr	r5, [pc, #20]	; (8009ad4 <_lseek_r+0x20>)
 8009ac0:	602a      	str	r2, [r5, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f7f9 fe3c 	bl	8003740 <_lseek>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d102      	bne.n	8009ad2 <_lseek_r+0x1e>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <_lseek_r+0x1e>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	20000d90 	.word	0x20000d90

08009ad8 <_read_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4604      	mov	r4, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	4611      	mov	r1, r2
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	4d05      	ldr	r5, [pc, #20]	; (8009af8 <_read_r+0x20>)
 8009ae4:	602a      	str	r2, [r5, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f7f9 fdcd 	bl	8003686 <_read>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_read_r+0x1e>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_read_r+0x1e>
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	20000d90 	.word	0x20000d90

08009afc <acos>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	4604      	mov	r4, r0
 8009b00:	460d      	mov	r5, r1
 8009b02:	f000 f901 	bl	8009d08 <__ieee754_acos>
 8009b06:	4b11      	ldr	r3, [pc, #68]	; (8009b4c <acos+0x50>)
 8009b08:	4606      	mov	r6, r0
 8009b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8009b0e:	460f      	mov	r7, r1
 8009b10:	3301      	adds	r3, #1
 8009b12:	d018      	beq.n	8009b46 <acos+0x4a>
 8009b14:	4622      	mov	r2, r4
 8009b16:	462b      	mov	r3, r5
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 ff76 	bl	8000a0c <__aeabi_dcmpun>
 8009b20:	b988      	cbnz	r0, 8009b46 <acos+0x4a>
 8009b22:	4620      	mov	r0, r4
 8009b24:	4629      	mov	r1, r5
 8009b26:	f001 f8fd 	bl	800ad24 <fabs>
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <acos+0x54>)
 8009b2e:	f7f6 ff63 	bl	80009f8 <__aeabi_dcmpgt>
 8009b32:	b140      	cbz	r0, 8009b46 <acos+0x4a>
 8009b34:	f7fd f916 	bl	8006d64 <__errno>
 8009b38:	2321      	movs	r3, #33	; 0x21
 8009b3a:	6003      	str	r3, [r0, #0]
 8009b3c:	4805      	ldr	r0, [pc, #20]	; (8009b54 <acos+0x58>)
 8009b3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b42:	f001 b8f9 	b.w	800ad38 <nan>
 8009b46:	4630      	mov	r0, r6
 8009b48:	4639      	mov	r1, r7
 8009b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b4c:	200001dc 	.word	0x200001dc
 8009b50:	3ff00000 	.word	0x3ff00000
 8009b54:	0800b4a0 	.word	0x0800b4a0

08009b58 <pow>:
 8009b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b5c:	461f      	mov	r7, r3
 8009b5e:	4680      	mov	r8, r0
 8009b60:	4689      	mov	r9, r1
 8009b62:	4616      	mov	r6, r2
 8009b64:	f000 fb1c 	bl	800a1a0 <__ieee754_pow>
 8009b68:	4b4d      	ldr	r3, [pc, #308]	; (8009ca0 <pow+0x148>)
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8009b70:	460d      	mov	r5, r1
 8009b72:	3301      	adds	r3, #1
 8009b74:	d015      	beq.n	8009ba2 <pow+0x4a>
 8009b76:	4632      	mov	r2, r6
 8009b78:	463b      	mov	r3, r7
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 ff45 	bl	8000a0c <__aeabi_dcmpun>
 8009b82:	b970      	cbnz	r0, 8009ba2 <pow+0x4a>
 8009b84:	4642      	mov	r2, r8
 8009b86:	464b      	mov	r3, r9
 8009b88:	4640      	mov	r0, r8
 8009b8a:	4649      	mov	r1, r9
 8009b8c:	f7f6 ff3e 	bl	8000a0c <__aeabi_dcmpun>
 8009b90:	2200      	movs	r2, #0
 8009b92:	2300      	movs	r3, #0
 8009b94:	b148      	cbz	r0, 8009baa <pow+0x52>
 8009b96:	4630      	mov	r0, r6
 8009b98:	4639      	mov	r1, r7
 8009b9a:	f7f6 ff05 	bl	80009a8 <__aeabi_dcmpeq>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d17b      	bne.n	8009c9a <pow+0x142>
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009baa:	4640      	mov	r0, r8
 8009bac:	4649      	mov	r1, r9
 8009bae:	f7f6 fefb 	bl	80009a8 <__aeabi_dcmpeq>
 8009bb2:	b1e0      	cbz	r0, 8009bee <pow+0x96>
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	4630      	mov	r0, r6
 8009bba:	4639      	mov	r1, r7
 8009bbc:	f7f6 fef4 	bl	80009a8 <__aeabi_dcmpeq>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d16a      	bne.n	8009c9a <pow+0x142>
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f001 f8af 	bl	800ad2a <finite>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d0e8      	beq.n	8009ba2 <pow+0x4a>
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	f7f6 fef0 	bl	80009bc <__aeabi_dcmplt>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d0e0      	beq.n	8009ba2 <pow+0x4a>
 8009be0:	f7fd f8c0 	bl	8006d64 <__errno>
 8009be4:	2321      	movs	r3, #33	; 0x21
 8009be6:	2400      	movs	r4, #0
 8009be8:	6003      	str	r3, [r0, #0]
 8009bea:	4d2e      	ldr	r5, [pc, #184]	; (8009ca4 <pow+0x14c>)
 8009bec:	e7d9      	b.n	8009ba2 <pow+0x4a>
 8009bee:	4620      	mov	r0, r4
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	f001 f89a 	bl	800ad2a <finite>
 8009bf6:	bba8      	cbnz	r0, 8009c64 <pow+0x10c>
 8009bf8:	4640      	mov	r0, r8
 8009bfa:	4649      	mov	r1, r9
 8009bfc:	f001 f895 	bl	800ad2a <finite>
 8009c00:	b380      	cbz	r0, 8009c64 <pow+0x10c>
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f001 f890 	bl	800ad2a <finite>
 8009c0a:	b358      	cbz	r0, 8009c64 <pow+0x10c>
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	462b      	mov	r3, r5
 8009c10:	4620      	mov	r0, r4
 8009c12:	4629      	mov	r1, r5
 8009c14:	f7f6 fefa 	bl	8000a0c <__aeabi_dcmpun>
 8009c18:	b160      	cbz	r0, 8009c34 <pow+0xdc>
 8009c1a:	f7fd f8a3 	bl	8006d64 <__errno>
 8009c1e:	2321      	movs	r3, #33	; 0x21
 8009c20:	2200      	movs	r2, #0
 8009c22:	6003      	str	r3, [r0, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	4610      	mov	r0, r2
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f7f6 fd7f 	bl	800072c <__aeabi_ddiv>
 8009c2e:	4604      	mov	r4, r0
 8009c30:	460d      	mov	r5, r1
 8009c32:	e7b6      	b.n	8009ba2 <pow+0x4a>
 8009c34:	f7fd f896 	bl	8006d64 <__errno>
 8009c38:	2322      	movs	r3, #34	; 0x22
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	6003      	str	r3, [r0, #0]
 8009c3e:	4649      	mov	r1, r9
 8009c40:	2300      	movs	r3, #0
 8009c42:	4640      	mov	r0, r8
 8009c44:	f7f6 feba 	bl	80009bc <__aeabi_dcmplt>
 8009c48:	2400      	movs	r4, #0
 8009c4a:	b148      	cbz	r0, 8009c60 <pow+0x108>
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	4639      	mov	r1, r7
 8009c50:	f001 f878 	bl	800ad44 <rint>
 8009c54:	4632      	mov	r2, r6
 8009c56:	463b      	mov	r3, r7
 8009c58:	f7f6 fea6 	bl	80009a8 <__aeabi_dcmpeq>
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d0c4      	beq.n	8009bea <pow+0x92>
 8009c60:	4d11      	ldr	r5, [pc, #68]	; (8009ca8 <pow+0x150>)
 8009c62:	e79e      	b.n	8009ba2 <pow+0x4a>
 8009c64:	2200      	movs	r2, #0
 8009c66:	2300      	movs	r3, #0
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7f6 fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d096      	beq.n	8009ba2 <pow+0x4a>
 8009c74:	4640      	mov	r0, r8
 8009c76:	4649      	mov	r1, r9
 8009c78:	f001 f857 	bl	800ad2a <finite>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d090      	beq.n	8009ba2 <pow+0x4a>
 8009c80:	4630      	mov	r0, r6
 8009c82:	4639      	mov	r1, r7
 8009c84:	f001 f851 	bl	800ad2a <finite>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d08a      	beq.n	8009ba2 <pow+0x4a>
 8009c8c:	f7fd f86a 	bl	8006d64 <__errno>
 8009c90:	2322      	movs	r3, #34	; 0x22
 8009c92:	2400      	movs	r4, #0
 8009c94:	2500      	movs	r5, #0
 8009c96:	6003      	str	r3, [r0, #0]
 8009c98:	e783      	b.n	8009ba2 <pow+0x4a>
 8009c9a:	2400      	movs	r4, #0
 8009c9c:	4d03      	ldr	r5, [pc, #12]	; (8009cac <pow+0x154>)
 8009c9e:	e780      	b.n	8009ba2 <pow+0x4a>
 8009ca0:	200001dc 	.word	0x200001dc
 8009ca4:	fff00000 	.word	0xfff00000
 8009ca8:	7ff00000 	.word	0x7ff00000
 8009cac:	3ff00000 	.word	0x3ff00000

08009cb0 <sqrt>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	460f      	mov	r7, r1
 8009cb6:	f000 ff89 	bl	800abcc <__ieee754_sqrt>
 8009cba:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <sqrt+0x54>)
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	d019      	beq.n	8009cfc <sqrt+0x4c>
 8009cc8:	4632      	mov	r2, r6
 8009cca:	463b      	mov	r3, r7
 8009ccc:	4630      	mov	r0, r6
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f7f6 fe9c 	bl	8000a0c <__aeabi_dcmpun>
 8009cd4:	b990      	cbnz	r0, 8009cfc <sqrt+0x4c>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4630      	mov	r0, r6
 8009cdc:	4639      	mov	r1, r7
 8009cde:	f7f6 fe6d 	bl	80009bc <__aeabi_dcmplt>
 8009ce2:	b158      	cbz	r0, 8009cfc <sqrt+0x4c>
 8009ce4:	f7fd f83e 	bl	8006d64 <__errno>
 8009ce8:	2321      	movs	r3, #33	; 0x21
 8009cea:	2200      	movs	r2, #0
 8009cec:	6003      	str	r3, [r0, #0]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	f7f6 fd1a 	bl	800072c <__aeabi_ddiv>
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d02:	bf00      	nop
 8009d04:	200001dc 	.word	0x200001dc

08009d08 <__ieee754_acos>:
 8009d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	4cb2      	ldr	r4, [pc, #712]	; (8009fd8 <__ieee754_acos+0x2d0>)
 8009d0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d12:	42a3      	cmp	r3, r4
 8009d14:	4607      	mov	r7, r0
 8009d16:	460e      	mov	r6, r1
 8009d18:	dd16      	ble.n	8009d48 <__ieee754_acos+0x40>
 8009d1a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8009d1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009d22:	4303      	orrs	r3, r0
 8009d24:	d107      	bne.n	8009d36 <__ieee754_acos+0x2e>
 8009d26:	2900      	cmp	r1, #0
 8009d28:	f300 8202 	bgt.w	800a130 <__ieee754_acos+0x428>
 8009d2c:	a190      	add	r1, pc, #576	; (adr r1, 8009f70 <__ieee754_acos+0x268>)
 8009d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	f7f6 fa15 	bl	8000168 <__aeabi_dsub>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	f7f6 fcf3 	bl	800072c <__aeabi_ddiv>
 8009d46:	e7f4      	b.n	8009d32 <__ieee754_acos+0x2a>
 8009d48:	4ca4      	ldr	r4, [pc, #656]	; (8009fdc <__ieee754_acos+0x2d4>)
 8009d4a:	42a3      	cmp	r3, r4
 8009d4c:	f300 8083 	bgt.w	8009e56 <__ieee754_acos+0x14e>
 8009d50:	4aa3      	ldr	r2, [pc, #652]	; (8009fe0 <__ieee754_acos+0x2d8>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	f340 81ef 	ble.w	800a136 <__ieee754_acos+0x42e>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	f7f6 fbbc 	bl	80004d8 <__aeabi_dmul>
 8009d60:	a385      	add	r3, pc, #532	; (adr r3, 8009f78 <__ieee754_acos+0x270>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	4604      	mov	r4, r0
 8009d68:	460d      	mov	r5, r1
 8009d6a:	f7f6 fbb5 	bl	80004d8 <__aeabi_dmul>
 8009d6e:	a384      	add	r3, pc, #528	; (adr r3, 8009f80 <__ieee754_acos+0x278>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 f9fa 	bl	800016c <__adddf3>
 8009d78:	4622      	mov	r2, r4
 8009d7a:	462b      	mov	r3, r5
 8009d7c:	f7f6 fbac 	bl	80004d8 <__aeabi_dmul>
 8009d80:	a381      	add	r3, pc, #516	; (adr r3, 8009f88 <__ieee754_acos+0x280>)
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	f7f6 f9ef 	bl	8000168 <__aeabi_dsub>
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	f7f6 fba3 	bl	80004d8 <__aeabi_dmul>
 8009d92:	a37f      	add	r3, pc, #508	; (adr r3, 8009f90 <__ieee754_acos+0x288>)
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	f7f6 f9e8 	bl	800016c <__adddf3>
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	462b      	mov	r3, r5
 8009da0:	f7f6 fb9a 	bl	80004d8 <__aeabi_dmul>
 8009da4:	a37c      	add	r3, pc, #496	; (adr r3, 8009f98 <__ieee754_acos+0x290>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f7f6 f9dd 	bl	8000168 <__aeabi_dsub>
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	f7f6 fb91 	bl	80004d8 <__aeabi_dmul>
 8009db6:	a37a      	add	r3, pc, #488	; (adr r3, 8009fa0 <__ieee754_acos+0x298>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f7f6 f9d6 	bl	800016c <__adddf3>
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	462b      	mov	r3, r5
 8009dc4:	f7f6 fb88 	bl	80004d8 <__aeabi_dmul>
 8009dc8:	a377      	add	r3, pc, #476	; (adr r3, 8009fa8 <__ieee754_acos+0x2a0>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	4680      	mov	r8, r0
 8009dd0:	4689      	mov	r9, r1
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	f7f6 fb7f 	bl	80004d8 <__aeabi_dmul>
 8009dda:	a375      	add	r3, pc, #468	; (adr r3, 8009fb0 <__ieee754_acos+0x2a8>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 f9c2 	bl	8000168 <__aeabi_dsub>
 8009de4:	4622      	mov	r2, r4
 8009de6:	462b      	mov	r3, r5
 8009de8:	f7f6 fb76 	bl	80004d8 <__aeabi_dmul>
 8009dec:	a372      	add	r3, pc, #456	; (adr r3, 8009fb8 <__ieee754_acos+0x2b0>)
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 f9bb 	bl	800016c <__adddf3>
 8009df6:	4622      	mov	r2, r4
 8009df8:	462b      	mov	r3, r5
 8009dfa:	f7f6 fb6d 	bl	80004d8 <__aeabi_dmul>
 8009dfe:	a370      	add	r3, pc, #448	; (adr r3, 8009fc0 <__ieee754_acos+0x2b8>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 f9b0 	bl	8000168 <__aeabi_dsub>
 8009e08:	4622      	mov	r2, r4
 8009e0a:	462b      	mov	r3, r5
 8009e0c:	f7f6 fb64 	bl	80004d8 <__aeabi_dmul>
 8009e10:	2200      	movs	r2, #0
 8009e12:	4b74      	ldr	r3, [pc, #464]	; (8009fe4 <__ieee754_acos+0x2dc>)
 8009e14:	f7f6 f9aa 	bl	800016c <__adddf3>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	4649      	mov	r1, r9
 8009e20:	f7f6 fc84 	bl	800072c <__aeabi_ddiv>
 8009e24:	463a      	mov	r2, r7
 8009e26:	4633      	mov	r3, r6
 8009e28:	f7f6 fb56 	bl	80004d8 <__aeabi_dmul>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	a165      	add	r1, pc, #404	; (adr r1, 8009fc8 <__ieee754_acos+0x2c0>)
 8009e32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e36:	f7f6 f997 	bl	8000168 <__aeabi_dsub>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4638      	mov	r0, r7
 8009e40:	4631      	mov	r1, r6
 8009e42:	f7f6 f991 	bl	8000168 <__aeabi_dsub>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	a161      	add	r1, pc, #388	; (adr r1, 8009fd0 <__ieee754_acos+0x2c8>)
 8009e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e50:	f7f6 f98a 	bl	8000168 <__aeabi_dsub>
 8009e54:	e76d      	b.n	8009d32 <__ieee754_acos+0x2a>
 8009e56:	2900      	cmp	r1, #0
 8009e58:	f280 80c8 	bge.w	8009fec <__ieee754_acos+0x2e4>
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	4b61      	ldr	r3, [pc, #388]	; (8009fe4 <__ieee754_acos+0x2dc>)
 8009e60:	f7f6 f984 	bl	800016c <__adddf3>
 8009e64:	2200      	movs	r2, #0
 8009e66:	4b60      	ldr	r3, [pc, #384]	; (8009fe8 <__ieee754_acos+0x2e0>)
 8009e68:	f7f6 fb36 	bl	80004d8 <__aeabi_dmul>
 8009e6c:	a342      	add	r3, pc, #264	; (adr r3, 8009f78 <__ieee754_acos+0x270>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	4604      	mov	r4, r0
 8009e74:	460d      	mov	r5, r1
 8009e76:	f7f6 fb2f 	bl	80004d8 <__aeabi_dmul>
 8009e7a:	a341      	add	r3, pc, #260	; (adr r3, 8009f80 <__ieee754_acos+0x278>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 f974 	bl	800016c <__adddf3>
 8009e84:	4622      	mov	r2, r4
 8009e86:	462b      	mov	r3, r5
 8009e88:	f7f6 fb26 	bl	80004d8 <__aeabi_dmul>
 8009e8c:	a33e      	add	r3, pc, #248	; (adr r3, 8009f88 <__ieee754_acos+0x280>)
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	f7f6 f969 	bl	8000168 <__aeabi_dsub>
 8009e96:	4622      	mov	r2, r4
 8009e98:	462b      	mov	r3, r5
 8009e9a:	f7f6 fb1d 	bl	80004d8 <__aeabi_dmul>
 8009e9e:	a33c      	add	r3, pc, #240	; (adr r3, 8009f90 <__ieee754_acos+0x288>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 f962 	bl	800016c <__adddf3>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	462b      	mov	r3, r5
 8009eac:	f7f6 fb14 	bl	80004d8 <__aeabi_dmul>
 8009eb0:	a339      	add	r3, pc, #228	; (adr r3, 8009f98 <__ieee754_acos+0x290>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 f957 	bl	8000168 <__aeabi_dsub>
 8009eba:	4622      	mov	r2, r4
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	f7f6 fb0b 	bl	80004d8 <__aeabi_dmul>
 8009ec2:	a337      	add	r3, pc, #220	; (adr r3, 8009fa0 <__ieee754_acos+0x298>)
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f7f6 f950 	bl	800016c <__adddf3>
 8009ecc:	4622      	mov	r2, r4
 8009ece:	462b      	mov	r3, r5
 8009ed0:	f7f6 fb02 	bl	80004d8 <__aeabi_dmul>
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	4689      	mov	r9, r1
 8009ed8:	4620      	mov	r0, r4
 8009eda:	4629      	mov	r1, r5
 8009edc:	f000 fe76 	bl	800abcc <__ieee754_sqrt>
 8009ee0:	a331      	add	r3, pc, #196	; (adr r3, 8009fa8 <__ieee754_acos+0x2a0>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	460f      	mov	r7, r1
 8009eea:	4620      	mov	r0, r4
 8009eec:	4629      	mov	r1, r5
 8009eee:	f7f6 faf3 	bl	80004d8 <__aeabi_dmul>
 8009ef2:	a32f      	add	r3, pc, #188	; (adr r3, 8009fb0 <__ieee754_acos+0x2a8>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f7f6 f936 	bl	8000168 <__aeabi_dsub>
 8009efc:	4622      	mov	r2, r4
 8009efe:	462b      	mov	r3, r5
 8009f00:	f7f6 faea 	bl	80004d8 <__aeabi_dmul>
 8009f04:	a32c      	add	r3, pc, #176	; (adr r3, 8009fb8 <__ieee754_acos+0x2b0>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f92f 	bl	800016c <__adddf3>
 8009f0e:	4622      	mov	r2, r4
 8009f10:	462b      	mov	r3, r5
 8009f12:	f7f6 fae1 	bl	80004d8 <__aeabi_dmul>
 8009f16:	a32a      	add	r3, pc, #168	; (adr r3, 8009fc0 <__ieee754_acos+0x2b8>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 f924 	bl	8000168 <__aeabi_dsub>
 8009f20:	4622      	mov	r2, r4
 8009f22:	462b      	mov	r3, r5
 8009f24:	f7f6 fad8 	bl	80004d8 <__aeabi_dmul>
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4b2e      	ldr	r3, [pc, #184]	; (8009fe4 <__ieee754_acos+0x2dc>)
 8009f2c:	f7f6 f91e 	bl	800016c <__adddf3>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4640      	mov	r0, r8
 8009f36:	4649      	mov	r1, r9
 8009f38:	f7f6 fbf8 	bl	800072c <__aeabi_ddiv>
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	463b      	mov	r3, r7
 8009f40:	f7f6 faca 	bl	80004d8 <__aeabi_dmul>
 8009f44:	a320      	add	r3, pc, #128	; (adr r3, 8009fc8 <__ieee754_acos+0x2c0>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	f7f6 f90d 	bl	8000168 <__aeabi_dsub>
 8009f4e:	4632      	mov	r2, r6
 8009f50:	463b      	mov	r3, r7
 8009f52:	f7f6 f90b 	bl	800016c <__adddf3>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	f7f6 f907 	bl	800016c <__adddf3>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	a103      	add	r1, pc, #12	; (adr r1, 8009f70 <__ieee754_acos+0x268>)
 8009f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f68:	e772      	b.n	8009e50 <__ieee754_acos+0x148>
 8009f6a:	bf00      	nop
 8009f6c:	f3af 8000 	nop.w
 8009f70:	54442d18 	.word	0x54442d18
 8009f74:	400921fb 	.word	0x400921fb
 8009f78:	0dfdf709 	.word	0x0dfdf709
 8009f7c:	3f023de1 	.word	0x3f023de1
 8009f80:	7501b288 	.word	0x7501b288
 8009f84:	3f49efe0 	.word	0x3f49efe0
 8009f88:	b5688f3b 	.word	0xb5688f3b
 8009f8c:	3fa48228 	.word	0x3fa48228
 8009f90:	0e884455 	.word	0x0e884455
 8009f94:	3fc9c155 	.word	0x3fc9c155
 8009f98:	03eb6f7d 	.word	0x03eb6f7d
 8009f9c:	3fd4d612 	.word	0x3fd4d612
 8009fa0:	55555555 	.word	0x55555555
 8009fa4:	3fc55555 	.word	0x3fc55555
 8009fa8:	b12e9282 	.word	0xb12e9282
 8009fac:	3fb3b8c5 	.word	0x3fb3b8c5
 8009fb0:	1b8d0159 	.word	0x1b8d0159
 8009fb4:	3fe6066c 	.word	0x3fe6066c
 8009fb8:	9c598ac8 	.word	0x9c598ac8
 8009fbc:	40002ae5 	.word	0x40002ae5
 8009fc0:	1c8a2d4b 	.word	0x1c8a2d4b
 8009fc4:	40033a27 	.word	0x40033a27
 8009fc8:	33145c07 	.word	0x33145c07
 8009fcc:	3c91a626 	.word	0x3c91a626
 8009fd0:	54442d18 	.word	0x54442d18
 8009fd4:	3ff921fb 	.word	0x3ff921fb
 8009fd8:	3fefffff 	.word	0x3fefffff
 8009fdc:	3fdfffff 	.word	0x3fdfffff
 8009fe0:	3c600000 	.word	0x3c600000
 8009fe4:	3ff00000 	.word	0x3ff00000
 8009fe8:	3fe00000 	.word	0x3fe00000
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	4969      	ldr	r1, [pc, #420]	; (800a198 <__ieee754_acos+0x490>)
 8009ff4:	f7f6 f8b8 	bl	8000168 <__aeabi_dsub>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	4b68      	ldr	r3, [pc, #416]	; (800a19c <__ieee754_acos+0x494>)
 8009ffc:	f7f6 fa6c 	bl	80004d8 <__aeabi_dmul>
 800a000:	4604      	mov	r4, r0
 800a002:	460d      	mov	r5, r1
 800a004:	f000 fde2 	bl	800abcc <__ieee754_sqrt>
 800a008:	a34d      	add	r3, pc, #308	; (adr r3, 800a140 <__ieee754_acos+0x438>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	4689      	mov	r9, r1
 800a010:	4680      	mov	r8, r0
 800a012:	4629      	mov	r1, r5
 800a014:	4620      	mov	r0, r4
 800a016:	f7f6 fa5f 	bl	80004d8 <__aeabi_dmul>
 800a01a:	a34b      	add	r3, pc, #300	; (adr r3, 800a148 <__ieee754_acos+0x440>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 f8a4 	bl	800016c <__adddf3>
 800a024:	4622      	mov	r2, r4
 800a026:	462b      	mov	r3, r5
 800a028:	f7f6 fa56 	bl	80004d8 <__aeabi_dmul>
 800a02c:	a348      	add	r3, pc, #288	; (adr r3, 800a150 <__ieee754_acos+0x448>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f7f6 f899 	bl	8000168 <__aeabi_dsub>
 800a036:	4622      	mov	r2, r4
 800a038:	462b      	mov	r3, r5
 800a03a:	f7f6 fa4d 	bl	80004d8 <__aeabi_dmul>
 800a03e:	a346      	add	r3, pc, #280	; (adr r3, 800a158 <__ieee754_acos+0x450>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	f7f6 f892 	bl	800016c <__adddf3>
 800a048:	4622      	mov	r2, r4
 800a04a:	462b      	mov	r3, r5
 800a04c:	f7f6 fa44 	bl	80004d8 <__aeabi_dmul>
 800a050:	a343      	add	r3, pc, #268	; (adr r3, 800a160 <__ieee754_acos+0x458>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 f887 	bl	8000168 <__aeabi_dsub>
 800a05a:	4622      	mov	r2, r4
 800a05c:	462b      	mov	r3, r5
 800a05e:	f7f6 fa3b 	bl	80004d8 <__aeabi_dmul>
 800a062:	a341      	add	r3, pc, #260	; (adr r3, 800a168 <__ieee754_acos+0x460>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	f7f6 f880 	bl	800016c <__adddf3>
 800a06c:	4622      	mov	r2, r4
 800a06e:	462b      	mov	r3, r5
 800a070:	f7f6 fa32 	bl	80004d8 <__aeabi_dmul>
 800a074:	a33e      	add	r3, pc, #248	; (adr r3, 800a170 <__ieee754_acos+0x468>)
 800a076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07a:	4682      	mov	sl, r0
 800a07c:	468b      	mov	fp, r1
 800a07e:	4620      	mov	r0, r4
 800a080:	4629      	mov	r1, r5
 800a082:	f7f6 fa29 	bl	80004d8 <__aeabi_dmul>
 800a086:	a33c      	add	r3, pc, #240	; (adr r3, 800a178 <__ieee754_acos+0x470>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	f7f6 f86c 	bl	8000168 <__aeabi_dsub>
 800a090:	4622      	mov	r2, r4
 800a092:	462b      	mov	r3, r5
 800a094:	f7f6 fa20 	bl	80004d8 <__aeabi_dmul>
 800a098:	a339      	add	r3, pc, #228	; (adr r3, 800a180 <__ieee754_acos+0x478>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f865 	bl	800016c <__adddf3>
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	f7f6 fa17 	bl	80004d8 <__aeabi_dmul>
 800a0aa:	a337      	add	r3, pc, #220	; (adr r3, 800a188 <__ieee754_acos+0x480>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f7f6 f85a 	bl	8000168 <__aeabi_dsub>
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	462b      	mov	r3, r5
 800a0b8:	f7f6 fa0e 	bl	80004d8 <__aeabi_dmul>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4b36      	ldr	r3, [pc, #216]	; (800a198 <__ieee754_acos+0x490>)
 800a0c0:	f7f6 f854 	bl	800016c <__adddf3>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4650      	mov	r0, sl
 800a0ca:	4659      	mov	r1, fp
 800a0cc:	f7f6 fb2e 	bl	800072c <__aeabi_ddiv>
 800a0d0:	4642      	mov	r2, r8
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	f7f6 fa00 	bl	80004d8 <__aeabi_dmul>
 800a0d8:	2600      	movs	r6, #0
 800a0da:	4682      	mov	sl, r0
 800a0dc:	468b      	mov	fp, r1
 800a0de:	4632      	mov	r2, r6
 800a0e0:	464b      	mov	r3, r9
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 f9f7 	bl	80004d8 <__aeabi_dmul>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7f6 f839 	bl	8000168 <__aeabi_dsub>
 800a0f6:	4632      	mov	r2, r6
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	4640      	mov	r0, r8
 800a100:	4649      	mov	r1, r9
 800a102:	f7f6 f833 	bl	800016c <__adddf3>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4620      	mov	r0, r4
 800a10c:	4629      	mov	r1, r5
 800a10e:	f7f6 fb0d 	bl	800072c <__aeabi_ddiv>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4650      	mov	r0, sl
 800a118:	4659      	mov	r1, fp
 800a11a:	f7f6 f827 	bl	800016c <__adddf3>
 800a11e:	4632      	mov	r2, r6
 800a120:	464b      	mov	r3, r9
 800a122:	f7f6 f823 	bl	800016c <__adddf3>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	f7f6 f81f 	bl	800016c <__adddf3>
 800a12e:	e600      	b.n	8009d32 <__ieee754_acos+0x2a>
 800a130:	2000      	movs	r0, #0
 800a132:	2100      	movs	r1, #0
 800a134:	e5fd      	b.n	8009d32 <__ieee754_acos+0x2a>
 800a136:	a116      	add	r1, pc, #88	; (adr r1, 800a190 <__ieee754_acos+0x488>)
 800a138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a13c:	e5f9      	b.n	8009d32 <__ieee754_acos+0x2a>
 800a13e:	bf00      	nop
 800a140:	0dfdf709 	.word	0x0dfdf709
 800a144:	3f023de1 	.word	0x3f023de1
 800a148:	7501b288 	.word	0x7501b288
 800a14c:	3f49efe0 	.word	0x3f49efe0
 800a150:	b5688f3b 	.word	0xb5688f3b
 800a154:	3fa48228 	.word	0x3fa48228
 800a158:	0e884455 	.word	0x0e884455
 800a15c:	3fc9c155 	.word	0x3fc9c155
 800a160:	03eb6f7d 	.word	0x03eb6f7d
 800a164:	3fd4d612 	.word	0x3fd4d612
 800a168:	55555555 	.word	0x55555555
 800a16c:	3fc55555 	.word	0x3fc55555
 800a170:	b12e9282 	.word	0xb12e9282
 800a174:	3fb3b8c5 	.word	0x3fb3b8c5
 800a178:	1b8d0159 	.word	0x1b8d0159
 800a17c:	3fe6066c 	.word	0x3fe6066c
 800a180:	9c598ac8 	.word	0x9c598ac8
 800a184:	40002ae5 	.word	0x40002ae5
 800a188:	1c8a2d4b 	.word	0x1c8a2d4b
 800a18c:	40033a27 	.word	0x40033a27
 800a190:	54442d18 	.word	0x54442d18
 800a194:	3ff921fb 	.word	0x3ff921fb
 800a198:	3ff00000 	.word	0x3ff00000
 800a19c:	3fe00000 	.word	0x3fe00000

0800a1a0 <__ieee754_pow>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	b093      	sub	sp, #76	; 0x4c
 800a1a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1aa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a1ae:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a1b2:	ea55 0302 	orrs.w	r3, r5, r2
 800a1b6:	4607      	mov	r7, r0
 800a1b8:	4688      	mov	r8, r1
 800a1ba:	f000 84bf 	beq.w	800ab3c <__ieee754_pow+0x99c>
 800a1be:	4b7e      	ldr	r3, [pc, #504]	; (800a3b8 <__ieee754_pow+0x218>)
 800a1c0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	4689      	mov	r9, r1
 800a1c8:	4682      	mov	sl, r0
 800a1ca:	dc09      	bgt.n	800a1e0 <__ieee754_pow+0x40>
 800a1cc:	d103      	bne.n	800a1d6 <__ieee754_pow+0x36>
 800a1ce:	b978      	cbnz	r0, 800a1f0 <__ieee754_pow+0x50>
 800a1d0:	42a5      	cmp	r5, r4
 800a1d2:	dd02      	ble.n	800a1da <__ieee754_pow+0x3a>
 800a1d4:	e00c      	b.n	800a1f0 <__ieee754_pow+0x50>
 800a1d6:	429d      	cmp	r5, r3
 800a1d8:	dc02      	bgt.n	800a1e0 <__ieee754_pow+0x40>
 800a1da:	429d      	cmp	r5, r3
 800a1dc:	d10e      	bne.n	800a1fc <__ieee754_pow+0x5c>
 800a1de:	b16a      	cbz	r2, 800a1fc <__ieee754_pow+0x5c>
 800a1e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a1e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a1e8:	ea54 030a 	orrs.w	r3, r4, sl
 800a1ec:	f000 84a6 	beq.w	800ab3c <__ieee754_pow+0x99c>
 800a1f0:	4872      	ldr	r0, [pc, #456]	; (800a3bc <__ieee754_pow+0x21c>)
 800a1f2:	b013      	add	sp, #76	; 0x4c
 800a1f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f8:	f000 bd9e 	b.w	800ad38 <nan>
 800a1fc:	f1b9 0f00 	cmp.w	r9, #0
 800a200:	da39      	bge.n	800a276 <__ieee754_pow+0xd6>
 800a202:	4b6f      	ldr	r3, [pc, #444]	; (800a3c0 <__ieee754_pow+0x220>)
 800a204:	429d      	cmp	r5, r3
 800a206:	dc54      	bgt.n	800a2b2 <__ieee754_pow+0x112>
 800a208:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a20c:	429d      	cmp	r5, r3
 800a20e:	f340 84a6 	ble.w	800ab5e <__ieee754_pow+0x9be>
 800a212:	152b      	asrs	r3, r5, #20
 800a214:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a218:	2b14      	cmp	r3, #20
 800a21a:	dd0f      	ble.n	800a23c <__ieee754_pow+0x9c>
 800a21c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a220:	fa22 f103 	lsr.w	r1, r2, r3
 800a224:	fa01 f303 	lsl.w	r3, r1, r3
 800a228:	4293      	cmp	r3, r2
 800a22a:	f040 8498 	bne.w	800ab5e <__ieee754_pow+0x9be>
 800a22e:	f001 0101 	and.w	r1, r1, #1
 800a232:	f1c1 0302 	rsb	r3, r1, #2
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	b182      	cbz	r2, 800a25c <__ieee754_pow+0xbc>
 800a23a:	e05e      	b.n	800a2fa <__ieee754_pow+0x15a>
 800a23c:	2a00      	cmp	r2, #0
 800a23e:	d15a      	bne.n	800a2f6 <__ieee754_pow+0x156>
 800a240:	f1c3 0314 	rsb	r3, r3, #20
 800a244:	fa45 f103 	asr.w	r1, r5, r3
 800a248:	fa01 f303 	lsl.w	r3, r1, r3
 800a24c:	42ab      	cmp	r3, r5
 800a24e:	f040 8483 	bne.w	800ab58 <__ieee754_pow+0x9b8>
 800a252:	f001 0101 	and.w	r1, r1, #1
 800a256:	f1c1 0302 	rsb	r3, r1, #2
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4b59      	ldr	r3, [pc, #356]	; (800a3c4 <__ieee754_pow+0x224>)
 800a25e:	429d      	cmp	r5, r3
 800a260:	d130      	bne.n	800a2c4 <__ieee754_pow+0x124>
 800a262:	2e00      	cmp	r6, #0
 800a264:	f280 8474 	bge.w	800ab50 <__ieee754_pow+0x9b0>
 800a268:	463a      	mov	r2, r7
 800a26a:	4643      	mov	r3, r8
 800a26c:	2000      	movs	r0, #0
 800a26e:	4955      	ldr	r1, [pc, #340]	; (800a3c4 <__ieee754_pow+0x224>)
 800a270:	f7f6 fa5c 	bl	800072c <__aeabi_ddiv>
 800a274:	e02f      	b.n	800a2d6 <__ieee754_pow+0x136>
 800a276:	2300      	movs	r3, #0
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d13d      	bne.n	800a2fa <__ieee754_pow+0x15a>
 800a27e:	4b4e      	ldr	r3, [pc, #312]	; (800a3b8 <__ieee754_pow+0x218>)
 800a280:	429d      	cmp	r5, r3
 800a282:	d1eb      	bne.n	800a25c <__ieee754_pow+0xbc>
 800a284:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a288:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a28c:	ea53 030a 	orrs.w	r3, r3, sl
 800a290:	f000 8454 	beq.w	800ab3c <__ieee754_pow+0x99c>
 800a294:	4b4c      	ldr	r3, [pc, #304]	; (800a3c8 <__ieee754_pow+0x228>)
 800a296:	429c      	cmp	r4, r3
 800a298:	dd0d      	ble.n	800a2b6 <__ieee754_pow+0x116>
 800a29a:	2e00      	cmp	r6, #0
 800a29c:	f280 8454 	bge.w	800ab48 <__ieee754_pow+0x9a8>
 800a2a0:	f04f 0b00 	mov.w	fp, #0
 800a2a4:	f04f 0c00 	mov.w	ip, #0
 800a2a8:	4658      	mov	r0, fp
 800a2aa:	4661      	mov	r1, ip
 800a2ac:	b013      	add	sp, #76	; 0x4c
 800a2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e7e0      	b.n	800a278 <__ieee754_pow+0xd8>
 800a2b6:	2e00      	cmp	r6, #0
 800a2b8:	daf2      	bge.n	800a2a0 <__ieee754_pow+0x100>
 800a2ba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a2be:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a2c2:	e7f1      	b.n	800a2a8 <__ieee754_pow+0x108>
 800a2c4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a2c8:	d108      	bne.n	800a2dc <__ieee754_pow+0x13c>
 800a2ca:	463a      	mov	r2, r7
 800a2cc:	4643      	mov	r3, r8
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	4641      	mov	r1, r8
 800a2d2:	f7f6 f901 	bl	80004d8 <__aeabi_dmul>
 800a2d6:	4683      	mov	fp, r0
 800a2d8:	468c      	mov	ip, r1
 800a2da:	e7e5      	b.n	800a2a8 <__ieee754_pow+0x108>
 800a2dc:	4b3b      	ldr	r3, [pc, #236]	; (800a3cc <__ieee754_pow+0x22c>)
 800a2de:	429e      	cmp	r6, r3
 800a2e0:	d10b      	bne.n	800a2fa <__ieee754_pow+0x15a>
 800a2e2:	f1b9 0f00 	cmp.w	r9, #0
 800a2e6:	db08      	blt.n	800a2fa <__ieee754_pow+0x15a>
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	4641      	mov	r1, r8
 800a2ec:	b013      	add	sp, #76	; 0x4c
 800a2ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f2:	f000 bc6b 	b.w	800abcc <__ieee754_sqrt>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	4641      	mov	r1, r8
 800a2fe:	f000 fd11 	bl	800ad24 <fabs>
 800a302:	4683      	mov	fp, r0
 800a304:	468c      	mov	ip, r1
 800a306:	f1ba 0f00 	cmp.w	sl, #0
 800a30a:	d129      	bne.n	800a360 <__ieee754_pow+0x1c0>
 800a30c:	b124      	cbz	r4, 800a318 <__ieee754_pow+0x178>
 800a30e:	4b2d      	ldr	r3, [pc, #180]	; (800a3c4 <__ieee754_pow+0x224>)
 800a310:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a314:	429a      	cmp	r2, r3
 800a316:	d123      	bne.n	800a360 <__ieee754_pow+0x1c0>
 800a318:	2e00      	cmp	r6, #0
 800a31a:	da07      	bge.n	800a32c <__ieee754_pow+0x18c>
 800a31c:	465a      	mov	r2, fp
 800a31e:	4663      	mov	r3, ip
 800a320:	2000      	movs	r0, #0
 800a322:	4928      	ldr	r1, [pc, #160]	; (800a3c4 <__ieee754_pow+0x224>)
 800a324:	f7f6 fa02 	bl	800072c <__aeabi_ddiv>
 800a328:	4683      	mov	fp, r0
 800a32a:	468c      	mov	ip, r1
 800a32c:	f1b9 0f00 	cmp.w	r9, #0
 800a330:	daba      	bge.n	800a2a8 <__ieee754_pow+0x108>
 800a332:	9b00      	ldr	r3, [sp, #0]
 800a334:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a338:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a33c:	4323      	orrs	r3, r4
 800a33e:	d108      	bne.n	800a352 <__ieee754_pow+0x1b2>
 800a340:	465a      	mov	r2, fp
 800a342:	4663      	mov	r3, ip
 800a344:	4658      	mov	r0, fp
 800a346:	4661      	mov	r1, ip
 800a348:	f7f5 ff0e 	bl	8000168 <__aeabi_dsub>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	e78e      	b.n	800a270 <__ieee754_pow+0xd0>
 800a352:	9b00      	ldr	r3, [sp, #0]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d1a7      	bne.n	800a2a8 <__ieee754_pow+0x108>
 800a358:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a35c:	469c      	mov	ip, r3
 800a35e:	e7a3      	b.n	800a2a8 <__ieee754_pow+0x108>
 800a360:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a364:	3b01      	subs	r3, #1
 800a366:	930c      	str	r3, [sp, #48]	; 0x30
 800a368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a36a:	9b00      	ldr	r3, [sp, #0]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	d104      	bne.n	800a37a <__ieee754_pow+0x1da>
 800a370:	463a      	mov	r2, r7
 800a372:	4643      	mov	r3, r8
 800a374:	4638      	mov	r0, r7
 800a376:	4641      	mov	r1, r8
 800a378:	e7e6      	b.n	800a348 <__ieee754_pow+0x1a8>
 800a37a:	4b15      	ldr	r3, [pc, #84]	; (800a3d0 <__ieee754_pow+0x230>)
 800a37c:	429d      	cmp	r5, r3
 800a37e:	f340 80f9 	ble.w	800a574 <__ieee754_pow+0x3d4>
 800a382:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a386:	429d      	cmp	r5, r3
 800a388:	4b0f      	ldr	r3, [pc, #60]	; (800a3c8 <__ieee754_pow+0x228>)
 800a38a:	dd09      	ble.n	800a3a0 <__ieee754_pow+0x200>
 800a38c:	429c      	cmp	r4, r3
 800a38e:	dc0c      	bgt.n	800a3aa <__ieee754_pow+0x20a>
 800a390:	2e00      	cmp	r6, #0
 800a392:	da85      	bge.n	800a2a0 <__ieee754_pow+0x100>
 800a394:	a306      	add	r3, pc, #24	; (adr r3, 800a3b0 <__ieee754_pow+0x210>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	4610      	mov	r0, r2
 800a39c:	4619      	mov	r1, r3
 800a39e:	e798      	b.n	800a2d2 <__ieee754_pow+0x132>
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	dbf5      	blt.n	800a390 <__ieee754_pow+0x1f0>
 800a3a4:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <__ieee754_pow+0x224>)
 800a3a6:	429c      	cmp	r4, r3
 800a3a8:	dd14      	ble.n	800a3d4 <__ieee754_pow+0x234>
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	dcf2      	bgt.n	800a394 <__ieee754_pow+0x1f4>
 800a3ae:	e777      	b.n	800a2a0 <__ieee754_pow+0x100>
 800a3b0:	8800759c 	.word	0x8800759c
 800a3b4:	7e37e43c 	.word	0x7e37e43c
 800a3b8:	7ff00000 	.word	0x7ff00000
 800a3bc:	0800b4a0 	.word	0x0800b4a0
 800a3c0:	433fffff 	.word	0x433fffff
 800a3c4:	3ff00000 	.word	0x3ff00000
 800a3c8:	3fefffff 	.word	0x3fefffff
 800a3cc:	3fe00000 	.word	0x3fe00000
 800a3d0:	41e00000 	.word	0x41e00000
 800a3d4:	4661      	mov	r1, ip
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4658      	mov	r0, fp
 800a3da:	4b61      	ldr	r3, [pc, #388]	; (800a560 <__ieee754_pow+0x3c0>)
 800a3dc:	f7f5 fec4 	bl	8000168 <__aeabi_dsub>
 800a3e0:	a355      	add	r3, pc, #340	; (adr r3, 800a538 <__ieee754_pow+0x398>)
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	460d      	mov	r5, r1
 800a3ea:	f7f6 f875 	bl	80004d8 <__aeabi_dmul>
 800a3ee:	a354      	add	r3, pc, #336	; (adr r3, 800a540 <__ieee754_pow+0x3a0>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	460f      	mov	r7, r1
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	f7f6 f86c 	bl	80004d8 <__aeabi_dmul>
 800a400:	2200      	movs	r2, #0
 800a402:	4682      	mov	sl, r0
 800a404:	468b      	mov	fp, r1
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	4b56      	ldr	r3, [pc, #344]	; (800a564 <__ieee754_pow+0x3c4>)
 800a40c:	f7f6 f864 	bl	80004d8 <__aeabi_dmul>
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	a14c      	add	r1, pc, #304	; (adr r1, 800a548 <__ieee754_pow+0x3a8>)
 800a416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a41a:	f7f5 fea5 	bl	8000168 <__aeabi_dsub>
 800a41e:	4622      	mov	r2, r4
 800a420:	462b      	mov	r3, r5
 800a422:	f7f6 f859 	bl	80004d8 <__aeabi_dmul>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	2000      	movs	r0, #0
 800a42c:	494e      	ldr	r1, [pc, #312]	; (800a568 <__ieee754_pow+0x3c8>)
 800a42e:	f7f5 fe9b 	bl	8000168 <__aeabi_dsub>
 800a432:	4622      	mov	r2, r4
 800a434:	462b      	mov	r3, r5
 800a436:	4680      	mov	r8, r0
 800a438:	4689      	mov	r9, r1
 800a43a:	4620      	mov	r0, r4
 800a43c:	4629      	mov	r1, r5
 800a43e:	f7f6 f84b 	bl	80004d8 <__aeabi_dmul>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f6 f845 	bl	80004d8 <__aeabi_dmul>
 800a44e:	a340      	add	r3, pc, #256	; (adr r3, 800a550 <__ieee754_pow+0x3b0>)
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f7f6 f840 	bl	80004d8 <__aeabi_dmul>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	4650      	mov	r0, sl
 800a45e:	4659      	mov	r1, fp
 800a460:	f7f5 fe82 	bl	8000168 <__aeabi_dsub>
 800a464:	f04f 0a00 	mov.w	sl, #0
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4604      	mov	r4, r0
 800a46e:	460d      	mov	r5, r1
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f5 fe7a 	bl	800016c <__adddf3>
 800a478:	4632      	mov	r2, r6
 800a47a:	463b      	mov	r3, r7
 800a47c:	4650      	mov	r0, sl
 800a47e:	468b      	mov	fp, r1
 800a480:	f7f5 fe72 	bl	8000168 <__aeabi_dsub>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4620      	mov	r0, r4
 800a48a:	4629      	mov	r1, r5
 800a48c:	f7f5 fe6c 	bl	8000168 <__aeabi_dsub>
 800a490:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a494:	9b00      	ldr	r3, [sp, #0]
 800a496:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a498:	3b01      	subs	r3, #1
 800a49a:	4313      	orrs	r3, r2
 800a49c:	f04f 0600 	mov.w	r6, #0
 800a4a0:	f04f 0200 	mov.w	r2, #0
 800a4a4:	bf0c      	ite	eq
 800a4a6:	4b31      	ldreq	r3, [pc, #196]	; (800a56c <__ieee754_pow+0x3cc>)
 800a4a8:	4b2d      	ldrne	r3, [pc, #180]	; (800a560 <__ieee754_pow+0x3c0>)
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	460d      	mov	r5, r1
 800a4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4b2:	e9cd 2300 	strd	r2, r3, [sp]
 800a4b6:	4632      	mov	r2, r6
 800a4b8:	463b      	mov	r3, r7
 800a4ba:	f7f5 fe55 	bl	8000168 <__aeabi_dsub>
 800a4be:	4652      	mov	r2, sl
 800a4c0:	465b      	mov	r3, fp
 800a4c2:	f7f6 f809 	bl	80004d8 <__aeabi_dmul>
 800a4c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	4689      	mov	r9, r1
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	f7f6 f801 	bl	80004d8 <__aeabi_dmul>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4640      	mov	r0, r8
 800a4dc:	4649      	mov	r1, r9
 800a4de:	f7f5 fe45 	bl	800016c <__adddf3>
 800a4e2:	4632      	mov	r2, r6
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	4680      	mov	r8, r0
 800a4e8:	4689      	mov	r9, r1
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	4659      	mov	r1, fp
 800a4ee:	f7f5 fff3 	bl	80004d8 <__aeabi_dmul>
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	460d      	mov	r5, r1
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	4649      	mov	r1, r9
 800a4fc:	4640      	mov	r0, r8
 800a4fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a502:	f7f5 fe33 	bl	800016c <__adddf3>
 800a506:	4b1a      	ldr	r3, [pc, #104]	; (800a570 <__ieee754_pow+0x3d0>)
 800a508:	4682      	mov	sl, r0
 800a50a:	4299      	cmp	r1, r3
 800a50c:	460f      	mov	r7, r1
 800a50e:	460e      	mov	r6, r1
 800a510:	f340 82ed 	ble.w	800aaee <__ieee754_pow+0x94e>
 800a514:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a518:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a51c:	4303      	orrs	r3, r0
 800a51e:	f000 81e7 	beq.w	800a8f0 <__ieee754_pow+0x750>
 800a522:	a30d      	add	r3, pc, #52	; (adr r3, 800a558 <__ieee754_pow+0x3b8>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a52c:	f7f5 ffd4 	bl	80004d8 <__aeabi_dmul>
 800a530:	a309      	add	r3, pc, #36	; (adr r3, 800a558 <__ieee754_pow+0x3b8>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	e6cc      	b.n	800a2d2 <__ieee754_pow+0x132>
 800a538:	60000000 	.word	0x60000000
 800a53c:	3ff71547 	.word	0x3ff71547
 800a540:	f85ddf44 	.word	0xf85ddf44
 800a544:	3e54ae0b 	.word	0x3e54ae0b
 800a548:	55555555 	.word	0x55555555
 800a54c:	3fd55555 	.word	0x3fd55555
 800a550:	652b82fe 	.word	0x652b82fe
 800a554:	3ff71547 	.word	0x3ff71547
 800a558:	8800759c 	.word	0x8800759c
 800a55c:	7e37e43c 	.word	0x7e37e43c
 800a560:	3ff00000 	.word	0x3ff00000
 800a564:	3fd00000 	.word	0x3fd00000
 800a568:	3fe00000 	.word	0x3fe00000
 800a56c:	bff00000 	.word	0xbff00000
 800a570:	408fffff 	.word	0x408fffff
 800a574:	4bd4      	ldr	r3, [pc, #848]	; (800a8c8 <__ieee754_pow+0x728>)
 800a576:	2200      	movs	r2, #0
 800a578:	ea09 0303 	and.w	r3, r9, r3
 800a57c:	b943      	cbnz	r3, 800a590 <__ieee754_pow+0x3f0>
 800a57e:	4658      	mov	r0, fp
 800a580:	4661      	mov	r1, ip
 800a582:	4bd2      	ldr	r3, [pc, #840]	; (800a8cc <__ieee754_pow+0x72c>)
 800a584:	f7f5 ffa8 	bl	80004d8 <__aeabi_dmul>
 800a588:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a58c:	4683      	mov	fp, r0
 800a58e:	460c      	mov	r4, r1
 800a590:	1523      	asrs	r3, r4, #20
 800a592:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a596:	4413      	add	r3, r2
 800a598:	930b      	str	r3, [sp, #44]	; 0x2c
 800a59a:	4bcd      	ldr	r3, [pc, #820]	; (800a8d0 <__ieee754_pow+0x730>)
 800a59c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a5a0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a5a4:	429c      	cmp	r4, r3
 800a5a6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a5aa:	dd08      	ble.n	800a5be <__ieee754_pow+0x41e>
 800a5ac:	4bc9      	ldr	r3, [pc, #804]	; (800a8d4 <__ieee754_pow+0x734>)
 800a5ae:	429c      	cmp	r4, r3
 800a5b0:	f340 819c 	ble.w	800a8ec <__ieee754_pow+0x74c>
 800a5b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5be:	2600      	movs	r6, #0
 800a5c0:	00f3      	lsls	r3, r6, #3
 800a5c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a5c4:	4bc4      	ldr	r3, [pc, #784]	; (800a8d8 <__ieee754_pow+0x738>)
 800a5c6:	4658      	mov	r0, fp
 800a5c8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a5cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a5d8:	4623      	mov	r3, r4
 800a5da:	f7f5 fdc5 	bl	8000168 <__aeabi_dsub>
 800a5de:	46da      	mov	sl, fp
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	4652      	mov	r2, sl
 800a5e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a5e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5ec:	f7f5 fdbe 	bl	800016c <__adddf3>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	49b9      	ldr	r1, [pc, #740]	; (800a8dc <__ieee754_pow+0x73c>)
 800a5f8:	f7f6 f898 	bl	800072c <__aeabi_ddiv>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a604:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a608:	f7f5 ff66 	bl	80004d8 <__aeabi_dmul>
 800a60c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a610:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a614:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a618:	2300      	movs	r3, #0
 800a61a:	2200      	movs	r2, #0
 800a61c:	46ab      	mov	fp, r5
 800a61e:	106d      	asrs	r5, r5, #1
 800a620:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a62a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a62e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a632:	4640      	mov	r0, r8
 800a634:	4649      	mov	r1, r9
 800a636:	4614      	mov	r4, r2
 800a638:	461d      	mov	r5, r3
 800a63a:	f7f5 ff4d 	bl	80004d8 <__aeabi_dmul>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a646:	f7f5 fd8f 	bl	8000168 <__aeabi_dsub>
 800a64a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a64e:	4606      	mov	r6, r0
 800a650:	460f      	mov	r7, r1
 800a652:	4620      	mov	r0, r4
 800a654:	4629      	mov	r1, r5
 800a656:	f7f5 fd87 	bl	8000168 <__aeabi_dsub>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4650      	mov	r0, sl
 800a660:	4659      	mov	r1, fp
 800a662:	f7f5 fd81 	bl	8000168 <__aeabi_dsub>
 800a666:	4642      	mov	r2, r8
 800a668:	464b      	mov	r3, r9
 800a66a:	f7f5 ff35 	bl	80004d8 <__aeabi_dmul>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4630      	mov	r0, r6
 800a674:	4639      	mov	r1, r7
 800a676:	f7f5 fd77 	bl	8000168 <__aeabi_dsub>
 800a67a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a67e:	f7f5 ff2b 	bl	80004d8 <__aeabi_dmul>
 800a682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a686:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a68a:	4610      	mov	r0, r2
 800a68c:	4619      	mov	r1, r3
 800a68e:	f7f5 ff23 	bl	80004d8 <__aeabi_dmul>
 800a692:	a37b      	add	r3, pc, #492	; (adr r3, 800a880 <__ieee754_pow+0x6e0>)
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	4604      	mov	r4, r0
 800a69a:	460d      	mov	r5, r1
 800a69c:	f7f5 ff1c 	bl	80004d8 <__aeabi_dmul>
 800a6a0:	a379      	add	r3, pc, #484	; (adr r3, 800a888 <__ieee754_pow+0x6e8>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 fd61 	bl	800016c <__adddf3>
 800a6aa:	4622      	mov	r2, r4
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	f7f5 ff13 	bl	80004d8 <__aeabi_dmul>
 800a6b2:	a377      	add	r3, pc, #476	; (adr r3, 800a890 <__ieee754_pow+0x6f0>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f7f5 fd58 	bl	800016c <__adddf3>
 800a6bc:	4622      	mov	r2, r4
 800a6be:	462b      	mov	r3, r5
 800a6c0:	f7f5 ff0a 	bl	80004d8 <__aeabi_dmul>
 800a6c4:	a374      	add	r3, pc, #464	; (adr r3, 800a898 <__ieee754_pow+0x6f8>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	f7f5 fd4f 	bl	800016c <__adddf3>
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	462b      	mov	r3, r5
 800a6d2:	f7f5 ff01 	bl	80004d8 <__aeabi_dmul>
 800a6d6:	a372      	add	r3, pc, #456	; (adr r3, 800a8a0 <__ieee754_pow+0x700>)
 800a6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6dc:	f7f5 fd46 	bl	800016c <__adddf3>
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	462b      	mov	r3, r5
 800a6e4:	f7f5 fef8 	bl	80004d8 <__aeabi_dmul>
 800a6e8:	a36f      	add	r3, pc, #444	; (adr r3, 800a8a8 <__ieee754_pow+0x708>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 fd3d 	bl	800016c <__adddf3>
 800a6f2:	4622      	mov	r2, r4
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	460f      	mov	r7, r1
 800a6f8:	462b      	mov	r3, r5
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	f7f5 feeb 	bl	80004d8 <__aeabi_dmul>
 800a702:	4602      	mov	r2, r0
 800a704:	460b      	mov	r3, r1
 800a706:	4630      	mov	r0, r6
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f5 fee5 	bl	80004d8 <__aeabi_dmul>
 800a70e:	4604      	mov	r4, r0
 800a710:	460d      	mov	r5, r1
 800a712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a716:	4642      	mov	r2, r8
 800a718:	464b      	mov	r3, r9
 800a71a:	f7f5 fd27 	bl	800016c <__adddf3>
 800a71e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a722:	f7f5 fed9 	bl	80004d8 <__aeabi_dmul>
 800a726:	4622      	mov	r2, r4
 800a728:	462b      	mov	r3, r5
 800a72a:	f7f5 fd1f 	bl	800016c <__adddf3>
 800a72e:	4642      	mov	r2, r8
 800a730:	4606      	mov	r6, r0
 800a732:	460f      	mov	r7, r1
 800a734:	464b      	mov	r3, r9
 800a736:	4640      	mov	r0, r8
 800a738:	4649      	mov	r1, r9
 800a73a:	f7f5 fecd 	bl	80004d8 <__aeabi_dmul>
 800a73e:	2200      	movs	r2, #0
 800a740:	4b67      	ldr	r3, [pc, #412]	; (800a8e0 <__ieee754_pow+0x740>)
 800a742:	4682      	mov	sl, r0
 800a744:	468b      	mov	fp, r1
 800a746:	f7f5 fd11 	bl	800016c <__adddf3>
 800a74a:	4632      	mov	r2, r6
 800a74c:	463b      	mov	r3, r7
 800a74e:	f7f5 fd0d 	bl	800016c <__adddf3>
 800a752:	9c04      	ldr	r4, [sp, #16]
 800a754:	460d      	mov	r5, r1
 800a756:	4622      	mov	r2, r4
 800a758:	460b      	mov	r3, r1
 800a75a:	4640      	mov	r0, r8
 800a75c:	4649      	mov	r1, r9
 800a75e:	f7f5 febb 	bl	80004d8 <__aeabi_dmul>
 800a762:	2200      	movs	r2, #0
 800a764:	4680      	mov	r8, r0
 800a766:	4689      	mov	r9, r1
 800a768:	4620      	mov	r0, r4
 800a76a:	4629      	mov	r1, r5
 800a76c:	4b5c      	ldr	r3, [pc, #368]	; (800a8e0 <__ieee754_pow+0x740>)
 800a76e:	f7f5 fcfb 	bl	8000168 <__aeabi_dsub>
 800a772:	4652      	mov	r2, sl
 800a774:	465b      	mov	r3, fp
 800a776:	f7f5 fcf7 	bl	8000168 <__aeabi_dsub>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	4630      	mov	r0, r6
 800a780:	4639      	mov	r1, r7
 800a782:	f7f5 fcf1 	bl	8000168 <__aeabi_dsub>
 800a786:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a78a:	f7f5 fea5 	bl	80004d8 <__aeabi_dmul>
 800a78e:	4622      	mov	r2, r4
 800a790:	4606      	mov	r6, r0
 800a792:	460f      	mov	r7, r1
 800a794:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a798:	462b      	mov	r3, r5
 800a79a:	f7f5 fe9d 	bl	80004d8 <__aeabi_dmul>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	f7f5 fce1 	bl	800016c <__adddf3>
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	460f      	mov	r7, r1
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	f7f5 fcd9 	bl	800016c <__adddf3>
 800a7ba:	a33d      	add	r3, pc, #244	; (adr r3, 800a8b0 <__ieee754_pow+0x710>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	9c04      	ldr	r4, [sp, #16]
 800a7c2:	460d      	mov	r5, r1
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f7f5 fe87 	bl	80004d8 <__aeabi_dmul>
 800a7ca:	4642      	mov	r2, r8
 800a7cc:	464b      	mov	r3, r9
 800a7ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	f7f5 fcc7 	bl	8000168 <__aeabi_dsub>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	f7f5 fcc1 	bl	8000168 <__aeabi_dsub>
 800a7e6:	a334      	add	r3, pc, #208	; (adr r3, 800a8b8 <__ieee754_pow+0x718>)
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f7f5 fe74 	bl	80004d8 <__aeabi_dmul>
 800a7f0:	a333      	add	r3, pc, #204	; (adr r3, 800a8c0 <__ieee754_pow+0x720>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460f      	mov	r7, r1
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7f5 fe6b 	bl	80004d8 <__aeabi_dmul>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4630      	mov	r0, r6
 800a808:	4639      	mov	r1, r7
 800a80a:	f7f5 fcaf 	bl	800016c <__adddf3>
 800a80e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a810:	4b34      	ldr	r3, [pc, #208]	; (800a8e4 <__ieee754_pow+0x744>)
 800a812:	4413      	add	r3, r2
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	f7f5 fca8 	bl	800016c <__adddf3>
 800a81c:	4680      	mov	r8, r0
 800a81e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a820:	4689      	mov	r9, r1
 800a822:	f7f5 fdef 	bl	8000404 <__aeabi_i2d>
 800a826:	4604      	mov	r4, r0
 800a828:	460d      	mov	r5, r1
 800a82a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a82c:	4b2e      	ldr	r3, [pc, #184]	; (800a8e8 <__ieee754_pow+0x748>)
 800a82e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a832:	4413      	add	r3, r2
 800a834:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a838:	4642      	mov	r2, r8
 800a83a:	464b      	mov	r3, r9
 800a83c:	f7f5 fc96 	bl	800016c <__adddf3>
 800a840:	4632      	mov	r2, r6
 800a842:	463b      	mov	r3, r7
 800a844:	f7f5 fc92 	bl	800016c <__adddf3>
 800a848:	4622      	mov	r2, r4
 800a84a:	462b      	mov	r3, r5
 800a84c:	f7f5 fc8e 	bl	800016c <__adddf3>
 800a850:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a854:	4622      	mov	r2, r4
 800a856:	462b      	mov	r3, r5
 800a858:	4650      	mov	r0, sl
 800a85a:	468b      	mov	fp, r1
 800a85c:	f7f5 fc84 	bl	8000168 <__aeabi_dsub>
 800a860:	4632      	mov	r2, r6
 800a862:	463b      	mov	r3, r7
 800a864:	f7f5 fc80 	bl	8000168 <__aeabi_dsub>
 800a868:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a86c:	f7f5 fc7c 	bl	8000168 <__aeabi_dsub>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4640      	mov	r0, r8
 800a876:	4649      	mov	r1, r9
 800a878:	e608      	b.n	800a48c <__ieee754_pow+0x2ec>
 800a87a:	bf00      	nop
 800a87c:	f3af 8000 	nop.w
 800a880:	4a454eef 	.word	0x4a454eef
 800a884:	3fca7e28 	.word	0x3fca7e28
 800a888:	93c9db65 	.word	0x93c9db65
 800a88c:	3fcd864a 	.word	0x3fcd864a
 800a890:	a91d4101 	.word	0xa91d4101
 800a894:	3fd17460 	.word	0x3fd17460
 800a898:	518f264d 	.word	0x518f264d
 800a89c:	3fd55555 	.word	0x3fd55555
 800a8a0:	db6fabff 	.word	0xdb6fabff
 800a8a4:	3fdb6db6 	.word	0x3fdb6db6
 800a8a8:	33333303 	.word	0x33333303
 800a8ac:	3fe33333 	.word	0x3fe33333
 800a8b0:	e0000000 	.word	0xe0000000
 800a8b4:	3feec709 	.word	0x3feec709
 800a8b8:	dc3a03fd 	.word	0xdc3a03fd
 800a8bc:	3feec709 	.word	0x3feec709
 800a8c0:	145b01f5 	.word	0x145b01f5
 800a8c4:	be3e2fe0 	.word	0xbe3e2fe0
 800a8c8:	7ff00000 	.word	0x7ff00000
 800a8cc:	43400000 	.word	0x43400000
 800a8d0:	0003988e 	.word	0x0003988e
 800a8d4:	000bb679 	.word	0x000bb679
 800a8d8:	0800b610 	.word	0x0800b610
 800a8dc:	3ff00000 	.word	0x3ff00000
 800a8e0:	40080000 	.word	0x40080000
 800a8e4:	0800b630 	.word	0x0800b630
 800a8e8:	0800b620 	.word	0x0800b620
 800a8ec:	2601      	movs	r6, #1
 800a8ee:	e667      	b.n	800a5c0 <__ieee754_pow+0x420>
 800a8f0:	a39d      	add	r3, pc, #628	; (adr r3, 800ab68 <__ieee754_pow+0x9c8>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	f7f5 fc37 	bl	800016c <__adddf3>
 800a8fe:	4622      	mov	r2, r4
 800a900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a904:	462b      	mov	r3, r5
 800a906:	4650      	mov	r0, sl
 800a908:	4639      	mov	r1, r7
 800a90a:	f7f5 fc2d 	bl	8000168 <__aeabi_dsub>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a916:	f7f6 f86f 	bl	80009f8 <__aeabi_dcmpgt>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	f47f ae01 	bne.w	800a522 <__ieee754_pow+0x382>
 800a920:	4aa5      	ldr	r2, [pc, #660]	; (800abb8 <__ieee754_pow+0xa18>)
 800a922:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a926:	4293      	cmp	r3, r2
 800a928:	f340 8103 	ble.w	800ab32 <__ieee754_pow+0x992>
 800a92c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a930:	2000      	movs	r0, #0
 800a932:	151b      	asrs	r3, r3, #20
 800a934:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a938:	fa4a f303 	asr.w	r3, sl, r3
 800a93c:	4433      	add	r3, r6
 800a93e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a942:	4f9e      	ldr	r7, [pc, #632]	; (800abbc <__ieee754_pow+0xa1c>)
 800a944:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a948:	4117      	asrs	r7, r2
 800a94a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a94e:	ea23 0107 	bic.w	r1, r3, r7
 800a952:	f1c2 0214 	rsb	r2, r2, #20
 800a956:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a95a:	460b      	mov	r3, r1
 800a95c:	fa4a fa02 	asr.w	sl, sl, r2
 800a960:	2e00      	cmp	r6, #0
 800a962:	4602      	mov	r2, r0
 800a964:	4629      	mov	r1, r5
 800a966:	4620      	mov	r0, r4
 800a968:	bfb8      	it	lt
 800a96a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a96e:	f7f5 fbfb 	bl	8000168 <__aeabi_dsub>
 800a972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a97a:	2400      	movs	r4, #0
 800a97c:	4642      	mov	r2, r8
 800a97e:	464b      	mov	r3, r9
 800a980:	f7f5 fbf4 	bl	800016c <__adddf3>
 800a984:	a37a      	add	r3, pc, #488	; (adr r3, 800ab70 <__ieee754_pow+0x9d0>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	4620      	mov	r0, r4
 800a98c:	460d      	mov	r5, r1
 800a98e:	f7f5 fda3 	bl	80004d8 <__aeabi_dmul>
 800a992:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a996:	4606      	mov	r6, r0
 800a998:	460f      	mov	r7, r1
 800a99a:	4620      	mov	r0, r4
 800a99c:	4629      	mov	r1, r5
 800a99e:	f7f5 fbe3 	bl	8000168 <__aeabi_dsub>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	f7f5 fbdd 	bl	8000168 <__aeabi_dsub>
 800a9ae:	a372      	add	r3, pc, #456	; (adr r3, 800ab78 <__ieee754_pow+0x9d8>)
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	f7f5 fd90 	bl	80004d8 <__aeabi_dmul>
 800a9b8:	a371      	add	r3, pc, #452	; (adr r3, 800ab80 <__ieee754_pow+0x9e0>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	4680      	mov	r8, r0
 800a9c0:	4689      	mov	r9, r1
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	f7f5 fd87 	bl	80004d8 <__aeabi_dmul>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	f7f5 fbcb 	bl	800016c <__adddf3>
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	460d      	mov	r5, r1
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4630      	mov	r0, r6
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	f7f5 fbc3 	bl	800016c <__adddf3>
 800a9e6:	4632      	mov	r2, r6
 800a9e8:	463b      	mov	r3, r7
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	4689      	mov	r9, r1
 800a9ee:	f7f5 fbbb 	bl	8000168 <__aeabi_dsub>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	f7f5 fbb5 	bl	8000168 <__aeabi_dsub>
 800a9fe:	4642      	mov	r2, r8
 800aa00:	4606      	mov	r6, r0
 800aa02:	460f      	mov	r7, r1
 800aa04:	464b      	mov	r3, r9
 800aa06:	4640      	mov	r0, r8
 800aa08:	4649      	mov	r1, r9
 800aa0a:	f7f5 fd65 	bl	80004d8 <__aeabi_dmul>
 800aa0e:	a35e      	add	r3, pc, #376	; (adr r3, 800ab88 <__ieee754_pow+0x9e8>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	4604      	mov	r4, r0
 800aa16:	460d      	mov	r5, r1
 800aa18:	f7f5 fd5e 	bl	80004d8 <__aeabi_dmul>
 800aa1c:	a35c      	add	r3, pc, #368	; (adr r3, 800ab90 <__ieee754_pow+0x9f0>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fba1 	bl	8000168 <__aeabi_dsub>
 800aa26:	4622      	mov	r2, r4
 800aa28:	462b      	mov	r3, r5
 800aa2a:	f7f5 fd55 	bl	80004d8 <__aeabi_dmul>
 800aa2e:	a35a      	add	r3, pc, #360	; (adr r3, 800ab98 <__ieee754_pow+0x9f8>)
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	f7f5 fb9a 	bl	800016c <__adddf3>
 800aa38:	4622      	mov	r2, r4
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	f7f5 fd4c 	bl	80004d8 <__aeabi_dmul>
 800aa40:	a357      	add	r3, pc, #348	; (adr r3, 800aba0 <__ieee754_pow+0xa00>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f7f5 fb8f 	bl	8000168 <__aeabi_dsub>
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	462b      	mov	r3, r5
 800aa4e:	f7f5 fd43 	bl	80004d8 <__aeabi_dmul>
 800aa52:	a355      	add	r3, pc, #340	; (adr r3, 800aba8 <__ieee754_pow+0xa08>)
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	f7f5 fb88 	bl	800016c <__adddf3>
 800aa5c:	4622      	mov	r2, r4
 800aa5e:	462b      	mov	r3, r5
 800aa60:	f7f5 fd3a 	bl	80004d8 <__aeabi_dmul>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4640      	mov	r0, r8
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	f7f5 fb7c 	bl	8000168 <__aeabi_dsub>
 800aa70:	4604      	mov	r4, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	4640      	mov	r0, r8
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	f7f5 fd2c 	bl	80004d8 <__aeabi_dmul>
 800aa80:	2200      	movs	r2, #0
 800aa82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	f7f5 fb6b 	bl	8000168 <__aeabi_dsub>
 800aa92:	4602      	mov	r2, r0
 800aa94:	460b      	mov	r3, r1
 800aa96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa9a:	f7f5 fe47 	bl	800072c <__aeabi_ddiv>
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	460d      	mov	r5, r1
 800aaa4:	463b      	mov	r3, r7
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	4649      	mov	r1, r9
 800aaaa:	f7f5 fd15 	bl	80004d8 <__aeabi_dmul>
 800aaae:	4632      	mov	r2, r6
 800aab0:	463b      	mov	r3, r7
 800aab2:	f7f5 fb5b 	bl	800016c <__adddf3>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	4620      	mov	r0, r4
 800aabc:	4629      	mov	r1, r5
 800aabe:	f7f5 fb53 	bl	8000168 <__aeabi_dsub>
 800aac2:	4642      	mov	r2, r8
 800aac4:	464b      	mov	r3, r9
 800aac6:	f7f5 fb4f 	bl	8000168 <__aeabi_dsub>
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	2000      	movs	r0, #0
 800aad0:	493b      	ldr	r1, [pc, #236]	; (800abc0 <__ieee754_pow+0xa20>)
 800aad2:	f7f5 fb49 	bl	8000168 <__aeabi_dsub>
 800aad6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800aada:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aade:	da2b      	bge.n	800ab38 <__ieee754_pow+0x998>
 800aae0:	4652      	mov	r2, sl
 800aae2:	f000 f9b9 	bl	800ae58 <scalbn>
 800aae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aaea:	f7ff bbf2 	b.w	800a2d2 <__ieee754_pow+0x132>
 800aaee:	4b35      	ldr	r3, [pc, #212]	; (800abc4 <__ieee754_pow+0xa24>)
 800aaf0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800aaf4:	429f      	cmp	r7, r3
 800aaf6:	f77f af13 	ble.w	800a920 <__ieee754_pow+0x780>
 800aafa:	4b33      	ldr	r3, [pc, #204]	; (800abc8 <__ieee754_pow+0xa28>)
 800aafc:	440b      	add	r3, r1
 800aafe:	4303      	orrs	r3, r0
 800ab00:	d00b      	beq.n	800ab1a <__ieee754_pow+0x97a>
 800ab02:	a32b      	add	r3, pc, #172	; (adr r3, 800abb0 <__ieee754_pow+0xa10>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab0c:	f7f5 fce4 	bl	80004d8 <__aeabi_dmul>
 800ab10:	a327      	add	r3, pc, #156	; (adr r3, 800abb0 <__ieee754_pow+0xa10>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7ff bbdc 	b.w	800a2d2 <__ieee754_pow+0x132>
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	f7f5 fb23 	bl	8000168 <__aeabi_dsub>
 800ab22:	4642      	mov	r2, r8
 800ab24:	464b      	mov	r3, r9
 800ab26:	f7f5 ff5d 	bl	80009e4 <__aeabi_dcmpge>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	f43f aef8 	beq.w	800a920 <__ieee754_pow+0x780>
 800ab30:	e7e7      	b.n	800ab02 <__ieee754_pow+0x962>
 800ab32:	f04f 0a00 	mov.w	sl, #0
 800ab36:	e71e      	b.n	800a976 <__ieee754_pow+0x7d6>
 800ab38:	4621      	mov	r1, r4
 800ab3a:	e7d4      	b.n	800aae6 <__ieee754_pow+0x946>
 800ab3c:	f04f 0b00 	mov.w	fp, #0
 800ab40:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800abc0 <__ieee754_pow+0xa20>
 800ab44:	f7ff bbb0 	b.w	800a2a8 <__ieee754_pow+0x108>
 800ab48:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ab4c:	f7ff bbac 	b.w	800a2a8 <__ieee754_pow+0x108>
 800ab50:	4638      	mov	r0, r7
 800ab52:	4641      	mov	r1, r8
 800ab54:	f7ff bbbf 	b.w	800a2d6 <__ieee754_pow+0x136>
 800ab58:	9200      	str	r2, [sp, #0]
 800ab5a:	f7ff bb7f 	b.w	800a25c <__ieee754_pow+0xbc>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f7ff bb69 	b.w	800a236 <__ieee754_pow+0x96>
 800ab64:	f3af 8000 	nop.w
 800ab68:	652b82fe 	.word	0x652b82fe
 800ab6c:	3c971547 	.word	0x3c971547
 800ab70:	00000000 	.word	0x00000000
 800ab74:	3fe62e43 	.word	0x3fe62e43
 800ab78:	fefa39ef 	.word	0xfefa39ef
 800ab7c:	3fe62e42 	.word	0x3fe62e42
 800ab80:	0ca86c39 	.word	0x0ca86c39
 800ab84:	be205c61 	.word	0xbe205c61
 800ab88:	72bea4d0 	.word	0x72bea4d0
 800ab8c:	3e663769 	.word	0x3e663769
 800ab90:	c5d26bf1 	.word	0xc5d26bf1
 800ab94:	3ebbbd41 	.word	0x3ebbbd41
 800ab98:	af25de2c 	.word	0xaf25de2c
 800ab9c:	3f11566a 	.word	0x3f11566a
 800aba0:	16bebd93 	.word	0x16bebd93
 800aba4:	3f66c16c 	.word	0x3f66c16c
 800aba8:	5555553e 	.word	0x5555553e
 800abac:	3fc55555 	.word	0x3fc55555
 800abb0:	c2f8f359 	.word	0xc2f8f359
 800abb4:	01a56e1f 	.word	0x01a56e1f
 800abb8:	3fe00000 	.word	0x3fe00000
 800abbc:	000fffff 	.word	0x000fffff
 800abc0:	3ff00000 	.word	0x3ff00000
 800abc4:	4090cbff 	.word	0x4090cbff
 800abc8:	3f6f3400 	.word	0x3f6f3400

0800abcc <__ieee754_sqrt>:
 800abcc:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ad20 <__ieee754_sqrt+0x154>
 800abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	ea3c 0c01 	bics.w	ip, ip, r1
 800abd8:	460b      	mov	r3, r1
 800abda:	4606      	mov	r6, r0
 800abdc:	460d      	mov	r5, r1
 800abde:	460a      	mov	r2, r1
 800abe0:	4607      	mov	r7, r0
 800abe2:	4604      	mov	r4, r0
 800abe4:	d10e      	bne.n	800ac04 <__ieee754_sqrt+0x38>
 800abe6:	4602      	mov	r2, r0
 800abe8:	f7f5 fc76 	bl	80004d8 <__aeabi_dmul>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4630      	mov	r0, r6
 800abf2:	4629      	mov	r1, r5
 800abf4:	f7f5 faba 	bl	800016c <__adddf3>
 800abf8:	4606      	mov	r6, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	4630      	mov	r0, r6
 800abfe:	4629      	mov	r1, r5
 800ac00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac04:	2900      	cmp	r1, #0
 800ac06:	dc0d      	bgt.n	800ac24 <__ieee754_sqrt+0x58>
 800ac08:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ac0c:	ea5c 0707 	orrs.w	r7, ip, r7
 800ac10:	d0f4      	beq.n	800abfc <__ieee754_sqrt+0x30>
 800ac12:	b139      	cbz	r1, 800ac24 <__ieee754_sqrt+0x58>
 800ac14:	4602      	mov	r2, r0
 800ac16:	f7f5 faa7 	bl	8000168 <__aeabi_dsub>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	f7f5 fd85 	bl	800072c <__aeabi_ddiv>
 800ac22:	e7e9      	b.n	800abf8 <__ieee754_sqrt+0x2c>
 800ac24:	1512      	asrs	r2, r2, #20
 800ac26:	d074      	beq.n	800ad12 <__ieee754_sqrt+0x146>
 800ac28:	2000      	movs	r0, #0
 800ac2a:	07d5      	lsls	r5, r2, #31
 800ac2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac30:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ac34:	bf5e      	ittt	pl
 800ac36:	0fe3      	lsrpl	r3, r4, #31
 800ac38:	0064      	lslpl	r4, r4, #1
 800ac3a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ac3e:	0fe3      	lsrs	r3, r4, #31
 800ac40:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ac44:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ac48:	2516      	movs	r5, #22
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ac50:	1076      	asrs	r6, r6, #1
 800ac52:	0064      	lsls	r4, r4, #1
 800ac54:	188f      	adds	r7, r1, r2
 800ac56:	429f      	cmp	r7, r3
 800ac58:	bfde      	ittt	le
 800ac5a:	1bdb      	suble	r3, r3, r7
 800ac5c:	18b9      	addle	r1, r7, r2
 800ac5e:	1880      	addle	r0, r0, r2
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	3d01      	subs	r5, #1
 800ac64:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ac68:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ac6c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ac70:	d1f0      	bne.n	800ac54 <__ieee754_sqrt+0x88>
 800ac72:	462a      	mov	r2, r5
 800ac74:	f04f 0e20 	mov.w	lr, #32
 800ac78:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ac7c:	428b      	cmp	r3, r1
 800ac7e:	eb07 0c05 	add.w	ip, r7, r5
 800ac82:	dc02      	bgt.n	800ac8a <__ieee754_sqrt+0xbe>
 800ac84:	d113      	bne.n	800acae <__ieee754_sqrt+0xe2>
 800ac86:	45a4      	cmp	ip, r4
 800ac88:	d811      	bhi.n	800acae <__ieee754_sqrt+0xe2>
 800ac8a:	f1bc 0f00 	cmp.w	ip, #0
 800ac8e:	eb0c 0507 	add.w	r5, ip, r7
 800ac92:	da43      	bge.n	800ad1c <__ieee754_sqrt+0x150>
 800ac94:	2d00      	cmp	r5, #0
 800ac96:	db41      	blt.n	800ad1c <__ieee754_sqrt+0x150>
 800ac98:	f101 0801 	add.w	r8, r1, #1
 800ac9c:	1a5b      	subs	r3, r3, r1
 800ac9e:	4641      	mov	r1, r8
 800aca0:	45a4      	cmp	ip, r4
 800aca2:	bf88      	it	hi
 800aca4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800aca8:	eba4 040c 	sub.w	r4, r4, ip
 800acac:	443a      	add	r2, r7
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	f1be 0e01 	subs.w	lr, lr, #1
 800acb4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800acb8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800acbc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800acc0:	d1dc      	bne.n	800ac7c <__ieee754_sqrt+0xb0>
 800acc2:	4323      	orrs	r3, r4
 800acc4:	d006      	beq.n	800acd4 <__ieee754_sqrt+0x108>
 800acc6:	1c54      	adds	r4, r2, #1
 800acc8:	bf0b      	itete	eq
 800acca:	4672      	moveq	r2, lr
 800accc:	3201      	addne	r2, #1
 800acce:	3001      	addeq	r0, #1
 800acd0:	f022 0201 	bicne.w	r2, r2, #1
 800acd4:	1043      	asrs	r3, r0, #1
 800acd6:	07c1      	lsls	r1, r0, #31
 800acd8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800acdc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ace0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ace4:	bf48      	it	mi
 800ace6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800acea:	4610      	mov	r0, r2
 800acec:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800acf0:	e782      	b.n	800abf8 <__ieee754_sqrt+0x2c>
 800acf2:	0ae3      	lsrs	r3, r4, #11
 800acf4:	3915      	subs	r1, #21
 800acf6:	0564      	lsls	r4, r4, #21
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0fa      	beq.n	800acf2 <__ieee754_sqrt+0x126>
 800acfc:	02de      	lsls	r6, r3, #11
 800acfe:	d50a      	bpl.n	800ad16 <__ieee754_sqrt+0x14a>
 800ad00:	f1c2 0020 	rsb	r0, r2, #32
 800ad04:	fa24 f000 	lsr.w	r0, r4, r0
 800ad08:	1e55      	subs	r5, r2, #1
 800ad0a:	4094      	lsls	r4, r2
 800ad0c:	4303      	orrs	r3, r0
 800ad0e:	1b4a      	subs	r2, r1, r5
 800ad10:	e78a      	b.n	800ac28 <__ieee754_sqrt+0x5c>
 800ad12:	4611      	mov	r1, r2
 800ad14:	e7f0      	b.n	800acf8 <__ieee754_sqrt+0x12c>
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	3201      	adds	r2, #1
 800ad1a:	e7ef      	b.n	800acfc <__ieee754_sqrt+0x130>
 800ad1c:	4688      	mov	r8, r1
 800ad1e:	e7bd      	b.n	800ac9c <__ieee754_sqrt+0xd0>
 800ad20:	7ff00000 	.word	0x7ff00000

0800ad24 <fabs>:
 800ad24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad28:	4770      	bx	lr

0800ad2a <finite>:
 800ad2a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ad2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ad32:	0fc0      	lsrs	r0, r0, #31
 800ad34:	4770      	bx	lr
	...

0800ad38 <nan>:
 800ad38:	2000      	movs	r0, #0
 800ad3a:	4901      	ldr	r1, [pc, #4]	; (800ad40 <nan+0x8>)
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	7ff80000 	.word	0x7ff80000

0800ad44 <rint>:
 800ad44:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800ad48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad4a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800ad4e:	2f13      	cmp	r7, #19
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	460c      	mov	r4, r1
 800ad56:	4605      	mov	r5, r0
 800ad58:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800ad5c:	dc59      	bgt.n	800ae12 <rint+0xce>
 800ad5e:	2f00      	cmp	r7, #0
 800ad60:	da2a      	bge.n	800adb8 <rint+0x74>
 800ad62:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad66:	4301      	orrs	r1, r0
 800ad68:	d022      	beq.n	800adb0 <rint+0x6c>
 800ad6a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ad6e:	4301      	orrs	r1, r0
 800ad70:	424d      	negs	r5, r1
 800ad72:	430d      	orrs	r5, r1
 800ad74:	4936      	ldr	r1, [pc, #216]	; (800ae50 <rint+0x10c>)
 800ad76:	0c5c      	lsrs	r4, r3, #17
 800ad78:	0b2d      	lsrs	r5, r5, #12
 800ad7a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800ad7e:	0464      	lsls	r4, r4, #17
 800ad80:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ad84:	ea45 0304 	orr.w	r3, r5, r4
 800ad88:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	4629      	mov	r1, r5
 800ad90:	f7f5 f9ec 	bl	800016c <__adddf3>
 800ad94:	e9cd 0100 	strd	r0, r1, [sp]
 800ad98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad9c:	462b      	mov	r3, r5
 800ad9e:	4622      	mov	r2, r4
 800ada0:	f7f5 f9e2 	bl	8000168 <__aeabi_dsub>
 800ada4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ada8:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4610      	mov	r0, r2
 800adb2:	4619      	mov	r1, r3
 800adb4:	b003      	add	sp, #12
 800adb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adb8:	4926      	ldr	r1, [pc, #152]	; (800ae54 <rint+0x110>)
 800adba:	4139      	asrs	r1, r7
 800adbc:	ea03 0001 	and.w	r0, r3, r1
 800adc0:	4310      	orrs	r0, r2
 800adc2:	d0f5      	beq.n	800adb0 <rint+0x6c>
 800adc4:	084b      	lsrs	r3, r1, #1
 800adc6:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800adca:	ea52 0501 	orrs.w	r5, r2, r1
 800adce:	d00c      	beq.n	800adea <rint+0xa6>
 800add0:	ea24 0303 	bic.w	r3, r4, r3
 800add4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800add8:	2f13      	cmp	r7, #19
 800adda:	bf0c      	ite	eq
 800addc:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ade0:	2500      	movne	r5, #0
 800ade2:	fa44 f707 	asr.w	r7, r4, r7
 800ade6:	ea43 0407 	orr.w	r4, r3, r7
 800adea:	4919      	ldr	r1, [pc, #100]	; (800ae50 <rint+0x10c>)
 800adec:	4623      	mov	r3, r4
 800adee:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800adf2:	462a      	mov	r2, r5
 800adf4:	e9d6 4500 	ldrd	r4, r5, [r6]
 800adf8:	4620      	mov	r0, r4
 800adfa:	4629      	mov	r1, r5
 800adfc:	f7f5 f9b6 	bl	800016c <__adddf3>
 800ae00:	e9cd 0100 	strd	r0, r1, [sp]
 800ae04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae08:	4622      	mov	r2, r4
 800ae0a:	462b      	mov	r3, r5
 800ae0c:	f7f5 f9ac 	bl	8000168 <__aeabi_dsub>
 800ae10:	e7cc      	b.n	800adac <rint+0x68>
 800ae12:	2f33      	cmp	r7, #51	; 0x33
 800ae14:	dd05      	ble.n	800ae22 <rint+0xde>
 800ae16:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ae1a:	d1c9      	bne.n	800adb0 <rint+0x6c>
 800ae1c:	f7f5 f9a6 	bl	800016c <__adddf3>
 800ae20:	e7c4      	b.n	800adac <rint+0x68>
 800ae22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ae26:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800ae2a:	fa21 f10c 	lsr.w	r1, r1, ip
 800ae2e:	4208      	tst	r0, r1
 800ae30:	d0be      	beq.n	800adb0 <rint+0x6c>
 800ae32:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800ae36:	bf18      	it	ne
 800ae38:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800ae3c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800ae40:	bf1e      	ittt	ne
 800ae42:	ea20 0303 	bicne.w	r3, r0, r3
 800ae46:	fa45 fc0c 	asrne.w	ip, r5, ip
 800ae4a:	ea43 050c 	orrne.w	r5, r3, ip
 800ae4e:	e7cc      	b.n	800adea <rint+0xa6>
 800ae50:	0800b640 	.word	0x0800b640
 800ae54:	000fffff 	.word	0x000fffff

0800ae58 <scalbn>:
 800ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ae5e:	4604      	mov	r4, r0
 800ae60:	460d      	mov	r5, r1
 800ae62:	4617      	mov	r7, r2
 800ae64:	460b      	mov	r3, r1
 800ae66:	b996      	cbnz	r6, 800ae8e <scalbn+0x36>
 800ae68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae6c:	4303      	orrs	r3, r0
 800ae6e:	d039      	beq.n	800aee4 <scalbn+0x8c>
 800ae70:	4b35      	ldr	r3, [pc, #212]	; (800af48 <scalbn+0xf0>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	f7f5 fb30 	bl	80004d8 <__aeabi_dmul>
 800ae78:	4b34      	ldr	r3, [pc, #208]	; (800af4c <scalbn+0xf4>)
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	429f      	cmp	r7, r3
 800ae7e:	460d      	mov	r5, r1
 800ae80:	da0f      	bge.n	800aea2 <scalbn+0x4a>
 800ae82:	a32d      	add	r3, pc, #180	; (adr r3, 800af38 <scalbn+0xe0>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	f7f5 fb26 	bl	80004d8 <__aeabi_dmul>
 800ae8c:	e006      	b.n	800ae9c <scalbn+0x44>
 800ae8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ae92:	4296      	cmp	r6, r2
 800ae94:	d10a      	bne.n	800aeac <scalbn+0x54>
 800ae96:	4602      	mov	r2, r0
 800ae98:	f7f5 f968 	bl	800016c <__adddf3>
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	460d      	mov	r5, r1
 800aea0:	e020      	b.n	800aee4 <scalbn+0x8c>
 800aea2:	460b      	mov	r3, r1
 800aea4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aea8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800aeac:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800aeb0:	19b9      	adds	r1, r7, r6
 800aeb2:	4291      	cmp	r1, r2
 800aeb4:	dd0e      	ble.n	800aed4 <scalbn+0x7c>
 800aeb6:	a322      	add	r3, pc, #136	; (adr r3, 800af40 <scalbn+0xe8>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800aec0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800aec4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800aec8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800aecc:	4820      	ldr	r0, [pc, #128]	; (800af50 <scalbn+0xf8>)
 800aece:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800aed2:	e7d9      	b.n	800ae88 <scalbn+0x30>
 800aed4:	2900      	cmp	r1, #0
 800aed6:	dd08      	ble.n	800aeea <scalbn+0x92>
 800aed8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aedc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aee0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800aee4:	4620      	mov	r0, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeea:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800aeee:	da16      	bge.n	800af1e <scalbn+0xc6>
 800aef0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aef4:	429f      	cmp	r7, r3
 800aef6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800aefa:	dd08      	ble.n	800af0e <scalbn+0xb6>
 800aefc:	4c15      	ldr	r4, [pc, #84]	; (800af54 <scalbn+0xfc>)
 800aefe:	4814      	ldr	r0, [pc, #80]	; (800af50 <scalbn+0xf8>)
 800af00:	f363 74df 	bfi	r4, r3, #31, #1
 800af04:	a30e      	add	r3, pc, #56	; (adr r3, 800af40 <scalbn+0xe8>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	4621      	mov	r1, r4
 800af0c:	e7bc      	b.n	800ae88 <scalbn+0x30>
 800af0e:	4c12      	ldr	r4, [pc, #72]	; (800af58 <scalbn+0x100>)
 800af10:	4812      	ldr	r0, [pc, #72]	; (800af5c <scalbn+0x104>)
 800af12:	f363 74df 	bfi	r4, r3, #31, #1
 800af16:	a308      	add	r3, pc, #32	; (adr r3, 800af38 <scalbn+0xe0>)
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	e7f5      	b.n	800af0a <scalbn+0xb2>
 800af1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af22:	3136      	adds	r1, #54	; 0x36
 800af24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af28:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800af2c:	4620      	mov	r0, r4
 800af2e:	4629      	mov	r1, r5
 800af30:	2200      	movs	r2, #0
 800af32:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <scalbn+0x108>)
 800af34:	e7a8      	b.n	800ae88 <scalbn+0x30>
 800af36:	bf00      	nop
 800af38:	c2f8f359 	.word	0xc2f8f359
 800af3c:	01a56e1f 	.word	0x01a56e1f
 800af40:	8800759c 	.word	0x8800759c
 800af44:	7e37e43c 	.word	0x7e37e43c
 800af48:	43500000 	.word	0x43500000
 800af4c:	ffff3cb0 	.word	0xffff3cb0
 800af50:	8800759c 	.word	0x8800759c
 800af54:	7e37e43c 	.word	0x7e37e43c
 800af58:	01a56e1f 	.word	0x01a56e1f
 800af5c:	c2f8f359 	.word	0xc2f8f359
 800af60:	3c900000 	.word	0x3c900000

0800af64 <_init>:
 800af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af66:	bf00      	nop
 800af68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af6a:	bc08      	pop	{r3}
 800af6c:	469e      	mov	lr, r3
 800af6e:	4770      	bx	lr

0800af70 <_fini>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	bf00      	nop
 800af74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af76:	bc08      	pop	{r3}
 800af78:	469e      	mov	lr, r3
 800af7a:	4770      	bx	lr
