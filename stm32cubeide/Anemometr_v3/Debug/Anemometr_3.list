
Anemometr_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  080087d0  080087d0  000187d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ae8  08008ae8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008ae8  08008ae8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ae8  08008ae8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae8  08008ae8  00018ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aec  08008aec  00018aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc8  20000078  08008b64  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  08008b64  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160d4  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dab  00000000  00000000  00036171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00038f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001220  00000000  00000000  0003a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2b7  00000000  00000000  0003b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c6d  00000000  00000000  000556f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094db8  00000000  00000000  0006b364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010011c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a60  00000000  00000000  00100170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080087b4 	.word	0x080087b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080087b4 	.word	0x080087b4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_frsub>:
 8000a78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a7c:	e002      	b.n	8000a84 <__addsf3>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_fsub>:
 8000a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a84 <__addsf3>:
 8000a84:	0042      	lsls	r2, r0, #1
 8000a86:	bf1f      	itttt	ne
 8000a88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a8c:	ea92 0f03 	teqne	r2, r3
 8000a90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a98:	d06a      	beq.n	8000b70 <__addsf3+0xec>
 8000a9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aa2:	bfc1      	itttt	gt
 8000aa4:	18d2      	addgt	r2, r2, r3
 8000aa6:	4041      	eorgt	r1, r0
 8000aa8:	4048      	eorgt	r0, r1
 8000aaa:	4041      	eorgt	r1, r0
 8000aac:	bfb8      	it	lt
 8000aae:	425b      	neglt	r3, r3
 8000ab0:	2b19      	cmp	r3, #25
 8000ab2:	bf88      	it	hi
 8000ab4:	4770      	bxhi	lr
 8000ab6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000abe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ace:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4249      	negne	r1, r1
 8000ad6:	ea92 0f03 	teq	r2, r3
 8000ada:	d03f      	beq.n	8000b5c <__addsf3+0xd8>
 8000adc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ae0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ae4:	eb10 000c 	adds.w	r0, r0, ip
 8000ae8:	f1c3 0320 	rsb	r3, r3, #32
 8000aec:	fa01 f103 	lsl.w	r1, r1, r3
 8000af0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af4:	d502      	bpl.n	8000afc <__addsf3+0x78>
 8000af6:	4249      	negs	r1, r1
 8000af8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000afc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b00:	d313      	bcc.n	8000b2a <__addsf3+0xa6>
 8000b02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b06:	d306      	bcc.n	8000b16 <__addsf3+0x92>
 8000b08:	0840      	lsrs	r0, r0, #1
 8000b0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b0e:	f102 0201 	add.w	r2, r2, #1
 8000b12:	2afe      	cmp	r2, #254	; 0xfe
 8000b14:	d251      	bcs.n	8000bba <__addsf3+0x136>
 8000b16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1e:	bf08      	it	eq
 8000b20:	f020 0001 	biceq.w	r0, r0, #1
 8000b24:	ea40 0003 	orr.w	r0, r0, r3
 8000b28:	4770      	bx	lr
 8000b2a:	0049      	lsls	r1, r1, #1
 8000b2c:	eb40 0000 	adc.w	r0, r0, r0
 8000b30:	3a01      	subs	r2, #1
 8000b32:	bf28      	it	cs
 8000b34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b38:	d2ed      	bcs.n	8000b16 <__addsf3+0x92>
 8000b3a:	fab0 fc80 	clz	ip, r0
 8000b3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b42:	ebb2 020c 	subs.w	r2, r2, ip
 8000b46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b4a:	bfaa      	itet	ge
 8000b4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b50:	4252      	neglt	r2, r2
 8000b52:	4318      	orrge	r0, r3
 8000b54:	bfbc      	itt	lt
 8000b56:	40d0      	lsrlt	r0, r2
 8000b58:	4318      	orrlt	r0, r3
 8000b5a:	4770      	bx	lr
 8000b5c:	f092 0f00 	teq	r2, #0
 8000b60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b64:	bf06      	itte	eq
 8000b66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b6a:	3201      	addeq	r2, #1
 8000b6c:	3b01      	subne	r3, #1
 8000b6e:	e7b5      	b.n	8000adc <__addsf3+0x58>
 8000b70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b78:	bf18      	it	ne
 8000b7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7e:	d021      	beq.n	8000bc4 <__addsf3+0x140>
 8000b80:	ea92 0f03 	teq	r2, r3
 8000b84:	d004      	beq.n	8000b90 <__addsf3+0x10c>
 8000b86:	f092 0f00 	teq	r2, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	4608      	moveq	r0, r1
 8000b8e:	4770      	bx	lr
 8000b90:	ea90 0f01 	teq	r0, r1
 8000b94:	bf1c      	itt	ne
 8000b96:	2000      	movne	r0, #0
 8000b98:	4770      	bxne	lr
 8000b9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b9e:	d104      	bne.n	8000baa <__addsf3+0x126>
 8000ba0:	0040      	lsls	r0, r0, #1
 8000ba2:	bf28      	it	cs
 8000ba4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ba8:	4770      	bx	lr
 8000baa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bae:	bf3c      	itt	cc
 8000bb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bxcc	lr
 8000bb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	4770      	bx	lr
 8000bc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bc8:	bf16      	itet	ne
 8000bca:	4608      	movne	r0, r1
 8000bcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bd0:	4601      	movne	r1, r0
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	bf06      	itte	eq
 8000bd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bda:	ea90 0f01 	teqeq	r0, r1
 8000bde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000be2:	4770      	bx	lr

08000be4 <__aeabi_ui2f>:
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e004      	b.n	8000bf4 <__aeabi_i2f+0x8>
 8000bea:	bf00      	nop

08000bec <__aeabi_i2f>:
 8000bec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	bf48      	it	mi
 8000bf2:	4240      	negmi	r0, r0
 8000bf4:	ea5f 0c00 	movs.w	ip, r0
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c00:	4601      	mov	r1, r0
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	e01c      	b.n	8000c42 <__aeabi_l2f+0x2a>

08000c08 <__aeabi_ul2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	e00a      	b.n	8000c2c <__aeabi_l2f+0x14>
 8000c16:	bf00      	nop

08000c18 <__aeabi_l2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__aeabi_l2f+0x14>
 8000c26:	4240      	negs	r0, r0
 8000c28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2c:	ea5f 0c01 	movs.w	ip, r1
 8000c30:	bf02      	ittt	eq
 8000c32:	4684      	moveq	ip, r0
 8000c34:	4601      	moveq	r1, r0
 8000c36:	2000      	moveq	r0, #0
 8000c38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c3c:	bf08      	it	eq
 8000c3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c46:	fabc f28c 	clz	r2, ip
 8000c4a:	3a08      	subs	r2, #8
 8000c4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c50:	db10      	blt.n	8000c74 <__aeabi_l2f+0x5c>
 8000c52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c56:	4463      	add	r3, ip
 8000c58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5c:	f1c2 0220 	rsb	r2, r2, #32
 8000c60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c64:	fa20 f202 	lsr.w	r2, r0, r2
 8000c68:	eb43 0002 	adc.w	r0, r3, r2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f102 0220 	add.w	r2, r2, #32
 8000c78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7c:	f1c2 0220 	rsb	r2, r2, #32
 8000c80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c84:	fa21 f202 	lsr.w	r2, r1, r2
 8000c88:	eb43 0002 	adc.w	r0, r3, r2
 8000c8c:	bf08      	it	eq
 8000c8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_fmul>:
 8000c94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ca2:	ea92 0f0c 	teqne	r2, ip
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d06f      	beq.n	8000d8c <__aeabi_fmul+0xf8>
 8000cac:	441a      	add	r2, r3
 8000cae:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb2:	0240      	lsls	r0, r0, #9
 8000cb4:	bf18      	it	ne
 8000cb6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cba:	d01e      	beq.n	8000cfa <__aeabi_fmul+0x66>
 8000cbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ccc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cd4:	bf3e      	ittt	cc
 8000cd6:	0049      	lslcc	r1, r1, #1
 8000cd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	ea40 0001 	orr.w	r0, r0, r1
 8000ce2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ce6:	2afd      	cmp	r2, #253	; 0xfd
 8000ce8:	d81d      	bhi.n	8000d26 <__aeabi_fmul+0x92>
 8000cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf2:	bf08      	it	eq
 8000cf4:	f020 0001 	biceq.w	r0, r0, #1
 8000cf8:	4770      	bx	lr
 8000cfa:	f090 0f00 	teq	r0, #0
 8000cfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d02:	bf08      	it	eq
 8000d04:	0249      	lsleq	r1, r1, #9
 8000d06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d0e:	3a7f      	subs	r2, #127	; 0x7f
 8000d10:	bfc2      	ittt	gt
 8000d12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1a:	4770      	bxgt	lr
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	3a01      	subs	r2, #1
 8000d26:	dc5d      	bgt.n	8000de4 <__aeabi_fmul+0x150>
 8000d28:	f112 0f19 	cmn.w	r2, #25
 8000d2c:	bfdc      	itt	le
 8000d2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d32:	4770      	bxle	lr
 8000d34:	f1c2 0200 	rsb	r2, r2, #0
 8000d38:	0041      	lsls	r1, r0, #1
 8000d3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d3e:	f1c2 0220 	rsb	r2, r2, #32
 8000d42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d4a:	f140 0000 	adc.w	r0, r0, #0
 8000d4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d52:	bf08      	it	eq
 8000d54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d58:	4770      	bx	lr
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fmul+0xce>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fmul+0xe6>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e78f      	b.n	8000cac <__aeabi_fmul+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	bf18      	it	ne
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d00a      	beq.n	8000db2 <__aeabi_fmul+0x11e>
 8000d9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000da0:	bf18      	it	ne
 8000da2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da6:	d1d8      	bne.n	8000d5a <__aeabi_fmul+0xc6>
 8000da8:	ea80 0001 	eor.w	r0, r0, r1
 8000dac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f090 0f00 	teq	r0, #0
 8000db6:	bf17      	itett	ne
 8000db8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	f091 0f00 	teqne	r1, #0
 8000dc2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dc6:	d014      	beq.n	8000df2 <__aeabi_fmul+0x15e>
 8000dc8:	ea92 0f0c 	teq	r2, ip
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_fmul+0x13e>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d10f      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000dd2:	ea93 0f0c 	teq	r3, ip
 8000dd6:	d103      	bne.n	8000de0 <__aeabi_fmul+0x14c>
 8000dd8:	024b      	lsls	r3, r1, #9
 8000dda:	bf18      	it	ne
 8000ddc:	4608      	movne	r0, r1
 8000dde:	d108      	bne.n	8000df2 <__aeabi_fmul+0x15e>
 8000de0:	ea80 0001 	eor.w	r0, r0, r1
 8000de4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	4770      	bx	lr
 8000df2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_fdiv>:
 8000dfc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e04:	bf1e      	ittt	ne
 8000e06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e0a:	ea92 0f0c 	teqne	r2, ip
 8000e0e:	ea93 0f0c 	teqne	r3, ip
 8000e12:	d069      	beq.n	8000ee8 <__aeabi_fdiv+0xec>
 8000e14:	eba2 0203 	sub.w	r2, r2, r3
 8000e18:	ea80 0c01 	eor.w	ip, r0, r1
 8000e1c:	0249      	lsls	r1, r1, #9
 8000e1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e22:	d037      	beq.n	8000e94 <__aeabi_fdiv+0x98>
 8000e24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf38      	it	cc
 8000e38:	005b      	lslcc	r3, r3, #1
 8000e3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e42:	428b      	cmp	r3, r1
 8000e44:	bf24      	itt	cs
 8000e46:	1a5b      	subcs	r3, r3, r1
 8000e48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e50:	bf24      	itt	cs
 8000e52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e5e:	bf24      	itt	cs
 8000e60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	bf18      	it	ne
 8000e7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e7e:	d1e0      	bne.n	8000e42 <__aeabi_fdiv+0x46>
 8000e80:	2afd      	cmp	r2, #253	; 0xfd
 8000e82:	f63f af50 	bhi.w	8000d26 <__aeabi_fmul+0x92>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9c:	327f      	adds	r2, #127	; 0x7f
 8000e9e:	bfc2      	ittt	gt
 8000ea0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ea4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea8:	4770      	bxgt	lr
 8000eaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	3a01      	subs	r2, #1
 8000eb4:	e737      	b.n	8000d26 <__aeabi_fmul+0x92>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0040      	lsleq	r0, r0, #1
 8000ec2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ec6:	3a01      	subeq	r2, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fdiv+0xc2>
 8000eca:	ea40 000c 	orr.w	r0, r0, ip
 8000ece:	f093 0f00 	teq	r3, #0
 8000ed2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed6:	bf02      	ittt	eq
 8000ed8:	0049      	lsleq	r1, r1, #1
 8000eda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ede:	3b01      	subeq	r3, #1
 8000ee0:	d0f9      	beq.n	8000ed6 <__aeabi_fdiv+0xda>
 8000ee2:	ea41 010c 	orr.w	r1, r1, ip
 8000ee6:	e795      	b.n	8000e14 <__aeabi_fdiv+0x18>
 8000ee8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eec:	ea92 0f0c 	teq	r2, ip
 8000ef0:	d108      	bne.n	8000f04 <__aeabi_fdiv+0x108>
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	f47f af7d 	bne.w	8000df2 <__aeabi_fmul+0x15e>
 8000ef8:	ea93 0f0c 	teq	r3, ip
 8000efc:	f47f af70 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e776      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	d104      	bne.n	8000f14 <__aeabi_fdiv+0x118>
 8000f0a:	024b      	lsls	r3, r1, #9
 8000f0c:	f43f af4c 	beq.w	8000da8 <__aeabi_fmul+0x114>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e76e      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	d1ca      	bne.n	8000eb6 <__aeabi_fdiv+0xba>
 8000f20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f24:	f47f af5c 	bne.w	8000de0 <__aeabi_fmul+0x14c>
 8000f28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f2c:	f47f af3c 	bne.w	8000da8 <__aeabi_fmul+0x114>
 8000f30:	e75f      	b.n	8000df2 <__aeabi_fmul+0x15e>
 8000f32:	bf00      	nop

08000f34 <__gesf2>:
 8000f34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f38:	e006      	b.n	8000f48 <__cmpsf2+0x4>
 8000f3a:	bf00      	nop

08000f3c <__lesf2>:
 8000f3c:	f04f 0c01 	mov.w	ip, #1
 8000f40:	e002      	b.n	8000f48 <__cmpsf2+0x4>
 8000f42:	bf00      	nop

08000f44 <__cmpsf2>:
 8000f44:	f04f 0c01 	mov.w	ip, #1
 8000f48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f58:	bf18      	it	ne
 8000f5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f5e:	d011      	beq.n	8000f84 <__cmpsf2+0x40>
 8000f60:	b001      	add	sp, #4
 8000f62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f66:	bf18      	it	ne
 8000f68:	ea90 0f01 	teqne	r0, r1
 8000f6c:	bf58      	it	pl
 8000f6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f72:	bf88      	it	hi
 8000f74:	17c8      	asrhi	r0, r1, #31
 8000f76:	bf38      	it	cc
 8000f78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f7c:	bf18      	it	ne
 8000f7e:	f040 0001 	orrne.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	d102      	bne.n	8000f90 <__cmpsf2+0x4c>
 8000f8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f8e:	d105      	bne.n	8000f9c <__cmpsf2+0x58>
 8000f90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f94:	d1e4      	bne.n	8000f60 <__cmpsf2+0x1c>
 8000f96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f9a:	d0e1      	beq.n	8000f60 <__cmpsf2+0x1c>
 8000f9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_cfrcmple>:
 8000fa4:	4684      	mov	ip, r0
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	4661      	mov	r1, ip
 8000faa:	e7ff      	b.n	8000fac <__aeabi_cfcmpeq>

08000fac <__aeabi_cfcmpeq>:
 8000fac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fae:	f7ff ffc9 	bl	8000f44 <__cmpsf2>
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	bf48      	it	mi
 8000fb6:	f110 0f00 	cmnmi.w	r0, #0
 8000fba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fbc <__aeabi_fcmpeq>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff fff4 	bl	8000fac <__aeabi_cfcmpeq>
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2001      	moveq	r0, #1
 8000fc8:	2000      	movne	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmplt>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffea 	bl	8000fac <__aeabi_cfcmpeq>
 8000fd8:	bf34      	ite	cc
 8000fda:	2001      	movcc	r0, #1
 8000fdc:	2000      	movcs	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmple>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffe0 	bl	8000fac <__aeabi_cfcmpeq>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpge>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffd2 	bl	8000fa4 <__aeabi_cfrcmple>
 8001000:	bf94      	ite	ls
 8001002:	2001      	movls	r0, #1
 8001004:	2000      	movhi	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_fcmpgt>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff ffc8 	bl	8000fa4 <__aeabi_cfrcmple>
 8001014:	bf34      	ite	cc
 8001016:	2001      	movcc	r0, #1
 8001018:	2000      	movcs	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_f2iz>:
 8001020:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001024:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001028:	d30f      	bcc.n	800104a <__aeabi_f2iz+0x2a>
 800102a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001032:	d90d      	bls.n	8001050 <__aeabi_f2iz+0x30>
 8001034:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800103c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	bf18      	it	ne
 8001046:	4240      	negne	r0, r0
 8001048:	4770      	bx	lr
 800104a:	f04f 0000 	mov.w	r0, #0
 800104e:	4770      	bx	lr
 8001050:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001054:	d101      	bne.n	800105a <__aeabi_f2iz+0x3a>
 8001056:	0242      	lsls	r2, r0, #9
 8001058:	d105      	bne.n	8001066 <__aeabi_f2iz+0x46>
 800105a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105e:	bf08      	it	eq
 8001060:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001064:	4770      	bx	lr
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	4770      	bx	lr

0800106c <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <DHCP_time_handler+0x18>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a03      	ldr	r2, [pc, #12]	; (8001084 <DHCP_time_handler+0x18>)
 8001078:	6013      	str	r3, [r2, #0]
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000094 	.word	0x20000094

08001088 <rwFlash>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void rwFlash(uint8_t rwFlag) {
 8001088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800108c:	b094      	sub	sp, #80	; 0x50
 800108e:	af06      	add	r7, sp, #24
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
	uint32_t pageAdr = 0x800FC00; //.
 8001094:	4b8b      	ldr	r3, [pc, #556]	; (80012c4 <rwFlash+0x23c>)
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t magicKey;
	uint64_t dataForSave;
	magicKey = *(__IO uint32_t*) pageAdr;
 8001098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 800109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a0:	4a89      	ldr	r2, [pc, #548]	; (80012c8 <rwFlash+0x240>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d103      	bne.n	80010ae <rwFlash+0x26>
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 8121 	bne.w	80012f0 <rwFlash+0x268>
		magicKey = 0x12349876;
 80010ae:	4b86      	ldr	r3, [pc, #536]	; (80012c8 <rwFlash+0x240>)
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
		if (rwFlag == 0) { // For first initial
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d117      	bne.n	80010e8 <rwFlash+0x60>
			C_13 = CALIBRATE_START;
 80010b8:	4b84      	ldr	r3, [pc, #528]	; (80012cc <rwFlash+0x244>)
 80010ba:	f649 4240 	movw	r2, #40000	; 0x9c40
 80010be:	801a      	strh	r2, [r3, #0]
			C_24 = CALIBRATE_START;
 80010c0:	4b83      	ldr	r3, [pc, #524]	; (80012d0 <rwFlash+0x248>)
 80010c2:	f649 4240 	movw	r2, #40000	; 0x9c40
 80010c6:	801a      	strh	r2, [r3, #0]
			DX1.f = 1;
 80010c8:	4b82      	ldr	r3, [pc, #520]	; (80012d4 <rwFlash+0x24c>)
 80010ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ce:	601a      	str	r2, [r3, #0]
			DX2.f = 1;
 80010d0:	4b81      	ldr	r3, [pc, #516]	; (80012d8 <rwFlash+0x250>)
 80010d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010d6:	601a      	str	r2, [r3, #0]
			DY1.f = 1;
 80010d8:	4b80      	ldr	r3, [pc, #512]	; (80012dc <rwFlash+0x254>)
 80010da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010de:	601a      	str	r2, [r3, #0]
			DY2.f = 1;
 80010e0:	4b7f      	ldr	r3, [pc, #508]	; (80012e0 <rwFlash+0x258>)
 80010e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010e6:	601a      	str	r2, [r3, #0]
		}
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.PageAddress = pageAdr; //
 80010f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f2:	623b      	str	r3, [r7, #32]
		EraseInitStruct.NbPages     = 1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24

		flash_ok = HAL_ERROR;
 80010f8:	4b7a      	ldr	r3, [pc, #488]	; (80012e4 <rwFlash+0x25c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
		// Unlock flash
		while(flash_ok != HAL_OK) {
 80010fe:	e005      	b.n	800110c <rwFlash+0x84>
		  flash_ok = HAL_FLASH_Unlock();
 8001100:	f002 fc0c 	bl	800391c <HAL_FLASH_Unlock>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <rwFlash+0x25c>)
 800110a:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK) {
 800110c:	4b75      	ldr	r3, [pc, #468]	; (80012e4 <rwFlash+0x25c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f5      	bne.n	8001100 <rwFlash+0x78>
		}
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 8001114:	f107 0214 	add.w	r2, r7, #20
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fce4 	bl	8003aec <HAL_FLASHEx_Erase>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 80bd 	bne.w	80012a6 <rwFlash+0x21e>
			dataForSave = (uint64_t) magicKey;
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	461a      	mov	r2, r3
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 8001138:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <rwFlash+0x25c>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800113e:	e009      	b.n	8001154 <rwFlash+0xcc>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr, dataForSave); // Write  magic key
 8001140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001144:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001146:	2003      	movs	r0, #3
 8001148:	f002 fb78 	bl	800383c <HAL_FLASH_Program>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b64      	ldr	r3, [pc, #400]	; (80012e4 <rwFlash+0x25c>)
 8001152:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001154:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <rwFlash+0x25c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f1      	bne.n	8001140 <rwFlash+0xb8>
			}
			dataForSave = (uint64_t) (C_13 | ((uint64_t) C_24 << 16) | ((uint64_t) C_31 << 32) | ((uint64_t) C_42 << 48));
 800115c:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <rwFlash+0x244>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b29a      	uxth	r2, r3
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	495a      	ldr	r1, [pc, #360]	; (80012d0 <rwFlash+0x248>)
 8001168:	8809      	ldrh	r1, [r1, #0]
 800116a:	b288      	uxth	r0, r1
 800116c:	f04f 0100 	mov.w	r1, #0
 8001170:	ea4f 4b10 	mov.w	fp, r0, lsr #16
 8001174:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8001178:	ea42 080a 	orr.w	r8, r2, sl
 800117c:	ea43 090b 	orr.w	r9, r3, fp
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <rwFlash+0x260>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b298      	uxth	r0, r3
 8001186:	f04f 0100 	mov.w	r1, #0
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	0003      	movs	r3, r0
 8001194:	2200      	movs	r2, #0
 8001196:	ea48 0402 	orr.w	r4, r8, r2
 800119a:	ea49 0503 	orr.w	r5, r9, r3
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <rwFlash+0x264>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b298      	uxth	r0, r3
 80011a4:	f04f 0100 	mov.w	r1, #0
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	0403      	lsls	r3, r0, #16
 80011b2:	2200      	movs	r2, #0
 80011b4:	ea44 0102 	orr.w	r1, r4, r2
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	432b      	orrs	r3, r5
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011c2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			flash_ok = HAL_ERROR;
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <rwFlash+0x25c>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011cc:	e00b      	b.n	80011e6 <rwFlash+0x15e>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, pageAdr + 16, dataForSave); // Write C_12 C_34 C_14 C_23
 80011ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d0:	f103 0110 	add.w	r1, r3, #16
 80011d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80011d8:	2003      	movs	r0, #3
 80011da:	f002 fb2f 	bl	800383c <HAL_FLASH_Program>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <rwFlash+0x25c>)
 80011e4:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <rwFlash+0x25c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ef      	bne.n	80011ce <rwFlash+0x146>
			}
			flash_ok = HAL_ERROR;
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <rwFlash+0x25c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 80011f4:	e00e      	b.n	8001214 <rwFlash+0x18c>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 24, DX1.u); // Write DX1
 80011f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f8:	f103 0118 	add.w	r1, r3, #24
 80011fc:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <rwFlash+0x24c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	2002      	movs	r0, #2
 8001208:	f002 fb18 	bl	800383c <HAL_FLASH_Program>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <rwFlash+0x25c>)
 8001212:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <rwFlash+0x25c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1ec      	bne.n	80011f6 <rwFlash+0x16e>
			}
			flash_ok = HAL_ERROR;
 800121c:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <rwFlash+0x25c>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001222:	e00e      	b.n	8001242 <rwFlash+0x1ba>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 28, DX2.u); // Write DX2
 8001224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001226:	f103 011c 	add.w	r1, r3, #28
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <rwFlash+0x250>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	2002      	movs	r0, #2
 8001236:	f002 fb01 	bl	800383c <HAL_FLASH_Program>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <rwFlash+0x25c>)
 8001240:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <rwFlash+0x25c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ec      	bne.n	8001224 <rwFlash+0x19c>
			}
			flash_ok = HAL_ERROR;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <rwFlash+0x25c>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001250:	e00e      	b.n	8001270 <rwFlash+0x1e8>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 32, DY1.u); // Write DY1
 8001252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001254:	f103 0120 	add.w	r1, r3, #32
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <rwFlash+0x254>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	f04f 0300 	mov.w	r3, #0
 8001262:	2002      	movs	r0, #2
 8001264:	f002 faea 	bl	800383c <HAL_FLASH_Program>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <rwFlash+0x25c>)
 800126e:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <rwFlash+0x25c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ec      	bne.n	8001252 <rwFlash+0x1ca>
			}
			flash_ok = HAL_ERROR;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <rwFlash+0x25c>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800127e:	e00e      	b.n	800129e <rwFlash+0x216>
				flash_ok = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, pageAdr + 36, DY2.u); // Write DY2
 8001280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001282:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <rwFlash+0x258>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	2002      	movs	r0, #2
 8001292:	f002 fad3 	bl	800383c <HAL_FLASH_Program>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <rwFlash+0x25c>)
 800129c:	701a      	strb	r2, [r3, #0]
			while(flash_ok != HAL_OK){
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <rwFlash+0x25c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1ec      	bne.n	8001280 <rwFlash+0x1f8>
			}
		}
		// Lock flash
		flash_ok = HAL_ERROR;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <rwFlash+0x25c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 80012ac:	e005      	b.n	80012ba <rwFlash+0x232>
			flash_ok = HAL_FLASH_Lock();
 80012ae:	f002 fb5b 	bl	8003968 <HAL_FLASH_Lock>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <rwFlash+0x25c>)
 80012b8:	701a      	strb	r2, [r3, #0]
		while(flash_ok != HAL_OK){
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <rwFlash+0x25c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f5      	bne.n	80012ae <rwFlash+0x226>
	if ((magicKey != 0x12349876) || (rwFlag == 1)) { // rwFlag == 1 for wrtite data to flash
 80012c2:	e095      	b.n	80013f0 <rwFlash+0x368>
 80012c4:	0800fc00 	.word	0x0800fc00
 80012c8:	12349876 	.word	0x12349876
 80012cc:	20000588 	.word	0x20000588
 80012d0:	200001cc 	.word	0x200001cc
 80012d4:	20000180 	.word	0x20000180
 80012d8:	2000021c 	.word	0x2000021c
 80012dc:	20000190 	.word	0x20000190
 80012e0:	200001d0 	.word	0x200001d0
 80012e4:	20000c04 	.word	0x20000c04
 80012e8:	200003e6 	.word	0x200003e6
 80012ec:	20000194 	.word	0x20000194
		}
	} else {
		/* Задержки измерения в каналах */
		C_13 = *(__IO uint16_t*) (pageAdr + 16);
 80012f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f2:	3310      	adds	r3, #16
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b40      	ldr	r3, [pc, #256]	; (80013fc <rwFlash+0x374>)
 80012fa:	801a      	strh	r2, [r3, #0]
		C_24 = *(__IO uint16_t*) (pageAdr + 18);
 80012fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fe:	3312      	adds	r3, #18
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <rwFlash+0x378>)
 8001306:	801a      	strh	r2, [r3, #0]
		C_31 = *(__IO uint16_t*) (pageAdr + 20);
 8001308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130a:	3314      	adds	r3, #20
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <rwFlash+0x37c>)
 8001312:	801a      	strh	r2, [r3, #0]
		C_42 = *(__IO uint16_t*) (pageAdr + 22);
 8001314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001316:	3316      	adds	r3, #22
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <rwFlash+0x380>)
 800131e:	801a      	strh	r2, [r3, #0]
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8001320:	22c8      	movs	r2, #200	; 0xc8
 8001322:	2100      	movs	r1, #0
 8001324:	4839      	ldr	r0, [pc, #228]	; (800140c <rwFlash+0x384>)
 8001326:	f005 fbcf 	bl	8006ac8 <memset>
		sprintf(SndBuffer, "C_13: %5d, C_24: %5d, C_31: %5d, C_42: %5d\r\n", C_13, C_24, C_31, C_42);
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <rwFlash+0x374>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4b33      	ldr	r3, [pc, #204]	; (8001400 <rwFlash+0x378>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	4b33      	ldr	r3, [pc, #204]	; (8001404 <rwFlash+0x37c>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <rwFlash+0x380>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	9200      	str	r2, [sp, #0]
 8001344:	4603      	mov	r3, r0
 8001346:	460a      	mov	r2, r1
 8001348:	4931      	ldr	r1, [pc, #196]	; (8001410 <rwFlash+0x388>)
 800134a:	4830      	ldr	r0, [pc, #192]	; (800140c <rwFlash+0x384>)
 800134c:	f005 fbc4 	bl	8006ad8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001354:	22c8      	movs	r2, #200	; 0xc8
 8001356:	492d      	ldr	r1, [pc, #180]	; (800140c <rwFlash+0x384>)
 8001358:	482e      	ldr	r0, [pc, #184]	; (8001414 <rwFlash+0x38c>)
 800135a:	f005 f97f 	bl	800665c <HAL_UART_Transmit>

		/* Поправочные коэффициенты */
		DX1.u = *(__IO uint32_t*) (pageAdr + 24);
 800135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001360:	3318      	adds	r3, #24
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a2c      	ldr	r2, [pc, #176]	; (8001418 <rwFlash+0x390>)
 8001366:	6013      	str	r3, [r2, #0]
		DX2.u = *(__IO uint32_t*) (pageAdr + 28);
 8001368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136a:	331c      	adds	r3, #28
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a2b      	ldr	r2, [pc, #172]	; (800141c <rwFlash+0x394>)
 8001370:	6013      	str	r3, [r2, #0]
		DY1.u = *(__IO uint32_t*) (pageAdr + 32);
 8001372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001374:	3320      	adds	r3, #32
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a29      	ldr	r2, [pc, #164]	; (8001420 <rwFlash+0x398>)
 800137a:	6013      	str	r3, [r2, #0]
		DY2.u = *(__IO uint32_t*) (pageAdr + 36);
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	3324      	adds	r3, #36	; 0x24
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a28      	ldr	r2, [pc, #160]	; (8001424 <rwFlash+0x39c>)
 8001384:	6013      	str	r3, [r2, #0]
		memset(SndBuffer, 0, sizeof(SndBuffer));
 8001386:	22c8      	movs	r2, #200	; 0xc8
 8001388:	2100      	movs	r1, #0
 800138a:	4820      	ldr	r0, [pc, #128]	; (800140c <rwFlash+0x384>)
 800138c:	f005 fb9c 	bl	8006ac8 <memset>
		sprintf(SndBuffer, "DX1: %7.6f, DX2: %7.6f, DY1: %7.6f, DY2: %7.6f\r\n", DX1.f, DX2.f, DY1.f, DY2.f);
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <rwFlash+0x390>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f83f 	bl	8000418 <__aeabi_f2d>
 800139a:	4682      	mov	sl, r0
 800139c:	468b      	mov	fp, r1
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <rwFlash+0x394>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f838 	bl	8000418 <__aeabi_f2d>
 80013a8:	4604      	mov	r4, r0
 80013aa:	460d      	mov	r5, r1
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <rwFlash+0x398>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f831 	bl	8000418 <__aeabi_f2d>
 80013b6:	4680      	mov	r8, r0
 80013b8:	4689      	mov	r9, r1
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <rwFlash+0x39c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f82a 	bl	8000418 <__aeabi_f2d>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013cc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013d0:	e9cd 4500 	strd	r4, r5, [sp]
 80013d4:	4652      	mov	r2, sl
 80013d6:	465b      	mov	r3, fp
 80013d8:	4913      	ldr	r1, [pc, #76]	; (8001428 <rwFlash+0x3a0>)
 80013da:	480c      	ldr	r0, [pc, #48]	; (800140c <rwFlash+0x384>)
 80013dc:	f005 fb7c 	bl	8006ad8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80013e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e4:	22c8      	movs	r2, #200	; 0xc8
 80013e6:	4909      	ldr	r1, [pc, #36]	; (800140c <rwFlash+0x384>)
 80013e8:	480a      	ldr	r0, [pc, #40]	; (8001414 <rwFlash+0x38c>)
 80013ea:	f005 f937 	bl	800665c <HAL_UART_Transmit>
	}
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3738      	adds	r7, #56	; 0x38
 80013f4:	46bd      	mov	sp, r7
 80013f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013fa:	bf00      	nop
 80013fc:	20000588 	.word	0x20000588
 8001400:	200001cc 	.word	0x200001cc
 8001404:	200003e6 	.word	0x200003e6
 8001408:	20000194 	.word	0x20000194
 800140c:	200000a4 	.word	0x200000a4
 8001410:	080087d0 	.word	0x080087d0
 8001414:	20000b28 	.word	0x20000b28
 8001418:	20000180 	.word	0x20000180
 800141c:	2000021c 	.word	0x2000021c
 8001420:	20000190 	.word	0x20000190
 8001424:	200001d0 	.word	0x200001d0
 8001428:	08008800 	.word	0x08008800

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001430:	b0a5      	sub	sp, #148	; 0x94
 8001432:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001434:	f002 f878 	bl	8003528 <HAL_Init>

  /* USER CODE BEGIN Init */
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
			(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) ? "Yes" : "No",
 8001438:	4b56      	ldr	r3, [pc, #344]	; (8001594 <main+0x168>)
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800143c:	2b00      	cmp	r3, #0
 800143e:	da01      	bge.n	8001444 <main+0x18>
 8001440:	4c55      	ldr	r4, [pc, #340]	; (8001598 <main+0x16c>)
 8001442:	e000      	b.n	8001446 <main+0x1a>
 8001444:	4c55      	ldr	r4, [pc, #340]	; (800159c <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) ? "Yes" : "No",
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <main+0x168>)
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <main+0x2a>
 8001452:	4d51      	ldr	r5, [pc, #324]	; (8001598 <main+0x16c>)
 8001454:	e000      	b.n	8001458 <main+0x2c>
 8001456:	4d51      	ldr	r5, [pc, #324]	; (800159c <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) ? "Yes" : "No",
 8001458:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <main+0x168>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <main+0x3c>
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <main+0x16c>)
 8001466:	e000      	b.n	800146a <main+0x3e>
 8001468:	4b4c      	ldr	r3, [pc, #304]	; (800159c <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) ? "Yes" : "No",
 800146a:	4a4a      	ldr	r2, [pc, #296]	; (8001594 <main+0x168>)
 800146c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800146e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001472:	2a00      	cmp	r2, #0
 8001474:	d001      	beq.n	800147a <main+0x4e>
 8001476:	4a48      	ldr	r2, [pc, #288]	; (8001598 <main+0x16c>)
 8001478:	e000      	b.n	800147c <main+0x50>
 800147a:	4a48      	ldr	r2, [pc, #288]	; (800159c <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) ? "Yes" : "No",
 800147c:	4945      	ldr	r1, [pc, #276]	; (8001594 <main+0x168>)
 800147e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001480:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001484:	2900      	cmp	r1, #0
 8001486:	d001      	beq.n	800148c <main+0x60>
 8001488:	4943      	ldr	r1, [pc, #268]	; (8001598 <main+0x16c>)
 800148a:	e000      	b.n	800148e <main+0x62>
 800148c:	4943      	ldr	r1, [pc, #268]	; (800159c <main+0x170>)
			(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) ? "Yes" : "No");
 800148e:	4841      	ldr	r0, [pc, #260]	; (8001594 <main+0x168>)
 8001490:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001492:	f000 6000 	and.w	r0, r0, #134217728	; 0x8000000
	sprintf(SndBuffer, "\r\nLow power: %s, WWD: %s, IWD: %s, Soft: %s, Pin: %s, Power: %s\r\n",
 8001496:	2800      	cmp	r0, #0
 8001498:	d001      	beq.n	800149e <main+0x72>
 800149a:	483f      	ldr	r0, [pc, #252]	; (8001598 <main+0x16c>)
 800149c:	e000      	b.n	80014a0 <main+0x74>
 800149e:	483f      	ldr	r0, [pc, #252]	; (800159c <main+0x170>)
 80014a0:	9003      	str	r0, [sp, #12]
 80014a2:	9102      	str	r1, [sp, #8]
 80014a4:	9201      	str	r2, [sp, #4]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	462b      	mov	r3, r5
 80014aa:	4622      	mov	r2, r4
 80014ac:	493c      	ldr	r1, [pc, #240]	; (80015a0 <main+0x174>)
 80014ae:	483d      	ldr	r0, [pc, #244]	; (80015a4 <main+0x178>)
 80014b0:	f005 fb12 	bl	8006ad8 <siprintf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b4:	f000 fce2 	bl	8001e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b8:	f001 f804 	bl	80024c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014bc:	f000 ffd8 	bl	8002470 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80014c0:	f000 fd9e 	bl	8002000 <MX_TIM1_Init>
  MX_TIM4_Init();
 80014c4:	f000 ff86 	bl	80023d4 <MX_TIM4_Init>
  MX_TIM3_Init();
 80014c8:	f000 ff16 	bl	80022f8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80014cc:	f000 fe7e 	bl	80021cc <MX_TIM2_Init>
  MX_I2C1_Init();
 80014d0:	f000 fd18 	bl	8001f04 <MX_I2C1_Init>
  MX_SPI2_Init();
 80014d4:	f000 fd5e 	bl	8001f94 <MX_SPI2_Init>
  MX_IWDG_Init();
 80014d8:	f000 fd42 	bl	8001f60 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	4831      	ldr	r0, [pc, #196]	; (80015a8 <main+0x17c>)
 80014e2:	f002 fd2f 	bl	8003f44 <HAL_GPIO_WritePin>
  readyFlag = TRUE;
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <main+0x180>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
  //sumCounter2 = 0;
  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), HAL_MAX_DELAY);
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f0:	22c8      	movs	r2, #200	; 0xc8
 80014f2:	492c      	ldr	r1, [pc, #176]	; (80015a4 <main+0x178>)
 80014f4:	482e      	ldr	r0, [pc, #184]	; (80015b0 <main+0x184>)
 80014f6:	f005 f8b1 	bl	800665c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_START_TEXT, sizeof(INIT_START_TEXT), HAL_MAX_DELAY);
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014fe:	2212      	movs	r2, #18
 8001500:	492c      	ldr	r1, [pc, #176]	; (80015b4 <main+0x188>)
 8001502:	482b      	ldr	r0, [pc, #172]	; (80015b0 <main+0x184>)
 8001504:	f005 f8aa 	bl	800665c <HAL_UART_Transmit>
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(SCSN_GPIO_Port, SCSN_Pin, GPIO_PIN_SET);
  HAL_Delay(2000);
  init_w5500();
#else
  HAL_GPIO_WritePin(nRst_GPIO_Port, nRst_Pin, GPIO_PIN_RESET);	// Reset W5500
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150e:	4826      	ldr	r0, [pc, #152]	; (80015a8 <main+0x17c>)
 8001510:	f002 fd18 	bl	8003f44 <HAL_GPIO_WritePin>
#endif
  rwFlash(0);		// Чтение параметров калибровки из Flash.
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff fdb7 	bl	8001088 <rwFlash>

  /* Таймер задержки запуска измерения */
  receiversOff
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <main+0x18c>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4a26      	ldr	r2, [pc, #152]	; (80015b8 <main+0x18c>)
 8001520:	f043 031e 	orr.w	r3, r3, #30
 8001524:	60d3      	str	r3, [r2, #12]
  C_13 = CALIBRATE_START;
 8001526:	4b25      	ldr	r3, [pc, #148]	; (80015bc <main+0x190>)
 8001528:	f649 4240 	movw	r2, #40000	; 0x9c40
 800152c:	801a      	strh	r2, [r3, #0]
  TIM3->ARR = C_13; 		// Коррекция для таймера запуска измерения Z13
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <main+0x190>)
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <main+0x194>)
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
  /*
   * calibrateMode == 0 -- Нормальный режим
   * calibrateMode > 0 -- Режим калибровки
   */
  calibrateMode = 0;
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <main+0x198>)
 8001538:	2200      	movs	r2, #0
 800153a:	801a      	strh	r2, [r3, #0]
  test_flag = FALSE;
 800153c:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <main+0x19c>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
  Xsum = 0;
 8001542:	4922      	ldr	r1, [pc, #136]	; (80015cc <main+0x1a0>)
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 8001550:	491f      	ldr	r1, [pc, #124]	; (80015d0 <main+0x1a4>)
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9c1 2300 	strd	r2, r3, [r1]
  Vmax = 0;
 800155e:	491d      	ldr	r1, [pc, #116]	; (80015d4 <main+0x1a8>)
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9c1 2300 	strd	r2, r3, [r1]
  firstTime = TRUE;
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <main+0x1ac>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
  currentMode = 0;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <main+0x1b0>)
 8001574:	2200      	movs	r2, #0
 8001576:	801a      	strh	r2, [r3, #0]
  STOP_CAPTURE
 8001578:	2100      	movs	r1, #0
 800157a:	4819      	ldr	r0, [pc, #100]	; (80015e0 <main+0x1b4>)
 800157c:	f003 febc 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
 8001580:	2104      	movs	r1, #4
 8001582:	4817      	ldr	r0, [pc, #92]	; (80015e0 <main+0x1b4>)
 8001584:	f003 feb8 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
  measCount = 0;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <main+0x1b8>)
 800158a:	2200      	movs	r2, #0
 800158c:	801a      	strh	r2, [r3, #0]
  /*
   *	Очистка массива результатов.
   */
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 800158e:	2300      	movs	r3, #0
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001592:	e038      	b.n	8001606 <main+0x1da>
 8001594:	40021000 	.word	0x40021000
 8001598:	08008834 	.word	0x08008834
 800159c:	08008838 	.word	0x08008838
 80015a0:	0800883c 	.word	0x0800883c
 80015a4:	200000a4 	.word	0x200000a4
 80015a8:	40010800 	.word	0x40010800
 80015ac:	20000184 	.word	0x20000184
 80015b0:	20000b28 	.word	0x20000b28
 80015b4:	08008880 	.word	0x08008880
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	20000588 	.word	0x20000588
 80015c0:	40000400 	.word	0x40000400
 80015c4:	20000720 	.word	0x20000720
 80015c8:	20000240 	.word	0x20000240
 80015cc:	20000238 	.word	0x20000238
 80015d0:	20000188 	.word	0x20000188
 80015d4:	200001a0 	.word	0x200001a0
 80015d8:	200009cc 	.word	0x200009cc
 80015dc:	20000578 	.word	0x20000578
 80015e0:	20000bb8 	.word	0x20000bb8
 80015e4:	200001a8 	.word	0x200001a8
	  resul_arrayX1[ii] = 0;
 80015e8:	4a92      	ldr	r2, [pc, #584]	; (8001834 <main+0x408>)
 80015ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  resul_arrayY1[ii] = 0;
 80015f4:	4a90      	ldr	r2, [pc, #576]	; (8001838 <main+0x40c>)
 80015f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int ii = 0; ii < MEASSURE_COUNT; ii++) {
 8001600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001602:	3301      	adds	r3, #1
 8001604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001608:	2b63      	cmp	r3, #99	; 0x63
 800160a:	dded      	ble.n	80015e8 <main+0x1bc>
  }
  calibrate13 = FALSE;
 800160c:	4b8b      	ldr	r3, [pc, #556]	; (800183c <main+0x410>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
  calibrate24 = FALSE;
 8001612:	4b8b      	ldr	r3, [pc, #556]	; (8001840 <main+0x414>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, (uint8_t *) INIT_FINISH_TEXT, sizeof(INIT_FINISH_TEXT), HAL_MAX_DELAY);
 8001618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800161c:	2213      	movs	r2, #19
 800161e:	4989      	ldr	r1, [pc, #548]	; (8001844 <main+0x418>)
 8001620:	4889      	ldr	r0, [pc, #548]	; (8001848 <main+0x41c>)
 8001622:	f005 f81b 	bl	800665c <HAL_UART_Transmit>


  HAL_TIM_Base_Start_IT(&htim3);
 8001626:	4889      	ldr	r0, [pc, #548]	; (800184c <main+0x420>)
 8001628:	f003 fb2a 	bl	8004c80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800162c:	4888      	ldr	r0, [pc, #544]	; (8001850 <main+0x424>)
 800162e:	f003 fb27 	bl	8004c80 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  V = 0;
 8001632:	4988      	ldr	r1, [pc, #544]	; (8001854 <main+0x428>)
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9c1 2300 	strd	r2, r3, [r1]
  Xsum = 0;
 8001640:	4985      	ldr	r1, [pc, #532]	; (8001858 <main+0x42c>)
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9c1 2300 	strd	r2, r3, [r1]
  Ysum = 0;
 800164e:	4983      	ldr	r1, [pc, #524]	; (800185c <main+0x430>)
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9c1 2300 	strd	r2, r3, [r1]
  Vmaxfin = 0;
 800165c:	4980      	ldr	r1, [pc, #512]	; (8001860 <main+0x434>)
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	e9c1 2300 	strd	r2, r3, [r1]
  Xmaxfin = 0;
 800166a:	497e      	ldr	r1, [pc, #504]	; (8001864 <main+0x438>)
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9c1 2300 	strd	r2, r3, [r1]
  Ymaxfin = 0;
 8001678:	497b      	ldr	r1, [pc, #492]	; (8001868 <main+0x43c>)
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	e9c1 2300 	strd	r2, r3, [r1]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	4878      	ldr	r0, [pc, #480]	; (800186c <main+0x440>)
 800168c:	f002 fc5a 	bl	8003f44 <HAL_GPIO_WritePin>
  while (1)
  {
	  if (readyFlag) {
 8001690:	4b77      	ldr	r3, [pc, #476]	; (8001870 <main+0x444>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 82e5 	beq.w	8001c64 <main+0x838>
		  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 800169a:	4b76      	ldr	r3, [pc, #472]	; (8001874 <main+0x448>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a75      	ldr	r2, [pc, #468]	; (8001874 <main+0x448>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6013      	str	r3, [r2, #0]
		  HAL_IWDG_Refresh(&hiwdg);
 80016a6:	4874      	ldr	r0, [pc, #464]	; (8001878 <main+0x44c>)
 80016a8:	f002 fdea 	bl	8004280 <HAL_IWDG_Refresh>
		  readyFlag = FALSE;
 80016ac:	4b70      	ldr	r3, [pc, #448]	; (8001870 <main+0x444>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		  if (calibrateMode > 0) {
 80016b2:	4b72      	ldr	r3, [pc, #456]	; (800187c <main+0x450>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8256 	beq.w	8001b68 <main+0x73c>
			  /* Процедура калибровки */
			  if (( calibrate13 || calibrate24 ) && (calibrateCount < CALIBRATE_MAX_COUNT)) {
 80016bc:	4b5f      	ldr	r3, [pc, #380]	; (800183c <main+0x410>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <main+0x2a2>
 80016c4:	4b5e      	ldr	r3, [pc, #376]	; (8001840 <main+0x414>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 813e 	beq.w	800194a <main+0x51e>
 80016ce:	4b6c      	ldr	r3, [pc, #432]	; (8001880 <main+0x454>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80016d6:	f080 8138 	bcs.w	800194a <main+0x51e>
				  memset(SndBuffer, 0, sizeof(SndBuffer));
 80016da:	22c8      	movs	r2, #200	; 0xc8
 80016dc:	2100      	movs	r1, #0
 80016de:	4869      	ldr	r0, [pc, #420]	; (8001884 <main+0x458>)
 80016e0:	f005 f9f2 	bl	8006ac8 <memset>
				  if (test_flag) {
 80016e4:	4b68      	ldr	r3, [pc, #416]	; (8001888 <main+0x45c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d032      	beq.n	8001752 <main+0x326>
					  sprintf(SndBuffer, "Z13-Z31:%5.0f, Z42-Z24:%5.0f   \r",
							  resul_arrayY1[0] - resul_arrayY2[0] * DY1.f,
 80016ec:	4b52      	ldr	r3, [pc, #328]	; (8001838 <main+0x40c>)
 80016ee:	681c      	ldr	r4, [r3, #0]
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <main+0x460>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a66      	ldr	r2, [pc, #408]	; (8001890 <main+0x464>)
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff faca 	bl	8000c94 <__aeabi_fmul>
 8001700:	4603      	mov	r3, r0
 8001702:	4619      	mov	r1, r3
 8001704:	4620      	mov	r0, r4
 8001706:	f7ff f9bb 	bl	8000a80 <__aeabi_fsub>
 800170a:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13-Z31:%5.0f, Z42-Z24:%5.0f   \r",
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fe83 	bl	8000418 <__aeabi_f2d>
 8001712:	4604      	mov	r4, r0
 8001714:	460d      	mov	r5, r1
							  resul_arrayX1[0] - resul_arrayX2[0] * DX1.f);
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <main+0x408>)
 8001718:	681e      	ldr	r6, [r3, #0]
 800171a:	4b5e      	ldr	r3, [pc, #376]	; (8001894 <main+0x468>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <main+0x46c>)
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fab5 	bl	8000c94 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	4619      	mov	r1, r3
 800172e:	4630      	mov	r0, r6
 8001730:	f7ff f9a6 	bl	8000a80 <__aeabi_fsub>
 8001734:	4603      	mov	r3, r0
					  sprintf(SndBuffer, "Z13-Z31:%5.0f, Z42-Z24:%5.0f   \r",
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe6e 	bl	8000418 <__aeabi_f2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	e9cd 2300 	strd	r2, r3, [sp]
 8001744:	4622      	mov	r2, r4
 8001746:	462b      	mov	r3, r5
 8001748:	4954      	ldr	r1, [pc, #336]	; (800189c <main+0x470>)
 800174a:	484e      	ldr	r0, [pc, #312]	; (8001884 <main+0x458>)
 800174c:	f005 f9c4 	bl	8006ad8 <siprintf>
 8001750:	e027      	b.n	80017a2 <main+0x376>
				  } else {
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <main+0x40c>)
 8001754:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fe5e 	bl	8000418 <__aeabi_f2d>
 800175c:	4682      	mov	sl, r0
 800175e:	468b      	mov	fp, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 8001760:	4b4a      	ldr	r3, [pc, #296]	; (800188c <main+0x460>)
 8001762:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe57 	bl	8000418 <__aeabi_f2d>
 800176a:	4604      	mov	r4, r0
 800176c:	460d      	mov	r5, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <main+0x408>)
 8001770:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe50 	bl	8000418 <__aeabi_f2d>
 8001778:	4680      	mov	r8, r0
 800177a:	4689      	mov	r9, r1
							  resul_arrayY1[0], resul_arrayY2[0], resul_arrayX1[0], resul_arrayX2[0]);
 800177c:	4b45      	ldr	r3, [pc, #276]	; (8001894 <main+0x468>)
 800177e:	681b      	ldr	r3, [r3, #0]
					  sprintf(SndBuffer, "Z13-Z31:%5.0f-%5.0f, Z42-Z24:%5.0f-%5.0f   \r",
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe49 	bl	8000418 <__aeabi_f2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800178e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001792:	e9cd 4500 	strd	r4, r5, [sp]
 8001796:	4652      	mov	r2, sl
 8001798:	465b      	mov	r3, fp
 800179a:	4941      	ldr	r1, [pc, #260]	; (80018a0 <main+0x474>)
 800179c:	4839      	ldr	r0, [pc, #228]	; (8001884 <main+0x458>)
 800179e:	f005 f99b 	bl	8006ad8 <siprintf>
				  }
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	22c8      	movs	r2, #200	; 0xc8
 80017a8:	4936      	ldr	r1, [pc, #216]	; (8001884 <main+0x458>)
 80017aa:	4827      	ldr	r0, [pc, #156]	; (8001848 <main+0x41c>)
 80017ac:	f004 ff56 	bl	800665c <HAL_UART_Transmit>
				  /* Y */
				  if (! test_flag) {
 80017b0:	4b35      	ldr	r3, [pc, #212]	; (8001888 <main+0x45c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	f083 0301 	eor.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80bb 	beq.w	8001936 <main+0x50a>
					  if ( calibrate13 && (abs(resul_arrayY1[0] + resul_arrayY2[0] - 1600) > CALIBRATE_ACURACY) ) {
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <main+0x410>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d071      	beq.n	80018ac <main+0x480>
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <main+0x40c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2f      	ldr	r2, [pc, #188]	; (800188c <main+0x460>)
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f956 	bl	8000a84 <__addsf3>
 80017d8:	4603      	mov	r3, r0
 80017da:	4932      	ldr	r1, [pc, #200]	; (80018a4 <main+0x478>)
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f94f 	bl	8000a80 <__aeabi_fsub>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc1b 	bl	8001020 <__aeabi_f2iz>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfb8      	it	lt
 80017f0:	425b      	neglt	r3, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	dd5a      	ble.n	80018ac <main+0x480>
						  if (resul_arrayY1[0] + resul_arrayY2[0] > 1600) {
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <main+0x40c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a24      	ldr	r2, [pc, #144]	; (800188c <main+0x460>)
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff f93f 	bl	8000a84 <__addsf3>
 8001806:	4603      	mov	r3, r0
 8001808:	4926      	ldr	r1, [pc, #152]	; (80018a4 <main+0x478>)
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fbfe 	bl	800100c <__aeabi_fcmpgt>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <main+0x3f8>
							  C_13++;
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <main+0x47c>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <main+0x47c>)
 8001820:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] + resul_arrayY2[0] > 1600) {
 8001822:	e046      	b.n	80018b2 <main+0x486>
						  } else {
							  C_13--;
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <main+0x47c>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <main+0x47c>)
 800182e:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayY1[0] + resul_arrayY2[0] > 1600) {
 8001830:	e03f      	b.n	80018b2 <main+0x486>
 8001832:	bf00      	nop
 8001834:	200003e8 	.word	0x200003e8
 8001838:	20000244 	.word	0x20000244
 800183c:	200001d4 	.word	0x200001d4
 8001840:	200003e4 	.word	0x200003e4
 8001844:	08008894 	.word	0x08008894
 8001848:	20000b28 	.word	0x20000b28
 800184c:	20000ae0 	.word	0x20000ae0
 8001850:	20000a30 	.word	0x20000a30
 8001854:	20000228 	.word	0x20000228
 8001858:	20000238 	.word	0x20000238
 800185c:	20000188 	.word	0x20000188
 8001860:	20000198 	.word	0x20000198
 8001864:	20000728 	.word	0x20000728
 8001868:	200003d8 	.word	0x200003d8
 800186c:	40010800 	.word	0x40010800
 8001870:	20000184 	.word	0x20000184
 8001874:	e000e010 	.word	0xe000e010
 8001878:	20000acc 	.word	0x20000acc
 800187c:	20000720 	.word	0x20000720
 8001880:	20000722 	.word	0x20000722
 8001884:	200000a4 	.word	0x200000a4
 8001888:	20000240 	.word	0x20000240
 800188c:	20000730 	.word	0x20000730
 8001890:	20000190 	.word	0x20000190
 8001894:	2000058c 	.word	0x2000058c
 8001898:	20000180 	.word	0x20000180
 800189c:	080088a8 	.word	0x080088a8
 80018a0:	080088cc 	.word	0x080088cc
 80018a4:	44c80000 	.word	0x44c80000
 80018a8:	20000588 	.word	0x20000588
						  }
					  } else {
						  calibrate13 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y1
 80018ac:	4b94      	ldr	r3, [pc, #592]	; (8001b00 <main+0x6d4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
					  }
					  /* X */
					  if ( calibrate24 && (abs(resul_arrayX1[0] + resul_arrayX2[0] - 1600) > CALIBRATE_ACURACY) ) {
 80018b2:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <main+0x6d8>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d034      	beq.n	8001924 <main+0x4f8>
 80018ba:	4b93      	ldr	r3, [pc, #588]	; (8001b08 <main+0x6dc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a93      	ldr	r2, [pc, #588]	; (8001b0c <main+0x6e0>)
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f8dd 	bl	8000a84 <__addsf3>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4990      	ldr	r1, [pc, #576]	; (8001b10 <main+0x6e4>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f8d6 	bl	8000a80 <__aeabi_fsub>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fba2 	bl	8001020 <__aeabi_f2iz>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bfb8      	it	lt
 80018e2:	425b      	neglt	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	dd1d      	ble.n	8001924 <main+0x4f8>
						  if (resul_arrayX1[0] + resul_arrayX2[0] > 1600) {
 80018e8:	4b87      	ldr	r3, [pc, #540]	; (8001b08 <main+0x6dc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a87      	ldr	r2, [pc, #540]	; (8001b0c <main+0x6e0>)
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f8c6 	bl	8000a84 <__addsf3>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4985      	ldr	r1, [pc, #532]	; (8001b10 <main+0x6e4>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fb85 	bl	800100c <__aeabi_fcmpgt>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <main+0x4ea>
							  C_24++;
 8001908:	4b82      	ldr	r3, [pc, #520]	; (8001b14 <main+0x6e8>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b80      	ldr	r3, [pc, #512]	; (8001b14 <main+0x6e8>)
 8001912:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] + resul_arrayX2[0] > 1600) {
 8001914:	e009      	b.n	800192a <main+0x4fe>
						  } else {
							  C_24--;
 8001916:	4b7f      	ldr	r3, [pc, #508]	; (8001b14 <main+0x6e8>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	4b7d      	ldr	r3, [pc, #500]	; (8001b14 <main+0x6e8>)
 8001920:	801a      	strh	r2, [r3, #0]
						  if (resul_arrayX1[0] + resul_arrayX2[0] > 1600) {
 8001922:	e002      	b.n	800192a <main+0x4fe>
						  }
					  } else {
						  calibrate24 = FALSE;	// Закончена калибровка таймера запуска измерения в канале Y2
 8001924:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <main+0x6d8>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
					  }
					  calibrateCount++;
 800192a:	4b7b      	ldr	r3, [pc, #492]	; (8001b18 <main+0x6ec>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	4b79      	ldr	r3, [pc, #484]	; (8001b18 <main+0x6ec>)
 8001934:	801a      	strh	r2, [r3, #0]
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001936:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <main+0x6f0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a78      	ldr	r2, [pc, #480]	; (8001b1c <main+0x6f0>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8001942:	4877      	ldr	r0, [pc, #476]	; (8001b20 <main+0x6f4>)
 8001944:	f003 f99c 	bl	8004c80 <HAL_TIM_Base_Start_IT>
 8001948:	e18c      	b.n	8001c64 <main+0x838>
			  } else {
				  if (calibrateCount >= CALIBRATE_MAX_COUNT) {
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <main+0x6ec>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001952:	d308      	bcc.n	8001966 <main+0x53a>
					  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_TOUT, sizeof(CALIBRATE_ERROR_TOUT), 1000);
 8001954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001958:	221f      	movs	r2, #31
 800195a:	4972      	ldr	r1, [pc, #456]	; (8001b24 <main+0x6f8>)
 800195c:	4872      	ldr	r0, [pc, #456]	; (8001b28 <main+0x6fc>)
 800195e:	f004 fe7d 	bl	800665c <HAL_UART_Transmit>
					  /* System restart if calibrate error. */
					  HAL_NVIC_SystemReset();
 8001962:	f001 ff5a 	bl	800381a <HAL_NVIC_SystemReset>
				  }
				  if (calibrateMode > 0) {
 8001966:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <main+0x700>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80bd 	beq.w	8001aea <main+0x6be>
					  ZX1 = ZX1 + (float) resul_arrayX1[0];
 8001970:	4b65      	ldr	r3, [pc, #404]	; (8001b08 <main+0x6dc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6e      	ldr	r2, [pc, #440]	; (8001b30 <main+0x704>)
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f882 	bl	8000a84 <__addsf3>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <main+0x704>)
 8001986:	601a      	str	r2, [r3, #0]
					  ZX2 = ZX2 + (float) resul_arrayX2[0];
 8001988:	4b60      	ldr	r3, [pc, #384]	; (8001b0c <main+0x6e0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a69      	ldr	r2, [pc, #420]	; (8001b34 <main+0x708>)
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f876 	bl	8000a84 <__addsf3>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <main+0x708>)
 800199e:	601a      	str	r2, [r3, #0]
					  ZY1 = ZY1 + (float) resul_arrayY1[0];
 80019a0:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <main+0x70c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a65      	ldr	r2, [pc, #404]	; (8001b3c <main+0x710>)
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f86a 	bl	8000a84 <__addsf3>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <main+0x710>)
 80019b6:	601a      	str	r2, [r3, #0]
					  ZY2 = ZY2 + (float) resul_arrayY2[0];
 80019b8:	4b61      	ldr	r3, [pc, #388]	; (8001b40 <main+0x714>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a61      	ldr	r2, [pc, #388]	; (8001b44 <main+0x718>)
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f85e 	bl	8000a84 <__addsf3>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <main+0x718>)
 80019ce:	601a      	str	r2, [r3, #0]
					  calibrateMode--;
 80019d0:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <main+0x700>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <main+0x700>)
 80019da:	801a      	strh	r2, [r3, #0]
					  if (calibrateMode == 0) {
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <main+0x700>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 8082 	bne.w	8001aea <main+0x6be>
						  /* Вычисление поправок */
						  DX1.f = ZX1 / ZX2;
 80019e6:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <main+0x704>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <main+0x708>)
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	4611      	mov	r1, r2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fa03 	bl	8000dfc <__aeabi_fdiv>
 80019f6:	4603      	mov	r3, r0
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <main+0x71c>)
 80019fc:	601a      	str	r2, [r3, #0]
						  DY1.f = ZY1 / ZY2;
 80019fe:	4b4f      	ldr	r3, [pc, #316]	; (8001b3c <main+0x710>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a50      	ldr	r2, [pc, #320]	; (8001b44 <main+0x718>)
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff f9f7 	bl	8000dfc <__aeabi_fdiv>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <main+0x720>)
 8001a14:	601a      	str	r2, [r3, #0]
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001a16:	22c8      	movs	r2, #200	; 0xc8
 8001a18:	2100      	movs	r1, #0
 8001a1a:	484d      	ldr	r0, [pc, #308]	; (8001b50 <main+0x724>)
 8001a1c:	f005 f854 	bl	8006ac8 <memset>
						  sprintf(SndBuffer, "\r\nCalibrate complite.\r\nC_13:%5d, C_24:%5d\r\n", C_13, C_24);
 8001a20:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <main+0x728>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <main+0x6e8>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	494b      	ldr	r1, [pc, #300]	; (8001b58 <main+0x72c>)
 8001a2c:	4848      	ldr	r0, [pc, #288]	; (8001b50 <main+0x724>)
 8001a2e:	f005 f853 	bl	8006ad8 <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	22c8      	movs	r2, #200	; 0xc8
 8001a38:	4945      	ldr	r1, [pc, #276]	; (8001b50 <main+0x724>)
 8001a3a:	483b      	ldr	r0, [pc, #236]	; (8001b28 <main+0x6fc>)
 8001a3c:	f004 fe0e 	bl	800665c <HAL_UART_Transmit>
						  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001a40:	22c8      	movs	r2, #200	; 0xc8
 8001a42:	2100      	movs	r1, #0
 8001a44:	4842      	ldr	r0, [pc, #264]	; (8001b50 <main+0x724>)
 8001a46:	f005 f83f 	bl	8006ac8 <memset>
						  sprintf(SndBuffer, "DX1:%5.4f, DY1:%5.4f\r\n\r\n", DX1.f, DY1.f);
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <main+0x71c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fce2 	bl	8000418 <__aeabi_f2d>
 8001a54:	4604      	mov	r4, r0
 8001a56:	460d      	mov	r5, r1
 8001a58:	4b3c      	ldr	r3, [pc, #240]	; (8001b4c <main+0x720>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fcdb 	bl	8000418 <__aeabi_f2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9cd 2300 	strd	r2, r3, [sp]
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	462b      	mov	r3, r5
 8001a6e:	493b      	ldr	r1, [pc, #236]	; (8001b5c <main+0x730>)
 8001a70:	4837      	ldr	r0, [pc, #220]	; (8001b50 <main+0x724>)
 8001a72:	f005 f831 	bl	8006ad8 <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	22c8      	movs	r2, #200	; 0xc8
 8001a7c:	4934      	ldr	r1, [pc, #208]	; (8001b50 <main+0x724>)
 8001a7e:	482a      	ldr	r0, [pc, #168]	; (8001b28 <main+0x6fc>)
 8001a80:	f004 fdec 	bl	800665c <HAL_UART_Transmit>
						  if (abs(DX1.f) < 2 && abs(DY1.f) < 2) {
 8001a84:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <main+0x71c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fac9 	bl	8001020 <__aeabi_f2iz>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a94:	db1c      	blt.n	8001ad0 <main+0x6a4>
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <main+0x71c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fac0 	bl	8001020 <__aeabi_f2iz>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	dc14      	bgt.n	8001ad0 <main+0x6a4>
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <main+0x720>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fab8 	bl	8001020 <__aeabi_f2iz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab6:	db0b      	blt.n	8001ad0 <main+0x6a4>
 8001ab8:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <main+0x720>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff faaf 	bl	8001020 <__aeabi_f2iz>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	dc03      	bgt.n	8001ad0 <main+0x6a4>
							  rwFlash(1);  // Запись данных калибровки во Flash.
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff fadd 	bl	8001088 <rwFlash>
 8001ace:	e006      	b.n	8001ade <main+0x6b2>
						  } else {
							  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_ERROR_RANGE, sizeof(CALIBRATE_ERROR_RANGE), 1000);
 8001ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad4:	222a      	movs	r2, #42	; 0x2a
 8001ad6:	4922      	ldr	r1, [pc, #136]	; (8001b60 <main+0x734>)
 8001ad8:	4813      	ldr	r0, [pc, #76]	; (8001b28 <main+0x6fc>)
 8001ada:	f004 fdbf 	bl	800665c <HAL_UART_Transmit>
						  }
						  calibrateCount = 0;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <main+0x6ec>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	801a      	strh	r2, [r3, #0]
						  firstTime = TRUE;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <main+0x738>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
					  }
				  }
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <main+0x6f0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <main+0x6f0>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6013      	str	r3, [r2, #0]
				#endif
				  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8001af6:	480a      	ldr	r0, [pc, #40]	; (8001b20 <main+0x6f4>)
 8001af8:	f003 f8c2 	bl	8004c80 <HAL_TIM_Base_Start_IT>
 8001afc:	e0b2      	b.n	8001c64 <main+0x838>
 8001afe:	bf00      	nop
 8001b00:	200001d4 	.word	0x200001d4
 8001b04:	200003e4 	.word	0x200003e4
 8001b08:	200003e8 	.word	0x200003e8
 8001b0c:	2000058c 	.word	0x2000058c
 8001b10:	44c80000 	.word	0x44c80000
 8001b14:	200001cc 	.word	0x200001cc
 8001b18:	20000722 	.word	0x20000722
 8001b1c:	e000e010 	.word	0xe000e010
 8001b20:	20000a30 	.word	0x20000a30
 8001b24:	080088fc 	.word	0x080088fc
 8001b28:	20000b28 	.word	0x20000b28
 8001b2c:	20000720 	.word	0x20000720
 8001b30:	200001c8 	.word	0x200001c8
 8001b34:	200003e0 	.word	0x200003e0
 8001b38:	20000244 	.word	0x20000244
 8001b3c:	2000071c 	.word	0x2000071c
 8001b40:	20000730 	.word	0x20000730
 8001b44:	200009c0 	.word	0x200009c0
 8001b48:	20000180 	.word	0x20000180
 8001b4c:	20000190 	.word	0x20000190
 8001b50:	200000a4 	.word	0x200000a4
 8001b54:	20000588 	.word	0x20000588
 8001b58:	0800891c 	.word	0x0800891c
 8001b5c:	08008948 	.word	0x08008948
 8001b60:	08008964 	.word	0x08008964
 8001b64:	200009cc 	.word	0x200009cc
					  sendToZabbix(net_info.zabbix, ZabbixHostName, "ALTIM_MAXSPEED", Vmaxfin);
				  }
			  }
			#endif
			  //HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
			  if ( ! firstTime ) {
 8001b68:	4b9e      	ldr	r3, [pc, #632]	; (8001de4 <main+0x9b8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	f083 0301 	eor.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d06a      	beq.n	8001c4c <main+0x820>
				  sprintf(SndBuffer, "V:%5.2f, X:%5.2f, Y:%5.2f, Vmax:%5.2f, Xmax:%5.2f, Ymax:%5.2f, A:%3.0f, T:%5.2f, P:%8.3f, H:%5.2f, FS:%8.3f   \r",
 8001b76:	4b9c      	ldr	r3, [pc, #624]	; (8001de8 <main+0x9bc>)
 8001b78:	cb18      	ldmia	r3, {r3, r4}
 8001b7a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8001b7e:	4b9b      	ldr	r3, [pc, #620]	; (8001dec <main+0x9c0>)
 8001b80:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001b84:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
 8001b88:	4b99      	ldr	r3, [pc, #612]	; (8001df0 <main+0x9c4>)
 8001b8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b8e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001b92:	4b98      	ldr	r3, [pc, #608]	; (8001df4 <main+0x9c8>)
 8001b94:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b98:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8001b9c:	4b96      	ldr	r3, [pc, #600]	; (8001df8 <main+0x9cc>)
 8001b9e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001ba2:	e9c7 5604 	strd	r5, r6, [r7, #16]
 8001ba6:	4b95      	ldr	r3, [pc, #596]	; (8001dfc <main+0x9d0>)
 8001ba8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001bac:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8001bb0:	4b93      	ldr	r3, [pc, #588]	; (8001e00 <main+0x9d4>)
 8001bb2:	e9d3 9a00 	ldrd	r9, sl, [r3]
 8001bb6:	e9c7 9a00 	strd	r9, sl, [r7]
 8001bba:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <main+0x9d8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc2a 	bl	8000418 <__aeabi_f2d>
 8001bc4:	4682      	mov	sl, r0
 8001bc6:	468b      	mov	fp, r1
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <main+0x9dc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fc23 	bl	8000418 <__aeabi_f2d>
 8001bd2:	4680      	mov	r8, r0
 8001bd4:	4689      	mov	r9, r1
 8001bd6:	4b8d      	ldr	r3, [pc, #564]	; (8001e0c <main+0x9e0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc1c 	bl	8000418 <__aeabi_f2d>
 8001be0:	4604      	mov	r4, r0
 8001be2:	460d      	mov	r5, r1
						  V, Xsum, Ysum, Vmaxfin, Xmaxfin, Ymaxfin, A, temperature, pressure, humidity, resul_arrayY1[1]);
 8001be4:	4b8a      	ldr	r3, [pc, #552]	; (8001e10 <main+0x9e4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
				  sprintf(SndBuffer, "V:%5.2f, X:%5.2f, Y:%5.2f, Vmax:%5.2f, Xmax:%5.2f, Ymax:%5.2f, A:%3.0f, T:%5.2f, P:%8.3f, H:%5.2f, FS:%8.3f   \r",
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fc15 	bl	8000418 <__aeabi_f2d>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8001bf6:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8001bfa:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8001bfe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8001c02:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8001c06:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8001c0a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c0e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001c12:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001c16:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8001c1a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001c1e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001c22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c2a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001c2e:	e9cd 1200 	strd	r1, r2, [sp]
 8001c32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c36:	4977      	ldr	r1, [pc, #476]	; (8001e14 <main+0x9e8>)
 8001c38:	4877      	ldr	r0, [pc, #476]	; (8001e18 <main+0x9ec>)
 8001c3a:	f004 ff4d 	bl	8006ad8 <siprintf>
				  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	22c8      	movs	r2, #200	; 0xc8
 8001c44:	4974      	ldr	r1, [pc, #464]	; (8001e18 <main+0x9ec>)
 8001c46:	4875      	ldr	r0, [pc, #468]	; (8001e1c <main+0x9f0>)
 8001c48:	f004 fd08 	bl	800665c <HAL_UART_Transmit>
			  }
			  firstTime = FALSE;
 8001c4c:	4b65      	ldr	r3, [pc, #404]	; (8001de4 <main+0x9b8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
				  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;  // Выключение SysTick
 8001c52:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <main+0x9f4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a72      	ldr	r2, [pc, #456]	; (8001e20 <main+0x9f4>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]
				#endif
			  HAL_TIM_Base_Start_IT(&htim4);  // Перезапуск для начала измерений
 8001c5e:	4871      	ldr	r0, [pc, #452]	; (8001e24 <main+0x9f8>)
 8001c60:	f003 f80e 	bl	8004c80 <HAL_TIM_Base_Start_IT>


	  /*
	   * Подготовка запуска процедуры калибровки
	   */
	  if(HAL_UART_Receive(&huart1, (uint8_t *) uart_buffer, 1, 10) ) {
 8001c64:	230a      	movs	r3, #10
 8001c66:	2201      	movs	r2, #1
 8001c68:	496f      	ldr	r1, [pc, #444]	; (8001e28 <main+0x9fc>)
 8001c6a:	486c      	ldr	r0, [pc, #432]	; (8001e1c <main+0x9f0>)
 8001c6c:	f004 fd88 	bl	8006780 <HAL_UART_Receive>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f43f ad0c 	beq.w	8001690 <main+0x264>
		  if (uart_buffer[0] == 'c' ) {  // Клавиша c нажата ?
 8001c78:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <main+0x9fc>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b63      	cmp	r3, #99	; 0x63
 8001c7e:	d153      	bne.n	8001d28 <main+0x8fc>
			  HAL_UART_Transmit(&huart1, (uint8_t *) CALIBRATE_TEXT, sizeof(CALIBRATE_TEXT), 1000);
 8001c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c84:	2216      	movs	r2, #22
 8001c86:	4969      	ldr	r1, [pc, #420]	; (8001e2c <main+0xa00>)
 8001c88:	4864      	ldr	r0, [pc, #400]	; (8001e1c <main+0x9f0>)
 8001c8a:	f004 fce7 	bl	800665c <HAL_UART_Transmit>
			  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001c8e:	4865      	ldr	r0, [pc, #404]	; (8001e24 <main+0x9f8>)
 8001c90:	f003 f848 	bl	8004d24 <HAL_TIM_Base_Stop_IT>
			  STOP_CAPTURE
 8001c94:	2100      	movs	r1, #0
 8001c96:	4866      	ldr	r0, [pc, #408]	; (8001e30 <main+0xa04>)
 8001c98:	f003 fb2e 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	4864      	ldr	r0, [pc, #400]	; (8001e30 <main+0xa04>)
 8001ca0:	f003 fb2a 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
			  memset(SndBuffer, 0, sizeof(SndBuffer));
 8001ca4:	22c8      	movs	r2, #200	; 0xc8
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	485b      	ldr	r0, [pc, #364]	; (8001e18 <main+0x9ec>)
 8001caa:	f004 ff0d 	bl	8006ac8 <memset>
			  calibrate13 = TRUE;
 8001cae:	4b61      	ldr	r3, [pc, #388]	; (8001e34 <main+0xa08>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
			  calibrate24 = TRUE;
 8001cb4:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <main+0xa0c>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
			  test_flag = FALSE;
 8001cba:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <main+0xa10>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
			  calibrateCount = 0;
 8001cc0:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <main+0xa14>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	801a      	strh	r2, [r3, #0]
			  C_13 = CALIBRATE_START;
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	; (8001e44 <main+0xa18>)
 8001cc8:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001ccc:	801a      	strh	r2, [r3, #0]
			  C_24 = CALIBRATE_START;
 8001cce:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <main+0xa1c>)
 8001cd0:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001cd4:	801a      	strh	r2, [r3, #0]
			  ZX1 = 0;
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <main+0xa20>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
			  ZX2 = 0;
 8001cde:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <main+0xa24>)
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
			  ZY1 = 0;
 8001ce6:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <main+0xa28>)
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
			  ZY2 = 0;
 8001cee:	4b5a      	ldr	r3, [pc, #360]	; (8001e58 <main+0xa2c>)
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
			  DX1.f = 0;
 8001cf6:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <main+0xa30>)
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
			  DY1.f = 0;
 8001cfe:	4b58      	ldr	r3, [pc, #352]	; (8001e60 <main+0xa34>)
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
			  test_cnt = 0;
 8001d06:	4b57      	ldr	r3, [pc, #348]	; (8001e64 <main+0xa38>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
			  calibrateMode = MEASSURE_COUNT * CALIBRATE_TIMES;
 8001d0c:	4b56      	ldr	r3, [pc, #344]	; (8001e68 <main+0xa3c>)
 8001d0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d12:	801a      	strh	r2, [r3, #0]
			  currentMode = 0;
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <main+0xa40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	801a      	strh	r2, [r3, #0]
			  measCount = 0;
 8001d1a:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <main+0xa44>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	801a      	strh	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001d20:	4840      	ldr	r0, [pc, #256]	; (8001e24 <main+0x9f8>)
 8001d22:	f002 ffad 	bl	8004c80 <HAL_TIM_Base_Start_IT>
 8001d26:	e059      	b.n	8001ddc <main+0x9b0>
		  } else {
			  if (uart_buffer[0] == 't' ) {		// Test
 8001d28:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <main+0x9fc>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b74      	cmp	r3, #116	; 0x74
 8001d2e:	d127      	bne.n	8001d80 <main+0x954>
				  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001d30:	483c      	ldr	r0, [pc, #240]	; (8001e24 <main+0x9f8>)
 8001d32:	f002 fff7 	bl	8004d24 <HAL_TIM_Base_Stop_IT>
				  STOP_CAPTURE
 8001d36:	2100      	movs	r1, #0
 8001d38:	483d      	ldr	r0, [pc, #244]	; (8001e30 <main+0xa04>)
 8001d3a:	f003 fadd 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
 8001d3e:	2104      	movs	r1, #4
 8001d40:	483b      	ldr	r0, [pc, #236]	; (8001e30 <main+0xa04>)
 8001d42:	f003 fad9 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
				  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TEXT, sizeof(TEST_TEXT), 1000);
 8001d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	4949      	ldr	r1, [pc, #292]	; (8001e74 <main+0xa48>)
 8001d4e:	4833      	ldr	r0, [pc, #204]	; (8001e1c <main+0x9f0>)
 8001d50:	f004 fc84 	bl	800665c <HAL_UART_Transmit>
				  calibrateMode = 1;
 8001d54:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <main+0xa3c>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	801a      	strh	r2, [r3, #0]
				  calibrateCount = 0;
 8001d5a:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <main+0xa14>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
				  test_flag = TRUE;
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <main+0xa10>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
				  calibrate13 = TRUE;
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <main+0xa08>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
				  calibrate24 = TRUE;
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <main+0xa0c>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
				  measCount = 0;
 8001d72:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <main+0xa44>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	801a      	strh	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001d78:	482a      	ldr	r0, [pc, #168]	; (8001e24 <main+0x9f8>)
 8001d7a:	f002 ff81 	bl	8004c80 <HAL_TIM_Base_Start_IT>
 8001d7e:	e02d      	b.n	8001ddc <main+0x9b0>
			  } else {
				  if (uart_buffer[0] == 'r' ) {		// Terminate calibration && test
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <main+0x9fc>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b72      	cmp	r3, #114	; 0x72
 8001d86:	d129      	bne.n	8001ddc <main+0x9b0>
					  HAL_TIM_Base_Stop_IT(&htim4); // Остановим измерения
 8001d88:	4826      	ldr	r0, [pc, #152]	; (8001e24 <main+0x9f8>)
 8001d8a:	f002 ffcb 	bl	8004d24 <HAL_TIM_Base_Stop_IT>
					  STOP_CAPTURE
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4827      	ldr	r0, [pc, #156]	; (8001e30 <main+0xa04>)
 8001d92:	f003 fab1 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
 8001d96:	2104      	movs	r1, #4
 8001d98:	4825      	ldr	r0, [pc, #148]	; (8001e30 <main+0xa04>)
 8001d9a:	f003 faad 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
					  HAL_UART_Transmit(&huart1, (uint8_t *) TEST_TERMINATE, sizeof(TEST_TERMINATE), 1000);
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	2221      	movs	r2, #33	; 0x21
 8001da4:	4934      	ldr	r1, [pc, #208]	; (8001e78 <main+0xa4c>)
 8001da6:	481d      	ldr	r0, [pc, #116]	; (8001e1c <main+0x9f0>)
 8001da8:	f004 fc58 	bl	800665c <HAL_UART_Transmit>
					  test_flag = 0;
 8001dac:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <main+0xa10>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
					  calibrate13 = TRUE;
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <main+0xa08>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
					  calibrate24 = TRUE;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <main+0xa0c>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
					  calibrateMode = 0;
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <main+0xa3c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	801a      	strh	r2, [r3, #0]
					  calibrateCount = 0;
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <main+0xa14>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	801a      	strh	r2, [r3, #0]
					  measCount = 0;
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <main+0xa44>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]
					  rwFlash(0);		// Чтение параметров калибровки из Flash.
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff f959 	bl	8001088 <rwFlash>
					  HAL_TIM_Base_Start_IT(&htim4); // Запуск измерения
 8001dd6:	4813      	ldr	r0, [pc, #76]	; (8001e24 <main+0x9f8>)
 8001dd8:	f002 ff52 	bl	8004c80 <HAL_TIM_Base_Start_IT>
				  }
			  }
		  }
		  uart_buffer[0] = 0x00;
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <main+0x9fc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
	  if (readyFlag) {
 8001de2:	e455      	b.n	8001690 <main+0x264>
 8001de4:	200009cc 	.word	0x200009cc
 8001de8:	20000228 	.word	0x20000228
 8001dec:	20000238 	.word	0x20000238
 8001df0:	20000188 	.word	0x20000188
 8001df4:	20000198 	.word	0x20000198
 8001df8:	20000728 	.word	0x20000728
 8001dfc:	200003d8 	.word	0x200003d8
 8001e00:	200001b0 	.word	0x200001b0
 8001e04:	200001e0 	.word	0x200001e0
 8001e08:	200001f0 	.word	0x200001f0
 8001e0c:	20000220 	.word	0x20000220
 8001e10:	20000244 	.word	0x20000244
 8001e14:	08008990 	.word	0x08008990
 8001e18:	200000a4 	.word	0x200000a4
 8001e1c:	20000b28 	.word	0x20000b28
 8001e20:	e000e010 	.word	0xe000e010
 8001e24:	20000a30 	.word	0x20000a30
 8001e28:	20000098 	.word	0x20000098
 8001e2c:	08008a00 	.word	0x08008a00
 8001e30:	20000bb8 	.word	0x20000bb8
 8001e34:	200001d4 	.word	0x200001d4
 8001e38:	200003e4 	.word	0x200003e4
 8001e3c:	20000240 	.word	0x20000240
 8001e40:	20000722 	.word	0x20000722
 8001e44:	20000588 	.word	0x20000588
 8001e48:	200001cc 	.word	0x200001cc
 8001e4c:	200001c8 	.word	0x200001c8
 8001e50:	200003e0 	.word	0x200003e0
 8001e54:	2000071c 	.word	0x2000071c
 8001e58:	200009c0 	.word	0x200009c0
 8001e5c:	20000180 	.word	0x20000180
 8001e60:	20000190 	.word	0x20000190
 8001e64:	200009c4 	.word	0x200009c4
 8001e68:	20000720 	.word	0x20000720
 8001e6c:	20000578 	.word	0x20000578
 8001e70:	200001a8 	.word	0x200001a8
 8001e74:	08008a18 	.word	0x08008a18
 8001e78:	08008a28 	.word	0x08008a28

08001e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b090      	sub	sp, #64	; 0x40
 8001e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e82:	f107 0318 	add.w	r3, r7, #24
 8001e86:	2228      	movs	r2, #40	; 0x28
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 fe1c 	bl	8006ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e9e:	230a      	movs	r3, #10
 8001ea0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea6:	2310      	movs	r3, #16
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001eb6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebc:	f107 0318 	add.w	r3, r7, #24
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 f9ed 	bl	80042a0 <HAL_RCC_OscConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001ecc:	f000 fc36 	bl	800273c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2102      	movs	r1, #2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 fc58 	bl	80047a0 <HAL_RCC_ClockConfig>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001ef6:	f000 fc21 	bl	800273c <Error_Handler>
  }
}
 8001efa:	bf00      	nop
 8001efc:	3740      	adds	r7, #64	; 0x40
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <MX_I2C1_Init+0x54>)
 8001f0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <MX_I2C1_Init+0x58>)
 8001f12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f42:	f002 f817 	bl	8003f74 <HAL_I2C_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f4c:	f000 fbf6 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000a78 	.word	0x20000a78
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	000186a0 	.word	0x000186a0

08001f60 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_IWDG_Init+0x2c>)
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <MX_IWDG_Init+0x30>)
 8001f68:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_IWDG_Init+0x2c>)
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_IWDG_Init+0x2c>)
 8001f72:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001f76:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001f78:	4804      	ldr	r0, [pc, #16]	; (8001f8c <MX_IWDG_Init+0x2c>)
 8001f7a:	f002 f93f 	bl	80041fc <HAL_IWDG_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001f84:	f000 fbda 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000acc 	.word	0x20000acc
 8001f90:	40003000 	.word	0x40003000

08001f94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001f9a:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <MX_SPI2_Init+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fe0:	220a      	movs	r2, #10
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fe4:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MX_SPI2_Init+0x64>)
 8001fe6:	f002 fd77 	bl	8004ad8 <HAL_SPI_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ff0:	f000 fba4 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200009d8 	.word	0x200009d8
 8001ffc:	40003800 	.word	0x40003800

08002000 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b096      	sub	sp, #88	; 0x58
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	611a      	str	r2, [r3, #16]
 800202e:	615a      	str	r2, [r3, #20]
 8002030:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2220      	movs	r2, #32
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f004 fd45 	bl	8006ac8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800203e:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002040:	4a61      	ldr	r2, [pc, #388]	; (80021c8 <MX_TIM1_Init+0x1c8>)
 8002042:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002044:	4b5f      	ldr	r3, [pc, #380]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 810;
 8002050:	4b5c      	ldr	r3, [pc, #368]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002052:	f240 322a 	movw	r2, #810	; 0x32a
 8002056:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002058:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 91;
 800205e:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002060:	225b      	movs	r2, #91	; 0x5b
 8002062:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002064:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800206a:	4856      	ldr	r0, [pc, #344]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 800206c:	f002 fdb8 	bl	8004be0 <HAL_TIM_Base_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002076:	f000 fb61 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800207e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002080:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002084:	4619      	mov	r1, r3
 8002086:	484f      	ldr	r0, [pc, #316]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002088:	f003 fc2c 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002092:	f000 fb53 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002096:	484b      	ldr	r0, [pc, #300]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002098:	f002 fe72 	bl	8004d80 <HAL_TIM_OC_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020a2:	f000 fb4b 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 80020a6:	2108      	movs	r1, #8
 80020a8:	4846      	ldr	r0, [pc, #280]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 80020aa:	f003 f9cd 	bl	8005448 <HAL_TIM_OnePulse_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 80020b4:	f000 fb42 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80020b8:	2330      	movs	r3, #48	; 0x30
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020c4:	4619      	mov	r1, r3
 80020c6:	483f      	ldr	r0, [pc, #252]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 80020c8:	f004 f9ba 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80020d2:	f000 fb33 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80020d6:	2330      	movs	r3, #48	; 0x30
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	2200      	movs	r2, #0
 80020f8:	4619      	mov	r1, r3
 80020fa:	4832      	ldr	r0, [pc, #200]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 80020fc:	f003 fb06 	bl	800570c <HAL_TIM_OC_ConfigChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8002106:	f000 fb19 	bl	800273c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0208 	orr.w	r2, r2, #8
 8002118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	2204      	movs	r2, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4828      	ldr	r0, [pc, #160]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002124:	f003 faf2 	bl	800570c <HAL_TIM_OC_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 800212e:	f000 fb05 	bl	800273c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	2208      	movs	r2, #8
 8002148:	4619      	mov	r1, r3
 800214a:	481e      	ldr	r0, [pc, #120]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 800214c:	f003 fade 	bl	800570c <HAL_TIM_OC_ConfigChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002156:	f000 faf1 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800215a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215e:	220c      	movs	r2, #12
 8002160:	4619      	mov	r1, r3
 8002162:	4818      	ldr	r0, [pc, #96]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002164:	f003 fad2 	bl	800570c <HAL_TIM_OC_ConfigChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800216e:	f000 fae5 	bl	800273c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002180:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	4619      	mov	r1, r3
 80021a4:	4807      	ldr	r0, [pc, #28]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 80021a6:	f004 f9a9 	bl	80064fc <HAL_TIMEx_ConfigBreakDeadTime>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 80021b0:	f000 fac4 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <MX_TIM1_Init+0x1c4>)
 80021b6:	f000 fc25 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 80021ba:	bf00      	nop
 80021bc:	3758      	adds	r7, #88	; 0x58
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000b70 	.word	0x20000b70
 80021c8:	40012c00 	.word	0x40012c00

080021cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b090      	sub	sp, #64	; 0x40
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <MX_TIM2_Init+0x128>)
 8002208:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800220c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800220e:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <MX_TIM2_Init+0x128>)
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <MX_TIM2_Init+0x128>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <MX_TIM2_Init+0x128>)
 800221c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002220:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002222:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <MX_TIM2_Init+0x128>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002228:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <MX_TIM2_Init+0x128>)
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800222e:	4831      	ldr	r0, [pc, #196]	; (80022f4 <MX_TIM2_Init+0x128>)
 8002230:	f002 fcd6 	bl	8004be0 <HAL_TIM_Base_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800223a:	f000 fa7f 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002248:	4619      	mov	r1, r3
 800224a:	482a      	ldr	r0, [pc, #168]	; (80022f4 <MX_TIM2_Init+0x128>)
 800224c:	f003 fb4a 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002256:	f000 fa71 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800225a:	4826      	ldr	r0, [pc, #152]	; (80022f4 <MX_TIM2_Init+0x128>)
 800225c:	f002 feee 	bl	800503c <HAL_TIM_IC_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002266:	f000 fa69 	bl	800273c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800226a:	2304      	movs	r3, #4
 800226c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800226e:	2320      	movs	r3, #32
 8002270:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4619      	mov	r1, r3
 8002278:	481e      	ldr	r0, [pc, #120]	; (80022f4 <MX_TIM2_Init+0x128>)
 800227a:	f003 fbf7 	bl	8005a6c <HAL_TIM_SlaveConfigSynchro>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002284:	f000 fa5a 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	4817      	ldr	r0, [pc, #92]	; (80022f4 <MX_TIM2_Init+0x128>)
 8002298:	f004 f8d2 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80022a2:	f000 fa4b 	bl	800273c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022aa:	2301      	movs	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	2200      	movs	r2, #0
 80022ba:	4619      	mov	r1, r3
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <MX_TIM2_Init+0x128>)
 80022be:	f003 fa7d 	bl	80057bc <HAL_TIM_IC_ConfigChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 80022c8:	f000 fa38 	bl	800273c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80022cc:	2302      	movs	r3, #2
 80022ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80022d0:	2302      	movs	r3, #2
 80022d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	2204      	movs	r2, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <MX_TIM2_Init+0x128>)
 80022dc:	f003 fa6e 	bl	80057bc <HAL_TIM_IC_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80022e6:	f000 fa29 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ea:	bf00      	nop
 80022ec:	3740      	adds	r7, #64	; 0x40
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000bb8 	.word	0x20000bb8

080022f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	; 0x30
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fe:	f107 0320 	add.w	r3, r7, #32
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <MX_TIM3_Init+0xd4>)
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <MX_TIM3_Init+0xd8>)
 8002328:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800232a:	4b28      	ldr	r3, [pc, #160]	; (80023cc <MX_TIM3_Init+0xd4>)
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <MX_TIM3_Init+0xd4>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000;
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <MX_TIM3_Init+0xd4>)
 8002338:	f649 4240 	movw	r2, #40000	; 0x9c40
 800233c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233e:	4b23      	ldr	r3, [pc, #140]	; (80023cc <MX_TIM3_Init+0xd4>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <MX_TIM3_Init+0xd4>)
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800234a:	4820      	ldr	r0, [pc, #128]	; (80023cc <MX_TIM3_Init+0xd4>)
 800234c:	f002 fc48 	bl	8004be0 <HAL_TIM_Base_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8002356:	f000 f9f1 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800235a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002360:	f107 0320 	add.w	r3, r7, #32
 8002364:	4619      	mov	r1, r3
 8002366:	4819      	ldr	r0, [pc, #100]	; (80023cc <MX_TIM3_Init+0xd4>)
 8002368:	f003 fabc 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002372:	f000 f9e3 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8002376:	2108      	movs	r1, #8
 8002378:	4814      	ldr	r0, [pc, #80]	; (80023cc <MX_TIM3_Init+0xd4>)
 800237a:	f003 f865 	bl	8005448 <HAL_TIM_OnePulse_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002384:	f000 f9da 	bl	800273c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002388:	2306      	movs	r3, #6
 800238a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	4619      	mov	r1, r3
 8002396:	480d      	ldr	r0, [pc, #52]	; (80023cc <MX_TIM3_Init+0xd4>)
 8002398:	f003 fb68 	bl	8005a6c <HAL_TIM_SlaveConfigSynchro>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80023a2:	f000 f9cb 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80023a6:	2330      	movs	r3, #48	; 0x30
 80023a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <MX_TIM3_Init+0xd4>)
 80023b4:	f004 f844 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80023be:	f000 f9bd 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	3730      	adds	r7, #48	; 0x30
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000ae0 	.word	0x20000ae0
 80023d0:	40000400 	.word	0x40000400

080023d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e8:	463b      	mov	r3, r7
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <MX_TIM4_Init+0x94>)
 80023f2:	4a1e      	ldr	r2, [pc, #120]	; (800246c <MX_TIM4_Init+0x98>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <MX_TIM4_Init+0x94>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <MX_TIM4_Init+0x94>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <MX_TIM4_Init+0x94>)
 8002404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002408:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <MX_TIM4_Init+0x94>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <MX_TIM4_Init+0x94>)
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002416:	4814      	ldr	r0, [pc, #80]	; (8002468 <MX_TIM4_Init+0x94>)
 8002418:	f002 fbe2 	bl	8004be0 <HAL_TIM_Base_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002422:	f000 f98b 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800242c:	f107 0308 	add.w	r3, r7, #8
 8002430:	4619      	mov	r1, r3
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <MX_TIM4_Init+0x94>)
 8002434:	f003 fa56 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800243e:	f000 f97d 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002442:	2320      	movs	r3, #32
 8002444:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800244a:	463b      	mov	r3, r7
 800244c:	4619      	mov	r1, r3
 800244e:	4806      	ldr	r0, [pc, #24]	; (8002468 <MX_TIM4_Init+0x94>)
 8002450:	f003 fff6 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800245a:	f000 f96f 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000a30 	.word	0x20000a30
 800246c:	40000800 	.word	0x40000800

08002470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <MX_USART1_UART_Init+0x4c>)
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <MX_USART1_UART_Init+0x50>)
 8002478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <MX_USART1_UART_Init+0x4c>)
 800247c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_USART1_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MX_USART1_UART_Init+0x4c>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <MX_USART1_UART_Init+0x4c>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <MX_USART1_UART_Init+0x4c>)
 8002496:	220c      	movs	r2, #12
 8002498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <MX_USART1_UART_Init+0x4c>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <MX_USART1_UART_Init+0x4c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_USART1_UART_Init+0x4c>)
 80024a8:	f004 f88b 	bl	80065c2 <HAL_UART_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024b2:	f000 f943 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000b28 	.word	0x20000b28
 80024c0:	40013800 	.word	0x40013800

080024c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <MX_GPIO_Init+0xb8>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a27      	ldr	r2, [pc, #156]	; (800257c <MX_GPIO_Init+0xb8>)
 80024de:	f043 0320 	orr.w	r3, r3, #32
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <MX_GPIO_Init+0xb8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b22      	ldr	r3, [pc, #136]	; (800257c <MX_GPIO_Init+0xb8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a21      	ldr	r2, [pc, #132]	; (800257c <MX_GPIO_Init+0xb8>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <MX_GPIO_Init+0xb8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <MX_GPIO_Init+0xb8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <MX_GPIO_Init+0xb8>)
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <MX_GPIO_Init+0xb8>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|nRst_Pin, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8002526:	4816      	ldr	r0, [pc, #88]	; (8002580 <MX_GPIO_Init+0xbc>)
 8002528:	f001 fd0c 	bl	8003f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 800252c:	2200      	movs	r2, #0
 800252e:	f241 011e 	movw	r1, #4126	; 0x101e
 8002532:	4814      	ldr	r0, [pc, #80]	; (8002584 <MX_GPIO_Init+0xc0>)
 8002534:	f001 fd06 	bl	8003f44 <HAL_GPIO_WritePin>
                          |Z4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin nRst_Pin */
  GPIO_InitStruct.Pin = LED_Pin|nRst_Pin;
 8002538:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800253c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	2301      	movs	r3, #1
 8002540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2302      	movs	r3, #2
 8002548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	4619      	mov	r1, r3
 8002550:	480b      	ldr	r0, [pc, #44]	; (8002580 <MX_GPIO_Init+0xbc>)
 8002552:	f001 fb73 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Z1_Pin Z2_Pin SCSN_Pin Z3_Pin
                           Z4_Pin */
  GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|SCSN_Pin|Z3_Pin
 8002556:	f241 031e 	movw	r3, #4126	; 0x101e
 800255a:	613b      	str	r3, [r7, #16]
                          |Z4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255c:	2301      	movs	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2302      	movs	r3, #2
 8002566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4619      	mov	r1, r3
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_GPIO_Init+0xc0>)
 8002570:	f001 fb64 	bl	8003c3c <HAL_GPIO_Init>

}
 8002574:	bf00      	nop
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	40010800 	.word	0x40010800
 8002584:	40010c00 	.word	0x40010c00

08002588 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim) {
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	if (runFlag > 0) {								// Разрешено измерение ?
 8002590:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_TIM_IC_CaptureCallback+0x180>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80b1 	beq.w	80026fc <HAL_TIM_IC_CaptureCallback+0x174>
		if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	f040 80ab 	bne.w	80026fc <HAL_TIM_IC_CaptureCallback+0x174>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7f1b      	ldrb	r3, [r3, #28]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d004      	beq.n	80025b8 <HAL_TIM_IC_CaptureCallback+0x30>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7f1b      	ldrb	r3, [r3, #28]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	f040 80a2 	bne.w	80026fc <HAL_TIM_IC_CaptureCallback+0x174>
			if ((runFlag < COUNT_FRONT) || ((GPIOA->IDR & GPIO_PIN_0) != 0) ) {  // Ждем фронт первого импульса, дальше обрабатываем все импульсы.
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_TIM_IC_CaptureCallback+0x180>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d906      	bls.n	80025ce <HAL_TIM_IC_CaptureCallback+0x46>
 80025c0:	4b52      	ldr	r3, [pc, #328]	; (800270c <HAL_TIM_IC_CaptureCallback+0x184>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8097 	beq.w	80026fc <HAL_TIM_IC_CaptureCallback+0x174>
				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 ) {  // Активен фронт
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7f1b      	ldrb	r3, [r3, #28]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d10c      	bne.n	80025f0 <HAL_TIM_IC_CaptureCallback+0x68>
					front_sum = front_sum + (uint16_t) (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1) & 0x0FFFF);
 80025d6:	2100      	movs	r1, #0
 80025d8:	484d      	ldr	r0, [pc, #308]	; (8002710 <HAL_TIM_IC_CaptureCallback+0x188>)
 80025da:	f003 fa89 	bl	8005af0 <HAL_TIM_ReadCapturedValue>
 80025de:	4603      	mov	r3, r0
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_TIM_IC_CaptureCallback+0x80>
				} else {   // Активен спад
					front_sum = front_sum + (uint16_t) (HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2) & 0x0FFFF);
 80025f0:	2104      	movs	r1, #4
 80025f2:	4847      	ldr	r0, [pc, #284]	; (8002710 <HAL_TIM_IC_CaptureCallback+0x188>)
 80025f4:	f003 fa7c 	bl	8005af0 <HAL_TIM_ReadCapturedValue>
 80025f8:	4603      	mov	r3, r0
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	4413      	add	r3, r2
 8002602:	b29a      	uxth	r2, r3
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002606:	801a      	strh	r2, [r3, #0]
				}
				runFlag--;
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_TIM_IC_CaptureCallback+0x180>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3b01      	subs	r3, #1
 800260e:	4a3e      	ldr	r2, [pc, #248]	; (8002708 <HAL_TIM_IC_CaptureCallback+0x180>)
 8002610:	6013      	str	r3, [r2, #0]
				if (runFlag == 0) {
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_TIM_IC_CaptureCallback+0x180>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d170      	bne.n	80026fc <HAL_TIM_IC_CaptureCallback+0x174>
					//LED_PULSE
					STOP_CAPTURE
 800261a:	2100      	movs	r1, #0
 800261c:	483c      	ldr	r0, [pc, #240]	; (8002710 <HAL_TIM_IC_CaptureCallback+0x188>)
 800261e:	f002 fe6b 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
 8002622:	2104      	movs	r1, #4
 8002624:	483a      	ldr	r0, [pc, #232]	; (8002710 <HAL_TIM_IC_CaptureCallback+0x188>)
 8002626:	f002 fe67 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
					front_sum = front_sum / COUNT_FRONT - 3600;  // Расчитываем задержку от средины импульсов
 800262a:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	4a3a      	ldr	r2, [pc, #232]	; (8002718 <HAL_TIM_IC_CaptureCallback+0x190>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	08db      	lsrs	r3, r3, #3
 8002636:	b29b      	uxth	r3, r3
 8002638:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b35      	ldr	r3, [pc, #212]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002640:	801a      	strh	r2, [r3, #0]
					if (front_sum > 1500) {		// Ошибка измерения.
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800264a:	4293      	cmp	r3, r2
 800264c:	d903      	bls.n	8002656 <HAL_TIM_IC_CaptureCallback+0xce>
						front_sum = 1500;		// Значение необходимое для калибровки.
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002650:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002654:	801a      	strh	r2, [r3, #0]
					}
					/* Отключим все мультиплексоры */
					receiversOff
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_TIM_IC_CaptureCallback+0x194>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4a30      	ldr	r2, [pc, #192]	; (800271c <HAL_TIM_IC_CaptureCallback+0x194>)
 800265c:	f043 031e 	orr.w	r3, r3, #30
 8002660:	60d3      	str	r3, [r2, #12]
					runFlag = 0;
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_TIM_IC_CaptureCallback+0x180>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
					#ifdef SYSTICK_DISABLE
						SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_TIM_IC_CaptureCallback+0x198>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2c      	ldr	r2, [pc, #176]	; (8002720 <HAL_TIM_IC_CaptureCallback+0x198>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]
					#endif
					switch (currentMode) {
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	3b01      	subs	r3, #1
 800267a:	2b03      	cmp	r3, #3
 800267c:	d83f      	bhi.n	80026fe <HAL_TIM_IC_CaptureCallback+0x176>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	08002695 	.word	0x08002695
 8002688:	080026af 	.word	0x080026af
 800268c:	080026c9 	.word	0x080026c9
 8002690:	080026e3 	.word	0x080026e3
						case 1: { // Z1 > Z3, Z13
							resul_arrayY1[measCount] = front_sum;
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 800269a:	8812      	ldrh	r2, [r2, #0]
 800269c:	4614      	mov	r4, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe faa0 	bl	8000be4 <__aeabi_ui2f>
 80026a4:	4603      	mov	r3, r0
 80026a6:	4a21      	ldr	r2, [pc, #132]	; (800272c <HAL_TIM_IC_CaptureCallback+0x1a4>)
 80026a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80026ac:	e027      	b.n	80026fe <HAL_TIM_IC_CaptureCallback+0x176>
						}
						case 2: { // Z3 > Z1, Z31
							resul_arrayY2[measCount] = front_sum;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 80026b4:	8812      	ldrh	r2, [r2, #0]
 80026b6:	4614      	mov	r4, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fa93 	bl	8000be4 <__aeabi_ui2f>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 80026c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80026c6:	e01a      	b.n	80026fe <HAL_TIM_IC_CaptureCallback+0x176>
						}
						case 3: { // Z2 > Z4 Z24
							resul_arrayX1[measCount] = front_sum;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 80026ce:	8812      	ldrh	r2, [r2, #0]
 80026d0:	4614      	mov	r4, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fa86 	bl	8000be4 <__aeabi_ui2f>
 80026d8:	4603      	mov	r3, r0
 80026da:	4a16      	ldr	r2, [pc, #88]	; (8002734 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 80026dc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80026e0:	e00d      	b.n	80026fe <HAL_TIM_IC_CaptureCallback+0x176>
						}
						case 4: { // Z4 > Z2 Z42
							resul_arrayX2[measCount] = front_sum;
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 80026e8:	8812      	ldrh	r2, [r2, #0]
 80026ea:	4614      	mov	r4, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fa79 	bl	8000be4 <__aeabi_ui2f>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4a10      	ldr	r2, [pc, #64]	; (8002738 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 80026f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
							break;
 80026fa:	e000      	b.n	80026fe <HAL_TIM_IC_CaptureCallback+0x176>
						}
					}
				}
 80026fc:	bf00      	nop
			}
		}
	}
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	20000230 	.word	0x20000230
 800270c:	40010800 	.word	0x40010800
 8002710:	20000bb8 	.word	0x20000bb8
 8002714:	20000218 	.word	0x20000218
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	40010c00 	.word	0x40010c00
 8002720:	e000e010 	.word	0xe000e010
 8002724:	20000578 	.word	0x20000578
 8002728:	200001a8 	.word	0x200001a8
 800272c:	20000244 	.word	0x20000244
 8002730:	20000730 	.word	0x20000730
 8002734:	200003e8 	.word	0x200003e8
 8002738:	2000058c 	.word	0x2000058c

0800273c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
}
 8002742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002744:	e7fe      	b.n	8002744 <Error_Handler+0x8>
	...

08002748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_MspInit+0x5c>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_MspInit+0x5c>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6193      	str	r3, [r2, #24]
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_MspInit+0x5c>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <HAL_MspInit+0x5c>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_MspInit+0x5c>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	61d3      	str	r3, [r2, #28]
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_MspInit+0x5c>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_MspInit+0x60>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_MspInit+0x60>)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010000 	.word	0x40010000

080027ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_I2C_MspInit+0x90>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d132      	bne.n	8002832 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_I2C_MspInit+0x94>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <HAL_I2C_MspInit+0x94>)
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_I2C_MspInit+0x94>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ea:	2312      	movs	r3, #18
 80027ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4812      	ldr	r0, [pc, #72]	; (8002844 <HAL_I2C_MspInit+0x98>)
 80027fa:	f001 fa1f 	bl	8003c3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_I2C_MspInit+0x9c>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
 8002814:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <HAL_I2C_MspInit+0x9c>)
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_I2C_MspInit+0x94>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4a08      	ldr	r2, [pc, #32]	; (8002840 <HAL_I2C_MspInit+0x94>)
 8002820:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002824:	61d3      	str	r3, [r2, #28]
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_I2C_MspInit+0x94>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002832:	bf00      	nop
 8002834:	3728      	adds	r7, #40	; 0x28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40005400 	.word	0x40005400
 8002840:	40021000 	.word	0x40021000
 8002844:	40010c00 	.word	0x40010c00
 8002848:	40010000 	.word	0x40010000

0800284c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <HAL_SPI_MspInit+0x8c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d131      	bne.n	80028d0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_SPI_MspInit+0x90>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_SPI_MspInit+0x90>)
 8002872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002876:	61d3      	str	r3, [r2, #28]
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_SPI_MspInit+0x90>)
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_SPI_MspInit+0x90>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_SPI_MspInit+0x90>)
 800288a:	f043 0308 	orr.w	r3, r3, #8
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_SPI_MspInit+0x90>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800289c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80028a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	4619      	mov	r1, r3
 80028b0:	480b      	ldr	r0, [pc, #44]	; (80028e0 <HAL_SPI_MspInit+0x94>)
 80028b2:	f001 f9c3 	bl	8003c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80028b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	4619      	mov	r1, r3
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <HAL_SPI_MspInit+0x94>)
 80028cc:	f001 f9b6 	bl	8003c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028d0:	bf00      	nop
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40003800 	.word	0x40003800
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40010c00 	.word	0x40010c00

080028e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0320 	add.w	r3, r7, #32
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a3c      	ldr	r2, [pc, #240]	; (80029f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10c      	bne.n	800291e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002904:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a3a      	ldr	r2, [pc, #232]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 800290a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b38      	ldr	r3, [pc, #224]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800291c:	e064      	b.n	80029e8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d12c      	bne.n	8002982 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002928:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a31      	ldr	r2, [pc, #196]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	61d3      	str	r3, [r2, #28]
 8002934:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002958:	2301      	movs	r3, #1
 800295a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	f107 0320 	add.w	r3, r7, #32
 8002968:	4619      	mov	r1, r3
 800296a:	4823      	ldr	r0, [pc, #140]	; (80029f8 <HAL_TIM_Base_MspInit+0x114>)
 800296c:	f001 f966 	bl	8003c3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	201c      	movs	r0, #28
 8002976:	f000 ff26 	bl	80037c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800297a:	201c      	movs	r0, #28
 800297c:	f000 ff3f 	bl	80037fe <HAL_NVIC_EnableIRQ>
}
 8002980:	e032      	b.n	80029e8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM3)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_TIM_Base_MspInit+0x118>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d114      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 8002992:	f043 0302 	orr.w	r3, r3, #2
 8002996:	61d3      	str	r3, [r2, #28]
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2100      	movs	r1, #0
 80029a8:	201d      	movs	r0, #29
 80029aa:	f000 ff0c 	bl	80037c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029ae:	201d      	movs	r0, #29
 80029b0:	f000 ff25 	bl	80037fe <HAL_NVIC_EnableIRQ>
}
 80029b4:	e018      	b.n	80029e8 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a11      	ldr	r2, [pc, #68]	; (8002a00 <HAL_TIM_Base_MspInit+0x11c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d113      	bne.n	80029e8 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	61d3      	str	r3, [r2, #28]
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_TIM_Base_MspInit+0x110>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029d8:	2200      	movs	r2, #0
 80029da:	2100      	movs	r1, #0
 80029dc:	201e      	movs	r0, #30
 80029de:	f000 fef2 	bl	80037c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029e2:	201e      	movs	r0, #30
 80029e4:	f000 ff0b 	bl	80037fe <HAL_NVIC_EnableIRQ>
}
 80029e8:	bf00      	nop
 80029ea:	3730      	adds	r7, #48	; 0x30
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40012c00 	.word	0x40012c00
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40010800 	.word	0x40010800
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40000800 	.word	0x40000800

08002a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0310 	add.w	r3, r7, #16
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <HAL_TIM_MspPostInit+0x5c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d118      	bne.n	8002a56 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_TIM_MspPostInit+0x60>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <HAL_TIM_MspPostInit+0x60>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6193      	str	r3, [r2, #24]
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_TIM_MspPostInit+0x60>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = OUTZ1_Pin|OUTZ2_Pin|OUTZ3_Pin|OUTZ4_Pin;
 8002a3c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 0310 	add.w	r3, r7, #16
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_TIM_MspPostInit+0x64>)
 8002a52:	f001 f8f3 	bl	8003c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a56:	bf00      	nop
 8002a58:	3720      	adds	r7, #32
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40012c00 	.word	0x40012c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010800 	.word	0x40010800

08002a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <HAL_UART_MspInit+0xa4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d13d      	bne.n	8002b08 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a8c:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_UART_MspInit+0xa8>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <HAL_UART_MspInit+0xa8>)
 8002a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a96:	6193      	str	r3, [r2, #24]
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_UART_MspInit+0xa8>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_UART_MspInit+0xa8>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <HAL_UART_MspInit+0xa8>)
 8002aaa:	f043 0308 	orr.w	r3, r3, #8
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_UART_MspInit+0xa8>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002abc:	2340      	movs	r3, #64	; 0x40
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	4619      	mov	r1, r3
 8002ace:	4812      	ldr	r0, [pc, #72]	; (8002b18 <HAL_UART_MspInit+0xac>)
 8002ad0:	f001 f8b4 	bl	8003c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480c      	ldr	r0, [pc, #48]	; (8002b18 <HAL_UART_MspInit+0xac>)
 8002ae8:	f001 f8a8 	bl	8003c3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_UART_MspInit+0xb0>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
 8002b02:	4a06      	ldr	r2, [pc, #24]	; (8002b1c <HAL_UART_MspInit+0xb0>)
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40010c00 	.word	0x40010c00
 8002b1c:	40010000 	.word	0x40010000

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <NMI_Handler+0x4>

08002b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <HardFault_Handler+0x4>

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <MemManage_Handler+0x4>

08002b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <BusFault_Handler+0x4>

08002b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <UsageFault_Handler+0x4>

08002b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
	...

08002b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint16_t ticks = 0;
	ticks++;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <SysTick_Handler+0x2c>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <SysTick_Handler+0x2c>)
 8002b72:	801a      	strh	r2, [r3, #0]
	if(ticks >= 1000) {
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <SysTick_Handler+0x2c>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7c:	d304      	bcc.n	8002b88 <SysTick_Handler+0x24>
		DHCP_time_handler();
 8002b7e:	f7fe fa75 	bl	800106c <DHCP_time_handler>
		ticks = 0;
 8002b82:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <SysTick_Handler+0x2c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b88:	f000 fd14 	bl	80035b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	2000016c 	.word	0x2000016c

08002b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b98:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <TIM2_IRQHandler+0x10>)
 8002b9a:	f002 fcae 	bl	80054fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000bb8 	.word	0x20000bb8

08002ba8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//HAL_TIM_Base_Stop_IT(&htim3);
	runFlag = COUNT_FRONT;		// Сработал таймер сброса таймера захвата, начинаем измерение.
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <TIM3_IRQHandler+0x14>)
 8002bae:	220a      	movs	r2, #10
 8002bb0:	601a      	str	r2, [r3, #0]
	//LED_PULSE
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bb2:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <TIM3_IRQHandler+0x18>)
 8002bb4:	f002 fca1 	bl	80054fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000230 	.word	0x20000230
 8002bc0:	20000ae0 	.word	0x20000ae0
 8002bc4:	00000000 	.word	0x00000000

08002bc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b092      	sub	sp, #72	; 0x48
 8002bcc:	af00      	add	r7, sp, #0
	#else
	double Vm[3];
	uint8_t countV;
	#endif
	#ifdef SYSTICK_DISABLE
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <TIM4_IRQHandler+0x228>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a87      	ldr	r2, [pc, #540]	; (8002df0 <TIM4_IRQHandler+0x228>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6013      	str	r3, [r2, #0]
	#endif

		front_sum = 0;
 8002bda:	4b86      	ldr	r3, [pc, #536]	; (8002df4 <TIM4_IRQHandler+0x22c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	801a      	strh	r2, [r3, #0]
		runFlag = 0;
 8002be0:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <TIM4_IRQHandler+0x230>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8002be6:	2100      	movs	r1, #0
 8002be8:	4884      	ldr	r0, [pc, #528]	; (8002dfc <TIM4_IRQHandler+0x234>)
 8002bea:	f002 f9c3 	bl	8004f74 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_2);
 8002bee:	2104      	movs	r1, #4
 8002bf0:	4882      	ldr	r0, [pc, #520]	; (8002dfc <TIM4_IRQHandler+0x234>)
 8002bf2:	f002 f9bf 	bl	8004f74 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_3);
 8002bf6:	2108      	movs	r1, #8
 8002bf8:	4880      	ldr	r0, [pc, #512]	; (8002dfc <TIM4_IRQHandler+0x234>)
 8002bfa:	f002 f9bb 	bl	8004f74 <HAL_TIM_OC_Stop>
		HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_4);
 8002bfe:	210c      	movs	r1, #12
 8002c00:	487e      	ldr	r0, [pc, #504]	; (8002dfc <TIM4_IRQHandler+0x234>)
 8002c02:	f002 f9b7 	bl	8004f74 <HAL_TIM_OC_Stop>

		/* Отключим все мультиплексоры */
		receiversOff
 8002c06:	4b7e      	ldr	r3, [pc, #504]	; (8002e00 <TIM4_IRQHandler+0x238>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	4a7d      	ldr	r2, [pc, #500]	; (8002e00 <TIM4_IRQHandler+0x238>)
 8002c0c:	f043 031e 	orr.w	r3, r3, #30
 8002c10:	60d3      	str	r3, [r2, #12]
		STOP_CAPTURE	// If not stop in callback.
 8002c12:	2100      	movs	r1, #0
 8002c14:	487b      	ldr	r0, [pc, #492]	; (8002e04 <TIM4_IRQHandler+0x23c>)
 8002c16:	f002 fb6f 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
 8002c1a:	2104      	movs	r1, #4
 8002c1c:	4879      	ldr	r0, [pc, #484]	; (8002e04 <TIM4_IRQHandler+0x23c>)
 8002c1e:	f002 fb6b 	bl	80052f8 <HAL_TIM_IC_Stop_IT>
		/* Set all timer channels for output mode */
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002c22:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <TIM4_IRQHandler+0x240>)
 8002c24:	685b      	ldr	r3, [r3, #4]
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8002c26:	f423 436e 	bic.w	r3, r3, #60928	; 0xee00
 8002c2a:	f023 03ee 	bic.w	r3, r3, #238	; 0xee
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002c2e:	4a76      	ldr	r2, [pc, #472]	; (8002e08 <TIM4_IRQHandler+0x240>)
				| (GPIO_CRH_CNF8_1 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF10_1 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF11_1 | GPIO_CRH_MODE11_1);
 8002c30:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8002c34:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
		GPIOA->CRH = (GPIOA->CRH & ~(GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0 | GPIO_CRH_CNF10_0 | GPIO_CRH_CNF11_0))
 8002c38:	6053      	str	r3, [r2, #4]

		/* Управление циклом опроса */
		if (currentMode >= CHANNELS) {
 8002c3a:	4b74      	ldr	r3, [pc, #464]	; (8002e0c <TIM4_IRQHandler+0x244>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d908      	bls.n	8002c54 <TIM4_IRQHandler+0x8c>
			currentMode = 0;
 8002c42:	4b72      	ldr	r3, [pc, #456]	; (8002e0c <TIM4_IRQHandler+0x244>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	801a      	strh	r2, [r3, #0]
			measCount++;  // Следующее измерение.
 8002c48:	4b71      	ldr	r3, [pc, #452]	; (8002e10 <TIM4_IRQHandler+0x248>)
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <TIM4_IRQHandler+0x248>)
 8002c52:	801a      	strh	r2, [r3, #0]
		}
		//LED_PULSE
		if ((measCount == MEASSURE_COUNT) && (calibrateMode == 0)) {
 8002c54:	4b6e      	ldr	r3, [pc, #440]	; (8002e10 <TIM4_IRQHandler+0x248>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	2b64      	cmp	r3, #100	; 0x64
 8002c5a:	f040 833f 	bne.w	80032dc <TIM4_IRQHandler+0x714>
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <TIM4_IRQHandler+0x24c>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f040 833a 	bne.w	80032dc <TIM4_IRQHandler+0x714>
			//LED_PULSE
			//HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
			#ifdef SYSTICK_DISABLE
			SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <TIM4_IRQHandler+0x228>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a60      	ldr	r2, [pc, #384]	; (8002df0 <TIM4_IRQHandler+0x228>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6013      	str	r3, [r2, #0]
			#endif
			HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 8002c74:	4868      	ldr	r0, [pc, #416]	; (8002e18 <TIM4_IRQHandler+0x250>)
 8002c76:	f002 f855 	bl	8004d24 <HAL_TIM_Base_Stop_IT>
			Vmax = 0;
 8002c7a:	4968      	ldr	r1, [pc, #416]	; (8002e1c <TIM4_IRQHandler+0x254>)
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9c1 2300 	strd	r2, r3, [r1]
			Xmax = 0;
 8002c88:	4965      	ldr	r1, [pc, #404]	; (8002e20 <TIM4_IRQHandler+0x258>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9c1 2300 	strd	r2, r3, [r1]
			Ymax = 0;
 8002c96:	4963      	ldr	r1, [pc, #396]	; (8002e24 <TIM4_IRQHandler+0x25c>)
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum1 = 0;
 8002ca4:	4960      	ldr	r1, [pc, #384]	; (8002e28 <TIM4_IRQHandler+0x260>)
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum1 = 0;
 8002cb2:	495e      	ldr	r1, [pc, #376]	; (8002e2c <TIM4_IRQHandler+0x264>)
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9c1 2300 	strd	r2, r3, [r1]
			#ifdef MEDIAN_FILTER_ENABLE
			/* Фильтр для всех значений */
			X1m[0] = 0; X1m[1] = 0; X1m[2] = 0; countX1 = 0;
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			Y1m[0] = 0; Y1m[1] = 0; Y1m[2] = 0; countY1 = 0;
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9c7 2300 	strd	r2, r3, [r7]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			#else
			/* Фильтр только для максимальной скорости */
			Vm[0] = 0; Vm[1] = 0; Vm[2] = 0; countV = 0;
			#endif
			//LED_PULSE
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 8002d14:	2314      	movs	r3, #20
 8002d16:	643b      	str	r3, [r7, #64]	; 0x40
 8002d18:	e1cf      	b.n	80030ba <TIM4_IRQHandler+0x4f2>
				// Медианный фильтр для X
				#ifdef MEDIAN_FILTER_ENABLE
				X1m[countX1] = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
 8002d1a:	4a45      	ldr	r2, [pc, #276]	; (8002e30 <TIM4_IRQHandler+0x268>)
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002d22:	4a44      	ldr	r2, [pc, #272]	; (8002e34 <TIM4_IRQHandler+0x26c>)
 8002d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2a:	4a43      	ldr	r2, [pc, #268]	; (8002e38 <TIM4_IRQHandler+0x270>)
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd ffaf 	bl	8000c94 <__aeabi_fmul>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7fd fea0 	bl	8000a80 <__aeabi_fsub>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fb66 	bl	8000418 <__aeabi_f2d>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	00e1      	lsls	r1, r4, #3
 8002d52:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002d56:	4401      	add	r1, r0
 8002d58:	3930      	subs	r1, #48	; 0x30
 8002d5a:	e9c1 2300 	strd	r2, r3, [r1]
				if (++countX1 >= 3) countX1 = 0;
 8002d5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d62:	3301      	adds	r3, #1
 8002d64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d902      	bls.n	8002d76 <TIM4_IRQHandler+0x1ae>
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				XX1 = (X1m[0] < X1m[1]) ? ((X1m[1] < X1m[2]) ? X1m[1] : ((X1m[2] < X1m[0]) ? X1m[0] : X1m[2])) : ((X1m[0] < X1m[2]) ? X1m[0] : ((X1m[2] < X1m[1]) ? X1m[1] : X1m[2]));
 8002d76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d7e:	f7fd fe15 	bl	80009ac <__aeabi_dcmplt>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01a      	beq.n	8002dbe <TIM4_IRQHandler+0x1f6>
 8002d88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d90:	f7fd fe0c 	bl	80009ac <__aeabi_dcmplt>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <TIM4_IRQHandler+0x1d8>
 8002d9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d9e:	e04f      	b.n	8002e40 <TIM4_IRQHandler+0x278>
 8002da0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da8:	f7fd fe00 	bl	80009ac <__aeabi_dcmplt>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <TIM4_IRQHandler+0x1f0>
 8002db2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db6:	e043      	b.n	8002e40 <TIM4_IRQHandler+0x278>
 8002db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dbc:	e040      	b.n	8002e40 <TIM4_IRQHandler+0x278>
 8002dbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc6:	f7fd fdf1 	bl	80009ac <__aeabi_dcmplt>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <TIM4_IRQHandler+0x20e>
 8002dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd4:	e034      	b.n	8002e40 <TIM4_IRQHandler+0x278>
 8002dd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dde:	f7fd fde5 	bl	80009ac <__aeabi_dcmplt>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d029      	beq.n	8002e3c <TIM4_IRQHandler+0x274>
 8002de8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dec:	e028      	b.n	8002e40 <TIM4_IRQHandler+0x278>
 8002dee:	bf00      	nop
 8002df0:	e000e010 	.word	0xe000e010
 8002df4:	20000218 	.word	0x20000218
 8002df8:	20000230 	.word	0x20000230
 8002dfc:	20000b70 	.word	0x20000b70
 8002e00:	40010c00 	.word	0x40010c00
 8002e04:	20000bb8 	.word	0x20000bb8
 8002e08:	40010800 	.word	0x40010800
 8002e0c:	20000578 	.word	0x20000578
 8002e10:	200001a8 	.word	0x200001a8
 8002e14:	20000720 	.word	0x20000720
 8002e18:	20000a30 	.word	0x20000a30
 8002e1c:	200001a0 	.word	0x200001a0
 8002e20:	200001b8 	.word	0x200001b8
 8002e24:	20000580 	.word	0x20000580
 8002e28:	200001c0 	.word	0x200001c0
 8002e2c:	200001e8 	.word	0x200001e8
 8002e30:	200003e8 	.word	0x200003e8
 8002e34:	2000058c 	.word	0x2000058c
 8002e38:	20000180 	.word	0x20000180
 8002e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e40:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
				#else
				XX1 = resul_arrayX1[ii] - resul_arrayX2[ii] * DX1.f;
				#endif
				Xsum1 = Xsum1 + XX1;
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <TIM4_IRQHandler+0x368>)
 8002e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e4e:	f7fd f985 	bl	800015c <__adddf3>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4936      	ldr	r1, [pc, #216]	; (8002f30 <TIM4_IRQHandler+0x368>)
 8002e58:	e9c1 2300 	strd	r2, r3, [r1]

				// Медианный фильтр для Y
				#ifdef MEDIAN_FILTER_ENABLE
				Y1m[countY1] = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
 8002e5c:	4a35      	ldr	r2, [pc, #212]	; (8002f34 <TIM4_IRQHandler+0x36c>)
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002e64:	4a34      	ldr	r2, [pc, #208]	; (8002f38 <TIM4_IRQHandler+0x370>)
 8002e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6c:	4a33      	ldr	r2, [pc, #204]	; (8002f3c <TIM4_IRQHandler+0x374>)
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd ff0e 	bl	8000c94 <__aeabi_fmul>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f7fd fdff 	bl	8000a80 <__aeabi_fsub>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fac5 	bl	8000418 <__aeabi_f2d>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	00e1      	lsls	r1, r4, #3
 8002e94:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002e98:	4401      	add	r1, r0
 8002e9a:	3948      	subs	r1, #72	; 0x48
 8002e9c:	e9c1 2300 	strd	r2, r3, [r1]
				if (++countY1 >= 3) countY1 = 0;
 8002ea0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002eaa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d902      	bls.n	8002eb8 <TIM4_IRQHandler+0x2f0>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				YY1 = (Y1m[0] < Y1m[1]) ? ((Y1m[1] < Y1m[2]) ? Y1m[1] : ((Y1m[2] < Y1m[0]) ? Y1m[0] : Y1m[2])) : ((Y1m[0] < Y1m[2]) ? Y1m[0] : ((Y1m[2] < Y1m[1]) ? Y1m[1] : Y1m[2]));
 8002eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec0:	f7fd fd74 	bl	80009ac <__aeabi_dcmplt>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01a      	beq.n	8002f00 <TIM4_IRQHandler+0x338>
 8002eca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ece:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ed2:	f7fd fd6b 	bl	80009ac <__aeabi_dcmplt>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <TIM4_IRQHandler+0x31a>
 8002edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee0:	e030      	b.n	8002f44 <TIM4_IRQHandler+0x37c>
 8002ee2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eea:	f7fd fd5f 	bl	80009ac <__aeabi_dcmplt>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <TIM4_IRQHandler+0x332>
 8002ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ef8:	e024      	b.n	8002f44 <TIM4_IRQHandler+0x37c>
 8002efa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002efe:	e021      	b.n	8002f44 <TIM4_IRQHandler+0x37c>
 8002f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f08:	f7fd fd50 	bl	80009ac <__aeabi_dcmplt>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <TIM4_IRQHandler+0x350>
 8002f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f16:	e015      	b.n	8002f44 <TIM4_IRQHandler+0x37c>
 8002f18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f20:	f7fd fd44 	bl	80009ac <__aeabi_dcmplt>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <TIM4_IRQHandler+0x378>
 8002f2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f2e:	e009      	b.n	8002f44 <TIM4_IRQHandler+0x37c>
 8002f30:	200001c0 	.word	0x200001c0
 8002f34:	20000244 	.word	0x20000244
 8002f38:	20000730 	.word	0x20000730
 8002f3c:	20000190 	.word	0x20000190
 8002f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				#else
				YY1 = resul_arrayY1[ii] - resul_arrayY2[ii] * DY1.f;
				#endif
				Ysum1 = Ysum1 + YY1;
 8002f48:	4baf      	ldr	r3, [pc, #700]	; (8003208 <TIM4_IRQHandler+0x640>)
 8002f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f52:	f7fd f903 	bl	800015c <__adddf3>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	49ab      	ldr	r1, [pc, #684]	; (8003208 <TIM4_IRQHandler+0x640>)
 8002f5c:	e9c1 2300 	strd	r2, r3, [r1]

				X = XX1;
 8002f60:	49aa      	ldr	r1, [pc, #680]	; (800320c <TIM4_IRQHandler+0x644>)
 8002f62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f66:	e9c1 2300 	strd	r2, r3, [r1]
				Y = YY1;
 8002f6a:	49a9      	ldr	r1, [pc, #676]	; (8003210 <TIM4_IRQHandler+0x648>)
 8002f6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f70:	e9c1 2300 	strd	r2, r3, [r1]
				V = sqrt(pow(X, 2) + pow(Y, 2));
 8002f74:	4ba5      	ldr	r3, [pc, #660]	; (800320c <TIM4_IRQHandler+0x644>)
 8002f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f82:	f004 fa11 	bl	80073a8 <pow>
 8002f86:	4604      	mov	r4, r0
 8002f88:	460d      	mov	r5, r1
 8002f8a:	4ba1      	ldr	r3, [pc, #644]	; (8003210 <TIM4_IRQHandler+0x648>)
 8002f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f98:	f004 fa06 	bl	80073a8 <pow>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7fd f8da 	bl	800015c <__adddf3>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f004 faa6 	bl	8007500 <sqrt>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4996      	ldr	r1, [pc, #600]	; (8003214 <TIM4_IRQHandler+0x64c>)
 8002fba:	e9c1 2300 	strd	r2, r3, [r1]
				Vm[countV] = V;
				if (++countV >= 3) countV = 0;
				V = (Vm[0] < Vm[1]) ? ((Vm[1] < Vm[2]) ? Vm[1] : ((Vm[2] < Vm[0]) ? Vm[0] : Vm[2])) : ((Vm[0] < Vm[2]) ? Vm[0] : ((Vm[2] < Vm[1]) ? Vm[1] : Vm[2]));
				#endif

				if ( V > Vmax) {
 8002fbe:	4b95      	ldr	r3, [pc, #596]	; (8003214 <TIM4_IRQHandler+0x64c>)
 8002fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fc4:	4b94      	ldr	r3, [pc, #592]	; (8003218 <TIM4_IRQHandler+0x650>)
 8002fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fca:	f7fd fd0d 	bl	80009e8 <__aeabi_dcmpgt>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <TIM4_IRQHandler+0x418>
					Vmax = V;
 8002fd4:	4b8f      	ldr	r3, [pc, #572]	; (8003214 <TIM4_IRQHandler+0x64c>)
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	498f      	ldr	r1, [pc, #572]	; (8003218 <TIM4_IRQHandler+0x650>)
 8002fdc:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(X) > Xmax) {
 8002fe0:	4b8a      	ldr	r3, [pc, #552]	; (800320c <TIM4_IRQHandler+0x644>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f7fd fd1d 	bl	8000a28 <__aeabi_d2iz>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bfb8      	it	lt
 8002ff4:	425b      	neglt	r3, r3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd f9fc 	bl	80003f4 <__aeabi_i2d>
 8002ffc:	4b87      	ldr	r3, [pc, #540]	; (800321c <TIM4_IRQHandler+0x654>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f7fd fcf1 	bl	80009e8 <__aeabi_dcmpgt>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d012      	beq.n	8003032 <TIM4_IRQHandler+0x46a>
					Xmax = abs(X);
 800300c:	4b7f      	ldr	r3, [pc, #508]	; (800320c <TIM4_IRQHandler+0x644>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f7fd fd07 	bl	8000a28 <__aeabi_d2iz>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	bfb8      	it	lt
 8003020:	425b      	neglt	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd f9e6 	bl	80003f4 <__aeabi_i2d>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	497b      	ldr	r1, [pc, #492]	; (800321c <TIM4_IRQHandler+0x654>)
 800302e:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (abs(Y) > Ymax) {
 8003032:	4b77      	ldr	r3, [pc, #476]	; (8003210 <TIM4_IRQHandler+0x648>)
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	f7fd fcf4 	bl	8000a28 <__aeabi_d2iz>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	bfb8      	it	lt
 8003046:	425b      	neglt	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd f9d3 	bl	80003f4 <__aeabi_i2d>
 800304e:	4b74      	ldr	r3, [pc, #464]	; (8003220 <TIM4_IRQHandler+0x658>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f7fd fcc8 	bl	80009e8 <__aeabi_dcmpgt>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d012      	beq.n	8003084 <TIM4_IRQHandler+0x4bc>
					Ymax = abs(Y);
 800305e:	4b6c      	ldr	r3, [pc, #432]	; (8003210 <TIM4_IRQHandler+0x648>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f7fd fcde 	bl	8000a28 <__aeabi_d2iz>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	bfb8      	it	lt
 8003072:	425b      	neglt	r3, r3
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd f9bd 	bl	80003f4 <__aeabi_i2d>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4968      	ldr	r1, [pc, #416]	; (8003220 <TIM4_IRQHandler+0x658>)
 8003080:	e9c1 2300 	strd	r2, r3, [r1]
				}
				resul_arrayX1[ii] = 0;
 8003084:	4a67      	ldr	r2, [pc, #412]	; (8003224 <TIM4_IRQHandler+0x65c>)
 8003086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003088:	f04f 0100 	mov.w	r1, #0
 800308c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayX2[ii] = 0;
 8003090:	4a65      	ldr	r2, [pc, #404]	; (8003228 <TIM4_IRQHandler+0x660>)
 8003092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY1[ii] = 0;
 800309c:	4a63      	ldr	r2, [pc, #396]	; (800322c <TIM4_IRQHandler+0x664>)
 800309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a0:	f04f 0100 	mov.w	r1, #0
 80030a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				resul_arrayY2[ii] = 0;
 80030a8:	4a61      	ldr	r2, [pc, #388]	; (8003230 <TIM4_IRQHandler+0x668>)
 80030aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ac:	f04f 0100 	mov.w	r1, #0
 80030b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int ii = PREFETCH; ii < MEASSURE_COUNT; ii++) {
 80030b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b6:	3301      	adds	r3, #1
 80030b8:	643b      	str	r3, [r7, #64]	; 0x40
 80030ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030bc:	2b63      	cmp	r3, #99	; 0x63
 80030be:	f77f ae2c 	ble.w	8002d1a <TIM4_IRQHandler+0x152>
			}
			Xsum = Xsum1;
 80030c2:	4b5c      	ldr	r3, [pc, #368]	; (8003234 <TIM4_IRQHandler+0x66c>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	495b      	ldr	r1, [pc, #364]	; (8003238 <TIM4_IRQHandler+0x670>)
 80030ca:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по X
 80030ce:	4b5a      	ldr	r3, [pc, #360]	; (8003238 <TIM4_IRQHandler+0x670>)
 80030d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	4b58      	ldr	r3, [pc, #352]	; (800323c <TIM4_IRQHandler+0x674>)
 80030da:	f7fd fb1f 	bl	800071c <__aeabi_ddiv>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4955      	ldr	r1, [pc, #340]	; (8003238 <TIM4_IRQHandler+0x670>)
 80030e4:	e9c1 2300 	strd	r2, r3, [r1]
			Xsum = Xsum / SPEED_CALIBRATE;	// Скорость по X
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <TIM4_IRQHandler+0x670>)
 80030ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ee:	a344      	add	r3, pc, #272	; (adr r3, 8003200 <TIM4_IRQHandler+0x638>)
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f7fd fb12 	bl	800071c <__aeabi_ddiv>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	494e      	ldr	r1, [pc, #312]	; (8003238 <TIM4_IRQHandler+0x670>)
 80030fe:	e9c1 2300 	strd	r2, r3, [r1]

			Ysum = Ysum1;
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <TIM4_IRQHandler+0x640>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	494d      	ldr	r1, [pc, #308]	; (8003240 <TIM4_IRQHandler+0x678>)
 800310a:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / ((MEASSURE_COUNT - PREFETCH));		// Среднее количество тактов по Y
 800310e:	4b4c      	ldr	r3, [pc, #304]	; (8003240 <TIM4_IRQHandler+0x678>)
 8003110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	4b48      	ldr	r3, [pc, #288]	; (800323c <TIM4_IRQHandler+0x674>)
 800311a:	f7fd faff 	bl	800071c <__aeabi_ddiv>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4947      	ldr	r1, [pc, #284]	; (8003240 <TIM4_IRQHandler+0x678>)
 8003124:	e9c1 2300 	strd	r2, r3, [r1]
			Ysum = Ysum / SPEED_CALIBRATE;	// Скорость по Y
 8003128:	4b45      	ldr	r3, [pc, #276]	; (8003240 <TIM4_IRQHandler+0x678>)
 800312a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800312e:	a334      	add	r3, pc, #208	; (adr r3, 8003200 <TIM4_IRQHandler+0x638>)
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	f7fd faf2 	bl	800071c <__aeabi_ddiv>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4940      	ldr	r1, [pc, #256]	; (8003240 <TIM4_IRQHandler+0x678>)
 800313e:	e9c1 2300 	strd	r2, r3, [r1]

			Vmaxfin = Vmax / SPEED_CALIBRATE;	// Максимальная скорость за время MEASSURE_COUNT
 8003142:	4b35      	ldr	r3, [pc, #212]	; (8003218 <TIM4_IRQHandler+0x650>)
 8003144:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003148:	a32d      	add	r3, pc, #180	; (adr r3, 8003200 <TIM4_IRQHandler+0x638>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f7fd fae5 	bl	800071c <__aeabi_ddiv>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	493b      	ldr	r1, [pc, #236]	; (8003244 <TIM4_IRQHandler+0x67c>)
 8003158:	e9c1 2300 	strd	r2, r3, [r1]
			Xmaxfin = Xmax / SPEED_CALIBRATE;
 800315c:	4b2f      	ldr	r3, [pc, #188]	; (800321c <TIM4_IRQHandler+0x654>)
 800315e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003162:	a327      	add	r3, pc, #156	; (adr r3, 8003200 <TIM4_IRQHandler+0x638>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f7fd fad8 	bl	800071c <__aeabi_ddiv>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4935      	ldr	r1, [pc, #212]	; (8003248 <TIM4_IRQHandler+0x680>)
 8003172:	e9c1 2300 	strd	r2, r3, [r1]
			Ymaxfin = Ymax / SPEED_CALIBRATE;
 8003176:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <TIM4_IRQHandler+0x658>)
 8003178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800317c:	a320      	add	r3, pc, #128	; (adr r3, 8003200 <TIM4_IRQHandler+0x638>)
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f7fd facb 	bl	800071c <__aeabi_ddiv>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4930      	ldr	r1, [pc, #192]	; (800324c <TIM4_IRQHandler+0x684>)
 800318c:	e9c1 2300 	strd	r2, r3, [r1]
			V = sqrt(pow(Xsum, 2) + pow(Ysum, 2));  // Скалярное значение скорости
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <TIM4_IRQHandler+0x670>)
 8003192:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800319e:	f004 f903 	bl	80073a8 <pow>
 80031a2:	4604      	mov	r4, r0
 80031a4:	460d      	mov	r5, r1
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <TIM4_IRQHandler+0x678>)
 80031a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031b4:	f004 f8f8 	bl	80073a8 <pow>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4620      	mov	r0, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	f7fc ffcc 	bl	800015c <__adddf3>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	f004 f998 	bl	8007500 <sqrt>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	490f      	ldr	r1, [pc, #60]	; (8003214 <TIM4_IRQHandler+0x64c>)
 80031d6:	e9c1 2300 	strd	r2, r3, [r1]
			if ( V == 0) {
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <TIM4_IRQHandler+0x64c>)
 80031dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f7fd fbd6 	bl	8000998 <__aeabi_dcmpeq>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d033      	beq.n	800325a <TIM4_IRQHandler+0x692>
			  A = 0;
 80031f2:	4917      	ldr	r1, [pc, #92]	; (8003250 <TIM4_IRQHandler+0x688>)
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e02a      	b.n	8003254 <TIM4_IRQHandler+0x68c>
 80031fe:	bf00      	nop
 8003200:	e0000000 	.word	0xe0000000
 8003204:	40451851 	.word	0x40451851
 8003208:	200001e8 	.word	0x200001e8
 800320c:	200009d0 	.word	0x200009d0
 8003210:	200001d8 	.word	0x200001d8
 8003214:	20000228 	.word	0x20000228
 8003218:	200001a0 	.word	0x200001a0
 800321c:	200001b8 	.word	0x200001b8
 8003220:	20000580 	.word	0x20000580
 8003224:	200003e8 	.word	0x200003e8
 8003228:	2000058c 	.word	0x2000058c
 800322c:	20000244 	.word	0x20000244
 8003230:	20000730 	.word	0x20000730
 8003234:	200001c0 	.word	0x200001c0
 8003238:	20000238 	.word	0x20000238
 800323c:	40540000 	.word	0x40540000
 8003240:	20000188 	.word	0x20000188
 8003244:	20000198 	.word	0x20000198
 8003248:	20000728 	.word	0x20000728
 800324c:	200003d8 	.word	0x200003d8
 8003250:	200001b0 	.word	0x200001b0
 8003254:	e9c1 2300 	strd	r2, r3, [r1]
 8003258:	e039      	b.n	80032ce <TIM4_IRQHandler+0x706>
			} else {
				A = acos( Ysum / V ) * 180 / 3.1415926; // Угол
 800325a:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <TIM4_IRQHandler+0x850>)
 800325c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003260:	4b6e      	ldr	r3, [pc, #440]	; (800341c <TIM4_IRQHandler+0x854>)
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	f7fd fa59 	bl	800071c <__aeabi_ddiv>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f004 f86b 	bl	800734c <acos>
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	4b69      	ldr	r3, [pc, #420]	; (8003420 <TIM4_IRQHandler+0x858>)
 800327c:	f7fd f924 	bl	80004c8 <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	a361      	add	r3, pc, #388	; (adr r3, 8003410 <TIM4_IRQHandler+0x848>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd fa45 	bl	800071c <__aeabi_ddiv>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4963      	ldr	r1, [pc, #396]	; (8003424 <TIM4_IRQHandler+0x85c>)
 8003298:	e9c1 2300 	strd	r2, r3, [r1]
				if (Xsum < 0) {
 800329c:	4b62      	ldr	r3, [pc, #392]	; (8003428 <TIM4_IRQHandler+0x860>)
 800329e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f7fd fb7f 	bl	80009ac <__aeabi_dcmplt>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00c      	beq.n	80032ce <TIM4_IRQHandler+0x706>
					A = 360 - A; // III, IV квадранты
 80032b4:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <TIM4_IRQHandler+0x85c>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f04f 0000 	mov.w	r0, #0
 80032be:	495b      	ldr	r1, [pc, #364]	; (800342c <TIM4_IRQHandler+0x864>)
 80032c0:	f7fc ff4a 	bl	8000158 <__aeabi_dsub>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4956      	ldr	r1, [pc, #344]	; (8003424 <TIM4_IRQHandler+0x85c>)
 80032ca:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			measCount = 0;
 80032ce:	4b58      	ldr	r3, [pc, #352]	; (8003430 <TIM4_IRQHandler+0x868>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	801a      	strh	r2, [r3, #0]
			readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 80032d4:	4b57      	ldr	r3, [pc, #348]	; (8003434 <TIM4_IRQHandler+0x86c>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e091      	b.n	8003400 <TIM4_IRQHandler+0x838>
		} else {
			if ((calibrateMode > 0) && (measCount == 1)) {  // Режим калибровки/тестирования
 80032dc:	4b56      	ldr	r3, [pc, #344]	; (8003438 <TIM4_IRQHandler+0x870>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <TIM4_IRQHandler+0x744>
 80032e4:	4b52      	ldr	r3, [pc, #328]	; (8003430 <TIM4_IRQHandler+0x868>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10f      	bne.n	800330c <TIM4_IRQHandler+0x744>
				HAL_TIM_Base_Stop_IT(&htim4);  // Остановим измерения на время обработки
 80032ec:	4853      	ldr	r0, [pc, #332]	; (800343c <TIM4_IRQHandler+0x874>)
 80032ee:	f001 fd19 	bl	8004d24 <HAL_TIM_Base_Stop_IT>
				measCount = 0;
 80032f2:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <TIM4_IRQHandler+0x868>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	801a      	strh	r2, [r3, #0]
				#ifdef SYSTICK_DISABLE
					SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  // Включение SysTick
 80032f8:	4b51      	ldr	r3, [pc, #324]	; (8003440 <TIM4_IRQHandler+0x878>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a50      	ldr	r2, [pc, #320]	; (8003440 <TIM4_IRQHandler+0x878>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6013      	str	r3, [r2, #0]
				#endif
				readyFlag = TRUE;  // Разрешаем обработку в основном цикле.
 8003304:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <TIM4_IRQHandler+0x86c>)
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e079      	b.n	8003400 <TIM4_IRQHandler+0x838>
			} else {
				switch (currentMode++) {
 800330c:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <TIM4_IRQHandler+0x87c>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	b291      	uxth	r1, r2
 8003314:	4a4b      	ldr	r2, [pc, #300]	; (8003444 <TIM4_IRQHandler+0x87c>)
 8003316:	8011      	strh	r1, [r2, #0]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d869      	bhi.n	80033f0 <TIM4_IRQHandler+0x828>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <TIM4_IRQHandler+0x75c>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003335 	.word	0x08003335
 8003328:	0800336f 	.word	0x0800336f
 800332c:	0800339d 	.word	0x0800339d
 8003330:	080033c3 	.word	0x080033c3
					case 0: { 					// Z1 (transmit) > Z3 (receive) Y1
						LED_PULSE
 8003334:	2201      	movs	r2, #1
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	4843      	ldr	r0, [pc, #268]	; (8003448 <TIM4_IRQHandler+0x880>)
 800333a:	f000 fe03 	bl	8003f44 <HAL_GPIO_WritePin>
 800333e:	2200      	movs	r2, #0
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	4841      	ldr	r0, [pc, #260]	; (8003448 <TIM4_IRQHandler+0x880>)
 8003344:	f000 fdfe 	bl	8003f44 <HAL_GPIO_WritePin>
						setZ3receive 			// Turn on multiplexer for input Z2 channel.
 8003348:	4b40      	ldr	r3, [pc, #256]	; (800344c <TIM4_IRQHandler+0x884>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a3f      	ldr	r2, [pc, #252]	; (800344c <TIM4_IRQHandler+0x884>)
 800334e:	f023 0308 	bic.w	r3, r3, #8
 8003352:	60d3      	str	r3, [r2, #12]
 8003354:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <TIM4_IRQHandler+0x880>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800335c:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <TIM4_IRQHandler+0x880>)
 800335e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003362:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1); // Генерация для пьезокристалла в первом канале
 8003364:	2100      	movs	r1, #0
 8003366:	483a      	ldr	r0, [pc, #232]	; (8003450 <TIM4_IRQHandler+0x888>)
 8003368:	f001 fd62 	bl	8004e30 <HAL_TIM_OC_Start>
						break;
 800336c:	e040      	b.n	80033f0 <TIM4_IRQHandler+0x828>
					}
					case 1: { 					// Z3 (transmit) > Z1 (receive) Y2
						//LED_PULSE
						TIM3->ARR = C_24; 		// Коррекция для таймера запуска измерения Z24, Z42
 800336e:	4b39      	ldr	r3, [pc, #228]	; (8003454 <TIM4_IRQHandler+0x88c>)
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	4b39      	ldr	r3, [pc, #228]	; (8003458 <TIM4_IRQHandler+0x890>)
 8003374:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ1receive 			// Turn on multiplexer for input Z1 channel.
 8003376:	4b35      	ldr	r3, [pc, #212]	; (800344c <TIM4_IRQHandler+0x884>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4a34      	ldr	r2, [pc, #208]	; (800344c <TIM4_IRQHandler+0x884>)
 800337c:	f023 0302 	bic.w	r3, r3, #2
 8003380:	60d3      	str	r3, [r2, #12]
 8003382:	4b31      	ldr	r3, [pc, #196]	; (8003448 <TIM4_IRQHandler+0x880>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f023 030f 	bic.w	r3, r3, #15
 800338a:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <TIM4_IRQHandler+0x880>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // Генерация для пьезокристалла во втором канале
 8003392:	2108      	movs	r1, #8
 8003394:	482e      	ldr	r0, [pc, #184]	; (8003450 <TIM4_IRQHandler+0x888>)
 8003396:	f001 fd4b 	bl	8004e30 <HAL_TIM_OC_Start>
						break;
 800339a:	e029      	b.n	80033f0 <TIM4_IRQHandler+0x828>
					}
					case 2: { 					// Z2 (transmit) > Z4 (receive) X1
						//LED_PULSE
						setZ4receive 			// Turn on multiplexer for input Z4 channel.
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <TIM4_IRQHandler+0x884>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a2a      	ldr	r2, [pc, #168]	; (800344c <TIM4_IRQHandler+0x884>)
 80033a2:	f023 0310 	bic.w	r3, r3, #16
 80033a6:	60d3      	str	r3, [r2, #12]
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <TIM4_IRQHandler+0x880>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033b0:	4a25      	ldr	r2, [pc, #148]	; (8003448 <TIM4_IRQHandler+0x880>)
 80033b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b6:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);	// Генерация для пьезокристалла в третьем канале
 80033b8:	2104      	movs	r1, #4
 80033ba:	4825      	ldr	r0, [pc, #148]	; (8003450 <TIM4_IRQHandler+0x888>)
 80033bc:	f001 fd38 	bl	8004e30 <HAL_TIM_OC_Start>
						break;
 80033c0:	e016      	b.n	80033f0 <TIM4_IRQHandler+0x828>
					}
					case 3: { 					// Z4 (transmit) > Z3 (receive) X2
						//LED_PULSE
						TIM3->ARR = C_13; 		// Коррекция для таймера запуска измерения Z13, Z31
 80033c2:	4b26      	ldr	r3, [pc, #152]	; (800345c <TIM4_IRQHandler+0x894>)
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <TIM4_IRQHandler+0x890>)
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c
						setZ2receive 			// Turn on multiplexer for input Z3 channel.
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <TIM4_IRQHandler+0x884>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4a1f      	ldr	r2, [pc, #124]	; (800344c <TIM4_IRQHandler+0x884>)
 80033d0:	f023 0304 	bic.w	r3, r3, #4
 80033d4:	60d3      	str	r3, [r2, #12]
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <TIM4_IRQHandler+0x880>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033de:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <TIM4_IRQHandler+0x880>)
 80033e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e4:	6053      	str	r3, [r2, #4]
						HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);	// Генерация для пьезокристалла в четвертом канале
 80033e6:	210c      	movs	r1, #12
 80033e8:	4819      	ldr	r0, [pc, #100]	; (8003450 <TIM4_IRQHandler+0x888>)
 80033ea:	f001 fd21 	bl	8004e30 <HAL_TIM_OC_Start>
						break;
 80033ee:	bf00      	nop
					}
				}
				/* Запускаем таймер захвата */
				START_CAPTURE
 80033f0:	2100      	movs	r1, #0
 80033f2:	481b      	ldr	r0, [pc, #108]	; (8003460 <TIM4_IRQHandler+0x898>)
 80033f4:	f001 fe7a 	bl	80050ec <HAL_TIM_IC_Start_IT>
 80033f8:	2104      	movs	r1, #4
 80033fa:	4819      	ldr	r0, [pc, #100]	; (8003460 <TIM4_IRQHandler+0x898>)
 80033fc:	f001 fe76 	bl	80050ec <HAL_TIM_IC_Start_IT>
			}
		}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003400:	480e      	ldr	r0, [pc, #56]	; (800343c <TIM4_IRQHandler+0x874>)
 8003402:	f002 f87a 	bl	80054fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	3748      	adds	r7, #72	; 0x48
 800340a:	46bd      	mov	sp, r7
 800340c:	bdb0      	pop	{r4, r5, r7, pc}
 800340e:	bf00      	nop
 8003410:	4d12d84a 	.word	0x4d12d84a
 8003414:	400921fb 	.word	0x400921fb
 8003418:	20000188 	.word	0x20000188
 800341c:	20000228 	.word	0x20000228
 8003420:	40668000 	.word	0x40668000
 8003424:	200001b0 	.word	0x200001b0
 8003428:	20000238 	.word	0x20000238
 800342c:	40768000 	.word	0x40768000
 8003430:	200001a8 	.word	0x200001a8
 8003434:	20000184 	.word	0x20000184
 8003438:	20000720 	.word	0x20000720
 800343c:	20000a30 	.word	0x20000a30
 8003440:	e000e010 	.word	0xe000e010
 8003444:	20000578 	.word	0x20000578
 8003448:	40010800 	.word	0x40010800
 800344c:	40010c00 	.word	0x40010c00
 8003450:	20000b70 	.word	0x20000b70
 8003454:	200001cc 	.word	0x200001cc
 8003458:	40000400 	.word	0x40000400
 800345c:	20000588 	.word	0x20000588
 8003460:	20000bb8 	.word	0x20000bb8

08003464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <_sbrk+0x5c>)
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <_sbrk+0x60>)
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003478:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <_sbrk+0x64>)
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <_sbrk+0x68>)
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <_sbrk+0x64>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d207      	bcs.n	80034a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003494:	f003 faee 	bl	8006a74 <__errno>
 8003498:	4603      	mov	r3, r0
 800349a:	220c      	movs	r2, #12
 800349c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034a2:	e009      	b.n	80034b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <_sbrk+0x64>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <_sbrk+0x64>)
 80034b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20005000 	.word	0x20005000
 80034c4:	00000400 	.word	0x00000400
 80034c8:	20000170 	.word	0x20000170
 80034cc:	20000c40 	.word	0x20000c40

080034d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034dc:	480c      	ldr	r0, [pc, #48]	; (8003510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034de:	490d      	ldr	r1, [pc, #52]	; (8003514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034e0:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e4:	e002      	b.n	80034ec <LoopCopyDataInit>

080034e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ea:	3304      	adds	r3, #4

080034ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f0:	d3f9      	bcc.n	80034e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034f4:	4c0a      	ldr	r4, [pc, #40]	; (8003520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f8:	e001      	b.n	80034fe <LoopFillZerobss>

080034fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034fc:	3204      	adds	r2, #4

080034fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003500:	d3fb      	bcc.n	80034fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003502:	f7ff ffe5 	bl	80034d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003506:	f003 fabb 	bl	8006a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800350a:	f7fd ff8f 	bl	800142c <main>
  bx lr
 800350e:	4770      	bx	lr
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003518:	08008af0 	.word	0x08008af0
  ldr r2, =_sbss
 800351c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003520:	20000c40 	.word	0x20000c40

08003524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC1_2_IRQHandler>
	...

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_Init+0x28>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <HAL_Init+0x28>)
 8003532:	f043 0310 	orr.w	r3, r3, #16
 8003536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003538:	2003      	movs	r0, #3
 800353a:	f000 f939 	bl	80037b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800353e:	2000      	movs	r0, #0
 8003540:	f000 f808 	bl	8003554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003544:	f7ff f900 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_InitTick+0x54>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_InitTick+0x58>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4619      	mov	r1, r3
 8003566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800356a:	fbb3 f3f1 	udiv	r3, r3, r1
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f955 	bl	8003822 <HAL_SYSTICK_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e00e      	b.n	80035a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b0f      	cmp	r3, #15
 8003586:	d80a      	bhi.n	800359e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003588:	2200      	movs	r2, #0
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003590:	f000 f919 	bl	80037c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003594:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <HAL_InitTick+0x5c>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	e000      	b.n	80035a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000000 	.word	0x20000000
 80035ac:	20000008 	.word	0x20000008
 80035b0:	20000004 	.word	0x20000004

080035b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_IncTick+0x1c>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_IncTick+0x20>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	4a03      	ldr	r2, [pc, #12]	; (80035d4 <HAL_IncTick+0x20>)
 80035c6:	6013      	str	r3, [r2, #0]
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	20000008 	.word	0x20000008
 80035d4:	20000c08 	.word	0x20000c08

080035d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return uwTick;
 80035dc:	4b02      	ldr	r3, [pc, #8]	; (80035e8 <HAL_GetTick+0x10>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	20000c08 	.word	0x20000c08

080035ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <__NVIC_SetPriorityGrouping+0x44>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003608:	4013      	ands	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800361e:	4a04      	ldr	r2, [pc, #16]	; (8003630 <__NVIC_SetPriorityGrouping+0x44>)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	60d3      	str	r3, [r2, #12]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <__NVIC_GetPriorityGrouping+0x18>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	0a1b      	lsrs	r3, r3, #8
 800363e:	f003 0307 	and.w	r3, r3, #7
}
 8003642:	4618      	mov	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	2b00      	cmp	r3, #0
 8003660:	db0b      	blt.n	800367a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	f003 021f 	and.w	r2, r3, #31
 8003668:	4906      	ldr	r1, [pc, #24]	; (8003684 <__NVIC_EnableIRQ+0x34>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	2001      	movs	r0, #1
 8003672:	fa00 f202 	lsl.w	r2, r0, r2
 8003676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	e000e100 	.word	0xe000e100

08003688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003698:	2b00      	cmp	r3, #0
 800369a:	db0a      	blt.n	80036b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	490c      	ldr	r1, [pc, #48]	; (80036d4 <__NVIC_SetPriority+0x4c>)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	0112      	lsls	r2, r2, #4
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	440b      	add	r3, r1
 80036ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036b0:	e00a      	b.n	80036c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4908      	ldr	r1, [pc, #32]	; (80036d8 <__NVIC_SetPriority+0x50>)
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	3b04      	subs	r3, #4
 80036c0:	0112      	lsls	r2, r2, #4
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	440b      	add	r3, r1
 80036c6:	761a      	strb	r2, [r3, #24]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000e100 	.word	0xe000e100
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f1c3 0307 	rsb	r3, r3, #7
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf28      	it	cs
 80036fa:	2304      	movcs	r3, #4
 80036fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3304      	adds	r3, #4
 8003702:	2b06      	cmp	r3, #6
 8003704:	d902      	bls.n	800370c <NVIC_EncodePriority+0x30>
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3b03      	subs	r3, #3
 800370a:	e000      	b.n	800370e <NVIC_EncodePriority+0x32>
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	401a      	ands	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43d9      	mvns	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	4313      	orrs	r3, r2
         );
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003744:	f3bf 8f4f 	dsb	sy
}
 8003748:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <__NVIC_SystemReset+0x24>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003752:	4904      	ldr	r1, [pc, #16]	; (8003764 <__NVIC_SystemReset+0x24>)
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <__NVIC_SystemReset+0x28>)
 8003756:	4313      	orrs	r3, r2
 8003758:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800375a:	f3bf 8f4f 	dsb	sy
}
 800375e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003760:	bf00      	nop
 8003762:	e7fd      	b.n	8003760 <__NVIC_SystemReset+0x20>
 8003764:	e000ed00 	.word	0xe000ed00
 8003768:	05fa0004 	.word	0x05fa0004

0800376c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3b01      	subs	r3, #1
 8003778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800377c:	d301      	bcc.n	8003782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800377e:	2301      	movs	r3, #1
 8003780:	e00f      	b.n	80037a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <SysTick_Config+0x40>)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3b01      	subs	r3, #1
 8003788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800378a:	210f      	movs	r1, #15
 800378c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003790:	f7ff ff7a 	bl	8003688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <SysTick_Config+0x40>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800379a:	4b04      	ldr	r3, [pc, #16]	; (80037ac <SysTick_Config+0x40>)
 800379c:	2207      	movs	r2, #7
 800379e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	e000e010 	.word	0xe000e010

080037b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ff17 	bl	80035ec <__NVIC_SetPriorityGrouping>
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b086      	sub	sp, #24
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	4603      	mov	r3, r0
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037d8:	f7ff ff2c 	bl	8003634 <__NVIC_GetPriorityGrouping>
 80037dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	6978      	ldr	r0, [r7, #20]
 80037e4:	f7ff ff7a 	bl	80036dc <NVIC_EncodePriority>
 80037e8:	4602      	mov	r2, r0
 80037ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff49 	bl	8003688 <__NVIC_SetPriority>
}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	4603      	mov	r3, r0
 8003806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff ff1f 	bl	8003650 <__NVIC_EnableIRQ>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800381e:	f7ff ff8f 	bl	8003740 <__NVIC_SystemReset>

08003822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ff9e 	bl	800376c <SysTick_Config>
 8003830:	4603      	mov	r3, r0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800383c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003856:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_FLASH_Program+0xd8>)
 8003858:	7e1b      	ldrb	r3, [r3, #24]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_FLASH_Program+0x26>
 800385e:	2302      	movs	r3, #2
 8003860:	e054      	b.n	800390c <HAL_FLASH_Program+0xd0>
 8003862:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <HAL_FLASH_Program+0xd8>)
 8003864:	2201      	movs	r2, #1
 8003866:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003868:	f24c 3050 	movw	r0, #50000	; 0xc350
 800386c:	f000 f8a8 	bl	80039c0 <FLASH_WaitForLastOperation>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d144      	bne.n	8003904 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d102      	bne.n	8003886 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003880:	2301      	movs	r3, #1
 8003882:	757b      	strb	r3, [r7, #21]
 8003884:	e007      	b.n	8003896 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d102      	bne.n	8003892 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800388c:	2302      	movs	r3, #2
 800388e:	757b      	strb	r3, [r7, #21]
 8003890:	e001      	b.n	8003896 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003892:	2304      	movs	r3, #4
 8003894:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003896:	2300      	movs	r3, #0
 8003898:	75bb      	strb	r3, [r7, #22]
 800389a:	e02d      	b.n	80038f8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800389c:	7dbb      	ldrb	r3, [r7, #22]
 800389e:	005a      	lsls	r2, r3, #1
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	eb02 0c03 	add.w	ip, r2, r3
 80038a6:	7dbb      	ldrb	r3, [r7, #22]
 80038a8:	0119      	lsls	r1, r3, #4
 80038aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ae:	f1c1 0620 	rsb	r6, r1, #32
 80038b2:	f1a1 0020 	sub.w	r0, r1, #32
 80038b6:	fa22 f401 	lsr.w	r4, r2, r1
 80038ba:	fa03 f606 	lsl.w	r6, r3, r6
 80038be:	4334      	orrs	r4, r6
 80038c0:	fa23 f000 	lsr.w	r0, r3, r0
 80038c4:	4304      	orrs	r4, r0
 80038c6:	fa23 f501 	lsr.w	r5, r3, r1
 80038ca:	b2a3      	uxth	r3, r4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4660      	mov	r0, ip
 80038d0:	f000 f85a 	bl	8003988 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038d8:	f000 f872 	bl	80039c0 <FLASH_WaitForLastOperation>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_FLASH_Program+0xdc>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4a0c      	ldr	r2, [pc, #48]	; (8003918 <HAL_FLASH_Program+0xdc>)
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d107      	bne.n	8003902 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80038f2:	7dbb      	ldrb	r3, [r7, #22]
 80038f4:	3301      	adds	r3, #1
 80038f6:	75bb      	strb	r3, [r7, #22]
 80038f8:	7dba      	ldrb	r2, [r7, #22]
 80038fa:	7d7b      	ldrb	r3, [r7, #21]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d3cd      	bcc.n	800389c <HAL_FLASH_Program+0x60>
 8003900:	e000      	b.n	8003904 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003902:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_FLASH_Program+0xd8>)
 8003906:	2200      	movs	r2, #0
 8003908:	761a      	strb	r2, [r3, #24]

  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003914:	20000c10 	.word	0x20000c10
 8003918:	40022000 	.word	0x40022000

0800391c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <HAL_FLASH_Unlock+0x40>)
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_FLASH_Unlock+0x40>)
 8003934:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <HAL_FLASH_Unlock+0x44>)
 8003936:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <HAL_FLASH_Unlock+0x40>)
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <HAL_FLASH_Unlock+0x48>)
 800393c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_FLASH_Unlock+0x40>)
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800394e:	79fb      	ldrb	r3, [r7, #7]
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40022000 	.word	0x40022000
 8003960:	45670123 	.word	0x45670123
 8003964:	cdef89ab 	.word	0xcdef89ab

08003968 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_FLASH_Lock+0x1c>)
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HAL_FLASH_Lock+0x1c>)
 8003972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003976:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40022000 	.word	0x40022000

08003988 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003994:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <FLASH_Program_HalfWord+0x30>)
 8003996:	2200      	movs	r2, #0
 8003998:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <FLASH_Program_HalfWord+0x34>)
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	4a07      	ldr	r2, [pc, #28]	; (80039bc <FLASH_Program_HalfWord+0x34>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	887a      	ldrh	r2, [r7, #2]
 80039aa:	801a      	strh	r2, [r3, #0]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000c10 	.word	0x20000c10
 80039bc:	40022000 	.word	0x40022000

080039c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80039c8:	f7ff fe06 	bl	80035d8 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80039ce:	e010      	b.n	80039f2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d6:	d00c      	beq.n	80039f2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <FLASH_WaitForLastOperation+0x2e>
 80039de:	f7ff fdfb 	bl	80035d8 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d201      	bcs.n	80039f2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e025      	b.n	8003a3e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <FLASH_WaitForLastOperation+0x88>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e8      	bne.n	80039d0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80039fe:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <FLASH_WaitForLastOperation+0x88>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <FLASH_WaitForLastOperation+0x88>)
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a10:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <FLASH_WaitForLastOperation+0x88>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <FLASH_WaitForLastOperation+0x88>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d105      	bne.n	8003a34 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <FLASH_WaitForLastOperation+0x88>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a34:	f000 f80a 	bl	8003a4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40022000 	.word	0x40022000

08003a4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <FLASH_SetErrorCode+0x98>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a62:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <FLASH_SetErrorCode+0x9c>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <FLASH_SetErrorCode+0x9c>)
 8003a6c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f043 0310 	orr.w	r3, r3, #16
 8003a74:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a76:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <FLASH_SetErrorCode+0x98>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <FLASH_SetErrorCode+0x9c>)
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <FLASH_SetErrorCode+0x9c>)
 8003a8c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f043 0304 	orr.w	r3, r3, #4
 8003a94:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003a96:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <FLASH_SetErrorCode+0x98>)
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <FLASH_SetErrorCode+0x9c>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <FLASH_SetErrorCode+0x9c>)
 8003aac:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <FLASH_SetErrorCode+0x98>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <FLASH_SetErrorCode+0x98>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f240 1201 	movw	r2, #257	; 0x101
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d106      	bne.n	8003ad2 <FLASH_SetErrorCode+0x86>
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <FLASH_SetErrorCode+0x98>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4a06      	ldr	r2, [pc, #24]	; (8003ae4 <FLASH_SetErrorCode+0x98>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	61d3      	str	r3, [r2, #28]
}  
 8003ad0:	e002      	b.n	8003ad8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003ad2:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <FLASH_SetErrorCode+0x98>)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60d3      	str	r3, [r2, #12]
}  
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40022000 	.word	0x40022000
 8003ae8:	20000c10 	.word	0x20000c10

08003aec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003afe:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <HAL_FLASHEx_Erase+0xd0>)
 8003b00:	7e1b      	ldrb	r3, [r3, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_FLASHEx_Erase+0x1e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e053      	b.n	8003bb2 <HAL_FLASHEx_Erase+0xc6>
 8003b0a:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <HAL_FLASHEx_Erase+0xd0>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d116      	bne.n	8003b46 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b1c:	f7ff ff50 	bl	80039c0 <FLASH_WaitForLastOperation>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d141      	bne.n	8003baa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003b26:	2001      	movs	r0, #1
 8003b28:	f000 f84c 	bl	8003bc4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b30:	f7ff ff46 	bl	80039c0 <FLASH_WaitForLastOperation>
 8003b34:	4603      	mov	r3, r0
 8003b36:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_FLASHEx_Erase+0xd4>)
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_FLASHEx_Erase+0xd4>)
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	6113      	str	r3, [r2, #16]
 8003b44:	e031      	b.n	8003baa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b4a:	f7ff ff39 	bl	80039c0 <FLASH_WaitForLastOperation>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d12a      	bne.n	8003baa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b5a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	e019      	b.n	8003b98 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003b64:	68b8      	ldr	r0, [r7, #8]
 8003b66:	f000 f849 	bl	8003bfc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b6e:	f7ff ff27 	bl	80039c0 <FLASH_WaitForLastOperation>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_FLASHEx_Erase+0xd4>)
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	4a11      	ldr	r2, [pc, #68]	; (8003bc0 <HAL_FLASHEx_Erase+0xd4>)
 8003b7c:	f023 0302 	bic.w	r3, r3, #2
 8003b80:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	601a      	str	r2, [r3, #0]
            break;
 8003b8e:	e00c      	b.n	8003baa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b96:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	029a      	lsls	r2, r3, #10
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3dc      	bcc.n	8003b64 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003baa:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <HAL_FLASHEx_Erase+0xd0>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	761a      	strb	r2, [r3, #24]

  return status;
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000c10 	.word	0x20000c10
 8003bc0:	40022000 	.word	0x40022000

08003bc4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <FLASH_MassErase+0x30>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <FLASH_MassErase+0x34>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <FLASH_MassErase+0x34>)
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <FLASH_MassErase+0x34>)
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	4a05      	ldr	r2, [pc, #20]	; (8003bf8 <FLASH_MassErase+0x34>)
 8003be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	20000c10 	.word	0x20000c10
 8003bf8:	40022000 	.word	0x40022000

08003bfc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <FLASH_PageErase+0x38>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <FLASH_PageErase+0x3c>)
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <FLASH_PageErase+0x3c>)
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <FLASH_PageErase+0x3c>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <FLASH_PageErase+0x3c>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <FLASH_PageErase+0x3c>)
 8003c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c26:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000c10 	.word	0x20000c10
 8003c38:	40022000 	.word	0x40022000

08003c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b08b      	sub	sp, #44	; 0x2c
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c4e:	e169      	b.n	8003f24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c50:	2201      	movs	r2, #1
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	f040 8158 	bne.w	8003f1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4a9a      	ldr	r2, [pc, #616]	; (8003edc <HAL_GPIO_Init+0x2a0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d05e      	beq.n	8003d36 <HAL_GPIO_Init+0xfa>
 8003c78:	4a98      	ldr	r2, [pc, #608]	; (8003edc <HAL_GPIO_Init+0x2a0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d875      	bhi.n	8003d6a <HAL_GPIO_Init+0x12e>
 8003c7e:	4a98      	ldr	r2, [pc, #608]	; (8003ee0 <HAL_GPIO_Init+0x2a4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d058      	beq.n	8003d36 <HAL_GPIO_Init+0xfa>
 8003c84:	4a96      	ldr	r2, [pc, #600]	; (8003ee0 <HAL_GPIO_Init+0x2a4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d86f      	bhi.n	8003d6a <HAL_GPIO_Init+0x12e>
 8003c8a:	4a96      	ldr	r2, [pc, #600]	; (8003ee4 <HAL_GPIO_Init+0x2a8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d052      	beq.n	8003d36 <HAL_GPIO_Init+0xfa>
 8003c90:	4a94      	ldr	r2, [pc, #592]	; (8003ee4 <HAL_GPIO_Init+0x2a8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d869      	bhi.n	8003d6a <HAL_GPIO_Init+0x12e>
 8003c96:	4a94      	ldr	r2, [pc, #592]	; (8003ee8 <HAL_GPIO_Init+0x2ac>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d04c      	beq.n	8003d36 <HAL_GPIO_Init+0xfa>
 8003c9c:	4a92      	ldr	r2, [pc, #584]	; (8003ee8 <HAL_GPIO_Init+0x2ac>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d863      	bhi.n	8003d6a <HAL_GPIO_Init+0x12e>
 8003ca2:	4a92      	ldr	r2, [pc, #584]	; (8003eec <HAL_GPIO_Init+0x2b0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d046      	beq.n	8003d36 <HAL_GPIO_Init+0xfa>
 8003ca8:	4a90      	ldr	r2, [pc, #576]	; (8003eec <HAL_GPIO_Init+0x2b0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d85d      	bhi.n	8003d6a <HAL_GPIO_Init+0x12e>
 8003cae:	2b12      	cmp	r3, #18
 8003cb0:	d82a      	bhi.n	8003d08 <HAL_GPIO_Init+0xcc>
 8003cb2:	2b12      	cmp	r3, #18
 8003cb4:	d859      	bhi.n	8003d6a <HAL_GPIO_Init+0x12e>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <HAL_GPIO_Init+0x80>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003d37 	.word	0x08003d37
 8003cc0:	08003d11 	.word	0x08003d11
 8003cc4:	08003d23 	.word	0x08003d23
 8003cc8:	08003d65 	.word	0x08003d65
 8003ccc:	08003d6b 	.word	0x08003d6b
 8003cd0:	08003d6b 	.word	0x08003d6b
 8003cd4:	08003d6b 	.word	0x08003d6b
 8003cd8:	08003d6b 	.word	0x08003d6b
 8003cdc:	08003d6b 	.word	0x08003d6b
 8003ce0:	08003d6b 	.word	0x08003d6b
 8003ce4:	08003d6b 	.word	0x08003d6b
 8003ce8:	08003d6b 	.word	0x08003d6b
 8003cec:	08003d6b 	.word	0x08003d6b
 8003cf0:	08003d6b 	.word	0x08003d6b
 8003cf4:	08003d6b 	.word	0x08003d6b
 8003cf8:	08003d6b 	.word	0x08003d6b
 8003cfc:	08003d6b 	.word	0x08003d6b
 8003d00:	08003d19 	.word	0x08003d19
 8003d04:	08003d2d 	.word	0x08003d2d
 8003d08:	4a79      	ldr	r2, [pc, #484]	; (8003ef0 <HAL_GPIO_Init+0x2b4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d0e:	e02c      	b.n	8003d6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	623b      	str	r3, [r7, #32]
          break;
 8003d16:	e029      	b.n	8003d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	623b      	str	r3, [r7, #32]
          break;
 8003d20:	e024      	b.n	8003d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	3308      	adds	r3, #8
 8003d28:	623b      	str	r3, [r7, #32]
          break;
 8003d2a:	e01f      	b.n	8003d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	330c      	adds	r3, #12
 8003d32:	623b      	str	r3, [r7, #32]
          break;
 8003d34:	e01a      	b.n	8003d6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d3e:	2304      	movs	r3, #4
 8003d40:	623b      	str	r3, [r7, #32]
          break;
 8003d42:	e013      	b.n	8003d6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d105      	bne.n	8003d58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	611a      	str	r2, [r3, #16]
          break;
 8003d56:	e009      	b.n	8003d6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d58:	2308      	movs	r3, #8
 8003d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	615a      	str	r2, [r3, #20]
          break;
 8003d62:	e003      	b.n	8003d6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d64:	2300      	movs	r3, #0
 8003d66:	623b      	str	r3, [r7, #32]
          break;
 8003d68:	e000      	b.n	8003d6c <HAL_GPIO_Init+0x130>
          break;
 8003d6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2bff      	cmp	r3, #255	; 0xff
 8003d70:	d801      	bhi.n	8003d76 <HAL_GPIO_Init+0x13a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	e001      	b.n	8003d7a <HAL_GPIO_Init+0x13e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2bff      	cmp	r3, #255	; 0xff
 8003d80:	d802      	bhi.n	8003d88 <HAL_GPIO_Init+0x14c>
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	e002      	b.n	8003d8e <HAL_GPIO_Init+0x152>
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	3b08      	subs	r3, #8
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	210f      	movs	r1, #15
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	401a      	ands	r2, r3
 8003da0:	6a39      	ldr	r1, [r7, #32]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	431a      	orrs	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80b1 	beq.w	8003f1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dbc:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <HAL_GPIO_Init+0x2b8>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	4a4c      	ldr	r2, [pc, #304]	; (8003ef4 <HAL_GPIO_Init+0x2b8>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6193      	str	r3, [r2, #24]
 8003dc8:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_GPIO_Init+0x2b8>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dd4:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <HAL_GPIO_Init+0x2bc>)
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	220f      	movs	r2, #15
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4013      	ands	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a40      	ldr	r2, [pc, #256]	; (8003efc <HAL_GPIO_Init+0x2c0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_GPIO_Init+0x1ec>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3f      	ldr	r2, [pc, #252]	; (8003f00 <HAL_GPIO_Init+0x2c4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00d      	beq.n	8003e24 <HAL_GPIO_Init+0x1e8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a3e      	ldr	r2, [pc, #248]	; (8003f04 <HAL_GPIO_Init+0x2c8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <HAL_GPIO_Init+0x1e4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3d      	ldr	r2, [pc, #244]	; (8003f08 <HAL_GPIO_Init+0x2cc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d101      	bne.n	8003e1c <HAL_GPIO_Init+0x1e0>
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e006      	b.n	8003e2a <HAL_GPIO_Init+0x1ee>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	e004      	b.n	8003e2a <HAL_GPIO_Init+0x1ee>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e002      	b.n	8003e2a <HAL_GPIO_Init+0x1ee>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_GPIO_Init+0x1ee>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	f002 0203 	and.w	r2, r2, #3
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	4093      	lsls	r3, r2
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e3a:	492f      	ldr	r1, [pc, #188]	; (8003ef8 <HAL_GPIO_Init+0x2bc>)
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3302      	adds	r3, #2
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d006      	beq.n	8003e62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e54:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	492c      	ldr	r1, [pc, #176]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
 8003e60:	e006      	b.n	8003e70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e62:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	4928      	ldr	r1, [pc, #160]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e7c:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	4922      	ldr	r1, [pc, #136]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
 8003e88:	e006      	b.n	8003e98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	491e      	ldr	r1, [pc, #120]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ea4:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4918      	ldr	r1, [pc, #96]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
 8003eb0:	e006      	b.n	8003ec0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	4914      	ldr	r1, [pc, #80]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d021      	beq.n	8003f10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	490e      	ldr	r1, [pc, #56]	; (8003f0c <HAL_GPIO_Init+0x2d0>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60cb      	str	r3, [r1, #12]
 8003ed8:	e021      	b.n	8003f1e <HAL_GPIO_Init+0x2e2>
 8003eda:	bf00      	nop
 8003edc:	10320000 	.word	0x10320000
 8003ee0:	10310000 	.word	0x10310000
 8003ee4:	10220000 	.word	0x10220000
 8003ee8:	10210000 	.word	0x10210000
 8003eec:	10120000 	.word	0x10120000
 8003ef0:	10110000 	.word	0x10110000
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40010800 	.word	0x40010800
 8003f00:	40010c00 	.word	0x40010c00
 8003f04:	40011000 	.word	0x40011000
 8003f08:	40011400 	.word	0x40011400
 8003f0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_GPIO_Init+0x304>)
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	4909      	ldr	r1, [pc, #36]	; (8003f40 <HAL_GPIO_Init+0x304>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	3301      	adds	r3, #1
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f47f ae8e 	bne.w	8003c50 <HAL_GPIO_Init+0x14>
  }
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	372c      	adds	r7, #44	; 0x2c
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	40010400 	.word	0x40010400

08003f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]
 8003f50:	4613      	mov	r3, r2
 8003f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f54:	787b      	ldrb	r3, [r7, #1]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f60:	e003      	b.n	8003f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	041a      	lsls	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	611a      	str	r2, [r3, #16]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e12b      	b.n	80041de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fe fc06 	bl	80027ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f000 fd38 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
 8003fdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4a81      	ldr	r2, [pc, #516]	; (80041e8 <HAL_I2C_Init+0x274>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d807      	bhi.n	8003ff8 <HAL_I2C_Init+0x84>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4a80      	ldr	r2, [pc, #512]	; (80041ec <HAL_I2C_Init+0x278>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	bf94      	ite	ls
 8003ff0:	2301      	movls	r3, #1
 8003ff2:	2300      	movhi	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e006      	b.n	8004006 <HAL_I2C_Init+0x92>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a7d      	ldr	r2, [pc, #500]	; (80041f0 <HAL_I2C_Init+0x27c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	bf94      	ite	ls
 8004000:	2301      	movls	r3, #1
 8004002:	2300      	movhi	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e0e7      	b.n	80041de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a78      	ldr	r2, [pc, #480]	; (80041f4 <HAL_I2C_Init+0x280>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	0c9b      	lsrs	r3, r3, #18
 8004018:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a6a      	ldr	r2, [pc, #424]	; (80041e8 <HAL_I2C_Init+0x274>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d802      	bhi.n	8004048 <HAL_I2C_Init+0xd4>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	3301      	adds	r3, #1
 8004046:	e009      	b.n	800405c <HAL_I2C_Init+0xe8>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	4a69      	ldr	r2, [pc, #420]	; (80041f8 <HAL_I2C_Init+0x284>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	3301      	adds	r3, #1
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	430b      	orrs	r3, r1
 8004062:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800406e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	495c      	ldr	r1, [pc, #368]	; (80041e8 <HAL_I2C_Init+0x274>)
 8004078:	428b      	cmp	r3, r1
 800407a:	d819      	bhi.n	80040b0 <HAL_I2C_Init+0x13c>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1e59      	subs	r1, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fbb1 f3f3 	udiv	r3, r1, r3
 800408a:	1c59      	adds	r1, r3, #1
 800408c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004090:	400b      	ands	r3, r1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_I2C_Init+0x138>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1e59      	subs	r1, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a4:	3301      	adds	r3, #1
 80040a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040aa:	e051      	b.n	8004150 <HAL_I2C_Init+0x1dc>
 80040ac:	2304      	movs	r3, #4
 80040ae:	e04f      	b.n	8004150 <HAL_I2C_Init+0x1dc>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d111      	bne.n	80040dc <HAL_I2C_Init+0x168>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1e58      	subs	r0, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	440b      	add	r3, r1
 80040c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ca:	3301      	adds	r3, #1
 80040cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e012      	b.n	8004102 <HAL_I2C_Init+0x18e>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e58      	subs	r0, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	0099      	lsls	r1, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f2:	3301      	adds	r3, #1
 80040f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_Init+0x196>
 8004106:	2301      	movs	r3, #1
 8004108:	e022      	b.n	8004150 <HAL_I2C_Init+0x1dc>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10e      	bne.n	8004130 <HAL_I2C_Init+0x1bc>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1e58      	subs	r0, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6859      	ldr	r1, [r3, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	440b      	add	r3, r1
 8004120:	fbb0 f3f3 	udiv	r3, r0, r3
 8004124:	3301      	adds	r3, #1
 8004126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	e00f      	b.n	8004150 <HAL_I2C_Init+0x1dc>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1e58      	subs	r0, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	0099      	lsls	r1, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	fbb0 f3f3 	udiv	r3, r0, r3
 8004146:	3301      	adds	r3, #1
 8004148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	6809      	ldr	r1, [r1, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800417e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6911      	ldr	r1, [r2, #16]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68d2      	ldr	r2, [r2, #12]
 800418a:	4311      	orrs	r1, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	430b      	orrs	r3, r1
 8004192:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	000186a0 	.word	0x000186a0
 80041ec:	001e847f 	.word	0x001e847f
 80041f0:	003d08ff 	.word	0x003d08ff
 80041f4:	431bde83 	.word	0x431bde83
 80041f8:	10624dd3 	.word	0x10624dd3

080041fc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e034      	b.n	8004278 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004216:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f245 5255 	movw	r2, #21845	; 0x5555
 8004220:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6852      	ldr	r2, [r2, #4]
 800422a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6892      	ldr	r2, [r2, #8]
 8004234:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004236:	f7ff f9cf 	bl	80035d8 <HAL_GetTick>
 800423a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800423c:	e00f      	b.n	800425e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800423e:	f7ff f9cb 	bl	80035d8 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b27      	cmp	r3, #39	; 0x27
 800424a:	d908      	bls.n	800425e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e00c      	b.n	8004278 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e8      	bne.n	800423e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004274:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004290:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e26c      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8087 	beq.w	80043ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042c0:	4b92      	ldr	r3, [pc, #584]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d00c      	beq.n	80042e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042cc:	4b8f      	ldr	r3, [pc, #572]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d112      	bne.n	80042fe <HAL_RCC_OscConfig+0x5e>
 80042d8:	4b8c      	ldr	r3, [pc, #560]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d10b      	bne.n	80042fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e6:	4b89      	ldr	r3, [pc, #548]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d06c      	beq.n	80043cc <HAL_RCC_OscConfig+0x12c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d168      	bne.n	80043cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e246      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x76>
 8004308:	4b80      	ldr	r3, [pc, #512]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a7f      	ldr	r2, [pc, #508]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e02e      	b.n	8004374 <HAL_RCC_OscConfig+0xd4>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x98>
 800431e:	4b7b      	ldr	r3, [pc, #492]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a7a      	ldr	r2, [pc, #488]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b78      	ldr	r3, [pc, #480]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a77      	ldr	r2, [pc, #476]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <HAL_RCC_OscConfig+0xd4>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0xbc>
 8004342:	4b72      	ldr	r3, [pc, #456]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a71      	ldr	r2, [pc, #452]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b6f      	ldr	r3, [pc, #444]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6e      	ldr	r2, [pc, #440]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xd4>
 800435c:	4b6b      	ldr	r3, [pc, #428]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a6a      	ldr	r2, [pc, #424]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b68      	ldr	r3, [pc, #416]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a67      	ldr	r2, [pc, #412]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7ff f92c 	bl	80035d8 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7ff f928 	bl	80035d8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1fa      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b5d      	ldr	r3, [pc, #372]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0xe4>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7ff f918 	bl	80035d8 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ac:	f7ff f914 	bl	80035d8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1e6      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	4b53      	ldr	r3, [pc, #332]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x10c>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043da:	4b4c      	ldr	r3, [pc, #304]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043e6:	4b49      	ldr	r3, [pc, #292]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x18c>
 80043f2:	4b46      	ldr	r3, [pc, #280]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	4b43      	ldr	r3, [pc, #268]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x176>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1ba      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b3d      	ldr	r3, [pc, #244]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4939      	ldr	r1, [pc, #228]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	e03a      	b.n	80044a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7ff f8cd 	bl	80035d8 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004442:	f7ff f8c9 	bl	80035d8 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e19b      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	4b2d      	ldr	r3, [pc, #180]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4927      	ldr	r1, [pc, #156]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	e015      	b.n	80044a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7ff f8ac 	bl	80035d8 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004484:	f7ff f8a8 	bl	80035d8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e17a      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d03a      	beq.n	8004524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d019      	beq.n	80044ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_RCC_OscConfig+0x274>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044bc:	f7ff f88c 	bl	80035d8 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c4:	f7ff f888 	bl	80035d8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e15a      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044e2:	2001      	movs	r0, #1
 80044e4:	f000 fada 	bl	8004a9c <RCC_Delay>
 80044e8:	e01c      	b.n	8004524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <HAL_RCC_OscConfig+0x274>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f0:	f7ff f872 	bl	80035d8 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f6:	e00f      	b.n	8004518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f8:	f7ff f86e 	bl	80035d8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d908      	bls.n	8004518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e140      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
 8004510:	42420000 	.word	0x42420000
 8004514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004518:	4b9e      	ldr	r3, [pc, #632]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e9      	bne.n	80044f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a6 	beq.w	800467e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b97      	ldr	r3, [pc, #604]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	4b94      	ldr	r3, [pc, #592]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	4a93      	ldr	r2, [pc, #588]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454c:	61d3      	str	r3, [r2, #28]
 800454e:	4b91      	ldr	r3, [pc, #580]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455a:	2301      	movs	r3, #1
 800455c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	4b8e      	ldr	r3, [pc, #568]	; (8004798 <HAL_RCC_OscConfig+0x4f8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d118      	bne.n	800459c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456a:	4b8b      	ldr	r3, [pc, #556]	; (8004798 <HAL_RCC_OscConfig+0x4f8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a8a      	ldr	r2, [pc, #552]	; (8004798 <HAL_RCC_OscConfig+0x4f8>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004576:	f7ff f82f 	bl	80035d8 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7ff f82b 	bl	80035d8 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b64      	cmp	r3, #100	; 0x64
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0fd      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	4b81      	ldr	r3, [pc, #516]	; (8004798 <HAL_RCC_OscConfig+0x4f8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x312>
 80045a4:	4b7b      	ldr	r3, [pc, #492]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4a7a      	ldr	r2, [pc, #488]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6213      	str	r3, [r2, #32]
 80045b0:	e02d      	b.n	800460e <HAL_RCC_OscConfig+0x36e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x334>
 80045ba:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	4a75      	ldr	r2, [pc, #468]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6213      	str	r3, [r2, #32]
 80045c6:	4b73      	ldr	r3, [pc, #460]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4a72      	ldr	r2, [pc, #456]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6213      	str	r3, [r2, #32]
 80045d2:	e01c      	b.n	800460e <HAL_RCC_OscConfig+0x36e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x356>
 80045dc:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4a6c      	ldr	r2, [pc, #432]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	6213      	str	r3, [r2, #32]
 80045e8:	4b6a      	ldr	r3, [pc, #424]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4a69      	ldr	r2, [pc, #420]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6213      	str	r3, [r2, #32]
 80045f4:	e00b      	b.n	800460e <HAL_RCC_OscConfig+0x36e>
 80045f6:	4b67      	ldr	r3, [pc, #412]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a66      	ldr	r2, [pc, #408]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	6213      	str	r3, [r2, #32]
 8004602:	4b64      	ldr	r3, [pc, #400]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4a63      	ldr	r2, [pc, #396]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d015      	beq.n	8004642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004616:	f7fe ffdf 	bl	80035d8 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7fe ffdb 	bl	80035d8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f241 3288 	movw	r2, #5000	; 0x1388
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0ab      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	4b57      	ldr	r3, [pc, #348]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ee      	beq.n	800461e <HAL_RCC_OscConfig+0x37e>
 8004640:	e014      	b.n	800466c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004642:	f7fe ffc9 	bl	80035d8 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fe ffc5 	bl	80035d8 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e095      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004660:	4b4c      	ldr	r3, [pc, #304]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ee      	bne.n	800464a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004672:	4b48      	ldr	r3, [pc, #288]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	4a47      	ldr	r2, [pc, #284]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8081 	beq.w	800478a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b08      	cmp	r3, #8
 8004692:	d061      	beq.n	8004758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d146      	bne.n	800472a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469c:	4b3f      	ldr	r3, [pc, #252]	; (800479c <HAL_RCC_OscConfig+0x4fc>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7fe ff99 	bl	80035d8 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046aa:	f7fe ff95 	bl	80035d8 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e067      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046bc:	4b35      	ldr	r3, [pc, #212]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d108      	bne.n	80046e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046d2:	4b30      	ldr	r3, [pc, #192]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	492d      	ldr	r1, [pc, #180]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e4:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a19      	ldr	r1, [r3, #32]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	430b      	orrs	r3, r1
 80046f6:	4927      	ldr	r1, [pc, #156]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <HAL_RCC_OscConfig+0x4fc>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fe ff69 	bl	80035d8 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470a:	f7fe ff65 	bl	80035d8 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e037      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x46a>
 8004728:	e02f      	b.n	800478a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b1c      	ldr	r3, [pc, #112]	; (800479c <HAL_RCC_OscConfig+0x4fc>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fe ff52 	bl	80035d8 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004738:	f7fe ff4e 	bl	80035d8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e020      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x498>
 8004756:	e018      	b.n	800478a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e013      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	429a      	cmp	r2, r3
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	40007000 	.word	0x40007000
 800479c:	42420060 	.word	0x42420060

080047a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0d0      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d910      	bls.n	80047e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 0207 	bic.w	r2, r3, #7
 80047ca:	4965      	ldr	r1, [pc, #404]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b63      	ldr	r3, [pc, #396]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0b8      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d020      	beq.n	8004832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047fc:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a58      	ldr	r2, [pc, #352]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004814:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a52      	ldr	r2, [pc, #328]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800481e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004820:	4b50      	ldr	r3, [pc, #320]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	494d      	ldr	r1, [pc, #308]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d040      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d115      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e07f      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e073      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06b      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487e:	4b39      	ldr	r3, [pc, #228]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4936      	ldr	r1, [pc, #216]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004890:	f7fe fea2 	bl	80035d8 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	e00a      	b.n	80048ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004898:	f7fe fe9e 	bl	80035d8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e053      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 020c 	and.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	429a      	cmp	r2, r3
 80048be:	d1eb      	bne.n	8004898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d210      	bcs.n	80048f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 0207 	bic.w	r2, r3, #7
 80048d6:	4922      	ldr	r1, [pc, #136]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e032      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4916      	ldr	r1, [pc, #88]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	490e      	ldr	r1, [pc, #56]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800492e:	f000 f821 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004932:	4602      	mov	r2, r0
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	490a      	ldr	r1, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x1c8>)
 8004940:	5ccb      	ldrb	r3, [r1, r3]
 8004942:	fa22 f303 	lsr.w	r3, r2, r3
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1cc>)
 8004948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1d0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe fe00 	bl	8003554 <HAL_InitTick>

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40022000 	.word	0x40022000
 8004964:	40021000 	.word	0x40021000
 8004968:	08008a5c 	.word	0x08008a5c
 800496c:	20000000 	.word	0x20000000
 8004970:	20000004 	.word	0x20000004

08004974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	b490      	push	{r4, r7}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800497a:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800497c:	1d3c      	adds	r4, r7, #4
 800497e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004984:	f240 2301 	movw	r3, #513	; 0x201
 8004988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	2300      	movs	r3, #0
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800499e:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d002      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x40>
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x46>
 80049b2:	e02d      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b6:	623b      	str	r3, [r7, #32]
      break;
 80049b8:	e02d      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	0c9b      	lsrs	r3, r3, #18
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049c6:	4413      	add	r3, r2
 80049c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d013      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	0c5b      	lsrs	r3, r3, #17
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049e6:	4413      	add	r3, r2
 80049e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f2:	fb02 f203 	mul.w	r2, r2, r3
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	e004      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	623b      	str	r3, [r7, #32]
      break;
 8004a0e:	e002      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a12:	623b      	str	r3, [r7, #32]
      break;
 8004a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a16:	6a3b      	ldr	r3, [r7, #32]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc90      	pop	{r4, r7}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	08008a4c 	.word	0x08008a4c
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	00f42400 	.word	0x00f42400
 8004a30:	003d0900 	.word	0x003d0900
 8004a34:	007a1200 	.word	0x007a1200

08004a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a3c:	4b02      	ldr	r3, [pc, #8]	; (8004a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	20000000 	.word	0x20000000

08004a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a50:	f7ff fff2 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	0a1b      	lsrs	r3, r3, #8
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	4903      	ldr	r1, [pc, #12]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	08008a6c 	.word	0x08008a6c

08004a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a78:	f7ff ffde 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	0adb      	lsrs	r3, r3, #11
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4903      	ldr	r1, [pc, #12]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000
 8004a98:	08008a6c 	.word	0x08008a6c

08004a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <RCC_Delay+0x34>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <RCC_Delay+0x38>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	0a5b      	lsrs	r3, r3, #9
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ab8:	bf00      	nop
  }
  while (Delay --);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1e5a      	subs	r2, r3, #1
 8004abe:	60fa      	str	r2, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f9      	bne.n	8004ab8 <RCC_Delay+0x1c>
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr
 8004ad0:	20000000 	.word	0x20000000
 8004ad4:	10624dd3 	.word	0x10624dd3

08004ad8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e076      	b.n	8004bd8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afa:	d009      	beq.n	8004b10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	61da      	str	r2, [r3, #28]
 8004b02:	e005      	b.n	8004b10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fd fe8e 	bl	800284c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	ea42 0103 	orr.w	r1, r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	0c1a      	lsrs	r2, r3, #16
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f002 0204 	and.w	r2, r2, #4
 8004bb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e041      	b.n	8004c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fd fe6c 	bl	80028e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f000 ffce 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d001      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e03a      	b.n	8004d0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <HAL_TIM_Base_Start_IT+0x98>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00e      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x58>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc2:	d009      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x58>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <HAL_TIM_Base_Start_IT+0x9c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x58>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <HAL_TIM_Base_Start_IT+0xa0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d111      	bne.n	8004cfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b06      	cmp	r3, #6
 8004ce8:	d010      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfa:	e007      	b.n	8004d0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800

08004d24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6a1a      	ldr	r2, [r3, #32]
 8004d42:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10f      	bne.n	8004d6c <HAL_TIM_Base_Stop_IT+0x48>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6a1a      	ldr	r2, [r3, #32]
 8004d52:	f240 4344 	movw	r3, #1092	; 0x444
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d107      	bne.n	8004d6c <HAL_TIM_Base_Stop_IT+0x48>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e041      	b.n	8004e16 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f839 	bl	8004e1e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 fefe 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <HAL_TIM_OC_Start+0x24>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	bf14      	ite	ne
 8004e4c:	2301      	movne	r3, #1
 8004e4e:	2300      	moveq	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	e022      	b.n	8004e9a <HAL_TIM_OC_Start+0x6a>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d109      	bne.n	8004e6e <HAL_TIM_OC_Start+0x3e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	bf14      	ite	ne
 8004e66:	2301      	movne	r3, #1
 8004e68:	2300      	moveq	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	e015      	b.n	8004e9a <HAL_TIM_OC_Start+0x6a>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d109      	bne.n	8004e88 <HAL_TIM_OC_Start+0x58>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	bf14      	ite	ne
 8004e80:	2301      	movne	r3, #1
 8004e82:	2300      	moveq	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e008      	b.n	8004e9a <HAL_TIM_OC_Start+0x6a>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e05e      	b.n	8004f60 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_OC_Start+0x82>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb0:	e013      	b.n	8004eda <HAL_TIM_OC_Start+0xaa>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_OC_Start+0x92>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec0:	e00b      	b.n	8004eda <HAL_TIM_OC_Start+0xaa>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_OC_Start+0xa2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed0:	e003      	b.n	8004eda <HAL_TIM_OC_Start+0xaa>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	6839      	ldr	r1, [r7, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 fa87 	bl	80063f6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1e      	ldr	r2, [pc, #120]	; (8004f68 <HAL_TIM_OC_Start+0x138>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d107      	bne.n	8004f02 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_TIM_OC_Start+0x138>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_TIM_OC_Start+0xfa>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d009      	beq.n	8004f2a <HAL_TIM_OC_Start+0xfa>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a14      	ldr	r2, [pc, #80]	; (8004f6c <HAL_TIM_OC_Start+0x13c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIM_OC_Start+0xfa>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a12      	ldr	r2, [pc, #72]	; (8004f70 <HAL_TIM_OC_Start+0x140>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d111      	bne.n	8004f4e <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d010      	beq.n	8004f5e <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4c:	e007      	b.n	8004f5e <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800

08004f74 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 fa35 	bl	80063f6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a29      	ldr	r2, [pc, #164]	; (8005038 <HAL_TIM_OC_Stop+0xc4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d117      	bne.n	8004fc6 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a1a      	ldr	r2, [r3, #32]
 8004f9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <HAL_TIM_OC_Stop+0x52>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	f240 4344 	movw	r3, #1092	; 0x444
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d107      	bne.n	8004fc6 <HAL_TIM_OC_Stop+0x52>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <HAL_TIM_OC_Stop+0x82>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6a1a      	ldr	r2, [r3, #32]
 8004fdc:	f240 4344 	movw	r3, #1092	; 0x444
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d107      	bne.n	8004ff6 <HAL_TIM_OC_Stop+0x82>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_OC_Stop+0x92>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005004:	e013      	b.n	800502e <HAL_TIM_OC_Stop+0xba>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b04      	cmp	r3, #4
 800500a:	d104      	bne.n	8005016 <HAL_TIM_OC_Stop+0xa2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005014:	e00b      	b.n	800502e <HAL_TIM_OC_Stop+0xba>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d104      	bne.n	8005026 <HAL_TIM_OC_Stop+0xb2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005024:	e003      	b.n	800502e <HAL_TIM_OC_Stop+0xba>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40012c00 	.word	0x40012c00

0800503c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e041      	b.n	80050d2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f839 	bl	80050da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f000 fda0 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_IC_Start_IT+0x1a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005102:	b2db      	uxtb	r3, r3
 8005104:	e013      	b.n	800512e <HAL_TIM_IC_Start_IT+0x42>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d104      	bne.n	8005116 <HAL_TIM_IC_Start_IT+0x2a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005112:	b2db      	uxtb	r3, r3
 8005114:	e00b      	b.n	800512e <HAL_TIM_IC_Start_IT+0x42>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d104      	bne.n	8005126 <HAL_TIM_IC_Start_IT+0x3a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e003      	b.n	800512e <HAL_TIM_IC_Start_IT+0x42>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <HAL_TIM_IC_Start_IT+0x54>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e013      	b.n	8005168 <HAL_TIM_IC_Start_IT+0x7c>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d104      	bne.n	8005150 <HAL_TIM_IC_Start_IT+0x64>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e00b      	b.n	8005168 <HAL_TIM_IC_Start_IT+0x7c>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b08      	cmp	r3, #8
 8005154:	d104      	bne.n	8005160 <HAL_TIM_IC_Start_IT+0x74>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e003      	b.n	8005168 <HAL_TIM_IC_Start_IT+0x7c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005166:	b2db      	uxtb	r3, r3
 8005168:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d102      	bne.n	8005176 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005170:	7bbb      	ldrb	r3, [r7, #14]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d001      	beq.n	800517a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0b3      	b.n	80052e2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_TIM_IC_Start_IT+0x9e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005188:	e013      	b.n	80051b2 <HAL_TIM_IC_Start_IT+0xc6>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d104      	bne.n	800519a <HAL_TIM_IC_Start_IT+0xae>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005198:	e00b      	b.n	80051b2 <HAL_TIM_IC_Start_IT+0xc6>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d104      	bne.n	80051aa <HAL_TIM_IC_Start_IT+0xbe>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a8:	e003      	b.n	80051b2 <HAL_TIM_IC_Start_IT+0xc6>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2202      	movs	r2, #2
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_IC_Start_IT+0xd6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c0:	e013      	b.n	80051ea <HAL_TIM_IC_Start_IT+0xfe>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_IC_Start_IT+0xe6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d0:	e00b      	b.n	80051ea <HAL_TIM_IC_Start_IT+0xfe>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_IC_Start_IT+0xf6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e0:	e003      	b.n	80051ea <HAL_TIM_IC_Start_IT+0xfe>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	d841      	bhi.n	8005274 <HAL_TIM_IC_Start_IT+0x188>
 80051f0:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <HAL_TIM_IC_Start_IT+0x10c>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	0800522d 	.word	0x0800522d
 80051fc:	08005275 	.word	0x08005275
 8005200:	08005275 	.word	0x08005275
 8005204:	08005275 	.word	0x08005275
 8005208:	0800523f 	.word	0x0800523f
 800520c:	08005275 	.word	0x08005275
 8005210:	08005275 	.word	0x08005275
 8005214:	08005275 	.word	0x08005275
 8005218:	08005251 	.word	0x08005251
 800521c:	08005275 	.word	0x08005275
 8005220:	08005275 	.word	0x08005275
 8005224:	08005275 	.word	0x08005275
 8005228:	08005263 	.word	0x08005263
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0202 	orr.w	r2, r2, #2
 800523a:	60da      	str	r2, [r3, #12]
      break;
 800523c:	e01b      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0204 	orr.w	r2, r2, #4
 800524c:	60da      	str	r2, [r3, #12]
      break;
 800524e:	e012      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0208 	orr.w	r2, r2, #8
 800525e:	60da      	str	r2, [r3, #12]
      break;
 8005260:	e009      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0210 	orr.w	r2, r2, #16
 8005270:	60da      	str	r2, [r3, #12]
      break;
 8005272:	e000      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005274:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2201      	movs	r2, #1
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f001 f8b9 	bl	80063f6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a18      	ldr	r2, [pc, #96]	; (80052ec <HAL_TIM_IC_Start_IT+0x200>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00e      	beq.n	80052ac <HAL_TIM_IC_Start_IT+0x1c0>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d009      	beq.n	80052ac <HAL_TIM_IC_Start_IT+0x1c0>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <HAL_TIM_IC_Start_IT+0x204>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_TIM_IC_Start_IT+0x1c0>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <HAL_TIM_IC_Start_IT+0x208>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d111      	bne.n	80052d0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d010      	beq.n	80052e0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	e007      	b.n	80052e0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800

080052f8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d841      	bhi.n	800538c <HAL_TIM_IC_Stop_IT+0x94>
 8005308:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <HAL_TIM_IC_Stop_IT+0x18>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005345 	.word	0x08005345
 8005314:	0800538d 	.word	0x0800538d
 8005318:	0800538d 	.word	0x0800538d
 800531c:	0800538d 	.word	0x0800538d
 8005320:	08005357 	.word	0x08005357
 8005324:	0800538d 	.word	0x0800538d
 8005328:	0800538d 	.word	0x0800538d
 800532c:	0800538d 	.word	0x0800538d
 8005330:	08005369 	.word	0x08005369
 8005334:	0800538d 	.word	0x0800538d
 8005338:	0800538d 	.word	0x0800538d
 800533c:	0800538d 	.word	0x0800538d
 8005340:	0800537b 	.word	0x0800537b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0202 	bic.w	r2, r2, #2
 8005352:	60da      	str	r2, [r3, #12]
      break;
 8005354:	e01b      	b.n	800538e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0204 	bic.w	r2, r2, #4
 8005364:	60da      	str	r2, [r3, #12]
      break;
 8005366:	e012      	b.n	800538e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0208 	bic.w	r2, r2, #8
 8005376:	60da      	str	r2, [r3, #12]
      break;
 8005378:	e009      	b.n	800538e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0210 	bic.w	r2, r2, #16
 8005388:	60da      	str	r2, [r3, #12]
      break;
 800538a:	e000      	b.n	800538e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800538c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f001 f82d 	bl	80063f6 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a1a      	ldr	r2, [r3, #32]
 80053a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <HAL_TIM_IC_Stop_IT+0xd4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	f240 4344 	movw	r3, #1092	; 0x444
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <HAL_TIM_IC_Stop_IT+0xd4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <HAL_TIM_IC_Stop_IT+0xe4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053da:	e013      	b.n	8005404 <HAL_TIM_IC_Stop_IT+0x10c>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d104      	bne.n	80053ec <HAL_TIM_IC_Stop_IT+0xf4>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ea:	e00b      	b.n	8005404 <HAL_TIM_IC_Stop_IT+0x10c>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d104      	bne.n	80053fc <HAL_TIM_IC_Stop_IT+0x104>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fa:	e003      	b.n	8005404 <HAL_TIM_IC_Stop_IT+0x10c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <HAL_TIM_IC_Stop_IT+0x11c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005412:	e013      	b.n	800543c <HAL_TIM_IC_Stop_IT+0x144>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b04      	cmp	r3, #4
 8005418:	d104      	bne.n	8005424 <HAL_TIM_IC_Stop_IT+0x12c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005422:	e00b      	b.n	800543c <HAL_TIM_IC_Stop_IT+0x144>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b08      	cmp	r3, #8
 8005428:	d104      	bne.n	8005434 <HAL_TIM_IC_Stop_IT+0x13c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005432:	e003      	b.n	800543c <HAL_TIM_IC_Stop_IT+0x144>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop

08005448 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e041      	b.n	80054e0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f839 	bl	80054e8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f000 fb99 	bl	8005bc0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0208 	bic.w	r2, r2, #8
 800549c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b02      	cmp	r3, #2
 800550e:	d122      	bne.n	8005556 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b02      	cmp	r3, #2
 800551c:	d11b      	bne.n	8005556 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f06f 0202 	mvn.w	r2, #2
 8005526:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7fd f823 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 8005542:	e005      	b.n	8005550 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fb20 	bl	8005b8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fb26 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b04      	cmp	r3, #4
 8005562:	d122      	bne.n	80055aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b04      	cmp	r3, #4
 8005570:	d11b      	bne.n	80055aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f06f 0204 	mvn.w	r2, #4
 800557a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7fc fff9 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 8005596:	e005      	b.n	80055a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 faf6 	bl	8005b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fafc 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d122      	bne.n	80055fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d11b      	bne.n	80055fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f06f 0208 	mvn.w	r2, #8
 80055ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2204      	movs	r2, #4
 80055d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fc ffcf 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 80055ea:	e005      	b.n	80055f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 facc 	bl	8005b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fad2 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b10      	cmp	r3, #16
 800560a:	d122      	bne.n	8005652 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b10      	cmp	r3, #16
 8005618:	d11b      	bne.n	8005652 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f06f 0210 	mvn.w	r2, #16
 8005622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2208      	movs	r2, #8
 8005628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fc ffa5 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 800563e:	e005      	b.n	800564c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 faa2 	bl	8005b8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 faa8 	bl	8005b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b01      	cmp	r3, #1
 800565e:	d10e      	bne.n	800567e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f06f 0201 	mvn.w	r2, #1
 8005676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fa7d 	bl	8005b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005688:	2b80      	cmp	r3, #128	; 0x80
 800568a:	d10e      	bne.n	80056aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b80      	cmp	r3, #128	; 0x80
 8005698:	d107      	bne.n	80056aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 ff83 	bl	80065b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d10e      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	d107      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fa6c 	bl	8005bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d10e      	bne.n	8005702 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d107      	bne.n	8005702 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f06f 0220 	mvn.w	r2, #32
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 ff4e 	bl	800659e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005722:	2302      	movs	r3, #2
 8005724:	e046      	b.n	80057b4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	d839      	bhi.n	80057a8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <HAL_TIM_OC_ConfigChannel+0x30>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005771 	.word	0x08005771
 8005740:	080057a9 	.word	0x080057a9
 8005744:	080057a9 	.word	0x080057a9
 8005748:	080057a9 	.word	0x080057a9
 800574c:	0800577f 	.word	0x0800577f
 8005750:	080057a9 	.word	0x080057a9
 8005754:	080057a9 	.word	0x080057a9
 8005758:	080057a9 	.word	0x080057a9
 800575c:	0800578d 	.word	0x0800578d
 8005760:	080057a9 	.word	0x080057a9
 8005764:	080057a9 	.word	0x080057a9
 8005768:	080057a9 	.word	0x080057a9
 800576c:	0800579b 	.word	0x0800579b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fa84 	bl	8005c84 <TIM_OC1_SetConfig>
      break;
 800577c:	e015      	b.n	80057aa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fae3 	bl	8005d50 <TIM_OC2_SetConfig>
      break;
 800578a:	e00e      	b.n	80057aa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fb46 	bl	8005e24 <TIM_OC3_SetConfig>
      break;
 8005798:	e007      	b.n	80057aa <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fba9 	bl	8005ef8 <TIM_OC4_SetConfig>
      break;
 80057a6:	e000      	b.n	80057aa <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80057a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e082      	b.n	80058dc <HAL_TIM_IC_ConfigChannel+0x120>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d11b      	bne.n	800581c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6819      	ldr	r1, [r3, #0]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f000 fc5c 	bl	80060b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 020c 	bic.w	r2, r2, #12
 8005806:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6999      	ldr	r1, [r3, #24]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	619a      	str	r2, [r3, #24]
 800581a:	e05a      	b.n	80058d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b04      	cmp	r3, #4
 8005820:	d11c      	bne.n	800585c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f000 fcc5 	bl	80061c0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005844:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6999      	ldr	r1, [r3, #24]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	021a      	lsls	r2, r3, #8
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	619a      	str	r2, [r3, #24]
 800585a:	e03a      	b.n	80058d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b08      	cmp	r3, #8
 8005860:	d11b      	bne.n	800589a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6819      	ldr	r1, [r3, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f000 fd10 	bl	8006296 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 020c 	bic.w	r2, r2, #12
 8005884:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	61da      	str	r2, [r3, #28]
 8005898:	e01b      	b.n	80058d2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6819      	ldr	r1, [r3, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f000 fd2f 	bl	800630c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69d9      	ldr	r1, [r3, #28]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	021a      	lsls	r2, r3, #8
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_TIM_ConfigClockSource+0x18>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e0b3      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x180>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800591a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005922:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005934:	d03e      	beq.n	80059b4 <HAL_TIM_ConfigClockSource+0xd0>
 8005936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593a:	f200 8087 	bhi.w	8005a4c <HAL_TIM_ConfigClockSource+0x168>
 800593e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005942:	f000 8085 	beq.w	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594a:	d87f      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x168>
 800594c:	2b70      	cmp	r3, #112	; 0x70
 800594e:	d01a      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0xa2>
 8005950:	2b70      	cmp	r3, #112	; 0x70
 8005952:	d87b      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x168>
 8005954:	2b60      	cmp	r3, #96	; 0x60
 8005956:	d050      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x116>
 8005958:	2b60      	cmp	r3, #96	; 0x60
 800595a:	d877      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x168>
 800595c:	2b50      	cmp	r3, #80	; 0x50
 800595e:	d03c      	beq.n	80059da <HAL_TIM_ConfigClockSource+0xf6>
 8005960:	2b50      	cmp	r3, #80	; 0x50
 8005962:	d873      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x168>
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d058      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0x136>
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d86f      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x168>
 800596c:	2b30      	cmp	r3, #48	; 0x30
 800596e:	d064      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x156>
 8005970:	2b30      	cmp	r3, #48	; 0x30
 8005972:	d86b      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x168>
 8005974:	2b20      	cmp	r3, #32
 8005976:	d060      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x156>
 8005978:	2b20      	cmp	r3, #32
 800597a:	d867      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x168>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d05c      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x156>
 8005980:	2b10      	cmp	r3, #16
 8005982:	d05a      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005984:	e062      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6899      	ldr	r1, [r3, #8]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f000 fd0f 	bl	80063b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	609a      	str	r2, [r3, #8]
      break;
 80059b2:	e04e      	b.n	8005a52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f000 fcf8 	bl	80063b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059d6:	609a      	str	r2, [r3, #8]
      break;
 80059d8:	e03b      	b.n	8005a52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6859      	ldr	r1, [r3, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f000 fbbc 	bl	8006164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2150      	movs	r1, #80	; 0x50
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fcc6 	bl	8006384 <TIM_ITRx_SetConfig>
      break;
 80059f8:	e02b      	b.n	8005a52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f000 fc16 	bl	8006238 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2160      	movs	r1, #96	; 0x60
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fcb6 	bl	8006384 <TIM_ITRx_SetConfig>
      break;
 8005a18:	e01b      	b.n	8005a52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 fb9c 	bl	8006164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2140      	movs	r1, #64	; 0x40
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fca6 	bl	8006384 <TIM_ITRx_SetConfig>
      break;
 8005a38:	e00b      	b.n	8005a52 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f000 fc9d 	bl	8006384 <TIM_ITRx_SetConfig>
        break;
 8005a4a:	e002      	b.n	8005a52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a4c:	bf00      	nop
 8005a4e:	e000      	b.n	8005a52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005a50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e031      	b.n	8005ae8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa7c 	bl	8005f94 <TIM_SlaveTimer_SetConfig>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e018      	b.n	8005ae8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ad4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b0c      	cmp	r3, #12
 8005b02:	d831      	bhi.n	8005b68 <HAL_TIM_ReadCapturedValue+0x78>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b41 	.word	0x08005b41
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005b69 	.word	0x08005b69
 8005b1c:	08005b4b 	.word	0x08005b4b
 8005b20:	08005b69 	.word	0x08005b69
 8005b24:	08005b69 	.word	0x08005b69
 8005b28:	08005b69 	.word	0x08005b69
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b69 	.word	0x08005b69
 8005b34:	08005b69 	.word	0x08005b69
 8005b38:	08005b69 	.word	0x08005b69
 8005b3c:	08005b5f 	.word	0x08005b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	60fb      	str	r3, [r7, #12]

      break;
 8005b48:	e00f      	b.n	8005b6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	60fb      	str	r3, [r7, #12]

      break;
 8005b52:	e00a      	b.n	8005b6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	60fb      	str	r3, [r7, #12]

      break;
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	60fb      	str	r3, [r7, #12]

      break;
 8005b66:	e000      	b.n	8005b6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b68:	bf00      	nop
  }

  return tmpreg;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop

08005b78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a29      	ldr	r2, [pc, #164]	; (8005c78 <TIM_Base_SetConfig+0xb8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_Base_SetConfig+0x30>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d007      	beq.n	8005bf0 <TIM_Base_SetConfig+0x30>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a26      	ldr	r2, [pc, #152]	; (8005c7c <TIM_Base_SetConfig+0xbc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_Base_SetConfig+0x30>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <TIM_Base_SetConfig+0xc0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <TIM_Base_SetConfig+0xb8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00b      	beq.n	8005c22 <TIM_Base_SetConfig+0x62>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d007      	beq.n	8005c22 <TIM_Base_SetConfig+0x62>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <TIM_Base_SetConfig+0xbc>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d003      	beq.n	8005c22 <TIM_Base_SetConfig+0x62>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <TIM_Base_SetConfig+0xc0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d108      	bne.n	8005c34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a07      	ldr	r2, [pc, #28]	; (8005c78 <TIM_Base_SetConfig+0xb8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d103      	bne.n	8005c68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	615a      	str	r2, [r3, #20]
}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800

08005c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f023 0201 	bic.w	r2, r3, #1
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f023 0302 	bic.w	r3, r3, #2
 8005ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <TIM_OC1_SetConfig+0xc8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d10c      	bne.n	8005cfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0308 	bic.w	r3, r3, #8
 8005ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f023 0304 	bic.w	r3, r3, #4
 8005cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <TIM_OC1_SetConfig+0xc8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d111      	bne.n	8005d26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	621a      	str	r2, [r3, #32]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40012c00 	.word	0x40012c00

08005d50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f023 0210 	bic.w	r2, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f023 0320 	bic.w	r3, r3, #32
 8005d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a1d      	ldr	r2, [pc, #116]	; (8005e20 <TIM_OC2_SetConfig+0xd0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10d      	bne.n	8005dcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <TIM_OC2_SetConfig+0xd0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d113      	bne.n	8005dfc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr
 8005e20:	40012c00 	.word	0x40012c00

08005e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <TIM_OC3_SetConfig+0xd0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10d      	bne.n	8005e9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a14      	ldr	r2, [pc, #80]	; (8005ef4 <TIM_OC3_SetConfig+0xd0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d113      	bne.n	8005ece <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	621a      	str	r2, [r3, #32]
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40012c00 	.word	0x40012c00

08005ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	021b      	lsls	r3, r3, #8
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	031b      	lsls	r3, r3, #12
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a0f      	ldr	r2, [pc, #60]	; (8005f90 <TIM_OC4_SetConfig+0x98>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d109      	bne.n	8005f6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	019b      	lsls	r3, r3, #6
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr
 8005f90:	40012c00 	.word	0x40012c00

08005f94 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fac:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0307 	bic.w	r3, r3, #7
 8005fbe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b70      	cmp	r3, #112	; 0x70
 8005fd8:	d01a      	beq.n	8006010 <TIM_SlaveTimer_SetConfig+0x7c>
 8005fda:	2b70      	cmp	r3, #112	; 0x70
 8005fdc:	d860      	bhi.n	80060a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8005fde:	2b60      	cmp	r3, #96	; 0x60
 8005fe0:	d054      	beq.n	800608c <TIM_SlaveTimer_SetConfig+0xf8>
 8005fe2:	2b60      	cmp	r3, #96	; 0x60
 8005fe4:	d85c      	bhi.n	80060a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8005fe6:	2b50      	cmp	r3, #80	; 0x50
 8005fe8:	d046      	beq.n	8006078 <TIM_SlaveTimer_SetConfig+0xe4>
 8005fea:	2b50      	cmp	r3, #80	; 0x50
 8005fec:	d858      	bhi.n	80060a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d019      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x92>
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d854      	bhi.n	80060a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ff6:	2b30      	cmp	r3, #48	; 0x30
 8005ff8:	d054      	beq.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
 8005ffa:	2b30      	cmp	r3, #48	; 0x30
 8005ffc:	d850      	bhi.n	80060a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d050      	beq.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
 8006002:	2b20      	cmp	r3, #32
 8006004:	d84c      	bhi.n	80060a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d04c      	beq.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
 800600a:	2b10      	cmp	r3, #16
 800600c:	d04a      	beq.n	80060a4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800600e:	e047      	b.n	80060a0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	68d9      	ldr	r1, [r3, #12]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f000 f9ca 	bl	80063b8 <TIM_ETR_SetConfig>
      break;
 8006024:	e03f      	b.n	80060a6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b05      	cmp	r3, #5
 800602c:	d101      	bne.n	8006032 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e03a      	b.n	80060a8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0201 	bic.w	r2, r2, #1
 8006048:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006058:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	621a      	str	r2, [r3, #32]
      break;
 8006076:	e016      	b.n	80060a6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	6899      	ldr	r1, [r3, #8]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	461a      	mov	r2, r3
 8006086:	f000 f86d 	bl	8006164 <TIM_TI1_ConfigInputStage>
      break;
 800608a:	e00c      	b.n	80060a6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6899      	ldr	r1, [r3, #8]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	461a      	mov	r2, r3
 800609a:	f000 f8cd 	bl	8006238 <TIM_TI2_ConfigInputStage>
      break;
 800609e:	e002      	b.n	80060a6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80060a0:	bf00      	nop
 80060a2:	e000      	b.n	80060a6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80060a4:	bf00      	nop
  }
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <TIM_TI1_SetConfig+0xa8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00b      	beq.n	80060f6 <TIM_TI1_SetConfig+0x46>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e4:	d007      	beq.n	80060f6 <TIM_TI1_SetConfig+0x46>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a1c      	ldr	r2, [pc, #112]	; (800615c <TIM_TI1_SetConfig+0xac>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d003      	beq.n	80060f6 <TIM_TI1_SetConfig+0x46>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4a1b      	ldr	r2, [pc, #108]	; (8006160 <TIM_TI1_SetConfig+0xb0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <TIM_TI1_SetConfig+0x4a>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <TIM_TI1_SetConfig+0x4c>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	e003      	b.n	800611a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	b2db      	uxtb	r3, r3
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f003 030a 	and.w	r3, r3, #10
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40000400 	.word	0x40000400
 8006160:	40000800 	.word	0x40000800

08006164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	f023 0201 	bic.w	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800618e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f023 030a 	bic.w	r3, r3, #10
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	621a      	str	r2, [r3, #32]
}
 80061b6:	bf00      	nop
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f023 0210 	bic.w	r2, r3, #16
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	031b      	lsls	r3, r3, #12
 8006204:	b29b      	uxth	r3, r3
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006212:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr

08006238 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	f023 0210 	bic.w	r2, r3, #16
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006262:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	031b      	lsls	r3, r3, #12
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006274:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	621a      	str	r2, [r3, #32]
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006296:	b480      	push	{r7}
 8006298:	b087      	sub	sp, #28
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr

0800630c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006338:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800634a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	031b      	lsls	r3, r3, #12
 8006350:	b29b      	uxth	r3, r3
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800635e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	031b      	lsls	r3, r3, #12
 8006364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr

08006384 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f043 0307 	orr.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	609a      	str	r2, [r3, #8]
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	021a      	lsls	r2, r3, #8
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	431a      	orrs	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4313      	orrs	r3, r2
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr

080063f6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b087      	sub	sp, #28
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	2201      	movs	r2, #1
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1a      	ldr	r2, [r3, #32]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	43db      	mvns	r3, r3
 8006418:	401a      	ands	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	fa01 f303 	lsl.w	r3, r1, r3
 800642e:	431a      	orrs	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	bc80      	pop	{r7}
 800643c:	4770      	bx	lr
	...

08006440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006454:	2302      	movs	r3, #2
 8006456:	e046      	b.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a4:	d009      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a12      	ldr	r2, [pc, #72]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a10      	ldr	r2, [pc, #64]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d10c      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800

080064fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006514:	2302      	movs	r3, #2
 8006516:	e03d      	b.n	8006594 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr

080065b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr

080065c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e03f      	b.n	8006654 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fc fa3f 	bl	8002a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2224      	movs	r2, #36	; 0x24
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006604:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9a6 	bl	8006958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800661a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695a      	ldr	r2, [r3, #20]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800662a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800663a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	; 0x28
 8006660:	af02      	add	r7, sp, #8
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	4613      	mov	r3, r2
 800666a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b20      	cmp	r3, #32
 800667a:	d17c      	bne.n	8006776 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_UART_Transmit+0x2c>
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e075      	b.n	8006778 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_UART_Transmit+0x3e>
 8006696:	2302      	movs	r3, #2
 8006698:	e06e      	b.n	8006778 <HAL_UART_Transmit+0x11c>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2221      	movs	r2, #33	; 0x21
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066b0:	f7fc ff92 	bl	80035d8 <HAL_GetTick>
 80066b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	88fa      	ldrh	r2, [r7, #6]
 80066c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ca:	d108      	bne.n	80066de <HAL_UART_Transmit+0x82>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	61bb      	str	r3, [r7, #24]
 80066dc:	e003      	b.n	80066e6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066ee:	e02a      	b.n	8006746 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2200      	movs	r2, #0
 80066f8:	2180      	movs	r1, #128	; 0x80
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f8e2 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e036      	b.n	8006778 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800671e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	3302      	adds	r3, #2
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	e007      	b.n	8006738 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3301      	adds	r3, #1
 8006736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1cf      	bne.n	80066f0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2200      	movs	r2, #0
 8006758:	2140      	movs	r1, #64	; 0x40
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f8b2 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e006      	b.n	8006778 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	e000      	b.n	8006778 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006776:	2302      	movs	r3, #2
  }
}
 8006778:	4618      	mov	r0, r3
 800677a:	3720      	adds	r7, #32
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08a      	sub	sp, #40	; 0x28
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	4613      	mov	r3, r2
 800678e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b20      	cmp	r3, #32
 800679e:	f040 808c 	bne.w	80068ba <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <HAL_UART_Receive+0x2e>
 80067a8:	88fb      	ldrh	r3, [r7, #6]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e084      	b.n	80068bc <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_UART_Receive+0x40>
 80067bc:	2302      	movs	r3, #2
 80067be:	e07d      	b.n	80068bc <HAL_UART_Receive+0x13c>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2222      	movs	r2, #34	; 0x22
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067dc:	f7fc fefc 	bl	80035d8 <HAL_GetTick>
 80067e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	88fa      	ldrh	r2, [r7, #6]
 80067e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	88fa      	ldrh	r2, [r7, #6]
 80067ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f6:	d108      	bne.n	800680a <HAL_UART_Receive+0x8a>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	e003      	b.n	8006812 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800681a:	e043      	b.n	80068a4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2200      	movs	r2, #0
 8006824:	2120      	movs	r1, #32
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f84c 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e042      	b.n	80068bc <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10c      	bne.n	8006856 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006848:	b29a      	uxth	r2, r3
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	3302      	adds	r3, #2
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e01f      	b.n	8006896 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	d007      	beq.n	8006870 <HAL_UART_Receive+0xf0>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <HAL_UART_Receive+0xfe>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d106      	bne.n	800687e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	b2da      	uxtb	r2, r3
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	e008      	b.n	8006890 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688a:	b2da      	uxtb	r2, r3
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	3301      	adds	r3, #1
 8006894:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1b6      	bne.n	800681c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	e000      	b.n	80068bc <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80068ba:	2302      	movs	r3, #2
  }
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3720      	adds	r7, #32
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d4:	e02c      	b.n	8006930 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068dc:	d028      	beq.n	8006930 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068e4:	f7fc fe78 	bl	80035d8 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d21d      	bcs.n	8006930 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006902:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0201 	bic.w	r2, r2, #1
 8006912:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e00f      	b.n	8006950 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4013      	ands	r3, r2
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	429a      	cmp	r2, r3
 800693e:	bf0c      	ite	eq
 8006940:	2301      	moveq	r3, #1
 8006942:	2300      	movne	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	429a      	cmp	r2, r3
 800694c:	d0c3      	beq.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006992:	f023 030c 	bic.w	r3, r3, #12
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	68b9      	ldr	r1, [r7, #8]
 800699c:	430b      	orrs	r3, r1
 800699e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a2c      	ldr	r2, [pc, #176]	; (8006a6c <UART_SetConfig+0x114>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d103      	bne.n	80069c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069c0:	f7fe f858 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	e002      	b.n	80069ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069c8:	f7fe f840 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
 80069cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4613      	mov	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	009a      	lsls	r2, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <UART_SetConfig+0x118>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	0119      	lsls	r1, r3, #4
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009a      	lsls	r2, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a04:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <UART_SetConfig+0x118>)
 8006a06:	fba3 0302 	umull	r0, r3, r3, r2
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	2064      	movs	r0, #100	; 0x64
 8006a0e:	fb00 f303 	mul.w	r3, r0, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	3332      	adds	r3, #50	; 0x32
 8006a18:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <UART_SetConfig+0x118>)
 8006a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a24:	4419      	add	r1, r3
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009a      	lsls	r2, r3, #2
 8006a30:	441a      	add	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	; (8006a70 <UART_SetConfig+0x118>)
 8006a3e:	fba3 0302 	umull	r0, r3, r3, r2
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	2064      	movs	r0, #100	; 0x64
 8006a46:	fb00 f303 	mul.w	r3, r0, r3
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	3332      	adds	r3, #50	; 0x32
 8006a50:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <UART_SetConfig+0x118>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	f003 020f 	and.w	r2, r3, #15
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	440a      	add	r2, r1
 8006a62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40013800 	.word	0x40013800
 8006a70:	51eb851f 	.word	0x51eb851f

08006a74 <__errno>:
 8006a74:	4b01      	ldr	r3, [pc, #4]	; (8006a7c <__errno+0x8>)
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	2000000c 	.word	0x2000000c

08006a80 <__libc_init_array>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	2600      	movs	r6, #0
 8006a84:	4d0c      	ldr	r5, [pc, #48]	; (8006ab8 <__libc_init_array+0x38>)
 8006a86:	4c0d      	ldr	r4, [pc, #52]	; (8006abc <__libc_init_array+0x3c>)
 8006a88:	1b64      	subs	r4, r4, r5
 8006a8a:	10a4      	asrs	r4, r4, #2
 8006a8c:	42a6      	cmp	r6, r4
 8006a8e:	d109      	bne.n	8006aa4 <__libc_init_array+0x24>
 8006a90:	f001 fe90 	bl	80087b4 <_init>
 8006a94:	2600      	movs	r6, #0
 8006a96:	4d0a      	ldr	r5, [pc, #40]	; (8006ac0 <__libc_init_array+0x40>)
 8006a98:	4c0a      	ldr	r4, [pc, #40]	; (8006ac4 <__libc_init_array+0x44>)
 8006a9a:	1b64      	subs	r4, r4, r5
 8006a9c:	10a4      	asrs	r4, r4, #2
 8006a9e:	42a6      	cmp	r6, r4
 8006aa0:	d105      	bne.n	8006aae <__libc_init_array+0x2e>
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa8:	4798      	blx	r3
 8006aaa:	3601      	adds	r6, #1
 8006aac:	e7ee      	b.n	8006a8c <__libc_init_array+0xc>
 8006aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab2:	4798      	blx	r3
 8006ab4:	3601      	adds	r6, #1
 8006ab6:	e7f2      	b.n	8006a9e <__libc_init_array+0x1e>
 8006ab8:	08008ae8 	.word	0x08008ae8
 8006abc:	08008ae8 	.word	0x08008ae8
 8006ac0:	08008ae8 	.word	0x08008ae8
 8006ac4:	08008aec 	.word	0x08008aec

08006ac8 <memset>:
 8006ac8:	4603      	mov	r3, r0
 8006aca:	4402      	add	r2, r0
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d100      	bne.n	8006ad2 <memset+0xa>
 8006ad0:	4770      	bx	lr
 8006ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ad6:	e7f9      	b.n	8006acc <memset+0x4>

08006ad8 <siprintf>:
 8006ad8:	b40e      	push	{r1, r2, r3}
 8006ada:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ade:	b500      	push	{lr}
 8006ae0:	b09c      	sub	sp, #112	; 0x70
 8006ae2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ae4:	9002      	str	r0, [sp, #8]
 8006ae6:	9006      	str	r0, [sp, #24]
 8006ae8:	9107      	str	r1, [sp, #28]
 8006aea:	9104      	str	r1, [sp, #16]
 8006aec:	4808      	ldr	r0, [pc, #32]	; (8006b10 <siprintf+0x38>)
 8006aee:	4909      	ldr	r1, [pc, #36]	; (8006b14 <siprintf+0x3c>)
 8006af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006af4:	9105      	str	r1, [sp, #20]
 8006af6:	6800      	ldr	r0, [r0, #0]
 8006af8:	a902      	add	r1, sp, #8
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	f000 f868 	bl	8006bd0 <_svfiprintf_r>
 8006b00:	2200      	movs	r2, #0
 8006b02:	9b02      	ldr	r3, [sp, #8]
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	b01c      	add	sp, #112	; 0x70
 8006b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b0c:	b003      	add	sp, #12
 8006b0e:	4770      	bx	lr
 8006b10:	2000000c 	.word	0x2000000c
 8006b14:	ffff0208 	.word	0xffff0208

08006b18 <__ssputs_r>:
 8006b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1c:	688e      	ldr	r6, [r1, #8]
 8006b1e:	4682      	mov	sl, r0
 8006b20:	429e      	cmp	r6, r3
 8006b22:	460c      	mov	r4, r1
 8006b24:	4690      	mov	r8, r2
 8006b26:	461f      	mov	r7, r3
 8006b28:	d838      	bhi.n	8006b9c <__ssputs_r+0x84>
 8006b2a:	898a      	ldrh	r2, [r1, #12]
 8006b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b30:	d032      	beq.n	8006b98 <__ssputs_r+0x80>
 8006b32:	6825      	ldr	r5, [r4, #0]
 8006b34:	6909      	ldr	r1, [r1, #16]
 8006b36:	3301      	adds	r3, #1
 8006b38:	eba5 0901 	sub.w	r9, r5, r1
 8006b3c:	6965      	ldr	r5, [r4, #20]
 8006b3e:	444b      	add	r3, r9
 8006b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b48:	106d      	asrs	r5, r5, #1
 8006b4a:	429d      	cmp	r5, r3
 8006b4c:	bf38      	it	cc
 8006b4e:	461d      	movcc	r5, r3
 8006b50:	0553      	lsls	r3, r2, #21
 8006b52:	d531      	bpl.n	8006bb8 <__ssputs_r+0xa0>
 8006b54:	4629      	mov	r1, r5
 8006b56:	f000 fb53 	bl	8007200 <_malloc_r>
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	b950      	cbnz	r0, 8006b74 <__ssputs_r+0x5c>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b64:	f8ca 3000 	str.w	r3, [sl]
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b6e:	81a3      	strh	r3, [r4, #12]
 8006b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b74:	464a      	mov	r2, r9
 8006b76:	6921      	ldr	r1, [r4, #16]
 8006b78:	f000 face 	bl	8007118 <memcpy>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	6126      	str	r6, [r4, #16]
 8006b8a:	444e      	add	r6, r9
 8006b8c:	6026      	str	r6, [r4, #0]
 8006b8e:	463e      	mov	r6, r7
 8006b90:	6165      	str	r5, [r4, #20]
 8006b92:	eba5 0509 	sub.w	r5, r5, r9
 8006b96:	60a5      	str	r5, [r4, #8]
 8006b98:	42be      	cmp	r6, r7
 8006b9a:	d900      	bls.n	8006b9e <__ssputs_r+0x86>
 8006b9c:	463e      	mov	r6, r7
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	4641      	mov	r1, r8
 8006ba2:	6820      	ldr	r0, [r4, #0]
 8006ba4:	f000 fac6 	bl	8007134 <memmove>
 8006ba8:	68a3      	ldr	r3, [r4, #8]
 8006baa:	6822      	ldr	r2, [r4, #0]
 8006bac:	1b9b      	subs	r3, r3, r6
 8006bae:	4432      	add	r2, r6
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	60a3      	str	r3, [r4, #8]
 8006bb4:	6022      	str	r2, [r4, #0]
 8006bb6:	e7db      	b.n	8006b70 <__ssputs_r+0x58>
 8006bb8:	462a      	mov	r2, r5
 8006bba:	f000 fb7b 	bl	80072b4 <_realloc_r>
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d1e1      	bne.n	8006b88 <__ssputs_r+0x70>
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	6921      	ldr	r1, [r4, #16]
 8006bc8:	f000 face 	bl	8007168 <_free_r>
 8006bcc:	e7c7      	b.n	8006b5e <__ssputs_r+0x46>
	...

08006bd0 <_svfiprintf_r>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4698      	mov	r8, r3
 8006bd6:	898b      	ldrh	r3, [r1, #12]
 8006bd8:	4607      	mov	r7, r0
 8006bda:	061b      	lsls	r3, r3, #24
 8006bdc:	460d      	mov	r5, r1
 8006bde:	4614      	mov	r4, r2
 8006be0:	b09d      	sub	sp, #116	; 0x74
 8006be2:	d50e      	bpl.n	8006c02 <_svfiprintf_r+0x32>
 8006be4:	690b      	ldr	r3, [r1, #16]
 8006be6:	b963      	cbnz	r3, 8006c02 <_svfiprintf_r+0x32>
 8006be8:	2140      	movs	r1, #64	; 0x40
 8006bea:	f000 fb09 	bl	8007200 <_malloc_r>
 8006bee:	6028      	str	r0, [r5, #0]
 8006bf0:	6128      	str	r0, [r5, #16]
 8006bf2:	b920      	cbnz	r0, 8006bfe <_svfiprintf_r+0x2e>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bfc:	e0d1      	b.n	8006da2 <_svfiprintf_r+0x1d2>
 8006bfe:	2340      	movs	r3, #64	; 0x40
 8006c00:	616b      	str	r3, [r5, #20]
 8006c02:	2300      	movs	r3, #0
 8006c04:	9309      	str	r3, [sp, #36]	; 0x24
 8006c06:	2320      	movs	r3, #32
 8006c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c0c:	2330      	movs	r3, #48	; 0x30
 8006c0e:	f04f 0901 	mov.w	r9, #1
 8006c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006dbc <_svfiprintf_r+0x1ec>
 8006c1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1e:	4623      	mov	r3, r4
 8006c20:	469a      	mov	sl, r3
 8006c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c26:	b10a      	cbz	r2, 8006c2c <_svfiprintf_r+0x5c>
 8006c28:	2a25      	cmp	r2, #37	; 0x25
 8006c2a:	d1f9      	bne.n	8006c20 <_svfiprintf_r+0x50>
 8006c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c30:	d00b      	beq.n	8006c4a <_svfiprintf_r+0x7a>
 8006c32:	465b      	mov	r3, fp
 8006c34:	4622      	mov	r2, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff ff6d 	bl	8006b18 <__ssputs_r>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f000 80aa 	beq.w	8006d98 <_svfiprintf_r+0x1c8>
 8006c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c46:	445a      	add	r2, fp
 8006c48:	9209      	str	r2, [sp, #36]	; 0x24
 8006c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 80a2 	beq.w	8006d98 <_svfiprintf_r+0x1c8>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c5e:	f10a 0a01 	add.w	sl, sl, #1
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	9307      	str	r3, [sp, #28]
 8006c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6c:	4654      	mov	r4, sl
 8006c6e:	2205      	movs	r2, #5
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	4851      	ldr	r0, [pc, #324]	; (8006dbc <_svfiprintf_r+0x1ec>)
 8006c76:	f000 fa41 	bl	80070fc <memchr>
 8006c7a:	9a04      	ldr	r2, [sp, #16]
 8006c7c:	b9d8      	cbnz	r0, 8006cb6 <_svfiprintf_r+0xe6>
 8006c7e:	06d0      	lsls	r0, r2, #27
 8006c80:	bf44      	itt	mi
 8006c82:	2320      	movmi	r3, #32
 8006c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c88:	0711      	lsls	r1, r2, #28
 8006c8a:	bf44      	itt	mi
 8006c8c:	232b      	movmi	r3, #43	; 0x2b
 8006c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c92:	f89a 3000 	ldrb.w	r3, [sl]
 8006c96:	2b2a      	cmp	r3, #42	; 0x2a
 8006c98:	d015      	beq.n	8006cc6 <_svfiprintf_r+0xf6>
 8006c9a:	4654      	mov	r4, sl
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f04f 0c0a 	mov.w	ip, #10
 8006ca2:	9a07      	ldr	r2, [sp, #28]
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006caa:	3b30      	subs	r3, #48	; 0x30
 8006cac:	2b09      	cmp	r3, #9
 8006cae:	d94e      	bls.n	8006d4e <_svfiprintf_r+0x17e>
 8006cb0:	b1b0      	cbz	r0, 8006ce0 <_svfiprintf_r+0x110>
 8006cb2:	9207      	str	r2, [sp, #28]
 8006cb4:	e014      	b.n	8006ce0 <_svfiprintf_r+0x110>
 8006cb6:	eba0 0308 	sub.w	r3, r0, r8
 8006cba:	fa09 f303 	lsl.w	r3, r9, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	46a2      	mov	sl, r4
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	e7d2      	b.n	8006c6c <_svfiprintf_r+0x9c>
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	1d19      	adds	r1, r3, #4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	9103      	str	r1, [sp, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bfbb      	ittet	lt
 8006cd2:	425b      	neglt	r3, r3
 8006cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8006cd8:	9307      	strge	r3, [sp, #28]
 8006cda:	9307      	strlt	r3, [sp, #28]
 8006cdc:	bfb8      	it	lt
 8006cde:	9204      	strlt	r2, [sp, #16]
 8006ce0:	7823      	ldrb	r3, [r4, #0]
 8006ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce4:	d10c      	bne.n	8006d00 <_svfiprintf_r+0x130>
 8006ce6:	7863      	ldrb	r3, [r4, #1]
 8006ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cea:	d135      	bne.n	8006d58 <_svfiprintf_r+0x188>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	3402      	adds	r4, #2
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	9203      	str	r2, [sp, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfb8      	it	lt
 8006cfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cfe:	9305      	str	r3, [sp, #20]
 8006d00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006dcc <_svfiprintf_r+0x1fc>
 8006d04:	2203      	movs	r2, #3
 8006d06:	4650      	mov	r0, sl
 8006d08:	7821      	ldrb	r1, [r4, #0]
 8006d0a:	f000 f9f7 	bl	80070fc <memchr>
 8006d0e:	b140      	cbz	r0, 8006d22 <_svfiprintf_r+0x152>
 8006d10:	2340      	movs	r3, #64	; 0x40
 8006d12:	eba0 000a 	sub.w	r0, r0, sl
 8006d16:	fa03 f000 	lsl.w	r0, r3, r0
 8006d1a:	9b04      	ldr	r3, [sp, #16]
 8006d1c:	3401      	adds	r4, #1
 8006d1e:	4303      	orrs	r3, r0
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d26:	2206      	movs	r2, #6
 8006d28:	4825      	ldr	r0, [pc, #148]	; (8006dc0 <_svfiprintf_r+0x1f0>)
 8006d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d2e:	f000 f9e5 	bl	80070fc <memchr>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d038      	beq.n	8006da8 <_svfiprintf_r+0x1d8>
 8006d36:	4b23      	ldr	r3, [pc, #140]	; (8006dc4 <_svfiprintf_r+0x1f4>)
 8006d38:	bb1b      	cbnz	r3, 8006d82 <_svfiprintf_r+0x1b2>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	3307      	adds	r3, #7
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	3308      	adds	r3, #8
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d48:	4433      	add	r3, r6
 8006d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4c:	e767      	b.n	8006c1e <_svfiprintf_r+0x4e>
 8006d4e:	460c      	mov	r4, r1
 8006d50:	2001      	movs	r0, #1
 8006d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d56:	e7a5      	b.n	8006ca4 <_svfiprintf_r+0xd4>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f04f 0c0a 	mov.w	ip, #10
 8006d5e:	4619      	mov	r1, r3
 8006d60:	3401      	adds	r4, #1
 8006d62:	9305      	str	r3, [sp, #20]
 8006d64:	4620      	mov	r0, r4
 8006d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d6a:	3a30      	subs	r2, #48	; 0x30
 8006d6c:	2a09      	cmp	r2, #9
 8006d6e:	d903      	bls.n	8006d78 <_svfiprintf_r+0x1a8>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0c5      	beq.n	8006d00 <_svfiprintf_r+0x130>
 8006d74:	9105      	str	r1, [sp, #20]
 8006d76:	e7c3      	b.n	8006d00 <_svfiprintf_r+0x130>
 8006d78:	4604      	mov	r4, r0
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d80:	e7f0      	b.n	8006d64 <_svfiprintf_r+0x194>
 8006d82:	ab03      	add	r3, sp, #12
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	462a      	mov	r2, r5
 8006d88:	4638      	mov	r0, r7
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <_svfiprintf_r+0x1f8>)
 8006d8c:	a904      	add	r1, sp, #16
 8006d8e:	f3af 8000 	nop.w
 8006d92:	1c42      	adds	r2, r0, #1
 8006d94:	4606      	mov	r6, r0
 8006d96:	d1d6      	bne.n	8006d46 <_svfiprintf_r+0x176>
 8006d98:	89ab      	ldrh	r3, [r5, #12]
 8006d9a:	065b      	lsls	r3, r3, #25
 8006d9c:	f53f af2c 	bmi.w	8006bf8 <_svfiprintf_r+0x28>
 8006da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006da2:	b01d      	add	sp, #116	; 0x74
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	ab03      	add	r3, sp, #12
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	462a      	mov	r2, r5
 8006dae:	4638      	mov	r0, r7
 8006db0:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <_svfiprintf_r+0x1f8>)
 8006db2:	a904      	add	r1, sp, #16
 8006db4:	f000 f87c 	bl	8006eb0 <_printf_i>
 8006db8:	e7eb      	b.n	8006d92 <_svfiprintf_r+0x1c2>
 8006dba:	bf00      	nop
 8006dbc:	08008a74 	.word	0x08008a74
 8006dc0:	08008a7e 	.word	0x08008a7e
 8006dc4:	00000000 	.word	0x00000000
 8006dc8:	08006b19 	.word	0x08006b19
 8006dcc:	08008a7a 	.word	0x08008a7a

08006dd0 <_printf_common>:
 8006dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	4699      	mov	r9, r3
 8006dd8:	688a      	ldr	r2, [r1, #8]
 8006dda:	690b      	ldr	r3, [r1, #16]
 8006ddc:	4607      	mov	r7, r0
 8006dde:	4293      	cmp	r3, r2
 8006de0:	bfb8      	it	lt
 8006de2:	4613      	movlt	r3, r2
 8006de4:	6033      	str	r3, [r6, #0]
 8006de6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dea:	460c      	mov	r4, r1
 8006dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006df0:	b10a      	cbz	r2, 8006df6 <_printf_common+0x26>
 8006df2:	3301      	adds	r3, #1
 8006df4:	6033      	str	r3, [r6, #0]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	0699      	lsls	r1, r3, #26
 8006dfa:	bf42      	ittt	mi
 8006dfc:	6833      	ldrmi	r3, [r6, #0]
 8006dfe:	3302      	addmi	r3, #2
 8006e00:	6033      	strmi	r3, [r6, #0]
 8006e02:	6825      	ldr	r5, [r4, #0]
 8006e04:	f015 0506 	ands.w	r5, r5, #6
 8006e08:	d106      	bne.n	8006e18 <_printf_common+0x48>
 8006e0a:	f104 0a19 	add.w	sl, r4, #25
 8006e0e:	68e3      	ldr	r3, [r4, #12]
 8006e10:	6832      	ldr	r2, [r6, #0]
 8006e12:	1a9b      	subs	r3, r3, r2
 8006e14:	42ab      	cmp	r3, r5
 8006e16:	dc28      	bgt.n	8006e6a <_printf_common+0x9a>
 8006e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e1c:	1e13      	subs	r3, r2, #0
 8006e1e:	6822      	ldr	r2, [r4, #0]
 8006e20:	bf18      	it	ne
 8006e22:	2301      	movne	r3, #1
 8006e24:	0692      	lsls	r2, r2, #26
 8006e26:	d42d      	bmi.n	8006e84 <_printf_common+0xb4>
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e30:	47c0      	blx	r8
 8006e32:	3001      	adds	r0, #1
 8006e34:	d020      	beq.n	8006e78 <_printf_common+0xa8>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	68e5      	ldr	r5, [r4, #12]
 8006e3a:	f003 0306 	and.w	r3, r3, #6
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	bf18      	it	ne
 8006e42:	2500      	movne	r5, #0
 8006e44:	6832      	ldr	r2, [r6, #0]
 8006e46:	f04f 0600 	mov.w	r6, #0
 8006e4a:	68a3      	ldr	r3, [r4, #8]
 8006e4c:	bf08      	it	eq
 8006e4e:	1aad      	subeq	r5, r5, r2
 8006e50:	6922      	ldr	r2, [r4, #16]
 8006e52:	bf08      	it	eq
 8006e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bfc4      	itt	gt
 8006e5c:	1a9b      	subgt	r3, r3, r2
 8006e5e:	18ed      	addgt	r5, r5, r3
 8006e60:	341a      	adds	r4, #26
 8006e62:	42b5      	cmp	r5, r6
 8006e64:	d11a      	bne.n	8006e9c <_printf_common+0xcc>
 8006e66:	2000      	movs	r0, #0
 8006e68:	e008      	b.n	8006e7c <_printf_common+0xac>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4652      	mov	r2, sl
 8006e6e:	4649      	mov	r1, r9
 8006e70:	4638      	mov	r0, r7
 8006e72:	47c0      	blx	r8
 8006e74:	3001      	adds	r0, #1
 8006e76:	d103      	bne.n	8006e80 <_printf_common+0xb0>
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e80:	3501      	adds	r5, #1
 8006e82:	e7c4      	b.n	8006e0e <_printf_common+0x3e>
 8006e84:	2030      	movs	r0, #48	; 0x30
 8006e86:	18e1      	adds	r1, r4, r3
 8006e88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e92:	4422      	add	r2, r4
 8006e94:	3302      	adds	r3, #2
 8006e96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e9a:	e7c5      	b.n	8006e28 <_printf_common+0x58>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	47c0      	blx	r8
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d0e6      	beq.n	8006e78 <_printf_common+0xa8>
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7d9      	b.n	8006e62 <_printf_common+0x92>
	...

08006eb0 <_printf_i>:
 8006eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	7e27      	ldrb	r7, [r4, #24]
 8006eb8:	4691      	mov	r9, r2
 8006eba:	2f78      	cmp	r7, #120	; 0x78
 8006ebc:	4680      	mov	r8, r0
 8006ebe:	469a      	mov	sl, r3
 8006ec0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ec6:	d807      	bhi.n	8006ed8 <_printf_i+0x28>
 8006ec8:	2f62      	cmp	r7, #98	; 0x62
 8006eca:	d80a      	bhi.n	8006ee2 <_printf_i+0x32>
 8006ecc:	2f00      	cmp	r7, #0
 8006ece:	f000 80d9 	beq.w	8007084 <_printf_i+0x1d4>
 8006ed2:	2f58      	cmp	r7, #88	; 0x58
 8006ed4:	f000 80a4 	beq.w	8007020 <_printf_i+0x170>
 8006ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ee0:	e03a      	b.n	8006f58 <_printf_i+0xa8>
 8006ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ee6:	2b15      	cmp	r3, #21
 8006ee8:	d8f6      	bhi.n	8006ed8 <_printf_i+0x28>
 8006eea:	a001      	add	r0, pc, #4	; (adr r0, 8006ef0 <_printf_i+0x40>)
 8006eec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ef0:	08006f49 	.word	0x08006f49
 8006ef4:	08006f5d 	.word	0x08006f5d
 8006ef8:	08006ed9 	.word	0x08006ed9
 8006efc:	08006ed9 	.word	0x08006ed9
 8006f00:	08006ed9 	.word	0x08006ed9
 8006f04:	08006ed9 	.word	0x08006ed9
 8006f08:	08006f5d 	.word	0x08006f5d
 8006f0c:	08006ed9 	.word	0x08006ed9
 8006f10:	08006ed9 	.word	0x08006ed9
 8006f14:	08006ed9 	.word	0x08006ed9
 8006f18:	08006ed9 	.word	0x08006ed9
 8006f1c:	0800706b 	.word	0x0800706b
 8006f20:	08006f8d 	.word	0x08006f8d
 8006f24:	0800704d 	.word	0x0800704d
 8006f28:	08006ed9 	.word	0x08006ed9
 8006f2c:	08006ed9 	.word	0x08006ed9
 8006f30:	0800708d 	.word	0x0800708d
 8006f34:	08006ed9 	.word	0x08006ed9
 8006f38:	08006f8d 	.word	0x08006f8d
 8006f3c:	08006ed9 	.word	0x08006ed9
 8006f40:	08006ed9 	.word	0x08006ed9
 8006f44:	08007055 	.word	0x08007055
 8006f48:	680b      	ldr	r3, [r1, #0]
 8006f4a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f4e:	1d1a      	adds	r2, r3, #4
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	600a      	str	r2, [r1, #0]
 8006f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0a4      	b.n	80070a6 <_printf_i+0x1f6>
 8006f5c:	6825      	ldr	r5, [r4, #0]
 8006f5e:	6808      	ldr	r0, [r1, #0]
 8006f60:	062e      	lsls	r6, r5, #24
 8006f62:	f100 0304 	add.w	r3, r0, #4
 8006f66:	d50a      	bpl.n	8006f7e <_printf_i+0xce>
 8006f68:	6805      	ldr	r5, [r0, #0]
 8006f6a:	600b      	str	r3, [r1, #0]
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	da03      	bge.n	8006f78 <_printf_i+0xc8>
 8006f70:	232d      	movs	r3, #45	; 0x2d
 8006f72:	426d      	negs	r5, r5
 8006f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f78:	230a      	movs	r3, #10
 8006f7a:	485e      	ldr	r0, [pc, #376]	; (80070f4 <_printf_i+0x244>)
 8006f7c:	e019      	b.n	8006fb2 <_printf_i+0x102>
 8006f7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f82:	6805      	ldr	r5, [r0, #0]
 8006f84:	600b      	str	r3, [r1, #0]
 8006f86:	bf18      	it	ne
 8006f88:	b22d      	sxthne	r5, r5
 8006f8a:	e7ef      	b.n	8006f6c <_printf_i+0xbc>
 8006f8c:	680b      	ldr	r3, [r1, #0]
 8006f8e:	6825      	ldr	r5, [r4, #0]
 8006f90:	1d18      	adds	r0, r3, #4
 8006f92:	6008      	str	r0, [r1, #0]
 8006f94:	0628      	lsls	r0, r5, #24
 8006f96:	d501      	bpl.n	8006f9c <_printf_i+0xec>
 8006f98:	681d      	ldr	r5, [r3, #0]
 8006f9a:	e002      	b.n	8006fa2 <_printf_i+0xf2>
 8006f9c:	0669      	lsls	r1, r5, #25
 8006f9e:	d5fb      	bpl.n	8006f98 <_printf_i+0xe8>
 8006fa0:	881d      	ldrh	r5, [r3, #0]
 8006fa2:	2f6f      	cmp	r7, #111	; 0x6f
 8006fa4:	bf0c      	ite	eq
 8006fa6:	2308      	moveq	r3, #8
 8006fa8:	230a      	movne	r3, #10
 8006faa:	4852      	ldr	r0, [pc, #328]	; (80070f4 <_printf_i+0x244>)
 8006fac:	2100      	movs	r1, #0
 8006fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fb2:	6866      	ldr	r6, [r4, #4]
 8006fb4:	2e00      	cmp	r6, #0
 8006fb6:	bfa8      	it	ge
 8006fb8:	6821      	ldrge	r1, [r4, #0]
 8006fba:	60a6      	str	r6, [r4, #8]
 8006fbc:	bfa4      	itt	ge
 8006fbe:	f021 0104 	bicge.w	r1, r1, #4
 8006fc2:	6021      	strge	r1, [r4, #0]
 8006fc4:	b90d      	cbnz	r5, 8006fca <_printf_i+0x11a>
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	d04d      	beq.n	8007066 <_printf_i+0x1b6>
 8006fca:	4616      	mov	r6, r2
 8006fcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fd0:	fb03 5711 	mls	r7, r3, r1, r5
 8006fd4:	5dc7      	ldrb	r7, [r0, r7]
 8006fd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fda:	462f      	mov	r7, r5
 8006fdc:	42bb      	cmp	r3, r7
 8006fde:	460d      	mov	r5, r1
 8006fe0:	d9f4      	bls.n	8006fcc <_printf_i+0x11c>
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d10b      	bne.n	8006ffe <_printf_i+0x14e>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	07df      	lsls	r7, r3, #31
 8006fea:	d508      	bpl.n	8006ffe <_printf_i+0x14e>
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	6861      	ldr	r1, [r4, #4]
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	bfde      	ittt	le
 8006ff4:	2330      	movle	r3, #48	; 0x30
 8006ff6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ffa:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006ffe:	1b92      	subs	r2, r2, r6
 8007000:	6122      	str	r2, [r4, #16]
 8007002:	464b      	mov	r3, r9
 8007004:	4621      	mov	r1, r4
 8007006:	4640      	mov	r0, r8
 8007008:	f8cd a000 	str.w	sl, [sp]
 800700c:	aa03      	add	r2, sp, #12
 800700e:	f7ff fedf 	bl	8006dd0 <_printf_common>
 8007012:	3001      	adds	r0, #1
 8007014:	d14c      	bne.n	80070b0 <_printf_i+0x200>
 8007016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800701a:	b004      	add	sp, #16
 800701c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007020:	4834      	ldr	r0, [pc, #208]	; (80070f4 <_printf_i+0x244>)
 8007022:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007026:	680e      	ldr	r6, [r1, #0]
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	f856 5b04 	ldr.w	r5, [r6], #4
 800702e:	061f      	lsls	r7, r3, #24
 8007030:	600e      	str	r6, [r1, #0]
 8007032:	d514      	bpl.n	800705e <_printf_i+0x1ae>
 8007034:	07d9      	lsls	r1, r3, #31
 8007036:	bf44      	itt	mi
 8007038:	f043 0320 	orrmi.w	r3, r3, #32
 800703c:	6023      	strmi	r3, [r4, #0]
 800703e:	b91d      	cbnz	r5, 8007048 <_printf_i+0x198>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	f023 0320 	bic.w	r3, r3, #32
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	2310      	movs	r3, #16
 800704a:	e7af      	b.n	8006fac <_printf_i+0xfc>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	f043 0320 	orr.w	r3, r3, #32
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	2378      	movs	r3, #120	; 0x78
 8007056:	4828      	ldr	r0, [pc, #160]	; (80070f8 <_printf_i+0x248>)
 8007058:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800705c:	e7e3      	b.n	8007026 <_printf_i+0x176>
 800705e:	065e      	lsls	r6, r3, #25
 8007060:	bf48      	it	mi
 8007062:	b2ad      	uxthmi	r5, r5
 8007064:	e7e6      	b.n	8007034 <_printf_i+0x184>
 8007066:	4616      	mov	r6, r2
 8007068:	e7bb      	b.n	8006fe2 <_printf_i+0x132>
 800706a:	680b      	ldr	r3, [r1, #0]
 800706c:	6826      	ldr	r6, [r4, #0]
 800706e:	1d1d      	adds	r5, r3, #4
 8007070:	6960      	ldr	r0, [r4, #20]
 8007072:	600d      	str	r5, [r1, #0]
 8007074:	0635      	lsls	r5, r6, #24
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	d501      	bpl.n	800707e <_printf_i+0x1ce>
 800707a:	6018      	str	r0, [r3, #0]
 800707c:	e002      	b.n	8007084 <_printf_i+0x1d4>
 800707e:	0671      	lsls	r1, r6, #25
 8007080:	d5fb      	bpl.n	800707a <_printf_i+0x1ca>
 8007082:	8018      	strh	r0, [r3, #0]
 8007084:	2300      	movs	r3, #0
 8007086:	4616      	mov	r6, r2
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	e7ba      	b.n	8007002 <_printf_i+0x152>
 800708c:	680b      	ldr	r3, [r1, #0]
 800708e:	1d1a      	adds	r2, r3, #4
 8007090:	600a      	str	r2, [r1, #0]
 8007092:	681e      	ldr	r6, [r3, #0]
 8007094:	2100      	movs	r1, #0
 8007096:	4630      	mov	r0, r6
 8007098:	6862      	ldr	r2, [r4, #4]
 800709a:	f000 f82f 	bl	80070fc <memchr>
 800709e:	b108      	cbz	r0, 80070a4 <_printf_i+0x1f4>
 80070a0:	1b80      	subs	r0, r0, r6
 80070a2:	6060      	str	r0, [r4, #4]
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	2300      	movs	r3, #0
 80070aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ae:	e7a8      	b.n	8007002 <_printf_i+0x152>
 80070b0:	4632      	mov	r2, r6
 80070b2:	4649      	mov	r1, r9
 80070b4:	4640      	mov	r0, r8
 80070b6:	6923      	ldr	r3, [r4, #16]
 80070b8:	47d0      	blx	sl
 80070ba:	3001      	adds	r0, #1
 80070bc:	d0ab      	beq.n	8007016 <_printf_i+0x166>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	079b      	lsls	r3, r3, #30
 80070c2:	d413      	bmi.n	80070ec <_printf_i+0x23c>
 80070c4:	68e0      	ldr	r0, [r4, #12]
 80070c6:	9b03      	ldr	r3, [sp, #12]
 80070c8:	4298      	cmp	r0, r3
 80070ca:	bfb8      	it	lt
 80070cc:	4618      	movlt	r0, r3
 80070ce:	e7a4      	b.n	800701a <_printf_i+0x16a>
 80070d0:	2301      	movs	r3, #1
 80070d2:	4632      	mov	r2, r6
 80070d4:	4649      	mov	r1, r9
 80070d6:	4640      	mov	r0, r8
 80070d8:	47d0      	blx	sl
 80070da:	3001      	adds	r0, #1
 80070dc:	d09b      	beq.n	8007016 <_printf_i+0x166>
 80070de:	3501      	adds	r5, #1
 80070e0:	68e3      	ldr	r3, [r4, #12]
 80070e2:	9903      	ldr	r1, [sp, #12]
 80070e4:	1a5b      	subs	r3, r3, r1
 80070e6:	42ab      	cmp	r3, r5
 80070e8:	dcf2      	bgt.n	80070d0 <_printf_i+0x220>
 80070ea:	e7eb      	b.n	80070c4 <_printf_i+0x214>
 80070ec:	2500      	movs	r5, #0
 80070ee:	f104 0619 	add.w	r6, r4, #25
 80070f2:	e7f5      	b.n	80070e0 <_printf_i+0x230>
 80070f4:	08008a85 	.word	0x08008a85
 80070f8:	08008a96 	.word	0x08008a96

080070fc <memchr>:
 80070fc:	4603      	mov	r3, r0
 80070fe:	b510      	push	{r4, lr}
 8007100:	b2c9      	uxtb	r1, r1
 8007102:	4402      	add	r2, r0
 8007104:	4293      	cmp	r3, r2
 8007106:	4618      	mov	r0, r3
 8007108:	d101      	bne.n	800710e <memchr+0x12>
 800710a:	2000      	movs	r0, #0
 800710c:	e003      	b.n	8007116 <memchr+0x1a>
 800710e:	7804      	ldrb	r4, [r0, #0]
 8007110:	3301      	adds	r3, #1
 8007112:	428c      	cmp	r4, r1
 8007114:	d1f6      	bne.n	8007104 <memchr+0x8>
 8007116:	bd10      	pop	{r4, pc}

08007118 <memcpy>:
 8007118:	440a      	add	r2, r1
 800711a:	4291      	cmp	r1, r2
 800711c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007120:	d100      	bne.n	8007124 <memcpy+0xc>
 8007122:	4770      	bx	lr
 8007124:	b510      	push	{r4, lr}
 8007126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800712a:	4291      	cmp	r1, r2
 800712c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007130:	d1f9      	bne.n	8007126 <memcpy+0xe>
 8007132:	bd10      	pop	{r4, pc}

08007134 <memmove>:
 8007134:	4288      	cmp	r0, r1
 8007136:	b510      	push	{r4, lr}
 8007138:	eb01 0402 	add.w	r4, r1, r2
 800713c:	d902      	bls.n	8007144 <memmove+0x10>
 800713e:	4284      	cmp	r4, r0
 8007140:	4623      	mov	r3, r4
 8007142:	d807      	bhi.n	8007154 <memmove+0x20>
 8007144:	1e43      	subs	r3, r0, #1
 8007146:	42a1      	cmp	r1, r4
 8007148:	d008      	beq.n	800715c <memmove+0x28>
 800714a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800714e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007152:	e7f8      	b.n	8007146 <memmove+0x12>
 8007154:	4601      	mov	r1, r0
 8007156:	4402      	add	r2, r0
 8007158:	428a      	cmp	r2, r1
 800715a:	d100      	bne.n	800715e <memmove+0x2a>
 800715c:	bd10      	pop	{r4, pc}
 800715e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007166:	e7f7      	b.n	8007158 <memmove+0x24>

08007168 <_free_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4605      	mov	r5, r0
 800716c:	2900      	cmp	r1, #0
 800716e:	d043      	beq.n	80071f8 <_free_r+0x90>
 8007170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007174:	1f0c      	subs	r4, r1, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfb8      	it	lt
 800717a:	18e4      	addlt	r4, r4, r3
 800717c:	f000 f8d0 	bl	8007320 <__malloc_lock>
 8007180:	4a1e      	ldr	r2, [pc, #120]	; (80071fc <_free_r+0x94>)
 8007182:	6813      	ldr	r3, [r2, #0]
 8007184:	4610      	mov	r0, r2
 8007186:	b933      	cbnz	r3, 8007196 <_free_r+0x2e>
 8007188:	6063      	str	r3, [r4, #4]
 800718a:	6014      	str	r4, [r2, #0]
 800718c:	4628      	mov	r0, r5
 800718e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007192:	f000 b8cb 	b.w	800732c <__malloc_unlock>
 8007196:	42a3      	cmp	r3, r4
 8007198:	d90a      	bls.n	80071b0 <_free_r+0x48>
 800719a:	6821      	ldr	r1, [r4, #0]
 800719c:	1862      	adds	r2, r4, r1
 800719e:	4293      	cmp	r3, r2
 80071a0:	bf01      	itttt	eq
 80071a2:	681a      	ldreq	r2, [r3, #0]
 80071a4:	685b      	ldreq	r3, [r3, #4]
 80071a6:	1852      	addeq	r2, r2, r1
 80071a8:	6022      	streq	r2, [r4, #0]
 80071aa:	6063      	str	r3, [r4, #4]
 80071ac:	6004      	str	r4, [r0, #0]
 80071ae:	e7ed      	b.n	800718c <_free_r+0x24>
 80071b0:	461a      	mov	r2, r3
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	b10b      	cbz	r3, 80071ba <_free_r+0x52>
 80071b6:	42a3      	cmp	r3, r4
 80071b8:	d9fa      	bls.n	80071b0 <_free_r+0x48>
 80071ba:	6811      	ldr	r1, [r2, #0]
 80071bc:	1850      	adds	r0, r2, r1
 80071be:	42a0      	cmp	r0, r4
 80071c0:	d10b      	bne.n	80071da <_free_r+0x72>
 80071c2:	6820      	ldr	r0, [r4, #0]
 80071c4:	4401      	add	r1, r0
 80071c6:	1850      	adds	r0, r2, r1
 80071c8:	4283      	cmp	r3, r0
 80071ca:	6011      	str	r1, [r2, #0]
 80071cc:	d1de      	bne.n	800718c <_free_r+0x24>
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	4401      	add	r1, r0
 80071d4:	6011      	str	r1, [r2, #0]
 80071d6:	6053      	str	r3, [r2, #4]
 80071d8:	e7d8      	b.n	800718c <_free_r+0x24>
 80071da:	d902      	bls.n	80071e2 <_free_r+0x7a>
 80071dc:	230c      	movs	r3, #12
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	e7d4      	b.n	800718c <_free_r+0x24>
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	1821      	adds	r1, r4, r0
 80071e6:	428b      	cmp	r3, r1
 80071e8:	bf01      	itttt	eq
 80071ea:	6819      	ldreq	r1, [r3, #0]
 80071ec:	685b      	ldreq	r3, [r3, #4]
 80071ee:	1809      	addeq	r1, r1, r0
 80071f0:	6021      	streq	r1, [r4, #0]
 80071f2:	6063      	str	r3, [r4, #4]
 80071f4:	6054      	str	r4, [r2, #4]
 80071f6:	e7c9      	b.n	800718c <_free_r+0x24>
 80071f8:	bd38      	pop	{r3, r4, r5, pc}
 80071fa:	bf00      	nop
 80071fc:	20000174 	.word	0x20000174

08007200 <_malloc_r>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	1ccd      	adds	r5, r1, #3
 8007204:	f025 0503 	bic.w	r5, r5, #3
 8007208:	3508      	adds	r5, #8
 800720a:	2d0c      	cmp	r5, #12
 800720c:	bf38      	it	cc
 800720e:	250c      	movcc	r5, #12
 8007210:	2d00      	cmp	r5, #0
 8007212:	4606      	mov	r6, r0
 8007214:	db01      	blt.n	800721a <_malloc_r+0x1a>
 8007216:	42a9      	cmp	r1, r5
 8007218:	d903      	bls.n	8007222 <_malloc_r+0x22>
 800721a:	230c      	movs	r3, #12
 800721c:	6033      	str	r3, [r6, #0]
 800721e:	2000      	movs	r0, #0
 8007220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007222:	f000 f87d 	bl	8007320 <__malloc_lock>
 8007226:	4921      	ldr	r1, [pc, #132]	; (80072ac <_malloc_r+0xac>)
 8007228:	680a      	ldr	r2, [r1, #0]
 800722a:	4614      	mov	r4, r2
 800722c:	b99c      	cbnz	r4, 8007256 <_malloc_r+0x56>
 800722e:	4f20      	ldr	r7, [pc, #128]	; (80072b0 <_malloc_r+0xb0>)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	b923      	cbnz	r3, 800723e <_malloc_r+0x3e>
 8007234:	4621      	mov	r1, r4
 8007236:	4630      	mov	r0, r6
 8007238:	f000 f862 	bl	8007300 <_sbrk_r>
 800723c:	6038      	str	r0, [r7, #0]
 800723e:	4629      	mov	r1, r5
 8007240:	4630      	mov	r0, r6
 8007242:	f000 f85d 	bl	8007300 <_sbrk_r>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	d123      	bne.n	8007292 <_malloc_r+0x92>
 800724a:	230c      	movs	r3, #12
 800724c:	4630      	mov	r0, r6
 800724e:	6033      	str	r3, [r6, #0]
 8007250:	f000 f86c 	bl	800732c <__malloc_unlock>
 8007254:	e7e3      	b.n	800721e <_malloc_r+0x1e>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	1b5b      	subs	r3, r3, r5
 800725a:	d417      	bmi.n	800728c <_malloc_r+0x8c>
 800725c:	2b0b      	cmp	r3, #11
 800725e:	d903      	bls.n	8007268 <_malloc_r+0x68>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	441c      	add	r4, r3
 8007264:	6025      	str	r5, [r4, #0]
 8007266:	e004      	b.n	8007272 <_malloc_r+0x72>
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	42a2      	cmp	r2, r4
 800726c:	bf0c      	ite	eq
 800726e:	600b      	streq	r3, [r1, #0]
 8007270:	6053      	strne	r3, [r2, #4]
 8007272:	4630      	mov	r0, r6
 8007274:	f000 f85a 	bl	800732c <__malloc_unlock>
 8007278:	f104 000b 	add.w	r0, r4, #11
 800727c:	1d23      	adds	r3, r4, #4
 800727e:	f020 0007 	bic.w	r0, r0, #7
 8007282:	1ac2      	subs	r2, r0, r3
 8007284:	d0cc      	beq.n	8007220 <_malloc_r+0x20>
 8007286:	1a1b      	subs	r3, r3, r0
 8007288:	50a3      	str	r3, [r4, r2]
 800728a:	e7c9      	b.n	8007220 <_malloc_r+0x20>
 800728c:	4622      	mov	r2, r4
 800728e:	6864      	ldr	r4, [r4, #4]
 8007290:	e7cc      	b.n	800722c <_malloc_r+0x2c>
 8007292:	1cc4      	adds	r4, r0, #3
 8007294:	f024 0403 	bic.w	r4, r4, #3
 8007298:	42a0      	cmp	r0, r4
 800729a:	d0e3      	beq.n	8007264 <_malloc_r+0x64>
 800729c:	1a21      	subs	r1, r4, r0
 800729e:	4630      	mov	r0, r6
 80072a0:	f000 f82e 	bl	8007300 <_sbrk_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d1dd      	bne.n	8007264 <_malloc_r+0x64>
 80072a8:	e7cf      	b.n	800724a <_malloc_r+0x4a>
 80072aa:	bf00      	nop
 80072ac:	20000174 	.word	0x20000174
 80072b0:	20000178 	.word	0x20000178

080072b4 <_realloc_r>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	4607      	mov	r7, r0
 80072b8:	4614      	mov	r4, r2
 80072ba:	460e      	mov	r6, r1
 80072bc:	b921      	cbnz	r1, 80072c8 <_realloc_r+0x14>
 80072be:	4611      	mov	r1, r2
 80072c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072c4:	f7ff bf9c 	b.w	8007200 <_malloc_r>
 80072c8:	b922      	cbnz	r2, 80072d4 <_realloc_r+0x20>
 80072ca:	f7ff ff4d 	bl	8007168 <_free_r>
 80072ce:	4625      	mov	r5, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d4:	f000 f830 	bl	8007338 <_malloc_usable_size_r>
 80072d8:	42a0      	cmp	r0, r4
 80072da:	d20f      	bcs.n	80072fc <_realloc_r+0x48>
 80072dc:	4621      	mov	r1, r4
 80072de:	4638      	mov	r0, r7
 80072e0:	f7ff ff8e 	bl	8007200 <_malloc_r>
 80072e4:	4605      	mov	r5, r0
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d0f2      	beq.n	80072d0 <_realloc_r+0x1c>
 80072ea:	4631      	mov	r1, r6
 80072ec:	4622      	mov	r2, r4
 80072ee:	f7ff ff13 	bl	8007118 <memcpy>
 80072f2:	4631      	mov	r1, r6
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff ff37 	bl	8007168 <_free_r>
 80072fa:	e7e9      	b.n	80072d0 <_realloc_r+0x1c>
 80072fc:	4635      	mov	r5, r6
 80072fe:	e7e7      	b.n	80072d0 <_realloc_r+0x1c>

08007300 <_sbrk_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	2300      	movs	r3, #0
 8007304:	4d05      	ldr	r5, [pc, #20]	; (800731c <_sbrk_r+0x1c>)
 8007306:	4604      	mov	r4, r0
 8007308:	4608      	mov	r0, r1
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	f7fc f8aa 	bl	8003464 <_sbrk>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_sbrk_r+0x1a>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_sbrk_r+0x1a>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	20000c30 	.word	0x20000c30

08007320 <__malloc_lock>:
 8007320:	4801      	ldr	r0, [pc, #4]	; (8007328 <__malloc_lock+0x8>)
 8007322:	f000 b811 	b.w	8007348 <__retarget_lock_acquire_recursive>
 8007326:	bf00      	nop
 8007328:	20000c38 	.word	0x20000c38

0800732c <__malloc_unlock>:
 800732c:	4801      	ldr	r0, [pc, #4]	; (8007334 <__malloc_unlock+0x8>)
 800732e:	f000 b80c 	b.w	800734a <__retarget_lock_release_recursive>
 8007332:	bf00      	nop
 8007334:	20000c38 	.word	0x20000c38

08007338 <_malloc_usable_size_r>:
 8007338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800733c:	1f18      	subs	r0, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfbc      	itt	lt
 8007342:	580b      	ldrlt	r3, [r1, r0]
 8007344:	18c0      	addlt	r0, r0, r3
 8007346:	4770      	bx	lr

08007348 <__retarget_lock_acquire_recursive>:
 8007348:	4770      	bx	lr

0800734a <__retarget_lock_release_recursive>:
 800734a:	4770      	bx	lr

0800734c <acos>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	4604      	mov	r4, r0
 8007350:	460d      	mov	r5, r1
 8007352:	f000 f901 	bl	8007558 <__ieee754_acos>
 8007356:	4b11      	ldr	r3, [pc, #68]	; (800739c <acos+0x50>)
 8007358:	4606      	mov	r6, r0
 800735a:	f993 3000 	ldrsb.w	r3, [r3]
 800735e:	460f      	mov	r7, r1
 8007360:	3301      	adds	r3, #1
 8007362:	d018      	beq.n	8007396 <acos+0x4a>
 8007364:	4622      	mov	r2, r4
 8007366:	462b      	mov	r3, r5
 8007368:	4620      	mov	r0, r4
 800736a:	4629      	mov	r1, r5
 800736c:	f7f9 fb46 	bl	80009fc <__aeabi_dcmpun>
 8007370:	b988      	cbnz	r0, 8007396 <acos+0x4a>
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f001 f8fd 	bl	8008574 <fabs>
 800737a:	2200      	movs	r2, #0
 800737c:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <acos+0x54>)
 800737e:	f7f9 fb33 	bl	80009e8 <__aeabi_dcmpgt>
 8007382:	b140      	cbz	r0, 8007396 <acos+0x4a>
 8007384:	f7ff fb76 	bl	8006a74 <__errno>
 8007388:	2321      	movs	r3, #33	; 0x21
 800738a:	6003      	str	r3, [r0, #0]
 800738c:	4805      	ldr	r0, [pc, #20]	; (80073a4 <acos+0x58>)
 800738e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007392:	f001 b8f9 	b.w	8008588 <nan>
 8007396:	4630      	mov	r0, r6
 8007398:	4639      	mov	r1, r7
 800739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800739c:	20000070 	.word	0x20000070
 80073a0:	3ff00000 	.word	0x3ff00000
 80073a4:	08008a79 	.word	0x08008a79

080073a8 <pow>:
 80073a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ac:	461f      	mov	r7, r3
 80073ae:	4680      	mov	r8, r0
 80073b0:	4689      	mov	r9, r1
 80073b2:	4616      	mov	r6, r2
 80073b4:	f000 fb1c 	bl	80079f0 <__ieee754_pow>
 80073b8:	4b4d      	ldr	r3, [pc, #308]	; (80074f0 <pow+0x148>)
 80073ba:	4604      	mov	r4, r0
 80073bc:	f993 3000 	ldrsb.w	r3, [r3]
 80073c0:	460d      	mov	r5, r1
 80073c2:	3301      	adds	r3, #1
 80073c4:	d015      	beq.n	80073f2 <pow+0x4a>
 80073c6:	4632      	mov	r2, r6
 80073c8:	463b      	mov	r3, r7
 80073ca:	4630      	mov	r0, r6
 80073cc:	4639      	mov	r1, r7
 80073ce:	f7f9 fb15 	bl	80009fc <__aeabi_dcmpun>
 80073d2:	b970      	cbnz	r0, 80073f2 <pow+0x4a>
 80073d4:	4642      	mov	r2, r8
 80073d6:	464b      	mov	r3, r9
 80073d8:	4640      	mov	r0, r8
 80073da:	4649      	mov	r1, r9
 80073dc:	f7f9 fb0e 	bl	80009fc <__aeabi_dcmpun>
 80073e0:	2200      	movs	r2, #0
 80073e2:	2300      	movs	r3, #0
 80073e4:	b148      	cbz	r0, 80073fa <pow+0x52>
 80073e6:	4630      	mov	r0, r6
 80073e8:	4639      	mov	r1, r7
 80073ea:	f7f9 fad5 	bl	8000998 <__aeabi_dcmpeq>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d17b      	bne.n	80074ea <pow+0x142>
 80073f2:	4620      	mov	r0, r4
 80073f4:	4629      	mov	r1, r5
 80073f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fa:	4640      	mov	r0, r8
 80073fc:	4649      	mov	r1, r9
 80073fe:	f7f9 facb 	bl	8000998 <__aeabi_dcmpeq>
 8007402:	b1e0      	cbz	r0, 800743e <pow+0x96>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	4630      	mov	r0, r6
 800740a:	4639      	mov	r1, r7
 800740c:	f7f9 fac4 	bl	8000998 <__aeabi_dcmpeq>
 8007410:	2800      	cmp	r0, #0
 8007412:	d16a      	bne.n	80074ea <pow+0x142>
 8007414:	4630      	mov	r0, r6
 8007416:	4639      	mov	r1, r7
 8007418:	f001 f8af 	bl	800857a <finite>
 800741c:	2800      	cmp	r0, #0
 800741e:	d0e8      	beq.n	80073f2 <pow+0x4a>
 8007420:	2200      	movs	r2, #0
 8007422:	2300      	movs	r3, #0
 8007424:	4630      	mov	r0, r6
 8007426:	4639      	mov	r1, r7
 8007428:	f7f9 fac0 	bl	80009ac <__aeabi_dcmplt>
 800742c:	2800      	cmp	r0, #0
 800742e:	d0e0      	beq.n	80073f2 <pow+0x4a>
 8007430:	f7ff fb20 	bl	8006a74 <__errno>
 8007434:	2321      	movs	r3, #33	; 0x21
 8007436:	2400      	movs	r4, #0
 8007438:	6003      	str	r3, [r0, #0]
 800743a:	4d2e      	ldr	r5, [pc, #184]	; (80074f4 <pow+0x14c>)
 800743c:	e7d9      	b.n	80073f2 <pow+0x4a>
 800743e:	4620      	mov	r0, r4
 8007440:	4629      	mov	r1, r5
 8007442:	f001 f89a 	bl	800857a <finite>
 8007446:	bba8      	cbnz	r0, 80074b4 <pow+0x10c>
 8007448:	4640      	mov	r0, r8
 800744a:	4649      	mov	r1, r9
 800744c:	f001 f895 	bl	800857a <finite>
 8007450:	b380      	cbz	r0, 80074b4 <pow+0x10c>
 8007452:	4630      	mov	r0, r6
 8007454:	4639      	mov	r1, r7
 8007456:	f001 f890 	bl	800857a <finite>
 800745a:	b358      	cbz	r0, 80074b4 <pow+0x10c>
 800745c:	4622      	mov	r2, r4
 800745e:	462b      	mov	r3, r5
 8007460:	4620      	mov	r0, r4
 8007462:	4629      	mov	r1, r5
 8007464:	f7f9 faca 	bl	80009fc <__aeabi_dcmpun>
 8007468:	b160      	cbz	r0, 8007484 <pow+0xdc>
 800746a:	f7ff fb03 	bl	8006a74 <__errno>
 800746e:	2321      	movs	r3, #33	; 0x21
 8007470:	2200      	movs	r2, #0
 8007472:	6003      	str	r3, [r0, #0]
 8007474:	2300      	movs	r3, #0
 8007476:	4610      	mov	r0, r2
 8007478:	4619      	mov	r1, r3
 800747a:	f7f9 f94f 	bl	800071c <__aeabi_ddiv>
 800747e:	4604      	mov	r4, r0
 8007480:	460d      	mov	r5, r1
 8007482:	e7b6      	b.n	80073f2 <pow+0x4a>
 8007484:	f7ff faf6 	bl	8006a74 <__errno>
 8007488:	2322      	movs	r3, #34	; 0x22
 800748a:	2200      	movs	r2, #0
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	4649      	mov	r1, r9
 8007490:	2300      	movs	r3, #0
 8007492:	4640      	mov	r0, r8
 8007494:	f7f9 fa8a 	bl	80009ac <__aeabi_dcmplt>
 8007498:	2400      	movs	r4, #0
 800749a:	b148      	cbz	r0, 80074b0 <pow+0x108>
 800749c:	4630      	mov	r0, r6
 800749e:	4639      	mov	r1, r7
 80074a0:	f001 f878 	bl	8008594 <rint>
 80074a4:	4632      	mov	r2, r6
 80074a6:	463b      	mov	r3, r7
 80074a8:	f7f9 fa76 	bl	8000998 <__aeabi_dcmpeq>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d0c4      	beq.n	800743a <pow+0x92>
 80074b0:	4d11      	ldr	r5, [pc, #68]	; (80074f8 <pow+0x150>)
 80074b2:	e79e      	b.n	80073f2 <pow+0x4a>
 80074b4:	2200      	movs	r2, #0
 80074b6:	2300      	movs	r3, #0
 80074b8:	4620      	mov	r0, r4
 80074ba:	4629      	mov	r1, r5
 80074bc:	f7f9 fa6c 	bl	8000998 <__aeabi_dcmpeq>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d096      	beq.n	80073f2 <pow+0x4a>
 80074c4:	4640      	mov	r0, r8
 80074c6:	4649      	mov	r1, r9
 80074c8:	f001 f857 	bl	800857a <finite>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d090      	beq.n	80073f2 <pow+0x4a>
 80074d0:	4630      	mov	r0, r6
 80074d2:	4639      	mov	r1, r7
 80074d4:	f001 f851 	bl	800857a <finite>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d08a      	beq.n	80073f2 <pow+0x4a>
 80074dc:	f7ff faca 	bl	8006a74 <__errno>
 80074e0:	2322      	movs	r3, #34	; 0x22
 80074e2:	2400      	movs	r4, #0
 80074e4:	2500      	movs	r5, #0
 80074e6:	6003      	str	r3, [r0, #0]
 80074e8:	e783      	b.n	80073f2 <pow+0x4a>
 80074ea:	2400      	movs	r4, #0
 80074ec:	4d03      	ldr	r5, [pc, #12]	; (80074fc <pow+0x154>)
 80074ee:	e780      	b.n	80073f2 <pow+0x4a>
 80074f0:	20000070 	.word	0x20000070
 80074f4:	fff00000 	.word	0xfff00000
 80074f8:	7ff00000 	.word	0x7ff00000
 80074fc:	3ff00000 	.word	0x3ff00000

08007500 <sqrt>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	4606      	mov	r6, r0
 8007504:	460f      	mov	r7, r1
 8007506:	f000 ff89 	bl	800841c <__ieee754_sqrt>
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <sqrt+0x54>)
 800750c:	4604      	mov	r4, r0
 800750e:	f993 3000 	ldrsb.w	r3, [r3]
 8007512:	460d      	mov	r5, r1
 8007514:	3301      	adds	r3, #1
 8007516:	d019      	beq.n	800754c <sqrt+0x4c>
 8007518:	4632      	mov	r2, r6
 800751a:	463b      	mov	r3, r7
 800751c:	4630      	mov	r0, r6
 800751e:	4639      	mov	r1, r7
 8007520:	f7f9 fa6c 	bl	80009fc <__aeabi_dcmpun>
 8007524:	b990      	cbnz	r0, 800754c <sqrt+0x4c>
 8007526:	2200      	movs	r2, #0
 8007528:	2300      	movs	r3, #0
 800752a:	4630      	mov	r0, r6
 800752c:	4639      	mov	r1, r7
 800752e:	f7f9 fa3d 	bl	80009ac <__aeabi_dcmplt>
 8007532:	b158      	cbz	r0, 800754c <sqrt+0x4c>
 8007534:	f7ff fa9e 	bl	8006a74 <__errno>
 8007538:	2321      	movs	r3, #33	; 0x21
 800753a:	2200      	movs	r2, #0
 800753c:	6003      	str	r3, [r0, #0]
 800753e:	2300      	movs	r3, #0
 8007540:	4610      	mov	r0, r2
 8007542:	4619      	mov	r1, r3
 8007544:	f7f9 f8ea 	bl	800071c <__aeabi_ddiv>
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	4620      	mov	r0, r4
 800754e:	4629      	mov	r1, r5
 8007550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007552:	bf00      	nop
 8007554:	20000070 	.word	0x20000070

08007558 <__ieee754_acos>:
 8007558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	4cb2      	ldr	r4, [pc, #712]	; (8007828 <__ieee754_acos+0x2d0>)
 800755e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007562:	42a3      	cmp	r3, r4
 8007564:	4607      	mov	r7, r0
 8007566:	460e      	mov	r6, r1
 8007568:	dd16      	ble.n	8007598 <__ieee754_acos+0x40>
 800756a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800756e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007572:	4303      	orrs	r3, r0
 8007574:	d107      	bne.n	8007586 <__ieee754_acos+0x2e>
 8007576:	2900      	cmp	r1, #0
 8007578:	f300 8202 	bgt.w	8007980 <__ieee754_acos+0x428>
 800757c:	a190      	add	r1, pc, #576	; (adr r1, 80077c0 <__ieee754_acos+0x268>)
 800757e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	f7f8 fde5 	bl	8000158 <__aeabi_dsub>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	f7f9 f8c3 	bl	800071c <__aeabi_ddiv>
 8007596:	e7f4      	b.n	8007582 <__ieee754_acos+0x2a>
 8007598:	4ca4      	ldr	r4, [pc, #656]	; (800782c <__ieee754_acos+0x2d4>)
 800759a:	42a3      	cmp	r3, r4
 800759c:	f300 8083 	bgt.w	80076a6 <__ieee754_acos+0x14e>
 80075a0:	4aa3      	ldr	r2, [pc, #652]	; (8007830 <__ieee754_acos+0x2d8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	f340 81ef 	ble.w	8007986 <__ieee754_acos+0x42e>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	f7f8 ff8c 	bl	80004c8 <__aeabi_dmul>
 80075b0:	a385      	add	r3, pc, #532	; (adr r3, 80077c8 <__ieee754_acos+0x270>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	4604      	mov	r4, r0
 80075b8:	460d      	mov	r5, r1
 80075ba:	f7f8 ff85 	bl	80004c8 <__aeabi_dmul>
 80075be:	a384      	add	r3, pc, #528	; (adr r3, 80077d0 <__ieee754_acos+0x278>)
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f7f8 fdca 	bl	800015c <__adddf3>
 80075c8:	4622      	mov	r2, r4
 80075ca:	462b      	mov	r3, r5
 80075cc:	f7f8 ff7c 	bl	80004c8 <__aeabi_dmul>
 80075d0:	a381      	add	r3, pc, #516	; (adr r3, 80077d8 <__ieee754_acos+0x280>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f7f8 fdbf 	bl	8000158 <__aeabi_dsub>
 80075da:	4622      	mov	r2, r4
 80075dc:	462b      	mov	r3, r5
 80075de:	f7f8 ff73 	bl	80004c8 <__aeabi_dmul>
 80075e2:	a37f      	add	r3, pc, #508	; (adr r3, 80077e0 <__ieee754_acos+0x288>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f8 fdb8 	bl	800015c <__adddf3>
 80075ec:	4622      	mov	r2, r4
 80075ee:	462b      	mov	r3, r5
 80075f0:	f7f8 ff6a 	bl	80004c8 <__aeabi_dmul>
 80075f4:	a37c      	add	r3, pc, #496	; (adr r3, 80077e8 <__ieee754_acos+0x290>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fdad 	bl	8000158 <__aeabi_dsub>
 80075fe:	4622      	mov	r2, r4
 8007600:	462b      	mov	r3, r5
 8007602:	f7f8 ff61 	bl	80004c8 <__aeabi_dmul>
 8007606:	a37a      	add	r3, pc, #488	; (adr r3, 80077f0 <__ieee754_acos+0x298>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f7f8 fda6 	bl	800015c <__adddf3>
 8007610:	4622      	mov	r2, r4
 8007612:	462b      	mov	r3, r5
 8007614:	f7f8 ff58 	bl	80004c8 <__aeabi_dmul>
 8007618:	a377      	add	r3, pc, #476	; (adr r3, 80077f8 <__ieee754_acos+0x2a0>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	4680      	mov	r8, r0
 8007620:	4689      	mov	r9, r1
 8007622:	4620      	mov	r0, r4
 8007624:	4629      	mov	r1, r5
 8007626:	f7f8 ff4f 	bl	80004c8 <__aeabi_dmul>
 800762a:	a375      	add	r3, pc, #468	; (adr r3, 8007800 <__ieee754_acos+0x2a8>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 fd92 	bl	8000158 <__aeabi_dsub>
 8007634:	4622      	mov	r2, r4
 8007636:	462b      	mov	r3, r5
 8007638:	f7f8 ff46 	bl	80004c8 <__aeabi_dmul>
 800763c:	a372      	add	r3, pc, #456	; (adr r3, 8007808 <__ieee754_acos+0x2b0>)
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f7f8 fd8b 	bl	800015c <__adddf3>
 8007646:	4622      	mov	r2, r4
 8007648:	462b      	mov	r3, r5
 800764a:	f7f8 ff3d 	bl	80004c8 <__aeabi_dmul>
 800764e:	a370      	add	r3, pc, #448	; (adr r3, 8007810 <__ieee754_acos+0x2b8>)
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f7f8 fd80 	bl	8000158 <__aeabi_dsub>
 8007658:	4622      	mov	r2, r4
 800765a:	462b      	mov	r3, r5
 800765c:	f7f8 ff34 	bl	80004c8 <__aeabi_dmul>
 8007660:	2200      	movs	r2, #0
 8007662:	4b74      	ldr	r3, [pc, #464]	; (8007834 <__ieee754_acos+0x2dc>)
 8007664:	f7f8 fd7a 	bl	800015c <__adddf3>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4640      	mov	r0, r8
 800766e:	4649      	mov	r1, r9
 8007670:	f7f9 f854 	bl	800071c <__aeabi_ddiv>
 8007674:	463a      	mov	r2, r7
 8007676:	4633      	mov	r3, r6
 8007678:	f7f8 ff26 	bl	80004c8 <__aeabi_dmul>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	a165      	add	r1, pc, #404	; (adr r1, 8007818 <__ieee754_acos+0x2c0>)
 8007682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007686:	f7f8 fd67 	bl	8000158 <__aeabi_dsub>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	4638      	mov	r0, r7
 8007690:	4631      	mov	r1, r6
 8007692:	f7f8 fd61 	bl	8000158 <__aeabi_dsub>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	a161      	add	r1, pc, #388	; (adr r1, 8007820 <__ieee754_acos+0x2c8>)
 800769c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076a0:	f7f8 fd5a 	bl	8000158 <__aeabi_dsub>
 80076a4:	e76d      	b.n	8007582 <__ieee754_acos+0x2a>
 80076a6:	2900      	cmp	r1, #0
 80076a8:	f280 80c8 	bge.w	800783c <__ieee754_acos+0x2e4>
 80076ac:	2200      	movs	r2, #0
 80076ae:	4b61      	ldr	r3, [pc, #388]	; (8007834 <__ieee754_acos+0x2dc>)
 80076b0:	f7f8 fd54 	bl	800015c <__adddf3>
 80076b4:	2200      	movs	r2, #0
 80076b6:	4b60      	ldr	r3, [pc, #384]	; (8007838 <__ieee754_acos+0x2e0>)
 80076b8:	f7f8 ff06 	bl	80004c8 <__aeabi_dmul>
 80076bc:	a342      	add	r3, pc, #264	; (adr r3, 80077c8 <__ieee754_acos+0x270>)
 80076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c2:	4604      	mov	r4, r0
 80076c4:	460d      	mov	r5, r1
 80076c6:	f7f8 feff 	bl	80004c8 <__aeabi_dmul>
 80076ca:	a341      	add	r3, pc, #260	; (adr r3, 80077d0 <__ieee754_acos+0x278>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f7f8 fd44 	bl	800015c <__adddf3>
 80076d4:	4622      	mov	r2, r4
 80076d6:	462b      	mov	r3, r5
 80076d8:	f7f8 fef6 	bl	80004c8 <__aeabi_dmul>
 80076dc:	a33e      	add	r3, pc, #248	; (adr r3, 80077d8 <__ieee754_acos+0x280>)
 80076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e2:	f7f8 fd39 	bl	8000158 <__aeabi_dsub>
 80076e6:	4622      	mov	r2, r4
 80076e8:	462b      	mov	r3, r5
 80076ea:	f7f8 feed 	bl	80004c8 <__aeabi_dmul>
 80076ee:	a33c      	add	r3, pc, #240	; (adr r3, 80077e0 <__ieee754_acos+0x288>)
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	f7f8 fd32 	bl	800015c <__adddf3>
 80076f8:	4622      	mov	r2, r4
 80076fa:	462b      	mov	r3, r5
 80076fc:	f7f8 fee4 	bl	80004c8 <__aeabi_dmul>
 8007700:	a339      	add	r3, pc, #228	; (adr r3, 80077e8 <__ieee754_acos+0x290>)
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	f7f8 fd27 	bl	8000158 <__aeabi_dsub>
 800770a:	4622      	mov	r2, r4
 800770c:	462b      	mov	r3, r5
 800770e:	f7f8 fedb 	bl	80004c8 <__aeabi_dmul>
 8007712:	a337      	add	r3, pc, #220	; (adr r3, 80077f0 <__ieee754_acos+0x298>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f7f8 fd20 	bl	800015c <__adddf3>
 800771c:	4622      	mov	r2, r4
 800771e:	462b      	mov	r3, r5
 8007720:	f7f8 fed2 	bl	80004c8 <__aeabi_dmul>
 8007724:	4680      	mov	r8, r0
 8007726:	4689      	mov	r9, r1
 8007728:	4620      	mov	r0, r4
 800772a:	4629      	mov	r1, r5
 800772c:	f000 fe76 	bl	800841c <__ieee754_sqrt>
 8007730:	a331      	add	r3, pc, #196	; (adr r3, 80077f8 <__ieee754_acos+0x2a0>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	4606      	mov	r6, r0
 8007738:	460f      	mov	r7, r1
 800773a:	4620      	mov	r0, r4
 800773c:	4629      	mov	r1, r5
 800773e:	f7f8 fec3 	bl	80004c8 <__aeabi_dmul>
 8007742:	a32f      	add	r3, pc, #188	; (adr r3, 8007800 <__ieee754_acos+0x2a8>)
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f7f8 fd06 	bl	8000158 <__aeabi_dsub>
 800774c:	4622      	mov	r2, r4
 800774e:	462b      	mov	r3, r5
 8007750:	f7f8 feba 	bl	80004c8 <__aeabi_dmul>
 8007754:	a32c      	add	r3, pc, #176	; (adr r3, 8007808 <__ieee754_acos+0x2b0>)
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	f7f8 fcff 	bl	800015c <__adddf3>
 800775e:	4622      	mov	r2, r4
 8007760:	462b      	mov	r3, r5
 8007762:	f7f8 feb1 	bl	80004c8 <__aeabi_dmul>
 8007766:	a32a      	add	r3, pc, #168	; (adr r3, 8007810 <__ieee754_acos+0x2b8>)
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f7f8 fcf4 	bl	8000158 <__aeabi_dsub>
 8007770:	4622      	mov	r2, r4
 8007772:	462b      	mov	r3, r5
 8007774:	f7f8 fea8 	bl	80004c8 <__aeabi_dmul>
 8007778:	2200      	movs	r2, #0
 800777a:	4b2e      	ldr	r3, [pc, #184]	; (8007834 <__ieee754_acos+0x2dc>)
 800777c:	f7f8 fcee 	bl	800015c <__adddf3>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	f7f8 ffc8 	bl	800071c <__aeabi_ddiv>
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	f7f8 fe9a 	bl	80004c8 <__aeabi_dmul>
 8007794:	a320      	add	r3, pc, #128	; (adr r3, 8007818 <__ieee754_acos+0x2c0>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f8 fcdd 	bl	8000158 <__aeabi_dsub>
 800779e:	4632      	mov	r2, r6
 80077a0:	463b      	mov	r3, r7
 80077a2:	f7f8 fcdb 	bl	800015c <__adddf3>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	f7f8 fcd7 	bl	800015c <__adddf3>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	a103      	add	r1, pc, #12	; (adr r1, 80077c0 <__ieee754_acos+0x268>)
 80077b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b8:	e772      	b.n	80076a0 <__ieee754_acos+0x148>
 80077ba:	bf00      	nop
 80077bc:	f3af 8000 	nop.w
 80077c0:	54442d18 	.word	0x54442d18
 80077c4:	400921fb 	.word	0x400921fb
 80077c8:	0dfdf709 	.word	0x0dfdf709
 80077cc:	3f023de1 	.word	0x3f023de1
 80077d0:	7501b288 	.word	0x7501b288
 80077d4:	3f49efe0 	.word	0x3f49efe0
 80077d8:	b5688f3b 	.word	0xb5688f3b
 80077dc:	3fa48228 	.word	0x3fa48228
 80077e0:	0e884455 	.word	0x0e884455
 80077e4:	3fc9c155 	.word	0x3fc9c155
 80077e8:	03eb6f7d 	.word	0x03eb6f7d
 80077ec:	3fd4d612 	.word	0x3fd4d612
 80077f0:	55555555 	.word	0x55555555
 80077f4:	3fc55555 	.word	0x3fc55555
 80077f8:	b12e9282 	.word	0xb12e9282
 80077fc:	3fb3b8c5 	.word	0x3fb3b8c5
 8007800:	1b8d0159 	.word	0x1b8d0159
 8007804:	3fe6066c 	.word	0x3fe6066c
 8007808:	9c598ac8 	.word	0x9c598ac8
 800780c:	40002ae5 	.word	0x40002ae5
 8007810:	1c8a2d4b 	.word	0x1c8a2d4b
 8007814:	40033a27 	.word	0x40033a27
 8007818:	33145c07 	.word	0x33145c07
 800781c:	3c91a626 	.word	0x3c91a626
 8007820:	54442d18 	.word	0x54442d18
 8007824:	3ff921fb 	.word	0x3ff921fb
 8007828:	3fefffff 	.word	0x3fefffff
 800782c:	3fdfffff 	.word	0x3fdfffff
 8007830:	3c600000 	.word	0x3c600000
 8007834:	3ff00000 	.word	0x3ff00000
 8007838:	3fe00000 	.word	0x3fe00000
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	2000      	movs	r0, #0
 8007842:	4969      	ldr	r1, [pc, #420]	; (80079e8 <__ieee754_acos+0x490>)
 8007844:	f7f8 fc88 	bl	8000158 <__aeabi_dsub>
 8007848:	2200      	movs	r2, #0
 800784a:	4b68      	ldr	r3, [pc, #416]	; (80079ec <__ieee754_acos+0x494>)
 800784c:	f7f8 fe3c 	bl	80004c8 <__aeabi_dmul>
 8007850:	4604      	mov	r4, r0
 8007852:	460d      	mov	r5, r1
 8007854:	f000 fde2 	bl	800841c <__ieee754_sqrt>
 8007858:	a34d      	add	r3, pc, #308	; (adr r3, 8007990 <__ieee754_acos+0x438>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	4689      	mov	r9, r1
 8007860:	4680      	mov	r8, r0
 8007862:	4629      	mov	r1, r5
 8007864:	4620      	mov	r0, r4
 8007866:	f7f8 fe2f 	bl	80004c8 <__aeabi_dmul>
 800786a:	a34b      	add	r3, pc, #300	; (adr r3, 8007998 <__ieee754_acos+0x440>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f7f8 fc74 	bl	800015c <__adddf3>
 8007874:	4622      	mov	r2, r4
 8007876:	462b      	mov	r3, r5
 8007878:	f7f8 fe26 	bl	80004c8 <__aeabi_dmul>
 800787c:	a348      	add	r3, pc, #288	; (adr r3, 80079a0 <__ieee754_acos+0x448>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f7f8 fc69 	bl	8000158 <__aeabi_dsub>
 8007886:	4622      	mov	r2, r4
 8007888:	462b      	mov	r3, r5
 800788a:	f7f8 fe1d 	bl	80004c8 <__aeabi_dmul>
 800788e:	a346      	add	r3, pc, #280	; (adr r3, 80079a8 <__ieee754_acos+0x450>)
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	f7f8 fc62 	bl	800015c <__adddf3>
 8007898:	4622      	mov	r2, r4
 800789a:	462b      	mov	r3, r5
 800789c:	f7f8 fe14 	bl	80004c8 <__aeabi_dmul>
 80078a0:	a343      	add	r3, pc, #268	; (adr r3, 80079b0 <__ieee754_acos+0x458>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 fc57 	bl	8000158 <__aeabi_dsub>
 80078aa:	4622      	mov	r2, r4
 80078ac:	462b      	mov	r3, r5
 80078ae:	f7f8 fe0b 	bl	80004c8 <__aeabi_dmul>
 80078b2:	a341      	add	r3, pc, #260	; (adr r3, 80079b8 <__ieee754_acos+0x460>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f8 fc50 	bl	800015c <__adddf3>
 80078bc:	4622      	mov	r2, r4
 80078be:	462b      	mov	r3, r5
 80078c0:	f7f8 fe02 	bl	80004c8 <__aeabi_dmul>
 80078c4:	a33e      	add	r3, pc, #248	; (adr r3, 80079c0 <__ieee754_acos+0x468>)
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	4682      	mov	sl, r0
 80078cc:	468b      	mov	fp, r1
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f8 fdf9 	bl	80004c8 <__aeabi_dmul>
 80078d6:	a33c      	add	r3, pc, #240	; (adr r3, 80079c8 <__ieee754_acos+0x470>)
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f7f8 fc3c 	bl	8000158 <__aeabi_dsub>
 80078e0:	4622      	mov	r2, r4
 80078e2:	462b      	mov	r3, r5
 80078e4:	f7f8 fdf0 	bl	80004c8 <__aeabi_dmul>
 80078e8:	a339      	add	r3, pc, #228	; (adr r3, 80079d0 <__ieee754_acos+0x478>)
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	f7f8 fc35 	bl	800015c <__adddf3>
 80078f2:	4622      	mov	r2, r4
 80078f4:	462b      	mov	r3, r5
 80078f6:	f7f8 fde7 	bl	80004c8 <__aeabi_dmul>
 80078fa:	a337      	add	r3, pc, #220	; (adr r3, 80079d8 <__ieee754_acos+0x480>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f7f8 fc2a 	bl	8000158 <__aeabi_dsub>
 8007904:	4622      	mov	r2, r4
 8007906:	462b      	mov	r3, r5
 8007908:	f7f8 fdde 	bl	80004c8 <__aeabi_dmul>
 800790c:	2200      	movs	r2, #0
 800790e:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <__ieee754_acos+0x490>)
 8007910:	f7f8 fc24 	bl	800015c <__adddf3>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4650      	mov	r0, sl
 800791a:	4659      	mov	r1, fp
 800791c:	f7f8 fefe 	bl	800071c <__aeabi_ddiv>
 8007920:	4642      	mov	r2, r8
 8007922:	464b      	mov	r3, r9
 8007924:	f7f8 fdd0 	bl	80004c8 <__aeabi_dmul>
 8007928:	2600      	movs	r6, #0
 800792a:	4682      	mov	sl, r0
 800792c:	468b      	mov	fp, r1
 800792e:	4632      	mov	r2, r6
 8007930:	464b      	mov	r3, r9
 8007932:	4630      	mov	r0, r6
 8007934:	4649      	mov	r1, r9
 8007936:	f7f8 fdc7 	bl	80004c8 <__aeabi_dmul>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f8 fc09 	bl	8000158 <__aeabi_dsub>
 8007946:	4632      	mov	r2, r6
 8007948:	4604      	mov	r4, r0
 800794a:	460d      	mov	r5, r1
 800794c:	464b      	mov	r3, r9
 800794e:	4640      	mov	r0, r8
 8007950:	4649      	mov	r1, r9
 8007952:	f7f8 fc03 	bl	800015c <__adddf3>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4620      	mov	r0, r4
 800795c:	4629      	mov	r1, r5
 800795e:	f7f8 fedd 	bl	800071c <__aeabi_ddiv>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4650      	mov	r0, sl
 8007968:	4659      	mov	r1, fp
 800796a:	f7f8 fbf7 	bl	800015c <__adddf3>
 800796e:	4632      	mov	r2, r6
 8007970:	464b      	mov	r3, r9
 8007972:	f7f8 fbf3 	bl	800015c <__adddf3>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	f7f8 fbef 	bl	800015c <__adddf3>
 800797e:	e600      	b.n	8007582 <__ieee754_acos+0x2a>
 8007980:	2000      	movs	r0, #0
 8007982:	2100      	movs	r1, #0
 8007984:	e5fd      	b.n	8007582 <__ieee754_acos+0x2a>
 8007986:	a116      	add	r1, pc, #88	; (adr r1, 80079e0 <__ieee754_acos+0x488>)
 8007988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800798c:	e5f9      	b.n	8007582 <__ieee754_acos+0x2a>
 800798e:	bf00      	nop
 8007990:	0dfdf709 	.word	0x0dfdf709
 8007994:	3f023de1 	.word	0x3f023de1
 8007998:	7501b288 	.word	0x7501b288
 800799c:	3f49efe0 	.word	0x3f49efe0
 80079a0:	b5688f3b 	.word	0xb5688f3b
 80079a4:	3fa48228 	.word	0x3fa48228
 80079a8:	0e884455 	.word	0x0e884455
 80079ac:	3fc9c155 	.word	0x3fc9c155
 80079b0:	03eb6f7d 	.word	0x03eb6f7d
 80079b4:	3fd4d612 	.word	0x3fd4d612
 80079b8:	55555555 	.word	0x55555555
 80079bc:	3fc55555 	.word	0x3fc55555
 80079c0:	b12e9282 	.word	0xb12e9282
 80079c4:	3fb3b8c5 	.word	0x3fb3b8c5
 80079c8:	1b8d0159 	.word	0x1b8d0159
 80079cc:	3fe6066c 	.word	0x3fe6066c
 80079d0:	9c598ac8 	.word	0x9c598ac8
 80079d4:	40002ae5 	.word	0x40002ae5
 80079d8:	1c8a2d4b 	.word	0x1c8a2d4b
 80079dc:	40033a27 	.word	0x40033a27
 80079e0:	54442d18 	.word	0x54442d18
 80079e4:	3ff921fb 	.word	0x3ff921fb
 80079e8:	3ff00000 	.word	0x3ff00000
 80079ec:	3fe00000 	.word	0x3fe00000

080079f0 <__ieee754_pow>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	b093      	sub	sp, #76	; 0x4c
 80079f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079fa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80079fe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007a02:	ea55 0302 	orrs.w	r3, r5, r2
 8007a06:	4607      	mov	r7, r0
 8007a08:	4688      	mov	r8, r1
 8007a0a:	f000 84bf 	beq.w	800838c <__ieee754_pow+0x99c>
 8007a0e:	4b7e      	ldr	r3, [pc, #504]	; (8007c08 <__ieee754_pow+0x218>)
 8007a10:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8007a14:	429c      	cmp	r4, r3
 8007a16:	4689      	mov	r9, r1
 8007a18:	4682      	mov	sl, r0
 8007a1a:	dc09      	bgt.n	8007a30 <__ieee754_pow+0x40>
 8007a1c:	d103      	bne.n	8007a26 <__ieee754_pow+0x36>
 8007a1e:	b978      	cbnz	r0, 8007a40 <__ieee754_pow+0x50>
 8007a20:	42a5      	cmp	r5, r4
 8007a22:	dd02      	ble.n	8007a2a <__ieee754_pow+0x3a>
 8007a24:	e00c      	b.n	8007a40 <__ieee754_pow+0x50>
 8007a26:	429d      	cmp	r5, r3
 8007a28:	dc02      	bgt.n	8007a30 <__ieee754_pow+0x40>
 8007a2a:	429d      	cmp	r5, r3
 8007a2c:	d10e      	bne.n	8007a4c <__ieee754_pow+0x5c>
 8007a2e:	b16a      	cbz	r2, 8007a4c <__ieee754_pow+0x5c>
 8007a30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007a34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007a38:	ea54 030a 	orrs.w	r3, r4, sl
 8007a3c:	f000 84a6 	beq.w	800838c <__ieee754_pow+0x99c>
 8007a40:	4872      	ldr	r0, [pc, #456]	; (8007c0c <__ieee754_pow+0x21c>)
 8007a42:	b013      	add	sp, #76	; 0x4c
 8007a44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	f000 bd9e 	b.w	8008588 <nan>
 8007a4c:	f1b9 0f00 	cmp.w	r9, #0
 8007a50:	da39      	bge.n	8007ac6 <__ieee754_pow+0xd6>
 8007a52:	4b6f      	ldr	r3, [pc, #444]	; (8007c10 <__ieee754_pow+0x220>)
 8007a54:	429d      	cmp	r5, r3
 8007a56:	dc54      	bgt.n	8007b02 <__ieee754_pow+0x112>
 8007a58:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007a5c:	429d      	cmp	r5, r3
 8007a5e:	f340 84a6 	ble.w	80083ae <__ieee754_pow+0x9be>
 8007a62:	152b      	asrs	r3, r5, #20
 8007a64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a68:	2b14      	cmp	r3, #20
 8007a6a:	dd0f      	ble.n	8007a8c <__ieee754_pow+0x9c>
 8007a6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007a70:	fa22 f103 	lsr.w	r1, r2, r3
 8007a74:	fa01 f303 	lsl.w	r3, r1, r3
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	f040 8498 	bne.w	80083ae <__ieee754_pow+0x9be>
 8007a7e:	f001 0101 	and.w	r1, r1, #1
 8007a82:	f1c1 0302 	rsb	r3, r1, #2
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	b182      	cbz	r2, 8007aac <__ieee754_pow+0xbc>
 8007a8a:	e05e      	b.n	8007b4a <__ieee754_pow+0x15a>
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	d15a      	bne.n	8007b46 <__ieee754_pow+0x156>
 8007a90:	f1c3 0314 	rsb	r3, r3, #20
 8007a94:	fa45 f103 	asr.w	r1, r5, r3
 8007a98:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9c:	42ab      	cmp	r3, r5
 8007a9e:	f040 8483 	bne.w	80083a8 <__ieee754_pow+0x9b8>
 8007aa2:	f001 0101 	and.w	r1, r1, #1
 8007aa6:	f1c1 0302 	rsb	r3, r1, #2
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	4b59      	ldr	r3, [pc, #356]	; (8007c14 <__ieee754_pow+0x224>)
 8007aae:	429d      	cmp	r5, r3
 8007ab0:	d130      	bne.n	8007b14 <__ieee754_pow+0x124>
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	f280 8474 	bge.w	80083a0 <__ieee754_pow+0x9b0>
 8007ab8:	463a      	mov	r2, r7
 8007aba:	4643      	mov	r3, r8
 8007abc:	2000      	movs	r0, #0
 8007abe:	4955      	ldr	r1, [pc, #340]	; (8007c14 <__ieee754_pow+0x224>)
 8007ac0:	f7f8 fe2c 	bl	800071c <__aeabi_ddiv>
 8007ac4:	e02f      	b.n	8007b26 <__ieee754_pow+0x136>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d13d      	bne.n	8007b4a <__ieee754_pow+0x15a>
 8007ace:	4b4e      	ldr	r3, [pc, #312]	; (8007c08 <__ieee754_pow+0x218>)
 8007ad0:	429d      	cmp	r5, r3
 8007ad2:	d1eb      	bne.n	8007aac <__ieee754_pow+0xbc>
 8007ad4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007ad8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007adc:	ea53 030a 	orrs.w	r3, r3, sl
 8007ae0:	f000 8454 	beq.w	800838c <__ieee754_pow+0x99c>
 8007ae4:	4b4c      	ldr	r3, [pc, #304]	; (8007c18 <__ieee754_pow+0x228>)
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	dd0d      	ble.n	8007b06 <__ieee754_pow+0x116>
 8007aea:	2e00      	cmp	r6, #0
 8007aec:	f280 8454 	bge.w	8008398 <__ieee754_pow+0x9a8>
 8007af0:	f04f 0b00 	mov.w	fp, #0
 8007af4:	f04f 0c00 	mov.w	ip, #0
 8007af8:	4658      	mov	r0, fp
 8007afa:	4661      	mov	r1, ip
 8007afc:	b013      	add	sp, #76	; 0x4c
 8007afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b02:	2302      	movs	r3, #2
 8007b04:	e7e0      	b.n	8007ac8 <__ieee754_pow+0xd8>
 8007b06:	2e00      	cmp	r6, #0
 8007b08:	daf2      	bge.n	8007af0 <__ieee754_pow+0x100>
 8007b0a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007b0e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007b12:	e7f1      	b.n	8007af8 <__ieee754_pow+0x108>
 8007b14:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007b18:	d108      	bne.n	8007b2c <__ieee754_pow+0x13c>
 8007b1a:	463a      	mov	r2, r7
 8007b1c:	4643      	mov	r3, r8
 8007b1e:	4638      	mov	r0, r7
 8007b20:	4641      	mov	r1, r8
 8007b22:	f7f8 fcd1 	bl	80004c8 <__aeabi_dmul>
 8007b26:	4683      	mov	fp, r0
 8007b28:	468c      	mov	ip, r1
 8007b2a:	e7e5      	b.n	8007af8 <__ieee754_pow+0x108>
 8007b2c:	4b3b      	ldr	r3, [pc, #236]	; (8007c1c <__ieee754_pow+0x22c>)
 8007b2e:	429e      	cmp	r6, r3
 8007b30:	d10b      	bne.n	8007b4a <__ieee754_pow+0x15a>
 8007b32:	f1b9 0f00 	cmp.w	r9, #0
 8007b36:	db08      	blt.n	8007b4a <__ieee754_pow+0x15a>
 8007b38:	4638      	mov	r0, r7
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	b013      	add	sp, #76	; 0x4c
 8007b3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b42:	f000 bc6b 	b.w	800841c <__ieee754_sqrt>
 8007b46:	2300      	movs	r3, #0
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	f000 fd11 	bl	8008574 <fabs>
 8007b52:	4683      	mov	fp, r0
 8007b54:	468c      	mov	ip, r1
 8007b56:	f1ba 0f00 	cmp.w	sl, #0
 8007b5a:	d129      	bne.n	8007bb0 <__ieee754_pow+0x1c0>
 8007b5c:	b124      	cbz	r4, 8007b68 <__ieee754_pow+0x178>
 8007b5e:	4b2d      	ldr	r3, [pc, #180]	; (8007c14 <__ieee754_pow+0x224>)
 8007b60:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d123      	bne.n	8007bb0 <__ieee754_pow+0x1c0>
 8007b68:	2e00      	cmp	r6, #0
 8007b6a:	da07      	bge.n	8007b7c <__ieee754_pow+0x18c>
 8007b6c:	465a      	mov	r2, fp
 8007b6e:	4663      	mov	r3, ip
 8007b70:	2000      	movs	r0, #0
 8007b72:	4928      	ldr	r1, [pc, #160]	; (8007c14 <__ieee754_pow+0x224>)
 8007b74:	f7f8 fdd2 	bl	800071c <__aeabi_ddiv>
 8007b78:	4683      	mov	fp, r0
 8007b7a:	468c      	mov	ip, r1
 8007b7c:	f1b9 0f00 	cmp.w	r9, #0
 8007b80:	daba      	bge.n	8007af8 <__ieee754_pow+0x108>
 8007b82:	9b00      	ldr	r3, [sp, #0]
 8007b84:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007b88:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b8c:	4323      	orrs	r3, r4
 8007b8e:	d108      	bne.n	8007ba2 <__ieee754_pow+0x1b2>
 8007b90:	465a      	mov	r2, fp
 8007b92:	4663      	mov	r3, ip
 8007b94:	4658      	mov	r0, fp
 8007b96:	4661      	mov	r1, ip
 8007b98:	f7f8 fade 	bl	8000158 <__aeabi_dsub>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	e78e      	b.n	8007ac0 <__ieee754_pow+0xd0>
 8007ba2:	9b00      	ldr	r3, [sp, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d1a7      	bne.n	8007af8 <__ieee754_pow+0x108>
 8007ba8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007bac:	469c      	mov	ip, r3
 8007bae:	e7a3      	b.n	8007af8 <__ieee754_pow+0x108>
 8007bb0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8007bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	d104      	bne.n	8007bca <__ieee754_pow+0x1da>
 8007bc0:	463a      	mov	r2, r7
 8007bc2:	4643      	mov	r3, r8
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	4641      	mov	r1, r8
 8007bc8:	e7e6      	b.n	8007b98 <__ieee754_pow+0x1a8>
 8007bca:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <__ieee754_pow+0x230>)
 8007bcc:	429d      	cmp	r5, r3
 8007bce:	f340 80f9 	ble.w	8007dc4 <__ieee754_pow+0x3d4>
 8007bd2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007bd6:	429d      	cmp	r5, r3
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	; (8007c18 <__ieee754_pow+0x228>)
 8007bda:	dd09      	ble.n	8007bf0 <__ieee754_pow+0x200>
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	dc0c      	bgt.n	8007bfa <__ieee754_pow+0x20a>
 8007be0:	2e00      	cmp	r6, #0
 8007be2:	da85      	bge.n	8007af0 <__ieee754_pow+0x100>
 8007be4:	a306      	add	r3, pc, #24	; (adr r3, 8007c00 <__ieee754_pow+0x210>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	4610      	mov	r0, r2
 8007bec:	4619      	mov	r1, r3
 8007bee:	e798      	b.n	8007b22 <__ieee754_pow+0x132>
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	dbf5      	blt.n	8007be0 <__ieee754_pow+0x1f0>
 8007bf4:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <__ieee754_pow+0x224>)
 8007bf6:	429c      	cmp	r4, r3
 8007bf8:	dd14      	ble.n	8007c24 <__ieee754_pow+0x234>
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	dcf2      	bgt.n	8007be4 <__ieee754_pow+0x1f4>
 8007bfe:	e777      	b.n	8007af0 <__ieee754_pow+0x100>
 8007c00:	8800759c 	.word	0x8800759c
 8007c04:	7e37e43c 	.word	0x7e37e43c
 8007c08:	7ff00000 	.word	0x7ff00000
 8007c0c:	08008a79 	.word	0x08008a79
 8007c10:	433fffff 	.word	0x433fffff
 8007c14:	3ff00000 	.word	0x3ff00000
 8007c18:	3fefffff 	.word	0x3fefffff
 8007c1c:	3fe00000 	.word	0x3fe00000
 8007c20:	41e00000 	.word	0x41e00000
 8007c24:	4661      	mov	r1, ip
 8007c26:	2200      	movs	r2, #0
 8007c28:	4658      	mov	r0, fp
 8007c2a:	4b61      	ldr	r3, [pc, #388]	; (8007db0 <__ieee754_pow+0x3c0>)
 8007c2c:	f7f8 fa94 	bl	8000158 <__aeabi_dsub>
 8007c30:	a355      	add	r3, pc, #340	; (adr r3, 8007d88 <__ieee754_pow+0x398>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	4604      	mov	r4, r0
 8007c38:	460d      	mov	r5, r1
 8007c3a:	f7f8 fc45 	bl	80004c8 <__aeabi_dmul>
 8007c3e:	a354      	add	r3, pc, #336	; (adr r3, 8007d90 <__ieee754_pow+0x3a0>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	4606      	mov	r6, r0
 8007c46:	460f      	mov	r7, r1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7f8 fc3c 	bl	80004c8 <__aeabi_dmul>
 8007c50:	2200      	movs	r2, #0
 8007c52:	4682      	mov	sl, r0
 8007c54:	468b      	mov	fp, r1
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4b56      	ldr	r3, [pc, #344]	; (8007db4 <__ieee754_pow+0x3c4>)
 8007c5c:	f7f8 fc34 	bl	80004c8 <__aeabi_dmul>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	a14c      	add	r1, pc, #304	; (adr r1, 8007d98 <__ieee754_pow+0x3a8>)
 8007c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c6a:	f7f8 fa75 	bl	8000158 <__aeabi_dsub>
 8007c6e:	4622      	mov	r2, r4
 8007c70:	462b      	mov	r3, r5
 8007c72:	f7f8 fc29 	bl	80004c8 <__aeabi_dmul>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	494e      	ldr	r1, [pc, #312]	; (8007db8 <__ieee754_pow+0x3c8>)
 8007c7e:	f7f8 fa6b 	bl	8000158 <__aeabi_dsub>
 8007c82:	4622      	mov	r2, r4
 8007c84:	462b      	mov	r3, r5
 8007c86:	4680      	mov	r8, r0
 8007c88:	4689      	mov	r9, r1
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f7f8 fc1b 	bl	80004c8 <__aeabi_dmul>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	4640      	mov	r0, r8
 8007c98:	4649      	mov	r1, r9
 8007c9a:	f7f8 fc15 	bl	80004c8 <__aeabi_dmul>
 8007c9e:	a340      	add	r3, pc, #256	; (adr r3, 8007da0 <__ieee754_pow+0x3b0>)
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	f7f8 fc10 	bl	80004c8 <__aeabi_dmul>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4650      	mov	r0, sl
 8007cae:	4659      	mov	r1, fp
 8007cb0:	f7f8 fa52 	bl	8000158 <__aeabi_dsub>
 8007cb4:	f04f 0a00 	mov.w	sl, #0
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	460d      	mov	r5, r1
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 fa4a 	bl	800015c <__adddf3>
 8007cc8:	4632      	mov	r2, r6
 8007cca:	463b      	mov	r3, r7
 8007ccc:	4650      	mov	r0, sl
 8007cce:	468b      	mov	fp, r1
 8007cd0:	f7f8 fa42 	bl	8000158 <__aeabi_dsub>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4629      	mov	r1, r5
 8007cdc:	f7f8 fa3c 	bl	8000158 <__aeabi_dsub>
 8007ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ce4:	9b00      	ldr	r3, [sp, #0]
 8007ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f04f 0600 	mov.w	r6, #0
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	bf0c      	ite	eq
 8007cf6:	4b31      	ldreq	r3, [pc, #196]	; (8007dbc <__ieee754_pow+0x3cc>)
 8007cf8:	4b2d      	ldrne	r3, [pc, #180]	; (8007db0 <__ieee754_pow+0x3c0>)
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	460d      	mov	r5, r1
 8007cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d02:	e9cd 2300 	strd	r2, r3, [sp]
 8007d06:	4632      	mov	r2, r6
 8007d08:	463b      	mov	r3, r7
 8007d0a:	f7f8 fa25 	bl	8000158 <__aeabi_dsub>
 8007d0e:	4652      	mov	r2, sl
 8007d10:	465b      	mov	r3, fp
 8007d12:	f7f8 fbd9 	bl	80004c8 <__aeabi_dmul>
 8007d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d1a:	4680      	mov	r8, r0
 8007d1c:	4689      	mov	r9, r1
 8007d1e:	4620      	mov	r0, r4
 8007d20:	4629      	mov	r1, r5
 8007d22:	f7f8 fbd1 	bl	80004c8 <__aeabi_dmul>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	f7f8 fa15 	bl	800015c <__adddf3>
 8007d32:	4632      	mov	r2, r6
 8007d34:	463b      	mov	r3, r7
 8007d36:	4680      	mov	r8, r0
 8007d38:	4689      	mov	r9, r1
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	f7f8 fbc3 	bl	80004c8 <__aeabi_dmul>
 8007d42:	4604      	mov	r4, r0
 8007d44:	460d      	mov	r5, r1
 8007d46:	460b      	mov	r3, r1
 8007d48:	4602      	mov	r2, r0
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007d52:	f7f8 fa03 	bl	800015c <__adddf3>
 8007d56:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <__ieee754_pow+0x3d0>)
 8007d58:	4682      	mov	sl, r0
 8007d5a:	4299      	cmp	r1, r3
 8007d5c:	460f      	mov	r7, r1
 8007d5e:	460e      	mov	r6, r1
 8007d60:	f340 82ed 	ble.w	800833e <__ieee754_pow+0x94e>
 8007d64:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007d68:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007d6c:	4303      	orrs	r3, r0
 8007d6e:	f000 81e7 	beq.w	8008140 <__ieee754_pow+0x750>
 8007d72:	a30d      	add	r3, pc, #52	; (adr r3, 8007da8 <__ieee754_pow+0x3b8>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d7c:	f7f8 fba4 	bl	80004c8 <__aeabi_dmul>
 8007d80:	a309      	add	r3, pc, #36	; (adr r3, 8007da8 <__ieee754_pow+0x3b8>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	e6cc      	b.n	8007b22 <__ieee754_pow+0x132>
 8007d88:	60000000 	.word	0x60000000
 8007d8c:	3ff71547 	.word	0x3ff71547
 8007d90:	f85ddf44 	.word	0xf85ddf44
 8007d94:	3e54ae0b 	.word	0x3e54ae0b
 8007d98:	55555555 	.word	0x55555555
 8007d9c:	3fd55555 	.word	0x3fd55555
 8007da0:	652b82fe 	.word	0x652b82fe
 8007da4:	3ff71547 	.word	0x3ff71547
 8007da8:	8800759c 	.word	0x8800759c
 8007dac:	7e37e43c 	.word	0x7e37e43c
 8007db0:	3ff00000 	.word	0x3ff00000
 8007db4:	3fd00000 	.word	0x3fd00000
 8007db8:	3fe00000 	.word	0x3fe00000
 8007dbc:	bff00000 	.word	0xbff00000
 8007dc0:	408fffff 	.word	0x408fffff
 8007dc4:	4bd4      	ldr	r3, [pc, #848]	; (8008118 <__ieee754_pow+0x728>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	ea09 0303 	and.w	r3, r9, r3
 8007dcc:	b943      	cbnz	r3, 8007de0 <__ieee754_pow+0x3f0>
 8007dce:	4658      	mov	r0, fp
 8007dd0:	4661      	mov	r1, ip
 8007dd2:	4bd2      	ldr	r3, [pc, #840]	; (800811c <__ieee754_pow+0x72c>)
 8007dd4:	f7f8 fb78 	bl	80004c8 <__aeabi_dmul>
 8007dd8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007ddc:	4683      	mov	fp, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	1523      	asrs	r3, r4, #20
 8007de2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007de6:	4413      	add	r3, r2
 8007de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dea:	4bcd      	ldr	r3, [pc, #820]	; (8008120 <__ieee754_pow+0x730>)
 8007dec:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007df0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007df4:	429c      	cmp	r4, r3
 8007df6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007dfa:	dd08      	ble.n	8007e0e <__ieee754_pow+0x41e>
 8007dfc:	4bc9      	ldr	r3, [pc, #804]	; (8008124 <__ieee754_pow+0x734>)
 8007dfe:	429c      	cmp	r4, r3
 8007e00:	f340 819c 	ble.w	800813c <__ieee754_pow+0x74c>
 8007e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e0e:	2600      	movs	r6, #0
 8007e10:	00f3      	lsls	r3, r6, #3
 8007e12:	930d      	str	r3, [sp, #52]	; 0x34
 8007e14:	4bc4      	ldr	r3, [pc, #784]	; (8008128 <__ieee754_pow+0x738>)
 8007e16:	4658      	mov	r0, fp
 8007e18:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e20:	4629      	mov	r1, r5
 8007e22:	461a      	mov	r2, r3
 8007e24:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007e28:	4623      	mov	r3, r4
 8007e2a:	f7f8 f995 	bl	8000158 <__aeabi_dsub>
 8007e2e:	46da      	mov	sl, fp
 8007e30:	462b      	mov	r3, r5
 8007e32:	4652      	mov	r2, sl
 8007e34:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007e38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e3c:	f7f8 f98e 	bl	800015c <__adddf3>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	2000      	movs	r0, #0
 8007e46:	49b9      	ldr	r1, [pc, #740]	; (800812c <__ieee754_pow+0x73c>)
 8007e48:	f7f8 fc68 	bl	800071c <__aeabi_ddiv>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e58:	f7f8 fb36 	bl	80004c8 <__aeabi_dmul>
 8007e5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e60:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007e64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	46ab      	mov	fp, r5
 8007e6e:	106d      	asrs	r5, r5, #1
 8007e70:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007e7a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007e7e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007e82:	4640      	mov	r0, r8
 8007e84:	4649      	mov	r1, r9
 8007e86:	4614      	mov	r4, r2
 8007e88:	461d      	mov	r5, r3
 8007e8a:	f7f8 fb1d 	bl	80004c8 <__aeabi_dmul>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e96:	f7f8 f95f 	bl	8000158 <__aeabi_dsub>
 8007e9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	f7f8 f957 	bl	8000158 <__aeabi_dsub>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4650      	mov	r0, sl
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	f7f8 f951 	bl	8000158 <__aeabi_dsub>
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	464b      	mov	r3, r9
 8007eba:	f7f8 fb05 	bl	80004c8 <__aeabi_dmul>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	f7f8 f947 	bl	8000158 <__aeabi_dsub>
 8007eca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ece:	f7f8 fafb 	bl	80004c8 <__aeabi_dmul>
 8007ed2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ed6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007eda:	4610      	mov	r0, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	f7f8 faf3 	bl	80004c8 <__aeabi_dmul>
 8007ee2:	a37b      	add	r3, pc, #492	; (adr r3, 80080d0 <__ieee754_pow+0x6e0>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	f7f8 faec 	bl	80004c8 <__aeabi_dmul>
 8007ef0:	a379      	add	r3, pc, #484	; (adr r3, 80080d8 <__ieee754_pow+0x6e8>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f7f8 f931 	bl	800015c <__adddf3>
 8007efa:	4622      	mov	r2, r4
 8007efc:	462b      	mov	r3, r5
 8007efe:	f7f8 fae3 	bl	80004c8 <__aeabi_dmul>
 8007f02:	a377      	add	r3, pc, #476	; (adr r3, 80080e0 <__ieee754_pow+0x6f0>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 f928 	bl	800015c <__adddf3>
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	462b      	mov	r3, r5
 8007f10:	f7f8 fada 	bl	80004c8 <__aeabi_dmul>
 8007f14:	a374      	add	r3, pc, #464	; (adr r3, 80080e8 <__ieee754_pow+0x6f8>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 f91f 	bl	800015c <__adddf3>
 8007f1e:	4622      	mov	r2, r4
 8007f20:	462b      	mov	r3, r5
 8007f22:	f7f8 fad1 	bl	80004c8 <__aeabi_dmul>
 8007f26:	a372      	add	r3, pc, #456	; (adr r3, 80080f0 <__ieee754_pow+0x700>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 f916 	bl	800015c <__adddf3>
 8007f30:	4622      	mov	r2, r4
 8007f32:	462b      	mov	r3, r5
 8007f34:	f7f8 fac8 	bl	80004c8 <__aeabi_dmul>
 8007f38:	a36f      	add	r3, pc, #444	; (adr r3, 80080f8 <__ieee754_pow+0x708>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 f90d 	bl	800015c <__adddf3>
 8007f42:	4622      	mov	r2, r4
 8007f44:	4606      	mov	r6, r0
 8007f46:	460f      	mov	r7, r1
 8007f48:	462b      	mov	r3, r5
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7f8 fabb 	bl	80004c8 <__aeabi_dmul>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4630      	mov	r0, r6
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 fab5 	bl	80004c8 <__aeabi_dmul>
 8007f5e:	4604      	mov	r4, r0
 8007f60:	460d      	mov	r5, r1
 8007f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f66:	4642      	mov	r2, r8
 8007f68:	464b      	mov	r3, r9
 8007f6a:	f7f8 f8f7 	bl	800015c <__adddf3>
 8007f6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f72:	f7f8 faa9 	bl	80004c8 <__aeabi_dmul>
 8007f76:	4622      	mov	r2, r4
 8007f78:	462b      	mov	r3, r5
 8007f7a:	f7f8 f8ef 	bl	800015c <__adddf3>
 8007f7e:	4642      	mov	r2, r8
 8007f80:	4606      	mov	r6, r0
 8007f82:	460f      	mov	r7, r1
 8007f84:	464b      	mov	r3, r9
 8007f86:	4640      	mov	r0, r8
 8007f88:	4649      	mov	r1, r9
 8007f8a:	f7f8 fa9d 	bl	80004c8 <__aeabi_dmul>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4b67      	ldr	r3, [pc, #412]	; (8008130 <__ieee754_pow+0x740>)
 8007f92:	4682      	mov	sl, r0
 8007f94:	468b      	mov	fp, r1
 8007f96:	f7f8 f8e1 	bl	800015c <__adddf3>
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	f7f8 f8dd 	bl	800015c <__adddf3>
 8007fa2:	9c04      	ldr	r4, [sp, #16]
 8007fa4:	460d      	mov	r5, r1
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f7f8 fa8b 	bl	80004c8 <__aeabi_dmul>
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	4689      	mov	r9, r1
 8007fb8:	4620      	mov	r0, r4
 8007fba:	4629      	mov	r1, r5
 8007fbc:	4b5c      	ldr	r3, [pc, #368]	; (8008130 <__ieee754_pow+0x740>)
 8007fbe:	f7f8 f8cb 	bl	8000158 <__aeabi_dsub>
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	f7f8 f8c7 	bl	8000158 <__aeabi_dsub>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4630      	mov	r0, r6
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	f7f8 f8c1 	bl	8000158 <__aeabi_dsub>
 8007fd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fda:	f7f8 fa75 	bl	80004c8 <__aeabi_dmul>
 8007fde:	4622      	mov	r2, r4
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	460f      	mov	r7, r1
 8007fe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fe8:	462b      	mov	r3, r5
 8007fea:	f7f8 fa6d 	bl	80004c8 <__aeabi_dmul>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	4639      	mov	r1, r7
 8007ff6:	f7f8 f8b1 	bl	800015c <__adddf3>
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460f      	mov	r7, r1
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4640      	mov	r0, r8
 8008004:	4649      	mov	r1, r9
 8008006:	f7f8 f8a9 	bl	800015c <__adddf3>
 800800a:	a33d      	add	r3, pc, #244	; (adr r3, 8008100 <__ieee754_pow+0x710>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	9c04      	ldr	r4, [sp, #16]
 8008012:	460d      	mov	r5, r1
 8008014:	4620      	mov	r0, r4
 8008016:	f7f8 fa57 	bl	80004c8 <__aeabi_dmul>
 800801a:	4642      	mov	r2, r8
 800801c:	464b      	mov	r3, r9
 800801e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008022:	4620      	mov	r0, r4
 8008024:	4629      	mov	r1, r5
 8008026:	f7f8 f897 	bl	8000158 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4630      	mov	r0, r6
 8008030:	4639      	mov	r1, r7
 8008032:	f7f8 f891 	bl	8000158 <__aeabi_dsub>
 8008036:	a334      	add	r3, pc, #208	; (adr r3, 8008108 <__ieee754_pow+0x718>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f7f8 fa44 	bl	80004c8 <__aeabi_dmul>
 8008040:	a333      	add	r3, pc, #204	; (adr r3, 8008110 <__ieee754_pow+0x720>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	4606      	mov	r6, r0
 8008048:	460f      	mov	r7, r1
 800804a:	4620      	mov	r0, r4
 800804c:	4629      	mov	r1, r5
 800804e:	f7f8 fa3b 	bl	80004c8 <__aeabi_dmul>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4630      	mov	r0, r6
 8008058:	4639      	mov	r1, r7
 800805a:	f7f8 f87f 	bl	800015c <__adddf3>
 800805e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008060:	4b34      	ldr	r3, [pc, #208]	; (8008134 <__ieee754_pow+0x744>)
 8008062:	4413      	add	r3, r2
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 f878 	bl	800015c <__adddf3>
 800806c:	4680      	mov	r8, r0
 800806e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008070:	4689      	mov	r9, r1
 8008072:	f7f8 f9bf 	bl	80003f4 <__aeabi_i2d>
 8008076:	4604      	mov	r4, r0
 8008078:	460d      	mov	r5, r1
 800807a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800807c:	4b2e      	ldr	r3, [pc, #184]	; (8008138 <__ieee754_pow+0x748>)
 800807e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008082:	4413      	add	r3, r2
 8008084:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008088:	4642      	mov	r2, r8
 800808a:	464b      	mov	r3, r9
 800808c:	f7f8 f866 	bl	800015c <__adddf3>
 8008090:	4632      	mov	r2, r6
 8008092:	463b      	mov	r3, r7
 8008094:	f7f8 f862 	bl	800015c <__adddf3>
 8008098:	4622      	mov	r2, r4
 800809a:	462b      	mov	r3, r5
 800809c:	f7f8 f85e 	bl	800015c <__adddf3>
 80080a0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80080a4:	4622      	mov	r2, r4
 80080a6:	462b      	mov	r3, r5
 80080a8:	4650      	mov	r0, sl
 80080aa:	468b      	mov	fp, r1
 80080ac:	f7f8 f854 	bl	8000158 <__aeabi_dsub>
 80080b0:	4632      	mov	r2, r6
 80080b2:	463b      	mov	r3, r7
 80080b4:	f7f8 f850 	bl	8000158 <__aeabi_dsub>
 80080b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080bc:	f7f8 f84c 	bl	8000158 <__aeabi_dsub>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4640      	mov	r0, r8
 80080c6:	4649      	mov	r1, r9
 80080c8:	e608      	b.n	8007cdc <__ieee754_pow+0x2ec>
 80080ca:	bf00      	nop
 80080cc:	f3af 8000 	nop.w
 80080d0:	4a454eef 	.word	0x4a454eef
 80080d4:	3fca7e28 	.word	0x3fca7e28
 80080d8:	93c9db65 	.word	0x93c9db65
 80080dc:	3fcd864a 	.word	0x3fcd864a
 80080e0:	a91d4101 	.word	0xa91d4101
 80080e4:	3fd17460 	.word	0x3fd17460
 80080e8:	518f264d 	.word	0x518f264d
 80080ec:	3fd55555 	.word	0x3fd55555
 80080f0:	db6fabff 	.word	0xdb6fabff
 80080f4:	3fdb6db6 	.word	0x3fdb6db6
 80080f8:	33333303 	.word	0x33333303
 80080fc:	3fe33333 	.word	0x3fe33333
 8008100:	e0000000 	.word	0xe0000000
 8008104:	3feec709 	.word	0x3feec709
 8008108:	dc3a03fd 	.word	0xdc3a03fd
 800810c:	3feec709 	.word	0x3feec709
 8008110:	145b01f5 	.word	0x145b01f5
 8008114:	be3e2fe0 	.word	0xbe3e2fe0
 8008118:	7ff00000 	.word	0x7ff00000
 800811c:	43400000 	.word	0x43400000
 8008120:	0003988e 	.word	0x0003988e
 8008124:	000bb679 	.word	0x000bb679
 8008128:	08008aa8 	.word	0x08008aa8
 800812c:	3ff00000 	.word	0x3ff00000
 8008130:	40080000 	.word	0x40080000
 8008134:	08008ac8 	.word	0x08008ac8
 8008138:	08008ab8 	.word	0x08008ab8
 800813c:	2601      	movs	r6, #1
 800813e:	e667      	b.n	8007e10 <__ieee754_pow+0x420>
 8008140:	a39d      	add	r3, pc, #628	; (adr r3, 80083b8 <__ieee754_pow+0x9c8>)
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	4640      	mov	r0, r8
 8008148:	4649      	mov	r1, r9
 800814a:	f7f8 f807 	bl	800015c <__adddf3>
 800814e:	4622      	mov	r2, r4
 8008150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008154:	462b      	mov	r3, r5
 8008156:	4650      	mov	r0, sl
 8008158:	4639      	mov	r1, r7
 800815a:	f7f7 fffd 	bl	8000158 <__aeabi_dsub>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008166:	f7f8 fc3f 	bl	80009e8 <__aeabi_dcmpgt>
 800816a:	2800      	cmp	r0, #0
 800816c:	f47f ae01 	bne.w	8007d72 <__ieee754_pow+0x382>
 8008170:	4aa5      	ldr	r2, [pc, #660]	; (8008408 <__ieee754_pow+0xa18>)
 8008172:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008176:	4293      	cmp	r3, r2
 8008178:	f340 8103 	ble.w	8008382 <__ieee754_pow+0x992>
 800817c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008180:	2000      	movs	r0, #0
 8008182:	151b      	asrs	r3, r3, #20
 8008184:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008188:	fa4a f303 	asr.w	r3, sl, r3
 800818c:	4433      	add	r3, r6
 800818e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008192:	4f9e      	ldr	r7, [pc, #632]	; (800840c <__ieee754_pow+0xa1c>)
 8008194:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008198:	4117      	asrs	r7, r2
 800819a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800819e:	ea23 0107 	bic.w	r1, r3, r7
 80081a2:	f1c2 0214 	rsb	r2, r2, #20
 80081a6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80081aa:	460b      	mov	r3, r1
 80081ac:	fa4a fa02 	asr.w	sl, sl, r2
 80081b0:	2e00      	cmp	r6, #0
 80081b2:	4602      	mov	r2, r0
 80081b4:	4629      	mov	r1, r5
 80081b6:	4620      	mov	r0, r4
 80081b8:	bfb8      	it	lt
 80081ba:	f1ca 0a00 	rsblt	sl, sl, #0
 80081be:	f7f7 ffcb 	bl	8000158 <__aeabi_dsub>
 80081c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ca:	2400      	movs	r4, #0
 80081cc:	4642      	mov	r2, r8
 80081ce:	464b      	mov	r3, r9
 80081d0:	f7f7 ffc4 	bl	800015c <__adddf3>
 80081d4:	a37a      	add	r3, pc, #488	; (adr r3, 80083c0 <__ieee754_pow+0x9d0>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	4620      	mov	r0, r4
 80081dc:	460d      	mov	r5, r1
 80081de:	f7f8 f973 	bl	80004c8 <__aeabi_dmul>
 80081e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081e6:	4606      	mov	r6, r0
 80081e8:	460f      	mov	r7, r1
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7f7 ffb3 	bl	8000158 <__aeabi_dsub>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4640      	mov	r0, r8
 80081f8:	4649      	mov	r1, r9
 80081fa:	f7f7 ffad 	bl	8000158 <__aeabi_dsub>
 80081fe:	a372      	add	r3, pc, #456	; (adr r3, 80083c8 <__ieee754_pow+0x9d8>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f7f8 f960 	bl	80004c8 <__aeabi_dmul>
 8008208:	a371      	add	r3, pc, #452	; (adr r3, 80083d0 <__ieee754_pow+0x9e0>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	4680      	mov	r8, r0
 8008210:	4689      	mov	r9, r1
 8008212:	4620      	mov	r0, r4
 8008214:	4629      	mov	r1, r5
 8008216:	f7f8 f957 	bl	80004c8 <__aeabi_dmul>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4640      	mov	r0, r8
 8008220:	4649      	mov	r1, r9
 8008222:	f7f7 ff9b 	bl	800015c <__adddf3>
 8008226:	4604      	mov	r4, r0
 8008228:	460d      	mov	r5, r1
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4630      	mov	r0, r6
 8008230:	4639      	mov	r1, r7
 8008232:	f7f7 ff93 	bl	800015c <__adddf3>
 8008236:	4632      	mov	r2, r6
 8008238:	463b      	mov	r3, r7
 800823a:	4680      	mov	r8, r0
 800823c:	4689      	mov	r9, r1
 800823e:	f7f7 ff8b 	bl	8000158 <__aeabi_dsub>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4620      	mov	r0, r4
 8008248:	4629      	mov	r1, r5
 800824a:	f7f7 ff85 	bl	8000158 <__aeabi_dsub>
 800824e:	4642      	mov	r2, r8
 8008250:	4606      	mov	r6, r0
 8008252:	460f      	mov	r7, r1
 8008254:	464b      	mov	r3, r9
 8008256:	4640      	mov	r0, r8
 8008258:	4649      	mov	r1, r9
 800825a:	f7f8 f935 	bl	80004c8 <__aeabi_dmul>
 800825e:	a35e      	add	r3, pc, #376	; (adr r3, 80083d8 <__ieee754_pow+0x9e8>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	4604      	mov	r4, r0
 8008266:	460d      	mov	r5, r1
 8008268:	f7f8 f92e 	bl	80004c8 <__aeabi_dmul>
 800826c:	a35c      	add	r3, pc, #368	; (adr r3, 80083e0 <__ieee754_pow+0x9f0>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	f7f7 ff71 	bl	8000158 <__aeabi_dsub>
 8008276:	4622      	mov	r2, r4
 8008278:	462b      	mov	r3, r5
 800827a:	f7f8 f925 	bl	80004c8 <__aeabi_dmul>
 800827e:	a35a      	add	r3, pc, #360	; (adr r3, 80083e8 <__ieee754_pow+0x9f8>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f7 ff6a 	bl	800015c <__adddf3>
 8008288:	4622      	mov	r2, r4
 800828a:	462b      	mov	r3, r5
 800828c:	f7f8 f91c 	bl	80004c8 <__aeabi_dmul>
 8008290:	a357      	add	r3, pc, #348	; (adr r3, 80083f0 <__ieee754_pow+0xa00>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f7 ff5f 	bl	8000158 <__aeabi_dsub>
 800829a:	4622      	mov	r2, r4
 800829c:	462b      	mov	r3, r5
 800829e:	f7f8 f913 	bl	80004c8 <__aeabi_dmul>
 80082a2:	a355      	add	r3, pc, #340	; (adr r3, 80083f8 <__ieee754_pow+0xa08>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f7 ff58 	bl	800015c <__adddf3>
 80082ac:	4622      	mov	r2, r4
 80082ae:	462b      	mov	r3, r5
 80082b0:	f7f8 f90a 	bl	80004c8 <__aeabi_dmul>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4640      	mov	r0, r8
 80082ba:	4649      	mov	r1, r9
 80082bc:	f7f7 ff4c 	bl	8000158 <__aeabi_dsub>
 80082c0:	4604      	mov	r4, r0
 80082c2:	460d      	mov	r5, r1
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7f8 f8fc 	bl	80004c8 <__aeabi_dmul>
 80082d0:	2200      	movs	r2, #0
 80082d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	f7f7 ff3b 	bl	8000158 <__aeabi_dsub>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ea:	f7f8 fa17 	bl	800071c <__aeabi_ddiv>
 80082ee:	4632      	mov	r2, r6
 80082f0:	4604      	mov	r4, r0
 80082f2:	460d      	mov	r5, r1
 80082f4:	463b      	mov	r3, r7
 80082f6:	4640      	mov	r0, r8
 80082f8:	4649      	mov	r1, r9
 80082fa:	f7f8 f8e5 	bl	80004c8 <__aeabi_dmul>
 80082fe:	4632      	mov	r2, r6
 8008300:	463b      	mov	r3, r7
 8008302:	f7f7 ff2b 	bl	800015c <__adddf3>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4620      	mov	r0, r4
 800830c:	4629      	mov	r1, r5
 800830e:	f7f7 ff23 	bl	8000158 <__aeabi_dsub>
 8008312:	4642      	mov	r2, r8
 8008314:	464b      	mov	r3, r9
 8008316:	f7f7 ff1f 	bl	8000158 <__aeabi_dsub>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	2000      	movs	r0, #0
 8008320:	493b      	ldr	r1, [pc, #236]	; (8008410 <__ieee754_pow+0xa20>)
 8008322:	f7f7 ff19 	bl	8000158 <__aeabi_dsub>
 8008326:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800832a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800832e:	da2b      	bge.n	8008388 <__ieee754_pow+0x998>
 8008330:	4652      	mov	r2, sl
 8008332:	f000 f9b9 	bl	80086a8 <scalbn>
 8008336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800833a:	f7ff bbf2 	b.w	8007b22 <__ieee754_pow+0x132>
 800833e:	4b35      	ldr	r3, [pc, #212]	; (8008414 <__ieee754_pow+0xa24>)
 8008340:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008344:	429f      	cmp	r7, r3
 8008346:	f77f af13 	ble.w	8008170 <__ieee754_pow+0x780>
 800834a:	4b33      	ldr	r3, [pc, #204]	; (8008418 <__ieee754_pow+0xa28>)
 800834c:	440b      	add	r3, r1
 800834e:	4303      	orrs	r3, r0
 8008350:	d00b      	beq.n	800836a <__ieee754_pow+0x97a>
 8008352:	a32b      	add	r3, pc, #172	; (adr r3, 8008400 <__ieee754_pow+0xa10>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800835c:	f7f8 f8b4 	bl	80004c8 <__aeabi_dmul>
 8008360:	a327      	add	r3, pc, #156	; (adr r3, 8008400 <__ieee754_pow+0xa10>)
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7ff bbdc 	b.w	8007b22 <__ieee754_pow+0x132>
 800836a:	4622      	mov	r2, r4
 800836c:	462b      	mov	r3, r5
 800836e:	f7f7 fef3 	bl	8000158 <__aeabi_dsub>
 8008372:	4642      	mov	r2, r8
 8008374:	464b      	mov	r3, r9
 8008376:	f7f8 fb2d 	bl	80009d4 <__aeabi_dcmpge>
 800837a:	2800      	cmp	r0, #0
 800837c:	f43f aef8 	beq.w	8008170 <__ieee754_pow+0x780>
 8008380:	e7e7      	b.n	8008352 <__ieee754_pow+0x962>
 8008382:	f04f 0a00 	mov.w	sl, #0
 8008386:	e71e      	b.n	80081c6 <__ieee754_pow+0x7d6>
 8008388:	4621      	mov	r1, r4
 800838a:	e7d4      	b.n	8008336 <__ieee754_pow+0x946>
 800838c:	f04f 0b00 	mov.w	fp, #0
 8008390:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008410 <__ieee754_pow+0xa20>
 8008394:	f7ff bbb0 	b.w	8007af8 <__ieee754_pow+0x108>
 8008398:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800839c:	f7ff bbac 	b.w	8007af8 <__ieee754_pow+0x108>
 80083a0:	4638      	mov	r0, r7
 80083a2:	4641      	mov	r1, r8
 80083a4:	f7ff bbbf 	b.w	8007b26 <__ieee754_pow+0x136>
 80083a8:	9200      	str	r2, [sp, #0]
 80083aa:	f7ff bb7f 	b.w	8007aac <__ieee754_pow+0xbc>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f7ff bb69 	b.w	8007a86 <__ieee754_pow+0x96>
 80083b4:	f3af 8000 	nop.w
 80083b8:	652b82fe 	.word	0x652b82fe
 80083bc:	3c971547 	.word	0x3c971547
 80083c0:	00000000 	.word	0x00000000
 80083c4:	3fe62e43 	.word	0x3fe62e43
 80083c8:	fefa39ef 	.word	0xfefa39ef
 80083cc:	3fe62e42 	.word	0x3fe62e42
 80083d0:	0ca86c39 	.word	0x0ca86c39
 80083d4:	be205c61 	.word	0xbe205c61
 80083d8:	72bea4d0 	.word	0x72bea4d0
 80083dc:	3e663769 	.word	0x3e663769
 80083e0:	c5d26bf1 	.word	0xc5d26bf1
 80083e4:	3ebbbd41 	.word	0x3ebbbd41
 80083e8:	af25de2c 	.word	0xaf25de2c
 80083ec:	3f11566a 	.word	0x3f11566a
 80083f0:	16bebd93 	.word	0x16bebd93
 80083f4:	3f66c16c 	.word	0x3f66c16c
 80083f8:	5555553e 	.word	0x5555553e
 80083fc:	3fc55555 	.word	0x3fc55555
 8008400:	c2f8f359 	.word	0xc2f8f359
 8008404:	01a56e1f 	.word	0x01a56e1f
 8008408:	3fe00000 	.word	0x3fe00000
 800840c:	000fffff 	.word	0x000fffff
 8008410:	3ff00000 	.word	0x3ff00000
 8008414:	4090cbff 	.word	0x4090cbff
 8008418:	3f6f3400 	.word	0x3f6f3400

0800841c <__ieee754_sqrt>:
 800841c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008570 <__ieee754_sqrt+0x154>
 8008420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008424:	ea3c 0c01 	bics.w	ip, ip, r1
 8008428:	460b      	mov	r3, r1
 800842a:	4606      	mov	r6, r0
 800842c:	460d      	mov	r5, r1
 800842e:	460a      	mov	r2, r1
 8008430:	4607      	mov	r7, r0
 8008432:	4604      	mov	r4, r0
 8008434:	d10e      	bne.n	8008454 <__ieee754_sqrt+0x38>
 8008436:	4602      	mov	r2, r0
 8008438:	f7f8 f846 	bl	80004c8 <__aeabi_dmul>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4630      	mov	r0, r6
 8008442:	4629      	mov	r1, r5
 8008444:	f7f7 fe8a 	bl	800015c <__adddf3>
 8008448:	4606      	mov	r6, r0
 800844a:	460d      	mov	r5, r1
 800844c:	4630      	mov	r0, r6
 800844e:	4629      	mov	r1, r5
 8008450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008454:	2900      	cmp	r1, #0
 8008456:	dc0d      	bgt.n	8008474 <__ieee754_sqrt+0x58>
 8008458:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800845c:	ea5c 0707 	orrs.w	r7, ip, r7
 8008460:	d0f4      	beq.n	800844c <__ieee754_sqrt+0x30>
 8008462:	b139      	cbz	r1, 8008474 <__ieee754_sqrt+0x58>
 8008464:	4602      	mov	r2, r0
 8008466:	f7f7 fe77 	bl	8000158 <__aeabi_dsub>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	f7f8 f955 	bl	800071c <__aeabi_ddiv>
 8008472:	e7e9      	b.n	8008448 <__ieee754_sqrt+0x2c>
 8008474:	1512      	asrs	r2, r2, #20
 8008476:	d074      	beq.n	8008562 <__ieee754_sqrt+0x146>
 8008478:	2000      	movs	r0, #0
 800847a:	07d5      	lsls	r5, r2, #31
 800847c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008480:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008484:	bf5e      	ittt	pl
 8008486:	0fe3      	lsrpl	r3, r4, #31
 8008488:	0064      	lslpl	r4, r4, #1
 800848a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800848e:	0fe3      	lsrs	r3, r4, #31
 8008490:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008494:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008498:	2516      	movs	r5, #22
 800849a:	4601      	mov	r1, r0
 800849c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80084a0:	1076      	asrs	r6, r6, #1
 80084a2:	0064      	lsls	r4, r4, #1
 80084a4:	188f      	adds	r7, r1, r2
 80084a6:	429f      	cmp	r7, r3
 80084a8:	bfde      	ittt	le
 80084aa:	1bdb      	suble	r3, r3, r7
 80084ac:	18b9      	addle	r1, r7, r2
 80084ae:	1880      	addle	r0, r0, r2
 80084b0:	005b      	lsls	r3, r3, #1
 80084b2:	3d01      	subs	r5, #1
 80084b4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80084b8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80084bc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80084c0:	d1f0      	bne.n	80084a4 <__ieee754_sqrt+0x88>
 80084c2:	462a      	mov	r2, r5
 80084c4:	f04f 0e20 	mov.w	lr, #32
 80084c8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80084cc:	428b      	cmp	r3, r1
 80084ce:	eb07 0c05 	add.w	ip, r7, r5
 80084d2:	dc02      	bgt.n	80084da <__ieee754_sqrt+0xbe>
 80084d4:	d113      	bne.n	80084fe <__ieee754_sqrt+0xe2>
 80084d6:	45a4      	cmp	ip, r4
 80084d8:	d811      	bhi.n	80084fe <__ieee754_sqrt+0xe2>
 80084da:	f1bc 0f00 	cmp.w	ip, #0
 80084de:	eb0c 0507 	add.w	r5, ip, r7
 80084e2:	da43      	bge.n	800856c <__ieee754_sqrt+0x150>
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	db41      	blt.n	800856c <__ieee754_sqrt+0x150>
 80084e8:	f101 0801 	add.w	r8, r1, #1
 80084ec:	1a5b      	subs	r3, r3, r1
 80084ee:	4641      	mov	r1, r8
 80084f0:	45a4      	cmp	ip, r4
 80084f2:	bf88      	it	hi
 80084f4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80084f8:	eba4 040c 	sub.w	r4, r4, ip
 80084fc:	443a      	add	r2, r7
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	f1be 0e01 	subs.w	lr, lr, #1
 8008504:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008508:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800850c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008510:	d1dc      	bne.n	80084cc <__ieee754_sqrt+0xb0>
 8008512:	4323      	orrs	r3, r4
 8008514:	d006      	beq.n	8008524 <__ieee754_sqrt+0x108>
 8008516:	1c54      	adds	r4, r2, #1
 8008518:	bf0b      	itete	eq
 800851a:	4672      	moveq	r2, lr
 800851c:	3201      	addne	r2, #1
 800851e:	3001      	addeq	r0, #1
 8008520:	f022 0201 	bicne.w	r2, r2, #1
 8008524:	1043      	asrs	r3, r0, #1
 8008526:	07c1      	lsls	r1, r0, #31
 8008528:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800852c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008530:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008534:	bf48      	it	mi
 8008536:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800853a:	4610      	mov	r0, r2
 800853c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008540:	e782      	b.n	8008448 <__ieee754_sqrt+0x2c>
 8008542:	0ae3      	lsrs	r3, r4, #11
 8008544:	3915      	subs	r1, #21
 8008546:	0564      	lsls	r4, r4, #21
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0fa      	beq.n	8008542 <__ieee754_sqrt+0x126>
 800854c:	02de      	lsls	r6, r3, #11
 800854e:	d50a      	bpl.n	8008566 <__ieee754_sqrt+0x14a>
 8008550:	f1c2 0020 	rsb	r0, r2, #32
 8008554:	fa24 f000 	lsr.w	r0, r4, r0
 8008558:	1e55      	subs	r5, r2, #1
 800855a:	4094      	lsls	r4, r2
 800855c:	4303      	orrs	r3, r0
 800855e:	1b4a      	subs	r2, r1, r5
 8008560:	e78a      	b.n	8008478 <__ieee754_sqrt+0x5c>
 8008562:	4611      	mov	r1, r2
 8008564:	e7f0      	b.n	8008548 <__ieee754_sqrt+0x12c>
 8008566:	005b      	lsls	r3, r3, #1
 8008568:	3201      	adds	r2, #1
 800856a:	e7ef      	b.n	800854c <__ieee754_sqrt+0x130>
 800856c:	4688      	mov	r8, r1
 800856e:	e7bd      	b.n	80084ec <__ieee754_sqrt+0xd0>
 8008570:	7ff00000 	.word	0x7ff00000

08008574 <fabs>:
 8008574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008578:	4770      	bx	lr

0800857a <finite>:
 800857a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800857e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008582:	0fc0      	lsrs	r0, r0, #31
 8008584:	4770      	bx	lr
	...

08008588 <nan>:
 8008588:	2000      	movs	r0, #0
 800858a:	4901      	ldr	r1, [pc, #4]	; (8008590 <nan+0x8>)
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	7ff80000 	.word	0x7ff80000

08008594 <rint>:
 8008594:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8008598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800859a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800859e:	2f13      	cmp	r7, #19
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	460c      	mov	r4, r1
 80085a6:	4605      	mov	r5, r0
 80085a8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80085ac:	dc59      	bgt.n	8008662 <rint+0xce>
 80085ae:	2f00      	cmp	r7, #0
 80085b0:	da2a      	bge.n	8008608 <rint+0x74>
 80085b2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80085b6:	4301      	orrs	r1, r0
 80085b8:	d022      	beq.n	8008600 <rint+0x6c>
 80085ba:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80085be:	4301      	orrs	r1, r0
 80085c0:	424d      	negs	r5, r1
 80085c2:	430d      	orrs	r5, r1
 80085c4:	4936      	ldr	r1, [pc, #216]	; (80086a0 <rint+0x10c>)
 80085c6:	0c5c      	lsrs	r4, r3, #17
 80085c8:	0b2d      	lsrs	r5, r5, #12
 80085ca:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 80085ce:	0464      	lsls	r4, r4, #17
 80085d0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80085d4:	ea45 0304 	orr.w	r3, r5, r4
 80085d8:	e9d1 4500 	ldrd	r4, r5, [r1]
 80085dc:	4620      	mov	r0, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	f7f7 fdbc 	bl	800015c <__adddf3>
 80085e4:	e9cd 0100 	strd	r0, r1, [sp]
 80085e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085ec:	462b      	mov	r3, r5
 80085ee:	4622      	mov	r2, r4
 80085f0:	f7f7 fdb2 	bl	8000158 <__aeabi_dsub>
 80085f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085f8:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4610      	mov	r0, r2
 8008602:	4619      	mov	r1, r3
 8008604:	b003      	add	sp, #12
 8008606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008608:	4926      	ldr	r1, [pc, #152]	; (80086a4 <rint+0x110>)
 800860a:	4139      	asrs	r1, r7
 800860c:	ea03 0001 	and.w	r0, r3, r1
 8008610:	4310      	orrs	r0, r2
 8008612:	d0f5      	beq.n	8008600 <rint+0x6c>
 8008614:	084b      	lsrs	r3, r1, #1
 8008616:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800861a:	ea52 0501 	orrs.w	r5, r2, r1
 800861e:	d00c      	beq.n	800863a <rint+0xa6>
 8008620:	ea24 0303 	bic.w	r3, r4, r3
 8008624:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8008628:	2f13      	cmp	r7, #19
 800862a:	bf0c      	ite	eq
 800862c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8008630:	2500      	movne	r5, #0
 8008632:	fa44 f707 	asr.w	r7, r4, r7
 8008636:	ea43 0407 	orr.w	r4, r3, r7
 800863a:	4919      	ldr	r1, [pc, #100]	; (80086a0 <rint+0x10c>)
 800863c:	4623      	mov	r3, r4
 800863e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8008642:	462a      	mov	r2, r5
 8008644:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008648:	4620      	mov	r0, r4
 800864a:	4629      	mov	r1, r5
 800864c:	f7f7 fd86 	bl	800015c <__adddf3>
 8008650:	e9cd 0100 	strd	r0, r1, [sp]
 8008654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	f7f7 fd7c 	bl	8000158 <__aeabi_dsub>
 8008660:	e7cc      	b.n	80085fc <rint+0x68>
 8008662:	2f33      	cmp	r7, #51	; 0x33
 8008664:	dd05      	ble.n	8008672 <rint+0xde>
 8008666:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800866a:	d1c9      	bne.n	8008600 <rint+0x6c>
 800866c:	f7f7 fd76 	bl	800015c <__adddf3>
 8008670:	e7c4      	b.n	80085fc <rint+0x68>
 8008672:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008676:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800867a:	fa21 f10c 	lsr.w	r1, r1, ip
 800867e:	4208      	tst	r0, r1
 8008680:	d0be      	beq.n	8008600 <rint+0x6c>
 8008682:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8008686:	bf18      	it	ne
 8008688:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800868c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8008690:	bf1e      	ittt	ne
 8008692:	ea20 0303 	bicne.w	r3, r0, r3
 8008696:	fa45 fc0c 	asrne.w	ip, r5, ip
 800869a:	ea43 050c 	orrne.w	r5, r3, ip
 800869e:	e7cc      	b.n	800863a <rint+0xa6>
 80086a0:	08008ad8 	.word	0x08008ad8
 80086a4:	000fffff 	.word	0x000fffff

080086a8 <scalbn>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80086ae:	4604      	mov	r4, r0
 80086b0:	460d      	mov	r5, r1
 80086b2:	4617      	mov	r7, r2
 80086b4:	460b      	mov	r3, r1
 80086b6:	b996      	cbnz	r6, 80086de <scalbn+0x36>
 80086b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086bc:	4303      	orrs	r3, r0
 80086be:	d039      	beq.n	8008734 <scalbn+0x8c>
 80086c0:	4b35      	ldr	r3, [pc, #212]	; (8008798 <scalbn+0xf0>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	f7f7 ff00 	bl	80004c8 <__aeabi_dmul>
 80086c8:	4b34      	ldr	r3, [pc, #208]	; (800879c <scalbn+0xf4>)
 80086ca:	4604      	mov	r4, r0
 80086cc:	429f      	cmp	r7, r3
 80086ce:	460d      	mov	r5, r1
 80086d0:	da0f      	bge.n	80086f2 <scalbn+0x4a>
 80086d2:	a32d      	add	r3, pc, #180	; (adr r3, 8008788 <scalbn+0xe0>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f7f7 fef6 	bl	80004c8 <__aeabi_dmul>
 80086dc:	e006      	b.n	80086ec <scalbn+0x44>
 80086de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80086e2:	4296      	cmp	r6, r2
 80086e4:	d10a      	bne.n	80086fc <scalbn+0x54>
 80086e6:	4602      	mov	r2, r0
 80086e8:	f7f7 fd38 	bl	800015c <__adddf3>
 80086ec:	4604      	mov	r4, r0
 80086ee:	460d      	mov	r5, r1
 80086f0:	e020      	b.n	8008734 <scalbn+0x8c>
 80086f2:	460b      	mov	r3, r1
 80086f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80086f8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80086fc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008700:	19b9      	adds	r1, r7, r6
 8008702:	4291      	cmp	r1, r2
 8008704:	dd0e      	ble.n	8008724 <scalbn+0x7c>
 8008706:	a322      	add	r3, pc, #136	; (adr r3, 8008790 <scalbn+0xe8>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008710:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008714:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008718:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800871c:	4820      	ldr	r0, [pc, #128]	; (80087a0 <scalbn+0xf8>)
 800871e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008722:	e7d9      	b.n	80086d8 <scalbn+0x30>
 8008724:	2900      	cmp	r1, #0
 8008726:	dd08      	ble.n	800873a <scalbn+0x92>
 8008728:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800872c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008730:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800873a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800873e:	da16      	bge.n	800876e <scalbn+0xc6>
 8008740:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008744:	429f      	cmp	r7, r3
 8008746:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800874a:	dd08      	ble.n	800875e <scalbn+0xb6>
 800874c:	4c15      	ldr	r4, [pc, #84]	; (80087a4 <scalbn+0xfc>)
 800874e:	4814      	ldr	r0, [pc, #80]	; (80087a0 <scalbn+0xf8>)
 8008750:	f363 74df 	bfi	r4, r3, #31, #1
 8008754:	a30e      	add	r3, pc, #56	; (adr r3, 8008790 <scalbn+0xe8>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	4621      	mov	r1, r4
 800875c:	e7bc      	b.n	80086d8 <scalbn+0x30>
 800875e:	4c12      	ldr	r4, [pc, #72]	; (80087a8 <scalbn+0x100>)
 8008760:	4812      	ldr	r0, [pc, #72]	; (80087ac <scalbn+0x104>)
 8008762:	f363 74df 	bfi	r4, r3, #31, #1
 8008766:	a308      	add	r3, pc, #32	; (adr r3, 8008788 <scalbn+0xe0>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	e7f5      	b.n	800875a <scalbn+0xb2>
 800876e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008772:	3136      	adds	r1, #54	; 0x36
 8008774:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008778:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800877c:	4620      	mov	r0, r4
 800877e:	4629      	mov	r1, r5
 8008780:	2200      	movs	r2, #0
 8008782:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <scalbn+0x108>)
 8008784:	e7a8      	b.n	80086d8 <scalbn+0x30>
 8008786:	bf00      	nop
 8008788:	c2f8f359 	.word	0xc2f8f359
 800878c:	01a56e1f 	.word	0x01a56e1f
 8008790:	8800759c 	.word	0x8800759c
 8008794:	7e37e43c 	.word	0x7e37e43c
 8008798:	43500000 	.word	0x43500000
 800879c:	ffff3cb0 	.word	0xffff3cb0
 80087a0:	8800759c 	.word	0x8800759c
 80087a4:	7e37e43c 	.word	0x7e37e43c
 80087a8:	01a56e1f 	.word	0x01a56e1f
 80087ac:	c2f8f359 	.word	0xc2f8f359
 80087b0:	3c900000 	.word	0x3c900000

080087b4 <_init>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr

080087c0 <_fini>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr
