
Anemometr_200_F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007350  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007580  08007580  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007580  08007580  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007580  08007580  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007580  08007580  00017580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007584  08007584  00017584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000070  080075f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  080075f8  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e88  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b36  00000000  00000000  00039f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003ca60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003de60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000200df  00000000  00000000  0003f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b7c  00000000  00000000  0005f237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3ee6  00000000  00000000  00078db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cc99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a08  00000000  00000000  0013ccec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080074c8 	.word	0x080074c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080074c8 	.word	0x080074c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <levelUp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void levelUp(uint8_t channel, uint8_t lev, bool updn) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
 800027a:	460b      	mov	r3, r1
 800027c:	71bb      	strb	r3, [r7, #6]
 800027e:	4613      	mov	r3, r2
 8000280:	717b      	strb	r3, [r7, #5]
	//LED_PULSE
	/* Начальный уровень -- высокий, переключение выполняется переходом в низкий уровень */
	HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2110      	movs	r1, #16
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f002 ff6f 	bl	800316c <HAL_GPIO_WritePin>
	/* Отключим выбор всех регуляторов */
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
 8000290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000294:	4836      	ldr	r0, [pc, #216]	; (8000370 <levelUp+0x100>)
 8000296:	f002 ff69 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002a0:	4833      	ldr	r0, [pc, #204]	; (8000370 <levelUp+0x100>)
 80002a2:	f002 ff63 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ac:	4830      	ldr	r0, [pc, #192]	; (8000370 <levelUp+0x100>)
 80002ae:	f002 ff5d 	bl	800316c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2120      	movs	r1, #32
 80002b6:	482f      	ldr	r0, [pc, #188]	; (8000374 <levelUp+0x104>)
 80002b8:	f002 ff58 	bl	800316c <HAL_GPIO_WritePin>
	/* Режим повышения уровня сигнала */
	if (updn) {
 80002bc:	797b      	ldrb	r3, [r7, #5]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <levelUp+0x60>
		HAL_GPIO_WritePin(UD_GPIO_Port, UD_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2120      	movs	r1, #32
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f002 ff4f 	bl	800316c <HAL_GPIO_WritePin>
 80002ce:	e005      	b.n	80002dc <levelUp+0x6c>
	} else {
		HAL_GPIO_WritePin(UD_GPIO_Port, UD_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2120      	movs	r1, #32
 80002d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d8:	f002 ff48 	bl	800316c <HAL_GPIO_WritePin>
	}
	switch(channel) {
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d842      	bhi.n	8000368 <levelUp+0xf8>
 80002e2:	a201      	add	r2, pc, #4	; (adr r2, 80002e8 <levelUp+0x78>)
 80002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e8:	080002f9 	.word	0x080002f9
 80002ec:	08000307 	.word	0x08000307
 80002f0:	08000315 	.word	0x08000315
 80002f4:	08000323 	.word	0x08000323
		case 0: {
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	481c      	ldr	r0, [pc, #112]	; (8000370 <levelUp+0x100>)
 8000300:	f002 ff34 	bl	800316c <HAL_GPIO_WritePin>
			break;
 8000304:	e013      	b.n	800032e <levelUp+0xbe>
		}
		case 1: {
			HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800030c:	4818      	ldr	r0, [pc, #96]	; (8000370 <levelUp+0x100>)
 800030e:	f002 ff2d 	bl	800316c <HAL_GPIO_WritePin>
			break;
 8000312:	e00c      	b.n	800032e <levelUp+0xbe>
		}
		case 2: {
			HAL_GPIO_WritePin(CS3_GPIO_Port, CS3_Pin, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800031a:	4815      	ldr	r0, [pc, #84]	; (8000370 <levelUp+0x100>)
 800031c:	f002 ff26 	bl	800316c <HAL_GPIO_WritePin>
			break;
 8000320:	e005      	b.n	800032e <levelUp+0xbe>
		}
		case 3: {
			HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2120      	movs	r1, #32
 8000326:	4813      	ldr	r0, [pc, #76]	; (8000374 <levelUp+0x104>)
 8000328:	f002 ff20 	bl	800316c <HAL_GPIO_WritePin>
			break;
 800032c:	bf00      	nop
		}
		default: {
			return;
		}
	}
	for (int iii = 0; iii < lev; iii++) {
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00e      	b.n	8000352 <levelUp+0xe2>
		HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2110      	movs	r1, #16
 8000338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033c:	f002 ff16 	bl	800316c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2110      	movs	r1, #16
 8000344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000348:	f002 ff10 	bl	800316c <HAL_GPIO_WritePin>
	for (int iii = 0; iii < lev; iii++) {
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	429a      	cmp	r2, r3
 8000358:	dbec      	blt.n	8000334 <levelUp+0xc4>
	}
	HAL_GPIO_WritePin(INC_GPIO_Port, INC_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2110      	movs	r1, #16
 800035e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000362:	f002 ff03 	bl	800316c <HAL_GPIO_WritePin>
 8000366:	e000      	b.n	800036a <levelUp+0xfa>
			return;
 8000368:	bf00      	nop
}
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	48000800 	.word	0x48000800
 8000374:	48000400 	.word	0x48000400

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b0b8      	sub	sp, #224	; 0xe0
 800037c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037e:	f001 f865 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000382:	f000 f8b1 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000386:	f000 fc2b 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 800038a:	f000 fc0b 	bl	8000ba4 <MX_DMA_Init>
  MX_TIM1_Init();
 800038e:	f000 fa03 	bl	8000798 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000392:	f000 f911 	bl	80005b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000396:	f000 f981 	bl	800069c <MX_I2C1_Init>
  MX_SPI2_Init();
 800039a:	f000 f9bf 	bl	800071c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800039e:	f000 fba1 	bl	8000ae4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003a2:	f000 fbcf 	bl	8000b44 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80003a6:	f000 fb4f 	bl	8000a48 <MX_TIM4_Init>
  MX_TIM3_Init();
 80003aa:	f000 fab1 	bl	8000910 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char SndBuffer[200];
  for (int iii = 0; iii < CONVERSION_COUNT; iii++) {
 80003ae:	2300      	movs	r3, #0
 80003b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80003b4:	e00a      	b.n	80003cc <main+0x54>
	  adcBuffer[iii] = 0;
 80003b6:	4a41      	ldr	r2, [pc, #260]	; (80004bc <main+0x144>)
 80003b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80003bc:	2100      	movs	r1, #0
 80003be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int iii = 0; iii < CONVERSION_COUNT; iii++) {
 80003c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80003c6:	3301      	adds	r3, #1
 80003c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80003cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80003d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80003d4:	dbef      	blt.n	80003b6 <main+0x3e>
  }
  HAL_GPIO_WritePin(Z1Sel_GPIO_Port, Z1Sel_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2101      	movs	r1, #1
 80003da:	4839      	ldr	r0, [pc, #228]	; (80004c0 <main+0x148>)
 80003dc:	f002 fec6 	bl	800316c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z2Sel_GPIO_Port, Z2Sel_Pin, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2102      	movs	r1, #2
 80003e4:	4836      	ldr	r0, [pc, #216]	; (80004c0 <main+0x148>)
 80003e6:	f002 fec1 	bl	800316c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z3Sel_GPIO_Port, Z3Sel_Pin, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2104      	movs	r1, #4
 80003ee:	4834      	ldr	r0, [pc, #208]	; (80004c0 <main+0x148>)
 80003f0:	f002 febc 	bl	800316c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Z4Sel_GPIO_Port, Z4Sel_Pin, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003fa:	4831      	ldr	r0, [pc, #196]	; (80004c0 <main+0x148>)
 80003fc:	f002 feb6 	bl	800316c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim4);
 8000400:	4830      	ldr	r0, [pc, #192]	; (80004c4 <main+0x14c>)
 8000402:	f004 fbe3 	bl	8004bcc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000406:	4830      	ldr	r0, [pc, #192]	; (80004c8 <main+0x150>)
 8000408:	f004 fbe0 	bl	8004bcc <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800040c:	2100      	movs	r1, #0
 800040e:	482f      	ldr	r0, [pc, #188]	; (80004cc <main+0x154>)
 8000410:	f001 fbfe 	bl	8001c10 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, CONVERSION_COUNT);
 8000414:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000418:	4928      	ldr	r1, [pc, #160]	; (80004bc <main+0x144>)
 800041a:	482c      	ldr	r0, [pc, #176]	; (80004cc <main+0x154>)
 800041c:	f001 fa7a 	bl	8001914 <HAL_ADC_Start_DMA>

  HAL_UART_Transmit(&huart1, (uint8_t *) START_TEXT, sizeof(START_TEXT), 1000);
 8000420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000424:	2218      	movs	r2, #24
 8000426:	492a      	ldr	r1, [pc, #168]	; (80004d0 <main+0x158>)
 8000428:	482a      	ldr	r0, [pc, #168]	; (80004d4 <main+0x15c>)
 800042a:	f005 ff7b 	bl	8006324 <HAL_UART_Transmit>
			  adcBuffer[SHOW_DATA+0], adcBuffer[SHOW_DATA+1], adcBuffer[SHOW_DATA+2], adcBuffer[SHOW_DATA+3], adcBuffer[SHOW_DATA+4],
			  adcBuffer[SHOW_DATA+5], adcBuffer[SHOW_DATA+6], adcBuffer[SHOW_DATA+7], adcBuffer[SHOW_DATA+8], adcBuffer[SHOW_DATA+9],
			  adcBuffer[SHOW_DATA+10], adcBuffer[SHOW_DATA+11], adcBuffer[SHOW_DATA+12], adcBuffer[SHOW_DATA+13], adcBuffer[SHOW_DATA+14],
			  adcBuffer[SHOW_DATA+15], adcBuffer[SHOW_DATA+16], adcBuffer[SHOW_DATA+17], adcBuffer[SHOW_DATA+18], adcBuffer[SHOW_DATA+19]);
			  */
	  if (readyData) {
 800042e:	4b2a      	ldr	r3, [pc, #168]	; (80004d8 <main+0x160>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0fb      	beq.n	800042e <main+0xb6>
		  uint16_t cnt = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
		  for (int i = 0; i < CONVERSION_COUNT; i++) {
 800043c:	2300      	movs	r3, #0
 800043e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000442:	e016      	b.n	8000472 <main+0xfa>
			  if (adcBuffer[i] == 0) {
 8000444:	4a1d      	ldr	r2, [pc, #116]	; (80004bc <main+0x144>)
 8000446:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800044a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d104      	bne.n	800045c <main+0xe4>
				  cnt++;
 8000452:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8000456:	3301      	adds	r3, #1
 8000458:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
			  }
			  adcBuffer[i] = 0;
 800045c:	4a17      	ldr	r2, [pc, #92]	; (80004bc <main+0x144>)
 800045e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000462:	2100      	movs	r1, #0
 8000464:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for (int i = 0; i < CONVERSION_COUNT; i++) {
 8000468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800046c:	3301      	adds	r3, #1
 800046e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000472:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000476:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800047a:	dbe3      	blt.n	8000444 <main+0xcc>
		  }
		  memset(SndBuffer, 0, sizeof(SndBuffer));
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	22c8      	movs	r2, #200	; 0xc8
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f006 fbea 	bl	8006c5c <memset>
		  sprintf(SndBuffer, "MAX: %u, MIN: %u, CNT: %u\r", maxLevel, minLevel, cnt);
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <main+0x164>)
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <main+0x168>)
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	4619      	mov	r1, r3
 8000494:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8000498:	1d38      	adds	r0, r7, #4
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	460b      	mov	r3, r1
 800049e:	4911      	ldr	r1, [pc, #68]	; (80004e4 <main+0x16c>)
 80004a0:	f006 fbe4 	bl	8006c6c <siprintf>
	  	  HAL_UART_Transmit(&huart1, (uint8_t *) SndBuffer, sizeof(SndBuffer), 1000);
 80004a4:	1d39      	adds	r1, r7, #4
 80004a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004aa:	22c8      	movs	r2, #200	; 0xc8
 80004ac:	4809      	ldr	r0, [pc, #36]	; (80004d4 <main+0x15c>)
 80004ae:	f005 ff39 	bl	8006324 <HAL_UART_Transmit>
	  	  readyData = false;
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <main+0x160>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	  if (readyData) {
 80004b8:	e7b9      	b.n	800042e <main+0xb6>
 80004ba:	bf00      	nop
 80004bc:	2000009c 	.word	0x2000009c
 80004c0:	48000400 	.word	0x48000400
 80004c4:	20000420 	.word	0x20000420
 80004c8:	200004c4 	.word	0x200004c4
 80004cc:	20000514 	.word	0x20000514
 80004d0:	080074e0 	.word	0x080074e0
 80004d4:	20000564 	.word	0x20000564
 80004d8:	200004c0 	.word	0x200004c0
 80004dc:	2000009a 	.word	0x2000009a
 80004e0:	20000098 	.word	0x20000098
 80004e4:	080074f8 	.word	0x080074f8

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09e      	sub	sp, #120	; 0x78
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f006 fbb0 	bl	8006c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	223c      	movs	r2, #60	; 0x3c
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f006 fba2 	bl	8006c5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000518:	2303      	movs	r3, #3
 800051a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000520:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000522:	2301      	movs	r3, #1
 8000524:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000526:	2301      	movs	r3, #1
 8000528:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800052a:	2310      	movs	r3, #16
 800052c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000536:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000538:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800053c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000542:	4618      	mov	r0, r3
 8000544:	f002 ff50 	bl	80033e8 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800054e:	f000 fbcb 	bl	8000ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2302      	movs	r3, #2
 8000558:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800055e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000568:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800056a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800056e:	2102      	movs	r1, #2
 8000570:	4618      	mov	r0, r3
 8000572:	f003 fe41 	bl	80041f8 <HAL_RCC_ClockConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800057c:	f000 fbb4 	bl	8000ce8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000580:	f241 03a3 	movw	r3, #4259	; 0x10a3
 8000584:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800058e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000598:	2300      	movs	r3, #0
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059c:	463b      	mov	r3, r7
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 f862 	bl	8004668 <HAL_RCCEx_PeriphCLKConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005aa:	f000 fb9d 	bl	8000ce8 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3778      	adds	r7, #120	; 0x78
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
 80005d8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005da:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <MX_ADC1_Init+0xe0>)
 80005dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005e2:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <MX_ADC1_Init+0xe0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e8:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <MX_ADC1_Init+0xe0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <MX_ADC1_Init+0xe0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <MX_ADC1_Init+0xe0>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fa:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MX_ADC1_Init+0xe0>)
 8000604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000608:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_ADC1_Init+0xe0>)
 800060c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_ADC1_Init+0xe0>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_ADC1_Init+0xe0>)
 800061a:	2201      	movs	r2, #1
 800061c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_ADC1_Init+0xe0>)
 8000620:	2201      	movs	r2, #1
 8000622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_ADC1_Init+0xe0>)
 8000628:	2204      	movs	r2, #4
 800062a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_ADC1_Init+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_ADC1_Init+0xe0>)
 8000634:	2200      	movs	r2, #0
 8000636:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	4817      	ldr	r0, [pc, #92]	; (8000698 <MX_ADC1_Init+0xe0>)
 800063a:	f000 ff8b 	bl	8001554 <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000644:	f000 fb50 	bl	8000ce8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	4811      	ldr	r0, [pc, #68]	; (8000698 <MX_ADC1_Init+0xe0>)
 8000654:	f001 fe3a 	bl	80022cc <HAL_ADCEx_MultiModeConfigChannel>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800065e:	f000 fb43 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000662:	2301      	movs	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000666:	2301      	movs	r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800066e:	2304      	movs	r3, #4
 8000670:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <MX_ADC1_Init+0xe0>)
 8000680:	f001 fb38 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800068a:	f000 fb2d 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000514 	.word	0x20000514

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_I2C1_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_I2C1_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_I2C1_Init+0x74>)
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MX_I2C1_Init+0x7c>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_I2C1_Init+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_I2C1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_I2C1_Init+0x74>)
 80006d8:	f002 fd60 	bl	800319c <HAL_I2C_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006e2:	f000 fb01 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ea:	f002 fde6 	bl	80032ba <HAL_I2CEx_ConfigAnalogFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 faf8 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_I2C1_Init+0x74>)
 80006fc:	f002 fe28 	bl	8003350 <HAL_I2CEx_ConfigDigitalFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 faef 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000046c 	.word	0x2000046c
 8000714:	40005400 	.word	0x40005400
 8000718:	2000090e 	.word	0x2000090e

0800071c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_SPI2_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_SPI2_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_SPI2_Init+0x74>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_SPI2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI2_Init+0x74>)
 8000736:	f44f 7240 	mov.w	r2, #768	; 0x300
 800073a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_SPI2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI2_Init+0x74>)
 800074a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800074e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI2_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI2_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SPI2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI2_Init+0x74>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SPI2_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI2_Init+0x74>)
 8000776:	2208      	movs	r2, #8
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_SPI2_Init+0x74>)
 800077c:	f004 f924 	bl	80049c8 <HAL_SPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 faaf 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200003bc 	.word	0x200003bc
 8000794:	40003800 	.word	0x40003800

08000798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b096      	sub	sp, #88	; 0x58
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
 80007ba:	615a      	str	r2, [r3, #20]
 80007bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	222c      	movs	r2, #44	; 0x2c
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 fa49 	bl	8006c5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <MX_TIM1_Init+0x170>)
 80007cc:	4a4f      	ldr	r2, [pc, #316]	; (800090c <MX_TIM1_Init+0x174>)
 80007ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007d0:	4b4d      	ldr	r3, [pc, #308]	; (8000908 <MX_TIM1_Init+0x170>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <MX_TIM1_Init+0x170>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 179;
 80007dc:	4b4a      	ldr	r3, [pc, #296]	; (8000908 <MX_TIM1_Init+0x170>)
 80007de:	22b3      	movs	r2, #179	; 0xb3
 80007e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b49      	ldr	r3, [pc, #292]	; (8000908 <MX_TIM1_Init+0x170>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 13;
 80007e8:	4b47      	ldr	r3, [pc, #284]	; (8000908 <MX_TIM1_Init+0x170>)
 80007ea:	220d      	movs	r2, #13
 80007ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b46      	ldr	r3, [pc, #280]	; (8000908 <MX_TIM1_Init+0x170>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80007f4:	4844      	ldr	r0, [pc, #272]	; (8000908 <MX_TIM1_Init+0x170>)
 80007f6:	f004 fa53 	bl	8004ca0 <HAL_TIM_OC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000800:	f000 fa72 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000804:	2108      	movs	r1, #8
 8000806:	4840      	ldr	r0, [pc, #256]	; (8000908 <MX_TIM1_Init+0x170>)
 8000808:	f004 fc38 	bl	800507c <HAL_TIM_OnePulse_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000812:	f000 fa69 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000816:	2320      	movs	r3, #32
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000822:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000826:	4619      	mov	r1, r3
 8000828:	4837      	ldr	r0, [pc, #220]	; (8000908 <MX_TIM1_Init+0x170>)
 800082a:	f005 fc11 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000834:	f000 fa58 	bl	8000ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000838:	2330      	movs	r3, #48	; 0x30
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	482a      	ldr	r0, [pc, #168]	; (8000908 <MX_TIM1_Init+0x170>)
 800085e:	f004 fd87 	bl	8005370 <HAL_TIM_OC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000868:	f000 fa3e 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000870:	2204      	movs	r2, #4
 8000872:	4619      	mov	r1, r3
 8000874:	4824      	ldr	r0, [pc, #144]	; (8000908 <MX_TIM1_Init+0x170>)
 8000876:	f004 fd7b 	bl	8005370 <HAL_TIM_OC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000880:	f000 fa32 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000888:	2208      	movs	r2, #8
 800088a:	4619      	mov	r1, r3
 800088c:	481e      	ldr	r0, [pc, #120]	; (8000908 <MX_TIM1_Init+0x170>)
 800088e:	f004 fd6f 	bl	8005370 <HAL_TIM_OC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000898:	f000 fa26 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800089c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a0:	220c      	movs	r2, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	4818      	ldr	r0, [pc, #96]	; (8000908 <MX_TIM1_Init+0x170>)
 80008a6:	f004 fd63 	bl	8005370 <HAL_TIM_OC_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80008b0:	f000 fa1a 	bl	8000ce8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <MX_TIM1_Init+0x170>)
 80008ea:	f005 fc31 	bl	8006150 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80008f4:	f000 f9f8 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <MX_TIM1_Init+0x170>)
 80008fa:	f000 fb73 	bl	8000fe4 <HAL_TIM_MspPostInit>

}
 80008fe:	bf00      	nop
 8000900:	3758      	adds	r7, #88	; 0x58
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000630 	.word	0x20000630
 800090c:	40012c00 	.word	0x40012c00

08000910 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000952:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <MX_TIM3_Init+0x130>)
 8000954:	4a3b      	ldr	r2, [pc, #236]	; (8000a44 <MX_TIM3_Init+0x134>)
 8000956:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000958:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <MX_TIM3_Init+0x130>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <MX_TIM3_Init+0x130>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39000;
 8000964:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <MX_TIM3_Init+0x130>)
 8000966:	f649 0258 	movw	r2, #39000	; 0x9858
 800096a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <MX_TIM3_Init+0x130>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000972:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <MX_TIM3_Init+0x130>)
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000978:	4831      	ldr	r0, [pc, #196]	; (8000a40 <MX_TIM3_Init+0x130>)
 800097a:	f004 f8d0 	bl	8004b1e <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000984:	f000 f9b0 	bl	8000ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800098e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000992:	4619      	mov	r1, r3
 8000994:	482a      	ldr	r0, [pc, #168]	; (8000a40 <MX_TIM3_Init+0x130>)
 8000996:	f004 fd65 	bl	8005464 <HAL_TIM_ConfigClockSource>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009a0:	f000 f9a2 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80009a4:	4826      	ldr	r0, [pc, #152]	; (8000a40 <MX_TIM3_Init+0x130>)
 80009a6:	f004 f97b 	bl	8004ca0 <HAL_TIM_OC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80009b0:	f000 f99a 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80009b4:	2108      	movs	r1, #8
 80009b6:	4822      	ldr	r0, [pc, #136]	; (8000a40 <MX_TIM3_Init+0x130>)
 80009b8:	f004 fb60 	bl	800507c <HAL_TIM_OnePulse_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80009c2:	f000 f991 	bl	8000ce8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009c6:	2306      	movs	r3, #6
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80009ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d2:	4619      	mov	r1, r3
 80009d4:	481a      	ldr	r0, [pc, #104]	; (8000a40 <MX_TIM3_Init+0x130>)
 80009d6:	f004 fe0e 	bl	80055f6 <HAL_TIM_SlaveConfigSynchro>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80009e0:	f000 f982 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009e4:	2320      	movs	r3, #32
 80009e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4619      	mov	r1, r3
 80009f2:	4813      	ldr	r0, [pc, #76]	; (8000a40 <MX_TIM3_Init+0x130>)
 80009f4:	f005 fb2c 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80009fe:	f000 f973 	bl	8000ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000a02:	2310      	movs	r3, #16
 8000a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <MX_TIM3_Init+0x130>)
 8000a1a:	f004 fca9 	bl	8005370 <HAL_TIM_OC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000a24:	f000 f960 	bl	8000ce8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <MX_TIM3_Init+0x130>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	699a      	ldr	r2, [r3, #24]
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <MX_TIM3_Init+0x130>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f042 0208 	orr.w	r2, r2, #8
 8000a36:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3750      	adds	r7, #80	; 0x50
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200004c4 	.word	0x200004c4
 8000a44:	40000400 	.word	0x40000400

08000a48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <MX_TIM4_Init+0x98>)
 8000a6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a6e:	2206      	movs	r2, #6
 8000a70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a8c:	4813      	ldr	r0, [pc, #76]	; (8000adc <MX_TIM4_Init+0x94>)
 8000a8e:	f004 f846 	bl	8004b1e <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a98:	f000 f926 	bl	8000ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_TIM4_Init+0x94>)
 8000aaa:	f004 fcdb 	bl	8005464 <HAL_TIM_ConfigClockSource>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ab4:	f000 f918 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_TIM4_Init+0x94>)
 8000ac6:	f005 fac3 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 f90a 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000420 	.word	0x20000420
 8000ae0:	40000800 	.word	0x40000800

08000ae4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <MX_USART1_UART_Init+0x5c>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USART1_UART_Init+0x58>)
 8000b28:	f005 fbae 	bl	8006288 <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b32:	f000 f8d9 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000564 	.word	0x20000564
 8000b40:	40013800 	.word	0x40013800

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART2_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b88:	f005 fb7e 	bl	8006288 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 f8a9 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000067c 	.word	0x2000067c
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_DMA_Init+0x38>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <MX_DMA_Init+0x38>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_DMA_Init+0x38>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f001 ff33 	bl	8002a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bcc:	200b      	movs	r0, #11
 8000bce:	f001 ff4c 	bl	8002a6a <HAL_NVIC_EnableIRQ>

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a38      	ldr	r2, [pc, #224]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000bfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c00:	6153      	str	r3, [r2, #20]
 8000c02:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a32      	ldr	r2, [pc, #200]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a2c      	ldr	r2, [pc, #176]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <MX_GPIO_Init+0xfc>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS1_Pin|CS2_Pin|CS3_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c5c:	4820      	ldr	r0, [pc, #128]	; (8000ce0 <MX_GPIO_Init+0x100>)
 8000c5e:	f002 fa85 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INC_Pin|UD_Pin|LED_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2170      	movs	r1, #112	; 0x70
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f002 fa7f 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z1Sel_Pin|Z2Sel_Pin|Z3Sel_Pin|Z4Sel_Pin
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f640 4127 	movw	r1, #3111	; 0xc27
 8000c74:	481b      	ldr	r0, [pc, #108]	; (8000ce4 <MX_GPIO_Init+0x104>)
 8000c76:	f002 fa79 	bl	800316c <HAL_GPIO_WritePin>
                          |EthRst_Pin|CS4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS1_Pin CS2_Pin CS3_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|CS3_Pin;
 8000c7a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <MX_GPIO_Init+0x100>)
 8000c94:	f002 f8f0 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin UD_Pin LED_Pin */
  GPIO_InitStruct.Pin = INC_Pin|UD_Pin|LED_Pin;
 8000c98:	2370      	movs	r3, #112	; 0x70
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f002 f8e1 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z1Sel_Pin Z2Sel_Pin Z3Sel_Pin Z4Sel_Pin
                           EthRst_Pin CS4_Pin */
  GPIO_InitStruct.Pin = Z1Sel_Pin|Z2Sel_Pin|Z3Sel_Pin|Z4Sel_Pin
 8000cb6:	f640 4327 	movw	r3, #3111	; 0xc27
 8000cba:	617b      	str	r3, [r7, #20]
                          |EthRst_Pin|CS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_GPIO_Init+0x104>)
 8000cd0:	f002 f8d2 	bl	8002e78 <HAL_GPIO_Init>

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_MspInit+0x44>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_MspInit+0x44>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_MspInit+0x44>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_MspInit+0x44>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x44>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x44>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d5c:	d14d      	bne.n	8000dfa <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d5e:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <HAL_ADC_MspInit+0xc8>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	4a28      	ldr	r2, [pc, #160]	; (8000e04 <HAL_ADC_MspInit+0xc8>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6153      	str	r3, [r2, #20]
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <HAL_ADC_MspInit+0xc8>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <HAL_ADC_MspInit+0xc8>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_ADC_MspInit+0xc8>)
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_ADC_MspInit+0xc8>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AnIn1_Pin;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d92:	2303      	movs	r3, #3
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AnIn1_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f002 f868 	bl	8002e78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <HAL_ADC_MspInit+0xd0>)
 8000dac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000dd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ddc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dde:	480a      	ldr	r0, [pc, #40]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000de0:	f001 fe5d 	bl	8002a9e <HAL_DMA_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000dea:	f7ff ff7d 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000df2:	639a      	str	r2, [r3, #56]	; 0x38
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_ADC_MspInit+0xcc>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	200005ec 	.word	0x200005ec
 8000e0c:	40020008 	.word	0x40020008

08000e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_I2C_MspInit+0x7c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d128      	bne.n	8000e84 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e50:	2312      	movs	r3, #18
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	480b      	ldr	r0, [pc, #44]	; (8000e94 <HAL_I2C_MspInit+0x84>)
 8000e68:	f002 f806 	bl	8002e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e76:	61d3      	str	r3, [r2, #28]
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_I2C_MspInit+0x80>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400

08000e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <HAL_SPI_MspInit+0x7c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d128      	bne.n	8000f0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6153      	str	r3, [r2, #20]
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_SPI_MspInit+0x80>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000eea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000efc:	2305      	movs	r3, #5
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_SPI_MspInit+0x84>)
 8000f08:	f001 ffb6 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40003800 	.word	0x40003800
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000400 	.word	0x48000400

08000f20 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_TIM_OC_MspInit+0x38>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10b      	bne.n	8000f4a <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_TIM_OC_MspInit+0x3c>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_TIM_OC_MspInit+0x3c>)
 8000f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_TIM_OC_MspInit+0x3c>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40012c00 	.word	0x40012c00
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d114      	bne.n	8000f9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	201d      	movs	r0, #29
 8000f90:	f001 fd4f 	bl	8002a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f94:	201d      	movs	r0, #29
 8000f96:	f001 fd68 	bl	8002a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f9a:	e018      	b.n	8000fce <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <HAL_TIM_Base_MspInit+0x80>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d113      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	201e      	movs	r0, #30
 8000fc4:	f001 fd35 	bl	8002a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fc8:	201e      	movs	r0, #30
 8000fca:	f001 fd4e 	bl	8002a6a <HAL_NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40000800 	.word	0x40000800

08000fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <HAL_TIM_MspPostInit+0x8c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12f      	bne.n	8001066 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_TIM_MspPostInit+0x90>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <HAL_TIM_MspPostInit+0x90>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_TIM_MspPostInit+0x90>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Z1_Pin|Z2_Pin|Z3_Pin;
 800101e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001022:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001030:	2306      	movs	r3, #6
 8001032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f001 ff1b 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Z4_Pin;
 8001042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001046:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 8001054:	230b      	movs	r3, #11
 8001056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Z4_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f001 ff09 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40012c00 	.word	0x40012c00
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	; 0x30
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a2e      	ldr	r2, [pc, #184]	; (8001150 <HAL_UART_MspInit+0xd8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d128      	bne.n	80010ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_UART_MspInit+0xdc>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a2d      	ldr	r2, [pc, #180]	; (8001154 <HAL_UART_MspInit+0xdc>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_UART_MspInit+0xdc>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <HAL_UART_MspInit+0xdc>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a27      	ldr	r2, [pc, #156]	; (8001154 <HAL_UART_MspInit+0xdc>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_UART_MspInit+0xdc>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ca:	23c0      	movs	r3, #192	; 0xc0
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010da:	2307      	movs	r3, #7
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	481c      	ldr	r0, [pc, #112]	; (8001158 <HAL_UART_MspInit+0xe0>)
 80010e6:	f001 fec7 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ea:	e02c      	b.n	8001146 <HAL_UART_MspInit+0xce>
  else if(huart->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <HAL_UART_MspInit+0xe4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d127      	bne.n	8001146 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_UART_MspInit+0xdc>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <HAL_UART_MspInit+0xdc>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_UART_MspInit+0xdc>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_UART_MspInit+0xdc>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_UART_MspInit+0xdc>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_UART_MspInit+0xdc>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001126:	2318      	movs	r3, #24
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001136:	2307      	movs	r3, #7
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <HAL_UART_MspInit+0xe0>)
 8001142:	f001 fe99 	bl	8002e78 <HAL_GPIO_Init>
}
 8001146:	bf00      	nop
 8001148:	3730      	adds	r7, #48	; 0x30
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40013800 	.word	0x40013800
 8001154:	40021000 	.word	0x40021000
 8001158:	48000400 	.word	0x48000400
 800115c:	40004400 	.word	0x40004400

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f994 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	LED_PULSE
 80011ba:	2201      	movs	r2, #1
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f001 ffd3 	bl	800316c <HAL_GPIO_WritePin>
 80011c6:	2200      	movs	r2, #0
 80011c8:	2140      	movs	r1, #64	; 0x40
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ce:	f001 ffcd 	bl	800316c <HAL_GPIO_WritePin>
	HAL_ADC_Stop_DMA(&hadc1);
 80011d2:	4841      	ldr	r0, [pc, #260]	; (80012d8 <DMA1_Channel1_IRQHandler+0x124>)
 80011d4:	f000 fcba 	bl	8001b4c <HAL_ADC_Stop_DMA>
	if (ajustCount++ > SPEED_AJUST) {
 80011d8:	4b40      	ldr	r3, [pc, #256]	; (80012dc <DMA1_Channel1_IRQHandler+0x128>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	b291      	uxth	r1, r2
 80011e0:	4a3e      	ldr	r2, [pc, #248]	; (80012dc <DMA1_Channel1_IRQHandler+0x128>)
 80011e2:	8011      	strh	r1, [r2, #0]
 80011e4:	2b0a      	cmp	r3, #10
 80011e6:	d970      	bls.n	80012ca <DMA1_Channel1_IRQHandler+0x116>
		ajustCount = 0;
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <DMA1_Channel1_IRQHandler+0x128>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	801a      	strh	r2, [r3, #0]
		maxLevel = 0, minLevel = 4096;
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <DMA1_Channel1_IRQHandler+0x12c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	801a      	strh	r2, [r3, #0]
 80011f4:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <DMA1_Channel1_IRQHandler+0x130>)
 80011f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011fa:	801a      	strh	r2, [r3, #0]
		for (int ii = 0; ii < CONVERSION_COUNT / 2; ii++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	e01e      	b.n	8001240 <DMA1_Channel1_IRQHandler+0x8c>
			if (maxLevel < adcBuffer[ii]) {
 8001202:	4a39      	ldr	r2, [pc, #228]	; (80012e8 <DMA1_Channel1_IRQHandler+0x134>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800120a:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <DMA1_Channel1_IRQHandler+0x12c>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d905      	bls.n	800121e <DMA1_Channel1_IRQHandler+0x6a>
				maxLevel = adcBuffer[ii];
 8001212:	4a35      	ldr	r2, [pc, #212]	; (80012e8 <DMA1_Channel1_IRQHandler+0x134>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <DMA1_Channel1_IRQHandler+0x12c>)
 800121c:	801a      	strh	r2, [r3, #0]
			}
			if (minLevel > adcBuffer[ii]) {
 800121e:	4a32      	ldr	r2, [pc, #200]	; (80012e8 <DMA1_Channel1_IRQHandler+0x134>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <DMA1_Channel1_IRQHandler+0x130>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d205      	bcs.n	800123a <DMA1_Channel1_IRQHandler+0x86>
				minLevel = adcBuffer[ii];
 800122e:	4a2e      	ldr	r2, [pc, #184]	; (80012e8 <DMA1_Channel1_IRQHandler+0x134>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <DMA1_Channel1_IRQHandler+0x130>)
 8001238:	801a      	strh	r2, [r3, #0]
		for (int ii = 0; ii < CONVERSION_COUNT / 2; ii++) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3301      	adds	r3, #1
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2bc7      	cmp	r3, #199	; 0xc7
 8001244:	dddd      	ble.n	8001202 <DMA1_Channel1_IRQHandler+0x4e>
			}
		}

		if (abs(minLevel - AVG_LEVEL) > abs(maxLevel - AVG_LEVEL)) {
 8001246:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <DMA1_Channel1_IRQHandler+0x130>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 800124e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001252:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <DMA1_Channel1_IRQHandler+0x12c>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 800125e:	2b00      	cmp	r3, #0
 8001260:	bfb8      	it	lt
 8001262:	425b      	neglt	r3, r3
 8001264:	429a      	cmp	r2, r3
 8001266:	dd0a      	ble.n	800127e <DMA1_Channel1_IRQHandler+0xca>
			maxLevel = abs(minLevel - AVG_LEVEL);
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <DMA1_Channel1_IRQHandler+0x130>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 8001270:	2b00      	cmp	r3, #0
 8001272:	bfb8      	it	lt
 8001274:	425b      	neglt	r3, r3
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <DMA1_Channel1_IRQHandler+0x12c>)
 800127a:	801a      	strh	r2, [r3, #0]
 800127c:	e009      	b.n	8001292 <DMA1_Channel1_IRQHandler+0xde>
		} else {
			maxLevel = abs(maxLevel - AVG_LEVEL);
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <DMA1_Channel1_IRQHandler+0x12c>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	f2a3 73b2 	subw	r3, r3, #1970	; 0x7b2
 8001286:	2b00      	cmp	r3, #0
 8001288:	bfb8      	it	lt
 800128a:	425b      	neglt	r3, r3
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <DMA1_Channel1_IRQHandler+0x12c>)
 8001290:	801a      	strh	r2, [r3, #0]
		}
		if (abs(maxLevel - NOMINAL_LEVEL) > ACURAGY_LEVEL) {
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <DMA1_Channel1_IRQHandler+0x12c>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800129a:	2b00      	cmp	r3, #0
 800129c:	bfb8      	it	lt
 800129e:	425b      	neglt	r3, r3
 80012a0:	2b32      	cmp	r3, #50	; 0x32
 80012a2:	dd0f      	ble.n	80012c4 <DMA1_Channel1_IRQHandler+0x110>
			if (maxLevel - NOMINAL_LEVEL > 0) {
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <DMA1_Channel1_IRQHandler+0x12c>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80012ac:	d905      	bls.n	80012ba <DMA1_Channel1_IRQHandler+0x106>
				//LED_PULSE
				levelUp(0, 1, DOWN);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7fe ffdc 	bl	8000270 <levelUp>
 80012b8:	e004      	b.n	80012c4 <DMA1_Channel1_IRQHandler+0x110>
			} else {
				//LED_PULSE
				levelUp(0, 1, UP);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2101      	movs	r1, #1
 80012be:	2000      	movs	r0, #0
 80012c0:	f7fe ffd6 	bl	8000270 <levelUp>
			}
		}
		readyData = true;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <DMA1_Channel1_IRQHandler+0x138>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012ca:	4809      	ldr	r0, [pc, #36]	; (80012f0 <DMA1_Channel1_IRQHandler+0x13c>)
 80012cc:	f001 fcc6 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000514 	.word	0x20000514
 80012dc:	20000510 	.word	0x20000510
 80012e0:	2000009a 	.word	0x2000009a
 80012e4:	20000098 	.word	0x20000098
 80012e8:	2000009c 	.word	0x2000009c
 80012ec:	200004c0 	.word	0x200004c0
 80012f0:	200005ec 	.word	0x200005ec

080012f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LED_PULSE
 80012f8:	2201      	movs	r2, #1
 80012fa:	2140      	movs	r1, #64	; 0x40
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001300:	f001 ff34 	bl	800316c <HAL_GPIO_WritePin>
 8001304:	2200      	movs	r2, #0
 8001306:	2140      	movs	r1, #64	; 0x40
 8001308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130c:	f001 ff2e 	bl	800316c <HAL_GPIO_WritePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM3_IRQHandler+0x28>)
 8001312:	f003 ff0d 	bl	8005130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200004c4 	.word	0x200004c4

08001320 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_TIM_OC_Stop(&htim1, TIM_CHANNEL_1);
 8001324:	2100      	movs	r1, #0
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <TIM4_IRQHandler+0x34>)
 8001328:	f003 fe12 	bl	8004f50 <HAL_TIM_OC_Stop>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800132c:	2100      	movs	r1, #0
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <TIM4_IRQHandler+0x34>)
 8001330:	f003 fd0e 	bl	8004d50 <HAL_TIM_OC_Start>
	HAL_GPIO_WritePin(Z1Sel_GPIO_Port, Z1Sel_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2101      	movs	r1, #1
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <TIM4_IRQHandler+0x38>)
 800133a:	f001 ff17 	bl	800316c <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, CONVERSION_COUNT);
 800133e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001342:	4906      	ldr	r1, [pc, #24]	; (800135c <TIM4_IRQHandler+0x3c>)
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <TIM4_IRQHandler+0x40>)
 8001346:	f000 fae5 	bl	8001914 <HAL_ADC_Start_DMA>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <TIM4_IRQHandler+0x44>)
 800134c:	f003 fef0 	bl	8005130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000630 	.word	0x20000630
 8001358:	48000400 	.word	0x48000400
 800135c:	2000009c 	.word	0x2000009c
 8001360:	20000514 	.word	0x20000514
 8001364:	20000420 	.word	0x20000420

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f005 fc36 	bl	8006c08 <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000a000 	.word	0x2000a000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	2000008c 	.word	0x2000008c
 80013d0:	20000718 	.word	0x20000718

080013d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SystemInit+0x20>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <SystemInit+0x20>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013fc:	f7ff ffea 	bl	80013d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <LoopForever+0x6>)
  ldr r1, =_edata
 8001402:	490d      	ldr	r1, [pc, #52]	; (8001438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <LoopForever+0xe>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001408:	e002      	b.n	8001410 <LoopCopyDataInit>

0800140a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800140c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140e:	3304      	adds	r3, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001414:	d3f9      	bcc.n	800140a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001418:	4c0a      	ldr	r4, [pc, #40]	; (8001444 <LoopForever+0x16>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800141c:	e001      	b.n	8001422 <LoopFillZerobss>

0800141e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001420:	3204      	adds	r2, #4

08001422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001424:	d3fb      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001426:	f005 fbf5 	bl	8006c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800142a:	f7fe ffa5 	bl	8000378 <main>

0800142e <LoopForever>:

LoopForever:
    b LoopForever
 800142e:	e7fe      	b.n	800142e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001430:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800143c:	08007588 	.word	0x08007588
  ldr r2, =_sbss
 8001440:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001444:	20000718 	.word	0x20000718

08001448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC1_2_IRQHandler>
	...

0800144c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_Init+0x28>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_Init+0x28>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f001 fadd 	bl	8002a1c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f808 	bl	8001478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff fc44 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40022000 	.word	0x40022000

08001478 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x54>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f001 faf5 	bl	8002a86 <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b4:	f001 fabd 	bl	8002a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_InitTick+0x5c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000704 	.word	0x20000704

08001500 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;  
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000704 	.word	0x20000704

08001518 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b09a      	sub	sp, #104	; 0x68
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e1c9      	b.n	8001908 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d176      	bne.n	8001674 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d152      	bne.n	8001634 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fbc7 	bl	8000d3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d13b      	bne.n	8001634 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f001 f841 	bl	8002644 <ADC_Disable>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d12f      	bne.n	8001634 <HAL_ADC_Init+0xe0>
 80015d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d12b      	bne.n	8001634 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015e4:	f023 0302 	bic.w	r3, r3, #2
 80015e8:	f043 0202 	orr.w	r2, r3, #2
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015fe:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800160e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001610:	4b86      	ldr	r3, [pc, #536]	; (800182c <HAL_ADC_Init+0x2d8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a86      	ldr	r2, [pc, #536]	; (8001830 <HAL_ADC_Init+0x2dc>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0c9a      	lsrs	r2, r3, #18
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001626:	e002      	b.n	800162e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3b01      	subs	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f9      	bne.n	8001628 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800164c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001650:	d110      	bne.n	8001674 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f023 0312 	bic.w	r3, r3, #18
 800165a:	f043 0210 	orr.w	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	f040 8136 	bne.w	80018ee <HAL_ADC_Init+0x39a>
 8001682:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 8131 	bne.w	80018ee <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 8129 	bne.w	80018ee <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016a4:	f043 0202 	orr.w	r2, r3, #2
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b4:	d004      	beq.n	80016c0 <HAL_ADC_Init+0x16c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a5e      	ldr	r2, [pc, #376]	; (8001834 <HAL_ADC_Init+0x2e0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d101      	bne.n	80016c4 <HAL_ADC_Init+0x170>
 80016c0:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HAL_ADC_Init+0x2e4>)
 80016c2:	e000      	b.n	80016c6 <HAL_ADC_Init+0x172>
 80016c4:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_ADC_Init+0x2e8>)
 80016c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d0:	d102      	bne.n	80016d8 <HAL_ADC_Init+0x184>
 80016d2:	4b58      	ldr	r3, [pc, #352]	; (8001834 <HAL_ADC_Init+0x2e0>)
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	e01a      	b.n	800170e <HAL_ADC_Init+0x1ba>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a55      	ldr	r2, [pc, #340]	; (8001834 <HAL_ADC_Init+0x2e0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d103      	bne.n	80016ea <HAL_ADC_Init+0x196>
 80016e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e011      	b.n	800170e <HAL_ADC_Init+0x1ba>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a54      	ldr	r2, [pc, #336]	; (8001840 <HAL_ADC_Init+0x2ec>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d102      	bne.n	80016fa <HAL_ADC_Init+0x1a6>
 80016f4:	4b53      	ldr	r3, [pc, #332]	; (8001844 <HAL_ADC_Init+0x2f0>)
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e009      	b.n	800170e <HAL_ADC_Init+0x1ba>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a51      	ldr	r2, [pc, #324]	; (8001844 <HAL_ADC_Init+0x2f0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d102      	bne.n	800170a <HAL_ADC_Init+0x1b6>
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_ADC_Init+0x2ec>)
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e001      	b.n	800170e <HAL_ADC_Init+0x1ba>
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_ADC_Init+0x1da>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x1da>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_ADC_Init+0x1dc>
 800172e:	2300      	movs	r3, #0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d11c      	bne.n	800176e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001734:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001736:	2b00      	cmp	r3, #0
 8001738:	d010      	beq.n	800175c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_ADC_Init+0x202>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Init+0x202>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_ADC_Init+0x204>
 8001756:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001758:	2b00      	cmp	r3, #0
 800175a:	d108      	bne.n	800176e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800175c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	431a      	orrs	r2, r3
 800176a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800176c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7e5b      	ldrb	r3, [r3, #25]
 8001772:	035b      	lsls	r3, r3, #13
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001778:	2a01      	cmp	r2, #1
 800177a:	d002      	beq.n	8001782 <HAL_ADC_Init+0x22e>
 800177c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001780:	e000      	b.n	8001784 <HAL_ADC_Init+0x230>
 8001782:	2200      	movs	r2, #0
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4313      	orrs	r3, r2
 8001792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001794:	4313      	orrs	r3, r2
 8001796:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d11b      	bne.n	80017da <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7e5b      	ldrb	r3, [r3, #25]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	3b01      	subs	r3, #1
 80017b0:	045a      	lsls	r2, r3, #17
 80017b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017b4:	4313      	orrs	r3, r2
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ba:	663b      	str	r3, [r7, #96]	; 0x60
 80017bc:	e00d      	b.n	80017da <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80017c6:	f043 0220 	orr.w	r2, r3, #32
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d03a      	beq.n	8001858 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a16      	ldr	r2, [pc, #88]	; (8001840 <HAL_ADC_Init+0x2ec>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d004      	beq.n	80017f6 <HAL_ADC_Init+0x2a2>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_ADC_Init+0x2f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d128      	bne.n	8001848 <HAL_ADC_Init+0x2f4>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80017fe:	d012      	beq.n	8001826 <HAL_ADC_Init+0x2d2>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001808:	d00a      	beq.n	8001820 <HAL_ADC_Init+0x2cc>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001812:	d002      	beq.n	800181a <HAL_ADC_Init+0x2c6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	e018      	b.n	800184c <HAL_ADC_Init+0x2f8>
 800181a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181e:	e015      	b.n	800184c <HAL_ADC_Init+0x2f8>
 8001820:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001824:	e012      	b.n	800184c <HAL_ADC_Init+0x2f8>
 8001826:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800182a:	e00f      	b.n	800184c <HAL_ADC_Init+0x2f8>
 800182c:	20000000 	.word	0x20000000
 8001830:	431bde83 	.word	0x431bde83
 8001834:	50000100 	.word	0x50000100
 8001838:	50000300 	.word	0x50000300
 800183c:	50000700 	.word	0x50000700
 8001840:	50000400 	.word	0x50000400
 8001844:	50000500 	.word	0x50000500
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001850:	4313      	orrs	r3, r2
 8001852:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001854:	4313      	orrs	r3, r2
 8001856:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	d114      	bne.n	8001890 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001874:	f023 0302 	bic.w	r3, r3, #2
 8001878:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7e1b      	ldrb	r3, [r3, #24]
 800187e:	039a      	lsls	r2, r3, #14
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4313      	orrs	r3, r2
 800188a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800188c:	4313      	orrs	r3, r2
 800188e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_ADC_Init+0x3bc>)
 8001898:	4013      	ands	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018a0:	430b      	orrs	r3, r1
 80018a2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10c      	bne.n	80018c6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f023 010f 	bic.w	r1, r3, #15
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	1e5a      	subs	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
 80018c4:	e007      	b.n	80018d6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 020f 	bic.w	r2, r2, #15
 80018d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f023 0303 	bic.w	r3, r3, #3
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
 80018ec:	e00a      	b.n	8001904 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f023 0312 	bic.w	r3, r3, #18
 80018f6:	f043 0210 	orr.w	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80018fe:	2301      	movs	r3, #1
 8001900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001904:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001908:	4618      	mov	r0, r3
 800190a:	3768      	adds	r7, #104	; 0x68
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	fff0c007 	.word	0xfff0c007

08001914 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 80f7 	bne.w	8001b22 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Start_DMA+0x2e>
 800193e:	2302      	movs	r3, #2
 8001940:	e0f2      	b.n	8001b28 <HAL_ADC_Start_DMA+0x214>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001952:	d004      	beq.n	800195e <HAL_ADC_Start_DMA+0x4a>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a75      	ldr	r2, [pc, #468]	; (8001b30 <HAL_ADC_Start_DMA+0x21c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d109      	bne.n	8001972 <HAL_ADC_Start_DMA+0x5e>
 800195e:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <HAL_ADC_Start_DMA+0x220>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e008      	b.n	8001984 <HAL_ADC_Start_DMA+0x70>
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <HAL_ADC_Start_DMA+0x224>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80c5 	beq.w	8001b14 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fdf6 	bl	800257c <ADC_Enable>
 8001990:	4603      	mov	r3, r0
 8001992:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 80b7 	bne.w	8001b0a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b8:	d004      	beq.n	80019c4 <HAL_ADC_Start_DMA+0xb0>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a5c      	ldr	r2, [pc, #368]	; (8001b30 <HAL_ADC_Start_DMA+0x21c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d106      	bne.n	80019d2 <HAL_ADC_Start_DMA+0xbe>
 80019c4:	4b5b      	ldr	r3, [pc, #364]	; (8001b34 <HAL_ADC_Start_DMA+0x220>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d010      	beq.n	80019f2 <HAL_ADC_Start_DMA+0xde>
 80019d0:	e005      	b.n	80019de <HAL_ADC_Start_DMA+0xca>
 80019d2:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_ADC_Start_DMA+0x224>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_ADC_Start_DMA+0xde>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e6:	d004      	beq.n	80019f2 <HAL_ADC_Start_DMA+0xde>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a53      	ldr	r2, [pc, #332]	; (8001b3c <HAL_ADC_Start_DMA+0x228>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d115      	bne.n	8001a1e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d036      	beq.n	8001a7a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a1c:	e02d      	b.n	8001a7a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a32:	d004      	beq.n	8001a3e <HAL_ADC_Start_DMA+0x12a>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <HAL_ADC_Start_DMA+0x21c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10a      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x140>
 8001a3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf14      	ite	ne
 8001a4c:	2301      	movne	r3, #1
 8001a4e:	2300      	moveq	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e008      	b.n	8001a66 <HAL_ADC_Start_DMA+0x152>
 8001a54:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <HAL_ADC_Start_DMA+0x228>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a86:	d106      	bne.n	8001a96 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f023 0206 	bic.w	r2, r3, #6
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
 8001a94:	e002      	b.n	8001a9c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa8:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <HAL_ADC_Start_DMA+0x22c>)
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab0:	4a24      	ldr	r2, [pc, #144]	; (8001b44 <HAL_ADC_Start_DMA+0x230>)
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab8:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_ADC_Start_DMA+0x234>)
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	221c      	movs	r2, #28
 8001ac2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0210 	orr.w	r2, r2, #16
 8001ad2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3340      	adds	r3, #64	; 0x40
 8001aee:	4619      	mov	r1, r3
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f001 f81a 	bl	8002b2c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0204 	orr.w	r2, r2, #4
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	e00d      	b.n	8001b26 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b12:	e008      	b.n	8001b26 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b20:	e001      	b.n	8001b26 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
 8001b24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	50000100 	.word	0x50000100
 8001b34:	50000300 	.word	0x50000300
 8001b38:	50000700 	.word	0x50000700
 8001b3c:	50000400 	.word	0x50000400
 8001b40:	080024b1 	.word	0x080024b1
 8001b44:	0800252b 	.word	0x0800252b
 8001b48:	08002547 	.word	0x08002547

08001b4c <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ADC_Stop_DMA+0x1a>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e050      	b.n	8001c08 <HAL_ADC_Stop_DMA+0xbc>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b6e:	216c      	movs	r1, #108	; 0x6c
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fdcd 	bl	8002710 <ADC_ConversionStop>
 8001b76:	4603      	mov	r3, r0
 8001b78:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d13e      	bne.n	8001bfe <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d10f      	bne.n	8001bbc <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 f822 	bl	8002bea <HAL_DMA_Abort>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0210 	bic.w	r2, r2, #16
 8001bca:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fd36 	bl	8002644 <ADC_Disable>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fd30 	bl	8002644 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_ADCEx_Calibration_Start+0x1c>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e05f      	b.n	8001cec <HAL_ADCEx_Calibration_Start+0xdc>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fd05 	bl	8002644 <ADC_Disable>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d14e      	bne.n	8001ce2 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001c58:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c6e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c7e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001c80:	f7ff fc3e 	bl	8001500 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c86:	e01c      	b.n	8001cc2 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c88:	f7ff fc3a 	bl	8001500 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b0a      	cmp	r3, #10
 8001c94:	d915      	bls.n	8001cc2 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f023 0312 	bic.w	r3, r3, #18
 8001cae:	f043 0210 	orr.w	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e014      	b.n	8001cec <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cd0:	d0da      	beq.n	8001c88 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f023 0303 	bic.w	r3, r3, #3
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b09b      	sub	sp, #108	; 0x6c
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x22>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e2cb      	b.n	80022ae <HAL_ADC_ConfigChannel+0x5ba>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 82af 	bne.w	800228c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d81c      	bhi.n	8001d70 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	461a      	mov	r2, r3
 8001d4a:	231f      	movs	r3, #31
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	4019      	ands	r1, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa00 f203 	lsl.w	r2, r0, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d6e:	e063      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b09      	cmp	r3, #9
 8001d76:	d81e      	bhi.n	8001db6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	3b1e      	subs	r3, #30
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	4019      	ands	r1, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	3b1e      	subs	r3, #30
 8001da8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34
 8001db4:	e040      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b0e      	cmp	r3, #14
 8001dbc:	d81e      	bhi.n	8001dfc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	3b3c      	subs	r3, #60	; 0x3c
 8001dd2:	221f      	movs	r2, #31
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4019      	ands	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	3b3c      	subs	r3, #60	; 0x3c
 8001dee:	fa00 f203 	lsl.w	r2, r0, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dfa:	e01d      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	3b5a      	subs	r3, #90	; 0x5a
 8001e10:	221f      	movs	r2, #31
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	4019      	ands	r1, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	3b5a      	subs	r3, #90	; 0x5a
 8001e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 80e5 	bne.w	8002012 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b09      	cmp	r3, #9
 8001e4e:	d91c      	bls.n	8001e8a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6999      	ldr	r1, [r3, #24]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b1e      	subs	r3, #30
 8001e62:	2207      	movs	r2, #7
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4019      	ands	r1, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6898      	ldr	r0, [r3, #8]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b1e      	subs	r3, #30
 8001e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	619a      	str	r2, [r3, #24]
 8001e88:	e019      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6959      	ldr	r1, [r3, #20]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	4019      	ands	r1, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6898      	ldr	r0, [r3, #8]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d84f      	bhi.n	8001f80 <HAL_ADC_ConfigChannel+0x28c>
 8001ee0:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee6:	bf00      	nop
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	08001f1b 	.word	0x08001f1b
 8001ef0:	08001f3d 	.word	0x08001f3d
 8001ef4:	08001f5f 	.word	0x08001f5f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001efe:	4b9f      	ldr	r3, [pc, #636]	; (800217c <HAL_ADC_ConfigChannel+0x488>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	0691      	lsls	r1, r2, #26
 8001f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f16:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f18:	e07e      	b.n	8002018 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f20:	4b96      	ldr	r3, [pc, #600]	; (800217c <HAL_ADC_ConfigChannel+0x488>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	0691      	lsls	r1, r2, #26
 8001f2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f38:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f3a:	e06d      	b.n	8002018 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f42:	4b8e      	ldr	r3, [pc, #568]	; (800217c <HAL_ADC_ConfigChannel+0x488>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	0691      	lsls	r1, r2, #26
 8001f4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f5c:	e05c      	b.n	8002018 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f64:	4b85      	ldr	r3, [pc, #532]	; (800217c <HAL_ADC_ConfigChannel+0x488>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	0691      	lsls	r1, r2, #26
 8001f6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f70:	430a      	orrs	r2, r1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f7c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f7e:	e04b      	b.n	8002018 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	069b      	lsls	r3, r3, #26
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d107      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	069b      	lsls	r3, r3, #26
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	069b      	lsls	r3, r3, #26
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d10a      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800200e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002010:	e001      	b.n	8002016 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002012:	bf00      	nop
 8002014:	e000      	b.n	8002018 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002016:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d108      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x344>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x344>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_ADC_ConfigChannel+0x346>
 8002038:	2300      	movs	r3, #0
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 8131 	bne.w	80022a2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d00f      	beq.n	8002068 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2201      	movs	r2, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	400a      	ands	r2, r1
 8002062:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002066:	e049      	b.n	80020fc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	409a      	lsls	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b09      	cmp	r3, #9
 8002088:	d91c      	bls.n	80020c4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6999      	ldr	r1, [r3, #24]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	3b1b      	subs	r3, #27
 800209c:	2207      	movs	r2, #7
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4019      	ands	r1, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6898      	ldr	r0, [r3, #8]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	3b1b      	subs	r3, #27
 80020b6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	619a      	str	r2, [r3, #24]
 80020c2:	e01b      	b.n	80020fc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6959      	ldr	r1, [r3, #20]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	2207      	movs	r2, #7
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	4019      	ands	r1, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6898      	ldr	r0, [r3, #8]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	fa00 f203 	lsl.w	r2, r0, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002104:	d004      	beq.n	8002110 <HAL_ADC_ConfigChannel+0x41c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_ADC_ConfigChannel+0x48c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x420>
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_ADC_ConfigChannel+0x490>)
 8002112:	e000      	b.n	8002116 <HAL_ADC_ConfigChannel+0x422>
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_ADC_ConfigChannel+0x494>)
 8002116:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b10      	cmp	r3, #16
 800211e:	d105      	bne.n	800212c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002130:	2b11      	cmp	r3, #17
 8002132:	d105      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002144:	2b12      	cmp	r3, #18
 8002146:	f040 80ac 	bne.w	80022a2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800214a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 80a5 	bne.w	80022a2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002160:	d102      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x474>
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_ADC_ConfigChannel+0x48c>)
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	e023      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x4bc>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_ADC_ConfigChannel+0x48c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10c      	bne.n	800218c <HAL_ADC_ConfigChannel+0x498>
 8002172:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e01a      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x4bc>
 800217a:	bf00      	nop
 800217c:	83fff000 	.word	0x83fff000
 8002180:	50000100 	.word	0x50000100
 8002184:	50000300 	.word	0x50000300
 8002188:	50000700 	.word	0x50000700
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a4a      	ldr	r2, [pc, #296]	; (80022bc <HAL_ADC_ConfigChannel+0x5c8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d102      	bne.n	800219c <HAL_ADC_ConfigChannel+0x4a8>
 8002196:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	e009      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x4bc>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <HAL_ADC_ConfigChannel+0x5cc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d102      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x4b8>
 80021a6:	4b45      	ldr	r3, [pc, #276]	; (80022bc <HAL_ADC_ConfigChannel+0x5c8>)
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	e001      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x4bc>
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x4dc>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x4dc>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x4de>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d150      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d107      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x504>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x504>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_ADC_ConfigChannel+0x506>
 80021f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d13c      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b10      	cmp	r3, #16
 8002204:	d11d      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x54e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800220e:	d118      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800221a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800221c:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_ADC_ConfigChannel+0x5d0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <HAL_ADC_ConfigChannel+0x5d4>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9a      	lsrs	r2, r3, #18
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002232:	e002      	b.n	800223a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	3b01      	subs	r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f9      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002240:	e02e      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b11      	cmp	r3, #17
 8002248:	d10b      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x56e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002252:	d106      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800225c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800225e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002260:	e01e      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b12      	cmp	r3, #18
 8002268:	d11a      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800226a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002274:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002276:	e013      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f043 0220 	orr.w	r2, r3, #32
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800228a:	e00a      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f043 0220 	orr.w	r2, r3, #32
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800229e:	e000      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	376c      	adds	r7, #108	; 0x6c
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	50000400 	.word	0x50000400
 80022c0:	50000500 	.word	0x50000500
 80022c4:	20000000 	.word	0x20000000
 80022c8:	431bde83 	.word	0x431bde83

080022cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b099      	sub	sp, #100	; 0x64
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e4:	d102      	bne.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80022e6:	4b6d      	ldr	r3, [pc, #436]	; (800249c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	e01a      	b.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a6a      	ldr	r2, [pc, #424]	; (800249c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d103      	bne.n	80022fe <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80022f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	e011      	b.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d102      	bne.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002308:	4b66      	ldr	r3, [pc, #408]	; (80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	e009      	b.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a64      	ldr	r2, [pc, #400]	; (80024a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d102      	bne.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002318:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	e001      	b.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b0      	b.n	800248e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002336:	2302      	movs	r3, #2
 8002338:	e0a9      	b.n	800248e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	f040 808d 	bne.w	800246c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 8086 	bne.w	800246c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002368:	d004      	beq.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002374:	4b4c      	ldr	r3, [pc, #304]	; (80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002376:	e000      	b.n	800237a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002378:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800237a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d040      	beq.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002396:	035b      	lsls	r3, r3, #13
 8002398:	430b      	orrs	r3, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800239e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d108      	bne.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d15c      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80023e2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d14b      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023f0:	f023 030f 	bic.w	r3, r3, #15
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	6811      	ldr	r1, [r2, #0]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	6892      	ldr	r2, [r2, #8]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	431a      	orrs	r2, r3
 8002400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002402:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002404:	e03c      	b.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800240e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002410:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d108      	bne.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d123      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002454:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d112      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800245a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002462:	f023 030f 	bic.w	r3, r3, #15
 8002466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002468:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800246a:	e009      	b.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800247e:	e000      	b.n	8002482 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002480:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800248a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800248e:	4618      	mov	r0, r3
 8002490:	3764      	adds	r7, #100	; 0x64
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	50000100 	.word	0x50000100
 80024a0:	50000400 	.word	0x50000400
 80024a4:	50000500 	.word	0x50000500
 80024a8:	50000300 	.word	0x50000300
 80024ac:	50000700 	.word	0x50000700

080024b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d126      	bne.n	8002518 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d115      	bne.n	8002510 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d111      	bne.n	8002510 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f043 0201 	orr.w	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff f801 	bl	8001518 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002516:	e004      	b.n	8002522 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	4798      	blx	r3
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f7fe fff7 	bl	800152c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f043 0204 	orr.w	r2, r3, #4
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7fe ffe7 	bl	8001540 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <ADC_Enable+0x2c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <ADC_Enable+0x2c>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <ADC_Enable+0x2e>
 80025a8:	2300      	movs	r3, #0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d143      	bne.n	8002636 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <ADC_Enable+0xc4>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f043 0210 	orr.w	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e02f      	b.n	8002638 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80025e8:	f7fe ff8a 	bl	8001500 <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025ee:	e01b      	b.n	8002628 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025f0:	f7fe ff86 	bl	8001500 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d914      	bls.n	8002628 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d00d      	beq.n	8002628 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f043 0210 	orr.w	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e007      	b.n	8002638 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d1dc      	bne.n	80025f0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	8000003f 	.word	0x8000003f

08002644 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <ADC_Disable+0x2c>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <ADC_Disable+0x2c>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <ADC_Disable+0x2e>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d047      	beq.n	8002706 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030d 	and.w	r3, r3, #13
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10f      	bne.n	80026a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0202 	orr.w	r2, r2, #2
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2203      	movs	r2, #3
 800269a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800269c:	f7fe ff30 	bl	8001500 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026a2:	e029      	b.n	80026f8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f043 0210 	orr.w	r2, r3, #16
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e023      	b.n	8002708 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026c0:	f7fe ff1e 	bl	8001500 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d914      	bls.n	80026f8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10d      	bne.n	80026f8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0210 	orr.w	r2, r3, #16
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e007      	b.n	8002708 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d0dc      	beq.n	80026c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 809b 	beq.w	800286c <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002744:	d12a      	bne.n	800279c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800274a:	2b01      	cmp	r3, #1
 800274c:	d126      	bne.n	800279c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002752:	2b01      	cmp	r3, #1
 8002754:	d122      	bne.n	800279c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002756:	230c      	movs	r3, #12
 8002758:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800275a:	e014      	b.n	8002786 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4a46      	ldr	r2, [pc, #280]	; (8002878 <ADC_ConversionStop+0x168>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d90d      	bls.n	8002780 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f043 0210 	orr.w	r2, r3, #16
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e076      	b.n	800286e <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	3301      	adds	r3, #1
 8002784:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d1e3      	bne.n	800275c <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2240      	movs	r2, #64	; 0x40
 800279a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b60      	cmp	r3, #96	; 0x60
 80027a0:	d015      	beq.n	80027ce <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d10e      	bne.n	80027ce <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d107      	bne.n	80027ce <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0210 	orr.w	r2, r2, #16
 80027cc:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d015      	beq.n	8002800 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d10e      	bne.n	8002800 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b60      	cmp	r3, #96	; 0x60
 8002804:	d005      	beq.n	8002812 <ADC_ConversionStop+0x102>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b6c      	cmp	r3, #108	; 0x6c
 800280a:	d105      	bne.n	8002818 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800280c:	230c      	movs	r3, #12
 800280e:	617b      	str	r3, [r7, #20]
        break;
 8002810:	e005      	b.n	800281e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002812:	2308      	movs	r3, #8
 8002814:	617b      	str	r3, [r7, #20]
        break;
 8002816:	e002      	b.n	800281e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002818:	2304      	movs	r3, #4
 800281a:	617b      	str	r3, [r7, #20]
        break;
 800281c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800281e:	f7fe fe6f 	bl	8001500 <HAL_GetTick>
 8002822:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002824:	e01b      	b.n	800285e <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002826:	f7fe fe6b 	bl	8001500 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b0b      	cmp	r3, #11
 8002832:	d914      	bls.n	800285e <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f043 0210 	orr.w	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e007      	b.n	800286e <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1dc      	bne.n	8002826 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	000993ff 	.word	0x000993ff

0800287c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <__NVIC_SetPriorityGrouping+0x44>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002898:	4013      	ands	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ae:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <__NVIC_SetPriorityGrouping+0x44>)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	60d3      	str	r3, [r2, #12]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <__NVIC_GetPriorityGrouping+0x18>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	f003 0307 	and.w	r3, r3, #7
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	db0b      	blt.n	800290a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4907      	ldr	r1, [pc, #28]	; (8002918 <__NVIC_EnableIRQ+0x38>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	2001      	movs	r0, #1
 8002902:	fa00 f202 	lsl.w	r2, r0, r2
 8002906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000e100 	.word	0xe000e100

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0a      	blt.n	8002946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	490c      	ldr	r1, [pc, #48]	; (8002968 <__NVIC_SetPriority+0x4c>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	440b      	add	r3, r1
 8002940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002944:	e00a      	b.n	800295c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <__NVIC_SetPriority+0x50>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3b04      	subs	r3, #4
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	440b      	add	r3, r1
 800295a:	761a      	strb	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1c3 0307 	rsb	r3, r3, #7
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3304      	adds	r3, #4
 8002996:	2b06      	cmp	r3, #6
 8002998:	d902      	bls.n	80029a0 <NVIC_EncodePriority+0x30>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3b03      	subs	r3, #3
 800299e:	e000      	b.n	80029a2 <NVIC_EncodePriority+0x32>
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43d9      	mvns	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	4313      	orrs	r3, r2
         );
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e8:	d301      	bcc.n	80029ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ea:	2301      	movs	r3, #1
 80029ec:	e00f      	b.n	8002a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <SysTick_Config+0x40>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f6:	210f      	movs	r1, #15
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029fc:	f7ff ff8e 	bl	800291c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <SysTick_Config+0x40>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <SysTick_Config+0x40>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	e000e010 	.word	0xe000e010

08002a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff29 	bl	800287c <__NVIC_SetPriorityGrouping>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a44:	f7ff ff3e 	bl	80028c4 <__NVIC_GetPriorityGrouping>
 8002a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	6978      	ldr	r0, [r7, #20]
 8002a50:	f7ff ff8e 	bl	8002970 <NVIC_EncodePriority>
 8002a54:	4602      	mov	r2, r0
 8002a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff5d 	bl	800291c <__NVIC_SetPriority>
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff31 	bl	80028e0 <__NVIC_EnableIRQ>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ffa2 	bl	80029d8 <SysTick_Config>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e037      	b.n	8002b24 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002aca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ace:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f97a 	bl	8002e00 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}  
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_DMA_Start_IT+0x20>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e04a      	b.n	8002be2 <HAL_DMA_Start_IT+0xb6>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d13a      	bne.n	8002bd4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f90d 	bl	8002da2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 020e 	orr.w	r2, r2, #14
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e00f      	b.n	8002bc2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 020a 	orr.w	r2, r2, #10
 8002bb0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0204 	bic.w	r2, r2, #4
 8002bc0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e005      	b.n	8002be0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d008      	beq.n	8002c0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e020      	b.n	8002c50 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 020e 	bic.w	r2, r2, #14
 8002c1c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2204      	movs	r2, #4
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d024      	beq.n	8002cce <HAL_DMA_IRQHandler+0x72>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01f      	beq.n	8002cce <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0204 	bic.w	r2, r2, #4
 8002caa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d06a      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ccc:	e065      	b.n	8002d9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d02c      	beq.n	8002d38 <HAL_DMA_IRQHandler+0xdc>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d027      	beq.n	8002d38 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10b      	bne.n	8002d0e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 020a 	bic.w	r2, r2, #10
 8002d04:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	2102      	movs	r1, #2
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d035      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002d36:	e030      	b.n	8002d9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d028      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x13e>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d023      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 020e 	bic.w	r2, r2, #14
 8002d60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d70:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
    }
  }
}  
 8002d98:	e7ff      	b.n	8002d9a <HAL_DMA_IRQHandler+0x13e>
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d108      	bne.n	8002de2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002de0:	e007      	b.n	8002df2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	60da      	str	r2, [r3, #12]
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <DMA_CalcBaseAndBitshift+0x60>)
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d80f      	bhi.n	8002e34 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <DMA_CalcBaseAndBitshift+0x64>)
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <DMA_CalcBaseAndBitshift+0x68>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	009a      	lsls	r2, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <DMA_CalcBaseAndBitshift+0x6c>)
 8002e30:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002e32:	e00e      	b.n	8002e52 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <DMA_CalcBaseAndBitshift+0x70>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <DMA_CalcBaseAndBitshift+0x68>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <DMA_CalcBaseAndBitshift+0x74>)
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40020407 	.word	0x40020407
 8002e64:	bffdfff8 	.word	0xbffdfff8
 8002e68:	cccccccd 	.word	0xcccccccd
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	bffdfbf8 	.word	0xbffdfbf8
 8002e74:	40020400 	.word	0x40020400

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e86:	e154      	b.n	8003132 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	4013      	ands	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8146 	beq.w	800312c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d005      	beq.n	8002eb8 <HAL_GPIO_Init+0x40>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d130      	bne.n	8002f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eee:	2201      	movs	r2, #1
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f003 0201 	and.w	r2, r3, #1
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d017      	beq.n	8002f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d123      	bne.n	8002faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	08da      	lsrs	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3208      	adds	r2, #8
 8002f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	08da      	lsrs	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3208      	adds	r2, #8
 8002fa4:	6939      	ldr	r1, [r7, #16]
 8002fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0203 	and.w	r2, r3, #3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80a0 	beq.w	800312c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fec:	4b58      	ldr	r3, [pc, #352]	; (8003150 <HAL_GPIO_Init+0x2d8>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a57      	ldr	r2, [pc, #348]	; (8003150 <HAL_GPIO_Init+0x2d8>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b55      	ldr	r3, [pc, #340]	; (8003150 <HAL_GPIO_Init+0x2d8>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003004:	4a53      	ldr	r2, [pc, #332]	; (8003154 <HAL_GPIO_Init+0x2dc>)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3302      	adds	r3, #2
 800300c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	220f      	movs	r2, #15
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800302e:	d019      	beq.n	8003064 <HAL_GPIO_Init+0x1ec>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a49      	ldr	r2, [pc, #292]	; (8003158 <HAL_GPIO_Init+0x2e0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d013      	beq.n	8003060 <HAL_GPIO_Init+0x1e8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a48      	ldr	r2, [pc, #288]	; (800315c <HAL_GPIO_Init+0x2e4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00d      	beq.n	800305c <HAL_GPIO_Init+0x1e4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a47      	ldr	r2, [pc, #284]	; (8003160 <HAL_GPIO_Init+0x2e8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d007      	beq.n	8003058 <HAL_GPIO_Init+0x1e0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a46      	ldr	r2, [pc, #280]	; (8003164 <HAL_GPIO_Init+0x2ec>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_GPIO_Init+0x1dc>
 8003050:	2304      	movs	r3, #4
 8003052:	e008      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003054:	2305      	movs	r3, #5
 8003056:	e006      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003058:	2303      	movs	r3, #3
 800305a:	e004      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 800305c:	2302      	movs	r3, #2
 800305e:	e002      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_GPIO_Init+0x1ee>
 8003064:	2300      	movs	r3, #0
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	f002 0203 	and.w	r2, r2, #3
 800306c:	0092      	lsls	r2, r2, #2
 800306e:	4093      	lsls	r3, r2
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003076:	4937      	ldr	r1, [pc, #220]	; (8003154 <HAL_GPIO_Init+0x2dc>)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003084:	4b38      	ldr	r3, [pc, #224]	; (8003168 <HAL_GPIO_Init+0x2f0>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	43db      	mvns	r3, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030a8:	4a2f      	ldr	r2, [pc, #188]	; (8003168 <HAL_GPIO_Init+0x2f0>)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030ae:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_GPIO_Init+0x2f0>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030d2:	4a25      	ldr	r2, [pc, #148]	; (8003168 <HAL_GPIO_Init+0x2f0>)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_GPIO_Init+0x2f0>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030fc:	4a1a      	ldr	r2, [pc, #104]	; (8003168 <HAL_GPIO_Init+0x2f0>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003102:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_GPIO_Init+0x2f0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43db      	mvns	r3, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_GPIO_Init+0x2f0>)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3301      	adds	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	f47f aea3 	bne.w	8002e88 <HAL_GPIO_Init+0x10>
  }
}
 8003142:	bf00      	nop
 8003144:	bf00      	nop
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	40021000 	.word	0x40021000
 8003154:	40010000 	.word	0x40010000
 8003158:	48000400 	.word	0x48000400
 800315c:	48000800 	.word	0x48000800
 8003160:	48000c00 	.word	0x48000c00
 8003164:	48001000 	.word	0x48001000
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003188:	e002      	b.n	8003190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e081      	b.n	80032b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fd fe24 	bl	8000e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d107      	bne.n	8003216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	e006      	b.n	8003224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d104      	bne.n	8003236 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003234:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003248:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003258:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69d9      	ldr	r1, [r3, #28]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d138      	bne.n	8003342 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032da:	2302      	movs	r3, #2
 80032dc:	e032      	b.n	8003344 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2224      	movs	r2, #36	; 0x24
 80032ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800330c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6819      	ldr	r1, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b20      	cmp	r3, #32
 8003364:	d139      	bne.n	80033da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003370:	2302      	movs	r3, #2
 8003372:	e033      	b.n	80033dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f000 bef4 	b.w	80041ea <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 816a 	beq.w	80036e6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003412:	4bb3      	ldr	r3, [pc, #716]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d00c      	beq.n	8003438 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800341e:	4bb0      	ldr	r3, [pc, #704]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d159      	bne.n	80034de <HAL_RCC_OscConfig+0xf6>
 800342a:	4bad      	ldr	r3, [pc, #692]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d152      	bne.n	80034de <HAL_RCC_OscConfig+0xf6>
 8003438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800343c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800344c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <HAL_RCC_OscConfig+0x82>
 8003464:	4b9e      	ldr	r3, [pc, #632]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	e015      	b.n	8003496 <HAL_RCC_OscConfig+0xae>
 800346a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003476:	fa93 f3a3 	rbit	r3, r3
 800347a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800347e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003482:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003486:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003492:	4b93      	ldr	r3, [pc, #588]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800349a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800349e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034a2:	fa92 f2a2 	rbit	r2, r2
 80034a6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80034aa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80034ae:	fab2 f282 	clz	r2, r2
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	f042 0220 	orr.w	r2, r2, #32
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f002 021f 	and.w	r2, r2, #31
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f202 	lsl.w	r2, r1, r2
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 810c 	beq.w	80036e4 <HAL_RCC_OscConfig+0x2fc>
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 8106 	bne.w	80036e4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f000 be86 	b.w	80041ea <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d106      	bne.n	80034f8 <HAL_RCC_OscConfig+0x110>
 80034ea:	4b7d      	ldr	r3, [pc, #500]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7c      	ldr	r2, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e030      	b.n	800355a <HAL_RCC_OscConfig+0x172>
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x134>
 8003502:	4b77      	ldr	r3, [pc, #476]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a76      	ldr	r2, [pc, #472]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b74      	ldr	r3, [pc, #464]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a73      	ldr	r2, [pc, #460]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e01e      	b.n	800355a <HAL_RCC_OscConfig+0x172>
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_OscConfig+0x15a>
 8003528:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a6c      	ldr	r2, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 800352e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a69      	ldr	r2, [pc, #420]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	e00b      	b.n	800355a <HAL_RCC_OscConfig+0x172>
 8003542:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a66      	ldr	r2, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b64      	ldr	r3, [pc, #400]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a63      	ldr	r2, [pc, #396]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 8003554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800355a:	4b61      	ldr	r3, [pc, #388]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f023 020f 	bic.w	r2, r3, #15
 8003562:	1d3b      	adds	r3, r7, #4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	495d      	ldr	r1, [pc, #372]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d059      	beq.n	800362c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd ffc2 	bl	8001500 <HAL_GetTick>
 800357c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003582:	f7fd ffbd 	bl	8001500 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d902      	bls.n	8003598 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	f000 be29 	b.w	80041ea <HAL_RCC_OscConfig+0xe02>
 8003598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800359c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80035ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d102      	bne.n	80035ca <HAL_RCC_OscConfig+0x1e2>
 80035c4:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	e015      	b.n	80035f6 <HAL_RCC_OscConfig+0x20e>
 80035ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035ce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80035de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80035e6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80035f2:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035fa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80035fe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003602:	fa92 f2a2 	rbit	r2, r2
 8003606:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800360a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800360e:	fab2 f282 	clz	r2, r2
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f042 0220 	orr.w	r2, r2, #32
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	f002 021f 	and.w	r2, r2, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f202 	lsl.w	r2, r1, r2
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0ab      	beq.n	8003582 <HAL_RCC_OscConfig+0x19a>
 800362a:	e05c      	b.n	80036e6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fd ff68 	bl	8001500 <HAL_GetTick>
 8003630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003636:	f7fd ff63 	bl	8001500 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d902      	bls.n	800364c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	f000 bdcf 	b.w	80041ea <HAL_RCC_OscConfig+0xe02>
 800364c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003650:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003660:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d102      	bne.n	800367e <HAL_RCC_OscConfig+0x296>
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	e015      	b.n	80036aa <HAL_RCC_OscConfig+0x2c2>
 800367e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003682:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003692:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003696:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800369a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_RCC_OscConfig+0x2f8>)
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036ae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80036b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80036b6:	fa92 f2a2 	rbit	r2, r2
 80036ba:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80036be:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80036c2:	fab2 f282 	clz	r2, r2
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	f042 0220 	orr.w	r2, r2, #32
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f002 021f 	and.w	r2, r2, #31
 80036d2:	2101      	movs	r1, #1
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1ab      	bne.n	8003636 <HAL_RCC_OscConfig+0x24e>
 80036de:	e002      	b.n	80036e6 <HAL_RCC_OscConfig+0x2fe>
 80036e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 816f 	beq.w	80039d4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80036f6:	4bd0      	ldr	r3, [pc, #832]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003702:	4bcd      	ldr	r3, [pc, #820]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b08      	cmp	r3, #8
 800370c:	d16c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x400>
 800370e:	4bca      	ldr	r3, [pc, #808]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d166      	bne.n	80037e8 <HAL_RCC_OscConfig+0x400>
 800371a:	2302      	movs	r3, #2
 800371c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800372c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d102      	bne.n	800374a <HAL_RCC_OscConfig+0x362>
 8003744:	4bbc      	ldr	r3, [pc, #752]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	e013      	b.n	8003772 <HAL_RCC_OscConfig+0x38a>
 800374a:	2302      	movs	r3, #2
 800374c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800375c:	2302      	movs	r3, #2
 800375e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003762:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800376e:	4bb2      	ldr	r3, [pc, #712]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2202      	movs	r2, #2
 8003774:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003778:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800377c:	fa92 f2a2 	rbit	r2, r2
 8003780:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003784:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003788:	fab2 f282 	clz	r2, r2
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f042 0220 	orr.w	r2, r2, #32
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f002 021f 	and.w	r2, r2, #31
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f202 	lsl.w	r2, r1, r2
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <HAL_RCC_OscConfig+0x3cc>
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f000 bd1b 	b.w	80041ea <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b4:	4ba0      	ldr	r3, [pc, #640]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	21f8      	movs	r1, #248	; 0xf8
 80037c4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80037cc:	fa91 f1a1 	rbit	r1, r1
 80037d0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80037d4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80037d8:	fab1 f181 	clz	r1, r1
 80037dc:	b2c9      	uxtb	r1, r1
 80037de:	408b      	lsls	r3, r1
 80037e0:	4995      	ldr	r1, [pc, #596]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e6:	e0f5      	b.n	80039d4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8085 	beq.w	80038fe <HAL_RCC_OscConfig+0x516>
 80037f4:	2301      	movs	r3, #1
 80037f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003806:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003814:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	461a      	mov	r2, r3
 800381c:	2301      	movs	r3, #1
 800381e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd fe6e 	bl	8001500 <HAL_GetTick>
 8003824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382a:	f7fd fe69 	bl	8001500 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d902      	bls.n	8003840 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	f000 bcd5 	b.w	80041ea <HAL_RCC_OscConfig+0xe02>
 8003840:	2302      	movs	r3, #2
 8003842:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003852:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d102      	bne.n	8003870 <HAL_RCC_OscConfig+0x488>
 800386a:	4b73      	ldr	r3, [pc, #460]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	e013      	b.n	8003898 <HAL_RCC_OscConfig+0x4b0>
 8003870:	2302      	movs	r3, #2
 8003872:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003882:	2302      	movs	r3, #2
 8003884:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003888:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003894:	4b68      	ldr	r3, [pc, #416]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2202      	movs	r2, #2
 800389a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800389e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80038aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80038ae:	fab2 f282 	clz	r2, r2
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f042 0220 	orr.w	r2, r2, #32
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	f002 021f 	and.w	r2, r2, #31
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0af      	beq.n	800382a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	4b5b      	ldr	r3, [pc, #364]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	21f8      	movs	r1, #248	; 0xf8
 80038da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80038e2:	fa91 f1a1 	rbit	r1, r1
 80038e6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80038ea:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80038ee:	fab1 f181 	clz	r1, r1
 80038f2:	b2c9      	uxtb	r1, r1
 80038f4:	408b      	lsls	r3, r1
 80038f6:	4950      	ldr	r1, [pc, #320]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	e06a      	b.n	80039d4 <HAL_RCC_OscConfig+0x5ec>
 80038fe:	2301      	movs	r3, #1
 8003900:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003910:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800391e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	461a      	mov	r2, r3
 8003926:	2300      	movs	r3, #0
 8003928:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fd fde9 	bl	8001500 <HAL_GetTick>
 800392e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	e00a      	b.n	800394a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003934:	f7fd fde4 	bl	8001500 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d902      	bls.n	800394a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	f000 bc50 	b.w	80041ea <HAL_RCC_OscConfig+0xe02>
 800394a:	2302      	movs	r3, #2
 800394c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800395c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d102      	bne.n	800397a <HAL_RCC_OscConfig+0x592>
 8003974:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	e013      	b.n	80039a2 <HAL_RCC_OscConfig+0x5ba>
 800397a:	2302      	movs	r3, #2
 800397c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800398c:	2302      	movs	r3, #2
 800398e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003992:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <HAL_RCC_OscConfig+0x650>)
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	2202      	movs	r2, #2
 80039a4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80039a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80039ac:	fa92 f2a2 	rbit	r2, r2
 80039b0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80039b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80039b8:	fab2 f282 	clz	r2, r2
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	f042 0220 	orr.w	r2, r2, #32
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	f002 021f 	and.w	r2, r2, #31
 80039c8:	2101      	movs	r1, #1
 80039ca:	fa01 f202 	lsl.w	r2, r1, r2
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1af      	bne.n	8003934 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80da 	beq.w	8003b98 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d069      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x6da>
 80039ee:	2301      	movs	r3, #1
 80039f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039f8:	fa93 f3a3 	rbit	r3, r3
 80039fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_OscConfig+0x654>)
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	461a      	mov	r2, r3
 8003a14:	2301      	movs	r3, #1
 8003a16:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a18:	f7fd fd72 	bl	8001500 <HAL_GetTick>
 8003a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a20:	e00e      	b.n	8003a40 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a22:	f7fd fd6d 	bl	8001500 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d906      	bls.n	8003a40 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e3d9      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	10908120 	.word	0x10908120
 8003a40:	2302      	movs	r3, #2
 8003a42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a56:	2202      	movs	r2, #2
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a6e:	2202      	movs	r2, #2
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	fa93 f2a3 	rbit	r2, r3
 8003a7c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003a80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a82:	4ba5      	ldr	r3, [pc, #660]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a86:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	6019      	str	r1, [r3, #0]
 8003a8e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fa93 f1a3 	rbit	r1, r3
 8003a98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a9c:	6019      	str	r1, [r3, #0]
  return result;
 8003a9e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0b0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x63a>
 8003ac0:	e06a      	b.n	8003b98 <HAL_RCC_OscConfig+0x7b0>
 8003ac2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	fa93 f2a3 	rbit	r2, r3
 8003ad4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ad8:	601a      	str	r2, [r3, #0]
  return result;
 8003ada:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003ade:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae0:	fab3 f383 	clz	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4b8c      	ldr	r3, [pc, #560]	; (8003d1c <HAL_RCC_OscConfig+0x934>)
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	461a      	mov	r2, r3
 8003af0:	2300      	movs	r3, #0
 8003af2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af4:	f7fd fd04 	bl	8001500 <HAL_GetTick>
 8003af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	e009      	b.n	8003b12 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afe:	f7fd fcff 	bl	8001500 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e36b      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
 8003b12:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b16:	2202      	movs	r2, #2
 8003b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b2e:	2202      	movs	r2, #2
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	fa93 f2a3 	rbit	r2, r3
 8003b3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b46:	2202      	movs	r2, #2
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	fa93 f2a3 	rbit	r2, r3
 8003b54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5a:	4b6f      	ldr	r3, [pc, #444]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b62:	2102      	movs	r1, #2
 8003b64:	6019      	str	r1, [r3, #0]
 8003b66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	fa93 f1a3 	rbit	r1, r3
 8003b70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b74:	6019      	str	r1, [r3, #0]
  return result;
 8003b76:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1b2      	bne.n	8003afe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8158 	beq.w	8003e58 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bae:	4b5a      	ldr	r3, [pc, #360]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d112      	bne.n	8003be0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4a56      	ldr	r2, [pc, #344]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	61d3      	str	r3, [r2, #28]
 8003bc6:	4b54      	ldr	r3, [pc, #336]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003bce:	f107 0308 	add.w	r3, r7, #8
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f107 0308 	add.w	r3, r7, #8
 8003bd8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	4b4f      	ldr	r3, [pc, #316]	; (8003d20 <HAL_RCC_OscConfig+0x938>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d11a      	bne.n	8003c22 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_RCC_OscConfig+0x938>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a4b      	ldr	r2, [pc, #300]	; (8003d20 <HAL_RCC_OscConfig+0x938>)
 8003bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf8:	f7fd fc82 	bl	8001500 <HAL_GetTick>
 8003bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c00:	e009      	b.n	8003c16 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fd fc7d 	bl	8001500 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e2e9      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <HAL_RCC_OscConfig+0x938>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ef      	beq.n	8003c02 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_OscConfig+0x852>
 8003c2c:	4b3a      	ldr	r3, [pc, #232]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4a39      	ldr	r2, [pc, #228]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6213      	str	r3, [r2, #32]
 8003c38:	e02f      	b.n	8003c9a <HAL_RCC_OscConfig+0x8b2>
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCC_OscConfig+0x876>
 8003c44:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a33      	ldr	r2, [pc, #204]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	6213      	str	r3, [r2, #32]
 8003c50:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4a30      	ldr	r2, [pc, #192]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c56:	f023 0304 	bic.w	r3, r3, #4
 8003c5a:	6213      	str	r3, [r2, #32]
 8003c5c:	e01d      	b.n	8003c9a <HAL_RCC_OscConfig+0x8b2>
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d10c      	bne.n	8003c82 <HAL_RCC_OscConfig+0x89a>
 8003c68:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	6213      	str	r3, [r2, #32]
 8003c74:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4a27      	ldr	r2, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6213      	str	r3, [r2, #32]
 8003c80:	e00b      	b.n	8003c9a <HAL_RCC_OscConfig+0x8b2>
 8003c82:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6213      	str	r3, [r2, #32]
 8003c8e:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003c94:	f023 0304 	bic.w	r3, r3, #4
 8003c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d06b      	beq.n	8003d7c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fc2c 	bl	8001500 <HAL_GetTick>
 8003ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	e00b      	b.n	8003cc6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd fc27 	bl	8001500 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e291      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
 8003cc6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003cca:	2202      	movs	r2, #2
 8003ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	fa93 f2a3 	rbit	r2, r3
 8003cd8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	fa93 f2a3 	rbit	r2, r3
 8003cf0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003cf4:	601a      	str	r2, [r3, #0]
  return result;
 8003cf6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003cfa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfc:	fab3 f383 	clz	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f043 0302 	orr.w	r3, r3, #2
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCC_OscConfig+0x93c>
 8003d10:	4b01      	ldr	r3, [pc, #4]	; (8003d18 <HAL_RCC_OscConfig+0x930>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	e014      	b.n	8003d40 <HAL_RCC_OscConfig+0x958>
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	10908120 	.word	0x10908120
 8003d20:	40007000 	.word	0x40007000
 8003d24:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d28:	2202      	movs	r2, #2
 8003d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	fa93 f2a3 	rbit	r2, r3
 8003d36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	4bbb      	ldr	r3, [pc, #748]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d44:	2102      	movs	r1, #2
 8003d46:	6011      	str	r1, [r2, #0]
 8003d48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	fa92 f1a2 	rbit	r1, r2
 8003d52:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d56:	6011      	str	r1, [r2, #0]
  return result;
 8003d58:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	fab2 f282 	clz	r2, r2
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f002 021f 	and.w	r2, r2, #31
 8003d6e:	2101      	movs	r1, #1
 8003d70:	fa01 f202 	lsl.w	r2, r1, r2
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d099      	beq.n	8003cae <HAL_RCC_OscConfig+0x8c6>
 8003d7a:	e063      	b.n	8003e44 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7fd fbc0 	bl	8001500 <HAL_GetTick>
 8003d80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d84:	e00b      	b.n	8003d9e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd fbbb 	bl	8001500 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e225      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
 8003d9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003da2:	2202      	movs	r2, #2
 8003da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003dba:	2202      	movs	r2, #2
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	fa93 f2a3 	rbit	r2, r3
 8003dc8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003dcc:	601a      	str	r2, [r3, #0]
  return result;
 8003dce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003dd2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f043 0302 	orr.w	r3, r3, #2
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d102      	bne.n	8003dee <HAL_RCC_OscConfig+0xa06>
 8003de8:	4b90      	ldr	r3, [pc, #576]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	e00d      	b.n	8003e0a <HAL_RCC_OscConfig+0xa22>
 8003dee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003df2:	2202      	movs	r2, #2
 8003df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	fa93 f2a3 	rbit	r2, r3
 8003e00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	4b89      	ldr	r3, [pc, #548]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e0e:	2102      	movs	r1, #2
 8003e10:	6011      	str	r1, [r2, #0]
 8003e12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	fa92 f1a2 	rbit	r1, r2
 8003e1c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e20:	6011      	str	r1, [r2, #0]
  return result;
 8003e22:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	fab2 f282 	clz	r2, r2
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	f002 021f 	and.w	r2, r2, #31
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1a0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e44:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b77      	ldr	r3, [pc, #476]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	4a76      	ldr	r2, [pc, #472]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e56:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 81c2 	beq.w	80041e8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e64:	4b71      	ldr	r3, [pc, #452]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 030c 	and.w	r3, r3, #12
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	f000 819c 	beq.w	80041aa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	f040 8114 	bne.w	80040a6 <HAL_RCC_OscConfig+0xcbe>
 8003e7e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	fa93 f2a3 	rbit	r2, r3
 8003e92:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e96:	601a      	str	r2, [r3, #0]
  return result;
 8003e98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ea8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fb24 	bl	8001500 <HAL_GetTick>
 8003eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ebc:	e009      	b.n	8003ed2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fd fb1f 	bl	8001500 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e18b      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
 8003ed2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	fa93 f2a3 	rbit	r2, r3
 8003ee6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003eea:	601a      	str	r2, [r3, #0]
  return result;
 8003eec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ef0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d102      	bne.n	8003f0c <HAL_RCC_OscConfig+0xb24>
 8003f06:	4b49      	ldr	r3, [pc, #292]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	e01b      	b.n	8003f44 <HAL_RCC_OscConfig+0xb5c>
 8003f0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	fa93 f2a3 	rbit	r2, r3
 8003f20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	fa93 f2a3 	rbit	r2, r3
 8003f3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	4b3a      	ldr	r3, [pc, #232]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f4c:	6011      	str	r1, [r2, #0]
 8003f4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	fa92 f1a2 	rbit	r1, r2
 8003f58:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f5c:	6011      	str	r1, [r2, #0]
  return result;
 8003f5e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	fab2 f282 	clz	r2, r2
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	f042 0220 	orr.w	r2, r2, #32
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	f002 021f 	and.w	r2, r2, #31
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d19e      	bne.n	8003ebe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f88:	1d3b      	adds	r3, r7, #4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	4925      	ldr	r1, [pc, #148]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	fa93 f2a3 	rbit	r2, r3
 8003fb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fb4:	601a      	str	r2, [r3, #0]
  return result;
 8003fb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2301      	movs	r3, #1
 8003fd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fd fa95 	bl	8001500 <HAL_GetTick>
 8003fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fda:	e009      	b.n	8003ff0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd fa90 	bl	8001500 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0fc      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
 8003ff0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fa93 f2a3 	rbit	r2, r3
 8004004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004008:	601a      	str	r2, [r3, #0]
  return result;
 800400a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800400e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d105      	bne.n	8004030 <HAL_RCC_OscConfig+0xc48>
 8004024:	4b01      	ldr	r3, [pc, #4]	; (800402c <HAL_RCC_OscConfig+0xc44>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	e01e      	b.n	8004068 <HAL_RCC_OscConfig+0xc80>
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	fa93 f2a3 	rbit	r2, r3
 8004044:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800404e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	fa93 f2a3 	rbit	r2, r3
 800405e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <HAL_RCC_OscConfig+0xe0c>)
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800406c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004070:	6011      	str	r1, [r2, #0]
 8004072:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	fa92 f1a2 	rbit	r1, r2
 800407c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004080:	6011      	str	r1, [r2, #0]
  return result;
 8004082:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	fab2 f282 	clz	r2, r2
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	f042 0220 	orr.w	r2, r2, #32
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	f002 021f 	and.w	r2, r2, #31
 8004098:	2101      	movs	r1, #1
 800409a:	fa01 f202 	lsl.w	r2, r1, r2
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d09b      	beq.n	8003fdc <HAL_RCC_OscConfig+0xbf4>
 80040a4:	e0a0      	b.n	80041e8 <HAL_RCC_OscConfig+0xe00>
 80040a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	fa93 f2a3 	rbit	r2, r3
 80040ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040be:	601a      	str	r2, [r3, #0]
  return result;
 80040c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	461a      	mov	r2, r3
 80040d8:	2300      	movs	r3, #0
 80040da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7fd fa10 	bl	8001500 <HAL_GetTick>
 80040e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e4:	e009      	b.n	80040fa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e6:	f7fd fa0b 	bl	8001500 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e077      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
 80040fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	fa93 f2a3 	rbit	r2, r3
 800410e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004112:	601a      	str	r2, [r3, #0]
  return result;
 8004114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004118:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d102      	bne.n	8004134 <HAL_RCC_OscConfig+0xd4c>
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <HAL_RCC_OscConfig+0xe0c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	e01b      	b.n	800416c <HAL_RCC_OscConfig+0xd84>
 8004134:	f107 0320 	add.w	r3, r7, #32
 8004138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800413c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	f107 0320 	add.w	r3, r7, #32
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	fa93 f2a3 	rbit	r2, r3
 8004148:	f107 031c 	add.w	r3, r7, #28
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	f107 0318 	add.w	r3, r7, #24
 8004152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f107 0318 	add.w	r3, r7, #24
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	fa93 f2a3 	rbit	r2, r3
 8004162:	f107 0314 	add.w	r3, r7, #20
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <HAL_RCC_OscConfig+0xe0c>)
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f107 0210 	add.w	r2, r7, #16
 8004170:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	f107 0210 	add.w	r2, r7, #16
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	fa92 f1a2 	rbit	r1, r2
 8004180:	f107 020c 	add.w	r2, r7, #12
 8004184:	6011      	str	r1, [r2, #0]
  return result;
 8004186:	f107 020c 	add.w	r2, r7, #12
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	fab2 f282 	clz	r2, r2
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f042 0220 	orr.w	r2, r2, #32
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	f002 021f 	and.w	r2, r2, #31
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f202 	lsl.w	r2, r1, r2
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d19e      	bne.n	80040e6 <HAL_RCC_OscConfig+0xcfe>
 80041a8:	e01e      	b.n	80041e8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e018      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041b8:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <HAL_RCC_OscConfig+0xe0c>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d108      	bne.n	80041e4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80041d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b09e      	sub	sp, #120	; 0x78
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e162      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004210:	4b90      	ldr	r3, [pc, #576]	; (8004454 <HAL_RCC_ClockConfig+0x25c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d910      	bls.n	8004240 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b8d      	ldr	r3, [pc, #564]	; (8004454 <HAL_RCC_ClockConfig+0x25c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 0207 	bic.w	r2, r3, #7
 8004226:	498b      	ldr	r1, [pc, #556]	; (8004454 <HAL_RCC_ClockConfig+0x25c>)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b89      	ldr	r3, [pc, #548]	; (8004454 <HAL_RCC_ClockConfig+0x25c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e14a      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424c:	4b82      	ldr	r3, [pc, #520]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	497f      	ldr	r1, [pc, #508]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80dc 	beq.w	8004424 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d13c      	bne.n	80042ee <HAL_RCC_ClockConfig+0xf6>
 8004274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004278:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800427c:	fa93 f3a3 	rbit	r3, r3
 8004280:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	d102      	bne.n	800429e <HAL_RCC_ClockConfig+0xa6>
 8004298:	4b6f      	ldr	r3, [pc, #444]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	e00f      	b.n	80042be <HAL_RCC_ClockConfig+0xc6>
 800429e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	667b      	str	r3, [r7, #100]	; 0x64
 80042ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042b0:	663b      	str	r3, [r7, #96]	; 0x60
 80042b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ba:	4b67      	ldr	r3, [pc, #412]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80042c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042c6:	fa92 f2a2 	rbit	r2, r2
 80042ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80042cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042ce:	fab2 f282 	clz	r2, r2
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	f042 0220 	orr.w	r2, r2, #32
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	f002 021f 	and.w	r2, r2, #31
 80042de:	2101      	movs	r1, #1
 80042e0:	fa01 f202 	lsl.w	r2, r1, r2
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d17b      	bne.n	80043e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e0f3      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d13c      	bne.n	8004370 <HAL_RCC_ClockConfig+0x178>
 80042f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <HAL_RCC_ClockConfig+0x128>
 800431a:	4b4f      	ldr	r3, [pc, #316]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	e00f      	b.n	8004340 <HAL_RCC_ClockConfig+0x148>
 8004320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004324:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	647b      	str	r3, [r7, #68]	; 0x44
 800432e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004332:	643b      	str	r3, [r7, #64]	; 0x40
 8004334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433c:	4b46      	ldr	r3, [pc, #280]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004344:	63ba      	str	r2, [r7, #56]	; 0x38
 8004346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004348:	fa92 f2a2 	rbit	r2, r2
 800434c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800434e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004350:	fab2 f282 	clz	r2, r2
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	f042 0220 	orr.w	r2, r2, #32
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	f002 021f 	and.w	r2, r2, #31
 8004360:	2101      	movs	r1, #1
 8004362:	fa01 f202 	lsl.w	r2, r1, r2
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d13a      	bne.n	80043e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0b2      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2de>
 8004370:	2302      	movs	r3, #2
 8004372:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	fa93 f3a3 	rbit	r3, r3
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	b2db      	uxtb	r3, r3
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d102      	bne.n	8004398 <HAL_RCC_ClockConfig+0x1a0>
 8004392:	4b31      	ldr	r3, [pc, #196]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	e00d      	b.n	80043b4 <HAL_RCC_ClockConfig+0x1bc>
 8004398:	2302      	movs	r3, #2
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
 80043a4:	2302      	movs	r3, #2
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	4b29      	ldr	r3, [pc, #164]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	2202      	movs	r2, #2
 80043b6:	61ba      	str	r2, [r7, #24]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	fa92 f2a2 	rbit	r2, r2
 80043be:	617a      	str	r2, [r7, #20]
  return result;
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	fab2 f282 	clz	r2, r2
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	f042 0220 	orr.w	r2, r2, #32
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	f002 021f 	and.w	r2, r2, #31
 80043d2:	2101      	movs	r1, #1
 80043d4:	fa01 f202 	lsl.w	r2, r1, r2
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e079      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f023 0203 	bic.w	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	491a      	ldr	r1, [pc, #104]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f4:	f7fd f884 	bl	8001500 <HAL_GetTick>
 80043f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fc:	f7fd f880 	bl	8001500 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e061      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <HAL_RCC_ClockConfig+0x260>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 020c 	and.w	r2, r3, #12
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	429a      	cmp	r2, r3
 8004422:	d1eb      	bne.n	80043fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_ClockConfig+0x25c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d214      	bcs.n	800445c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_RCC_ClockConfig+0x25c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 0207 	bic.w	r2, r3, #7
 800443a:	4906      	ldr	r1, [pc, #24]	; (8004454 <HAL_RCC_ClockConfig+0x25c>)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b04      	ldr	r3, [pc, #16]	; (8004454 <HAL_RCC_ClockConfig+0x25c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e040      	b.n	80044d6 <HAL_RCC_ClockConfig+0x2de>
 8004454:	40022000 	.word	0x40022000
 8004458:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_RCC_ClockConfig+0x2e8>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	491a      	ldr	r1, [pc, #104]	; (80044e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004486:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4912      	ldr	r1, [pc, #72]	; (80044e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800449a:	f000 f829 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 800449e:	4601      	mov	r1, r0
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <HAL_RCC_ClockConfig+0x2e8>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a8:	22f0      	movs	r2, #240	; 0xf0
 80044aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	fa92 f2a2 	rbit	r2, r2
 80044b2:	60fa      	str	r2, [r7, #12]
  return result;
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	fab2 f282 	clz	r2, r2
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	40d3      	lsrs	r3, r2
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <HAL_RCC_ClockConfig+0x2ec>)
 80044c0:	5cd3      	ldrb	r3, [r2, r3]
 80044c2:	fa21 f303 	lsr.w	r3, r1, r3
 80044c6:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <HAL_RCC_ClockConfig+0x2f0>)
 80044c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <HAL_RCC_ClockConfig+0x2f4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fc ffd2 	bl	8001478 <HAL_InitTick>
  
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3778      	adds	r7, #120	; 0x78
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	08007514 	.word	0x08007514
 80044e8:	20000000 	.word	0x20000000
 80044ec:	20000004 	.word	0x20000004

080044f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b08b      	sub	sp, #44	; 0x2c
 80044f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	2300      	movs	r3, #0
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800450a:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	2b04      	cmp	r3, #4
 8004518:	d002      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x30>
 800451a:	2b08      	cmp	r3, #8
 800451c:	d003      	beq.n	8004526 <HAL_RCC_GetSysClockFreq+0x36>
 800451e:	e03c      	b.n	800459a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004522:	623b      	str	r3, [r7, #32]
      break;
 8004524:	e03c      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800452c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004530:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	fa92 f2a2 	rbit	r2, r2
 8004538:	607a      	str	r2, [r7, #4]
  return result;
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	fab2 f282 	clz	r2, r2
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	40d3      	lsrs	r3, r2
 8004544:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004546:	5cd3      	ldrb	r3, [r2, r3]
 8004548:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800454a:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	220f      	movs	r2, #15
 8004554:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	fa92 f2a2 	rbit	r2, r2
 800455c:	60fa      	str	r2, [r7, #12]
  return result;
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	fab2 f282 	clz	r2, r2
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	40d3      	lsrs	r3, r2
 8004568:	4a14      	ldr	r2, [pc, #80]	; (80045bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004578:	4a0e      	ldr	r2, [pc, #56]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	e004      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	4a0c      	ldr	r2, [pc, #48]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	623b      	str	r3, [r7, #32]
      break;
 8004598:	e002      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800459c:	623b      	str	r3, [r7, #32]
      break;
 800459e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a0:	6a3b      	ldr	r3, [r7, #32]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	372c      	adds	r7, #44	; 0x2c
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	00f42400 	.word	0x00f42400
 80045b8:	0800752c 	.word	0x0800752c
 80045bc:	0800753c 	.word	0x0800753c
 80045c0:	003d0900 	.word	0x003d0900
 80045c4:	007a1200 	.word	0x007a1200

080045c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000000 	.word	0x20000000

080045e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045e6:	f7ff ffef 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 80045ea:	4601      	mov	r1, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	fa92 f2a2 	rbit	r2, r2
 8004600:	603a      	str	r2, [r7, #0]
  return result;
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	fab2 f282 	clz	r2, r2
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	40d3      	lsrs	r3, r2
 800460c:	4a04      	ldr	r2, [pc, #16]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x40>)
 800460e:	5cd3      	ldrb	r3, [r2, r3]
 8004610:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	08007524 	.word	0x08007524

08004624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800462a:	f7ff ffcd 	bl	80045c8 <HAL_RCC_GetHCLKFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004638:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800463c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	603a      	str	r2, [r7, #0]
  return result;
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	40d3      	lsrs	r3, r2
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	08007524 	.word	0x08007524

08004668 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b092      	sub	sp, #72	; 0x48
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80d4 	beq.w	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468c:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10e      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4a4a      	ldr	r2, [pc, #296]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a2:	61d3      	str	r3, [r2, #28]
 80046a4:	4b48      	ldr	r3, [pc, #288]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b6:	4b45      	ldr	r3, [pc, #276]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d118      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c2:	4b42      	ldr	r3, [pc, #264]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a41      	ldr	r2, [pc, #260]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ce:	f7fc ff17 	bl	8001500 <HAL_GetTick>
 80046d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	e008      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d6:	f7fc ff13 	bl	8001500 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b64      	cmp	r3, #100	; 0x64
 80046e2:	d901      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e169      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e8:	4b38      	ldr	r3, [pc, #224]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046f4:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8084 	beq.w	800480e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004710:	429a      	cmp	r2, r3
 8004712:	d07c      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004714:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800471e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	fa93 f3a3 	rbit	r3, r3
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	461a      	mov	r2, r3
 800473e:	2301      	movs	r3, #1
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004752:	fab3 f383 	clz	r3, r3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	461a      	mov	r2, r3
 8004762:	2300      	movs	r3, #0
 8004764:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d04b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004776:	f7fc fec3 	bl	8001500 <HAL_GetTick>
 800477a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	e00a      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fc febf 	bl	8001500 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	f241 3288 	movw	r2, #5000	; 0x1388
 800478c:	4293      	cmp	r3, r2
 800478e:	d901      	bls.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e113      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004794:	2302      	movs	r3, #2
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	fa93 f3a3 	rbit	r3, r3
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
 80047a0:	2302      	movs	r3, #2
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	61fb      	str	r3, [r7, #28]
  return result;
 80047ac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d108      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047c2:	4b01      	ldr	r3, [pc, #4]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	e00d      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40007000 	.word	0x40007000
 80047d0:	10908100 	.word	0x10908100
 80047d4:	2302      	movs	r3, #2
 80047d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	4b78      	ldr	r3, [pc, #480]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2202      	movs	r2, #2
 80047e6:	613a      	str	r2, [r7, #16]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	fa92 f2a2 	rbit	r2, r2
 80047ee:	60fa      	str	r2, [r7, #12]
  return result;
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	fab2 f282 	clz	r2, r2
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	f002 021f 	and.w	r2, r2, #31
 8004802:	2101      	movs	r1, #1
 8004804:	fa01 f202 	lsl.w	r2, r1, r2
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0b7      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800480e:	4b6d      	ldr	r3, [pc, #436]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	496a      	ldr	r1, [pc, #424]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004820:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004828:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	4a65      	ldr	r2, [pc, #404]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004832:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004840:	4b60      	ldr	r3, [pc, #384]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f023 0203 	bic.w	r2, r3, #3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	495d      	ldr	r1, [pc, #372]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800485e:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	4956      	ldr	r1, [pc, #344]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800487c:	4b51      	ldr	r3, [pc, #324]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	494e      	ldr	r1, [pc, #312]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800489a:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f023 0210 	bic.w	r2, r3, #16
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4947      	ldr	r1, [pc, #284]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048b8:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	493f      	ldr	r1, [pc, #252]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f023 0220 	bic.w	r2, r3, #32
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4938      	ldr	r1, [pc, #224]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f4:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	4930      	ldr	r1, [pc, #192]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004912:	4b2c      	ldr	r3, [pc, #176]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	4929      	ldr	r1, [pc, #164]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004920:	4313      	orrs	r3, r2
 8004922:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004930:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	4921      	ldr	r1, [pc, #132]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	491a      	ldr	r1, [pc, #104]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800495c:	4313      	orrs	r3, r2
 800495e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800496c:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	4912      	ldr	r1, [pc, #72]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	490b      	ldr	r1, [pc, #44]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004998:	4313      	orrs	r3, r2
 800499a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b4:	4903      	ldr	r1, [pc, #12]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3748      	adds	r7, #72	; 0x48
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e09d      	b.n	8004b16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ea:	d009      	beq.n	8004a00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	61da      	str	r2, [r3, #28]
 80049f2:	e005      	b.n	8004a00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fc fa3c 	bl	8000e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a40:	d902      	bls.n	8004a48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e002      	b.n	8004a4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a56:	d007      	beq.n	8004a68 <HAL_SPI_Init+0xa0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a60:	d002      	beq.n	8004a68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	ea42 0103 	orr.w	r1, r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	f003 0204 	and.w	r2, r3, #4
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ae4:	ea42 0103 	orr.w	r1, r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e049      	b.n	8004bc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d106      	bne.n	8004b4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fc fa0b 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	f000 fdbf 	bl	80056e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d001      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04a      	b.n	8004c7a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d018      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x6c>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0e:	d013      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x6c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <HAL_TIM_Base_Start_IT+0xc0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00e      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x6c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d009      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x6c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1a      	ldr	r2, [pc, #104]	; (8004c94 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x6c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d115      	bne.n	8004c64 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b06      	cmp	r3, #6
 8004c48:	d015      	beq.n	8004c76 <HAL_TIM_Base_Start_IT+0xaa>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d011      	beq.n	8004c76 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c62:	e008      	b.n	8004c76 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e000      	b.n	8004c78 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40013400 	.word	0x40013400
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	00010007 	.word	0x00010007

08004ca0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e049      	b.n	8004d46 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc f92a 	bl	8000f20 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f000 fcfe 	bl	80056e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d109      	bne.n	8004d74 <HAL_TIM_OC_Start+0x24>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e03c      	b.n	8004dee <HAL_TIM_OC_Start+0x9e>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d109      	bne.n	8004d8e <HAL_TIM_OC_Start+0x3e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	e02f      	b.n	8004dee <HAL_TIM_OC_Start+0x9e>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d109      	bne.n	8004da8 <HAL_TIM_OC_Start+0x58>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e022      	b.n	8004dee <HAL_TIM_OC_Start+0x9e>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b0c      	cmp	r3, #12
 8004dac:	d109      	bne.n	8004dc2 <HAL_TIM_OC_Start+0x72>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e015      	b.n	8004dee <HAL_TIM_OC_Start+0x9e>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d109      	bne.n	8004ddc <HAL_TIM_OC_Start+0x8c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e008      	b.n	8004dee <HAL_TIM_OC_Start+0x9e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e097      	b.n	8004f26 <HAL_TIM_OC_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_OC_Start+0xb6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e04:	e023      	b.n	8004e4e <HAL_TIM_OC_Start+0xfe>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_OC_Start+0xc6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e14:	e01b      	b.n	8004e4e <HAL_TIM_OC_Start+0xfe>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_OC_Start+0xd6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e24:	e013      	b.n	8004e4e <HAL_TIM_OC_Start+0xfe>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b0c      	cmp	r3, #12
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_OC_Start+0xe6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e34:	e00b      	b.n	8004e4e <HAL_TIM_OC_Start+0xfe>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_OC_Start+0xf6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e44:	e003      	b.n	8004e4e <HAL_TIM_OC_Start+0xfe>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2201      	movs	r2, #1
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 f8d5 	bl	8006006 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a33      	ldr	r2, [pc, #204]	; (8004f30 <HAL_TIM_OC_Start+0x1e0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <HAL_TIM_OC_Start+0x13e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a32      	ldr	r2, [pc, #200]	; (8004f34 <HAL_TIM_OC_Start+0x1e4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <HAL_TIM_OC_Start+0x13e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a30      	ldr	r2, [pc, #192]	; (8004f38 <HAL_TIM_OC_Start+0x1e8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_TIM_OC_Start+0x13e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2f      	ldr	r2, [pc, #188]	; (8004f3c <HAL_TIM_OC_Start+0x1ec>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_TIM_OC_Start+0x13e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2d      	ldr	r2, [pc, #180]	; (8004f40 <HAL_TIM_OC_Start+0x1f0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_OC_Start+0x142>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <HAL_TIM_OC_Start+0x144>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <HAL_TIM_OC_Start+0x1e0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d018      	beq.n	8004ee4 <HAL_TIM_OC_Start+0x194>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eba:	d013      	beq.n	8004ee4 <HAL_TIM_OC_Start+0x194>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <HAL_TIM_OC_Start+0x1f4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00e      	beq.n	8004ee4 <HAL_TIM_OC_Start+0x194>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <HAL_TIM_OC_Start+0x1f8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d009      	beq.n	8004ee4 <HAL_TIM_OC_Start+0x194>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a17      	ldr	r2, [pc, #92]	; (8004f34 <HAL_TIM_OC_Start+0x1e4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <HAL_TIM_OC_Start+0x194>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a16      	ldr	r2, [pc, #88]	; (8004f38 <HAL_TIM_OC_Start+0x1e8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d115      	bne.n	8004f10 <HAL_TIM_OC_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <HAL_TIM_OC_Start+0x1fc>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b06      	cmp	r3, #6
 8004ef4:	d015      	beq.n	8004f22 <HAL_TIM_OC_Start+0x1d2>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d011      	beq.n	8004f22 <HAL_TIM_OC_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	e008      	b.n	8004f22 <HAL_TIM_OC_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	e000      	b.n	8004f24 <HAL_TIM_OC_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40013400 	.word	0x40013400
 8004f38:	40014000 	.word	0x40014000
 8004f3c:	40014400 	.word	0x40014400
 8004f40:	40014800 	.word	0x40014800
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	00010007 	.word	0x00010007

08004f50 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 f84f 	bl	8006006 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a3e      	ldr	r2, [pc, #248]	; (8005068 <HAL_TIM_OC_Stop+0x118>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_TIM_OC_Stop+0x4a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a3d      	ldr	r2, [pc, #244]	; (800506c <HAL_TIM_OC_Stop+0x11c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_TIM_OC_Stop+0x4a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a3b      	ldr	r2, [pc, #236]	; (8005070 <HAL_TIM_OC_Stop+0x120>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIM_OC_Stop+0x4a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a3a      	ldr	r2, [pc, #232]	; (8005074 <HAL_TIM_OC_Stop+0x124>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIM_OC_Stop+0x4a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a38      	ldr	r2, [pc, #224]	; (8005078 <HAL_TIM_OC_Stop+0x128>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_OC_Stop+0x4e>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_TIM_OC_Stop+0x50>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d017      	beq.n	8004fd4 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10f      	bne.n	8004fd4 <HAL_TIM_OC_Stop+0x84>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	f240 4344 	movw	r3, #1092	; 0x444
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <HAL_TIM_OC_Stop+0x84>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a1a      	ldr	r2, [r3, #32]
 8004fda:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10f      	bne.n	8005004 <HAL_TIM_OC_Stop+0xb4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	f240 4344 	movw	r3, #1092	; 0x444
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <HAL_TIM_OC_Stop+0xb4>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <HAL_TIM_OC_Stop+0xc4>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005012:	e023      	b.n	800505c <HAL_TIM_OC_Stop+0x10c>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b04      	cmp	r3, #4
 8005018:	d104      	bne.n	8005024 <HAL_TIM_OC_Stop+0xd4>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005022:	e01b      	b.n	800505c <HAL_TIM_OC_Stop+0x10c>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b08      	cmp	r3, #8
 8005028:	d104      	bne.n	8005034 <HAL_TIM_OC_Stop+0xe4>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005032:	e013      	b.n	800505c <HAL_TIM_OC_Stop+0x10c>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d104      	bne.n	8005044 <HAL_TIM_OC_Stop+0xf4>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005042:	e00b      	b.n	800505c <HAL_TIM_OC_Stop+0x10c>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b10      	cmp	r3, #16
 8005048:	d104      	bne.n	8005054 <HAL_TIM_OC_Stop+0x104>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005052:	e003      	b.n	800505c <HAL_TIM_OC_Stop+0x10c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40013400 	.word	0x40013400
 8005070:	40014000 	.word	0x40014000
 8005074:	40014400 	.word	0x40014400
 8005078:	40014800 	.word	0x40014800

0800507c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e041      	b.n	8005114 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f839 	bl	800511c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3304      	adds	r3, #4
 80050ba:	4619      	mov	r1, r3
 80050bc:	4610      	mov	r0, r2
 80050be:	f000 fb0f 	bl	80056e0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0208 	bic.w	r2, r2, #8
 80050d0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b02      	cmp	r3, #2
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0202 	mvn.w	r2, #2
 800515c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa95 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa87 	bl	800568e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fa98 	bl	80056b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b04      	cmp	r3, #4
 8005198:	d122      	bne.n	80051e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d11b      	bne.n	80051e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0204 	mvn.w	r2, #4
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fa6b 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa5d 	bl	800568e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fa6e 	bl	80056b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0208 	mvn.w	r2, #8
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2204      	movs	r2, #4
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa41 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fa33 	bl	800568e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa44 	bl	80056b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b10      	cmp	r3, #16
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b10      	cmp	r3, #16
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0210 	mvn.w	r2, #16
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2208      	movs	r2, #8
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa17 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fa09 	bl	800568e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fa1a 	bl	80056b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10e      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d107      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0201 	mvn.w	r2, #1
 80052ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f9e3 	bl	800567a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052be:	2b80      	cmp	r3, #128	; 0x80
 80052c0:	d10e      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d107      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 ffc0 	bl	8006260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ee:	d10e      	bne.n	800530e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d107      	bne.n	800530e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 ffb3 	bl	8006274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d10e      	bne.n	800533a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d107      	bne.n	800533a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f9c8 	bl	80056ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b20      	cmp	r3, #32
 8005346:	d10e      	bne.n	8005366 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b20      	cmp	r3, #32
 8005354:	d107      	bne.n	8005366 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f06f 0220 	mvn.w	r2, #32
 800535e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 ff73 	bl	800624c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_TIM_OC_ConfigChannel+0x1e>
 800538a:	2302      	movs	r3, #2
 800538c:	e066      	b.n	800545c <HAL_TIM_OC_ConfigChannel+0xec>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b14      	cmp	r3, #20
 800539a:	d857      	bhi.n	800544c <HAL_TIM_OC_ConfigChannel+0xdc>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053f9 	.word	0x080053f9
 80053a8:	0800544d 	.word	0x0800544d
 80053ac:	0800544d 	.word	0x0800544d
 80053b0:	0800544d 	.word	0x0800544d
 80053b4:	08005407 	.word	0x08005407
 80053b8:	0800544d 	.word	0x0800544d
 80053bc:	0800544d 	.word	0x0800544d
 80053c0:	0800544d 	.word	0x0800544d
 80053c4:	08005415 	.word	0x08005415
 80053c8:	0800544d 	.word	0x0800544d
 80053cc:	0800544d 	.word	0x0800544d
 80053d0:	0800544d 	.word	0x0800544d
 80053d4:	08005423 	.word	0x08005423
 80053d8:	0800544d 	.word	0x0800544d
 80053dc:	0800544d 	.word	0x0800544d
 80053e0:	0800544d 	.word	0x0800544d
 80053e4:	08005431 	.word	0x08005431
 80053e8:	0800544d 	.word	0x0800544d
 80053ec:	0800544d 	.word	0x0800544d
 80053f0:	0800544d 	.word	0x0800544d
 80053f4:	0800543f 	.word	0x0800543f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 f9fe 	bl	8005800 <TIM_OC1_SetConfig>
      break;
 8005404:	e025      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fa87 	bl	8005920 <TIM_OC2_SetConfig>
      break;
 8005412:	e01e      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fb0a 	bl	8005a34 <TIM_OC3_SetConfig>
      break;
 8005420:	e017      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fb8b 	bl	8005b44 <TIM_OC4_SetConfig>
      break;
 800542e:	e010      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fbee 	bl	8005c18 <TIM_OC5_SetConfig>
      break;
 800543c:	e009      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fc4b 	bl	8005ce0 <TIM_OC6_SetConfig>
      break;
 800544a:	e002      	b.n	8005452 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
      break;
 8005450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_TIM_ConfigClockSource+0x1c>
 800547c:	2302      	movs	r3, #2
 800547e:	e0b6      	b.n	80055ee <HAL_TIM_ConfigClockSource+0x18a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054bc:	d03e      	beq.n	800553c <HAL_TIM_ConfigClockSource+0xd8>
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c2:	f200 8087 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x170>
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	f000 8086 	beq.w	80055da <HAL_TIM_ConfigClockSource+0x176>
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	d87f      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x170>
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d01a      	beq.n	800550e <HAL_TIM_ConfigClockSource+0xaa>
 80054d8:	2b70      	cmp	r3, #112	; 0x70
 80054da:	d87b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x170>
 80054dc:	2b60      	cmp	r3, #96	; 0x60
 80054de:	d050      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x11e>
 80054e0:	2b60      	cmp	r3, #96	; 0x60
 80054e2:	d877      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x170>
 80054e4:	2b50      	cmp	r3, #80	; 0x50
 80054e6:	d03c      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0xfe>
 80054e8:	2b50      	cmp	r3, #80	; 0x50
 80054ea:	d873      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x170>
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d058      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x13e>
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d86f      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x170>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d064      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x15e>
 80054f8:	2b30      	cmp	r3, #48	; 0x30
 80054fa:	d86b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x170>
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d060      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x15e>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d867      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x170>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d05c      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x15e>
 8005508:	2b10      	cmp	r3, #16
 800550a:	d05a      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x15e>
 800550c:	e062      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6899      	ldr	r1, [r3, #8]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f000 fd52 	bl	8005fc6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	609a      	str	r2, [r3, #8]
      break;
 800553a:	e04f      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6899      	ldr	r1, [r3, #8]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f000 fd3b 	bl	8005fc6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800555e:	609a      	str	r2, [r3, #8]
      break;
 8005560:	e03c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	461a      	mov	r2, r3
 8005570:	f000 fcaf 	bl	8005ed2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2150      	movs	r1, #80	; 0x50
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fd08 	bl	8005f90 <TIM_ITRx_SetConfig>
      break;
 8005580:	e02c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	461a      	mov	r2, r3
 8005590:	f000 fcce 	bl	8005f30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2160      	movs	r1, #96	; 0x60
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fcf8 	bl	8005f90 <TIM_ITRx_SetConfig>
      break;
 80055a0:	e01c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 fc8f 	bl	8005ed2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2140      	movs	r1, #64	; 0x40
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fce8 	bl	8005f90 <TIM_ITRx_SetConfig>
      break;
 80055c0:	e00c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f000 fcdf 	bl	8005f90 <TIM_ITRx_SetConfig>
      break;
 80055d2:	e003      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      break;
 80055d8:	e000      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_TIM_SlaveConfigSynchro+0x18>
 800560a:	2302      	movs	r3, #2
 800560c:	e031      	b.n	8005672 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fbc3 	bl	8005dac <TIM_SlaveTimer_SetConfig>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e018      	b.n	8005672 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800565e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a3c      	ldr	r2, [pc, #240]	; (80057e4 <TIM_Base_SetConfig+0x104>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00f      	beq.n	8005718 <TIM_Base_SetConfig+0x38>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fe:	d00b      	beq.n	8005718 <TIM_Base_SetConfig+0x38>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a39      	ldr	r2, [pc, #228]	; (80057e8 <TIM_Base_SetConfig+0x108>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d007      	beq.n	8005718 <TIM_Base_SetConfig+0x38>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a38      	ldr	r2, [pc, #224]	; (80057ec <TIM_Base_SetConfig+0x10c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0x38>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a37      	ldr	r2, [pc, #220]	; (80057f0 <TIM_Base_SetConfig+0x110>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d108      	bne.n	800572a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2d      	ldr	r2, [pc, #180]	; (80057e4 <TIM_Base_SetConfig+0x104>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01b      	beq.n	800576a <TIM_Base_SetConfig+0x8a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005738:	d017      	beq.n	800576a <TIM_Base_SetConfig+0x8a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <TIM_Base_SetConfig+0x108>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <TIM_Base_SetConfig+0x8a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a29      	ldr	r2, [pc, #164]	; (80057ec <TIM_Base_SetConfig+0x10c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00f      	beq.n	800576a <TIM_Base_SetConfig+0x8a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a28      	ldr	r2, [pc, #160]	; (80057f0 <TIM_Base_SetConfig+0x110>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_Base_SetConfig+0x8a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <TIM_Base_SetConfig+0x114>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <TIM_Base_SetConfig+0x118>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a25      	ldr	r2, [pc, #148]	; (80057fc <TIM_Base_SetConfig+0x11c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d108      	bne.n	800577c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a10      	ldr	r2, [pc, #64]	; (80057e4 <TIM_Base_SetConfig+0x104>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00f      	beq.n	80057c8 <TIM_Base_SetConfig+0xe8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a11      	ldr	r2, [pc, #68]	; (80057f0 <TIM_Base_SetConfig+0x110>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <TIM_Base_SetConfig+0xe8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a10      	ldr	r2, [pc, #64]	; (80057f4 <TIM_Base_SetConfig+0x114>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d007      	beq.n	80057c8 <TIM_Base_SetConfig+0xe8>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a0f      	ldr	r2, [pc, #60]	; (80057f8 <TIM_Base_SetConfig+0x118>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_Base_SetConfig+0xe8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a0e      	ldr	r2, [pc, #56]	; (80057fc <TIM_Base_SetConfig+0x11c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d103      	bne.n	80057d0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	615a      	str	r2, [r3, #20]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800

08005800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 0302 	bic.w	r3, r3, #2
 800584c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a2c      	ldr	r2, [pc, #176]	; (800590c <TIM_OC1_SetConfig+0x10c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00f      	beq.n	8005880 <TIM_OC1_SetConfig+0x80>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a2b      	ldr	r2, [pc, #172]	; (8005910 <TIM_OC1_SetConfig+0x110>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_OC1_SetConfig+0x80>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a2a      	ldr	r2, [pc, #168]	; (8005914 <TIM_OC1_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_OC1_SetConfig+0x80>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a29      	ldr	r2, [pc, #164]	; (8005918 <TIM_OC1_SetConfig+0x118>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC1_SetConfig+0x80>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a28      	ldr	r2, [pc, #160]	; (800591c <TIM_OC1_SetConfig+0x11c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10c      	bne.n	800589a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0308 	bic.w	r3, r3, #8
 8005886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f023 0304 	bic.w	r3, r3, #4
 8005898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1b      	ldr	r2, [pc, #108]	; (800590c <TIM_OC1_SetConfig+0x10c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00f      	beq.n	80058c2 <TIM_OC1_SetConfig+0xc2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1a      	ldr	r2, [pc, #104]	; (8005910 <TIM_OC1_SetConfig+0x110>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00b      	beq.n	80058c2 <TIM_OC1_SetConfig+0xc2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a19      	ldr	r2, [pc, #100]	; (8005914 <TIM_OC1_SetConfig+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <TIM_OC1_SetConfig+0xc2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a18      	ldr	r2, [pc, #96]	; (8005918 <TIM_OC1_SetConfig+0x118>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_OC1_SetConfig+0xc2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a17      	ldr	r2, [pc, #92]	; (800591c <TIM_OC1_SetConfig+0x11c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d111      	bne.n	80058e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	621a      	str	r2, [r3, #32]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40012c00 	.word	0x40012c00
 8005910:	40013400 	.word	0x40013400
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f023 0210 	bic.w	r2, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0320 	bic.w	r3, r3, #32
 800596e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <TIM_OC2_SetConfig+0x100>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC2_SetConfig+0x6c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <TIM_OC2_SetConfig+0x104>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10d      	bne.n	80059a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a1d      	ldr	r2, [pc, #116]	; (8005a20 <TIM_OC2_SetConfig+0x100>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00f      	beq.n	80059d0 <TIM_OC2_SetConfig+0xb0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a1c      	ldr	r2, [pc, #112]	; (8005a24 <TIM_OC2_SetConfig+0x104>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <TIM_OC2_SetConfig+0xb0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <TIM_OC2_SetConfig+0x108>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_OC2_SetConfig+0xb0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a1a      	ldr	r2, [pc, #104]	; (8005a2c <TIM_OC2_SetConfig+0x10c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC2_SetConfig+0xb0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a19      	ldr	r2, [pc, #100]	; (8005a30 <TIM_OC2_SetConfig+0x110>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d113      	bne.n	80059f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059de:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40013400 	.word	0x40013400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800

08005a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a27      	ldr	r2, [pc, #156]	; (8005b30 <TIM_OC3_SetConfig+0xfc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC3_SetConfig+0x6a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a26      	ldr	r2, [pc, #152]	; (8005b34 <TIM_OC3_SetConfig+0x100>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d10d      	bne.n	8005aba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <TIM_OC3_SetConfig+0xfc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00f      	beq.n	8005ae2 <TIM_OC3_SetConfig+0xae>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	; (8005b34 <TIM_OC3_SetConfig+0x100>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00b      	beq.n	8005ae2 <TIM_OC3_SetConfig+0xae>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a1a      	ldr	r2, [pc, #104]	; (8005b38 <TIM_OC3_SetConfig+0x104>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d007      	beq.n	8005ae2 <TIM_OC3_SetConfig+0xae>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a19      	ldr	r2, [pc, #100]	; (8005b3c <TIM_OC3_SetConfig+0x108>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_OC3_SetConfig+0xae>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <TIM_OC3_SetConfig+0x10c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d113      	bne.n	8005b0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	621a      	str	r2, [r3, #32]
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40013400 	.word	0x40013400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800

08005b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	031b      	lsls	r3, r3, #12
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <TIM_OC4_SetConfig+0xc0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00f      	beq.n	8005bc8 <TIM_OC4_SetConfig+0x84>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <TIM_OC4_SetConfig+0xc4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <TIM_OC4_SetConfig+0x84>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <TIM_OC4_SetConfig+0xc8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <TIM_OC4_SetConfig+0x84>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <TIM_OC4_SetConfig+0xcc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_OC4_SetConfig+0x84>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a14      	ldr	r2, [pc, #80]	; (8005c14 <TIM_OC4_SetConfig+0xd0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d109      	bne.n	8005bdc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	019b      	lsls	r3, r3, #6
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40013400 	.word	0x40013400
 8005c0c:	40014000 	.word	0x40014000
 8005c10:	40014400 	.word	0x40014400
 8005c14:	40014800 	.word	0x40014800

08005c18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <TIM_OC5_SetConfig+0xb4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00f      	beq.n	8005c92 <TIM_OC5_SetConfig+0x7a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <TIM_OC5_SetConfig+0xb8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00b      	beq.n	8005c92 <TIM_OC5_SetConfig+0x7a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <TIM_OC5_SetConfig+0xbc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d007      	beq.n	8005c92 <TIM_OC5_SetConfig+0x7a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <TIM_OC5_SetConfig+0xc0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_OC5_SetConfig+0x7a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <TIM_OC5_SetConfig+0xc4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d109      	bne.n	8005ca6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40013400 	.word	0x40013400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400
 8005cdc:	40014800 	.word	0x40014800

08005ce0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	051b      	lsls	r3, r3, #20
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <TIM_OC6_SetConfig+0xb8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00f      	beq.n	8005d5c <TIM_OC6_SetConfig+0x7c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a17      	ldr	r2, [pc, #92]	; (8005d9c <TIM_OC6_SetConfig+0xbc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00b      	beq.n	8005d5c <TIM_OC6_SetConfig+0x7c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <TIM_OC6_SetConfig+0xc0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d007      	beq.n	8005d5c <TIM_OC6_SetConfig+0x7c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <TIM_OC6_SetConfig+0xc4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_OC6_SetConfig+0x7c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a14      	ldr	r2, [pc, #80]	; (8005da8 <TIM_OC6_SetConfig+0xc8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d109      	bne.n	8005d70 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	029b      	lsls	r3, r3, #10
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	40013400 	.word	0x40013400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800

08005dac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b70      	cmp	r3, #112	; 0x70
 8005df8:	d01a      	beq.n	8005e30 <TIM_SlaveTimer_SetConfig+0x84>
 8005dfa:	2b70      	cmp	r3, #112	; 0x70
 8005dfc:	d860      	bhi.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x114>
 8005dfe:	2b60      	cmp	r3, #96	; 0x60
 8005e00:	d054      	beq.n	8005eac <TIM_SlaveTimer_SetConfig+0x100>
 8005e02:	2b60      	cmp	r3, #96	; 0x60
 8005e04:	d85c      	bhi.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x114>
 8005e06:	2b50      	cmp	r3, #80	; 0x50
 8005e08:	d046      	beq.n	8005e98 <TIM_SlaveTimer_SetConfig+0xec>
 8005e0a:	2b50      	cmp	r3, #80	; 0x50
 8005e0c:	d858      	bhi.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x114>
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d019      	beq.n	8005e46 <TIM_SlaveTimer_SetConfig+0x9a>
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d854      	bhi.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x114>
 8005e16:	2b30      	cmp	r3, #48	; 0x30
 8005e18:	d055      	beq.n	8005ec6 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e1a:	2b30      	cmp	r3, #48	; 0x30
 8005e1c:	d850      	bhi.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x114>
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d051      	beq.n	8005ec6 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e22:	2b20      	cmp	r3, #32
 8005e24:	d84c      	bhi.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x114>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d04d      	beq.n	8005ec6 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d04b      	beq.n	8005ec6 <TIM_SlaveTimer_SetConfig+0x11a>
 8005e2e:	e047      	b.n	8005ec0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	68d9      	ldr	r1, [r3, #12]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f000 f8c1 	bl	8005fc6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005e44:	e040      	b.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b05      	cmp	r3, #5
 8005e4c:	d101      	bne.n	8005e52 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e03b      	b.n	8005eca <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0201 	bic.w	r2, r2, #1
 8005e68:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e78:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
      break;
 8005e96:	e017      	b.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6899      	ldr	r1, [r3, #8]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f000 f814 	bl	8005ed2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005eaa:	e00d      	b.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	6899      	ldr	r1, [r3, #8]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f000 f839 	bl	8005f30 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005ebe:	e003      	b.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec4:	e000      	b.n	8005ec8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005ec6:	bf00      	nop
  }

  return status;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f023 0201 	bic.w	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 030a 	bic.w	r3, r3, #10
 8005f0e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	621a      	str	r2, [r3, #32]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f023 0210 	bic.w	r2, r3, #16
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	031b      	lsls	r3, r3, #12
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f043 0307 	orr.w	r3, r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	609a      	str	r2, [r3, #8]
}
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b087      	sub	sp, #28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	021a      	lsls	r2, r3, #8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	609a      	str	r2, [r3, #8]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006006:	b480      	push	{r7}
 8006008:	b087      	sub	sp, #28
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2201      	movs	r2, #1
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1a      	ldr	r2, [r3, #32]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	43db      	mvns	r3, r3
 8006028:	401a      	ands	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1a      	ldr	r2, [r3, #32]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	fa01 f303 	lsl.w	r3, r1, r3
 800603e:	431a      	orrs	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006064:	2302      	movs	r3, #2
 8006066:	e063      	b.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2b      	ldr	r2, [pc, #172]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d108      	bne.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1b      	ldr	r2, [pc, #108]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d013      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a18      	ldr	r2, [pc, #96]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a17      	ldr	r2, [pc, #92]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a12      	ldr	r2, [pc, #72]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a13      	ldr	r2, [pc, #76]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d10c      	bne.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	4313      	orrs	r3, r2
 8006114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	40012c00 	.word	0x40012c00
 8006140:	40013400 	.word	0x40013400
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40014000 	.word	0x40014000

08006150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006168:	2302      	movs	r3, #2
 800616a:	e065      	b.n	8006238 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a16      	ldr	r2, [pc, #88]	; (8006244 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a14      	ldr	r2, [pc, #80]	; (8006248 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d115      	bne.n	8006226 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	051b      	lsls	r3, r3, #20
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40013400 	.word	0x40013400

0800624c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e040      	b.n	800631c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fa fee4 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2224      	movs	r2, #36	; 0x24
 80062b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f8b6 	bl	8006438 <UART_SetConfig>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e022      	b.n	800631c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa7c 	bl	80067dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fb03 	bl	8006920 <UART_CheckIdleState>
 800631a:	4603      	mov	r3, r0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	; 0x28
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006338:	2b20      	cmp	r3, #32
 800633a:	d178      	bne.n	800642e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_UART_Transmit+0x24>
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e071      	b.n	8006430 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2221      	movs	r2, #33	; 0x21
 8006358:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800635a:	f7fb f8d1 	bl	8001500 <HAL_GetTick>
 800635e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006378:	d108      	bne.n	800638c <HAL_UART_Transmit+0x68>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	e003      	b.n	8006394 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006394:	e030      	b.n	80063f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	2180      	movs	r1, #128	; 0x80
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fb65 	bl	8006a70 <UART_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e03c      	b.n	8006430 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	881a      	ldrh	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063c8:	b292      	uxth	r2, r2
 80063ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	3302      	adds	r3, #2
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	e008      	b.n	80063e6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	b292      	uxth	r2, r2
 80063de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	3301      	adds	r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1c8      	bne.n	8006396 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2200      	movs	r2, #0
 800640c:	2140      	movs	r1, #64	; 0x40
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fb2e 	bl	8006a70 <UART_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e005      	b.n	8006430 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006466:	f023 030c 	bic.w	r3, r3, #12
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	6979      	ldr	r1, [r7, #20]
 8006470:	430b      	orrs	r3, r1
 8006472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4aad      	ldr	r2, [pc, #692]	; (8006768 <UART_SetConfig+0x330>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d120      	bne.n	80064fa <UART_SetConfig+0xc2>
 80064b8:	4bac      	ldr	r3, [pc, #688]	; (800676c <UART_SetConfig+0x334>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	f003 0303 	and.w	r3, r3, #3
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d817      	bhi.n	80064f4 <UART_SetConfig+0xbc>
 80064c4:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <UART_SetConfig+0x94>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	080064e9 	.word	0x080064e9
 80064d4:	080064ef 	.word	0x080064ef
 80064d8:	080064e3 	.word	0x080064e3
 80064dc:	2301      	movs	r3, #1
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e0b5      	b.n	800664e <UART_SetConfig+0x216>
 80064e2:	2302      	movs	r3, #2
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e0b2      	b.n	800664e <UART_SetConfig+0x216>
 80064e8:	2304      	movs	r3, #4
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e0af      	b.n	800664e <UART_SetConfig+0x216>
 80064ee:	2308      	movs	r3, #8
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e0ac      	b.n	800664e <UART_SetConfig+0x216>
 80064f4:	2310      	movs	r3, #16
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e0a9      	b.n	800664e <UART_SetConfig+0x216>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a9c      	ldr	r2, [pc, #624]	; (8006770 <UART_SetConfig+0x338>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d124      	bne.n	800654e <UART_SetConfig+0x116>
 8006504:	4b99      	ldr	r3, [pc, #612]	; (800676c <UART_SetConfig+0x334>)
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800650c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006510:	d011      	beq.n	8006536 <UART_SetConfig+0xfe>
 8006512:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006516:	d817      	bhi.n	8006548 <UART_SetConfig+0x110>
 8006518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651c:	d011      	beq.n	8006542 <UART_SetConfig+0x10a>
 800651e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006522:	d811      	bhi.n	8006548 <UART_SetConfig+0x110>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <UART_SetConfig+0xf8>
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d006      	beq.n	800653c <UART_SetConfig+0x104>
 800652e:	e00b      	b.n	8006548 <UART_SetConfig+0x110>
 8006530:	2300      	movs	r3, #0
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e08b      	b.n	800664e <UART_SetConfig+0x216>
 8006536:	2302      	movs	r3, #2
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e088      	b.n	800664e <UART_SetConfig+0x216>
 800653c:	2304      	movs	r3, #4
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e085      	b.n	800664e <UART_SetConfig+0x216>
 8006542:	2308      	movs	r3, #8
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e082      	b.n	800664e <UART_SetConfig+0x216>
 8006548:	2310      	movs	r3, #16
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	e07f      	b.n	800664e <UART_SetConfig+0x216>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a88      	ldr	r2, [pc, #544]	; (8006774 <UART_SetConfig+0x33c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d124      	bne.n	80065a2 <UART_SetConfig+0x16a>
 8006558:	4b84      	ldr	r3, [pc, #528]	; (800676c <UART_SetConfig+0x334>)
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006560:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006564:	d011      	beq.n	800658a <UART_SetConfig+0x152>
 8006566:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800656a:	d817      	bhi.n	800659c <UART_SetConfig+0x164>
 800656c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006570:	d011      	beq.n	8006596 <UART_SetConfig+0x15e>
 8006572:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006576:	d811      	bhi.n	800659c <UART_SetConfig+0x164>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <UART_SetConfig+0x14c>
 800657c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006580:	d006      	beq.n	8006590 <UART_SetConfig+0x158>
 8006582:	e00b      	b.n	800659c <UART_SetConfig+0x164>
 8006584:	2300      	movs	r3, #0
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e061      	b.n	800664e <UART_SetConfig+0x216>
 800658a:	2302      	movs	r3, #2
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e05e      	b.n	800664e <UART_SetConfig+0x216>
 8006590:	2304      	movs	r3, #4
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e05b      	b.n	800664e <UART_SetConfig+0x216>
 8006596:	2308      	movs	r3, #8
 8006598:	77fb      	strb	r3, [r7, #31]
 800659a:	e058      	b.n	800664e <UART_SetConfig+0x216>
 800659c:	2310      	movs	r3, #16
 800659e:	77fb      	strb	r3, [r7, #31]
 80065a0:	e055      	b.n	800664e <UART_SetConfig+0x216>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a74      	ldr	r2, [pc, #464]	; (8006778 <UART_SetConfig+0x340>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d124      	bne.n	80065f6 <UART_SetConfig+0x1be>
 80065ac:	4b6f      	ldr	r3, [pc, #444]	; (800676c <UART_SetConfig+0x334>)
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80065b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b8:	d011      	beq.n	80065de <UART_SetConfig+0x1a6>
 80065ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065be:	d817      	bhi.n	80065f0 <UART_SetConfig+0x1b8>
 80065c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c4:	d011      	beq.n	80065ea <UART_SetConfig+0x1b2>
 80065c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ca:	d811      	bhi.n	80065f0 <UART_SetConfig+0x1b8>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <UART_SetConfig+0x1a0>
 80065d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d4:	d006      	beq.n	80065e4 <UART_SetConfig+0x1ac>
 80065d6:	e00b      	b.n	80065f0 <UART_SetConfig+0x1b8>
 80065d8:	2300      	movs	r3, #0
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e037      	b.n	800664e <UART_SetConfig+0x216>
 80065de:	2302      	movs	r3, #2
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e034      	b.n	800664e <UART_SetConfig+0x216>
 80065e4:	2304      	movs	r3, #4
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e031      	b.n	800664e <UART_SetConfig+0x216>
 80065ea:	2308      	movs	r3, #8
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	e02e      	b.n	800664e <UART_SetConfig+0x216>
 80065f0:	2310      	movs	r3, #16
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e02b      	b.n	800664e <UART_SetConfig+0x216>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a60      	ldr	r2, [pc, #384]	; (800677c <UART_SetConfig+0x344>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d124      	bne.n	800664a <UART_SetConfig+0x212>
 8006600:	4b5a      	ldr	r3, [pc, #360]	; (800676c <UART_SetConfig+0x334>)
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800660c:	d011      	beq.n	8006632 <UART_SetConfig+0x1fa>
 800660e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006612:	d817      	bhi.n	8006644 <UART_SetConfig+0x20c>
 8006614:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006618:	d011      	beq.n	800663e <UART_SetConfig+0x206>
 800661a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800661e:	d811      	bhi.n	8006644 <UART_SetConfig+0x20c>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <UART_SetConfig+0x1f4>
 8006624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006628:	d006      	beq.n	8006638 <UART_SetConfig+0x200>
 800662a:	e00b      	b.n	8006644 <UART_SetConfig+0x20c>
 800662c:	2300      	movs	r3, #0
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e00d      	b.n	800664e <UART_SetConfig+0x216>
 8006632:	2302      	movs	r3, #2
 8006634:	77fb      	strb	r3, [r7, #31]
 8006636:	e00a      	b.n	800664e <UART_SetConfig+0x216>
 8006638:	2304      	movs	r3, #4
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e007      	b.n	800664e <UART_SetConfig+0x216>
 800663e:	2308      	movs	r3, #8
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e004      	b.n	800664e <UART_SetConfig+0x216>
 8006644:	2310      	movs	r3, #16
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e001      	b.n	800664e <UART_SetConfig+0x216>
 800664a:	2310      	movs	r3, #16
 800664c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006656:	d15b      	bne.n	8006710 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8006658:	7ffb      	ldrb	r3, [r7, #31]
 800665a:	2b08      	cmp	r3, #8
 800665c:	d827      	bhi.n	80066ae <UART_SetConfig+0x276>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x22c>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
 8006670:	080066af 	.word	0x080066af
 8006674:	0800669f 	.word	0x0800669f
 8006678:	080066af 	.word	0x080066af
 800667c:	080066af 	.word	0x080066af
 8006680:	080066af 	.word	0x080066af
 8006684:	080066a7 	.word	0x080066a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006688:	f7fd ffaa 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 800668c:	61b8      	str	r0, [r7, #24]
        break;
 800668e:	e013      	b.n	80066b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006690:	f7fd ffc8 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 8006694:	61b8      	str	r0, [r7, #24]
        break;
 8006696:	e00f      	b.n	80066b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006698:	4b39      	ldr	r3, [pc, #228]	; (8006780 <UART_SetConfig+0x348>)
 800669a:	61bb      	str	r3, [r7, #24]
        break;
 800669c:	e00c      	b.n	80066b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669e:	f7fd ff27 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 80066a2:	61b8      	str	r0, [r7, #24]
        break;
 80066a4:	e008      	b.n	80066b8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066aa:	61bb      	str	r3, [r7, #24]
        break;
 80066ac:	e004      	b.n	80066b8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	77bb      	strb	r3, [r7, #30]
        break;
 80066b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 8083 	beq.w	80067c6 <UART_SetConfig+0x38e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	005a      	lsls	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	085b      	lsrs	r3, r3, #1
 80066ca:	441a      	add	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	2b0f      	cmp	r3, #15
 80066da:	d916      	bls.n	800670a <UART_SetConfig+0x2d2>
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e2:	d212      	bcs.n	800670a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f023 030f 	bic.w	r3, r3, #15
 80066ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	89fb      	ldrh	r3, [r7, #14]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	89fa      	ldrh	r2, [r7, #14]
 8006706:	60da      	str	r2, [r3, #12]
 8006708:	e05d      	b.n	80067c6 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	77bb      	strb	r3, [r7, #30]
 800670e:	e05a      	b.n	80067c6 <UART_SetConfig+0x38e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006710:	7ffb      	ldrb	r3, [r7, #31]
 8006712:	2b08      	cmp	r3, #8
 8006714:	d836      	bhi.n	8006784 <UART_SetConfig+0x34c>
 8006716:	a201      	add	r2, pc, #4	; (adr r2, 800671c <UART_SetConfig+0x2e4>)
 8006718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671c:	08006741 	.word	0x08006741
 8006720:	08006749 	.word	0x08006749
 8006724:	08006751 	.word	0x08006751
 8006728:	08006785 	.word	0x08006785
 800672c:	08006757 	.word	0x08006757
 8006730:	08006785 	.word	0x08006785
 8006734:	08006785 	.word	0x08006785
 8006738:	08006785 	.word	0x08006785
 800673c:	0800675f 	.word	0x0800675f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006740:	f7fd ff4e 	bl	80045e0 <HAL_RCC_GetPCLK1Freq>
 8006744:	61b8      	str	r0, [r7, #24]
        break;
 8006746:	e022      	b.n	800678e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006748:	f7fd ff6c 	bl	8004624 <HAL_RCC_GetPCLK2Freq>
 800674c:	61b8      	str	r0, [r7, #24]
        break;
 800674e:	e01e      	b.n	800678e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <UART_SetConfig+0x348>)
 8006752:	61bb      	str	r3, [r7, #24]
        break;
 8006754:	e01b      	b.n	800678e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006756:	f7fd fecb 	bl	80044f0 <HAL_RCC_GetSysClockFreq>
 800675a:	61b8      	str	r0, [r7, #24]
        break;
 800675c:	e017      	b.n	800678e <UART_SetConfig+0x356>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006762:	61bb      	str	r3, [r7, #24]
        break;
 8006764:	e013      	b.n	800678e <UART_SetConfig+0x356>
 8006766:	bf00      	nop
 8006768:	40013800 	.word	0x40013800
 800676c:	40021000 	.word	0x40021000
 8006770:	40004400 	.word	0x40004400
 8006774:	40004800 	.word	0x40004800
 8006778:	40004c00 	.word	0x40004c00
 800677c:	40005000 	.word	0x40005000
 8006780:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	77bb      	strb	r3, [r7, #30]
        break;
 800678c:	bf00      	nop
    }

    if (pclk != 0U)
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d018      	beq.n	80067c6 <UART_SetConfig+0x38e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	085a      	lsrs	r2, r3, #1
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	441a      	add	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b0f      	cmp	r3, #15
 80067ac:	d909      	bls.n	80067c2 <UART_SetConfig+0x38a>
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b4:	d205      	bcs.n	80067c2 <UART_SetConfig+0x38a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60da      	str	r2, [r3, #12]
 80067c0:	e001      	b.n	80067c6 <UART_SetConfig+0x38e>
      }
      else
      {
        ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80067d2:	7fbb      	ldrb	r3, [r7, #30]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068da:	d10a      	bne.n	80068f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b098      	sub	sp, #96	; 0x60
 8006924:	af02      	add	r7, sp, #8
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006930:	f7fa fde6 	bl	8001500 <HAL_GetTick>
 8006934:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b08      	cmp	r3, #8
 8006942:	d12e      	bne.n	80069a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694c:	2200      	movs	r2, #0
 800694e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f88c 	bl	8006a70 <UART_WaitOnFlagUntilTimeout>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d021      	beq.n	80069a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006972:	653b      	str	r3, [r7, #80]	; 0x50
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697c:	647b      	str	r3, [r7, #68]	; 0x44
 800697e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800698a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e6      	bne.n	800695e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e062      	b.n	8006a68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d149      	bne.n	8006a44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b8:	2200      	movs	r2, #0
 80069ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f856 	bl	8006a70 <UART_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d03c      	beq.n	8006a44 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	623b      	str	r3, [r7, #32]
   return(result);
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e8:	633b      	str	r3, [r7, #48]	; 0x30
 80069ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e6      	bne.n	80069ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3308      	adds	r3, #8
 8006a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a1c:	61fa      	str	r2, [r7, #28]
 8006a1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	69b9      	ldr	r1, [r7, #24]
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	617b      	str	r3, [r7, #20]
   return(result);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e5      	bne.n	80069fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e011      	b.n	8006a68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3758      	adds	r7, #88	; 0x58
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a80:	e049      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a88:	d045      	beq.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8a:	f7fa fd39 	bl	8001500 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d302      	bcc.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e048      	b.n	8006b36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d031      	beq.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d110      	bne.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2208      	movs	r2, #8
 8006ac6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f838 	bl	8006b3e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e029      	b.n	8006b36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af0:	d111      	bne.n	8006b16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f81e 	bl	8006b3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e00f      	b.n	8006b36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	bf0c      	ite	eq
 8006b26:	2301      	moveq	r3, #1
 8006b28:	2300      	movne	r3, #0
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d0a6      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b095      	sub	sp, #84	; 0x54
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b64:	643b      	str	r3, [r7, #64]	; 0x40
 8006b66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e6      	bne.n	8006b46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e5      	bne.n	8006b78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d118      	bne.n	8006be6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f023 0310 	bic.w	r3, r3, #16
 8006bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6979      	ldr	r1, [r7, #20]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	613b      	str	r3, [r7, #16]
   return(result);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e6      	bne.n	8006bb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006bfa:	bf00      	nop
 8006bfc:	3754      	adds	r7, #84	; 0x54
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <__errno>:
 8006c08:	4b01      	ldr	r3, [pc, #4]	; (8006c10 <__errno+0x8>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	2000000c 	.word	0x2000000c

08006c14 <__libc_init_array>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	4d0d      	ldr	r5, [pc, #52]	; (8006c4c <__libc_init_array+0x38>)
 8006c18:	4c0d      	ldr	r4, [pc, #52]	; (8006c50 <__libc_init_array+0x3c>)
 8006c1a:	1b64      	subs	r4, r4, r5
 8006c1c:	10a4      	asrs	r4, r4, #2
 8006c1e:	2600      	movs	r6, #0
 8006c20:	42a6      	cmp	r6, r4
 8006c22:	d109      	bne.n	8006c38 <__libc_init_array+0x24>
 8006c24:	4d0b      	ldr	r5, [pc, #44]	; (8006c54 <__libc_init_array+0x40>)
 8006c26:	4c0c      	ldr	r4, [pc, #48]	; (8006c58 <__libc_init_array+0x44>)
 8006c28:	f000 fc4e 	bl	80074c8 <_init>
 8006c2c:	1b64      	subs	r4, r4, r5
 8006c2e:	10a4      	asrs	r4, r4, #2
 8006c30:	2600      	movs	r6, #0
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	d105      	bne.n	8006c42 <__libc_init_array+0x2e>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3c:	4798      	blx	r3
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7ee      	b.n	8006c20 <__libc_init_array+0xc>
 8006c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c46:	4798      	blx	r3
 8006c48:	3601      	adds	r6, #1
 8006c4a:	e7f2      	b.n	8006c32 <__libc_init_array+0x1e>
 8006c4c:	08007580 	.word	0x08007580
 8006c50:	08007580 	.word	0x08007580
 8006c54:	08007580 	.word	0x08007580
 8006c58:	08007584 	.word	0x08007584

08006c5c <memset>:
 8006c5c:	4402      	add	r2, r0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d100      	bne.n	8006c66 <memset+0xa>
 8006c64:	4770      	bx	lr
 8006c66:	f803 1b01 	strb.w	r1, [r3], #1
 8006c6a:	e7f9      	b.n	8006c60 <memset+0x4>

08006c6c <siprintf>:
 8006c6c:	b40e      	push	{r1, r2, r3}
 8006c6e:	b500      	push	{lr}
 8006c70:	b09c      	sub	sp, #112	; 0x70
 8006c72:	ab1d      	add	r3, sp, #116	; 0x74
 8006c74:	9002      	str	r0, [sp, #8]
 8006c76:	9006      	str	r0, [sp, #24]
 8006c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c7c:	4809      	ldr	r0, [pc, #36]	; (8006ca4 <siprintf+0x38>)
 8006c7e:	9107      	str	r1, [sp, #28]
 8006c80:	9104      	str	r1, [sp, #16]
 8006c82:	4909      	ldr	r1, [pc, #36]	; (8006ca8 <siprintf+0x3c>)
 8006c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c88:	9105      	str	r1, [sp, #20]
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	a902      	add	r1, sp, #8
 8006c90:	f000 f868 	bl	8006d64 <_svfiprintf_r>
 8006c94:	9b02      	ldr	r3, [sp, #8]
 8006c96:	2200      	movs	r2, #0
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	b01c      	add	sp, #112	; 0x70
 8006c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca0:	b003      	add	sp, #12
 8006ca2:	4770      	bx	lr
 8006ca4:	2000000c 	.word	0x2000000c
 8006ca8:	ffff0208 	.word	0xffff0208

08006cac <__ssputs_r>:
 8006cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb0:	688e      	ldr	r6, [r1, #8]
 8006cb2:	429e      	cmp	r6, r3
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	4690      	mov	r8, r2
 8006cba:	461f      	mov	r7, r3
 8006cbc:	d838      	bhi.n	8006d30 <__ssputs_r+0x84>
 8006cbe:	898a      	ldrh	r2, [r1, #12]
 8006cc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cc4:	d032      	beq.n	8006d2c <__ssputs_r+0x80>
 8006cc6:	6825      	ldr	r5, [r4, #0]
 8006cc8:	6909      	ldr	r1, [r1, #16]
 8006cca:	eba5 0901 	sub.w	r9, r5, r1
 8006cce:	6965      	ldr	r5, [r4, #20]
 8006cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cd8:	3301      	adds	r3, #1
 8006cda:	444b      	add	r3, r9
 8006cdc:	106d      	asrs	r5, r5, #1
 8006cde:	429d      	cmp	r5, r3
 8006ce0:	bf38      	it	cc
 8006ce2:	461d      	movcc	r5, r3
 8006ce4:	0553      	lsls	r3, r2, #21
 8006ce6:	d531      	bpl.n	8006d4c <__ssputs_r+0xa0>
 8006ce8:	4629      	mov	r1, r5
 8006cea:	f000 fb47 	bl	800737c <_malloc_r>
 8006cee:	4606      	mov	r6, r0
 8006cf0:	b950      	cbnz	r0, 8006d08 <__ssputs_r+0x5c>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	f8ca 3000 	str.w	r3, [sl]
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d08:	6921      	ldr	r1, [r4, #16]
 8006d0a:	464a      	mov	r2, r9
 8006d0c:	f000 fabe 	bl	800728c <memcpy>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	6126      	str	r6, [r4, #16]
 8006d1e:	6165      	str	r5, [r4, #20]
 8006d20:	444e      	add	r6, r9
 8006d22:	eba5 0509 	sub.w	r5, r5, r9
 8006d26:	6026      	str	r6, [r4, #0]
 8006d28:	60a5      	str	r5, [r4, #8]
 8006d2a:	463e      	mov	r6, r7
 8006d2c:	42be      	cmp	r6, r7
 8006d2e:	d900      	bls.n	8006d32 <__ssputs_r+0x86>
 8006d30:	463e      	mov	r6, r7
 8006d32:	4632      	mov	r2, r6
 8006d34:	6820      	ldr	r0, [r4, #0]
 8006d36:	4641      	mov	r1, r8
 8006d38:	f000 fab6 	bl	80072a8 <memmove>
 8006d3c:	68a3      	ldr	r3, [r4, #8]
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	1b9b      	subs	r3, r3, r6
 8006d42:	4432      	add	r2, r6
 8006d44:	60a3      	str	r3, [r4, #8]
 8006d46:	6022      	str	r2, [r4, #0]
 8006d48:	2000      	movs	r0, #0
 8006d4a:	e7db      	b.n	8006d04 <__ssputs_r+0x58>
 8006d4c:	462a      	mov	r2, r5
 8006d4e:	f000 fb6f 	bl	8007430 <_realloc_r>
 8006d52:	4606      	mov	r6, r0
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d1e1      	bne.n	8006d1c <__ssputs_r+0x70>
 8006d58:	6921      	ldr	r1, [r4, #16]
 8006d5a:	4650      	mov	r0, sl
 8006d5c:	f000 fabe 	bl	80072dc <_free_r>
 8006d60:	e7c7      	b.n	8006cf2 <__ssputs_r+0x46>
	...

08006d64 <_svfiprintf_r>:
 8006d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d68:	4698      	mov	r8, r3
 8006d6a:	898b      	ldrh	r3, [r1, #12]
 8006d6c:	061b      	lsls	r3, r3, #24
 8006d6e:	b09d      	sub	sp, #116	; 0x74
 8006d70:	4607      	mov	r7, r0
 8006d72:	460d      	mov	r5, r1
 8006d74:	4614      	mov	r4, r2
 8006d76:	d50e      	bpl.n	8006d96 <_svfiprintf_r+0x32>
 8006d78:	690b      	ldr	r3, [r1, #16]
 8006d7a:	b963      	cbnz	r3, 8006d96 <_svfiprintf_r+0x32>
 8006d7c:	2140      	movs	r1, #64	; 0x40
 8006d7e:	f000 fafd 	bl	800737c <_malloc_r>
 8006d82:	6028      	str	r0, [r5, #0]
 8006d84:	6128      	str	r0, [r5, #16]
 8006d86:	b920      	cbnz	r0, 8006d92 <_svfiprintf_r+0x2e>
 8006d88:	230c      	movs	r3, #12
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d90:	e0d1      	b.n	8006f36 <_svfiprintf_r+0x1d2>
 8006d92:	2340      	movs	r3, #64	; 0x40
 8006d94:	616b      	str	r3, [r5, #20]
 8006d96:	2300      	movs	r3, #0
 8006d98:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9a:	2320      	movs	r3, #32
 8006d9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006da4:	2330      	movs	r3, #48	; 0x30
 8006da6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f50 <_svfiprintf_r+0x1ec>
 8006daa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dae:	f04f 0901 	mov.w	r9, #1
 8006db2:	4623      	mov	r3, r4
 8006db4:	469a      	mov	sl, r3
 8006db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dba:	b10a      	cbz	r2, 8006dc0 <_svfiprintf_r+0x5c>
 8006dbc:	2a25      	cmp	r2, #37	; 0x25
 8006dbe:	d1f9      	bne.n	8006db4 <_svfiprintf_r+0x50>
 8006dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8006dc4:	d00b      	beq.n	8006dde <_svfiprintf_r+0x7a>
 8006dc6:	465b      	mov	r3, fp
 8006dc8:	4622      	mov	r2, r4
 8006dca:	4629      	mov	r1, r5
 8006dcc:	4638      	mov	r0, r7
 8006dce:	f7ff ff6d 	bl	8006cac <__ssputs_r>
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	f000 80aa 	beq.w	8006f2c <_svfiprintf_r+0x1c8>
 8006dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dda:	445a      	add	r2, fp
 8006ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8006dde:	f89a 3000 	ldrb.w	r3, [sl]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 80a2 	beq.w	8006f2c <_svfiprintf_r+0x1c8>
 8006de8:	2300      	movs	r3, #0
 8006dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006df2:	f10a 0a01 	add.w	sl, sl, #1
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	9307      	str	r3, [sp, #28]
 8006dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8006e00:	4654      	mov	r4, sl
 8006e02:	2205      	movs	r2, #5
 8006e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e08:	4851      	ldr	r0, [pc, #324]	; (8006f50 <_svfiprintf_r+0x1ec>)
 8006e0a:	f7f9 f9e1 	bl	80001d0 <memchr>
 8006e0e:	9a04      	ldr	r2, [sp, #16]
 8006e10:	b9d8      	cbnz	r0, 8006e4a <_svfiprintf_r+0xe6>
 8006e12:	06d0      	lsls	r0, r2, #27
 8006e14:	bf44      	itt	mi
 8006e16:	2320      	movmi	r3, #32
 8006e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e1c:	0711      	lsls	r1, r2, #28
 8006e1e:	bf44      	itt	mi
 8006e20:	232b      	movmi	r3, #43	; 0x2b
 8006e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e26:	f89a 3000 	ldrb.w	r3, [sl]
 8006e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e2c:	d015      	beq.n	8006e5a <_svfiprintf_r+0xf6>
 8006e2e:	9a07      	ldr	r2, [sp, #28]
 8006e30:	4654      	mov	r4, sl
 8006e32:	2000      	movs	r0, #0
 8006e34:	f04f 0c0a 	mov.w	ip, #10
 8006e38:	4621      	mov	r1, r4
 8006e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e3e:	3b30      	subs	r3, #48	; 0x30
 8006e40:	2b09      	cmp	r3, #9
 8006e42:	d94e      	bls.n	8006ee2 <_svfiprintf_r+0x17e>
 8006e44:	b1b0      	cbz	r0, 8006e74 <_svfiprintf_r+0x110>
 8006e46:	9207      	str	r2, [sp, #28]
 8006e48:	e014      	b.n	8006e74 <_svfiprintf_r+0x110>
 8006e4a:	eba0 0308 	sub.w	r3, r0, r8
 8006e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e52:	4313      	orrs	r3, r2
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	46a2      	mov	sl, r4
 8006e58:	e7d2      	b.n	8006e00 <_svfiprintf_r+0x9c>
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	1d19      	adds	r1, r3, #4
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	9103      	str	r1, [sp, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bfbb      	ittet	lt
 8006e66:	425b      	neglt	r3, r3
 8006e68:	f042 0202 	orrlt.w	r2, r2, #2
 8006e6c:	9307      	strge	r3, [sp, #28]
 8006e6e:	9307      	strlt	r3, [sp, #28]
 8006e70:	bfb8      	it	lt
 8006e72:	9204      	strlt	r2, [sp, #16]
 8006e74:	7823      	ldrb	r3, [r4, #0]
 8006e76:	2b2e      	cmp	r3, #46	; 0x2e
 8006e78:	d10c      	bne.n	8006e94 <_svfiprintf_r+0x130>
 8006e7a:	7863      	ldrb	r3, [r4, #1]
 8006e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e7e:	d135      	bne.n	8006eec <_svfiprintf_r+0x188>
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	1d1a      	adds	r2, r3, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	9203      	str	r2, [sp, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	bfb8      	it	lt
 8006e8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e90:	3402      	adds	r4, #2
 8006e92:	9305      	str	r3, [sp, #20]
 8006e94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f60 <_svfiprintf_r+0x1fc>
 8006e98:	7821      	ldrb	r1, [r4, #0]
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	4650      	mov	r0, sl
 8006e9e:	f7f9 f997 	bl	80001d0 <memchr>
 8006ea2:	b140      	cbz	r0, 8006eb6 <_svfiprintf_r+0x152>
 8006ea4:	2340      	movs	r3, #64	; 0x40
 8006ea6:	eba0 000a 	sub.w	r0, r0, sl
 8006eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	4303      	orrs	r3, r0
 8006eb2:	3401      	adds	r4, #1
 8006eb4:	9304      	str	r3, [sp, #16]
 8006eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eba:	4826      	ldr	r0, [pc, #152]	; (8006f54 <_svfiprintf_r+0x1f0>)
 8006ebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ec0:	2206      	movs	r2, #6
 8006ec2:	f7f9 f985 	bl	80001d0 <memchr>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d038      	beq.n	8006f3c <_svfiprintf_r+0x1d8>
 8006eca:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <_svfiprintf_r+0x1f4>)
 8006ecc:	bb1b      	cbnz	r3, 8006f16 <_svfiprintf_r+0x1b2>
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	3307      	adds	r3, #7
 8006ed2:	f023 0307 	bic.w	r3, r3, #7
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	9303      	str	r3, [sp, #12]
 8006eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006edc:	4433      	add	r3, r6
 8006ede:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee0:	e767      	b.n	8006db2 <_svfiprintf_r+0x4e>
 8006ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	2001      	movs	r0, #1
 8006eea:	e7a5      	b.n	8006e38 <_svfiprintf_r+0xd4>
 8006eec:	2300      	movs	r3, #0
 8006eee:	3401      	adds	r4, #1
 8006ef0:	9305      	str	r3, [sp, #20]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f04f 0c0a 	mov.w	ip, #10
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006efe:	3a30      	subs	r2, #48	; 0x30
 8006f00:	2a09      	cmp	r2, #9
 8006f02:	d903      	bls.n	8006f0c <_svfiprintf_r+0x1a8>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0c5      	beq.n	8006e94 <_svfiprintf_r+0x130>
 8006f08:	9105      	str	r1, [sp, #20]
 8006f0a:	e7c3      	b.n	8006e94 <_svfiprintf_r+0x130>
 8006f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f10:	4604      	mov	r4, r0
 8006f12:	2301      	movs	r3, #1
 8006f14:	e7f0      	b.n	8006ef8 <_svfiprintf_r+0x194>
 8006f16:	ab03      	add	r3, sp, #12
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <_svfiprintf_r+0x1f8>)
 8006f1e:	a904      	add	r1, sp, #16
 8006f20:	4638      	mov	r0, r7
 8006f22:	f3af 8000 	nop.w
 8006f26:	1c42      	adds	r2, r0, #1
 8006f28:	4606      	mov	r6, r0
 8006f2a:	d1d6      	bne.n	8006eda <_svfiprintf_r+0x176>
 8006f2c:	89ab      	ldrh	r3, [r5, #12]
 8006f2e:	065b      	lsls	r3, r3, #25
 8006f30:	f53f af2c 	bmi.w	8006d8c <_svfiprintf_r+0x28>
 8006f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f36:	b01d      	add	sp, #116	; 0x74
 8006f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3c:	ab03      	add	r3, sp, #12
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	462a      	mov	r2, r5
 8006f42:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <_svfiprintf_r+0x1f8>)
 8006f44:	a904      	add	r1, sp, #16
 8006f46:	4638      	mov	r0, r7
 8006f48:	f000 f87a 	bl	8007040 <_printf_i>
 8006f4c:	e7eb      	b.n	8006f26 <_svfiprintf_r+0x1c2>
 8006f4e:	bf00      	nop
 8006f50:	0800754c 	.word	0x0800754c
 8006f54:	08007556 	.word	0x08007556
 8006f58:	00000000 	.word	0x00000000
 8006f5c:	08006cad 	.word	0x08006cad
 8006f60:	08007552 	.word	0x08007552

08006f64 <_printf_common>:
 8006f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f68:	4616      	mov	r6, r2
 8006f6a:	4699      	mov	r9, r3
 8006f6c:	688a      	ldr	r2, [r1, #8]
 8006f6e:	690b      	ldr	r3, [r1, #16]
 8006f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f74:	4293      	cmp	r3, r2
 8006f76:	bfb8      	it	lt
 8006f78:	4613      	movlt	r3, r2
 8006f7a:	6033      	str	r3, [r6, #0]
 8006f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f80:	4607      	mov	r7, r0
 8006f82:	460c      	mov	r4, r1
 8006f84:	b10a      	cbz	r2, 8006f8a <_printf_common+0x26>
 8006f86:	3301      	adds	r3, #1
 8006f88:	6033      	str	r3, [r6, #0]
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	0699      	lsls	r1, r3, #26
 8006f8e:	bf42      	ittt	mi
 8006f90:	6833      	ldrmi	r3, [r6, #0]
 8006f92:	3302      	addmi	r3, #2
 8006f94:	6033      	strmi	r3, [r6, #0]
 8006f96:	6825      	ldr	r5, [r4, #0]
 8006f98:	f015 0506 	ands.w	r5, r5, #6
 8006f9c:	d106      	bne.n	8006fac <_printf_common+0x48>
 8006f9e:	f104 0a19 	add.w	sl, r4, #25
 8006fa2:	68e3      	ldr	r3, [r4, #12]
 8006fa4:	6832      	ldr	r2, [r6, #0]
 8006fa6:	1a9b      	subs	r3, r3, r2
 8006fa8:	42ab      	cmp	r3, r5
 8006faa:	dc26      	bgt.n	8006ffa <_printf_common+0x96>
 8006fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fb0:	1e13      	subs	r3, r2, #0
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	bf18      	it	ne
 8006fb6:	2301      	movne	r3, #1
 8006fb8:	0692      	lsls	r2, r2, #26
 8006fba:	d42b      	bmi.n	8007014 <_printf_common+0xb0>
 8006fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	47c0      	blx	r8
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d01e      	beq.n	8007008 <_printf_common+0xa4>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	68e5      	ldr	r5, [r4, #12]
 8006fce:	6832      	ldr	r2, [r6, #0]
 8006fd0:	f003 0306 	and.w	r3, r3, #6
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	bf08      	it	eq
 8006fd8:	1aad      	subeq	r5, r5, r2
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	6922      	ldr	r2, [r4, #16]
 8006fde:	bf0c      	ite	eq
 8006fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fe4:	2500      	movne	r5, #0
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	bfc4      	itt	gt
 8006fea:	1a9b      	subgt	r3, r3, r2
 8006fec:	18ed      	addgt	r5, r5, r3
 8006fee:	2600      	movs	r6, #0
 8006ff0:	341a      	adds	r4, #26
 8006ff2:	42b5      	cmp	r5, r6
 8006ff4:	d11a      	bne.n	800702c <_printf_common+0xc8>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e008      	b.n	800700c <_printf_common+0xa8>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4652      	mov	r2, sl
 8006ffe:	4649      	mov	r1, r9
 8007000:	4638      	mov	r0, r7
 8007002:	47c0      	blx	r8
 8007004:	3001      	adds	r0, #1
 8007006:	d103      	bne.n	8007010 <_printf_common+0xac>
 8007008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800700c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007010:	3501      	adds	r5, #1
 8007012:	e7c6      	b.n	8006fa2 <_printf_common+0x3e>
 8007014:	18e1      	adds	r1, r4, r3
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	2030      	movs	r0, #48	; 0x30
 800701a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800701e:	4422      	add	r2, r4
 8007020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007028:	3302      	adds	r3, #2
 800702a:	e7c7      	b.n	8006fbc <_printf_common+0x58>
 800702c:	2301      	movs	r3, #1
 800702e:	4622      	mov	r2, r4
 8007030:	4649      	mov	r1, r9
 8007032:	4638      	mov	r0, r7
 8007034:	47c0      	blx	r8
 8007036:	3001      	adds	r0, #1
 8007038:	d0e6      	beq.n	8007008 <_printf_common+0xa4>
 800703a:	3601      	adds	r6, #1
 800703c:	e7d9      	b.n	8006ff2 <_printf_common+0x8e>
	...

08007040 <_printf_i>:
 8007040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	460c      	mov	r4, r1
 8007046:	4691      	mov	r9, r2
 8007048:	7e27      	ldrb	r7, [r4, #24]
 800704a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800704c:	2f78      	cmp	r7, #120	; 0x78
 800704e:	4680      	mov	r8, r0
 8007050:	469a      	mov	sl, r3
 8007052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007056:	d807      	bhi.n	8007068 <_printf_i+0x28>
 8007058:	2f62      	cmp	r7, #98	; 0x62
 800705a:	d80a      	bhi.n	8007072 <_printf_i+0x32>
 800705c:	2f00      	cmp	r7, #0
 800705e:	f000 80d8 	beq.w	8007212 <_printf_i+0x1d2>
 8007062:	2f58      	cmp	r7, #88	; 0x58
 8007064:	f000 80a3 	beq.w	80071ae <_printf_i+0x16e>
 8007068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800706c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007070:	e03a      	b.n	80070e8 <_printf_i+0xa8>
 8007072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007076:	2b15      	cmp	r3, #21
 8007078:	d8f6      	bhi.n	8007068 <_printf_i+0x28>
 800707a:	a001      	add	r0, pc, #4	; (adr r0, 8007080 <_printf_i+0x40>)
 800707c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007080:	080070d9 	.word	0x080070d9
 8007084:	080070ed 	.word	0x080070ed
 8007088:	08007069 	.word	0x08007069
 800708c:	08007069 	.word	0x08007069
 8007090:	08007069 	.word	0x08007069
 8007094:	08007069 	.word	0x08007069
 8007098:	080070ed 	.word	0x080070ed
 800709c:	08007069 	.word	0x08007069
 80070a0:	08007069 	.word	0x08007069
 80070a4:	08007069 	.word	0x08007069
 80070a8:	08007069 	.word	0x08007069
 80070ac:	080071f9 	.word	0x080071f9
 80070b0:	0800711d 	.word	0x0800711d
 80070b4:	080071db 	.word	0x080071db
 80070b8:	08007069 	.word	0x08007069
 80070bc:	08007069 	.word	0x08007069
 80070c0:	0800721b 	.word	0x0800721b
 80070c4:	08007069 	.word	0x08007069
 80070c8:	0800711d 	.word	0x0800711d
 80070cc:	08007069 	.word	0x08007069
 80070d0:	08007069 	.word	0x08007069
 80070d4:	080071e3 	.word	0x080071e3
 80070d8:	680b      	ldr	r3, [r1, #0]
 80070da:	1d1a      	adds	r2, r3, #4
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	600a      	str	r2, [r1, #0]
 80070e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0a3      	b.n	8007234 <_printf_i+0x1f4>
 80070ec:	6825      	ldr	r5, [r4, #0]
 80070ee:	6808      	ldr	r0, [r1, #0]
 80070f0:	062e      	lsls	r6, r5, #24
 80070f2:	f100 0304 	add.w	r3, r0, #4
 80070f6:	d50a      	bpl.n	800710e <_printf_i+0xce>
 80070f8:	6805      	ldr	r5, [r0, #0]
 80070fa:	600b      	str	r3, [r1, #0]
 80070fc:	2d00      	cmp	r5, #0
 80070fe:	da03      	bge.n	8007108 <_printf_i+0xc8>
 8007100:	232d      	movs	r3, #45	; 0x2d
 8007102:	426d      	negs	r5, r5
 8007104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007108:	485e      	ldr	r0, [pc, #376]	; (8007284 <_printf_i+0x244>)
 800710a:	230a      	movs	r3, #10
 800710c:	e019      	b.n	8007142 <_printf_i+0x102>
 800710e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007112:	6805      	ldr	r5, [r0, #0]
 8007114:	600b      	str	r3, [r1, #0]
 8007116:	bf18      	it	ne
 8007118:	b22d      	sxthne	r5, r5
 800711a:	e7ef      	b.n	80070fc <_printf_i+0xbc>
 800711c:	680b      	ldr	r3, [r1, #0]
 800711e:	6825      	ldr	r5, [r4, #0]
 8007120:	1d18      	adds	r0, r3, #4
 8007122:	6008      	str	r0, [r1, #0]
 8007124:	0628      	lsls	r0, r5, #24
 8007126:	d501      	bpl.n	800712c <_printf_i+0xec>
 8007128:	681d      	ldr	r5, [r3, #0]
 800712a:	e002      	b.n	8007132 <_printf_i+0xf2>
 800712c:	0669      	lsls	r1, r5, #25
 800712e:	d5fb      	bpl.n	8007128 <_printf_i+0xe8>
 8007130:	881d      	ldrh	r5, [r3, #0]
 8007132:	4854      	ldr	r0, [pc, #336]	; (8007284 <_printf_i+0x244>)
 8007134:	2f6f      	cmp	r7, #111	; 0x6f
 8007136:	bf0c      	ite	eq
 8007138:	2308      	moveq	r3, #8
 800713a:	230a      	movne	r3, #10
 800713c:	2100      	movs	r1, #0
 800713e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007142:	6866      	ldr	r6, [r4, #4]
 8007144:	60a6      	str	r6, [r4, #8]
 8007146:	2e00      	cmp	r6, #0
 8007148:	bfa2      	ittt	ge
 800714a:	6821      	ldrge	r1, [r4, #0]
 800714c:	f021 0104 	bicge.w	r1, r1, #4
 8007150:	6021      	strge	r1, [r4, #0]
 8007152:	b90d      	cbnz	r5, 8007158 <_printf_i+0x118>
 8007154:	2e00      	cmp	r6, #0
 8007156:	d04d      	beq.n	80071f4 <_printf_i+0x1b4>
 8007158:	4616      	mov	r6, r2
 800715a:	fbb5 f1f3 	udiv	r1, r5, r3
 800715e:	fb03 5711 	mls	r7, r3, r1, r5
 8007162:	5dc7      	ldrb	r7, [r0, r7]
 8007164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007168:	462f      	mov	r7, r5
 800716a:	42bb      	cmp	r3, r7
 800716c:	460d      	mov	r5, r1
 800716e:	d9f4      	bls.n	800715a <_printf_i+0x11a>
 8007170:	2b08      	cmp	r3, #8
 8007172:	d10b      	bne.n	800718c <_printf_i+0x14c>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	07df      	lsls	r7, r3, #31
 8007178:	d508      	bpl.n	800718c <_printf_i+0x14c>
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	6861      	ldr	r1, [r4, #4]
 800717e:	4299      	cmp	r1, r3
 8007180:	bfde      	ittt	le
 8007182:	2330      	movle	r3, #48	; 0x30
 8007184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007188:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800718c:	1b92      	subs	r2, r2, r6
 800718e:	6122      	str	r2, [r4, #16]
 8007190:	f8cd a000 	str.w	sl, [sp]
 8007194:	464b      	mov	r3, r9
 8007196:	aa03      	add	r2, sp, #12
 8007198:	4621      	mov	r1, r4
 800719a:	4640      	mov	r0, r8
 800719c:	f7ff fee2 	bl	8006f64 <_printf_common>
 80071a0:	3001      	adds	r0, #1
 80071a2:	d14c      	bne.n	800723e <_printf_i+0x1fe>
 80071a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071a8:	b004      	add	sp, #16
 80071aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ae:	4835      	ldr	r0, [pc, #212]	; (8007284 <_printf_i+0x244>)
 80071b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	680e      	ldr	r6, [r1, #0]
 80071b8:	061f      	lsls	r7, r3, #24
 80071ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80071be:	600e      	str	r6, [r1, #0]
 80071c0:	d514      	bpl.n	80071ec <_printf_i+0x1ac>
 80071c2:	07d9      	lsls	r1, r3, #31
 80071c4:	bf44      	itt	mi
 80071c6:	f043 0320 	orrmi.w	r3, r3, #32
 80071ca:	6023      	strmi	r3, [r4, #0]
 80071cc:	b91d      	cbnz	r5, 80071d6 <_printf_i+0x196>
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	f023 0320 	bic.w	r3, r3, #32
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	2310      	movs	r3, #16
 80071d8:	e7b0      	b.n	800713c <_printf_i+0xfc>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	f043 0320 	orr.w	r3, r3, #32
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	2378      	movs	r3, #120	; 0x78
 80071e4:	4828      	ldr	r0, [pc, #160]	; (8007288 <_printf_i+0x248>)
 80071e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071ea:	e7e3      	b.n	80071b4 <_printf_i+0x174>
 80071ec:	065e      	lsls	r6, r3, #25
 80071ee:	bf48      	it	mi
 80071f0:	b2ad      	uxthmi	r5, r5
 80071f2:	e7e6      	b.n	80071c2 <_printf_i+0x182>
 80071f4:	4616      	mov	r6, r2
 80071f6:	e7bb      	b.n	8007170 <_printf_i+0x130>
 80071f8:	680b      	ldr	r3, [r1, #0]
 80071fa:	6826      	ldr	r6, [r4, #0]
 80071fc:	6960      	ldr	r0, [r4, #20]
 80071fe:	1d1d      	adds	r5, r3, #4
 8007200:	600d      	str	r5, [r1, #0]
 8007202:	0635      	lsls	r5, r6, #24
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	d501      	bpl.n	800720c <_printf_i+0x1cc>
 8007208:	6018      	str	r0, [r3, #0]
 800720a:	e002      	b.n	8007212 <_printf_i+0x1d2>
 800720c:	0671      	lsls	r1, r6, #25
 800720e:	d5fb      	bpl.n	8007208 <_printf_i+0x1c8>
 8007210:	8018      	strh	r0, [r3, #0]
 8007212:	2300      	movs	r3, #0
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	4616      	mov	r6, r2
 8007218:	e7ba      	b.n	8007190 <_printf_i+0x150>
 800721a:	680b      	ldr	r3, [r1, #0]
 800721c:	1d1a      	adds	r2, r3, #4
 800721e:	600a      	str	r2, [r1, #0]
 8007220:	681e      	ldr	r6, [r3, #0]
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	2100      	movs	r1, #0
 8007226:	4630      	mov	r0, r6
 8007228:	f7f8 ffd2 	bl	80001d0 <memchr>
 800722c:	b108      	cbz	r0, 8007232 <_printf_i+0x1f2>
 800722e:	1b80      	subs	r0, r0, r6
 8007230:	6060      	str	r0, [r4, #4]
 8007232:	6863      	ldr	r3, [r4, #4]
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	2300      	movs	r3, #0
 8007238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800723c:	e7a8      	b.n	8007190 <_printf_i+0x150>
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	47d0      	blx	sl
 8007248:	3001      	adds	r0, #1
 800724a:	d0ab      	beq.n	80071a4 <_printf_i+0x164>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	079b      	lsls	r3, r3, #30
 8007250:	d413      	bmi.n	800727a <_printf_i+0x23a>
 8007252:	68e0      	ldr	r0, [r4, #12]
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	4298      	cmp	r0, r3
 8007258:	bfb8      	it	lt
 800725a:	4618      	movlt	r0, r3
 800725c:	e7a4      	b.n	80071a8 <_printf_i+0x168>
 800725e:	2301      	movs	r3, #1
 8007260:	4632      	mov	r2, r6
 8007262:	4649      	mov	r1, r9
 8007264:	4640      	mov	r0, r8
 8007266:	47d0      	blx	sl
 8007268:	3001      	adds	r0, #1
 800726a:	d09b      	beq.n	80071a4 <_printf_i+0x164>
 800726c:	3501      	adds	r5, #1
 800726e:	68e3      	ldr	r3, [r4, #12]
 8007270:	9903      	ldr	r1, [sp, #12]
 8007272:	1a5b      	subs	r3, r3, r1
 8007274:	42ab      	cmp	r3, r5
 8007276:	dcf2      	bgt.n	800725e <_printf_i+0x21e>
 8007278:	e7eb      	b.n	8007252 <_printf_i+0x212>
 800727a:	2500      	movs	r5, #0
 800727c:	f104 0619 	add.w	r6, r4, #25
 8007280:	e7f5      	b.n	800726e <_printf_i+0x22e>
 8007282:	bf00      	nop
 8007284:	0800755d 	.word	0x0800755d
 8007288:	0800756e 	.word	0x0800756e

0800728c <memcpy>:
 800728c:	440a      	add	r2, r1
 800728e:	4291      	cmp	r1, r2
 8007290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007294:	d100      	bne.n	8007298 <memcpy+0xc>
 8007296:	4770      	bx	lr
 8007298:	b510      	push	{r4, lr}
 800729a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800729e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072a2:	4291      	cmp	r1, r2
 80072a4:	d1f9      	bne.n	800729a <memcpy+0xe>
 80072a6:	bd10      	pop	{r4, pc}

080072a8 <memmove>:
 80072a8:	4288      	cmp	r0, r1
 80072aa:	b510      	push	{r4, lr}
 80072ac:	eb01 0402 	add.w	r4, r1, r2
 80072b0:	d902      	bls.n	80072b8 <memmove+0x10>
 80072b2:	4284      	cmp	r4, r0
 80072b4:	4623      	mov	r3, r4
 80072b6:	d807      	bhi.n	80072c8 <memmove+0x20>
 80072b8:	1e43      	subs	r3, r0, #1
 80072ba:	42a1      	cmp	r1, r4
 80072bc:	d008      	beq.n	80072d0 <memmove+0x28>
 80072be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072c6:	e7f8      	b.n	80072ba <memmove+0x12>
 80072c8:	4402      	add	r2, r0
 80072ca:	4601      	mov	r1, r0
 80072cc:	428a      	cmp	r2, r1
 80072ce:	d100      	bne.n	80072d2 <memmove+0x2a>
 80072d0:	bd10      	pop	{r4, pc}
 80072d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072da:	e7f7      	b.n	80072cc <memmove+0x24>

080072dc <_free_r>:
 80072dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072de:	2900      	cmp	r1, #0
 80072e0:	d048      	beq.n	8007374 <_free_r+0x98>
 80072e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e6:	9001      	str	r0, [sp, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f1a1 0404 	sub.w	r4, r1, #4
 80072ee:	bfb8      	it	lt
 80072f0:	18e4      	addlt	r4, r4, r3
 80072f2:	f000 f8d3 	bl	800749c <__malloc_lock>
 80072f6:	4a20      	ldr	r2, [pc, #128]	; (8007378 <_free_r+0x9c>)
 80072f8:	9801      	ldr	r0, [sp, #4]
 80072fa:	6813      	ldr	r3, [r2, #0]
 80072fc:	4615      	mov	r5, r2
 80072fe:	b933      	cbnz	r3, 800730e <_free_r+0x32>
 8007300:	6063      	str	r3, [r4, #4]
 8007302:	6014      	str	r4, [r2, #0]
 8007304:	b003      	add	sp, #12
 8007306:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800730a:	f000 b8cd 	b.w	80074a8 <__malloc_unlock>
 800730e:	42a3      	cmp	r3, r4
 8007310:	d90b      	bls.n	800732a <_free_r+0x4e>
 8007312:	6821      	ldr	r1, [r4, #0]
 8007314:	1862      	adds	r2, r4, r1
 8007316:	4293      	cmp	r3, r2
 8007318:	bf04      	itt	eq
 800731a:	681a      	ldreq	r2, [r3, #0]
 800731c:	685b      	ldreq	r3, [r3, #4]
 800731e:	6063      	str	r3, [r4, #4]
 8007320:	bf04      	itt	eq
 8007322:	1852      	addeq	r2, r2, r1
 8007324:	6022      	streq	r2, [r4, #0]
 8007326:	602c      	str	r4, [r5, #0]
 8007328:	e7ec      	b.n	8007304 <_free_r+0x28>
 800732a:	461a      	mov	r2, r3
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	b10b      	cbz	r3, 8007334 <_free_r+0x58>
 8007330:	42a3      	cmp	r3, r4
 8007332:	d9fa      	bls.n	800732a <_free_r+0x4e>
 8007334:	6811      	ldr	r1, [r2, #0]
 8007336:	1855      	adds	r5, r2, r1
 8007338:	42a5      	cmp	r5, r4
 800733a:	d10b      	bne.n	8007354 <_free_r+0x78>
 800733c:	6824      	ldr	r4, [r4, #0]
 800733e:	4421      	add	r1, r4
 8007340:	1854      	adds	r4, r2, r1
 8007342:	42a3      	cmp	r3, r4
 8007344:	6011      	str	r1, [r2, #0]
 8007346:	d1dd      	bne.n	8007304 <_free_r+0x28>
 8007348:	681c      	ldr	r4, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	6053      	str	r3, [r2, #4]
 800734e:	4421      	add	r1, r4
 8007350:	6011      	str	r1, [r2, #0]
 8007352:	e7d7      	b.n	8007304 <_free_r+0x28>
 8007354:	d902      	bls.n	800735c <_free_r+0x80>
 8007356:	230c      	movs	r3, #12
 8007358:	6003      	str	r3, [r0, #0]
 800735a:	e7d3      	b.n	8007304 <_free_r+0x28>
 800735c:	6825      	ldr	r5, [r4, #0]
 800735e:	1961      	adds	r1, r4, r5
 8007360:	428b      	cmp	r3, r1
 8007362:	bf04      	itt	eq
 8007364:	6819      	ldreq	r1, [r3, #0]
 8007366:	685b      	ldreq	r3, [r3, #4]
 8007368:	6063      	str	r3, [r4, #4]
 800736a:	bf04      	itt	eq
 800736c:	1949      	addeq	r1, r1, r5
 800736e:	6021      	streq	r1, [r4, #0]
 8007370:	6054      	str	r4, [r2, #4]
 8007372:	e7c7      	b.n	8007304 <_free_r+0x28>
 8007374:	b003      	add	sp, #12
 8007376:	bd30      	pop	{r4, r5, pc}
 8007378:	20000090 	.word	0x20000090

0800737c <_malloc_r>:
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	1ccd      	adds	r5, r1, #3
 8007380:	f025 0503 	bic.w	r5, r5, #3
 8007384:	3508      	adds	r5, #8
 8007386:	2d0c      	cmp	r5, #12
 8007388:	bf38      	it	cc
 800738a:	250c      	movcc	r5, #12
 800738c:	2d00      	cmp	r5, #0
 800738e:	4606      	mov	r6, r0
 8007390:	db01      	blt.n	8007396 <_malloc_r+0x1a>
 8007392:	42a9      	cmp	r1, r5
 8007394:	d903      	bls.n	800739e <_malloc_r+0x22>
 8007396:	230c      	movs	r3, #12
 8007398:	6033      	str	r3, [r6, #0]
 800739a:	2000      	movs	r0, #0
 800739c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800739e:	f000 f87d 	bl	800749c <__malloc_lock>
 80073a2:	4921      	ldr	r1, [pc, #132]	; (8007428 <_malloc_r+0xac>)
 80073a4:	680a      	ldr	r2, [r1, #0]
 80073a6:	4614      	mov	r4, r2
 80073a8:	b99c      	cbnz	r4, 80073d2 <_malloc_r+0x56>
 80073aa:	4f20      	ldr	r7, [pc, #128]	; (800742c <_malloc_r+0xb0>)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	b923      	cbnz	r3, 80073ba <_malloc_r+0x3e>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 f862 	bl	800747c <_sbrk_r>
 80073b8:	6038      	str	r0, [r7, #0]
 80073ba:	4629      	mov	r1, r5
 80073bc:	4630      	mov	r0, r6
 80073be:	f000 f85d 	bl	800747c <_sbrk_r>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	d123      	bne.n	800740e <_malloc_r+0x92>
 80073c6:	230c      	movs	r3, #12
 80073c8:	6033      	str	r3, [r6, #0]
 80073ca:	4630      	mov	r0, r6
 80073cc:	f000 f86c 	bl	80074a8 <__malloc_unlock>
 80073d0:	e7e3      	b.n	800739a <_malloc_r+0x1e>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	1b5b      	subs	r3, r3, r5
 80073d6:	d417      	bmi.n	8007408 <_malloc_r+0x8c>
 80073d8:	2b0b      	cmp	r3, #11
 80073da:	d903      	bls.n	80073e4 <_malloc_r+0x68>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	441c      	add	r4, r3
 80073e0:	6025      	str	r5, [r4, #0]
 80073e2:	e004      	b.n	80073ee <_malloc_r+0x72>
 80073e4:	6863      	ldr	r3, [r4, #4]
 80073e6:	42a2      	cmp	r2, r4
 80073e8:	bf0c      	ite	eq
 80073ea:	600b      	streq	r3, [r1, #0]
 80073ec:	6053      	strne	r3, [r2, #4]
 80073ee:	4630      	mov	r0, r6
 80073f0:	f000 f85a 	bl	80074a8 <__malloc_unlock>
 80073f4:	f104 000b 	add.w	r0, r4, #11
 80073f8:	1d23      	adds	r3, r4, #4
 80073fa:	f020 0007 	bic.w	r0, r0, #7
 80073fe:	1ac2      	subs	r2, r0, r3
 8007400:	d0cc      	beq.n	800739c <_malloc_r+0x20>
 8007402:	1a1b      	subs	r3, r3, r0
 8007404:	50a3      	str	r3, [r4, r2]
 8007406:	e7c9      	b.n	800739c <_malloc_r+0x20>
 8007408:	4622      	mov	r2, r4
 800740a:	6864      	ldr	r4, [r4, #4]
 800740c:	e7cc      	b.n	80073a8 <_malloc_r+0x2c>
 800740e:	1cc4      	adds	r4, r0, #3
 8007410:	f024 0403 	bic.w	r4, r4, #3
 8007414:	42a0      	cmp	r0, r4
 8007416:	d0e3      	beq.n	80073e0 <_malloc_r+0x64>
 8007418:	1a21      	subs	r1, r4, r0
 800741a:	4630      	mov	r0, r6
 800741c:	f000 f82e 	bl	800747c <_sbrk_r>
 8007420:	3001      	adds	r0, #1
 8007422:	d1dd      	bne.n	80073e0 <_malloc_r+0x64>
 8007424:	e7cf      	b.n	80073c6 <_malloc_r+0x4a>
 8007426:	bf00      	nop
 8007428:	20000090 	.word	0x20000090
 800742c:	20000094 	.word	0x20000094

08007430 <_realloc_r>:
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007432:	4607      	mov	r7, r0
 8007434:	4614      	mov	r4, r2
 8007436:	460e      	mov	r6, r1
 8007438:	b921      	cbnz	r1, 8007444 <_realloc_r+0x14>
 800743a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800743e:	4611      	mov	r1, r2
 8007440:	f7ff bf9c 	b.w	800737c <_malloc_r>
 8007444:	b922      	cbnz	r2, 8007450 <_realloc_r+0x20>
 8007446:	f7ff ff49 	bl	80072dc <_free_r>
 800744a:	4625      	mov	r5, r4
 800744c:	4628      	mov	r0, r5
 800744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007450:	f000 f830 	bl	80074b4 <_malloc_usable_size_r>
 8007454:	42a0      	cmp	r0, r4
 8007456:	d20f      	bcs.n	8007478 <_realloc_r+0x48>
 8007458:	4621      	mov	r1, r4
 800745a:	4638      	mov	r0, r7
 800745c:	f7ff ff8e 	bl	800737c <_malloc_r>
 8007460:	4605      	mov	r5, r0
 8007462:	2800      	cmp	r0, #0
 8007464:	d0f2      	beq.n	800744c <_realloc_r+0x1c>
 8007466:	4631      	mov	r1, r6
 8007468:	4622      	mov	r2, r4
 800746a:	f7ff ff0f 	bl	800728c <memcpy>
 800746e:	4631      	mov	r1, r6
 8007470:	4638      	mov	r0, r7
 8007472:	f7ff ff33 	bl	80072dc <_free_r>
 8007476:	e7e9      	b.n	800744c <_realloc_r+0x1c>
 8007478:	4635      	mov	r5, r6
 800747a:	e7e7      	b.n	800744c <_realloc_r+0x1c>

0800747c <_sbrk_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4d06      	ldr	r5, [pc, #24]	; (8007498 <_sbrk_r+0x1c>)
 8007480:	2300      	movs	r3, #0
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	f7f9 ff6e 	bl	8001368 <_sbrk>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_sbrk_r+0x1a>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_sbrk_r+0x1a>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	20000708 	.word	0x20000708

0800749c <__malloc_lock>:
 800749c:	4801      	ldr	r0, [pc, #4]	; (80074a4 <__malloc_lock+0x8>)
 800749e:	f000 b811 	b.w	80074c4 <__retarget_lock_acquire_recursive>
 80074a2:	bf00      	nop
 80074a4:	20000710 	.word	0x20000710

080074a8 <__malloc_unlock>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__malloc_unlock+0x8>)
 80074aa:	f000 b80c 	b.w	80074c6 <__retarget_lock_release_recursive>
 80074ae:	bf00      	nop
 80074b0:	20000710 	.word	0x20000710

080074b4 <_malloc_usable_size_r>:
 80074b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b8:	1f18      	subs	r0, r3, #4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	bfbc      	itt	lt
 80074be:	580b      	ldrlt	r3, [r1, r0]
 80074c0:	18c0      	addlt	r0, r0, r3
 80074c2:	4770      	bx	lr

080074c4 <__retarget_lock_acquire_recursive>:
 80074c4:	4770      	bx	lr

080074c6 <__retarget_lock_release_recursive>:
 80074c6:	4770      	bx	lr

080074c8 <_init>:
 80074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ca:	bf00      	nop
 80074cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ce:	bc08      	pop	{r3}
 80074d0:	469e      	mov	lr, r3
 80074d2:	4770      	bx	lr

080074d4 <_fini>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	bf00      	nop
 80074d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074da:	bc08      	pop	{r3}
 80074dc:	469e      	mov	lr, r3
 80074de:	4770      	bx	lr
